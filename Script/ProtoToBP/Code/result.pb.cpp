// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#include "result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR CSDTObserveInfo::CSDTObserveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.observecount_)*/0u
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTObserveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTObserveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTObserveInfoDefaultTypeInternal() {}
  union {
    CSDTObserveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTObserveInfoDefaultTypeInternal _CSDTObserveInfo_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_result_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_result_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_result_2eproto = nullptr;

const uint32_t TableStruct_result_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTObserveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTObserveInfo, _impl_.observecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTObserveInfo, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTObserveInfo, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::CSDTObserveInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_CSDTObserveInfo_default_instance_._instance,
};

const char descriptor_table_protodef_result_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014result.proto\022\003msg\"S\n\017CSDTObserveInfo\022\024"
  "\n\014ObserveCount\030\001 \001(\r\022\r\n\005PvpId\030\002 \001(\004\022\033\n\006R"
  "esult\030\003 \001(\0162\013.msg.RESULT*\2148\n\006RESULT\022\013\n\007S"
  "UCCESS\020\000\022\010\n\004FAIL\020\001\022\017\n\013SERVER_STOP\020\002\022\022\n\016S"
  "ERVER_CLOSING\020\003\022\025\n\021VERSION_NOT_ALLOW\020\004\022\024"
  "\n\020WAIT_COUNT_LIMIT\020\005\022\022\n\016AUTHENTIC_FAIL\020\006"
  "\022\013\n\007TIMEOUT\020\007\022\021\n\rTEAM_MATCHING\020\010\022 \n\034LY_W"
  "HITE_LIST_AUTHENTIC_FAIL\020\t\022\022\n\016ACCOUNT_FR"
  "OZED\020\n\022\016\n\nDEV_FROZED\020\013\022\016\n\nDIRTY_WORD\020\014\022\023"
  "\n\017CDKEY_NOT_EXIST\020\r\022\032\n\026CDKEY_CHANNEL_MIS"
  "MATCH\020\016\022\021\n\rCDKEY_IS_USED\020\017\022\025\n\021CDKEY_OUT_"
  "OF_DATE\020\020\022\032\n\026CDKEY_GIFT_ALREADY_GET\020\021\022\035\n"
  "\031ACTIVECODE_AUTHENTIC_FAIL\020\022\022\026\n\022WORLD_CH"
  "AT_SILENCE\020\023\022\030\n\024APKVERSION_NOT_MATCH\020\024\022!"
  "\n\035PVP_RESOURCEVERSION_NOT_MATCH\020\025\022\024\n\020WOR"
  "LD_CHAT_LIMIT\020\026\022\024\n\020VERIFY_GATE_ADDR\020\027\022\022\n"
  "\016TEAM_DISMISSED\020\030\022\017\n\013TEAM_PVPING\020\031\022\025\n\021TE"
  "AM_PLAYERS_FULL\020\032\022\022\n\016TEAM_NOT_READY\020\033\022\016\n"
  "\nOFF_SEASON\020\034\022\025\n\021BIND_ACCOUNT_USED\020\035\022\025\n\021"
  "FUNCTION_NOT_OPEN\020\036\022\017\n\013PVP_RUNNING\020\037\022\023\n\017"
  "SEASON_NOT_EVAL\020 \022\030\n\024PVP_MODE_LEVEL_LIMI"
  "T\020!\022\024\n\020PVP_MODE_ILLEGAL\020\"\022\023\n\017DAILY_SMS_L"
  "IMIT\020#\022\027\n\023DAILY_SMS_PER_LIMIT\020$\022\024\n\020AWARD"
  "S_BE_GOTTEN\020%\022\033\n\027PHONE_NUMBER_HAD_BINDED"
  "\020&\022!\n\035BIND_PHONE_NUMBER_DAILY_LIMIT\020\'\022\033\n"
  "\027GOODS_BUY_COUNT_RUN_OUT\020(\022\023\n\017MALL_TAB_C"
  "LOSED\020)\022\032\n\026DIFFERENT_LOGIN_DEVICE\020*\022\020\n\014F"
  "REQUENT_PVP\020+\022\030\n\024GROWUP_DEFEND_FROZED\020,\022"
  "\021\n\rSHARE_INVALID\020-\022\023\n\017BIND_SHARE_FAIL\020.\022"
  "\030\n\024OLD_PLAYER_NOT_FOUND\020/\022\037\n\033VERIFICATIO"
  "N_CODE_NOT_MATCH\0200\022\022\n\016NOT_OLD_PLAYER\0201\022\023"
  "\n\017HAD_BIND_PLAYER\0202\022\027\n\023OLD_PLAYER_HAD_BI"
  "ND\0203\022\033\n\027BIND_OLD_PLAYER_TIMEOUT\0204\022\025\n\021OLD"
  "_PLAYER_IS_NEW\0205\022\"\n\036VERIFICATION_CODE_SE"
  "ND_COOLING\0206\022\030\n\024PHONE_NUMBER_ILLEGAL\0207\022\026"
  "\n\022BIND_PHONE_COOLING\0208\022\032\n\026OLD_PLAYER_IS_"
  "YOURSELF\0209\022\034\n\030VERIFICATION_CODE_IS_NIL\020:"
  "\022\026\n\022CREDIT_SCORE_LOWER\020;\022\032\n\026REALATION_ST"
  "AR_INVITED\020<\022\027\n\023NO_AVAILABLE_SERVER\020=\022\034\n"
  "\030NO_AVAILABLE_TEAM_SERVER\020>\022\033\n\027NO_AVAILA"
  "BLE_SNS_SERVER\020\?\022\034\n\030NO_AVAILABLE_RANK_SE"
  "RVER\020@\022\025\n\021SEND_MESSAGE_FAIL\020A\022\033\n\027NO_AVAI"
  "LABLE_PVP_SERVER\020B\022\035\n\031NO_AVAILABLE_MATCH"
  "_SERVER\020C\022\034\n\030NO_AVAILABLE_CHAT_SERVER\020D\022"
  "\034\n\030NO_AVAILABLE_MAIL_SERVER\020E\022\037\n\033NO_AVAI"
  "LABLE_PAYMENT_SERVER\020F\022\036\n\032NO_AVAILABLE_S"
  "TATUS_SERVER\020G\022\032\n\026NO_AVAILABLE_DB_SERVER"
  "\020H\022\022\n\016CLOSE_REGISTER\020I\022\026\n\022FUNCTION_FORBI"
  "DDEN\020J\022\032\n\026TX_GET_MBUY_URL_FAILED\020K\022\035\n\031FO"
  "LLOW_DAILY_COUNT_FAILED\020L\022\031\n\025OFFLINE_INV"
  "IETE_LIMIT\020M\022\036\n\032NO_AVAILABLE_GLOBAL_SERV"
  "ER\020N\022\023\n\017PVP_ALREADY_END\020O\022\032\n\026PLAYER_NOT_"
  "BE_FOLLOWED\020P\022\030\n\024OBSERVE_COUNT_IS_MAX\020Q\022"
  "\030\n\024PVP_TIME_IS_TOO_LONG\020R\022\030\n\024LITTLE_SURV"
  "IVE_COUNT\020S\022\022\n\016DO_NOT_OBSERVE\020T\022\021\n\rPVP_N"
  "OT_EXIST\020U\022\031\n\025WX_SEND_RED_PKT_LIMIT\020V\022\031\n"
  "\025WX_RECV_RED_PKT_LIMIT\020W\022\034\n\030WX_RECV_RED_"
  "PKT_REPEATED\020X\022\031\n\025WX_RECV_RED_PKT_EMPTY\020"
  "Y\022\027\n\023WX_RED_PKT_ACT_OVER\020Z\022\034\n\030WX_RED_PKT"
  "_LIKE_REPEATED\020[\022\031\n\025WX_RED_PKT_LIKE_LIMI"
  "T\020\\\022\016\n\nFOLLOW_MAX\020]\022\026\n\022PLAYER_BE_PUNISHE"
  "D\020^\022\027\n\023ACT_GRPBUY_NOT_PAID\020_\022\035\n\031PVP_CANC"
  "EL_BY_UNCONFIRMED\020`\022\031\n\025PVP_CANCEL_BY_OFF"
  "LINE\020a\022\036\n\032QUESTIONNAIRE_OUT_OFF_DATE\020b\022\033"
  "\n\027QUESTIONNAIRE_NO_TARGET\020c\022\032\n\026QUESTIONN"
  "AIRE_ANSWERED\020d\022\022\n\016ALREADY_BE_SET\020e\022\024\n\020N"
  "OT_OWN_THE_ITEM\020f\022\022\n\016REPEAT_COMPOSE\020g\022\030\n"
  "\024DISSATISFY_CONDITION\020h\022\024\n\020EXCEED_THE_LI"
  "MIT\020i\022\032\n\026MATERIAL_IS_NOT_ENOUGH\020j\022\"\n\036PVP"
  "_CANCEL_BY_SELF_UNCONFIRMED\020k\022\036\n\032PVP_CAN"
  "CEL_BY_SELF_OFFLINE\020l\022\020\n\014TEAM_PWD_ERR\020m\022"
  "\033\n\027ILLEGAL_GAMELIB_VERSION\020n\022\017\n\013PLAYER_D"
  "IED\020o\022\027\n\023PLAYER_NOT_BE_FOUND\020p\022 \n\034KR_ADD"
  "ICTION_LIMITTIME_REACH\020q\022!\n\035NO_FREE_CHAN"
  "GE_PROVINCE_TIMES\020r\022\026\n\022PROVINCE_NOT_EXIS"
  "T\020s\022\030\n\024NO_MATCH_ROOM_MEMBER\020t\022\030\n\024MATCH_R"
  "OOM_TOKEN_ERR\020u\022\022\n\016TEAM_NOT_FOUND\020v\022\024\n\020C"
  "ONFIG_NOT_FOUND\020w\022\020\n\014MULTI_PLAYER\020x\022\023\n\017N"
  "O_MULTI_PLAYER\020y\022\032\n\026TOURNAMENT_PVP_RUNNI"
  "NG\020z\022\025\n\021TOURNAMENT_PUNISH\020{\022\026\n\022TOURNAMEN"
  "T_NO_JOIN\020|\022\027\n\023TOURNAMENT_WEED_OUT\020}\022\034\n\030"
  "TOURNAMENT_ROUND_INVAILD\020~\022 \n\034TOURNAMENT"
  "_ROUND_BEYOND_TIME\020\177\022\034\n\027TOURNAMENT_WRONG"
  "_REGION\020\201\001\022\036\n\031TOURNAMENT_ENROLL_NOT_END\020"
  "\202\001\022\032\n\025TOURNAMENT_NOT_ENROLL\020\203\001\022\027\n\022TOURNA"
  "MENT_GOT_OUT\020\204\001\022\031\n\024TOURNAMENT_NOT_BEGIN\020"
  "\205\001\022\027\n\022TOURNAMENT_NOT_END\020\206\001\022 \n\033TOURNAMEN"
  "T_ENROLL_NOT_BEGIN\020\207\001\022\037\n\032TOURNAMENT_CLAS"
  "S_NOT_EXIST\020\210\001\022\031\n\024TOURNAMENT_NOT_EXIST\020\211"
  "\001\022 \n\033TOURNAMENT_ALREADY_ENROLLED\020\212\001\022$\n\037T"
  "OURNAMENT_ENROLL_COUNT_IS_FULL\020\213\001\022!\n\034TOU"
  "RNAMENT_JOIN_COUNT_IS_MAX\020\214\001\022\033\n\026TOURNAME"
  "NT_CUP_IS_HIGH\020\215\001\022\032\n\025TOURNAMENT_CUP_IS_L"
  "OW\020\216\001\022$\n\037TOURNAMENT_TICKET_NOT_SATISFIED"
  "\020\217\001\022\037\n\032TOURNAMENT_HAS_BATTLE_ROOM\020\220\001\022\037\n\032"
  "TOURNAMENT_POINT_NO_ENOUGH\020\221\001\022\035\n\030TOURNAM"
  "ENT_POINT_HAS_GET\020\222\001\022\036\n\031TOURNAMENT_CLASS"
  "_CANCELED\020\223\001\022\032\n\025MAX_SINGLE_PAY_AMOUNT\020\224\001"
  "\022\033\n\026MAX_MONTHLY_PAY_AMOUNT\020\225\001\022\036\n\031GAMELIB"
  "_VERSION_DIFFERENT\020\226\001\022\024\n\017PASSPORT_UNLOCK"
  "\020\227\001\022\036\n\031PASSPORT_SEGMENT_CONFLICT\020\230\001\022\033\n\026P"
  "ASSPORT_SEGMENT_NOPRE\020\231\001\022\032\n\025ITEM_DEDUCTI"
  "ON_EXPIRE\020\232\001\022\030\n\023ITEM_DEDUCTION_TYPE\020\233\001\022\036"
  "\n\031ITEM_DEDUCTION_RATEOFFLOW\020\234\001\022\037\n\032ITEM_D"
  "EDUCTION_ZEROCONSUME\020\235\001\022\037\n\032ITEM_DEDUCTIO"
  "N_MORECONSUME\020\236\001\022\027\n\022NO_MATCHING_STATUS\020\237"
  "\001\022\027\n\022PLAYER_LACK_TICKET\020\240\001\022\027\n\022PLAYER_LAC"
  "K_BOUNTY\020\241\001\022\027\n\022TX_PLAYER_NOT_FIND\020\242\001\022\031\n\024"
  "TX_PLAYER_INVITE_ERR\020\243\001\022\032\n\025TX_PLAYER_HAV"
  "E_BEBIND\020\244\001\022\031\n\024TX_PLAYER_BIND_CLOSE\020\245\001\022\030"
  "\n\023TX_PLAYER_HAVE_BIND\020\246\001\022\024\n\017USRNAME_ILLE"
  "GAL\020\247\001\022\036\n\031WORKSHOP_NO_SUITABLE_ROOM\020\250\001\022\027"
  "\n\022INSUFFICIENT_TOKEN\020\251\001\022\033\n\026WORKSHOP_MAP_"
  "NOT_FOUND\020\252\001\022\034\n\027WORKSHOP_SUBMODE_CLOSED\020"
  "\253\001\022\025\n\020TOO_YOUNG_TO_PAY\020\254\001\022$\n\037UNSET_READY"
  "_FORBBIDEN_IN_BOUNTY\020\255\001\022\024\n\017PS4_SERVER_ON"
  "LY\020\256\001\022\033\n\026PS4_SERVER_ONLY_OTHERS\020\257\001\022\020\n\013LO"
  "GIN_LIMIT\020\260\001\022\024\n\017PROMISE_TIMEOUT\020\261\001\022\033\n\026RE"
  "CRUIT_FINISH_RECRUIT\020\262\001\022\034\n\027RECRUIT_PLAYE"
  "R_NOINVITE\020\263\001\022\026\n\021PLAYER_LACK_MONEY\020\264\001\022\027\n"
  "\022GUILD_ALREADY_JOIN\020\265\001\022\023\n\016GUILD_NOT_JOIN"
  "\020\266\001\022\026\n\021GUILD_NAME_EXISTS\020\267\001\022\030\n\023GUILD_ALR"
  "EADY_APPLY\020\270\001\022\023\n\016GUILD_NO_RIGHT\020\271\001\022\024\n\017GU"
  "ILD_NO_SERVER\020\272\001\022\035\n\030GUILD_DURING_MAINTEN"
  "ANCE\020\273\001\022\024\n\017GUILD_MODIFY_CD\020\274\001\022\024\n\017GUILD_R"
  "EJOIN_CD\020\275\001\022\030\n\023GUILD_APPOINT_LIMIT\020\276\001\022\026\n"
  "\021GUILD_MEMBER_FULL\020\277\001\022\034\n\027CONDITION_NOT_C"
  "OMPLETED\020\300\001\022\027\n\022GUILD_LACK_DIAMOND\020\301\001\022\030\n\023"
  "GUILD_CUP_TOO_SMALL\020\302\001\022\032\n\025RECRUIT_PLAYER"
  "_INVITE\020\303\001\022\033\n\026RECRUIT_PLAYER_RECRUIT\020\304\001\022"
  "\027\n\022FAIL_SERVICE_CLOSE\020\305\001\022\025\n\020LOGIN_OLDSER"
  "VICE\020\306\001\022\030\n\023FUNCTION_NOT_UNLOCK\020\307\001\022\036\n\031LEV"
  "EL_UP_CHEST_LACK_SCORE\020\310\001\022\020\n\013LEVEL_LIMIT"
  "\020\311\001\022\021\n\014PREPASS_LOCK\020\312\001\022!\n\034WORKSHOP_CUSTO"
  "M_CARD_NOT_FIT\020\313\001\022\027\n\022GUILD_APPLICANT_CD\020"
  "\314\001\022\031\n\024BIGWINNER_SCORE_OVER\020\315\001\022\036\n\031PASSPOR"
  "T_CARD_SWITCH_FAIL\020\316\001\022\023\n\016NOT_IN_SEASONS\020"
  "\317\001\022\024\n\017TEAM_DELAY_OVER\020\320\001\022\023\n\016PVP_DELAY_OV"
  "ER\020\321\001\022\027\n\022MATCH_PLAYER_EXIST\020\322\001\022\023\n\016MODULE"
  "_NOTLOAD\020\323\001\022\030\n\023TEAM_MEMBER_MMR_GAP\020\324\001\022\027\n"
  "\022MODULE_OPT_ILLEGAL\020\325\001\022\030\n\023ORDER_STATE_IL"
  "LEGAL\020\326\001\022\023\n\016ALREADY_SIGNED\020\327\001\022\017\n\nITEM_US"
  "EED\020\330\001\022\024\n\017RESIGN_NOT_OPEN\020\331\001\022\024\n\017ITEM_NOT"
  "_ENOUGH\020\332\001\022\022\n\rAWARD_HAS_GET\020\333\001\022\034\n\027GROUP_"
  "AWARD_CAN_NOT_GET\020\334\001\022\020\n\013NO_MAP_OPEN\020\335\001\022!"
  "\n\034GROUP_MALL_CHANNEL_NOT_EQUAL\020\336\001\022\024\n\017NS_"
  "ITEM_UPLIMIT\020\337\001\022\022\n\rACTIVITY_OVER\020\340\001\022\032\n\025N"
  "OT_GET_SPECIAL_AWARD\020\341\001\022\034\n\027BUY_PVE_CHALL"
  "ENGE_LIMIT\020\342\001\022\031\n\024AWARD_NUM_NOT_ENOUGH\020\343\001"
  "\022\022\n\rAWARD_GET_ALL\020\344\001\022\017\n\nSMELT_LACK\020\345\001\022\023\n"
  "\016AD_TIMES_USEUP\020\346\001\022\023\n\016SET_CACHE_FAIL\020\347\001\022"
  "\023\n\016GET_CACHE_FAIL\020\350\001\022\033\n\026PS_BIND_STATUS_S"
  "ETNAME\020\351\001\022\025\n\020SMELT_ID_INVALID\020\352\001\022\020\n\013BAG_"
  "UPLIMIT\020\353\001\022\030\n\023MONGO_DUPLICATE_KEY\020\354\001\022\025\n\020"
  "PVP_PLAYER_LIMIT\020\355\001\022\027\n\022HAS_PERMANENT_ITE"
  "M\020\356\001\022\032\n\025RESULT_SKIN_HAS_EQUIP\020\357\001\022\031\n\024CANC"
  "EL_FAIL_IN_GUILD\020\360\001\022\031\n\024CANCEL_FAIL_MATCH"
  "ING\020\361\001\022\030\n\023CANCEL_FAIL_IN_TEAM\020\362\001\022\'\n\"RESU"
  "LT_IDENTIFY_CONSUME_NOT_ENOUGH\020\363\001\022%\n RES"
  "ULT_INSERT_AFFIX_ID_UNMATCHED\020\364\001\022\'\n\"RESU"
  "LT_INSERT_AFFIX_ITEM_UNMATCHED\020\365\001\022\035\n\030EXH"
  "CHANGE_ORDER_IS_EXIST\020\366\001\022\033\n\026EXHCHANGE_NO"
  "T_TTL_LOCK\020\367\001\022$\n\037EXHCHANGE_OFFLINE_NOT_F"
  "IND_HALL\020\370\001\022+\n&UPGRADE_PASSPORT_FAIL_BY_"
  "PASSPORT_CARD\020\371\001\022!\n\034CHECKPASSPORT_BLACK_"
  "BOS_TIPS\020\372\001\022\025\n\020ITEM_IN_EXCHANGE\020\373\001\022\031\n\024ID"
  "ENTIFY_ITEM_REPEAT\020\374\001\022\031\n\024PVE_SCORE_NOT_E"
  "NOUGH\020\375\001\022\023\n\016PVE_PROP_LIMIT\020\376\001\022\034\n\027CARD_GR"
  "OUP_UPDATE_LIMIT\020\377\001\022\025\n\020PVE_BUFF_HAS_BUY\020"
  "\200\002\022\024\n\017NOT_ALLOW_ROBOT\020\201\002\022\031\n\024MS_MENTOR_PU"
  "PIL_FULL\020\202\002\022\030\n\023MS_PUPIL_HAS_MENTOR\020\203\002\022\031\n"
  "\024TD_ONHOOK_NOT_AWARDS\020\204\002\022\034\n\027TD_CARDGROUP"
  "_NOT_ENOUGH\020\205\002\022!\n\034TD_EQUIP_MATERIAL_NOT_"
  "ENOUGH\020\206\002\022\021\n\014MS_IN_PUNISH\020\207\002\022\032\n\025MS_HAS_A"
  "PPLY_GRADUATE\020\210\002\022\021\n\014MS_NOT_BUILD\020\211\002\022\021\n\014M"
  "S_IS_MENTOR\020\212\002\022\034\n\027MS_INVITEMSG_IS_OVERDU"
  "E\020\213\002\022\031\n\024MS_INVITEMSG_IS_THAN\020\214\002\022\036\n\031MS_IN"
  "VITEMSG_IS_NOT_EXIET\020\215\002\022\021\n\014TD_GOLD_FULL\020"
  "\216\002\022\027\n\022BALANCE_NOT_ENOUGH\020\217\002\022$\n\037EXCHANGE_"
  "IDENTIFY_NOT_INCORRECT\020\220\002\022!\n\034NO_PERMISSI"
  "ON_NIGHTMARE_MODE\020\221\002\022\025\n\020CHEST_NOT_ENOUGH"
  "\020\222\002\022\023\n\016KEY_NOT_ENOUGH\020\223\002\022\025\n\020NOT_IN_CPU_R"
  "ANGE\020\224\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_result_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_result_2eproto = {
    false, false, 7295, descriptor_table_protodef_result_2eproto,
    "result.proto",
    &descriptor_table_result_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_result_2eproto::offsets,
    file_level_metadata_result_2eproto, file_level_enum_descriptors_result_2eproto,
    file_level_service_descriptors_result_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_result_2eproto_getter() {
  return &descriptor_table_result_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_result_2eproto(&descriptor_table_result_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RESULT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_result_2eproto);
  return file_level_enum_descriptors_result_2eproto[0];
}
bool RESULT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSDTObserveInfo::_Internal {
 public:
};

CSDTObserveInfo::CSDTObserveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTObserveInfo)
}
CSDTObserveInfo::CSDTObserveInfo(const CSDTObserveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTObserveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pvpid_){}
    , decltype(_impl_.observecount_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pvpid_, &from._impl_.pvpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTObserveInfo)
}

inline void CSDTObserveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pvpid_){uint64_t{0u}}
    , decltype(_impl_.observecount_){0u}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTObserveInfo::~CSDTObserveInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTObserveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTObserveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTObserveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTObserveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTObserveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pvpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTObserveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ObserveCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.observecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 PvpId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.RESULT Result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::msg::RESULT>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTObserveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTObserveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ObserveCount = 1;
  if (this->_internal_observecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_observecount(), target);
  }

  // uint64 PvpId = 2;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pvpid(), target);
  }

  // .msg.RESULT Result = 3;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTObserveInfo)
  return target;
}

size_t CSDTObserveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTObserveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PvpId = 2;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pvpid());
  }

  // uint32 ObserveCount = 1;
  if (this->_internal_observecount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_observecount());
  }

  // .msg.RESULT Result = 3;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTObserveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTObserveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTObserveInfo::GetClassData() const { return &_class_data_; }


void CSDTObserveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTObserveInfo*>(&to_msg);
  auto& from = static_cast<const CSDTObserveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTObserveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_observecount() != 0) {
    _this->_internal_set_observecount(from._internal_observecount());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTObserveInfo::CopyFrom(const CSDTObserveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTObserveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTObserveInfo::IsInitialized() const {
  return true;
}

void CSDTObserveInfo::InternalSwap(CSDTObserveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTObserveInfo, _impl_.result_)
      + sizeof(CSDTObserveInfo::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(CSDTObserveInfo, _impl_.pvpid_)>(
          reinterpret_cast<char*>(&_impl_.pvpid_),
          reinterpret_cast<char*>(&other->_impl_.pvpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTObserveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_result_2eproto_getter, &descriptor_table_result_2eproto_once,
      file_level_metadata_result_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::CSDTObserveInfo*
Arena::CreateMaybeMessage< ::msg::CSDTObserveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTObserveInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
