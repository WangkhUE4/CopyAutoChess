/*
Proto buf => BP

*/
#pragma once


#include "CoreMinimal.h"
#include "common.pb.h"
#include "common.generated.h"


UENUM(BlueprintType)
enum class EREASON: uint8 {
	REASON_NULL = 0 UMETA(DisplayName="REASON_NULL"),	//null
	SYSTEM = 1 UMETA(DisplayName="SYSTEM"),	//系统错误
	INACTIVE = 2 UMETA(DisplayName="INACTIVE"),	//不活跃
	RELOGIN = 3 UMETA(DisplayName="RELOGIN"),	//重登陆
	SERVER_STOPING = 5 UMETA(DisplayName="SERVER_STOPING"),	//服务器停服中
	REDIRECT_HALL_SERVER = 6 UMETA(DisplayName="REDIRECT_HALL_SERVER"),	//重定向hallserver
	GROWUP_DEFEND_FROZEN = 7 UMETA(DisplayName="GROWUP_DEFEND_FROZEN"),	//成长守护被封
	REQUEST_TOO_FAST = 8 UMETA(DisplayName="REQUEST_TOO_FAST"),	//请求太快
	PUNISHED = 9 UMETA(DisplayName="PUNISHED"),	//受到惩罚
	ADDICTION_LIMIT_AGE = 10 UMETA(DisplayName="ADDICTION_LIMIT_AGE"),	//沉迷年龄限制
	GAME_OVER = 11 UMETA(DisplayName="GAME_OVER"),	//比赛已结束
	ADDICTION_LIMIT_TIME = 12 UMETA(DisplayName="ADDICTION_LIMIT_TIME"),	//沉迷时间限制
	BIND_TXPLAYER = 13 UMETA(DisplayName="BIND_TXPLAYER"),	//绑定TX角色
	SERVICE_CLOSE = 14 UMETA(DisplayName="SERVICE_CLOSE"),	//老版服务器下线关闭
	PS_REVOKED = 15 UMETA(DisplayName="PS_REVOKED"),	//ps平台发生权利回退（玩家退款）
	PS_BIND_LY = 16 UMETA(DisplayName="PS_BIND_LY"),	// ps 绑定 ly 账号
	PS_UNBIND_LY = 17 UMETA(DisplayName="PS_UNBIND_LY"),	// ps 解绑 ly 账号
	ACTIVE_KICKOFF = 18 UMETA(DisplayName="ACTIVE_KICKOFF"),	//主动踢线
};

UENUM(BlueprintType)
enum class ESOURCE: uint8 {
	SOURCE_GM = 0 UMETA(DisplayName="SOURCE_GM"),	//gm
	SOURCE_INIT = 1 UMETA(DisplayName="SOURCE_INIT"),	//新玩家初始化
	EVAL = 2 UMETA(DisplayName="EVAL"),	//战斗结算
	MAIL = 3 UMETA(DisplayName="MAIL"),	//邮件奖励
	BUY_EGG = 4 UMETA(DisplayName="BUY_EGG"),	//购买扭蛋
	SET_NAME = 5 UMETA(DisplayName="SET_NAME"),	//修改名字
	SELL_ITEM = 6 UMETA(DisplayName="SELL_ITEM"),	//出售装备
	SOURCE_CDKEY = 7 UMETA(DisplayName="SOURCE_CDKEY"),	//CDKEY
	BUY_PASSPORT_LEVEL = 8 UMETA(DisplayName="BUY_PASSPORT_LEVEL"),	//购买通行证等级
	GET_PASSPORT_LEVEL_AWARD = 9 UMETA(DisplayName="GET_PASSPORT_LEVEL_AWARD"),	//获取通行证等级奖励
	UPGRADE_PASSPORT = 10 UMETA(DisplayName="UPGRADE_PASSPORT"),	//升级通行证
	GET_PASSPORT_TASK_AWARD = 11 UMETA(DisplayName="GET_PASSPORT_TASK_AWARD"),	//获取通行证任务奖励
	CHARGE = 15 UMETA(DisplayName="CHARGE"),	//充值
	EVAL_FIRST_WIN = 16 UMETA(DisplayName="EVAL_FIRST_WIN"),	//首胜
	SOURCE_GM_EVAL = 17 UMETA(DisplayName="SOURCE_GM_EVAL"),	//gm结算
	SOURCE_RANKSEASON_EVAL = 18 UMETA(DisplayName="SOURCE_RANKSEASON_EVAL"),	//赛季结算
	USE_BONUS_CARD = 19 UMETA(DisplayName="USE_BONUS_CARD"),	//使用加成卡
	SEASON_AWARD = 20 UMETA(DisplayName="SEASON_AWARD"),	//赛季奖励
	SEASON_ACCOUNT_LEVEL_UP = 21 UMETA(DisplayName="SEASON_ACCOUNT_LEVEL_UP"),	//账号等级提升奖励
	GET_ACTIVITY_AWARD = 22 UMETA(DisplayName="GET_ACTIVITY_AWARD"),	//获取活动任务奖励
	MELEE_AWARD = 23 UMETA(DisplayName="MELEE_AWARD"),	//乱斗奖励
	MAIL_ACTIVITY_REWARD = 24 UMETA(DisplayName="MAIL_ACTIVITY_REWARD"),	//邮件-活动奖励
	MAIL_MAINTAIN_COMPENSATE = 25 UMETA(DisplayName="MAIL_MAINTAIN_COMPENSATE"),	//邮件-维护补偿
	MAIL_ACTIVITY_COMPENSATE = 26 UMETA(DisplayName="MAIL_ACTIVITY_COMPENSATE"),	//邮件-活动补偿
	MAIL_OTHER_COMPENSATE = 27 UMETA(DisplayName="MAIL_OTHER_COMPENSATE"),	//邮件-其他补偿
	MAIL_INTERNAL_WELFARE = 28 UMETA(DisplayName="MAIL_INTERNAL_WELFARE"),	//邮件-内部福利
	PASSPORT_CLOSE = 29 UMETA(DisplayName="PASSPORT_CLOSE"),	//通行证关闭
	ALPHA_ACTIVITY = 30 UMETA(DisplayName="ALPHA_ACTIVITY"),	//内测活动奖励
	ALPHA_ORDER = 31 UMETA(DisplayName="ALPHA_ORDER"),	//内测预约奖励
	ALPHA_COMPETE = 32 UMETA(DisplayName="ALPHA_COMPETE"),	//内测活跃奖励
	ALPHA_CHARGE = 33 UMETA(DisplayName="ALPHA_CHARGE"),	//内测激活奖励
	ALPHA_TEST = 34 UMETA(DisplayName="ALPHA_TEST"),	//内测福利
	PASSPORT_RETURN = 35 UMETA(DisplayName="PASSPORT_RETURN"),	//通行证返利
	BUY_SPECIAL_GIFT = 36 UMETA(DisplayName="BUY_SPECIAL_GIFT"),	//购买特价礼包
	EXCHANGE_TIMED_GOODS = 37 UMETA(DisplayName="EXCHANGE_TIMED_GOODS"),	//兑换限时商品
	EXCHANGE_PASSPORT_GOODS = 38 UMETA(DisplayName="EXCHANGE_PASSPORT_GOODS"),	//兑换通行证商店商品
	USE_PASSPORT_TASK_CARD = 39 UMETA(DisplayName="USE_PASSPORT_TASK_CARD"),	//使用任务卡
	OPEN_RAND_CHEST = 40 UMETA(DisplayName="OPEN_RAND_CHEST"),	//开随机宝箱
	EGG_LOTTERY = 41 UMETA(DisplayName="EGG_LOTTERY"),	//扭蛋抽奖
	UNGET_WEEKLY_AWARD = 42 UMETA(DisplayName="UNGET_WEEKLY_AWARD"),	//未领取周刷新奖励
	USE_ITEM = 43 UMETA(DisplayName="USE_ITEM"),	//使用道具
	USE_EXPERIENCE_CARD = 44 UMETA(DisplayName="USE_EXPERIENCE_CARD"),	//使用体验卡
	BIND_PHONE_NUMBER = 45 UMETA(DisplayName="BIND_PHONE_NUMBER"),	//首次绑定手机
	PASSPORT_WRONG_DATA = 46 UMETA(DisplayName="PASSPORT_WRONG_DATA"),	//通行证错误数据处理
	LAUNCH_PRIVILEGE_AWARD = 47 UMETA(DisplayName="LAUNCH_PRIVILEGE_AWARD"),	// 启动特权奖励
	QQ_LOGIN_PRIVILEGE_AWARD = 48 UMETA(DisplayName="QQ_LOGIN_PRIVILEGE_AWARD"),	// qq会员登录特权奖励
	QQSVIP_LOGINCONTINUS_AWARD = 49 UMETA(DisplayName="QQSVIP_LOGINCONTINUS_AWARD"),	// qqsvip7日登录特权奖励
	DAILY_SHARE_REWARD = 50 UMETA(DisplayName="DAILY_SHARE_REWARD"),	//每日分享奖励
	BUY_MALL_GOODS = 51 UMETA(DisplayName="BUY_MALL_GOODS"),	//购买商城商品
	DAY_SIGN_AWARD = 52 UMETA(DisplayName="DAY_SIGN_AWARD"),	//每日签到活动奖励
	ACT_ITEM_EXCH = 53 UMETA(DisplayName="ACT_ITEM_EXCH"),	//集道具兑换活动
	CHARGE_RAW = 54 UMETA(DisplayName="CHARGE_RAW"),	//充值不含赠送获得
	WX_VVIP_INIT = 55 UMETA(DisplayName="WX_VVIP_INIT"),	//大玩家首奖励
	WX_VVIP_DAILY_AWARD = 56 UMETA(DisplayName="WX_VVIP_DAILY_AWARD"),	//微信大玩家普通日奖励
	WX_VVIP_DAILY_V_AWARD = 57 UMETA(DisplayName="WX_VVIP_DAILY_V_AWARD"),	//微信大玩家日奖励
	WX_VVIP_WEEKLY_V_AWARD = 58 UMETA(DisplayName="WX_VVIP_WEEKLY_V_AWARD"),	//微信大玩家周奖励
	WX_VVIP_ACC_LOGIN = 59 UMETA(DisplayName="WX_VVIP_ACC_LOGIN"),	//微信大玩家累计登录
	WX_VVIP_ACC_BATTLE = 60 UMETA(DisplayName="WX_VVIP_ACC_BATTLE"),	//微信大玩家累计战斗
	WX_VVIP_ACC_WIN = 61 UMETA(DisplayName="WX_VVIP_ACC_WIN"),	//微信大玩家累计吃鸡
	WX_VVIP_LVL_UP = 62 UMETA(DisplayName="WX_VVIP_LVL_UP"),	//微信大玩家升级奖励
	WX_VVIP_S_CUP_UP = 63 UMETA(DisplayName="WX_VVIP_S_CUP_UP"),	//微信大玩家单排升段
	WX_VVIP_D_CUP_UP = 64 UMETA(DisplayName="WX_VVIP_D_CUP_UP"),	//微信大玩家双排升段
	WX_REDPKT_DAILY_AWARD = 65 UMETA(DisplayName="WX_REDPKT_DAILY_AWARD"),	//微信大玩家红包活动每日奖励
	WX_SEND_RED_PACKET = 66 UMETA(DisplayName="WX_SEND_RED_PACKET"),	//微信大玩家活动发红包
	WX_RECV_RED_PACKET = 67 UMETA(DisplayName="WX_RECV_RED_PACKET"),	//微信大玩家活动领取红包
	WX_REDPKT_LIKE_AWARD = 68 UMETA(DisplayName="WX_REDPKT_LIKE_AWARD"),	//微信大玩家点赞奖励
	WX_REDPKT_RANK_AWARD = 69 UMETA(DisplayName="WX_REDPKT_RANK_AWARD"),	//微信大玩家红包排行奖励
	INVITED_REGISTER_AWARD = 70 UMETA(DisplayName="INVITED_REGISTER_AWARD"),	//关系链邀请注册奖励
	LYDIAMOND_TRANSMIT = 71 UMETA(DisplayName="LYDIAMOND_TRANSMIT"),	//龙渊甜甜圈迁移至米大师
	CHARGE_GBUY = 72 UMETA(DisplayName="CHARGE_GBUY"),	//团购返利充值次数超限兑换商品
	ACT_AUTO_EXCHAGE = 73 UMETA(DisplayName="ACT_AUTO_EXCHAGE"),	//集道具兑换活动结算兑换
	COMPOSE = 74 UMETA(DisplayName="COMPOSE"),	//合成
	CHARGE_ACT_MALL = 75 UMETA(DisplayName="CHARGE_ACT_MALL"),	//商城活动购买
	AMAZON_GIFT_AWARD = 76 UMETA(DisplayName="AMAZON_GIFT_AWARD"),	//twitch prime奖励
	RECALL_AWARD = 77 UMETA(DisplayName="RECALL_AWARD"),	//好友召回奖励
	TEAMPVPWIN_AWARD = 78 UMETA(DisplayName="TEAMPVPWIN_AWARD"),	//组队开黑吃鸡奖励
	MERGE_PLAYER = 79 UMETA(DisplayName="MERGE_PLAYER"),	//角色多选一合并道具
	ENROLL_TOURNAMENT = 80 UMETA(DisplayName="ENROLL_TOURNAMENT"),	//赛事报名
	WEB_SHOPPING_CONSUME = 81 UMETA(DisplayName="WEB_SHOPPING_CONSUME"),	//掌上商城扣款
	WEB_SHOPPING_REFUND = 82 UMETA(DisplayName="WEB_SHOPPING_REFUND"),	//掌上商城退款
	ALL_TOURNAMENT_CLASS_CANCEL = 83 UMETA(DisplayName="ALL_TOURNAMENT_CLASS_CANCEL"),	//所有级别取消
	TOURNAMENT_END = 84 UMETA(DisplayName="TOURNAMENT_END"),	//赛事结束
	LUCK_STAR = 85 UMETA(DisplayName="LUCK_STAR"),	//幸运星
	TOURNAMENT_POINT_RANK = 86 UMETA(DisplayName="TOURNAMENT_POINT_RANK"),	//全赛事积分排行奖励
	CLASS_POINT_RANK = 87 UMETA(DisplayName="CLASS_POINT_RANK"),	//全级别积分排行奖励
	ROUND_POINT_RANK = 88 UMETA(DisplayName="ROUND_POINT_RANK"),	//当前轮次积分排行奖励
	SELF_GET_POINT_AWARD = 89 UMETA(DisplayName="SELF_GET_POINT_AWARD"),	//玩家自己领取积分进度奖励
	MAIL_POINT_AWARD = 90 UMETA(DisplayName="MAIL_POINT_AWARD"),	//邮件补发积分进度奖励
	TOURNAMENT_OUT = 91 UMETA(DisplayName="TOURNAMENT_OUT"),	//赛事淘汰奖励
	OBSERVE_TASK = 92 UMETA(DisplayName="OBSERVE_TASK"),	//观战任务奖励
	ENROLL_FAIL_RETURN = 93 UMETA(DisplayName="ENROLL_FAIL_RETURN"),	//报名失败返还
	CHEST_CUMULATE_AWARD = 94 UMETA(DisplayName="CHEST_CUMULATE_AWARD"),	//宝箱保底
	WORKSHOP_TICKET = 95 UMETA(DisplayName="WORKSHOP_TICKET"),	//创意工坊门票（具体门票类型在Consume的subSource进行区分）
	MAIL_AUTO_GET = 96 UMETA(DisplayName="MAIL_AUTO_GET"),	//自动领取邮件
	WORKSHOP_CURRENCY = 97 UMETA(DisplayName="WORKSHOP_CURRENCY"),	//创意工坊货币 (欢乐豆)
	BOUNTY_ROOM = 98 UMETA(DisplayName="BOUNTY_ROOM"),	//赏金赛
	TRANSFER_TO_OFFICIAL_ACCOUNT = 99 UMETA(DisplayName="TRANSFER_TO_OFFICIAL_ACCOUNT"),	//转账给官方账号
	PVP_INCOME = 100 UMETA(DisplayName="PVP_INCOME"),	// 局内收益
	SOURCE_SUMSANG_ORDERGIFT = 101 UMETA(DisplayName="SOURCE_SUMSANG_ORDERGIFT"),	//samsung注册礼包
	REPORT = 102 UMETA(DisplayName="REPORT"),	//举报
	PS_REVOKE = 103 UMETA(DisplayName="PS_REVOKE"),	//PS撤回 （玩家退款）
	GUILD_CREATE = 104 UMETA(DisplayName="GUILD_CREATE"),	// 创建公会
	GUILD_NAME = 105 UMETA(DisplayName="GUILD_NAME"),	// 公会改名
	GUILD_SIGN = 106 UMETA(DisplayName="GUILD_SIGN"),	// 公会头像
	CONVERT = 107 UMETA(DisplayName="CONVERT"),	// 转化
	VNG_COMMENT_AWARD = 108 UMETA(DisplayName="VNG_COMMENT_AWARD"),	// VNG商店评论奖励
	OPEN_CHOICE_CHEST = 109 UMETA(DisplayName="OPEN_CHOICE_CHEST"),	// 自选宝箱
	USE_PROTECTION_CARD = 110 UMETA(DisplayName="USE_PROTECTION_CARD"),	// 段位保护卡
	ADVERTISE_AWARD = 111 UMETA(DisplayName="ADVERTISE_AWARD"),	// 广告奖励
	LEVELUP_CHEST = 112 UMETA(DisplayName="LEVELUP_CHEST"),	// 升级宝箱
	TEACH_PASS_AWARD = 113 UMETA(DisplayName="TEACH_PASS_AWARD"),	// 教学关卡s
	OPEN_PLATFORM_INTEL_EXCHANGE = 114 UMETA(DisplayName="OPEN_PLATFORM_INTEL_EXCHANGE"),	// intel 兑换码
	OPEN_PLATFORM_DAILY_SIGN = 115 UMETA(DisplayName="OPEN_PLATFORM_DAILY_SIGN"),	// 签到发奖
	OPEN_PLATFORM_ACTIVITY_REWARD = 116 UMETA(DisplayName="OPEN_PLATFORM_ACTIVITY_REWARD"),	// 运营活动
	OPEN_PLATFORM_TRADE = 117 UMETA(DisplayName="OPEN_PLATFORM_TRADE"),	// 拍卖行交易
	OPEN_PLATFORM_GIVEAWAY = 118 UMETA(DisplayName="OPEN_PLATFORM_GIVEAWAY"),	// 玩家赠送
	USE_PASSPORT_CARD = 119 UMETA(DisplayName="USE_PASSPORT_CARD"),	// 使用通行证激活卡
	COMPLETE_TASK = 120 UMETA(DisplayName="COMPLETE_TASK"),	// 完成任务
	CHEST_RARE_AWARD = 121 UMETA(DisplayName="CHEST_RARE_AWARD"),	// 宝箱稀有奖励
	BIGWINNER_AWARD = 122 UMETA(DisplayName="BIGWINNER_AWARD"),	// 大赢家低保
	BIGWINNER_BATTLEAWARD = 123 UMETA(DisplayName="BIGWINNER_BATTLEAWARD"),	// 大赢家对局获得
	BIGWINNER_TICKET = 124 UMETA(DisplayName="BIGWINNER_TICKET"),	// 大赢家对局门票
	BIGWINNER_BATTLECONSUME = 125 UMETA(DisplayName="BIGWINNER_BATTLECONSUME"),	// 大赢家对局消耗
	EXCHANGE_BUY = 126 UMETA(DisplayName="EXCHANGE_BUY"),	// 交易购买
	EXCHANGE_SELL = 127 UMETA(DisplayName="EXCHANGE_SELL"),	// 交易出售
	EXCHANGE_FAIL = 128 UMETA(DisplayName="EXCHANGE_FAIL"),	// 交易失败
	PVP_PLAY_REWARD = 129 UMETA(DisplayName="PVP_PLAY_REWARD"),	// PVP对局奖励
	DEAL_WEB_MAIL = 130 UMETA(DisplayName="DEAL_WEB_MAIL"),	// 客户端操作邮件
	NORMAL_OUT_PUT = 131 UMETA(DisplayName="NORMAL_OUT_PUT"),	//通用产出
	ACTIVITY_PUZZLE_ITEM = 132 UMETA(DisplayName="ACTIVITY_PUZZLE_ITEM"),	//拼图活动
	BIGWINNER_SEASONEVAL = 133 UMETA(DisplayName="BIGWINNER_SEASONEVAL"),	// 大赢家赛季结算
	OPEN_PLATFORM_CONVERTITEM = 134 UMETA(DisplayName="OPEN_PLATFORM_CONVERTITEM"),	// 龙渊币兑换物品
	PVE_CHALLENAGE_ITEM = 135 UMETA(DisplayName="PVE_CHALLENAGE_ITEM"),	//pve副本挑战活动
	OPEN_PLATFORM_CONVERTDIAMOND = 136 UMETA(DisplayName="OPEN_PLATFORM_CONVERTDIAMOND"),	// 龙渊币兑换甜甜圈
	PVE_CHALLENGE_RANK_AWARD = 137 UMETA(DisplayName="PVE_CHALLENGE_RANK_AWARD"),	//pve挑战排行榜奖励
	SMELT_ITEM = 138 UMETA(DisplayName="SMELT_ITEM"),	//熔炼
	SOURCE_BIND_ACCOUNT = 139 UMETA(DisplayName="SOURCE_BIND_ACCOUNT"),	// 账号绑定
	SOURCCE_TRANS_OLD_ITEM = 140 UMETA(DisplayName="SOURCCE_TRANS_OLD_ITEM"),	// 老物品转换
	SOURCE_IDENTIFY_ITEM = 141 UMETA(DisplayName="SOURCE_IDENTIFY_ITEM"),	// 鉴定物品
	SOURCE_INSERT_AFFIX = 142 UMETA(DisplayName="SOURCE_INSERT_AFFIX"),	// 物品镶嵌
	PLAT_GET_AWARD = 143 UMETA(DisplayName="PLAT_GET_AWARD"),	//平台获取物品来源
	PVP_OB_REWARD = 144 UMETA(DisplayName="PVP_OB_REWARD"),	//pvp观战奖励
	SET_DEFAULT_ATTRIBUTE = 145 UMETA(DisplayName="SET_DEFAULT_ATTRIBUTE"),	//设置玩家默认属性
	EXCHANGE_UPGRADE_PASSPORT = 146 UMETA(DisplayName="EXCHANGE_UPGRADE_PASSPORT"),	//平台升级通行证
	PVE_BUFF = 147 UMETA(DisplayName="PVE_BUFF"),	//pve 消耗
	PVP_AUTHORITY_REWARD = 148 UMETA(DisplayName="PVP_AUTHORITY_REWARD"),	//pvp官方自建房
	TD_BUY_CARD = 149 UMETA(DisplayName="TD_BUY_CARD"),	//塔防购买卡券
	MENTOR_SHIP_TASK = 150 UMETA(DisplayName="MENTOR_SHIP_TASK"),	//师徒任务奖励
	TD_MATERIAL = 151 UMETA(DisplayName="TD_MATERIAL"),	//材料
	TD_IN_USE = 152 UMETA(DisplayName="TD_IN_USE"),	//正在使用
	TD_TAKE_OFF = 153 UMETA(DisplayName="TD_TAKE_OFF"),	//卸下
	TD_WEAR = 154 UMETA(DisplayName="TD_WEAR"),	//穿戴
	TD_COMPOSE = 155 UMETA(DisplayName="TD_COMPOSE"),	//合成
	TD_LEVEL_UP = 156 UMETA(DisplayName="TD_LEVEL_UP"),	//升级
	TD_EXAWARDS = 157 UMETA(DisplayName="TD_EXAWARDS"),	//额外奖励
	TD_INIT = 158 UMETA(DisplayName="TD_INIT"),	//初始化
	TD_ON_HOOK = 159 UMETA(DisplayName="TD_ON_HOOK"),	//挂机
	TD_DRAW = 160 UMETA(DisplayName="TD_DRAW"),	//抽奖
	TD_TRANS = 161 UMETA(DisplayName="TD_TRANS"),	//转换
	TD_BUY = 162 UMETA(DisplayName="TD_BUY"),	//购买
	TD_CAL = 163 UMETA(DisplayName="TD_CAL"),	//结算
	TD_GM = 164 UMETA(DisplayName="TD_GM"),	//GM
	BALANCE_RECHARGE = 165 UMETA(DisplayName="BALANCE_RECHARGE"),	// 充值余额
	EXCHANGE_CONSUMES = 166 UMETA(DisplayName="EXCHANGE_CONSUMES"),	//消耗
	COMPLETE_MEDAL_TASK = 167 UMETA(DisplayName="COMPLETE_MEDAL_TASK"),	//勋章任务完成奖励来源
	LY_ACTIVITY_LIMIT_DROP_AWARD = 168 UMETA(DisplayName="LY_ACTIVITY_LIMIT_DROP_AWARD"),
	INSURANCE_CARD_USE = 169 UMETA(DisplayName="INSURANCE_CARD_USE"),
	PASSPORT_SEASON_EVAL = 170 UMETA(DisplayName="PASSPORT_SEASON_EVAL"),	//通行证赛季结算奖励
};

UENUM(BlueprintType)
enum class EPLAYERSTATUS: uint8 {
	PLAYERSTATUS_OFFLINE = 0 UMETA(DisplayName="PLAYERSTATUS_OFFLINE"),	//离线
	PLAYERSTATUS_HALL = 1 UMETA(DisplayName="PLAYERSTATUS_HALL"),	//大厅中
	PLAYERSTATUS_PVP = 2 UMETA(DisplayName="PLAYERSTATUS_PVP"),	//pvp中
	PLAYERSTATUS_TEAM = 3 UMETA(DisplayName="PLAYERSTATUS_TEAM"),	//组队中
	PLAYERSTATUS_PVP_OFFLINE = 4 UMETA(DisplayName="PLAYERSTATUS_PVP_OFFLINE"),	//pvp离线
	PLAYERSTATUS_OBSERVE = 5 UMETA(DisplayName="PLAYERSTATUS_OBSERVE"),	//观战中
	PLAYERSTATUS_OBSERVE_OFFLINE = 6 UMETA(DisplayName="PLAYERSTATUS_OBSERVE_OFFLINE"),	//观战离线
};

UENUM(BlueprintType)
enum class EFRIENDINVISIBLE: uint8 {
	FRIENDINVISIBLE_NONE = 0 UMETA(DisplayName="FRIENDINVISIBLE_NONE"),	//
	FRIENDINVISIBLE_TRUE = 1 UMETA(DisplayName="FRIENDINVISIBLE_TRUE"),	//
	FRIENDINVISIBLE_FALSE = 2 UMETA(DisplayName="FRIENDINVISIBLE_FALSE"),	//
};

UENUM(BlueprintType)
enum class EPLATFORMTYPE: uint8 {
	PLATFORMTYPE_OTHER = 0 UMETA(DisplayName="PLATFORMTYPE_OTHER"),	//其他
	PLATFORMTYPE_ANDROID = 1 UMETA(DisplayName="PLATFORMTYPE_ANDROID"),	//安卓
	PLATFORMTYPE_IOS = 2 UMETA(DisplayName="PLATFORMTYPE_IOS"),	//ios
	PLATFORMTYPE_PC = 3 UMETA(DisplayName="PLATFORMTYPE_PC"),	//PC
	PLATFORMTYPE_PS4 = 4 UMETA(DisplayName="PLATFORMTYPE_PS4"),	//PS4
	PLATFORMTYPE_PS5 = 5 UMETA(DisplayName="PLATFORMTYPE_PS5"),	//PS5
	PLATFORMTYPE_END = 6 UMETA(DisplayName="PLATFORMTYPE_END"),	//枚举边界
};

UENUM(BlueprintType)
enum class EMAGNETISMTYPE: uint8 {
	MAGNETISMTYPE_NONE = 0 UMETA(DisplayName="MAGNETISMTYPE_NONE"),
	MAGNETISMTYPE_1 = 1 UMETA(DisplayName="MAGNETISMTYPE_1"),
	MAGNETISMTYPE_2 = 2 UMETA(DisplayName="MAGNETISMTYPE_2"),
	MAGNETISMTYPE_3 = 3 UMETA(DisplayName="MAGNETISMTYPE_3"),
	MAGNETISMTYPE_4 = 4 UMETA(DisplayName="MAGNETISMTYPE_4"),
};

UENUM(BlueprintType)
enum class EPVPEND_REASON: uint8 {
	PVPEND_GAMEOVER = 0 UMETA(DisplayName="PVPEND_GAMEOVER"),	//战斗结束原因
	PVPEND_PLAYERDIE = 1 UMETA(DisplayName="PVPEND_PLAYERDIE"),	//玩家死亡
	PVPEND_LEAVEEARLY = 2 UMETA(DisplayName="PVPEND_LEAVEEARLY"),	//放弃游戏
};

UENUM(BlueprintType)
enum class ECHANELTYPE: uint8 {
	CHANELTYPE_GUEST = 0 UMETA(DisplayName="CHANELTYPE_GUEST"),	//游客
	CHANELTYPE_LY = 1 UMETA(DisplayName="CHANELTYPE_LY"),	//龙渊 {code:xxx}
	CHANELTYPE_4399 = 2 UMETA(DisplayName="CHANELTYPE_4399"),	//4399 {state:xxx,uid:xxx}
	CHANELTYPE_360 = 3 UMETA(DisplayName="CHANELTYPE_360"),	//360  {access_token:xxx}
	CHANELTYPE_BAIDU = 4 UMETA(DisplayName="CHANELTYPE_BAIDU"),	//百度  {access_token:xxx}
	CHANELTYPE_DANGLE = 5 UMETA(DisplayName="CHANELTYPE_DANGLE"),	//当乐  {access_token:xxx,umid:xxx}
	CHANELTYPE_KUPAI = 6 UMETA(DisplayName="CHANELTYPE_KUPAI"),	//酷派  {access_token:xxx,openid:xxxx}
	CHANELTYPE_LIANXIANG = 7 UMETA(DisplayName="CHANELTYPE_LIANXIANG"),	//联想  {access_token:xxx}
	CHANELTYPE_XIAOMI = 8 UMETA(DisplayName="CHANELTYPE_XIAOMI"),	//小米  {session:xxxx,uid:xxxx}
	CHANELTYPE_YINGYONGHUI = 9 UMETA(DisplayName="CHANELTYPE_YINGYONGHUI"),	//应用汇 {access_token:xxx}
	CHANELTYPE_OPPO = 10 UMETA(DisplayName="CHANELTYPE_OPPO"),	//OPPO  {access_token:xxx,ssoid:xxx}
	CHANELTYPE_VIVO = 11 UMETA(DisplayName="CHANELTYPE_VIVO"),	//VIVO  {access_token:xxx}
	CHANELTYPE_HUAWEI = 12 UMETA(DisplayName="CHANELTYPE_HUAWEI"),	//华为   {gameAuthSign：xxxx,playerId:xxxx,ts:xxxx}
	CHANELTYPE_QQ = 13 UMETA(DisplayName="CHANELTYPE_QQ"),	//qq(应用宝)    {openid：xxxx,access_token:xxxx,pf:xxxxx,pfkey:xxxx,pay_token:xxxx}
	CHANELTYPE_WX = 14 UMETA(DisplayName="CHANELTYPE_WX"),	//微信   {openid：xxxx,access_token:xxxx,pf:xxxxx,pfkey:xxxx}
	CHANELTYPE_UC = 15 UMETA(DisplayName="CHANELTYPE_UC"),	//UC {sid:xxxxx}
	CHANELTYPE_JINLI = 16 UMETA(DisplayName="CHANELTYPE_JINLI"),	//金立 {access_token:xxx,playerId:xxxx}
	CHANELTYPE_MEIZU = 17 UMETA(DisplayName="CHANELTYPE_MEIZU"),	//魅族 {seesion_id:xxxx,uid:xxxx}
	CHANELTYPE_LY_IOS = 18 UMETA(DisplayName="CHANELTYPE_LY_IOS"),	//IOS {code:xxx}{待删除}
	CHANELTYPE_TWITTER = 19 UMETA(DisplayName="CHANELTYPE_TWITTER"),	//推特 {oauth_token:xxxx,oauth_token_secret:xxxx}
	CHANELTYPE_LINE = 20 UMETA(DisplayName="CHANELTYPE_LINE"),	//Line {access_token:xxxx} go line会改变行号，这里会报错，因此改成大写
	CHANELTYPE_DMM = 21 UMETA(DisplayName="CHANELTYPE_DMM"),	//dmm
	CHANELTYPE_LY_JP = 22 UMETA(DisplayName="CHANELTYPE_LY_JP"),	//龙渊(日本)
	CHANELTYPE_GOOGLE_PAY = 23 UMETA(DisplayName="CHANELTYPE_GOOGLE_PAY"),	//google 支付
	CHANELTYPE_IOS_PAY = 24 UMETA(DisplayName="CHANELTYPE_IOS_PAY"),	//ios支付
	CHANELTYPE_BILI_GAME = 25 UMETA(DisplayName="CHANELTYPE_BILI_GAME"),	//B站
	CHANELTYPE_GOOGLE_LOGIN = 26 UMETA(DisplayName="CHANELTYPE_GOOGLE_LOGIN"),	// google登录
	CHANELTYPE_FACEBOOK = 27 UMETA(DisplayName="CHANELTYPE_FACEBOOK"),	// facebook登录
	CHANELTYPE_OPPO_OVERSEAS = 28 UMETA(DisplayName="CHANELTYPE_OPPO_OVERSEAS"),	// OPPO海外渠道
	CHANELTYPE_VIETNAM_IOS = 29 UMETA(DisplayName="CHANELTYPE_VIETNAM_IOS"),	//越南IOS
	CHANELTYPE_VIETNAM_GOOGLE = 30 UMETA(DisplayName="CHANELTYPE_VIETNAM_GOOGLE"),	//越南谷歌
	CHANELTYPE_XIAOMI_OVERSEA = 31 UMETA(DisplayName="CHANELTYPE_XIAOMI_OVERSEA"),	//小米海外
	CHANELTYPE_XIAOMI_OVERSEA2 = 32 UMETA(DisplayName="CHANELTYPE_XIAOMI_OVERSEA2"),	//小米海外2
	CHANELTYPE_QQ_IOS_PAY = 33 UMETA(DisplayName="CHANELTYPE_QQ_IOS_PAY"),	//手Q IOS支付渠道
	CHANELTYPE_WX_IOS_PAY = 34 UMETA(DisplayName="CHANELTYPE_WX_IOS_PAY"),	//微信IOS支付渠道
	CHANELTYPE_VIETNAM_VNG = 35 UMETA(DisplayName="CHANELTYPE_VIETNAM_VNG"),	//越南VNG
	CHANELTYPE_GUEST_IOS = 36 UMETA(DisplayName="CHANELTYPE_GUEST_IOS"),	//游客IOS
	CHANELTYPE_QQ_ANDROID_PAY = 37 UMETA(DisplayName="CHANELTYPE_QQ_ANDROID_PAY"),	//手Q 安卓支付渠道
	CHANELTYPE_WX_ANDROID_PAY = 38 UMETA(DisplayName="CHANELTYPE_WX_ANDROID_PAY"),	//微信安卓支付渠道
	CHANELTYPE_VIVO_OVERSEA = 39 UMETA(DisplayName="CHANELTYPE_VIVO_OVERSEA"),	//vivo海外渠道
	CHANELTYPE_VNG_FIREBASE = 41 UMETA(DisplayName="CHANELTYPE_VNG_FIREBASE"),	//vng的firebase登录
	CHANELTYPE_EPIC = 42 UMETA(DisplayName="CHANELTYPE_EPIC"),	//epic
	CHANELTYPE_WEB_FACEBOOK = 43 UMETA(DisplayName="CHANELTYPE_WEB_FACEBOOK"),	//web的facebook firebase登录
	CHANELTYPE_WEB_GOOGLE = 44 UMETA(DisplayName="CHANELTYPE_WEB_GOOGLE"),	//web的google firebase登录
	CHANELTYPE_SUMSANG_PAY = 45 UMETA(DisplayName="CHANELTYPE_SUMSANG_PAY"),	//sumsang充值
	CHANELTYPE_IOS = 46 UMETA(DisplayName="CHANELTYPE_IOS"),	//ios登录
	CHANELTYPE_MAX_NUM = 47 UMETA(DisplayName="CHANELTYPE_MAX_NUM"),	//渠道类型暂不能超过47
	CHANELTYPE_MSDK_IOS = 48 UMETA(DisplayName="CHANELTYPE_MSDK_IOS"),	//msdk apple 登录
	CHANELTYPE_SESSION = 50 UMETA(DisplayName="CHANELTYPE_SESSION"),	//用于客户端在游戏中重连服务器
	CHANELTYPE_ID = 51 UMETA(DisplayName="CHANELTYPE_ID"),	//登陆某个玩家id(登陆者必须在白名单内)
	CHANELTYPE_AI_TRAINING = 52 UMETA(DisplayName="CHANELTYPE_AI_TRAINING"),	//机器人训练使用此渠道，所有对手均为机器人
	CHANELTYPE_HUAWEI_OVERSEA = 53 UMETA(DisplayName="CHANELTYPE_HUAWEI_OVERSEA"),	//华为海外
	CHANELTYPE_LAUNCHER = 54 UMETA(DisplayName="CHANELTYPE_LAUNCHER"),	//launcher登录
	CHANELTYPE_LY_IOS_PAY = 55 UMETA(DisplayName="CHANELTYPE_LY_IOS_PAY"),	//龙渊ios支付
	CHANELTYPE_PS4 = 56 UMETA(DisplayName="CHANELTYPE_PS4"),	// PS登录
	CHANELTYPE_LY_OPEN_PAY = 58 UMETA(DisplayName="CHANELTYPE_LY_OPEN_PAY"),	//龙渊端游开放平台支付
	CHANELTYPE_VIETNAM_GOOGLE_BATTLE = 59 UMETA(DisplayName="CHANELTYPE_VIETNAM_GOOGLE_BATTLE"),	//vng battle的google支付渠道
	CHANELTYPE_CAFE_BAZAAR = 60 UMETA(DisplayName="CHANELTYPE_CAFE_BAZAAR"),	//伊朗CafeBazaar渠道支付
	CHANELTYPE_VIETNAM_IOS_BATTLE = 61 UMETA(DisplayName="CHANELTYPE_VIETNAM_IOS_BATTLE"),	//vng battle的IOS支付渠道
	CHANELTYPE_YILEWAN = 62 UMETA(DisplayName="CHANELTYPE_YILEWAN"),	// 盛天渠道（易乐玩）
	CHANELTYPE_FEIHUO = 63 UMETA(DisplayName="CHANELTYPE_FEIHUO"),	// 飞火渠道
	CHANELTYPE_FEIHUO_PC = 64 UMETA(DisplayName="CHANELTYPE_FEIHUO_PC"),	// 飞火渠道
	CHANELTYPE_WEGAME = 65 UMETA(DisplayName="CHANELTYPE_WEGAME"),	// WeGame
	CHANELTYPE_WEGAME_IOS = 66 UMETA(DisplayName="CHANELTYPE_WEGAME_IOS"),	// WeGame 移动端
	CHANELTYPE_WEGAME_ANDROID = 67 UMETA(DisplayName="CHANELTYPE_WEGAME_ANDROID"),	// WeGame 移动端
	CHANELTYPE_PANGOLIN = 68 UMETA(DisplayName="CHANELTYPE_PANGOLIN"),	// 穿山甲广告
	CHANELTYPE_ADMOB = 69 UMETA(DisplayName="CHANELTYPE_ADMOB"),	// google admob
	CHANELTYPE_PS5_PAY = 70 UMETA(DisplayName="CHANELTYPE_PS5_PAY"),	// ps5 支付
	CHANELTYPE_RAZER_PAY = 71 UMETA(DisplayName="CHANELTYPE_RAZER_PAY"),	//雷蛇支付
	CHANELTYPE_GM_PAY = 72 UMETA(DisplayName="CHANELTYPE_GM_PAY"),	//gm补单
	CHANELTYPE_CODA_PAY = 73 UMETA(DisplayName="CHANELTYPE_CODA_PAY"),	//coda支付
	CHANELTYPE_LYAPI = 74 UMETA(DisplayName="CHANELTYPE_LYAPI"),	//开放平台网页支付 ly yapi-ops
	CHANELTYPE_AD_FACEBOOK = 75 UMETA(DisplayName="CHANELTYPE_AD_FACEBOOK"),	//facebook广告
	CHANELTYPE_PAYPAL = 76 UMETA(DisplayName="CHANELTYPE_PAYPAL"),	// paypal 支付
	CHANELTYPE_XSOLLA = 77 UMETA(DisplayName="CHANELTYPE_XSOLLA"),	//Xsolla 支付
	CHANELTYPE_NOW_GG = 78 UMETA(DisplayName="CHANELTYPE_NOW_GG"),	// 海外now.gg登录
	CHANELTYPE_STEAM_PAY = 79 UMETA(DisplayName="CHANELTYPE_STEAM_PAY"),	//steam支付
};

UENUM(BlueprintType)
enum class ENETTYPE: uint8 {
	NETTYPE_NULL = 0 UMETA(DisplayName="NETTYPE_NULL"),	//不可访问
	NETTYPE_MOBILENETWORK = 1 UMETA(DisplayName="NETTYPE_MOBILENETWORK"),	//移动网络
	NETTYPE_WIFI = 2 UMETA(DisplayName="NETTYPE_WIFI"),	//wifi
};

UENUM(BlueprintType)
enum class ELOGINTYPE: uint8 {
	LOGIN_NORMAL = 0 UMETA(DisplayName="LOGIN_NORMAL"),	//正常登陆
	LOGIN_RECONNECT = 1 UMETA(DisplayName="LOGIN_RECONNECT"),	//重连登陆
	LOGIN_PVPFINISH = 2 UMETA(DisplayName="LOGIN_PVPFINISH"),	//pvp结束的登陆
};

UENUM(BlueprintType)
enum class ELAUNCHTYPE: uint8 {
	LAUNCH_GAME = 0 UMETA(DisplayName="LAUNCH_GAME"),	//游戏启动
	LAUNCH_WECHAT = 1 UMETA(DisplayName="LAUNCH_WECHAT"),	//微信启动
	LAUNCH_QQ = 2 UMETA(DisplayName="LAUNCH_QQ"),	//qq启动
};

UENUM(BlueprintType)
enum class ECHANNELVIPTYPE: uint8 {
	CHANNELVIP_NONE = 0 UMETA(DisplayName="CHANNELVIP_NONE"),	//其它
	CHANNELVIP_QQVIP = 1 UMETA(DisplayName="CHANNELVIP_QQVIP"),	//qq会员
	CHANNELVIP_QQSVIP = 2 UMETA(DisplayName="CHANNELVIP_QQSVIP"),	//qq超级会员
};

UENUM(BlueprintType)
enum class ECHARGERESULT_TYPE: uint8 {
	CHARGERESULT_TYPE_NULL = 0 UMETA(DisplayName="CHARGERESULT_TYPE_NULL"),
	CHARGERESULT_TYPE_SUCCESS = 1 UMETA(DisplayName="CHARGERESULT_TYPE_SUCCESS"),	//成功
	CHARGERESULT_TYPE_FAIL = 2 UMETA(DisplayName="CHARGERESULT_TYPE_FAIL"),	//失败
};

UENUM(BlueprintType)
enum class ECHEST_OPEN_TYPE: uint8 {
	CHEST_OPEN_TYPE_NULL = 0 UMETA(DisplayName="CHEST_OPEN_TYPE_NULL"),
	HIGH_SECRET = 1 UMETA(DisplayName="HIGH_SECRET"),
	ORDINARY_SECRET = 2 UMETA(DisplayName="ORDINARY_SECRET"),
};

UENUM(BlueprintType)
enum class EITEMTYPE: uint8 {
	ITEMTYPE_NULL = 0 UMETA(DisplayName="ITEMTYPE_NULL"),
	MONEY = 1 UMETA(DisplayName="MONEY"),
	CHESS_PLAYER_MODEL = 2 UMETA(DisplayName="CHESS_PLAYER_MODEL"),	//棋手模型
	SCENE = 3 UMETA(DisplayName="SCENE"),	//未拆分前为棋盘+场景，拆分后卫棋盘皮肤
	HEAD_PIC = 4 UMETA(DisplayName="HEAD_PIC"),	//头像
	CHESS_PLAYER_ACTION = 5 UMETA(DisplayName="CHESS_PLAYER_ACTION"),	//棋手动作
	CHESS_PLAYER_PICTURE = 6 UMETA(DisplayName="CHESS_PLAYER_PICTURE"),	//棋手立绘
	CHESS_PLAYER_VOICE = 7 UMETA(DisplayName="CHESS_PLAYER_VOICE"),	//棋手语音
	BATTLE_STAR = 8 UMETA(DisplayName="BATTLE_STAR"),	//战星(通行证等级经验)
	DIAMOND = 9 UMETA(DisplayName="DIAMOND"),	//付费糖果
	PLAYER_EXP = 10 UMETA(DisplayName="PLAYER_EXP"),	//玩家账号经验
	EXP_BONUS_CARD = 11 UMETA(DisplayName="EXP_BONUS_CARD"),	//经验加成卡
	CANDY_BONUS_CARD = 12 UMETA(DisplayName="CANDY_BONUS_CARD"),	//糖果加成卡
	RENAME_CARD = 13 UMETA(DisplayName="RENAME_CARD"),	//改名卡
	DIRECT_LEVEL_UP = 14 UMETA(DisplayName="DIRECT_LEVEL_UP"),	//战阶直升道具
	SCENE_SKIN = 15 UMETA(DisplayName="SCENE_SKIN"),	//场景皮肤 (暂时废弃)
	CHESS_EFFECTS = 16 UMETA(DisplayName="CHESS_EFFECTS"),	//棋子伤害特效
	CHESS_ACTION = 17 UMETA(DisplayName="CHESS_ACTION"),	//棋子动作
	CHESS_VOICE = 18 UMETA(DisplayName="CHESS_VOICE"),	//棋子语音
	EMOTION = 19 UMETA(DisplayName="EMOTION"),	//聊天表情
	HEAD_PIC_FRAME = 20 UMETA(DisplayName="HEAD_PIC_FRAME"),	//头像框
	PERSONAL_BACKGROUND = 21 UMETA(DisplayName="PERSONAL_BACKGROUND"),	//个人信息背景
	CHAT_BUBBLE = 22 UMETA(DisplayName="CHAT_BUBBLE"),	//聊天气泡
	ADVANCED_PASSPORT = 23 UMETA(DisplayName="ADVANCED_PASSPORT"),	//进阶通行证
	CHAT_DANMAKU = 24 UMETA(DisplayName="CHAT_DANMAKU"),	//聊天弹幕
	CHESS_COMBINE_EFFECT = 25 UMETA(DisplayName="CHESS_COMBINE_EFFECT"),	//棋子合成特效
	STREAK_WIN_TOOLTIP = 26 UMETA(DisplayName="STREAK_WIN_TOOLTIP"),	//连胜提示框
	HEAD_PIC_PENDANT = 27 UMETA(DisplayName="HEAD_PIC_PENDANT"),	//头像挂件
	CHICKEN_ACTION = 28 UMETA(DisplayName="CHICKEN_ACTION"),	//棋手吃鸡特写动作
	ROUND_BEGIN_POSE = 29 UMETA(DisplayName="ROUND_BEGIN_POSE"),	//回合开始棋手静态POSE展示
	PASSPORT_COIN = 30 UMETA(DisplayName="PASSPORT_COIN"),	//通行证货币
	PASSPORT_TASK_CARD = 31 UMETA(DisplayName="PASSPORT_TASK_CARD"),	//通行证任务卡
	RAND_CHEST = 32 UMETA(DisplayName="RAND_CHEST"),	//随机宝箱, 自选宝箱
	EGG_TICKET = 33 UMETA(DisplayName="EGG_TICKET"),	//扭蛋券
	EXPERIENCE_CARD = 34 UMETA(DisplayName="EXPERIENCE_CARD"),	//体验卡
	DRESS_PIECE = 35 UMETA(DisplayName="DRESS_PIECE"),	//装扮碎片，代币(装扮币，棋手币，场景币)
	GINGERBREAD_MAN = 36 UMETA(DisplayName="GINGERBREAD_MAN"),	//姜饼人(货币)
	TWO_SCENE = 37 UMETA(DisplayName="TWO_SCENE"),	//双人棋盘
	CHESS_SKIN = 38 UMETA(DisplayName="CHESS_SKIN"),	//棋子皮肤
	DIRECT_MONEY = 39 UMETA(DisplayName="DIRECT_MONEY"),	//直接使用人民币
	CHESS_PLAYER_WEAR = 40 UMETA(DisplayName="CHESS_PLAYER_WEAR"),	//棋手服装
	CHESS_PLAYER_WEAPON = 41 UMETA(DisplayName="CHESS_PLAYER_WEAPON"),	//棋手武器
	CHESS_PLAYER_RIDE = 42 UMETA(DisplayName="CHESS_PLAYER_RIDE"),	//棋手坐骑
	KEY = 43 UMETA(DisplayName="KEY"),	//钥匙
	TOURNAMENT_POINT_GLOBAL = 44 UMETA(DisplayName="TOURNAMENT_POINT_GLOBAL"),	//全局赛事积分
	TOURNAMENT_POINT_PART = 45 UMETA(DisplayName="TOURNAMENT_POINT_PART"),	//局部赛事积分 只能赛事内部
	TOURNAMENT_POINT_ROUND = 46 UMETA(DisplayName="TOURNAMENT_POINT_ROUND"),	//轮次赛事积分
	TOURNAMENT_TICKET = 47 UMETA(DisplayName="TOURNAMENT_TICKET"),	//赛事门票
	DEDUCTION_COUPON = 48 UMETA(DisplayName="DEDUCTION_COUPON"),	//折扣券
	DEDUCTION_MALL = 49 UMETA(DisplayName="DEDUCTION_MALL"),	//商城抵扣券
	IT_WORKSHOP_TICKET = 50 UMETA(DisplayName="IT_WORKSHOP_TICKET"),	//创意工坊门票
	CHESS_SKIN_DEBRIS = 51 UMETA(DisplayName="CHESS_SKIN_DEBRIS"),	// 通用棋子皮肤碎片
	CHESS_PLAYER_DEBRIS = 52 UMETA(DisplayName="CHESS_PLAYER_DEBRIS"),	// 通用棋手碎片
	SCENE_DEBRIS = 53 UMETA(DisplayName="SCENE_DEBRIS"),	// 通用棋盘碎片
	EXPIRED_SKIN_DEBRIS = 54 UMETA(DisplayName="EXPIRED_SKIN_DEBRIS"),	// 退环境皮肤碎片
	PROTECTION_CARD = 56 UMETA(DisplayName="PROTECTION_CARD"),	// 段位保护
	PASSPORT_CARD = 57 UMETA(DisplayName="PASSPORT_CARD"),	// 通行证激活卡
	BIGWINNER_SCORE = 58 UMETA(DisplayName="BIGWINNER_SCORE"),	// 大赢家积分
	MEDAL = 59 UMETA(DisplayName="MEDAL"),	// 勋章
	CHESSSKIN_SUIT = 60 UMETA(DisplayName="CHESSSKIN_SUIT"),	// 棋子套装
	SLAG = 61 UMETA(DisplayName="SLAG"),	// 熔渣
	ITEMTYPE_NOTUSED = 62 UMETA(DisplayName="ITEMTYPE_NOTUSED"),
	ITEMTYPE_AFFIX_SAVER = 63 UMETA(DisplayName="ITEMTYPE_AFFIX_SAVER"),	// 词缀封存道具
	DANMAKU_FLOOR = 64 UMETA(DisplayName="DANMAKU_FLOOR"),	// 弹幕底板
	ITEMTYPE_COOKIES = 65 UMETA(DisplayName="ITEMTYPE_COOKIES"),	// 饼干
	ITEMTYPE_MAX_NUM = 66 UMETA(DisplayName="ITEMTYPE_MAX_NUM"),
	MEDAL_SCORE = 67 UMETA(DisplayName="MEDAL_SCORE"),	//勋章任务积分
	LY_ACTIVITY_LIMIT = 68 UMETA(DisplayName="LY_ACTIVITY_LIMIT"),	//掌上龙渊活动道具
	INSURANCE_CARD = 69 UMETA(DisplayName="INSURANCE_CARD"),	//保险卡
};

UENUM(BlueprintType)
enum class EITEMQUALITY: uint8 {
	NULL_PB = 0 UMETA(DisplayName="NULL_PB"),
	WHITE = 1 UMETA(DisplayName="WHITE"),	//白
	GREEN = 2 UMETA(DisplayName="GREEN"),	//绿
	BLUE = 3 UMETA(DisplayName="BLUE"),	//蓝
	PURPLE = 4 UMETA(DisplayName="PURPLE"),	//紫
	ORANGE = 5 UMETA(DisplayName="ORANGE"),	//橙
	RED = 6 UMETA(DisplayName="RED"),	//红
	MAX_NUM = 7 UMETA(DisplayName="MAX_NUM"),
};

UENUM(BlueprintType)
enum class EITEMSHAREBG: uint8 {
	BG_NULL = 0 UMETA(DisplayName="BG_NULL"),
	BG_ORANGE = 1 UMETA(DisplayName="BG_ORANGE"),	//橙
	BG_BROWNNESS = 2 UMETA(DisplayName="BG_BROWNNESS"),	//褐
	BG_BLUE = 3 UMETA(DisplayName="BG_BLUE"),	//蓝
	BG_GREEN = 4 UMETA(DisplayName="BG_GREEN"),	//绿
	BG_PURPLE = 5 UMETA(DisplayName="BG_PURPLE"),	//紫
	BG_GRAY = 6 UMETA(DisplayName="BG_GRAY"),	//灰
	BG_MAX_NUM = 7 UMETA(DisplayName="BG_MAX_NUM"),
};

UENUM(BlueprintType)
enum class EITEMACCUMTYPE: uint8 {
	NOT_MULTIPLY = 0 UMETA(DisplayName="NOT_MULTIPLY"),	//不可叠加
	MULTIPLY = 1 UMETA(DisplayName="MULTIPLY"),	//可叠加
};

UENUM(BlueprintType)
enum class EITEMSELLSTATUS: uint8 {
	NOT_SELL = 0 UMETA(DisplayName="NOT_SELL"),	//不可出售
	SELL = 1 UMETA(DisplayName="SELL"),	//可出售
	INDATE_NOT_SELL = 2 UMETA(DisplayName="INDATE_NOT_SELL"),	//活动有效期内不可出售,活动到期可出售
};

UENUM(BlueprintType)
enum class EPVPMODE: uint8 {
	AUTO_CHESS = 0 UMETA(DisplayName="AUTO_CHESS"),	//快速
	AUTO_CHESS_RANK = 1 UMETA(DisplayName="AUTO_CHESS_RANK"),	//排位
	CUSTOM = 2 UMETA(DisplayName="CUSTOM"),	//自定义
	NEW_PLAYER = 3 UMETA(DisplayName="NEW_PLAYER"),	//新手场
	MELEE = 4 UMETA(DisplayName="MELEE"),	//大乱斗
	TEAM_BATTLE = 5 UMETA(DisplayName="TEAM_BATTLE"),	//组队Battle(2V2V2V2 休闲)
	TEAM_BATTLE_RANK = 6 UMETA(DisplayName="TEAM_BATTLE_RANK"),	//组队Battle(2V2V2V2 排位)
	COMBAT_TRAINING = 7 UMETA(DisplayName="COMBAT_TRAINING"),	//三倍快乐模式
	NEW_PLAYER_GUIDE = 8 UMETA(DisplayName="NEW_PLAYER_GUIDE"),	//新手引导
	CUSTOM_BATTLE = 9 UMETA(DisplayName="CUSTOM_BATTLE"),	//自定义战斗模式
	TEACH_BATTLE = 11 UMETA(DisplayName="TEACH_BATTLE"),	//教学关卡模式
	AI_TRAIN = 12 UMETA(DisplayName="AI_TRAIN"),	//实战训练
	BIGWINNER = 13 UMETA(DisplayName="BIGWINNER"),	//大赢家
	TWOVSTWO = 14 UMETA(DisplayName="TWOVSTWO"),	//2v2(休闲)
	FOURVSFOUR = 15 UMETA(DisplayName="FOURVSFOUR"),	//4v4(休闲)
	FOURVSFOUR_RANK = 16 UMETA(DisplayName="FOURVSFOUR_RANK"),	//4v4(排位)
	NIAN_PVE = 17 UMETA(DisplayName="NIAN_PVE"),	//年兽pve
	PVE = 18 UMETA(DisplayName="PVE"),	//选技挑战pve
	OLD_AUTO_CHESS = 19 UMETA(DisplayName="OLD_AUTO_CHESS"),	//怀旧单人
	OLD_FOURVSFOUR = 20 UMETA(DisplayName="OLD_FOURVSFOUR"),	//怀旧四人休闲
	TOWER_DEFENSE = 21 UMETA(DisplayName="TOWER_DEFENSE"),	//塔防
	MODE_MAX_NUM = 22 UMETA(DisplayName="MODE_MAX_NUM"),	//pvp模式最大数
};

UENUM(BlueprintType)
enum class ETEAMGROUP: uint8 {
	TYPE_COMPETOTPR = 0 UMETA(DisplayName="TYPE_COMPETOTPR"),	// 参赛组
	TYPE_OBSERVER = 1 UMETA(DisplayName="TYPE_OBSERVER"),	// 观众
	TYPE_REFEREE = 2 UMETA(DisplayName="TYPE_REFEREE"),	// 裁判
	TYPE_MAX_NUM = 3 UMETA(DisplayName="TYPE_MAX_NUM"),
};

UENUM(BlueprintType)
enum class ETEAMTYPE: uint8 {
	NORMAL = 0 UMETA(DisplayName="NORMAL"),	// 普通房间
	OBSERVER = 1 UMETA(DisplayName="OBSERVER"),	// OB(比赛房间)
	TOURNAMENT_ROOM = 3 UMETA(DisplayName="TOURNAMENT_ROOM"),	// 锦标赛房间
};

enum class ETEAMGROUPBEGINIDX: int32 {
	IDX_COMPETOTPR = 0,	// 选手
	IDX_REFEREE = 1000,	// 裁判(最大1000个裁判)
	IDX_OBSERVER = 2000,	// 观众
};

UENUM(BlueprintType)
enum class ETEAMOP: uint8 {
	SETTING = 0 UMETA(DisplayName="SETTING"),	// 设置
	SWITCH_GROUP = 1 UMETA(DisplayName="SWITCH_GROUP"),	// 队长调整组
	APPOINTLEADER = 2 UMETA(DisplayName="APPOINTLEADER"),	// 委任队长
	REFRESH_SLOT = 3 UMETA(DisplayName="REFRESH_SLOT"),	// 刷新格子
	SELF_SWITCH_GROUP = 4 UMETA(DisplayName="SELF_SWITCH_GROUP"),	// 自己更换组
	INVITE_JOIN_TEAM = 5 UMETA(DisplayName="INVITE_JOIN_TEAM"),	// 邀请入队
	CHANGE_NAME = 6 UMETA(DisplayName="CHANGE_NAME"),	// 修改名称
	SWITCH_SLOT = 7 UMETA(DisplayName="SWITCH_SLOT"),	// 调换位置(选手席)
	BET_ON_BOUNTY = 8 UMETA(DisplayName="BET_ON_BOUNTY"),	// 投注(赏金)
	UPDATE_DEBUFF = 9 UMETA(DisplayName="UPDATE_DEBUFF"),	// 修改pve 词缀难度
};

UENUM(BlueprintType)
enum class EOFFLINE_INVITE: uint8 {
	TX_WX = 0 UMETA(DisplayName="TX_WX"),	// 微信
	TX_QQ = 1 UMETA(DisplayName="TX_QQ"),	// QQ
};

UENUM(BlueprintType)
enum class EWINTYPE: uint8 {
	WINTYPE_FAIL = 0 UMETA(DisplayName="WINTYPE_FAIL"),	//失败
	WINTYPE_WIN = 1 UMETA(DisplayName="WINTYPE_WIN"),	//胜利
	WINTYPE_DRAW = 2 UMETA(DisplayName="WINTYPE_DRAW"),	//平局
	WINTYPE_NOT_UPDATE = 3 UMETA(DisplayName="WINTYPE_NOT_UPDATE"),
};

UENUM(BlueprintType)
enum class ERANKTYPE: uint8 {
	RANKTYPE_NULL = 0 UMETA(DisplayName="RANKTYPE_NULL"),
	RANKTYPE_MMR = 1 UMETA(DisplayName="RANKTYPE_MMR"),	//单人奖章排行榜
	RANKTYPE_MVP_AUTO_CHESS = 2 UMETA(DisplayName="RANKTYPE_MVP_AUTO_CHESS"),	//单人吃鸡休闲排行榜
	RANKTYPE_MVP_AUTO_CHESS_RANK = 3 UMETA(DisplayName="RANKTYPE_MVP_AUTO_CHESS_RANK"),	//单人吃鸡排位排行榜
	RANKTYPE_MVP_NEW_PLAYER = 4 UMETA(DisplayName="RANKTYPE_MVP_NEW_PLAYER"),	//单人吃鸡新手排行榜
	RANKTYPE_MVP_MELEE = 5 UMETA(DisplayName="RANKTYPE_MVP_MELEE"),	//单人吃鸡梦境排行榜
	RANKTYPE_MMR_TEAM_BATTLE = 6 UMETA(DisplayName="RANKTYPE_MMR_TEAM_BATTLE"),	//2V2奖章排行榜
	RANKTYPE_MVP_TEAM_BATTLE = 7 UMETA(DisplayName="RANKTYPE_MVP_TEAM_BATTLE"),	//2V2吃鸡休闲排行榜
	RANKTYPE_MVP_TEAM_BATTLE_RANK = 8 UMETA(DisplayName="RANKTYPE_MVP_TEAM_BATTLE_RANK"),	//2V2吃鸡排位排行榜
	RANKTYPE_BATTLE_STAR = 9 UMETA(DisplayName="RANKTYPE_BATTLE_STAR"),	//证书等级榜
	RANKTYPE_PLAYER_LEVEL = 10 UMETA(DisplayName="RANKTYPE_PLAYER_LEVEL"),	//角色等级
	RANKTYPE_TOURNAMENT = 11 UMETA(DisplayName="RANKTYPE_TOURNAMENT"),	//锦标赛排行榜
	RANKTYPE_BIGWINNER_SEASONSCORE = 12 UMETA(DisplayName="RANKTYPE_BIGWINNER_SEASONSCORE"),	//大赢家赛季积分
	RANKTYPE_FOURVSFOUR_MMR_RANK = 13 UMETA(DisplayName="RANKTYPE_FOURVSFOUR_MMR_RANK"),	//4V4 mmr排行榜
	RANKTYPE_MENTOR = 14 UMETA(DisplayName="RANKTYPE_MENTOR"),	// 师师傅排行榜
	RANKTYPE_MAX_NUM = 15 UMETA(DisplayName="RANKTYPE_MAX_NUM"),
};

UENUM(BlueprintType)
enum class EFROZEN_TYPE: uint8 {
	FROZEN_TYPE_NULL = 0 UMETA(DisplayName="FROZEN_TYPE_NULL"),
	FROZEN_TYPE_ACCOUNT = 1 UMETA(DisplayName="FROZEN_TYPE_ACCOUNT"),	//封号
	FROZEN_TYPE_DEV = 2 UMETA(DisplayName="FROZEN_TYPE_DEV"),	//封设备
	FROZEN_TYPE_CHAT = 3 UMETA(DisplayName="FROZEN_TYPE_CHAT"),	//世界聊天禁言
	FROZEN_TYPE_PUBLISH_STATE = 4 UMETA(DisplayName="FROZEN_TYPE_PUBLISH_STATE"),	//封禁发布圈子状态
	FROZEN_TYPE_GROWUP_DEFEND = 5 UMETA(DisplayName="FROZEN_TYPE_GROWUP_DEFEND"),	//成长守护封号
	FROZEN_TYPE_MAX_NUM = 6 UMETA(DisplayName="FROZEN_TYPE_MAX_NUM"),
};

UENUM(BlueprintType)
enum class ENOTICETYPE: uint8 {
	NOTICETYPE_NULL = 0 UMETA(DisplayName="NOTICETYPE_NULL"),
	NOTICETYPE_OPEN = 1 UMETA(DisplayName="NOTICETYPE_OPEN"),	//开服
	NOTICETYPE_STOP = 2 UMETA(DisplayName="NOTICETYPE_STOP"),	//停服
	NOTICETYPE_FROZE_ACCOUNT = 3 UMETA(DisplayName="NOTICETYPE_FROZE_ACCOUNT"),	//封账号
	NOTICETYPE_FROZE_DEV = 4 UMETA(DisplayName="NOTICETYPE_FROZE_DEV"),	//封设备
	NOTICETYPE_LY_WHITE_LIST = 5 UMETA(DisplayName="NOTICETYPE_LY_WHITE_LIST"),	//龙渊白名单
	NOTICETYPE_ACTIVE_CODE = 6 UMETA(DisplayName="NOTICETYPE_ACTIVE_CODE"),
	NOTICETYPE_APK_UPGRADE = 7 UMETA(DisplayName="NOTICETYPE_APK_UPGRADE"),	//apk更新提示
	NOTICETYPE_RESOURCE_UPGRADE = 8 UMETA(DisplayName="NOTICETYPE_RESOURCE_UPGRADE"),	//资源更新提示
	NOTICETYPE_FROZE_GROWUP_DEFEND = 9 UMETA(DisplayName="NOTICETYPE_FROZE_GROWUP_DEFEND"),	//成长守护封号
	NOTICETYPE_PRELOGIN = 10 UMETA(DisplayName="NOTICETYPE_PRELOGIN"),	//登录前公告
	NOTICETYPE_MAX_NUM = 11 UMETA(DisplayName="NOTICETYPE_MAX_NUM"),
};

UENUM(BlueprintType)
enum class ENOTICETAP: uint8 {
	NOTICETAP_NEW = 0 UMETA(DisplayName="NOTICETAP_NEW"),	//新闻公告
	NOTICETAP_ACTIVITY = 1 UMETA(DisplayName="NOTICETAP_ACTIVITY"),	//活动公告
	NOTICETAP_SPECIAL = 2 UMETA(DisplayName="NOTICETAP_SPECIAL"),	//特别公告
	NOTICETAP_COMPETITION = 3 UMETA(DisplayName="NOTICETAP_COMPETITION"),	//比赛公告
};

UENUM(BlueprintType)
enum class EPICNOTICEJUMPTYPE: uint8 {
	PICNOTICEJUMPTYPE_IN = 0 UMETA(DisplayName="PICNOTICEJUMPTYPE_IN"),	//图片公告内链类型
	PICNOTICEJUMPTYPE_OUT = 1 UMETA(DisplayName="PICNOTICEJUMPTYPE_OUT"),	//图片公告外链类型
};

UENUM(BlueprintType)
enum class EADSTYPE: uint8 {
	ADSTYPE_NULL = 0 UMETA(DisplayName="ADSTYPE_NULL"),
	ADSTYPE_PVP_LOADING = 1 UMETA(DisplayName="ADSTYPE_PVP_LOADING"),
};

UENUM(BlueprintType)
enum class EADSPAYTYPE: uint8 {
	ADSTYPE_ALL = 0 UMETA(DisplayName="ADSTYPE_ALL"),
	ADSTYPE_NOT_PAY = 1 UMETA(DisplayName="ADSTYPE_NOT_PAY"),
	ADSTYPE_PAY = 2 UMETA(DisplayName="ADSTYPE_PAY"),
};

UENUM(BlueprintType)
enum class EPASSPORTTYPE: uint8 {
	PASSPORT_UNACTIVATED = 0 UMETA(DisplayName="PASSPORT_UNACTIVATED"),	//未激活的
	PASSPORT_FREE = 1 UMETA(DisplayName="PASSPORT_FREE"),	//免费通行证
	PASSPORT_ADVANCE = 2 UMETA(DisplayName="PASSPORT_ADVANCE"),	//进阶版通行证(付费)
	PASSPORT_ADVANCE_SUPER = 3 UMETA(DisplayName="PASSPORT_ADVANCE_SUPER"),	//进阶版组合包
	PASSPORT_ADVANCE_SEGMENT = 4 UMETA(DisplayName="PASSPORT_ADVANCE_SEGMENT"),	//进阶版通行证(分段)
	PASSPORT_ADVANCE_YEAR = 5 UMETA(DisplayName="PASSPORT_ADVANCE_YEAR"),	//进阶版通行证(年卡)
};

UENUM(BlueprintType)
enum class ERELOADTYPE: uint8 {
	RELOAD_LANGUAGE = 0 UMETA(DisplayName="RELOAD_LANGUAGE"),	//多语言
	RELOAD_WHILE_LIST = 1 UMETA(DisplayName="RELOAD_WHILE_LIST"),	//白名单
};

UENUM(BlueprintType)
enum class ETRANSACTION: uint8 {
	TRANSACTION_ALL = 0 UMETA(DisplayName="TRANSACTION_ALL"),	//全部
	TRANSACTION_GET = 1 UMETA(DisplayName="TRANSACTION_GET"),	//获取
	TRANSACTION_USE = 2 UMETA(DisplayName="TRANSACTION_USE"),	//使用
};

enum class ECONDTYPE: int32 {
	CONDTYPE_NULL = 0,
	CHESS_PLAYER_LEVEL = 100,	//棋手达到X级
	ACCUMULATIVE_RANK = 200,	//累计X次对局获得X名以上的排名
	CONTINUOUS_RANK = 201,	//连续X次对局获得X名以上的排名
	FIRST_PAY = 202,	//首充达成
	ACCUMULATIVE_PAY = 203,	//累计充值
	ACCUMULATIVE_COST = 204,	//累计消耗
	ACCUMULATIVE_RANK_FETTER = 205,	// 使用指定羁绊获取指定名次
	ROUND_WIN = 300,	//在不同对局中完成指定回合胜利条件指定次数
	ROUND_STREAK_WIN = 301,	//在不同对局中完成指定回合连胜条件指定次数
	ACCUMULATIVE_ROUND_WIN = 302,	//累计达到指定回合胜利
	ALIVE_ROUND = 400,	//在不同对局中存活指定回合
	BUY_CHESS_PRO = 402,	//在不同对局中完成指定购买职业棋子条件指定次数
	BUY_CHESS_RACE = 403,	//在不同对局中完成购买指定种族棋子指定次数
	ACCUMULATIVE_BUY_CHESS = 405,	//累计购买指定棋子指定数量
	ACCUMULATIVE_BUY_CHESS_PROFESSION = 406,	//累计购买指定职业棋子指定数量
	ACCUMULATIVE_BUY_CHESS_RACE = 407,	//累计购买指定种族棋子指定数量
	ACCUMULATIVE_BUY_CHESS_QUALITY = 408,	//累计购买指定品质棋子指定数量
	SINGLE_ROUND_CHESS_BATTLE = 500,	//在不同对局中完成指定单回合棋子战斗条件指定次数
	SINGLE_ROUND_CHESS_PRO_BATTLE = 501,	//在不同对局中完成指定单回合职业棋子战斗条件指定次数
	SINGLE_ROUND_CHESS_RACE_BATTLE = 502,	//在不同对局中完成指定单回合种族棋子战斗条件指定次数
	SINGLE_ROUND_CHESS_QUALITY_BATTLE = 503,	//在不同对局中完成指定单回合品质棋子战斗条件指定次数
	SINGLE_ROUND_CHESS_STAR_BATTLE = 504,	//在不同对局中完成指定单回合星级棋子战斗条件指定次数
	COMPOSE_CHESS_STAR_PRO = 601,	//在不同对局中完成升星指定星级职业棋子条件指定次数
	COMPOSE_CHESS_STAR_QUALITY = 602,	//在不同对局中完成升星指定星级品质棋子条件指定次数
	ACCUMULATIVE_COMPOSE_CHESS = 603,	//累计升星指定棋子指定数量
	ACCUMULATIVE_COMPOSE_CHESS_STAR_PRO = 604,	//累计升星指定星级指定职业棋子指定数量
	ACCUMULATIVE_COMPOSE_CHESS_STAR = 606,	//累计升星指定星级棋子指定数量
	SELL_CHESS_QUALITY = 703,	//在不同对局中完成出售指定品质棋子条件指定次数
	ACCUMULATIVE_SELL_CHESS = 705,	//累计出售指定棋子指定数量
	ACCUMULATIVE_SELL_CHESS_STAR = 709,	//累计出售指定星级棋子数量
	ACCUMULATIVE_PICKUP_EQUIP = 801,	//累计失去指定装备指定数量
	COMPOSE_EQUIP = 900,	//在不同对局中完成合成指定装备条件指定次数
	ACCUMULATIVE_COMPOSE_EQUIP = 901,	//累计合成指定装备指定数量
	ACCUMULATIVE_COMPOSE_EQUIP_QUALITY = 902,	//累计合成指定品质装备指定数量
	ACCUMULATIVE_GAIN_GOLD = 1004,	//累计获取指定数量金币
	ACCUMULATIVE_GAIN_GOLD_STREAK = 1005,	//通过连胜累计获取指定数量金币
	ACCUMULATIVE_GAIN_GOLD_LOSS = 1006,	//通过连败累计获取指定数量金币
	ACCUMULATIVE_GAIN_GOLD_INTEREST = 1007,	//通过利息累计获取指定数量金币
	USE_GOLD = 1100,	//在不同对局中完成指定消耗金币条件指定次数
	ACCUMULATIVE_USE_GOLD = 1104,	//累计消耗指定数量金币
	ACCUMULATIVE_USE_GOLD_UPGRADE = 1105,	//通过升级消耗指定数量金币
	ACCUMULATIVE_USE_GOLD_CHESS = 1106,	//通过购买棋子累计消耗指定数量金币
	ACCUMULATIVE_USE_GOLD_REFRESH = 1107,	//通过刷新商店累计消耗指定数量金币
	CHESS_STAR_STAR_BATTLE_AND_WIN = 1314,	//在不同对局中完成指定上阵星级棋子击败敌方指定星级棋子条件指定次数
	CHESS_PRO_RACE_BATTLE_AND_WIN = 1327,	//在不同对局中完成指定上阵职业棋子击败敌方指定种族棋子条件指定次数
	ACCOUNT_LEVEL = 1400,	//达到指定账号等级
	INDIVIDUAL_PVP = 1500,	//单人PVP
	TEAMING_PVP = 1502,	//组队PVP
	INDIVIDUAL_TEAMING_PVP = 1503,	//任意状态下的PVP
	FINISH_PVP = 1504,	//指定模式的pvp
	FINISH_DAY_FIRST_WIN = 1505,	//每日首胜
	PASS_TEACH_BATTLE = 1506,	//通关训练营指定关卡
	ACCUMULATIVE_PASS_TEACH_BATTLE = 1507,	// 在多多训练营中累计完成X个关卡
	GAIN_ITEM_BY_ID = 1600,	//累计获取指定ID指定数量的物品
	GAIN_ITEM_BY_TYPE = 1601,	//累计获取指定类型指定数量的物品
	GAIN_ITEM_BY_CLASS1 = 1602,	//累计获取指定一级类型指定数量的物品
	GAIN_DIFF_ITEM_SKIN_QUALITY = 1603,	//累计解锁X个不同的X星棋子皮肤
	GAIN_FROM_SMELT_ITEM = 1604,	//熔炼获得物品
	ACCUMULATIVE_SHARE = 1900,	//累计指定次数分享
	DAILY_SHARE = 1901,	//每日分享(活动分享)
	ACCUMULATIVE_FOLLOW_EACH_OTHER = 2003,	//累计指定人数互相关注
	COMPLETE_SEASON_CHALLENGE = 2101,	//完成指定次数赛季任务
	COMPLETE_WEEK_CHALLENGE = 2102,	//完成指定次数指定周数周任务
	ACCUMULATIVE_WEEK_CHALLENGE = 2103,	//累计完成指定次数周任务
	ACCUMULATIVE_NEW_PLAYER_TASK = 2104,	//累计完成指定次数新手任务
	COMPLETE_CURRENT_WEEK_CHALLENGE = 2105,	//累计完成当前周指定次数周任务
	ACCUMULATIVE_RETURN_TASK = 2106,	//累计完成回流任务
	ACCUMULATIVE_TASK = 2107,	//累计完成限时任务
	ACCUMULATIVE_NEW_PLAYER_ACT_TASK = 2108,	//累计完成指定活动指定次数新手任务
	SKIP_CLIENT_INTERFACE = 2200,	//累计完成跳转指定客户端界面指定次数
	PLAYER_CUP = 2300,	//玩家达到指定段位
	SEASON_PLAYER_CUP = 2301,	//赛季玩家达到指定段位
	HISTORY_MAX_PLAYER_CUP = 2302,	//玩家历史段位达到指定段位
	ACCUMULATIVE_BUY_EGG = 2400,	//累计抽取扭蛋指定次数
	ACCUMULATIVE_LOGIN = 2500,	//累计登录
	SEASON_ACCUMULATIVE_LOGIN = 2501,	//赛季累计登录
	FRIENDS_INGAME = 2600,	//同玩好友人数
	ALL_FIGHT_TOTAL = 2700,	//全民对局总共达到指定次数
	ALL_FIGHT_ONE = 2701,	//全民对局个人达到指定次数
	REALATIONSHIP_STAR = 2800,	//关系链幸运星
	BUFF_ACT = 2801,	//buff活动效果
	OBSERVE_DURATION = 2802,	//观战时长
	OBSERVE_MODE = 2812,	//观战模式
	RECRUIT_PLAYER_BATTLECOUNT = 2803,	//战友招募-被招募者对局数
	RECRUIT_WITHINVITER_FIGHT = 2804,	//战友招募-同招募者对局
	RECRUIT_WITHRECRUIT_FIGHT = 2805,	//战友招募-同被招募者对局
	GUILD_CREATE_JOIN = 2900,	//创建加入公会
	CHANGE_RECOMMEND_LINEUP = 2950,	//更换推荐阵容
	CHANGE_DRESS = 2951,	//更换装扮
	GAIN_WINNER_SCORE = 3200,	// 在大赢家模式累计赢取X积分
	PASSPORT_TASKS_COMPLETED = 3201,	// 大赢家模式中持有X积分
	SEASON_GAIN_WINNER_SCORE = 3202,	// 赛季大赢家模式中持有X积分
	PVE_GAIN_SCORE = 3203,	// PVE_活动积分
	PVE_CUSTOM_GAIN_SCORE = 3204,	// 创意工坊 PVE积分
	ACCUMULATIVE_COLLECT_SET_MEDAL = 3300,	// 搜集套组勋章
	SEASON_PLAYER_OVER_CUP = 3301,	// 本赛季历史最高段位到达X（只在赛季结算触发）
	ACCUMULATIVE_UNLOCK_CHESS_STAR = 3400,	// 累计解锁X个棋子图鉴星数
	ACCUMULATIVE_TOURNAMENT_BATTLE = 3600,	// 累计进行x次锦标赛x阶段的对局
	MENTOR_INVITE_MSG = 4000,	//师徒 发送邀请
	MENTOR_PLAYER_CUP = 4001,	//师徒 任务
	MENTOR_GRADUATE_PUPIL_NUM = 4002,	//徒弟出师数量任务
	COMMON_PAY = 5000,	//充值
};

UENUM(BlueprintType)
enum class EPASSPORTTASKTYPE: uint8 {
	PASSPORTTASKTYPE_NULL = 0 UMETA(DisplayName="PASSPORTTASKTYPE_NULL"),
	WEEKLY_TASK = 1 UMETA(DisplayName="WEEKLY_TASK"),	//周任务
	WEEKLY_REFRESH = 2 UMETA(DisplayName="WEEKLY_REFRESH"),	//每周刷新任务
	SEASON_TASK = 3 UMETA(DisplayName="SEASON_TASK"),	//赛季任务
	DAILY_REFRESH = 4 UMETA(DisplayName="DAILY_REFRESH"),	//每日刷新任务
	DAILY_TASK = 5 UMETA(DisplayName="DAILY_TASK"),	//每日任务
};

UENUM(BlueprintType)
enum class ESHOPTYPE: uint8 {
	SHOPTYPE_NULL = 0 UMETA(DisplayName="SHOPTYPE_NULL"),
	SHOPTYPE_EGG = 1 UMETA(DisplayName="SHOPTYPE_EGG"),	//扭蛋机
	SHOPTYPE_SPECIAL_GIFT = 2 UMETA(DisplayName="SHOPTYPE_SPECIAL_GIFT"),	//特价礼包
	SHOPTYPE_TIMED_EXCHANGE = 3 UMETA(DisplayName="SHOPTYPE_TIMED_EXCHANGE"),	//限时兑换
};

UENUM(BlueprintType)
enum class EPAYRESULT: uint8 {
	PAYRESULT_SUCCESS = 0 UMETA(DisplayName="PAYRESULT_SUCCESS"),	//成功
	PAYRESULT_FAIL = 1 UMETA(DisplayName="PAYRESULT_FAIL"),	//失败
	PAYRESULT_OTHER = 2 UMETA(DisplayName="PAYRESULT_OTHER"),	//其他
	PAYRESULT_NO_ORDER_DATA = 3 UMETA(DisplayName="PAYRESULT_NO_ORDER_DATA"),	//没有订单数据
	PAYRESULT_ORDER_PAYED = 4 UMETA(DisplayName="PAYRESULT_ORDER_PAYED"),	//订单已经支付
};

UENUM(BlueprintType)
enum class ECURRENCYTYPE: uint8 {
	CURRENCY_RMB = 0 UMETA(DisplayName="CURRENCY_RMB"),	//人民币
	CURRENCY_DOLLAR = 1 UMETA(DisplayName="CURRENCY_DOLLAR"),	//美元
	CURRENCY_RUPEE = 2 UMETA(DisplayName="CURRENCY_RUPEE"),	//印度卢比
	CURRENCY_INDONESIAN_RUPIAH = 3 UMETA(DisplayName="CURRENCY_INDONESIAN_RUPIAH"),	//印度尼西亚盾
	CURRENCY_TAIWAN_DOLLAR = 4 UMETA(DisplayName="CURRENCY_TAIWAN_DOLLAR"),	//台币
	CURRENCY_VIETNAMESE_DONG = 5 UMETA(DisplayName="CURRENCY_VIETNAMESE_DONG"),	//越南盾
	CURRENCY_THAI_BAHT = 6 UMETA(DisplayName="CURRENCY_THAI_BAHT"),	//泰铢
	CURRENCY_PHILIPPINE_PESO = 7 UMETA(DisplayName="CURRENCY_PHILIPPINE_PESO"),	//菲律宾比索
	CURRENCY_RINGGIT = 8 UMETA(DisplayName="CURRENCY_RINGGIT"),	//林吉特
	CURRENCY_BRAZIL_BRL = 9 UMETA(DisplayName="CURRENCY_BRAZIL_BRL"),	//巴西雷亚尔
	CURRENCY_IRAN_TOMANS = 10 UMETA(DisplayName="CURRENCY_IRAN_TOMANS"),	//伊朗 tomans
	CURRENCY_SINGAPORE_SGD = 11 UMETA(DisplayName="CURRENCY_SINGAPORE_SGD"),	//新加坡
	CURRENCY_UNKNOWN = 99 UMETA(DisplayName="CURRENCY_UNKNOWN"),	//未知（用于海外支付货币不确定情况）
};

UENUM(BlueprintType)
enum class ENOTICESHOWTYPE: uint8 {
	NOTICESHOW_NULL = 0 UMETA(DisplayName="NOTICESHOW_NULL"),
	NOTICESHOW_DEFAULT = 1 UMETA(DisplayName="NOTICESHOW_DEFAULT"),	//普通公告
	NOTICESHOW_POP = 2 UMETA(DisplayName="NOTICESHOW_POP"),	//弹窗公告
};

UENUM(BlueprintType)
enum class ENOTICECONTENTTYPE: uint8 {
	NOTICECONTENT_NULL = 0 UMETA(DisplayName="NOTICECONTENT_NULL"),
	NOTICECONTENT_TEXT = 1 UMETA(DisplayName="NOTICECONTENT_TEXT"),	//文字内容公告
	NOTICECONTENT_PICTURE = 2 UMETA(DisplayName="NOTICECONTENT_PICTURE"),	//图片内容公告
	NOTICECONTENT_WEB = 3 UMETA(DisplayName="NOTICECONTENT_WEB"),	//网页公告
	NOTICECONTENT_PICTURE_TEXT = 4 UMETA(DisplayName="NOTICECONTENT_PICTURE_TEXT"),	//图文公告
};

UENUM(BlueprintType)
enum class EACTIVITYTYPE: uint8 {
	ACTIVITY_NULL = 0 UMETA(DisplayName="ACTIVITY_NULL"),
	ACTIVITY_NEW_PLAYER = 1 UMETA(DisplayName="ACTIVITY_NEW_PLAYER"),	//新手活动
	ACTIVITY_FIRST_CHARGE = 2 UMETA(DisplayName="ACTIVITY_FIRST_CHARGE"),	//首充活动
	ACTIVITY_PASSPORT_TYPE_2 = 3 UMETA(DisplayName="ACTIVITY_PASSPORT_TYPE_2"),	//直购通行证type 2
	ACTIVITY_PASSPORT_TYPE_3 = 4 UMETA(DisplayName="ACTIVITY_PASSPORT_TYPE_3"),	//直购通行证组合包 type 3
	ACTIVITY_FRIENDS_INGAME = 5 UMETA(DisplayName="ACTIVITY_FRIENDS_INGAME"),	//同玩好友
	ACTIVITY_ALL_FIGHT = 6 UMETA(DisplayName="ACTIVITY_ALL_FIGHT"),	//全民对局
	ACTIVITY_SHARING_CODE = 7 UMETA(DisplayName="ACTIVITY_SHARING_CODE"),	//主播推广码
	ACTIVITY_ACCUMULATIVE_PAY = 8 UMETA(DisplayName="ACTIVITY_ACCUMULATIVE_PAY"),	//累计充值
	ACTIVITY_ACCUMULATIVE_COST = 9 UMETA(DisplayName="ACTIVITY_ACCUMULATIVE_COST"),	//累计消费
	ACTIVITY_FIRST_PAY = 10 UMETA(DisplayName="ACTIVITY_FIRST_PAY"),	//首充NEW
	ACTIVITY_ITEM_EXCHANGE = 11 UMETA(DisplayName="ACTIVITY_ITEM_EXCHANGE"),	//集道具兑换
	ACTIVITY_REALATIONSHIP_STAR = 12 UMETA(DisplayName="ACTIVITY_REALATIONSHIP_STAR"),	//关系链幸运星
	ACTIVITY_LIMIT_TIME_BUFF = 13 UMETA(DisplayName="ACTIVITY_LIMIT_TIME_BUFF"),	//限时活动BUFF
	ACTIVITY_GROUP_BUY = 14 UMETA(DisplayName="ACTIVITY_GROUP_BUY"),	//团购返利
	ACTIVITY_H5_LINKS = 15 UMETA(DisplayName="ACTIVITY_H5_LINKS"),	//跳转h5界面
	ACTIVITY_RETURN = 16 UMETA(DisplayName="ACTIVITY_RETURN"),	//老玩家回归
	ACTIVITY_WXVVIP_RED_PACKET = 17 UMETA(DisplayName="ACTIVITY_WXVVIP_RED_PACKET"),	//微信大玩家红包活动
	ACTIVITY_SHARE = 18 UMETA(DisplayName="ACTIVITY_SHARE"),	//分享活动(棋子)
	ACTIVITY_CYBER_WEEK = 19 UMETA(DisplayName="ACTIVITY_CYBER_WEEK"),	//礼包活动Cyber Week
	ACTIVITY_YEAR_END_GIFTS = 20 UMETA(DisplayName="ACTIVITY_YEAR_END_GIFTS"),	//礼包活动Year End Gifts
	ACTIVITY_QUESTIONNAIRE = 21 UMETA(DisplayName="ACTIVITY_QUESTIONNAIRE"),	//问卷类活动
	ACTIVITY_TRAFFIC_STEERING = 22 UMETA(DisplayName="ACTIVITY_TRAFFIC_STEERING"),	//定向流量
	ACTIVITY_LIMIT_TIME_MALL = 23 UMETA(DisplayName="ACTIVITY_LIMIT_TIME_MALL"),	//限时活动商城
	ACTIVITY_SHARE_NEWS = 24 UMETA(DisplayName="ACTIVITY_SHARE_NEWS"),	//图片分享(新闻)
	ACTIVITY_H5_LINKS_OVERSEAS = 25 UMETA(DisplayName="ACTIVITY_H5_LINKS_OVERSEAS"),	//跳转海外h5界面
	ACTIVITY_H5_TWITCH_PRIME = 26 UMETA(DisplayName="ACTIVITY_H5_TWITCH_PRIME"),	//跳转海外h5界面
	RETURN_SLIDESHOW = 27 UMETA(DisplayName="RETURN_SLIDESHOW"),	// 回归玩家轮播图广告
	ACTIVITY_RECRUIT = 28 UMETA(DisplayName="ACTIVITY_RECRUIT"),	//招募活动
	ACTIVITY_RETURN_MALL = 29 UMETA(DisplayName="ACTIVITY_RETURN_MALL"),	//回流商店
	ACTIVITY_CHEST = 30 UMETA(DisplayName="ACTIVITY_CHEST"),	//宝箱升级活动
	ACTIVITY_LUCK_MALL = 31 UMETA(DisplayName="ACTIVITY_LUCK_MALL"),	//幸运星商城活动
	ACTIVITY_SIGN = 32 UMETA(DisplayName="ACTIVITY_SIGN"),	//签到活动
	ACTIVITY_TASK = 33 UMETA(DisplayName="ACTIVITY_TASK"),	//限时任务活动
	ACTIVITY_GOA_QUESTIONNAIRE = 34 UMETA(DisplayName="ACTIVITY_GOA_QUESTIONNAIRE"),	//平台问卷活动
	ACTIVITY_NEWPLAYER_GIFT = 35 UMETA(DisplayName="ACTIVITY_NEWPLAYER_GIFT"),	//新手礼包
	ACTIVITY_NEWPLAYER_MALL = 36 UMETA(DisplayName="ACTIVITY_NEWPLAYER_MALL"),	//新手商店
	ACTIVITY_PUZZLE = 37 UMETA(DisplayName="ACTIVITY_PUZZLE"),	//拼图活动
	ACTIVITY_PVE_CHALLENGE = 38 UMETA(DisplayName="ACTIVITY_PVE_CHALLENGE"),	//PVE副本挑战活动
	ACTIVITY_RETURN_GUILD = 39 UMETA(DisplayName="ACTIVITY_RETURN_GUILD"),	//回流指引
	ACTIVITY_NEWPLAYER_SHORTCUT = 40 UMETA(DisplayName="ACTIVITY_NEWPLAYER_SHORTCUT"),	//新手活动快捷方式
	ACTIVITY_PVE = 41 UMETA(DisplayName="ACTIVITY_PVE"),	//pve积分活动
	ACTIVITY_LY_LIMIT = 42 UMETA(DisplayName="ACTIVITY_LY_LIMIT"),	//掌上龙渊限时活动
};

UENUM(BlueprintType)
enum class EHISTORYPVPSHOWPERMISSION: uint8 {
	SHOWPERMISSION_ALL = 0 UMETA(DisplayName="SHOWPERMISSION_ALL"),	//允许所有人
	SHOWPERMISSION_FANS = 1 UMETA(DisplayName="SHOWPERMISSION_FANS"),	//允许互粉好友
	SHOWPERMISSION_DENIED = 2 UMETA(DisplayName="SHOWPERMISSION_DENIED"),	//禁止所有
};

UENUM(BlueprintType)
enum class ECHATTYPE: uint8 {
	CHATTYPE_All = 0 UMETA(DisplayName="CHATTYPE_All"),	//所有
	CHATTYPE_WORLD = 1 UMETA(DisplayName="CHATTYPE_WORLD"),	//世界聊天
	CHATTYPE_PERSONAL = 2 UMETA(DisplayName="CHATTYPE_PERSONAL"),	//私聊
	CHATTYPE_TEAM = 3 UMETA(DisplayName="CHATTYPE_TEAM"),	//队伍聊天
	CHATTYPE_BATTLE = 4 UMETA(DisplayName="CHATTYPE_BATTLE"),	//局内聊天
	CHATTYPE_CAMP = 5 UMETA(DisplayName="CHATTYPE_CAMP"),	//阵营聊天
	CHATTYPE_INVITE = 6 UMETA(DisplayName="CHATTYPE_INVITE"),	//邀约聊天
	CHATTYPE_WATCHER = 7 UMETA(DisplayName="CHATTYPE_WATCHER"),	//观战聊天
	CHATTYPE_BATTLE_OBSERVER = 8 UMETA(DisplayName="CHATTYPE_BATTLE_OBSERVER"),	//OB局内观众频道(观众和裁判)
	CHATTYPE_BATTLE_COMPETOTPR = 9 UMETA(DisplayName="CHATTYPE_BATTLE_COMPETOTPR"),	//OB局内战斗频道(选手和裁判)
	CHATTYPE_STEAM = 10 UMETA(DisplayName="CHATTYPE_STEAM"),	// 创意工坊世界聊天
	CHATTYPE_GUILD = 11 UMETA(DisplayName="CHATTYPE_GUILD"),	// 公会聊天
};

UENUM(BlueprintType)
enum class ECHATSOURCETYPE: uint8 {
	PLAYER = 0 UMETA(DisplayName="PLAYER"),	// 玩家消息
	RECOMMEND_SHARE = 1 UMETA(DisplayName="RECOMMEND_SHARE"),	// 分享消息
	CHATSOURCETYPE_SHOW_MEDAL = 2 UMETA(DisplayName="CHATSOURCETYPE_SHOW_MEDAL"),	// 炫耀勋章
	CHATSOURCETYPE_MEDAL_EMOTION = 3 UMETA(DisplayName="CHATSOURCETYPE_MEDAL_EMOTION"),	// 勋章表情
	COMMON_JSON_SHARE = 4 UMETA(DisplayName="COMMON_JSON_SHARE"),	// 通用的json 分享消息 以后客户端 都只用这一个类型 之前阵容分享 就不动
	VOICE = 5 UMETA(DisplayName="VOICE"),	// 语音消息
};

enum class ESWITCHTYPE: int32 {
	SWITCHTYPE_NULL = 0,	//无
	BAG_SELL_ITEM = 100,	//禁止背包道具使用/卖道具
	CHAT_All = 200,	//禁止所有种类的聊天
	PVPMODE_AUTO_CHESS = 300,	//禁止pvp模式_快速
	PVPMODE_AUTO_CHESS_RANK = 301,	//禁止pvp模式_排位
	PVPMODE_CUSTOM = 302,	//禁止pvp模式_自定义
	PVPMODE_NEW_PLAYER = 303,	//禁止pvp模式_新手场
	PVPMODE_MELEE = 304,	//禁止pvp模式_大乱斗
	PVPMODE_TEAM_BATTLE = 305,	//禁止pvp模式_组队Battle(2V2V2V2 休闲)
	PVPMODE_TEAM_BATTLE_RANK = 306,	//禁止pvp模式_组队Battle(2V2V2V2 排位)
	PVPMODE_TEACH_BATTLE = 307,	//禁止pvp模式_新手教学战役
	PVPMODE_COMBAT_TRAINING = 308,	//禁止pvp模式_三倍快乐模式
	PVPMODE_AI_TRAIN = 309,	//禁止pvp模式_实战训练模式
	PVPMODE_FOURVSFOUR = 310,	//禁止pvp模式_4v4（休闲）
	PVPMODE_FOURVSFOUR_RANK = 311,	//禁止pvp模式_4v4（排位）
	MAKE_ROOM = 400,	//禁止自建房间和id邀请
	MAKE_TEAM = 500,	//禁止组队
	ACTIVITY_NEWPLAYER = 600,	//禁止活动_迎新活动(不触发这个活动,但不隐藏入口)
	SHOP_EGG = 700,	//禁止商城_购买扭蛋(点的时候,说没有开启)
	SHARE_FINGHT = 800,	//禁止结算分享(客户端控制)
	SHARE_PLATER_INFO = 801,	//禁止个人信息分享(客户端控制)
	PASSPORT = 900,	//禁止骑士证书(服务器不触发累计,也要发给客户端,客户端隐藏界面)
	SYSTEM_MAIL = 1000,	//禁止触发系统邮件(触发条件自动发送：如举报反馈邮件)
	RANK_WORLD = 1100,	//禁止排行榜_世界(对单人,禁止参与,且清除排行榜数据)(对全服,不清排行榜数据,只禁止查看)
	RANK_FOLLOW = 1101,	//禁止排行榜_关注(打标记到玩家身上,客户端自己屏蔽)
	OPEN_GM = 1200,	//开启GM指令(有这个标记,表示能使用GM指令)(不支持在线开启时间相关GM指令)
	CLOSE_GM_LV_LIMIT = 1201,	//关闭世界聊天,等级限制
	ADD_FRIEND = 1300,	//禁添加好友
	PVPMODE_ALL_WITHOUT_NEW_PLAYER = 1400,	//禁止所有匹配（除了新手模式）
	SWITCH_TOURNAMENT = 1500,	//赛事
	SWITCH_OBSERVE = 1600,	//观战
	SWITCH_LUCKSTAR = 1700,	//幸运星签到(服务器屏蔽)
	SWITCH_OPENPLAT = 1800,	//开放平台
	SWITCH_GROUPBUY = 1900,	//团购返利
};

UENUM(BlueprintType)
enum class EMALLTABTYPE: uint8 {
	TAB_NULL = 0 UMETA(DisplayName="TAB_NULL"),
	TAB_TIME_LIMIT = 1 UMETA(DisplayName="TAB_TIME_LIMIT"),	//限时栏位
	TAB_GENERAL = 2 UMETA(DisplayName="TAB_GENERAL"),	//常规
	TAB_RECOMMEND = 3 UMETA(DisplayName="TAB_RECOMMEND"),	//推荐
	TAB_ACTIVITY = 4 UMETA(DisplayName="TAB_ACTIVITY"),	//商城活动
	TAB_RETURN = 5 UMETA(DisplayName="TAB_RETURN"),	//回流商店
	TAB_LUCK = 6 UMETA(DisplayName="TAB_LUCK"),	//幸运星商店
	TAB_BIGWINNER = 7 UMETA(DisplayName="TAB_BIGWINNER"),	//大赢家栏位信息
};

UENUM(BlueprintType)
enum class ESKIPTYPE: uint8 {
	PAGE = 0 UMETA(DisplayName="PAGE"),	//跳转界面
	GOODS = 1 UMETA(DisplayName="GOODS"),	//跳转商品
	VIDEO = 2 UMETA(DisplayName="VIDEO"),	//跳转视频
};

UENUM(BlueprintType)
enum class EJOINTEAMTYPE: uint8 {
	Invited = 0 UMETA(DisplayName="Invited"),	//被邀请进入队伍
	Num = 1 UMETA(DisplayName="Num"),	//通过输入队伍号加入（房间）
	Link = 2 UMETA(DisplayName="Link"),	//通过邀约频道加入
	OfflineInvited = 3 UMETA(DisplayName="OfflineInvited"),	//通过离线邀请
	PlatMatch = 4 UMETA(DisplayName="PlatMatch"),	//通过平台组队进入
	Tournament = 5 UMETA(DisplayName="Tournament"),	//锦标赛
	Reconnect = 6 UMETA(DisplayName="Reconnect"),	//断线重连
	InvalidType = 254 UMETA(DisplayName="InvalidType"),	//无效类型
};

UENUM(BlueprintType)
enum class EBUFFACTSTATUS: uint8 {
	BUFFACTSTATUS_NONE = 0 UMETA(DisplayName="BUFFACTSTATUS_NONE"),	//buff没有生效
	BUFFACTSTATUS_START = 1 UMETA(DisplayName="BUFFACTSTATUS_START"),	//buff开始生效
	BUFFACTSTATUS_END = 2 UMETA(DisplayName="BUFFACTSTATUS_END"),	//buff活动结束
	BUFFACTSTATUS_ENDSHOW = 3 UMETA(DisplayName="BUFFACTSTATUS_ENDSHOW"),	//buff活动结束显示
};

UENUM(BlueprintType)
enum class ESMSTYPE: uint8 {
	SMSTYPE_LY = 0 UMETA(DisplayName="SMSTYPE_LY"),	//ly阿里云短信平台
	SMSTYPE_TENCENT = 1 UMETA(DisplayName="SMSTYPE_TENCENT"),	//腾讯短信平台
};

UENUM(BlueprintType)
enum class EOBSERVELISTTYPE: uint8 {
	OBSERVE_RECOMMEND = 0 UMETA(DisplayName="OBSERVE_RECOMMEND"),	//推荐
	OBSERVE_FOLLOW = 1 UMETA(DisplayName="OBSERVE_FOLLOW"),	//关注
	OBSERVE_TOURNAMENT = 2 UMETA(DisplayName="OBSERVE_TOURNAMENT"),	//赛事推荐
};

UENUM(BlueprintType)
enum class EWEBOP: uint8 {
	WEBOP_NULL = 0 UMETA(DisplayName="WEBOP_NULL"),	//
	WEBOP_BIND_ACC = 1 UMETA(DisplayName="WEBOP_BIND_ACC"),	// 账号绑定
	WEBOP_TRANSFER_TO_OFFICIAL_ACCOUNT = 2 UMETA(DisplayName="WEBOP_TRANSFER_TO_OFFICIAL_ACCOUNT"),	// 转账给官方账号
	WEBOP_EXCHANGE_SELL = 3 UMETA(DisplayName="WEBOP_EXCHANGE_SELL"),	// 交易所-上架商品
	WEBOP_EXCHANGE_GIFT = 4 UMETA(DisplayName="WEBOP_EXCHANGE_GIFT"),	// 交易所-赠送
	WEBOP_EXCHANGE_RECEIVE = 5 UMETA(DisplayName="WEBOP_EXCHANGE_RECEIVE"),	// 交易所-赠送接受
};

UENUM(BlueprintType)
enum class EWEBRESULT: uint8 {
	WEB_RESULT_OK = 0 UMETA(DisplayName="WEB_RESULT_OK"),	//确认
	WEB_RESULT_CANCEL = 1 UMETA(DisplayName="WEB_RESULT_CANCEL"),	//取消
};

UENUM(BlueprintType)
enum class EPUNISHMENTBEHAVIOR: uint8 {
	BEHAVIOR_NULL = 0 UMETA(DisplayName="BEHAVIOR_NULL"),	//没有触发行为
	MATCH_SUCCESS_NOT_CONFIRM = 1 UMETA(DisplayName="MATCH_SUCCESS_NOT_CONFIRM"),	//匹配成功未确认
	MATCH_SUCCESS_OFFLINE = 2 UMETA(DisplayName="MATCH_SUCCESS_OFFLINE"),	//游戏确认阶段离线
	GIVE_UP_AHEAD = 3 UMETA(DisplayName="GIVE_UP_AHEAD"),	//提前投降
	AWAY_FROM_KEYBOARD = 4 UMETA(DisplayName="AWAY_FROM_KEYBOARD"),	//挂机
};

UENUM(BlueprintType)
enum class EPUNISHMENTTYPE: uint8 {
	PUNISHMENT_NULL = 0 UMETA(DisplayName="PUNISHMENT_NULL"),	//没有惩罚
	FORBID_PLAY_GAME = 1 UMETA(DisplayName="FORBID_PLAY_GAME"),	//禁止开始游戏
	FORBID_CHAT = 2 UMETA(DisplayName="FORBID_CHAT"),	//禁止聊天
	FROZEN_ACCOUNT = 3 UMETA(DisplayName="FROZEN_ACCOUNT"),	//封禁账号
	FROZEN_DEVICE = 4 UMETA(DisplayName="FROZEN_DEVICE"),	//封禁设备
};

UENUM(BlueprintType)
enum class EBANNERTYPE: uint8 {
	BANNERTYPE_NULL = 0 UMETA(DisplayName="BANNERTYPE_NULL"),	//无
	BANNERTYPE_HALL = 1 UMETA(DisplayName="BANNERTYPE_HALL"),	//大厅
	BANNERTYPE_MALL_THREE = 2 UMETA(DisplayName="BANNERTYPE_MALL_THREE"),	//商城3级
	BANNERTYPE_FIRST_PAY = 3 UMETA(DisplayName="BANNERTYPE_FIRST_PAY"),	//首充
	BANNERTYPE_BAG = 4 UMETA(DisplayName="BANNERTYPE_BAG"),	//背包
	BANNERTYPE_MAP = 5 UMETA(DisplayName="BANNERTYPE_MAP"),	//图鉴
	BANNERTYPE_HALL_MODE = 6 UMETA(DisplayName="BANNERTYPE_HALL_MODE"),	//大厅模型
	BANNERTYPE_MALL_ONE = 7 UMETA(DisplayName="BANNERTYPE_MALL_ONE"),	//商城1级
	BANNERTYPE_MAX_NUM = 8 UMETA(DisplayName="BANNERTYPE_MAX_NUM"),
};

UENUM(BlueprintType)
enum class EACCOUNT_STATUS: uint8 {
	ACCOUNT_STATUS_NORMAL = 0 UMETA(DisplayName="ACCOUNT_STATUS_NORMAL"),	//正常
	ACCOUNT_STATUS_LOGOFF = 1 UMETA(DisplayName="ACCOUNT_STATUS_LOGOFF"),	//已注销
	ACCOUNT_STATUS_LOGOFF_PROGRESS = 2 UMETA(DisplayName="ACCOUNT_STATUS_LOGOFF_PROGRESS"),	//正在注销
};

UENUM(BlueprintType)
enum class EABTESTTYPE: uint8 {
	AB_NULL = 0 UMETA(DisplayName="AB_NULL"),
	AB_PASSPORT = 1 UMETA(DisplayName="AB_PASSPORT"),	//通行证分组
	AB_NEWGUIDE = 2 UMETA(DisplayName="AB_NEWGUIDE"),	//新手引导分组
	AB_ADVERTISE = 3 UMETA(DisplayName="AB_ADVERTISE"),	//广告分组
	AB_NEWPLAYER = 4 UMETA(DisplayName="AB_NEWPLAYER"),	//新手活动&任务
	AB_PERSONAL_MALL = 5 UMETA(DisplayName="AB_PERSONAL_MALL"),	//精细化投放
};

UENUM(BlueprintType)
enum class ELABELTYPE: uint8 {
	LABELTYPE_NULL = 0 UMETA(DisplayName="LABELTYPE_NULL"),
	LABELTYPE_LINKAGE = 1 UMETA(DisplayName="LABELTYPE_LINKAGE"),	//联动
	LABELTYPE_COMMUNITY = 2 UMETA(DisplayName="LABELTYPE_COMMUNITY"),	//社区
	LABELTYPE_COMPETITION = 3 UMETA(DisplayName="LABELTYPE_COMPETITION"),	//赛事
	LABELTYPE_ACTIVITY = 4 UMETA(DisplayName="LABELTYPE_ACTIVITY"),	//活动
	LABELTYPE_LIVE = 5 UMETA(DisplayName="LABELTYPE_LIVE"),	//直播
	LABELTYPE_UPDATE = 6 UMETA(DisplayName="LABELTYPE_UPDATE"),	//更新
	LABELTYPE_REPAIR = 7 UMETA(DisplayName="LABELTYPE_REPAIR"),	//修复
	LABELTYPE_PUNISHMENT = 8 UMETA(DisplayName="LABELTYPE_PUNISHMENT"),	//处罚
};

UENUM(BlueprintType)
enum class EINVITETYPE: uint8 {
	INVITE_NULL = 0 UMETA(DisplayName="INVITE_NULL"),
	INVITE_TEAM = 1 UMETA(DisplayName="INVITE_TEAM"),	//组队邀约
	INVITE_OBSERVE = 2 UMETA(DisplayName="INVITE_OBSERVE"),	//观战邀约
	INVITE_GUILD = 3 UMETA(DisplayName="INVITE_GUILD"),	//公会邀约
};

UENUM(BlueprintType)
enum class ETOURNAMENTSTATUS: uint8 {
	TOURNAMENT_STATUS_NULL = 0 UMETA(DisplayName="TOURNAMENT_STATUS_NULL"),	//
	TOURNAMENT_STATUS_WILL_BEGIN = 1 UMETA(DisplayName="TOURNAMENT_STATUS_WILL_BEGIN"),	//赛事将要开始还未开始
	TOURNAMENT_STATUS_BEGINNING = 2 UMETA(DisplayName="TOURNAMENT_STATUS_BEGINNING"),	//赛事开始但是还未报名
	TOURNAMENT_STATUS_ENROLLING = 3 UMETA(DisplayName="TOURNAMENT_STATUS_ENROLLING"),	//赛事正在报名
	TOURNAMENT_STATUS_ENROLL_END = 4 UMETA(DisplayName="TOURNAMENT_STATUS_ENROLL_END"),	//已经结束报名
	TOURNAMENT_STATUS_END = 5 UMETA(DisplayName="TOURNAMENT_STATUS_END"),	//赛事结束
	TOURNAMENT_STATUS_CANCEL = 6 UMETA(DisplayName="TOURNAMENT_STATUS_CANCEL"),	//赛事取消
};

UENUM(BlueprintType)
enum class EPASSPORTREFRESH: uint8 {
	PASSPORTREFRESH_NONE = 0 UMETA(DisplayName="PASSPORTREFRESH_NONE"),
	PASSPORTREFRESH_DAY = 1 UMETA(DisplayName="PASSPORTREFRESH_DAY"),
	PASSPORTREFRESH_WEEK = 2 UMETA(DisplayName="PASSPORTREFRESH_WEEK"),
};

UENUM(BlueprintType)
enum class EOBSERVEPRIVILEGE: uint8 {
	OBSERVE_ALL = 0 UMETA(DisplayName="OBSERVE_ALL"),	//允许所有人观战
	OBSERVE_NONE = 1 UMETA(DisplayName="OBSERVE_NONE"),	//禁止所有人观战
	OBSERVE_MUTUAL_FOLLOW = 2 UMETA(DisplayName="OBSERVE_MUTUAL_FOLLOW"),	//允许互关好友观战
};

UENUM(BlueprintType)
enum class ENoticeSkip: uint8 {
	UINull = 0 UMETA(DisplayName="UINull"),
	UIHallBag_34 = 1 UMETA(DisplayName="UIHallBag_34"),
	UIHallBag_35 = 2 UMETA(DisplayName="UIHallBag_35"),
	UIHallMainPlayer_0 = 10 UMETA(DisplayName="UIHallMainPlayer_0"),
	UIEmail_0 = 11 UMETA(DisplayName="UIEmail_0"),
	UIHallBattlePassport_51 = 12 UMETA(DisplayName="UIHallBattlePassport_51"),
	UIHallBattlePassport_52 = 13 UMETA(DisplayName="UIHallBattlePassport_52"),
	UIHallBattlePassport_53 = 14 UMETA(DisplayName="UIHallBattlePassport_53"),
	UIHallBattlePassport_54 = 15 UMETA(DisplayName="UIHallBattlePassport_54"),
	UIHallPicBook_3 = 17 UMETA(DisplayName="UIHallPicBook_3"),
	UIHallPicBook_4 = 18 UMETA(DisplayName="UIHallPicBook_4"),
	UIHallPicBook_5 = 19 UMETA(DisplayName="UIHallPicBook_5"),
	UIHallPicBook_6 = 20 UMETA(DisplayName="UIHallPicBook_6"),
	UIHallPicBook_18 = 21 UMETA(DisplayName="UIHallPicBook_18"),
	UIHallActivityFollow_0 = 33 UMETA(DisplayName="UIHallActivityFollow_0"),
	UIHallModeSelect_0 = 34 UMETA(DisplayName="UIHallModeSelect_0"),
	UIHallModeSelect_1 = 35 UMETA(DisplayName="UIHallModeSelect_1"),
	UIHallModeSelect_2 = 36 UMETA(DisplayName="UIHallModeSelect_2"),
	UIHallModeSelect_3 = 37 UMETA(DisplayName="UIHallModeSelect_3"),
	UIHallCharge_0 = 49 UMETA(DisplayName="UIHallCharge_0"),
	UIHallSeason_0 = 50 UMETA(DisplayName="UIHallSeason_0"),
	UIHallSpectator_76 = 55 UMETA(DisplayName="UIHallSpectator_76"),
	UIHallSpectator_77 = 56 UMETA(DisplayName="UIHallSpectator_77"),
	UIHallPicBook_88 = 67 UMETA(DisplayName="UIHallPicBook_88"),
	UIHallActivity_22 = 68 UMETA(DisplayName="UIHallActivity_22"),
	UIHallActivity_41 = 70 UMETA(DisplayName="UIHallActivity_41"),
	UIHallActivity_48 = 71 UMETA(DisplayName="UIHallActivity_48"),
	UIHallActivity_50 = 72 UMETA(DisplayName="UIHallActivity_50"),
	UIHallActivity_56 = 73 UMETA(DisplayName="UIHallActivity_56"),
	UIHallActivity_57 = 74 UMETA(DisplayName="UIHallActivity_57"),
	UIHallActivity_58 = 75 UMETA(DisplayName="UIHallActivity_58"),
	UIHallActivity_78 = 76 UMETA(DisplayName="UIHallActivity_78"),
	UIHallActivity_82 = 77 UMETA(DisplayName="UIHallActivity_82"),
	UIHallActivity_85 = 79 UMETA(DisplayName="UIHallActivity_85"),
	UIHallSelectMode_0 = 80 UMETA(DisplayName="UIHallSelectMode_0"),
	UIHallActivity_83 = 81 UMETA(DisplayName="UIHallActivity_83"),
	UIHallMall_0 = 82 UMETA(DisplayName="UIHallMall_0"),
	UIHallBag_99 = 83 UMETA(DisplayName="UIHallBag_99"),
	UIHallBag_100 = 84 UMETA(DisplayName="UIHallBag_100"),
	UIHallBag_101 = 85 UMETA(DisplayName="UIHallBag_101"),
	UIHallBag_102 = 86 UMETA(DisplayName="UIHallBag_102"),
	UIHallActivity_44 = 87 UMETA(DisplayName="UIHallActivity_44"),
	UIHallActivity_45 = 88 UMETA(DisplayName="UIHallActivity_45"),
	UIHallActivity_46 = 89 UMETA(DisplayName="UIHallActivity_46"),
	UIHallActivity_49 = 90 UMETA(DisplayName="UIHallActivity_49"),
	UIHallActivity_81 = 91 UMETA(DisplayName="UIHallActivity_81"),
	UIShareCommon_65 = 92 UMETA(DisplayName="UIShareCommon_65"),
	UIShareCommon_66 = 93 UMETA(DisplayName="UIShareCommon_66"),
	UIShareCommon_67 = 94 UMETA(DisplayName="UIShareCommon_67"),
	UIShareCommon_68 = 95 UMETA(DisplayName="UIShareCommon_68"),
	UIShareCommon_69 = 96 UMETA(DisplayName="UIShareCommon_69"),
	UIShareCommon_70 = 97 UMETA(DisplayName="UIShareCommon_70"),
	UIShareCommon_71 = 98 UMETA(DisplayName="UIShareCommon_71"),
	UIShareCommon_72 = 99 UMETA(DisplayName="UIShareCommon_72"),
	UIShareCommon_73 = 100 UMETA(DisplayName="UIShareCommon_73"),
	UIShareCommon_74 = 101 UMETA(DisplayName="UIShareCommon_74"),
	UIShareCommon_75 = 102 UMETA(DisplayName="UIShareCommon_75"),
	UIHallWorkshop_0 = 103 UMETA(DisplayName="UIHallWorkshop_0"),
	UIHallPicBook_141 = 104 UMETA(DisplayName="UIHallPicBook_141"),
	UIHallPicBook_142 = 105 UMETA(DisplayName="UIHallPicBook_142"),
	UIHallPicBook_143 = 106 UMETA(DisplayName="UIHallPicBook_143"),
	UIHallPicBook_144 = 107 UMETA(DisplayName="UIHallPicBook_144"),
	UIHallPicBook_145 = 108 UMETA(DisplayName="UIHallPicBook_145"),
	UIHallGuildJoin_158 = 109 UMETA(DisplayName="UIHallGuildJoin_158"),
	UIHallGuildJoin_159 = 110 UMETA(DisplayName="UIHallGuildJoin_159"),
	UIHallGuildCreateDetails_0 = 111 UMETA(DisplayName="UIHallGuildCreateDetails_0"),
	UIHallGuildMembers_160 = 112 UMETA(DisplayName="UIHallGuildMembers_160"),
	UIHallGuildMembers_161 = 113 UMETA(DisplayName="UIHallGuildMembers_161"),
	UIHallGuildMembers_162 = 114 UMETA(DisplayName="UIHallGuildMembers_162"),
	UIHallActivity_175 = 115 UMETA(DisplayName="UIHallActivity_175"),
	UIHallActivity_140 = 116 UMETA(DisplayName="UIHallActivity_140"),
	UIHallActNotice = 117 UMETA(DisplayName="UIHallActNotice"),
};

UENUM(BlueprintType)
enum class EVIDEO_TYPE: uint8 {
	Teaching = 0 UMETA(DisplayName="Teaching"),	// 教学视频
	Genre = 1 UMETA(DisplayName="Genre"),	// 阵容视频
	MaxType = 2 UMETA(DisplayName="MaxType"),	// 类型最大值
};

UENUM(BlueprintType)
enum class EVIDEO_OPERATE: uint8 {
	Add = 0 UMETA(DisplayName="Add"),	// 添加
	Modify = 1 UMETA(DisplayName="Modify"),	// 修改
	Remove = 2 UMETA(DisplayName="Remove"),	// 删除
};

UENUM(BlueprintType)
enum class ETEAM_DISMISS_REASON: uint8 {
	JOIN_TIMEOUT = 0 UMETA(DisplayName="JOIN_TIMEOUT"),	// 进入房间超时了
	ENTER_PVP = 1 UMETA(DisplayName="ENTER_PVP"),	// 进入PVP
	ENTER_PVP_TIMEOUT = 2 UMETA(DisplayName="ENTER_PVP_TIMEOUT"),	// 有玩家离开了队伍
	TOURNAMENT_ROUND_END = 3 UMETA(DisplayName="TOURNAMENT_ROUND_END"),	// 锦标赛轮次结束
	TEAM_INACTIVE = 4 UMETA(DisplayName="TEAM_INACTIVE"),	// 队伍不活跃
};

UENUM(BlueprintType)
enum class EMALL_GOODS_FLAG: uint8 {
	MGF_NULL = 0 UMETA(DisplayName="MGF_NULL"),
	SALE = 1 UMETA(DisplayName="SALE"),	//打折
	PURCHASE_LIMITATION = 2 UMETA(DisplayName="PURCHASE_LIMITATION"),	//限购
	NEW = 3 UMETA(DisplayName="NEW"),	//新品
	TIME_LIMIT = 4 UMETA(DisplayName="TIME_LIMIT"),	//限时
	HOT = 5 UMETA(DisplayName="HOT"),	//热卖
	THEME = 6 UMETA(DisplayName="THEME"),	//主题
};

UENUM(BlueprintType)
enum class EEXCHANGESTATE: uint8 {
	EXCHANGEMARK_NOT = 0 UMETA(DisplayName="EXCHANGEMARK_NOT"),
	EXCHANGEMARK_NORMAL = 1 UMETA(DisplayName="EXCHANGEMARK_NORMAL"),
};

UENUM(BlueprintType)
enum class EWORDCHAT: uint8 {
	TYPE_COMMON = 0 UMETA(DisplayName="TYPE_COMMON"),	// 普通世界聊天
	TYPE_STEAM = 1 UMETA(DisplayName="TYPE_STEAM"),	// 创意工坊世界聊天
};

UENUM(BlueprintType)
enum class EBuffEffectType: uint8 {
	BuffEffectType_None = 0 UMETA(DisplayName="BuffEffectType_None"),
	BuffEffectType_Exp = 1 UMETA(DisplayName="BuffEffectType_Exp"),
	BuffEffectType_Money = 2 UMETA(DisplayName="BuffEffectType_Money"),
	BuffEffectType_Mall = 3 UMETA(DisplayName="BuffEffectType_Mall"),	//商城活动buff效果
	BuffEffectType_RankProtect = 4 UMETA(DisplayName="BuffEffectType_RankProtect"),	//开黑buff,段位保护
	BuffEffectType_Passport = 5 UMETA(DisplayName="BuffEffectType_Passport"),	//通行证积分加成
	BuffEffectType_NewPlayer_Exp = 6 UMETA(DisplayName="BuffEffectType_NewPlayer_Exp"),	//新手经验加成
	BuffEffectType_Ms = 7 UMETA(DisplayName="BuffEffectType_Ms"),	//师徒加成
};

UENUM(BlueprintType)
enum class EPlayerRecruitStatus: uint8 {
	RECRUIT_INIT = 0 UMETA(DisplayName="RECRUIT_INIT"),	//未招募
	RECRUIT_INVITE = 1 UMETA(DisplayName="RECRUIT_INVITE"),	//邀请招募
	RECRUIT_SUCCESS = 2 UMETA(DisplayName="RECRUIT_SUCCESS"),	//成功招募
	RECRUIT_INVALID = 3 UMETA(DisplayName="RECRUIT_INVALID"),	//无法招募(已经被其他人招募)
};

UENUM(BlueprintType)
enum class ETeachPhase: uint8 {
	Over = 0 UMETA(DisplayName="Over"),	//引导完成
	None = 1 UMETA(DisplayName="None"),	//默认值
	IfSkipGuide = 10 UMETA(DisplayName="IfSkipGuide"),	//是否跳过新手引导
	Guide = 11 UMETA(DisplayName="Guide"),	// 新手引导
	NewPlayerMode = 12 UMETA(DisplayName="NewPlayerMode"),	// 新手模式，包含完成后选中单人模式（非强制)
	ActualBattle = 13 UMETA(DisplayName="ActualBattle"),	//实战训练
	FirstTeachLevel = 14 UMETA(DisplayName="FirstTeachLevel"),	//教学关卡第一关
	ModeSelect = 15 UMETA(DisplayName="ModeSelect"),	//聚焦模式选择（非强制)
	BeginPlay = 16 UMETA(DisplayName="BeginPlay"),	// 聚焦开始游戏（非强制）
	MentorShipPlay = 17 UMETA(DisplayName="MentorShipPlay"),	// 师徒新手引导
};

UENUM(BlueprintType)
enum class EEFFECTTIMETYPE: uint8 {
	EFFECTTIMETYPE_NULL = 0 UMETA(DisplayName="EFFECTTIMETYPE_NULL"),
	WEEKDAY = 1 UMETA(DisplayName="WEEKDAY"),
	FIXDATETIME = 2 UMETA(DisplayName="FIXDATETIME"),
};

UENUM(BlueprintType)
enum class EACTIVITYTEAMSTATE: uint8 {
	TEAMNULL = 0 UMETA(DisplayName="TEAMNULL"),
	TEAMIN = 1 UMETA(DisplayName="TEAMIN"),
	TEAMOUT = 2 UMETA(DisplayName="TEAMOUT"),
};

UENUM(BlueprintType)
enum class EActivityResetType: uint8 {
	ART_NULL = 0 UMETA(DisplayName="ART_NULL"),
	WEEK = 1 UMETA(DisplayName="WEEK"),	// 周
	WEEKREFRESH = 2 UMETA(DisplayName="WEEKREFRESH"),	// 每周刷新
	SEASEN = 3 UMETA(DisplayName="SEASEN"),	// 赛季重置
	DAYLYREFRESH = 4 UMETA(DisplayName="DAYLYREFRESH"),	// 每日重置
};

UENUM(BlueprintType)
enum class EConsumeIncreaseRefresh: uint8 {
	CIRefreshNo = 0 UMETA(DisplayName="CIRefreshNo"),	// 不更新
	CIRefreshDay = 1 UMETA(DisplayName="CIRefreshDay"),	// 天更新
	CIRefreshWeek = 2 UMETA(DisplayName="CIRefreshWeek"),	// 周更新
};

UENUM(BlueprintType)
enum class EActSignType: uint8 {
	UnSign = 0 UMETA(DisplayName="UnSign"),
	SignIn = 1 UMETA(DisplayName="SignIn"),
	ReSign = 2 UMETA(DisplayName="ReSign"),
};

UENUM(BlueprintType)
enum class EGDBinType: uint8 {
	BinNull = 0 UMETA(DisplayName="BinNull"),
	CommonFile = 1 UMETA(DisplayName="CommonFile"),	// 策划配置 common配置
	CoreFile = 2 UMETA(DisplayName="CoreFile"),	// 内核 配置
	UnityLocFile = 3 UMETA(DisplayName="UnityLocFile"),	// unity 客户端本地配置
	UnityGlobalFile = 4 UMETA(DisplayName="UnityGlobalFile"),	// unity 客户端全局配置
	PCFile = 5 UMETA(DisplayName="PCFile"),	// pc配置
};

UENUM(BlueprintType)
enum class EGUILDROLETYPE: uint8 {
	ROLETYPENULL = 0 UMETA(DisplayName="ROLETYPENULL"),
	MEMBER = 1 UMETA(DisplayName="MEMBER"),	// 成员
	OFFICER = 10 UMETA(DisplayName="OFFICER"),	// 官员
	VICE = 20 UMETA(DisplayName="VICE"),	// 副社长
	OWNER = 30 UMETA(DisplayName="OWNER"),	// 社长
};

UENUM(BlueprintType)
enum class EGUILDPERMITTYPE: uint8 {
	GUILDPERMIT_NULL = 0 UMETA(DisplayName="GUILDPERMIT_NULL"),
	GUILDPERMIT_FREE = 1 UMETA(DisplayName="GUILDPERMIT_FREE"),
	GUILDPERMIT_LIMIT = 2 UMETA(DisplayName="GUILDPERMIT_LIMIT"),
};

UENUM(BlueprintType)
enum class ETeamState: uint8 {
	Idle = 0 UMETA(DisplayName="Idle"),	// 空闲
	Matching = 1 UMETA(DisplayName="Matching"),	// 匹配中
	Pvp = 2 UMETA(DisplayName="Pvp"),	// 战斗中
	Dismissed = 3 UMETA(DisplayName="Dismissed"),	// 已解散
	Invalid = 4 UMETA(DisplayName="Invalid"),	// 用于返回错误
	StateCount = 5 UMETA(DisplayName="StateCount"),	// 枚举数量
};

UENUM(BlueprintType)
enum class EPveMode: uint8 {
	Classic = 0 UMETA(DisplayName="Classic"),	//经典模式
	Nightmare = 1 UMETA(DisplayName="Nightmare"),	//噩梦模式
};

UENUM(BlueprintType)
enum class EShortcutMapsOP: uint8 {
	MoveIn = 0 UMETA(DisplayName="MoveIn"),	// 将地图移入快捷入口
	MoveOut = 1 UMETA(DisplayName="MoveOut"),	// 将地图移出快捷入口
	OPCount = 2 UMETA(DisplayName="OPCount"),
};

UENUM(BlueprintType)
enum class ETransferEventType: uint8 {
	Preserved = 0 UMETA(DisplayName="Preserved"),	// 0值保留，以防忘记赋值
	Slient = 1 UMETA(DisplayName="Slient"),	// 代币后台打入对方账户，不需要玩家主动操作，如结算给创意工坊作者的奖励
	OfficialAccount = 2 UMETA(DisplayName="OfficialAccount"),	// 给官方账户转账，如三方平台发起的转账
};

UENUM(BlueprintType)
enum class EOBSERVERACEMODE: uint8 {
	OBSERVE_RACE_TOURNAMENT = 0 UMETA(DisplayName="OBSERVE_RACE_TOURNAMENT"),	//锦标赛比赛
	OBSERVE_RACE_MAX = 100 UMETA(DisplayName="OBSERVE_RACE_MAX"),	//预留100个Game使用,101后的提供给GM后台配置
};

UENUM(BlueprintType)
enum class ETASKTYPE: uint8 {
	DEFAULT = 0 UMETA(DisplayName="DEFAULT"),
	TROPHY = 1 UMETA(DisplayName="TROPHY"),	//ps 成就奖杯任务
	ACHIEVE = 2 UMETA(DisplayName="ACHIEVE"),	//成就勋章任务
};

UENUM(BlueprintType)
enum class EUserRestrictType: uint8 {
	UNLIMITED = 0 UMETA(DisplayName="UNLIMITED"),	// 普通用户
	UNDER_AGE = 1 UMETA(DisplayName="UNDER_AGE"),	// 未成年用户
};

UENUM(BlueprintType)
enum class EOUTPUT_ITEM_TYPE: uint8 {
	ITEM_NORMAL = 0 UMETA(DisplayName="ITEM_NORMAL"),	//正常
	ITEM_LOW = 1 UMETA(DisplayName="ITEM_LOW"),	//低级
	ITEM_HIGH = 2 UMETA(DisplayName="ITEM_HIGH"),	//高级
};

UENUM(BlueprintType)
enum class ELOGINSOURCE: uint8 {
	NORMAL_LOGIN = 0 UMETA(DisplayName="NORMAL_LOGIN"),	//端手游登录
	BLACKBOX_LOGIN = 1 UMETA(DisplayName="BLACKBOX_LOGIN"),	//小黑盒登录
};

UENUM(BlueprintType)
enum class EPASSPORTCARDTYPE: uint8 {
	NO_CARD_TYPE = 0 UMETA(DisplayName="NO_CARD_TYPE"),	//普通包没编号
	DEFAULT_CARD_TYPE = 1 UMETA(DisplayName="DEFAULT_CARD_TYPE"),	//默认编号类型
	GRADUATE_CARD_TYPE = 2 UMETA(DisplayName="GRADUATE_CARD_TYPE"),	//毕业包编号类型
	YEAR_CARD_TYPE = 3 UMETA(DisplayName="YEAR_CARD_TYPE"),	//年卡编号类型
	MAX_CARD_TYPE = 4 UMETA(DisplayName="MAX_CARD_TYPE"),	//违法年卡编号类型
};

UENUM(BlueprintType)
enum class EPVE_BUFF_TYPE: uint8 {
	BUFF_NONE = 0 UMETA(DisplayName="BUFF_NONE"),	//正常
	BUFF_PROP = 1 UMETA(DisplayName="BUFF_PROP"),	//道具
	BUFF_STATION_GAIN = 2 UMETA(DisplayName="BUFF_STATION_GAIN"),	//局内增益
	BUFF_VIP = 3 UMETA(DisplayName="BUFF_VIP"),	//特权buff
	BUFF_DEBUFF = 4 UMETA(DisplayName="BUFF_DEBUFF"),	//debuff
	BUFF_KERNEL = 5 UMETA(DisplayName="BUFF_KERNEL"),	//局内三选一buff
	BUFF_SUPER_VIP = 6 UMETA(DisplayName="BUFF_SUPER_VIP"),	//超级vip
};

UENUM(BlueprintType)
enum class ECHESS_QUALITY: uint8 {
	NORMAL_CHESS = 0 UMETA(DisplayName="NORMAL_CHESS"),	//普通
	RARE_CHESS = 1 UMETA(DisplayName="RARE_CHESS"),	//罕见
	UNCOMMON_CHESS = 2 UMETA(DisplayName="UNCOMMON_CHESS"),	//稀有
	EPIC_CHESS = 3 UMETA(DisplayName="EPIC_CHESS"),	//史诗
	LEGEND_CHESS = 4 UMETA(DisplayName="LEGEND_CHESS"),	//传说
	ALL_CHESS = 99 UMETA(DisplayName="ALL_CHESS"),	//全部
};

UENUM(BlueprintType)
enum class EPVECONSUMETYPE: uint8 {
	CONSUME_SCORE = 0 UMETA(DisplayName="CONSUME_SCORE"),
	CONSUME_ITEM = 1 UMETA(DisplayName="CONSUME_ITEM"),
};

UENUM(BlueprintType)
enum class EPVECHESSTYPE: uint8 {
	CHESS = 0 UMETA(DisplayName="CHESS"),	//购买棋子
	SKILL = 1 UMETA(DisplayName="SKILL"),	//购买技能
};

UENUM(BlueprintType)
enum class EPVESKILLTYPE: uint8 {
	INITIATIVE = 0 UMETA(DisplayName="INITIATIVE"),	//主动
	PASSIVE = 1 UMETA(DisplayName="PASSIVE"),	//被动
};

UENUM(BlueprintType)
enum class EPVERANKTYPE: uint8 {
	RANK_CHALLENGE = 0 UMETA(DisplayName="RANK_CHALLENGE"),	// pve活动挑战排行榜
	RANK_CUSTOM = 1 UMETA(DisplayName="RANK_CUSTOM"),	// 创意工坊挑战排行榜
};

UENUM(BlueprintType)
enum class EMENTORSHIP: uint8 {
	MENTOR = 0 UMETA(DisplayName="MENTOR"),	//师傅
	PUPIL = 1 UMETA(DisplayName="PUPIL"),	//徒弟
	NONE_RELATION = 2 UMETA(DisplayName="NONE_RELATION"),	//非徒弟 非师傅
};

UENUM(BlueprintType)
enum class EMENTORSHIPTASK: uint8 {
	ILLEGAL_ARCHIVE = 0 UMETA(DisplayName="ILLEGAL_ARCHIVE"),	//非法任务类型
	MENTOR_ARCHIVE = 1 UMETA(DisplayName="MENTOR_ARCHIVE"),	// 师傅成就任务
	MENTRO_PUPIL_ARCHIVE = 2 UMETA(DisplayName="MENTRO_PUPIL_ARCHIVE"),	//徒弟任务-师傅获取的徒弟修习任务
	MENTRO_PUPIL_GRADUATE = 3 UMETA(DisplayName="MENTRO_PUPIL_GRADUATE"),	//师傅获取的徒弟出师后任务
};

UENUM(BlueprintType)
enum class EMENTORREACH: uint8 {
	ERROR_TYPE = 0 UMETA(DisplayName="ERROR_TYPE"),
	MAX_HISTORY_MMR = 1 UMETA(DisplayName="MAX_HISTORY_MMR"),	//历史最高mmr
	LEAVEL = 2 UMETA(DisplayName="LEAVEL"),	//等级
	PUPIL_MMR = 3 UMETA(DisplayName="PUPIL_MMR"),	//徒弟mmr
};

UENUM(BlueprintType)
enum class EMENTORADDN: uint8 {
	MMR = 0 UMETA(DisplayName="MMR"),	//排位mmr加成
	EXP = 1 UMETA(DisplayName="EXP"),	//经验加成
	PASSPORT_INTEGER = 2 UMETA(DisplayName="PASSPORT_INTEGER"),	//通行证积分加成
};

UENUM(BlueprintType)
enum class EMENTORLEVEL: uint8 {
	ILLEGAL_LEVEL = 0 UMETA(DisplayName="ILLEGAL_LEVEL"),	//错误等级类型
	COPPER_LEVEL = 1 UMETA(DisplayName="COPPER_LEVEL"),	//铜等级
	SILVER_LEVEL = 2 UMETA(DisplayName="SILVER_LEVEL"),	// 银等级
	GOLD_LEVEL = 3 UMETA(DisplayName="GOLD_LEVEL"),	// 金等级
	MAX_LEVEL = 4 UMETA(DisplayName="MAX_LEVEL"),	// 最大等级
};

UENUM(BlueprintType)
enum class EMENTORRECOMMEND: uint8 {
	MENTOR_RANK = 0 UMETA(DisplayName="MENTOR_RANK"),	//师傅 推荐排行榜
	MENTOR_RAND_LIST = 1 UMETA(DisplayName="MENTOR_RAND_LIST"),	//师傅 推荐活跃推荐
	PUPIL_RANK = 2 UMETA(DisplayName="PUPIL_RANK"),	//徒弟推荐排行榜
};

UENUM(BlueprintType)
enum class EPUPILSTAT: uint8 {
	PRACTICE = 0 UMETA(DisplayName="PRACTICE"),	// 修行状态
	REMOVE = 1 UMETA(DisplayName="REMOVE"),	//解除关系
	GRADUATE = 2 UMETA(DisplayName="GRADUATE"),	//毕业
	PUPIL_GRADUATE_APPLYING = 3 UMETA(DisplayName="PUPIL_GRADUATE_APPLYING"),	// 徒弟毕业申请中
	MENTOR_GRADUATE_APPLYING = 4 UMETA(DisplayName="MENTOR_GRADUATE_APPLYING"),	// 师傅毕业申请中
	LIMIT_REMOVE = 5 UMETA(DisplayName="LIMIT_REMOVE"),	// 毕业徒弟超出上限被删除
};

UENUM(BlueprintType)
enum class EKERNELJSONTYPE: uint8 {
	NONE_TYPE = 0 UMETA(DisplayName="NONE_TYPE"),
	BATTLE_BUFFER = 1 UMETA(DisplayName="BATTLE_BUFFER"),	//战斗buffer
	STATE_JSON = 2 UMETA(DisplayName="STATE_JSON"),	//状态数据
	OTHER = 3 UMETA(DisplayName="OTHER"),	//其他数据
};

USTRUCT(BlueprintType)
struct  FContest {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int X;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Y;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Equip;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessmanCardTag;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Race1;	//种族1

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Race2;	//种族2

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Pro1;	//职业1

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Skill1;	//pve 棋子选择的技能1

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Skill2;	//pve 棋子选择的技能1

};
static void _ConvertPbToFContest(FContest &msg, const msg::Contest *pb) {
	msg.ChessId=pb->chessid();
	msg.X=pb->x();
	msg.Y=pb->y();
	for (int i = 0; i < pb->equip().size(); i++) {
		auto &a = pb->equip().Get(i);
		int tmp;
		tmp=a;
		msg.Equip.Add(tmp);
	}
	msg.ChessmanCardTag=pb->chessmancardtag();
	msg.Race1=pb->race1();
	msg.Race2=pb->race2();
	msg.Pro1=pb->pro1();
	msg.Skill1=pb->skill1();
	msg.Skill2=pb->skill2();
}


USTRUCT(BlueprintType)
struct  FTDCardGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Ids;	// (tag.bson)="ids"

};
static void _ConvertPbToFTDCardGroup(FTDCardGroup &msg, const msg::TDCardGroup *pb) {
	for (int i = 0; i < pb->ids().size(); i++) {
		auto &a = pb->ids().Get(i);
		int tmp;
		tmp=a;
		msg.Ids.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTItemMedal {
	GENERATED_BODY()

	int64 CreateTime;	// 获取时间

	int64 Score;	// 积分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Number;	// 编号

	int64 SeasonId;	// 勋章赛季

};
static void _ConvertPbToFCSDTItemMedal(FCSDTItemMedal &msg, const msg::CSDTItemMedal *pb) {
	msg.CreateTime=pb->createtime();
	msg.Score=pb->score();
	msg.Number=UTF8_TO_TCHAR(pb->number().c_str());
	msg.SeasonId=pb->seasonid();
}


USTRUCT(BlueprintType)
struct  FItemAffix {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float Value;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SourceItemId;	// 来源物品id, 词缀封存道具会用到该属性

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EITEMTYPE SourceItemType;	// 来源物品type, 词缀封存道具会用到该属性

};
static void _ConvertPbToFItemAffix(FItemAffix &msg, const msg::ItemAffix *pb) {
	msg.Id=pb->id();
	msg.Value=pb->value();
	msg.SourceItemId=pb->sourceitemid();
	msg.SourceItemType=(EITEMTYPE)pb->sourceitemtype();
}


USTRUCT(BlueprintType)
struct  FTDItemId {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	// (tag.bson)="id"    id, db内不存储

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	// (tag.bson)="lv"   等级

};
static void _ConvertPbToFTDItemId(FTDItemId &msg, const msg::TDItemId *pb) {
	msg.Id=pb->id();
	msg.Level=pb->level();
}


USTRUCT(BlueprintType)
struct  FPveBuff {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//数量

	int64 Etime;	//结束时间

};
static void _ConvertPbToFPveBuff(FPveBuff &msg, const msg::PveBuff *pb) {
	msg.Count=pb->count();
	msg.Etime=pb->etime();
}


USTRUCT(BlueprintType)
struct  FCSDTItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;

	TArray<int64> Para;

	int64 SurviveTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTItemMedal Medal;

	int64 CreateTime;

	int64 GetTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Number;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Abrasion;	//磨损度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FItemAffix> Affixs;	//物品词缀

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Identified;	//是否已鉴定

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TextureId;	//贴图id

};
static void _ConvertPbToFCSDTItem(FCSDTItem &msg, const msg::CSDTItem *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
	for (int i = 0; i < pb->para().size(); i++) {
		auto &a = pb->para().Get(i);
		int64 tmp;
		tmp=a;
		msg.Para.Add(tmp);
	}
	msg.SurviveTime=pb->survivetime();
	_ConvertPbToFCSDTItemMedal(msg.Medal, &pb->medal());
	msg.CreateTime=pb->createtime();
	msg.GetTime=pb->gettime();
	msg.Number=UTF8_TO_TCHAR(pb->number().c_str());
	msg.Abrasion=UTF8_TO_TCHAR(pb->abrasion().c_str());

    for (auto it = pb->affixs().begin(); it != pb->affixs().end(); it++) {
        FItemAffix tmp_value;
        _ConvertPbToFItemAffix(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Affixs.Add(tmp_key, tmp_value);
    }
	msg.Identified=pb->identified();
	msg.TextureId=pb->textureid();
}


USTRUCT(BlueprintType)
struct  FAward {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//奖励物品ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//奖励物品数量

	TArray<int64> Para;	//辅助参数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;	//实例ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Weight;	//权重

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Price;	//单价

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SourceIdx;	//来源的索引

	int64 SurviveTime;	//

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTItemMedal Medal;	//勋章

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Number;	//物品编号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Abrasion;	//磨损度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FItemAffix> Affixs;	//物品词缀

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Identified;	//是否鉴定

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TextureId;	//贴图id

};
static void _ConvertPbToFAward(FAward &msg, const msg::Award *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	for (int i = 0; i < pb->para().size(); i++) {
		auto &a = pb->para().Get(i);
		int64 tmp;
		tmp=a;
		msg.Para.Add(tmp);
	}
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
	msg.Weight=pb->weight();
	msg.Price=pb->price();
	msg.SourceIdx=pb->sourceidx();
	msg.SurviveTime=pb->survivetime();
	_ConvertPbToFCSDTItemMedal(msg.Medal, &pb->medal());
	msg.Number=UTF8_TO_TCHAR(pb->number().c_str());
	msg.Abrasion=UTF8_TO_TCHAR(pb->abrasion().c_str());

    for (auto it = pb->affixs().begin(); it != pb->affixs().end(); it++) {
        FItemAffix tmp_value;
        _ConvertPbToFItemAffix(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Affixs.Add(tmp_key, tmp_value);
    }
	msg.Identified=pb->identified();
	msg.TextureId=pb->textureid();
}


USTRUCT(BlueprintType)
struct  FCardGroupChess {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//棋子id

	int64 Ctime;	//排序时间

};
static void _ConvertPbToFCardGroupChess(FCardGroupChess &msg, const msg::CardGroupChess *pb) {
	msg.Id=pb->id();
	msg.Ctime=pb->ctime();
}


USTRUCT(BlueprintType)
struct  FEffect {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Type;	//效果类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurLevel;	//当前层数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxLevel;	//最大层数

};
static void _ConvertPbToFEffect(FEffect &msg, const msg::Effect *pb) {
	msg.Type=pb->type();
	msg.CurLevel=pb->curlevel();
	msg.MaxLevel=pb->maxlevel();
}


USTRUCT(BlueprintType)
struct  FCSDTTaskItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//任务ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Progress;	//任务进度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool GetAward;	//是否领奖

};
static void _ConvertPbToFCSDTTaskItem(FCSDTTaskItem &msg, const msg::CSDTTaskItem *pb) {
	msg.Id=pb->id();
	msg.Progress=pb->progress();
	msg.GetAward=pb->getaward();
}


USTRUCT(BlueprintType)
struct  FCardGroupData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCardGroupChess> ChessIds;	//棋子id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AutoAddCardTimes;	// 自动加入常用列表的次数 0 代表不添加

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsAutoAddCardKernel;	// 开局是否自动注入常用棋子

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Flag;	//解锁卡组的标记

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> RemoveChessIds;	//登陆得时候下发 删除的违规棋子

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool KernelFlag;	//局内新手引导

};
static void _ConvertPbToFCardGroupData(FCardGroupData &msg, const msg::CardGroupData *pb) {
	for (int i = 0; i < pb->chessids().size(); i++) {
		auto &a = pb->chessids().Get(i);
		FCardGroupChess tmp;
		_ConvertPbToFCardGroupChess(tmp, &a);
		msg.ChessIds.Add(tmp);
	}
	msg.AutoAddCardTimes=pb->autoaddcardtimes();
	msg.IsAutoAddCardKernel=pb->isautoaddcardkernel();
	msg.Flag=pb->flag();
	for (int i = 0; i < pb->removechessids().size(); i++) {
		auto &a = pb->removechessids().Get(i);
		int tmp;
		tmp=a;
		msg.RemoveChessIds.Add(tmp);
	}
	msg.KernelFlag=pb->kernelflag();
}


USTRUCT(BlueprintType)
struct  FPve {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Score;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, bool> ChessIds;	// chessid : 是否装配

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, bool> Skills;	// skilid  : 是否装配

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FPveBuff> Buff;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RankScore;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TeamName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Unlock;	//是否解锁噩梦模式

};
static void _ConvertPbToFPve(FPve &msg, const msg::Pve *pb) {
	msg.Score=pb->score();

    for (auto it = pb->chessids().begin(); it != pb->chessids().end(); it++) {
        bool tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.ChessIds.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->skills().begin(); it != pb->skills().end(); it++) {
        bool tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Skills.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->buff().begin(); it != pb->buff().end(); it++) {
        FPveBuff tmp_value;
        _ConvertPbToFPveBuff(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Buff.Add(tmp_key, tmp_value);
    }
	msg.RankScore=pb->rankscore();
	msg.TeamName=UTF8_TO_TCHAR(pb->teamname().c_str());
	msg.Unlock=pb->unlock();
}


USTRUCT(BlueprintType)
struct  FPlayerGuildInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Sign;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EGUILDROLETYPE Role;

};
static void _ConvertPbToFPlayerGuildInfo(FPlayerGuildInfo &msg, const msg::PlayerGuildInfo *pb) {
	msg.ID=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Sign=pb->sign();
	msg.Role=(EGUILDROLETYPE)pb->role();
}


USTRUCT(BlueprintType)
struct  FPveDataInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FPve> Data;	//PVE ID : Pve data

};
static void _ConvertPbToFPveDataInfo(FPveDataInfo &msg, const msg::PveDataInfo *pb) {

    for (auto it = pb->data().begin(); it != pb->data().end(); it++) {
        FPve tmp_value;
        _ConvertPbToFPve(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Data.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FTDCardGroups {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDCardGroup ChessBoard;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDCardGroup ChessPlayer;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDCardGroup ChessMan;

};
static void _ConvertPbToFTDCardGroups(FTDCardGroups &msg, const msg::TDCardGroups *pb) {
	_ConvertPbToFTDCardGroup(msg.ChessBoard, &pb->chessboard());
	_ConvertPbToFTDCardGroup(msg.ChessPlayer, &pb->chessplayer());
	_ConvertPbToFTDCardGroup(msg.ChessMan, &pb->chessman());
}


USTRUCT(BlueprintType)
struct  FTDItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	// (tag.bson)="-"    id, db内不存储

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	// (tag.bson)="lv"   等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TalentLevel;	// (tag.bson)="tlv,omitempty"  天赋等级 棋盘才拥有的属性， 棋手和棋子则没有

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	// (tag.bson)="cnt"

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FTDItemId> Equipments;	// (tag.bson)="equip,omitempty"  棋子属性 key：槽位

};
static void _ConvertPbToFTDItem(FTDItem &msg, const msg::TDItem *pb) {
	msg.Id=pb->id();
	msg.Level=pb->level();
	msg.TalentLevel=pb->talentlevel();
	msg.Count=pb->count();

    for (auto it = pb->equipments().begin(); it != pb->equipments().end(); it++) {
        FTDItemId tmp_value;
        _ConvertPbToFTDItemId(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Equipments.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FTDItemGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDCardGroups CardGroups;	//卡组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FTDItem> Items;	//卡组详细数据

};
static void _ConvertPbToFTDItemGroup(FTDItemGroup &msg, const msg::TDItemGroup *pb) {
	_ConvertPbToFTDCardGroups(msg.CardGroups, &pb->cardgroups());

    for (auto it = pb->items().begin(); it != pb->items().end(); it++) {
        FTDItem tmp_value;
        _ConvertPbToFTDItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Items.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTRoleStat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//角色id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int UseTime;	//使用总时长 单位：s

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int KillCnt;	//击杀数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AssistKillCnt;	//助攻数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int DeathCnt;	//死亡数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Talents;	//天赋列表

};
static void _ConvertPbToFCSDTRoleStat(FCSDTRoleStat &msg, const msg::CSDTRoleStat *pb) {
	msg.Id=pb->id();
	msg.UseTime=pb->usetime();
	msg.KillCnt=pb->killcnt();
	msg.AssistKillCnt=pb->assistkillcnt();
	msg.DeathCnt=pb->deathcnt();
	for (int i = 0; i < pb->talents().size(); i++) {
		auto &a = pb->talents().Get(i);
		int tmp;
		tmp=a;
		msg.Talents.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTPvpMvp {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HurtMax;	//伤害最高

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BearHurtMax;	//承受伤害最大

};
static void _ConvertPbToFCSDTPvpMvp(FCSDTPvpMvp &msg, const msg::CSDTPvpMvp *pb) {
	msg.HurtMax=pb->hurtmax();
	msg.BearHurtMax=pb->bearhurtmax();
}


USTRUCT(BlueprintType)
struct  FKernelItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;

};
static void _ConvertPbToFKernelItem(FKernelItem &msg, const msg::KernelItem *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
}


USTRUCT(BlueprintType)
struct  FCSDTFetters {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ResId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EffectNum;	//生效层数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxEffectNum;	//最大层数

};
static void _ConvertPbToFCSDTFetters(FCSDTFetters &msg, const msg::CSDTFetters *pb) {
	msg.ResId=pb->resid();
	msg.EffectNum=pb->effectnum();
	msg.MaxEffectNum=pb->maxeffectnum();
}


USTRUCT(BlueprintType)
struct  FKernelChessInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	// 棋子id (tag.json)="id,omitempty"

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	// 稀有度 (tag.json)="level,omitempty"

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Quantity;	// 数量  (tag.json)="quantity,omitempty"

};
static void _ConvertPbToFKernelChessInfo(FKernelChessInfo &msg, const msg::KernelChessInfo *pb) {
	msg.Id=pb->id();
	msg.Level=pb->level();
	msg.Quantity=pb->quantity();
}


USTRUCT(BlueprintType)
struct  FConsume {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//消耗物品ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//消耗物品数量

	TArray<int64> Para;	//辅助参数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;	//实例ID

};
static void _ConvertPbToFConsume(FConsume &msg, const msg::Consume *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	for (int i = 0; i < pb->para().size(); i++) {
		auto &a = pb->para().Get(i);
		int64 tmp;
		tmp=a;
		msg.Para.Add(tmp);
	}
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTRankSeasonData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CompetitionCnt;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AvgRank;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MvpCount;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MvpProbability;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Top3Count;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Top3Probability;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AvgRound;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int WinTimes;	// 胜利次数

};
static void _ConvertPbToFCSDTRankSeasonData(FCSDTRankSeasonData &msg, const msg::CSDTRankSeasonData *pb) {
	msg.CompetitionCnt=pb->competitioncnt();
	msg.AvgRank=pb->avgrank();
	msg.MvpCount=pb->mvpcount();
	msg.MvpProbability=pb->mvpprobability();
	msg.Top3Count=pb->top3count();
	msg.Top3Probability=pb->top3probability();
	msg.AvgRound=pb->avground();
	msg.WinTimes=pb->wintimes();
}


USTRUCT(BlueprintType)
struct  FCSDTPvpPlayerStat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsRobot;	// 是否是机器人

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsHook;	// 是否挂机，暂时没用

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	// 玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UsrName;	// 玩家昵称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;	// 玩家头像

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MMR;	// 玩家排位分值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessPlayer;	// 棋手id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ChessList;	// 上阵棋子列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Round;	// 总回合数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int WinRound;	// 胜利回合数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FailRound;	// 失败回合数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int DrawRound;	// 平局回合数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int KillNum;	// 击杀棋子数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int DeathNum;	// 棋手被敌方棋子攻击次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SurviveTime;	// 坚持时长

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Hp;	// 当前血量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessPlayerLvl;	// 棋手等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Asyn;	// 是否发生不同步

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsDeath;	// 是否死亡

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamId;	// 队伍Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamPlayerNum;	// 队伍人数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Money;	// 除开出售棋子外的所有收益

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> CurShowItems;	// {itemtype:itemid}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> ChessRace;	// {上阵种族:生效层数}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> ChessPro;	// {上阵职业:生效层数}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TotalValue;	// 上阵棋子总价值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ShareChessList;	// 共享棋子列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTFetters> Fetters;	// 羁绊

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> ShowChessList;	// 需要展示的棋子列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPvpMvp PvpMvp;	// 战斗MVP数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	// 国家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool LeaveInAdvance;	// 是否提前离开游戏

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AFKTime;	// 玩家未操作时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;	// 所属省

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETEAMGROUP Group;	// 用户组id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> UnlockedChess;	// 本场战斗解锁的图鉴

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PassportTypeIds;	// 通行证类型IDList

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PlayerIndex;	// 玩家index

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyID;	// 本局收益的货币ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SurplusCurrency;	// 带入战斗剩余值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Income;	// 本局收益的货币数量(具体算法问策划)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	// ps4

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString channelUsrId;	// ps4

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;	// 用户限制

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PlayerRank;	//玩家排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MoneyCost;	// 对局花费

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MoneyIncome;	// 对局收益

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Score;	// 积分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ChoseCardGroup;	// 所选择的卡组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FKernelItem> PveItems;	// 内核返回的道具id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> AllChoseCardGroup;	// 所选择的卡组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EEXCHANGESTATE ExchangeState;	//拍卖行状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TaskId;	// 任务id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsTaskComplete;	//任务是否完成

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurTaskProgress;	//当前的任务进度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxTaskProgress;	//任务的总进度

};
static void _ConvertPbToFCSDTPvpPlayerStat(FCSDTPvpPlayerStat &msg, const msg::CSDTPvpPlayerStat *pb) {
	msg.IsRobot=pb->isrobot();
	msg.IsHook=pb->ishook();
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.UsrName=UTF8_TO_TCHAR(pb->usrname().c_str());
	msg.HeadPic=pb->headpic();
	msg.MMR=pb->mmr();
	msg.ChessPlayer=pb->chessplayer();
	for (int i = 0; i < pb->chesslist().size(); i++) {
		auto &a = pb->chesslist().Get(i);
		int tmp;
		tmp=a;
		msg.ChessList.Add(tmp);
	}
	msg.Round=pb->round();
	msg.WinRound=pb->winround();
	msg.FailRound=pb->failround();
	msg.DrawRound=pb->drawround();
	msg.KillNum=pb->killnum();
	msg.DeathNum=pb->deathnum();
	msg.SurviveTime=pb->survivetime();
	msg.Hp=pb->hp();
	msg.ChessPlayerLvl=pb->chessplayerlvl();
	msg.Asyn=pb->asyn();
	msg.IsDeath=pb->isdeath();
	msg.TeamId=pb->teamid();
	msg.TeamPlayerNum=pb->teamplayernum();
	msg.Money=pb->money();

    for (auto it = pb->curshowitems().begin(); it != pb->curshowitems().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.CurShowItems.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->chessrace().begin(); it != pb->chessrace().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.ChessRace.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->chesspro().begin(); it != pb->chesspro().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.ChessPro.Add(tmp_key, tmp_value);
    }
	msg.TotalValue=pb->totalvalue();
	for (int i = 0; i < pb->sharechesslist().size(); i++) {
		auto &a = pb->sharechesslist().Get(i);
		int tmp;
		tmp=a;
		msg.ShareChessList.Add(tmp);
	}
	for (int i = 0; i < pb->fetters().size(); i++) {
		auto &a = pb->fetters().Get(i);
		FCSDTFetters tmp;
		_ConvertPbToFCSDTFetters(tmp, &a);
		msg.Fetters.Add(tmp);
	}
	for (int i = 0; i < pb->showchesslist().size(); i++) {
		auto &a = pb->showchesslist().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.ShowChessList.Add(tmp);
	}
	_ConvertPbToFCSDTPvpMvp(msg.PvpMvp, &pb->pvpmvp());
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.LeaveInAdvance=pb->leaveinadvance();
	msg.AFKTime=pb->afktime();
	msg.Province=pb->province();
	msg.Group=(ETEAMGROUP)pb->group();

    for (auto it = pb->unlockedchess().begin(); it != pb->unlockedchess().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.UnlockedChess.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->passporttypeids().size(); i++) {
		auto &a = pb->passporttypeids().Get(i);
		int tmp;
		tmp=a;
		msg.PassportTypeIds.Add(tmp);
	}
	msg.PlayerIndex=pb->playerindex();
	msg.CurrencyID=pb->currencyid();
	msg.SurplusCurrency=pb->surpluscurrency();
	msg.Income=pb->income();
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();
	msg.channelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	msg.RestrictType=(EUserRestrictType)pb->restricttype();
	msg.PlayerRank=pb->playerrank();
	msg.MoneyCost=pb->moneycost();
	msg.MoneyIncome=pb->moneyincome();
	msg.Score=pb->score();
	for (int i = 0; i < pb->chosecardgroup().size(); i++) {
		auto &a = pb->chosecardgroup().Get(i);
		int tmp;
		tmp=a;
		msg.ChoseCardGroup.Add(tmp);
	}

    for (auto it = pb->pveitems().begin(); it != pb->pveitems().end(); it++) {
        FKernelItem tmp_value;
        _ConvertPbToFKernelItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.PveItems.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->allchosecardgroup().size(); i++) {
		auto &a = pb->allchosecardgroup().Get(i);
		int tmp;
		tmp=a;
		msg.AllChoseCardGroup.Add(tmp);
	}
	msg.ExchangeState=(EEXCHANGESTATE)pb->exchangestate();
	msg.TaskId=pb->taskid();
	msg.IsTaskComplete=pb->istaskcomplete();
	msg.CurTaskProgress=pb->curtaskprogress();
	msg.MaxTaskProgress=pb->maxtaskprogress();
}


USTRUCT(BlueprintType)
struct  FHistoryMaxCupMmr {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPVPMODE Mode;	//模式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Mmr;	//mmr

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Period;	//赛季

};
static void _ConvertPbToFHistoryMaxCupMmr(FHistoryMaxCupMmr &msg, const msg::HistoryMaxCupMmr *pb) {
	msg.Mode=(EPVPMODE)pb->mode();
	msg.Mmr=pb->mmr();
	msg.Period=pb->period();
}


USTRUCT(BlueprintType)
struct  FChessDamageStat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TotalDamage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TotalSuffer;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PhysicalDamage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MagicalDamage;

};
static void _ConvertPbToFChessDamageStat(FChessDamageStat &msg, const msg::ChessDamageStat *pb) {
	msg.ChessId=pb->chessid();
	msg.TotalDamage=pb->totaldamage();
	msg.TotalSuffer=pb->totalsuffer();
	msg.PhysicalDamage=pb->physicaldamage();
	msg.MagicalDamage=pb->magicaldamage();
}


USTRUCT(BlueprintType)
struct  FSelectEquip {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RoundId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EquipId;

};
static void _ConvertPbToFSelectEquip(FSelectEquip &msg, const msg::SelectEquip *pb) {
	msg.RoundId=pb->roundid();
	msg.EquipId=pb->equipid();
}


USTRUCT(BlueprintType)
struct  FEquip {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//装备id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//装备数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Quality;	//装备品质

};
static void _ConvertPbToFEquip(FEquip &msg, const msg::Equip *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	msg.Quality=pb->quality();
}


USTRUCT(BlueprintType)
struct  FWorkshopSetting {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapId;	// 地图id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubMapId;	// 子模式id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MapName;	// 地图名称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool joinAISwitch;	// true 可添加 false 不可加

};
static void _ConvertPbToFWorkshopSetting(FWorkshopSetting &msg, const msg::WorkshopSetting *pb) {
	msg.MapId=pb->mapid();
	msg.SubMapId=pb->submapid();
	msg.MapName=UTF8_TO_TCHAR(pb->mapname().c_str());
	msg.joinAISwitch=pb->joinaiswitch();
}


USTRUCT(BlueprintType)
struct  FTowerDefenseData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDItemGroup ItemGroup;	//塔防卡组数组

};
static void _ConvertPbToFTowerDefenseData(FTowerDefenseData &msg, const msg::TowerDefenseData *pb) {
	_ConvertPbToFTDItemGroup(msg.ItemGroup, &pb->itemgroup());
}


USTRUCT(BlueprintType)
struct  FCSDTRoundItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Round;	//第几回合

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int OldHp;	//战斗前生命值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Hp;	//战斗后生命值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int OldRank;	//战斗前名次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Rank;	//战斗后名次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TargetPlayerId;	//战斗对象

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EWINTYPE WinType;	//战斗结果

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> EnemyLeftChess;	//敌方剩余棋子        {chessid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> SelfLeftChess;	//我方剩余棋子        {chessid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Time;	//战斗用时

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> DropEquip;	//掉落装备            {equipid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> SelfContest;	//我方战斗阵容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> TargetContest;	//战斗对象阵容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> SelfBattleChess;	//我方上阵棋子

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> EnemyBattleChess;	//敌方上阵棋子

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> RoundStartContest;	//回合开始手牌阵容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> BattleStartContest;	//战斗开始手牌阵容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessShopFreshCount;	//棋子商店刷新计数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ChessShopFreshList;	//棋子商店刷新列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> BuyChessList;	//购买棋子列表        {chessid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> EquipComposeList;	//装备合成           {equipid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> UpgradeStarChessList;	//棋子升星           {chessid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RoundStartMoney;	//回合开始金币

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BattleStartMoney;	//战斗开始金币

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BattleEndMoney;	//战斗结束金币

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> MoneySourceList;	//金币收入

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> MoneyPayList;	//金币支出

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ReadChessCount;	//研读棋谱次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RoundStartLvl;	//回合开始等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RoundStartExp;	//回合开始经验

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BattleStartLvl;	//战斗开始等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BattleStartExp;	//战斗开始经验

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> SellChessList;	//出售棋子           {chessid:count}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsMonster;	//是否是野怪回合

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int WinCon;	//回合结束是第几连胜，例：0

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LoseCon;	//回合结束是第几连败，例：3

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsLastRound;	//当前回合是否是本玩家的最后回合

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> SharedChessList;	//共享棋子列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> GiveEquipChessList;	//给装备列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FContest> GiveChessList;	//给棋子列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FEffect> RaceEffectList;	//种族效果列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FEffect> ProfessionEffectList;	//职业效果列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FChessDamageStat> ChessDamageList;	//棋子伤害列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> RoundEquipSelections;	//装备的选择

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FSelectEquip> SelectEquips;	//玩家选择装备的数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TargetOpenId;	//玩家的openId

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FEquip> EquipComposeStructList;	//装备合成            {equipid:equip} 为了不破坏原有装备合成数据结构,不然会导致平台那边修改

};
static void _ConvertPbToFCSDTRoundItem(FCSDTRoundItem &msg, const msg::CSDTRoundItem *pb) {
	msg.Round=pb->round();
	msg.OldHp=pb->oldhp();
	msg.Hp=pb->hp();
	msg.OldRank=pb->oldrank();
	msg.Rank=pb->rank();
	msg.TargetPlayerId=UTF8_TO_TCHAR(pb->targetplayerid().c_str());
	msg.WinType=(EWINTYPE)pb->wintype();

    for (auto it = pb->enemyleftchess().begin(); it != pb->enemyleftchess().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.EnemyLeftChess.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->selfleftchess().begin(); it != pb->selfleftchess().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.SelfLeftChess.Add(tmp_key, tmp_value);
    }
	msg.Time=pb->time();

    for (auto it = pb->dropequip().begin(); it != pb->dropequip().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.DropEquip.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->selfcontest().size(); i++) {
		auto &a = pb->selfcontest().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.SelfContest.Add(tmp);
	}
	for (int i = 0; i < pb->targetcontest().size(); i++) {
		auto &a = pb->targetcontest().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.TargetContest.Add(tmp);
	}

    for (auto it = pb->selfbattlechess().begin(); it != pb->selfbattlechess().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.SelfBattleChess.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->enemybattlechess().begin(); it != pb->enemybattlechess().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.EnemyBattleChess.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->roundstartcontest().size(); i++) {
		auto &a = pb->roundstartcontest().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.RoundStartContest.Add(tmp);
	}
	for (int i = 0; i < pb->battlestartcontest().size(); i++) {
		auto &a = pb->battlestartcontest().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.BattleStartContest.Add(tmp);
	}
	msg.ChessShopFreshCount=pb->chessshopfreshcount();
	for (int i = 0; i < pb->chessshopfreshlist().size(); i++) {
		auto &a = pb->chessshopfreshlist().Get(i);
		int tmp;
		tmp=a;
		msg.ChessShopFreshList.Add(tmp);
	}

    for (auto it = pb->buychesslist().begin(); it != pb->buychesslist().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.BuyChessList.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->equipcomposelist().begin(); it != pb->equipcomposelist().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.EquipComposeList.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->upgradestarchesslist().begin(); it != pb->upgradestarchesslist().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.UpgradeStarChessList.Add(tmp_key, tmp_value);
    }
	msg.RoundStartMoney=pb->roundstartmoney();
	msg.BattleStartMoney=pb->battlestartmoney();
	msg.BattleEndMoney=pb->battleendmoney();

    for (auto it = pb->moneysourcelist().begin(); it != pb->moneysourcelist().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.MoneySourceList.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->moneypaylist().begin(); it != pb->moneypaylist().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.MoneyPayList.Add(tmp_key, tmp_value);
    }
	msg.ReadChessCount=pb->readchesscount();
	msg.RoundStartLvl=pb->roundstartlvl();
	msg.RoundStartExp=pb->roundstartexp();
	msg.BattleStartLvl=pb->battlestartlvl();
	msg.BattleStartExp=pb->battlestartexp();

    for (auto it = pb->sellchesslist().begin(); it != pb->sellchesslist().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.SellChessList.Add(tmp_key, tmp_value);
    }
	msg.IsMonster=pb->ismonster();
	msg.WinCon=pb->wincon();
	msg.LoseCon=pb->losecon();
	msg.IsLastRound=pb->islastround();
	for (int i = 0; i < pb->sharedchesslist().size(); i++) {
		auto &a = pb->sharedchesslist().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.SharedChessList.Add(tmp);
	}
	for (int i = 0; i < pb->giveequipchesslist().size(); i++) {
		auto &a = pb->giveequipchesslist().Get(i);
		int tmp;
		tmp=a;
		msg.GiveEquipChessList.Add(tmp);
	}
	for (int i = 0; i < pb->givechesslist().size(); i++) {
		auto &a = pb->givechesslist().Get(i);
		FContest tmp;
		_ConvertPbToFContest(tmp, &a);
		msg.GiveChessList.Add(tmp);
	}
	for (int i = 0; i < pb->raceeffectlist().size(); i++) {
		auto &a = pb->raceeffectlist().Get(i);
		FEffect tmp;
		_ConvertPbToFEffect(tmp, &a);
		msg.RaceEffectList.Add(tmp);
	}
	for (int i = 0; i < pb->professioneffectlist().size(); i++) {
		auto &a = pb->professioneffectlist().Get(i);
		FEffect tmp;
		_ConvertPbToFEffect(tmp, &a);
		msg.ProfessionEffectList.Add(tmp);
	}
	for (int i = 0; i < pb->chessdamagelist().size(); i++) {
		auto &a = pb->chessdamagelist().Get(i);
		FChessDamageStat tmp;
		_ConvertPbToFChessDamageStat(tmp, &a);
		msg.ChessDamageList.Add(tmp);
	}
	for (int i = 0; i < pb->roundequipselections().size(); i++) {
		auto &a = pb->roundequipselections().Get(i);
		int tmp;
		tmp=a;
		msg.RoundEquipSelections.Add(tmp);
	}
	for (int i = 0; i < pb->selectequips().size(); i++) {
		auto &a = pb->selectequips().Get(i);
		FSelectEquip tmp;
		_ConvertPbToFSelectEquip(tmp, &a);
		msg.SelectEquips.Add(tmp);
	}
	msg.TargetOpenId=UTF8_TO_TCHAR(pb->targetopenid().c_str());

    for (auto it = pb->equipcomposestructlist().begin(); it != pb->equipcomposestructlist().end(); it++) {
        FEquip tmp_value;
        _ConvertPbToFEquip(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.EquipComposeStructList.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTCampData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Camp;	//阵营

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Rank;	//阵营排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EWINTYPE WinType;	//胜利状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTPvpPlayerStat> PlayerStat;	//玩家统计

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Surrender;	//是否投降

};
static void _ConvertPbToFCSDTCampData(FCSDTCampData &msg, const msg::CSDTCampData *pb) {
	msg.Camp=pb->camp();
	msg.Rank=pb->rank();
	msg.WinType=(EWINTYPE)pb->wintype();
	for (int i = 0; i < pb->playerstat().size(); i++) {
		auto &a = pb->playerstat().Get(i);
		FCSDTPvpPlayerStat tmp;
		_ConvertPbToFCSDTPvpPlayerStat(tmp, &a);
		msg.PlayerStat.Add(tmp);
	}
	msg.Surrender=pb->surrender();
}


USTRUCT(BlueprintType)
struct  FCSDTChessPlayerEquip {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	// cfgID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;	// 实例ID

};
static void _ConvertPbToFCSDTChessPlayerEquip(FCSDTChessPlayerEquip &msg, const msg::CSDTChessPlayerEquip *pb) {
	msg.Id=pb->id();
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTBattleGroup {
	GENERATED_BODY()

	TMap<FString, uint64> Players;	//每个战斗组的成员    {玩家ID:轮次ID}

	int64 LastPvpEndTime;	//上个对局结束时间

	uint64 GameID;	//正在或者将要进行的id 固定战斗组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsFighting;	//是否正在对局中

	uint64 RoundID;	//GameID对应的轮次ID

	TMap<FString, uint64> GameIDs;	//匹配组当前参加的所有gameId

};
static void _ConvertPbToFCSDTBattleGroup(FCSDTBattleGroup &msg, const msg::CSDTBattleGroup *pb) {

    for (auto it = pb->players().begin(); it != pb->players().end(); it++) {
        uint64 tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Players.Add(tmp_key, tmp_value);
    }
	msg.LastPvpEndTime=pb->lastpvpendtime();
	msg.GameID=pb->gameid();
	msg.IsFighting=pb->isfighting();
	msg.RoundID=pb->roundid();

    for (auto it = pb->gameids().begin(); it != pb->gameids().end(); it++) {
        uint64 tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.GameIDs.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FBountySetting {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyId;	// 货币类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyMin;	// 赏金区间(最小值)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyMax;	// 赏金区间(最大值)

};
static void _ConvertPbToFBountySetting(FBountySetting &msg, const msg::BountySetting *pb) {
	msg.CurrencyId=pb->currencyid();
	msg.CurrencyMin=pb->currencymin();
	msg.CurrencyMax=pb->currencymax();
}


USTRUCT(BlueprintType)
struct  FCSDTChessPlrInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Equips;

};
static void _ConvertPbToFCSDTChessPlrInfo(FCSDTChessPlrInfo &msg, const msg::CSDTChessPlrInfo *pb) {
	msg.Id=pb->id();

    for (auto it = pb->equips().begin(); it != pb->equips().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Equips.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FChessSkinSlotData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FCSDTItem> Slots;

};
static void _ConvertPbToFChessSkinSlotData(FChessSkinSlotData &msg, const msg::ChessSkinSlotData *pb) {

    for (auto it = pb->slots().begin(); it != pb->slots().end(); it++) {
        FCSDTItem tmp_value;
        _ConvertPbToFCSDTItem(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Slots.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTCommonRandList {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EITEMTYPE Type;	//物品类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> List;	//物品列表

};
static void _ConvertPbToFCSDTCommonRandList(FCSDTCommonRandList &msg, const msg::CSDTCommonRandList *pb) {
	msg.Type=(EITEMTYPE)pb->type();
	for (int i = 0; i < pb->list().size(); i++) {
		auto &a = pb->list().Get(i);
		int tmp;
		tmp=a;
		msg.List.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FConsumeIncrease {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;

};
static void _ConvertPbToFConsumeIncrease(FConsumeIncrease &msg, const msg::ConsumeIncrease *pb) {
	msg.Count=pb->count();
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerSimpleInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UsrName;	//用户名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;	//头像框

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicPendant;	//头像挂件

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChatBubble;	//聊天气泡

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MMR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TMMR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Cup;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	//国家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;	//玩家所属省

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatFormType;	//登录设备类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Period;	//通行证的赛季

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PassportTypeIds;	//通行证类型IDList

	uint64 ObservePvpId;	//邀约信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool PS4Only;	// ps4 only 标志

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	//

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrId;	//

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPlayerGuildInfo GuildInfo;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;	// 用户限制类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EEXCHANGESTATE ExchangeState;	//拍卖行状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FHistoryMaxCupMmr> HisToryMaxStat;	//历史最高段位 分模式

};
static void _ConvertPbToFCSDTPlayerSimpleInfo(FCSDTPlayerSimpleInfo &msg, const msg::CSDTPlayerSimpleInfo *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.UsrName=UTF8_TO_TCHAR(pb->usrname().c_str());
	msg.HeadPic=pb->headpic();
	msg.HeadPicFrame=pb->headpicframe();
	msg.HeadPicPendant=pb->headpicpendant();
	msg.ChatBubble=pb->chatbubble();
	msg.MMR=pb->mmr();
	msg.TMMR=pb->tmmr();
	msg.Cup=pb->cup();
	msg.Level=pb->level();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.Province=pb->province();
	msg.PlatFormType=(EPLATFORMTYPE)pb->platformtype();
	msg.Period=pb->period();
	for (int i = 0; i < pb->passporttypeids().size(); i++) {
		auto &a = pb->passporttypeids().Get(i);
		int tmp;
		tmp=a;
		msg.PassportTypeIds.Add(tmp);
	}
	msg.ObservePvpId=pb->observepvpid();
	msg.PS4Only=pb->ps4only();
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();
	msg.ChannelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	_ConvertPbToFPlayerGuildInfo(msg.GuildInfo, &pb->guildinfo());
	msg.RestrictType=(EUserRestrictType)pb->restricttype();
	msg.ExchangeState=(EEXCHANGESTATE)pb->exchangestate();

    for (auto it = pb->historymaxstat().begin(); it != pb->historymaxstat().end(); it++) {
        FHistoryMaxCupMmr tmp_value;
        _ConvertPbToFHistoryMaxCupMmr(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.HisToryMaxStat.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FBuffEffect {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Type;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Value;

};
static void _ConvertPbToFBuffEffect(FBuffEffect &msg, const msg::BuffEffect *pb) {
	msg.Type=pb->type();
	msg.Value=pb->value();
}


USTRUCT(BlueprintType)
struct  FCSDTPvpWinData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EWINTYPE WinType;	//最近胜利类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ResultCnt;	//最近战斗连续结果数

};
static void _ConvertPbToFCSDTPvpWinData(FCSDTPvpWinData &msg, const msg::CSDTPvpWinData *pb) {
	msg.WinType=(EWINTYPE)pb->wintype();
	msg.ResultCnt=pb->resultcnt();
}


USTRUCT(BlueprintType)
struct  FPvpData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPveDataInfo Pve;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCardGroupData CardGroup;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTowerDefenseData TowerDefense;

};
static void _ConvertPbToFPvpData(FPvpData &msg, const msg::PvpData *pb) {
	_ConvertPbToFPveDataInfo(msg.Pve, &pb->pve());
	_ConvertPbToFCardGroupData(msg.CardGroup, &pb->cardgroup());
	_ConvertPbToFTowerDefenseData(msg.TowerDefense, &pb->towerdefense());
}


USTRUCT(BlueprintType)
struct  FCSDTPassportHistory {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPASSPORTTYPE Type;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Season;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;

};
static void _ConvertPbToFCSDTPassportHistory(FCSDTPassportHistory &msg, const msg::CSDTPassportHistory *pb) {
	msg.Type=(EPASSPORTTYPE)pb->type();
	msg.Season=pb->season();
	msg.Level=pb->level();
}


USTRUCT(BlueprintType)
struct  FExchangeRecord {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Init;	//(tag.json)="init"(tag.bson)="init"

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BalanceCount;	//(tag.json)="balanceCount"(tag.bson)="bc" //成交数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SaleCount;	//(tag.json)="saleCount"(tag.bson)="sc"  //上架数量

};
static void _ConvertPbToFExchangeRecord(FExchangeRecord &msg, const msg::ExchangeRecord *pb) {
	msg.Init=pb->init();
	msg.BalanceCount=pb->balancecount();
	msg.SaleCount=pb->salecount();
}


USTRUCT(BlueprintType)
struct  FCSDTRankSeasonInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxMMR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTRankSeasonData> Modes;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxTMMR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxFFMMR;	//赛季4v4最大mmr值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxQueenRank;	//单人排位最高皇后排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxTQueenRank;	//双人排位最高皇后排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxFQueenRank;	//四人排位最高皇后排名

};
static void _ConvertPbToFCSDTRankSeasonInfo(FCSDTRankSeasonInfo &msg, const msg::CSDTRankSeasonInfo *pb) {
	msg.Id=pb->id();
	msg.MaxMMR=pb->maxmmr();

    for (auto it = pb->modes().begin(); it != pb->modes().end(); it++) {
        FCSDTRankSeasonData tmp_value;
        _ConvertPbToFCSDTRankSeasonData(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Modes.Add(tmp_key, tmp_value);
    }
	msg.MaxTMMR=pb->maxtmmr();
	msg.MaxFFMMR=pb->maxffmmr();
	msg.MaxQueenRank=pb->maxqueenrank();
	msg.MaxTQueenRank=pb->maxtqueenrank();
	msg.MaxFQueenRank=pb->maxfqueenrank();
}


USTRUCT(BlueprintType)
struct  FCSDTRound {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTRoundItem> List;

};
static void _ConvertPbToFCSDTRound(FCSDTRound &msg, const msg::CSDTRound *pb) {
	for (int i = 0; i < pb->list().size(); i++) {
		auto &a = pb->list().Get(i);
		FCSDTRoundItem tmp;
		_ConvertPbToFCSDTRoundItem(tmp, &a);
		msg.List.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCond {
	GENERATED_BODY()

	ECONDTYPE Type;	//条件类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Para;	//条件参数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Mode;	//条件模式(这里用string而不是int，以区分0和空)

};
static void _ConvertPbToFCond(FCond &msg, const msg::Cond *pb) {
	msg.Type=(ECONDTYPE)pb->type();
	for (int i = 0; i < pb->para().size(); i++) {
		auto &a = pb->para().Get(i);
		int tmp;
		tmp=a;
		msg.Para.Add(tmp);
	}
	msg.Mode=UTF8_TO_TCHAR(pb->mode().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTChessPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Skin;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Action;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Picture;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Voice;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Equips;	//棋手装扮

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTChessPlayerEquip> Equip;	//棋手装扮 {key:ITEM_TYPE}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;	//棋手实例ID

};
static void _ConvertPbToFCSDTChessPlayer(FCSDTChessPlayer &msg, const msg::CSDTChessPlayer *pb) {
	msg.Id=pb->id();
	msg.Skin=pb->skin();
	msg.Action=pb->action();
	msg.Picture=pb->picture();
	msg.Voice=pb->voice();

    for (auto it = pb->equips().begin(); it != pb->equips().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Equips.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->equip().begin(); it != pb->equip().end(); it++) {
        FCSDTChessPlayerEquip tmp_value;
        _ConvertPbToFCSDTChessPlayerEquip(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Equip.Add(tmp_key, tmp_value);
    }
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTActivityDetail {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//活动ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Progress;	//活动进度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool GetAward;	//是否已领奖

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Md5Sum;	//MD5码

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Unlock;	//是否解锁

};
static void _ConvertPbToFCSDTActivityDetail(FCSDTActivityDetail &msg, const msg::CSDTActivityDetail *pb) {
	msg.Id=pb->id();
	msg.Progress=pb->progress();
	msg.GetAward=pb->getaward();
	msg.Md5Sum=UTF8_TO_TCHAR(pb->md5sum().c_str());
	msg.Unlock=pb->unlock();
}


USTRUCT(BlueprintType)
struct  FCSDTActivityRecord {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Process;	//活动组完成进度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Reward;	//领奖情况

	std::string Params;	//其他参数

};
static void _ConvertPbToFCSDTActivityRecord(FCSDTActivityRecord &msg, const msg::CSDTActivityRecord *pb) {

    for (auto it = pb->process().begin(); it != pb->process().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Process.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->reward().begin(); it != pb->reward().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Reward.Add(tmp_key, tmp_value);
    }
	msg.Params=pb->params();
}


USTRUCT(BlueprintType)
struct  FGMLanguageInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString LanguageType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Translate;

};
static void _ConvertPbToFGMLanguageInfo(FGMLanguageInfo &msg, const msg::GMLanguageInfo *pb) {
	msg.LanguageType=UTF8_TO_TCHAR(pb->languagetype().c_str());
	msg.Translate=UTF8_TO_TCHAR(pb->translate().c_str());
}


USTRUCT(BlueprintType)
struct  FMallGoodsData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//商品ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FAward> Contents;	//商品内容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FConsume> Consumes;	//商品消耗

	int64 OnSaleBeginTime;	//折扣开始时间

	int64 OnSaleEndTime;	//折扣结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SellCountLimit;	//限购次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SellCountResetInterval;	//限购充值周期

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EMALL_GOODS_FLAG Flag;	//标签

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool BulkBuying;	//批量购买标识

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Recommend;	//推荐页额外展示

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Sort;	//展示顺序

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MallTabId;	//所属栏位ID

	int64 ShowBeginTime;

	int64 ShowEndTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool GroupShowFirst;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ShowResource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChargePrivatePara;	//关联充值表

	int64 SellCountStartTime;	//限购开始时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Skips_Interface_pc;	//PC客户端跳转页面

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MoneyOffCount;	//满减数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MoneyOff;	//满减折扣

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Recommend2Nd;	//2级推荐页额外展示

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Recommend3Rd;	//3级推荐页额外展示

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Zone;	//分区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool RepeatedBuy;	//是否可重复购买

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> DownloadList;	//下载渠道

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<EPLATFORMTYPE> PlatformList;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FConsume> Consumes2Nd;	//商品消耗_货币2

	int64 OnSale2NdBeginTime;	//折扣开始时间_货币2

	int64 OnSale2NdEndTime;	//折扣结束时间_货币2

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MoneyOff2NdCount;	//满减数量_货币2

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MoneyOff2Nd;	//满减折扣_货币2

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Version;	//版本号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ExcludeDownload;	//下载渠道 除外

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> CountryList;	//国家列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool DisableDeduction;	//是否禁止使用打折券

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString VideoUrl;	//视频地址

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FAward> Gifts;	//赠送商品

	int64 RecommendBeginTime;	//1级推荐栏位开始时间

	int64 RecommendEndTime;	//1级推荐栏位结束时间

	int64 Recommend2NdBeginTime;	//2级推荐栏位结束时间

	int64 Recommend2NdEndTime;	//2级推荐栏位结束时间

	int64 Recommend3RdBeginTime;	//3级推荐栏位结束时间

	int64 Recommend3RdEndTime;	//3级推荐栏位结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FConsumeIncrease> ConsumeInc;	//消费递增

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EConsumeIncreaseRefresh ConsumeIncRefresh;	//消费递增刷新周期

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ConsumesUrl;	//跳转到其他地址进行购买

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ConsumesUrlWeb;	//网页链接

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ConsumesUrlApp;	//应用scheme

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Series;	//系列类型

};
static void _ConvertPbToFMallGoodsData(FMallGoodsData &msg, const msg::MallGoodsData *pb) {
	msg.Id=pb->id();
	for (int i = 0; i < pb->contents().size(); i++) {
		auto &a = pb->contents().Get(i);
		FAward tmp;
		_ConvertPbToFAward(tmp, &a);
		msg.Contents.Add(tmp);
	}
	for (int i = 0; i < pb->consumes().size(); i++) {
		auto &a = pb->consumes().Get(i);
		FConsume tmp;
		_ConvertPbToFConsume(tmp, &a);
		msg.Consumes.Add(tmp);
	}
	msg.OnSaleBeginTime=pb->onsalebegintime();
	msg.OnSaleEndTime=pb->onsaleendtime();
	msg.SellCountLimit=pb->sellcountlimit();
	msg.SellCountResetInterval=pb->sellcountresetinterval();
	msg.Flag=(EMALL_GOODS_FLAG)pb->flag();
	msg.BulkBuying=pb->bulkbuying();
	msg.Recommend=pb->recommend();
	msg.Sort=pb->sort();
	msg.MallTabId=pb->malltabid();
	msg.ShowBeginTime=pb->showbegintime();
	msg.ShowEndTime=pb->showendtime();
	msg.GroupId=pb->groupid();
	msg.GroupShowFirst=pb->groupshowfirst();
	msg.ShowResource=pb->showresource();
	msg.ChargePrivatePara=pb->chargeprivatepara();
	msg.SellCountStartTime=pb->sellcountstarttime();
	msg.Skips_Interface_pc=pb->skips_interface_pc();
	msg.MoneyOffCount=pb->moneyoffcount();
	msg.MoneyOff=pb->moneyoff();
	msg.Recommend2Nd=pb->recommend2nd();
	msg.Recommend3Rd=pb->recommend3rd();
	msg.Zone=pb->zone();
	msg.RepeatedBuy=pb->repeatedbuy();
	for (int i = 0; i < pb->downloadlist().size(); i++) {
		auto &a = pb->downloadlist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.DownloadList.Add(tmp);
	}
	for (int i = 0; i < pb->platformlist().size(); i++) {
		auto &a = pb->platformlist().Get(i);
		EPLATFORMTYPE tmp;
		tmp=(EPLATFORMTYPE)a;
		msg.PlatformList.Add(tmp);
	}
	for (int i = 0; i < pb->consumes2nd().size(); i++) {
		auto &a = pb->consumes2nd().Get(i);
		FConsume tmp;
		_ConvertPbToFConsume(tmp, &a);
		msg.Consumes2Nd.Add(tmp);
	}
	msg.OnSale2NdBeginTime=pb->onsale2ndbegintime();
	msg.OnSale2NdEndTime=pb->onsale2ndendtime();
	msg.MoneyOff2NdCount=pb->moneyoff2ndcount();
	msg.MoneyOff2Nd=pb->moneyoff2nd();
	msg.Version=UTF8_TO_TCHAR(pb->version().c_str());
	for (int i = 0; i < pb->excludedownload().size(); i++) {
		auto &a = pb->excludedownload().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.ExcludeDownload.Add(tmp);
	}
	for (int i = 0; i < pb->countrylist().size(); i++) {
		auto &a = pb->countrylist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.CountryList.Add(tmp);
	}
	msg.DisableDeduction=pb->disablededuction();
	msg.VideoUrl=UTF8_TO_TCHAR(pb->videourl().c_str());
	for (int i = 0; i < pb->gifts().size(); i++) {
		auto &a = pb->gifts().Get(i);
		FAward tmp;
		_ConvertPbToFAward(tmp, &a);
		msg.Gifts.Add(tmp);
	}
	msg.RecommendBeginTime=pb->recommendbegintime();
	msg.RecommendEndTime=pb->recommendendtime();
	msg.Recommend2NdBeginTime=pb->recommend2ndbegintime();
	msg.Recommend2NdEndTime=pb->recommend2ndendtime();
	msg.Recommend3RdBeginTime=pb->recommend3rdbegintime();
	msg.Recommend3RdEndTime=pb->recommend3rdendtime();
	for (int i = 0; i < pb->consumeinc().size(); i++) {
		auto &a = pb->consumeinc().Get(i);
		FConsumeIncrease tmp;
		_ConvertPbToFConsumeIncrease(tmp, &a);
		msg.ConsumeInc.Add(tmp);
	}
	msg.ConsumeIncRefresh=(EConsumeIncreaseRefresh)pb->consumeincrefresh();
	msg.ConsumesUrl=pb->consumesurl();
	msg.ConsumesUrlWeb=UTF8_TO_TCHAR(pb->consumesurlweb().c_str());
	msg.ConsumesUrlApp=UTF8_TO_TCHAR(pb->consumesurlapp().c_str());
	msg.Series=pb->series();
}


USTRUCT(BlueprintType)
struct  FSwitchItem {
	GENERATED_BODY()

	ESWITCHTYPE SwitchType;	// 封禁类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Forbid;	// 是否封禁

	int64 EndTime;	// 结束时间(endTime==0 为永久封禁)

};
static void _ConvertPbToFSwitchItem(FSwitchItem &msg, const msg::SwitchItem *pb) {
	msg.SwitchType=(ESWITCHTYPE)pb->switchtype();
	msg.Forbid=pb->forbid();
	msg.EndTime=pb->endtime();
}


USTRUCT(BlueprintType)
struct  FCSDTPunishment {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<EPUNISHMENTTYPE> Types;

	int64 ExecuteDeadline;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<EPUNISHMENTBEHAVIOR> Triggers;

};
static void _ConvertPbToFCSDTPunishment(FCSDTPunishment &msg, const msg::CSDTPunishment *pb) {
	msg.Id=pb->id();
	for (int i = 0; i < pb->types().size(); i++) {
		auto &a = pb->types().Get(i);
		EPUNISHMENTTYPE tmp;
		tmp=(EPUNISHMENTTYPE)a;
		msg.Types.Add(tmp);
	}
	msg.ExecuteDeadline=pb->executedeadline();
	for (int i = 0; i < pb->triggers().size(); i++) {
		auto &a = pb->triggers().Get(i);
		EPUNISHMENTBEHAVIOR tmp;
		tmp=(EPUNISHMENTBEHAVIOR)a;
		msg.Triggers.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FKrAddictionInfo {
	GENERATED_BODY()

	int64 LoginTime;	//登陆时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsCheckAddic;	//是否检测沉迷

	int64 StartLimitTime;	//沉迷限制开始时间

	int64 EndLimitTime;	//沉迷限制结束时间

	int64 Countdown1;	//倒计时1

	int64 Countdown2;	//倒计时2

	int64 durantion;	//持续时间

};
static void _ConvertPbToFKrAddictionInfo(FKrAddictionInfo &msg, const msg::KrAddictionInfo *pb) {
	msg.LoginTime=pb->logintime();
	msg.IsCheckAddic=pb->ischeckaddic();
	msg.StartLimitTime=pb->startlimittime();
	msg.EndLimitTime=pb->endlimittime();
	msg.Countdown1=pb->countdown1();
	msg.Countdown2=pb->countdown2();
	msg.durantion=pb->durantion();
}


USTRUCT(BlueprintType)
struct  FRoundData {
	GENERATED_BODY()

	uint64 Round;	// 轮次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Rank;	// 当前轮次的排名  只有在轮次结束时才会设置

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Points;	// 积分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FightTimes;	// 已参与对局数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TotalRank;	// 总名次 除对局数得到平均名次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TopCnt;	// 第一名次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SecondCnt;	// 第二名次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ThirdCnt;	// 第三名次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int WinTimes;	// 战斗胜利回合数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LostBlood;	// 总计棋手受到伤害

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Damage;	// 总计对其他棋手造成伤害

};
static void _ConvertPbToFRoundData(FRoundData &msg, const msg::RoundData *pb) {
	msg.Round=pb->round();
	msg.Rank=pb->rank();

    for (auto it = pb->points().begin(); it != pb->points().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Points.Add(tmp_key, tmp_value);
    }
	msg.FightTimes=pb->fighttimes();
	msg.TotalRank=pb->totalrank();
	msg.TopCnt=pb->topcnt();
	msg.SecondCnt=pb->secondcnt();
	msg.ThirdCnt=pb->thirdcnt();
	msg.WinTimes=pb->wintimes();
	msg.LostBlood=pb->lostblood();
	msg.Damage=pb->damage();
}


USTRUCT(BlueprintType)
struct  FBuffs {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Data;

};
static void _ConvertPbToFBuffs(FBuffs &msg, const msg::Buffs *pb) {
	for (int i = 0; i < pb->data().size(); i++) {
		auto &a = pb->data().Get(i);
		int tmp;
		tmp=a;
		msg.Data.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FExtItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//奖励物品ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//奖励物品数量

	TArray<int64> Para;	//辅助参数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;	//实例ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Weight;	//权重

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Price;	//单价

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SourceIdx;	//来源的索引

};
static void _ConvertPbToFExtItem(FExtItem &msg, const msg::ExtItem *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	for (int i = 0; i < pb->para().size(); i++) {
		auto &a = pb->para().Get(i);
		int64 tmp;
		tmp=a;
		msg.Para.Add(tmp);
	}
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
	msg.Weight=pb->weight();
	msg.Price=pb->price();
	msg.SourceIdx=pb->sourceidx();
}


USTRUCT(BlueprintType)
struct  FPvpBigWinnerData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//场次ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapId;	//地图ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SysPercent;	//系统抽成

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> RankRewardList;	//分配比例

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ConfigName;	//大赢家内核配置文件

};
static void _ConvertPbToFPvpBigWinnerData(FPvpBigWinnerData &msg, const msg::PvpBigWinnerData *pb) {
	msg.Id=pb->id();
	msg.MapId=pb->mapid();
	msg.SysPercent=pb->syspercent();
	for (int i = 0; i < pb->rankrewardlist().size(); i++) {
		auto &a = pb->rankrewardlist().Get(i);
		int tmp;
		tmp=a;
		msg.RankRewardList.Add(tmp);
	}
	msg.ConfigName=UTF8_TO_TCHAR(pb->configname().c_str());
}


USTRUCT(BlueprintType)
struct  FChampionInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Zone;	// 赛区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Period;	// 届数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	// 冠军id

};
static void _ConvertPbToFChampionInfo(FChampionInfo &msg, const msg::ChampionInfo *pb) {
	msg.Zone=pb->zone();
	msg.Period=pb->period();
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTPassportCard {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> TypeIdList;	//通行证类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	//通行证等级

};
static void _ConvertPbToFCSDTPassportCard(FCSDTPassportCard &msg, const msg::CSDTPassportCard *pb) {
	for (int i = 0; i < pb->typeidlist().size(); i++) {
		auto &a = pb->typeidlist().Get(i);
		int tmp;
		tmp=a;
		msg.TypeIdList.Add(tmp);
	}
	msg.Level=pb->level();
}


USTRUCT(BlueprintType)
struct  FPveSetting {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> DeBuffIds;	//词缀ids

};
static void _ConvertPbToFPveSetting(FPveSetting &msg, const msg::PveSetting *pb) {
	for (int i = 0; i < pb->debuffids().size(); i++) {
		auto &a = pb->debuffids().Get(i);
		int tmp;
		tmp=a;
		msg.DeBuffIds.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerPvpData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPveDataInfo Pve;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCardGroupData CardGroup;

};
static void _ConvertPbToFCSDTPlayerPvpData(FCSDTPlayerPvpData &msg, const msg::CSDTPlayerPvpData *pb) {
	_ConvertPbToFPveDataInfo(msg.Pve, &pb->pve());
	_ConvertPbToFCardGroupData(msg.CardGroup, &pb->cardgroup());
}


USTRUCT(BlueprintType)
struct  FPlayerMentorShipInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsMentor;	// 是否为师傅

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MentorId;	//师傅id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Sign;	//签名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool InviteSwitch;	//接受消息开关

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Tag;	//标签

	int64 PunishTime;	//惩罚冷却时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsGraduate;	//是否毕业

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTTaskItem> Tasks;	//徒弟成就任务

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int InviteTimes;	// 邀请次数 师傅的

};
static void _ConvertPbToFPlayerMentorShipInfo(FPlayerMentorShipInfo &msg, const msg::PlayerMentorShipInfo *pb) {
	msg.IsMentor=pb->ismentor();
	msg.MentorId=UTF8_TO_TCHAR(pb->mentorid().c_str());
	msg.Sign=UTF8_TO_TCHAR(pb->sign().c_str());
	msg.InviteSwitch=pb->inviteswitch();
	msg.Tag=pb->tag();
	msg.PunishTime=pb->punishtime();
	msg.IsGraduate=pb->isgraduate();

    for (auto it = pb->tasks().begin(); it != pb->tasks().end(); it++) {
        FCSDTTaskItem tmp_value;
        _ConvertPbToFCSDTTaskItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Tasks.Add(tmp_key, tmp_value);
    }
	msg.InviteTimes=pb->invitetimes();
}


USTRUCT(BlueprintType)
struct  FCSDTMentorInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EMENTORLEVEL Level;

};
static void _ConvertPbToFCSDTMentorInfo(FCSDTMentorInfo &msg, const msg::CSDTMentorInfo *pb) {
	msg.Level=(EMENTORLEVEL)pb->level();
}


USTRUCT(BlueprintType)
struct  FCSDTPvpCampResult {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTCampData> Camp;	// 阵营数据统计

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Rank;	// 似乎没用

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Camp1Score;	// 阵营1分值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Camp2Score;	// 阵营2分值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyID;	// 货币ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyCnt;	// 货币数量(带入战斗剩余值 + EarnedCurrency，算法问策划)

};
static void _ConvertPbToFCSDTPvpCampResult(FCSDTPvpCampResult &msg, const msg::CSDTPvpCampResult *pb) {
	for (int i = 0; i < pb->camp().size(); i++) {
		auto &a = pb->camp().Get(i);
		FCSDTCampData tmp;
		_ConvertPbToFCSDTCampData(tmp, &a);
		msg.Camp.Add(tmp);
	}
	msg.Rank=pb->rank();
	msg.Camp1Score=pb->camp1score();
	msg.Camp2Score=pb->camp2score();
	msg.CurrencyID=pb->currencyid();
	msg.CurrencyCnt=pb->currencycnt();
}


USTRUCT(BlueprintType)
struct  FCSDTRecruitPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPlayerRecruitStatus Status;	//是否被招募

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BattleCount;	//对局数

};
static void _ConvertPbToFCSDTRecruitPlayer(FCSDTRecruitPlayer &msg, const msg::CSDTRecruitPlayer *pb) {
	msg.Status=(EPlayerRecruitStatus)pb->status();
	msg.BattleCount=pb->battlecount();
}


USTRUCT(BlueprintType)
struct  FCSDTTournamentClass {
	GENERATED_BODY()

	uint64 ClassId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTBattleGroup> Groups;	//每个轮次的战斗分组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxPlayerCount;	//玩家数量上限  -1表示无上限

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Cancel;	//该级别是否取消

};
static void _ConvertPbToFCSDTTournamentClass(FCSDTTournamentClass &msg, const msg::CSDTTournamentClass *pb) {
	msg.ClassId=pb->classid();

    for (auto it = pb->groups().begin(); it != pb->groups().end(); it++) {
        FCSDTBattleGroup tmp_value;
        _ConvertPbToFCSDTBattleGroup(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Groups.Add(tmp_key, tmp_value);
    }
	msg.MaxPlayerCount=pb->maxplayercount();
	msg.Cancel=pb->cancel();
}


USTRUCT(BlueprintType)
struct  FTournamentDesc {
	GENERATED_BODY()

	uint64 TournamentID;	// 赛事ID

	uint64 TNClass;	// 赛事级别

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupIndex;	// 赛事组index

	uint64 TNClassRound;	// 赛事轮次

};
static void _ConvertPbToFTournamentDesc(FTournamentDesc &msg, const msg::TournamentDesc *pb) {
	msg.TournamentID=pb->tournamentid();
	msg.TNClass=pb->tnclass();
	msg.GroupIndex=pb->groupindex();
	msg.TNClassRound=pb->tnclassround();
}


USTRUCT(BlueprintType)
struct  FBattleExtData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TicketID;	// 门票ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TicketNum;	// 门票数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> RankRewardList;	// 门票奖励分成(按排名从低到高指定百分比)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapID;	// 地图id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubMapID;	// 地图子模式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurrencyNum;	// 货币数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Version;	// 地图版本号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BountyBaseCurrencyNum;	// 作者投注的金额

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> PlayersBetCurrencyNum;	// 玩家投注

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString AuthorId;	// 作者id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int sysPercent;	// 系统抽成比例

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int sysDrawAuthorPercent;	// 系统对作者的抽成比例

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int authorPercent;	// 作者抽成

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FKernelChessInfo> ChessList;	// 公共卡池

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool CustomCardFlag;	// 是否是自定义组卡玩法

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MapKey;	// 地图Key(对应开放平台uniqueCode字段)

};
static void _ConvertPbToFBattleExtData(FBattleExtData &msg, const msg::BattleExtData *pb) {
	msg.TicketID=pb->ticketid();
	msg.TicketNum=pb->ticketnum();
	for (int i = 0; i < pb->rankrewardlist().size(); i++) {
		auto &a = pb->rankrewardlist().Get(i);
		int tmp;
		tmp=a;
		msg.RankRewardList.Add(tmp);
	}
	msg.MapID=pb->mapid();
	msg.SubMapID=pb->submapid();
	msg.CurrencyNum=pb->currencynum();
	msg.Version=pb->version();
	msg.BountyBaseCurrencyNum=pb->bountybasecurrencynum();

    for (auto it = pb->playersbetcurrencynum().begin(); it != pb->playersbetcurrencynum().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.PlayersBetCurrencyNum.Add(tmp_key, tmp_value);
    }
	msg.AuthorId=UTF8_TO_TCHAR(pb->authorid().c_str());
	msg.sysPercent=pb->syspercent();
	msg.sysDrawAuthorPercent=pb->sysdrawauthorpercent();
	msg.authorPercent=pb->authorpercent();
	for (int i = 0; i < pb->chesslist().size(); i++) {
		auto &a = pb->chesslist().Get(i);
		FKernelChessInfo tmp;
		_ConvertPbToFKernelChessInfo(tmp, &a);
		msg.ChessList.Add(tmp);
	}
	msg.CustomCardFlag=pb->customcardflag();
	msg.MapKey=UTF8_TO_TCHAR(pb->mapkey().c_str());
}


USTRUCT(BlueprintType)
struct  FTeamOPSetting {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString pwd;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool pwdOpen;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool visible;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int inviteAuthority;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETEAMTYPE teamType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int subMode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> lockGroups;	// 最大三个(对应选手，观众 裁判)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int customGameId;	// 用户自定义玩法id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FWorkshopSetting Workshop;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FBountySetting Bounty;	// 是否有赏金

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString channelUsrId;	// 客户端用来过滤

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPveSetting PveSetting;	//pve专用得

};
static void _ConvertPbToFTeamOPSetting(FTeamOPSetting &msg, const msg::TeamOPSetting *pb) {
	msg.pwd=UTF8_TO_TCHAR(pb->pwd().c_str());
	msg.pwdOpen=pb->pwdopen();
	msg.visible=pb->visible();
	msg.inviteAuthority=pb->inviteauthority();
	msg.teamType=(ETEAMTYPE)pb->teamtype();
	msg.name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.subMode=pb->submode();
	for (int i = 0; i < pb->lockgroups().size(); i++) {
		auto &a = pb->lockgroups().Get(i);
		bool tmp;
		tmp=a;
		msg.lockGroups.Add(tmp);
	}
	msg.customGameId=pb->customgameid();
	_ConvertPbToFWorkshopSetting(msg.Workshop, &pb->workshop());
	_ConvertPbToFBountySetting(msg.Bounty, &pb->bounty());
	msg.channelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	_ConvertPbToFPveSetting(msg.PveSetting, &pb->pvesetting());
}


USTRUCT(BlueprintType)
struct  FTeamOPChangeGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString pid;	// 玩家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int groupId;	// 组id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int slot;	// 广播的时候需要带着这个slot(只有选手席有效)

};
static void _ConvertPbToFTeamOPChangeGroup(FTeamOPChangeGroup &msg, const msg::TeamOPChangeGroup *pb) {
	msg.pid=UTF8_TO_TCHAR(pb->pid().c_str());
	msg.groupId=pb->groupid();
	msg.slot=pb->slot();
}


USTRUCT(BlueprintType)
struct  FTeamOPSelfChangeGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int groupId;	// 组id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int slot;	// 格子

};
static void _ConvertPbToFTeamOPSelfChangeGroup(FTeamOPSelfChangeGroup &msg, const msg::TeamOPSelfChangeGroup *pb) {
	msg.groupId=pb->groupid();
	msg.slot=pb->slot();
}


USTRUCT(BlueprintType)
struct  FTeamOPAppointLeader {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString pid;	// 玩家

};
static void _ConvertPbToFTeamOPAppointLeader(FTeamOPAppointLeader &msg, const msg::TeamOPAppointLeader *pb) {
	msg.pid=UTF8_TO_TCHAR(pb->pid().c_str());
}


USTRUCT(BlueprintType)
struct  FTeamOPChangeName {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString name;	// 队伍名

};
static void _ConvertPbToFTeamOPChangeName(FTeamOPChangeName &msg, const msg::TeamOPChangeName *pb) {
	msg.name=UTF8_TO_TCHAR(pb->name().c_str());
}


USTRUCT(BlueprintType)
struct  FTeamOPSwitchSlot {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int groupOne;	// 组1

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int groupTwo;	// 组2

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString playerOne;	// 玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString playerTwo;	// 玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int slotOne;	// 位置1(如果playerOne 为空，该字段有效 无效值为-1)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int slotTwo;	// 位置2(如果playerTwo 为空，该字段有效 无效值为-1)

};
static void _ConvertPbToFTeamOPSwitchSlot(FTeamOPSwitchSlot &msg, const msg::TeamOPSwitchSlot *pb) {
	msg.groupOne=pb->groupone();
	msg.groupTwo=pb->grouptwo();
	msg.playerOne=UTF8_TO_TCHAR(pb->playerone().c_str());
	msg.playerTwo=UTF8_TO_TCHAR(pb->playertwo().c_str());
	msg.slotOne=pb->slotone();
	msg.slotTwo=pb->slottwo();
}


USTRUCT(BlueprintType)
struct  FTeamBetOnBounty {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Num;	// 投注金额

};
static void _ConvertPbToFTeamBetOnBounty(FTeamBetOnBounty &msg, const msg::TeamBetOnBounty *pb) {
	msg.Num=pb->num();
}


USTRUCT(BlueprintType)
struct  FCSDTBagPara {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ESOURCE Source;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubSource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool TriggerEvent;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool NewGet;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString OrderId;

	int64 AddTime;

};
static void _ConvertPbToFCSDTBagPara(FCSDTBagPara &msg, const msg::CSDTBagPara *pb) {
	msg.Source=(ESOURCE)pb->source();
	msg.SubSource=pb->subsource();
	msg.TriggerEvent=pb->triggerevent();
	msg.NewGet=pb->newget();
	msg.OrderId=UTF8_TO_TCHAR(pb->orderid().c_str());
	msg.AddTime=pb->addtime();
}


USTRUCT(BlueprintType)
struct  FPvpPlayerData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UsrName;	//玩家用户名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Index;	//玩家索引

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Camp;	//阵营

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsRobot;	//是否机器人

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CompetitionCnt;	//累计场次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;	//头像

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamPlayerNum;	//所在队伍人数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MMR;	//MMR

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Lvl;	//等级

	int64 ReqTime;	//申请pvp时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatformType;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamId;	//队伍Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Cup;	//杯段

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ApkVersion;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PvpResourceVersion;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Asyn;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessPlayerSkin;	//棋手皮肤ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SceneSkin;	//场景皮肤

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString DeviceType;	//手机牌子

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int DamageEffect;	//伤害特效

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTPvpWinData> ModeWinDatas;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurRankSeason;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MeleeRule;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> CurShowItems;	//{itemtype:itemid}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTCommonRandList EmotionList;	//配置的表情列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrId;	//渠道用户id.openid

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	//渠道类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Settings;	//设置

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AssistantId;	//AI局辅助ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CreditScore;	//信用分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TMMR;	//TMMR

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TCup;	//杯段

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TeamVoiceId;	//队伍语音房间ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamVoiceMemId;	//队伍语音房间成员ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicUrl;	//tx 头像URL

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamBattleCount;	//开黑总局数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamBattleMvpCount;	//开黑总赢局数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RecommendScore;	//推荐分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int WxVVipLevel;	//微信大玩家等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamBattleAvgRank;	//开黑平均排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString CupNameChina;	//杯段中文(专为tx IDIP接口准备)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Language;	//语言

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	//国家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString CupIconUrl;	//杯段icon(专为tx IDIP接口准备)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PersonalAvgMvp;	//个人吃鸡率

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FSwitchItem> SwitchItems;	//封禁信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EOBSERVEPRIVILEGE ObservePrivilege;	//观战权限

	TMap<int, int64> Punishment;	//惩罚信息 {PUNISHMENTTYPE:MaxExecuteDeadline}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Slot;	//队伍中的位置

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTChessPlrInfo CurChessPlr;	//当前使用棋手信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETEAMGROUP TeamGroup;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PvpServerGroup;	//战斗服分组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Ping;	//玩家与战斗服的延迟

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;	//玩家所属省

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TeamVoiceUserId;	//龙渊队伍语音房间成员ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> RegionDelays;	//区域延迟

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FKrAddictionInfo Addiction;	//沉迷信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Region;	//玩家登录服所在区域

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FirstMatchSuccessWaitTime;	//第一次匹配成功等待时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PackageName;	//客户端的包名 判断是否是vng

	uint64 TournamentID;	//玩家赛事id

	uint64 TournamClass;	//赛事级别

	uint64 TournamClassRound;	//赛事进行轮次

	uint64 TournamChessID;	//轮次对局id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PassportTypeIds;	//通行证类型IDList

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Tickets;	//工坊门票 <ticketType, ticketNum>

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SdkCountry;	//SDK国家通过IP获取的

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Ps4Only;	//玩家自己的ps4only标记

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Currencys;	//玩家货币

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString GuildName;	//公会ID 聊天展示

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GuildSign;	//公会标志

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> PSBlockedUsers;	// playstation 用户的黑名单

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FKernelChessInfo> ChessList;	//玩家带入卡组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> SkinSuitID;	//皮肤套装ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FFMMR;	//4v4mmr

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FFCup;	//4v4段位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BattleTime;	//战斗总时长(抛开准备时间)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FChessSkinSlotData> ChessSkinData;	//当前配置的棋手皮肤 @update.beta28

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTItem> SkinData;	//当前配置的装扮 @update.beta28 <itemtype, item>

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPvpData PvpData;	//玩家额外得pvp数据：如卡组、pve 等数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PvpVoiceMemId;	//pvp语音成员id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CampVoiceMemId;	//阵营语音成员id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChoseCardGroup;	//选择的卡组id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MentorId;	//选择的卡组id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EEXCHANGESTATE ExchangeState;	//交易状态

};
static void _ConvertPbToFPvpPlayerData(FPvpPlayerData &msg, const msg::PvpPlayerData *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.UsrName=UTF8_TO_TCHAR(pb->usrname().c_str());
	msg.Index=pb->index();
	msg.Camp=pb->camp();
	msg.IsRobot=pb->isrobot();
	msg.CompetitionCnt=pb->competitioncnt();
	msg.HeadPic=pb->headpic();
	msg.TeamPlayerNum=pb->teamplayernum();
	msg.MMR=pb->mmr();
	msg.Lvl=pb->lvl();
	msg.ReqTime=pb->reqtime();
	msg.PlatformType=(EPLATFORMTYPE)pb->platformtype();
	msg.TeamId=pb->teamid();
	msg.Cup=pb->cup();
	msg.ApkVersion=UTF8_TO_TCHAR(pb->apkversion().c_str());
	msg.PvpResourceVersion=UTF8_TO_TCHAR(pb->pvpresourceversion().c_str());
	msg.Asyn=pb->asyn();
	msg.ChessPlayerSkin=pb->chessplayerskin();
	msg.SceneSkin=pb->sceneskin();
	msg.DeviceType=UTF8_TO_TCHAR(pb->devicetype().c_str());
	msg.DamageEffect=pb->damageeffect();

    for (auto it = pb->modewindatas().begin(); it != pb->modewindatas().end(); it++) {
        FCSDTPvpWinData tmp_value;
        _ConvertPbToFCSDTPvpWinData(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.ModeWinDatas.Add(tmp_key, tmp_value);
    }
	msg.CurRankSeason=pb->currankseason();
	msg.MeleeRule=pb->meleerule();

    for (auto it = pb->curshowitems().begin(); it != pb->curshowitems().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.CurShowItems.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFCSDTCommonRandList(msg.EmotionList, &pb->emotionlist());
	msg.ChannelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();

    for (auto it = pb->settings().begin(); it != pb->settings().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Settings.Add(tmp_key, tmp_value);
    }
	msg.AssistantId=pb->assistantid();
	msg.CreditScore=pb->creditscore();
	msg.TMMR=pb->tmmr();
	msg.TCup=pb->tcup();
	msg.TeamVoiceId=UTF8_TO_TCHAR(pb->teamvoiceid().c_str());
	msg.TeamVoiceMemId=pb->teamvoicememid();
	msg.PicUrl=UTF8_TO_TCHAR(pb->picurl().c_str());
	msg.TeamBattleCount=pb->teambattlecount();
	msg.TeamBattleMvpCount=pb->teambattlemvpcount();
	msg.RecommendScore=pb->recommendscore();
	msg.WxVVipLevel=pb->wxvviplevel();
	msg.TeamBattleAvgRank=pb->teambattleavgrank();
	msg.CupNameChina=UTF8_TO_TCHAR(pb->cupnamechina().c_str());
	msg.Language=UTF8_TO_TCHAR(pb->language().c_str());
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.CupIconUrl=UTF8_TO_TCHAR(pb->cupiconurl().c_str());
	msg.PersonalAvgMvp=pb->personalavgmvp();

    for (auto it = pb->switchitems().begin(); it != pb->switchitems().end(); it++) {
        FSwitchItem tmp_value;
        _ConvertPbToFSwitchItem(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.SwitchItems.Add(tmp_key, tmp_value);
    }
	msg.ObservePrivilege=(EOBSERVEPRIVILEGE)pb->observeprivilege();

    for (auto it = pb->punishment().begin(); it != pb->punishment().end(); it++) {
        int64 tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Punishment.Add(tmp_key, tmp_value);
    }
	msg.Slot=pb->slot();
	_ConvertPbToFCSDTChessPlrInfo(msg.CurChessPlr, &pb->curchessplr());
	msg.TeamGroup=(ETEAMGROUP)pb->teamgroup();
	msg.PvpServerGroup=UTF8_TO_TCHAR(pb->pvpservergroup().c_str());
	msg.Ping=pb->ping();
	msg.Province=pb->province();
	msg.TeamVoiceUserId=UTF8_TO_TCHAR(pb->teamvoiceuserid().c_str());

    for (auto it = pb->regiondelays().begin(); it != pb->regiondelays().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.RegionDelays.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFKrAddictionInfo(msg.Addiction, &pb->addiction());
	msg.Region=UTF8_TO_TCHAR(pb->region().c_str());
	msg.FirstMatchSuccessWaitTime=pb->firstmatchsuccesswaittime();
	msg.PackageName=UTF8_TO_TCHAR(pb->packagename().c_str());
	msg.TournamentID=pb->tournamentid();
	msg.TournamClass=pb->tournamclass();
	msg.TournamClassRound=pb->tournamclassround();
	msg.TournamChessID=pb->tournamchessid();
	for (int i = 0; i < pb->passporttypeids().size(); i++) {
		auto &a = pb->passporttypeids().Get(i);
		int tmp;
		tmp=a;
		msg.PassportTypeIds.Add(tmp);
	}

    for (auto it = pb->tickets().begin(); it != pb->tickets().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Tickets.Add(tmp_key, tmp_value);
    }
	msg.SdkCountry=UTF8_TO_TCHAR(pb->sdkcountry().c_str());
	msg.Ps4Only=pb->ps4only();
	msg.RestrictType=(EUserRestrictType)pb->restricttype();

    for (auto it = pb->currencys().begin(); it != pb->currencys().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Currencys.Add(tmp_key, tmp_value);
    }
	msg.GuildName=UTF8_TO_TCHAR(pb->guildname().c_str());
	msg.GuildSign=pb->guildsign();
	for (int i = 0; i < pb->psblockedusers().size(); i++) {
		auto &a = pb->psblockedusers().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.PSBlockedUsers.Add(tmp);
	}
	for (int i = 0; i < pb->chesslist().size(); i++) {
		auto &a = pb->chesslist().Get(i);
		FKernelChessInfo tmp;
		_ConvertPbToFKernelChessInfo(tmp, &a);
		msg.ChessList.Add(tmp);
	}
	msg.ChannelID=UTF8_TO_TCHAR(pb->channelid().c_str());
	for (int i = 0; i < pb->skinsuitid().size(); i++) {
		auto &a = pb->skinsuitid().Get(i);
		int tmp;
		tmp=a;
		msg.SkinSuitID.Add(tmp);
	}
	msg.FFMMR=pb->ffmmr();
	msg.FFCup=pb->ffcup();
	msg.BattleTime=pb->battletime();

    for (auto it = pb->chessskindata().begin(); it != pb->chessskindata().end(); it++) {
        FChessSkinSlotData tmp_value;
        _ConvertPbToFChessSkinSlotData(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.ChessSkinData.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->skindata().begin(); it != pb->skindata().end(); it++) {
        FCSDTItem tmp_value;
        _ConvertPbToFCSDTItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.SkinData.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFPvpData(msg.PvpData, &pb->pvpdata());
	msg.PvpVoiceMemId=pb->pvpvoicememid();
	msg.CampVoiceMemId=pb->campvoicememid();
	msg.ChoseCardGroup=pb->chosecardgroup();
	msg.MentorId=UTF8_TO_TCHAR(pb->mentorid().c_str());
	msg.ExchangeState=(EEXCHANGESTATE)pb->exchangestate();
}


USTRUCT(BlueprintType)
struct  FCSDTVisitedMap {
	GENERATED_BODY()

	int64 TimeStamp;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubMapID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsPlaying;

};
static void _ConvertPbToFCSDTVisitedMap(FCSDTVisitedMap &msg, const msg::CSDTVisitedMap *pb) {
	msg.TimeStamp=pb->timestamp();
	msg.MapID=pb->mapid();
	msg.SubMapID=pb->submapid();
	msg.IsPlaying=pb->isplaying();
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerBaseInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UsrName;	//用户名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChatBubble;	//聊天气泡

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MMR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Exp;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurRankSeason;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EHISTORYPVPSHOWPERMISSION HistoryPvpShowPermission;	//查看历史战绩权限

	TMap<uint64, FString> PvpHistory;	//pvp历史记录

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;	//头像框

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicPendant;	//头像挂件

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Scene;	//场景ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrId;	//渠道Id

	TArray<ESWITCHTYPE> SwitchPlayerSet;	//开关控制标记设置_个人

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANNELVIPTYPE ChannelVipType;	//渠道vip類型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ELAUNCHTYPE LaunchType;	//启动类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatFormType;	//登录设备类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TMMR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PassportLevel;	//通行证等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Star;	//战星

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	//国家

	int64 LastLoginTime;	//上次登录时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString NativeCountry;	//祖籍国家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	//渠道类型

	int64 ResetHeadPicTime;	//idip重置玩家头像时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTPunishment> Punishment;	//惩罚信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Period;	//通行证的赛季

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;	//玩家所属省

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MvpCount;	//玩家吃鸡次数 冗余 CSDTRankSeasonData.MvpCount

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PassportTypeIds;	//通行证类型IDList

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> MvpInfos;	//模式的mvp数据

	uint64 ObservePvpId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Ps4Only;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPlayerGuildInfo GuildInfo;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTItem medal;	// 用户勋章信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString OriRegion;	// 用户初始区域

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FFMMR;	// 4V4 MMR

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FCSDTPassportCard> AdvancePassport;	//预购通行证 客户端自己 计算还剩多少次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> PassportCardNum;	//通行证卡号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPlayerPvpData PvpData;	//玩家的卡组信息和 pve信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPlayerMentorShipInfo MentorShipInfo;	//玩家 师徒信息

	int64 TotalDuration;	//新的总时长

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTMentorInfo MentorInfo;	//师傅信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EEXCHANGESTATE ExchangeState;	//拍卖行状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTPassportHistory> PassportHistory;	//通行证历史数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FExchangeRecord ExchangeRecord;	//交易信息

};
static void _ConvertPbToFCSDTPlayerBaseInfo(FCSDTPlayerBaseInfo &msg, const msg::CSDTPlayerBaseInfo *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.UsrName=UTF8_TO_TCHAR(pb->usrname().c_str());
	msg.HeadPic=pb->headpic();
	msg.ChatBubble=pb->chatbubble();
	msg.MMR=pb->mmr();
	msg.Level=pb->level();
	msg.Exp=pb->exp();
	msg.CurRankSeason=pb->currankseason();
	msg.HistoryPvpShowPermission=(EHISTORYPVPSHOWPERMISSION)pb->historypvpshowpermission();

    for (auto it = pb->pvphistory().begin(); it != pb->pvphistory().end(); it++) {
        FString tmp_value;
        tmp_value=UTF8_TO_TCHAR(it->second.c_str());
        uint64 tmp_key;
        tmp_key=it->first;
        msg.PvpHistory.Add(tmp_key, tmp_value);
    }
	msg.HeadPicFrame=pb->headpicframe();
	msg.HeadPicPendant=pb->headpicpendant();
	msg.Scene=pb->scene();
	msg.ChannelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	for (int i = 0; i < pb->switchplayerset().size(); i++) {
		auto &a = pb->switchplayerset().Get(i);
		ESWITCHTYPE tmp;
		tmp=(ESWITCHTYPE)a;
		msg.SwitchPlayerSet.Add(tmp);
	}
	msg.ChannelVipType=(ECHANNELVIPTYPE)pb->channelviptype();
	msg.LaunchType=(ELAUNCHTYPE)pb->launchtype();
	msg.PlatFormType=(EPLATFORMTYPE)pb->platformtype();
	msg.TMMR=pb->tmmr();
	msg.PassportLevel=pb->passportlevel();
	msg.Star=pb->star();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.LastLoginTime=pb->lastlogintime();
	msg.NativeCountry=UTF8_TO_TCHAR(pb->nativecountry().c_str());
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();
	msg.ResetHeadPicTime=pb->resetheadpictime();
	for (int i = 0; i < pb->punishment().size(); i++) {
		auto &a = pb->punishment().Get(i);
		FCSDTPunishment tmp;
		_ConvertPbToFCSDTPunishment(tmp, &a);
		msg.Punishment.Add(tmp);
	}
	msg.Period=pb->period();
	msg.Province=pb->province();
	msg.MvpCount=pb->mvpcount();
	for (int i = 0; i < pb->passporttypeids().size(); i++) {
		auto &a = pb->passporttypeids().Get(i);
		int tmp;
		tmp=a;
		msg.PassportTypeIds.Add(tmp);
	}

    for (auto it = pb->mvpinfos().begin(); it != pb->mvpinfos().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.MvpInfos.Add(tmp_key, tmp_value);
    }
	msg.ObservePvpId=pb->observepvpid();
	msg.Ps4Only=pb->ps4only();
	msg.RestrictType=(EUserRestrictType)pb->restricttype();
	_ConvertPbToFPlayerGuildInfo(msg.GuildInfo, &pb->guildinfo());
	_ConvertPbToFCSDTItem(msg.medal, &pb->medal());
	msg.OriRegion=UTF8_TO_TCHAR(pb->oriregion().c_str());
	msg.FFMMR=pb->ffmmr();

    for (auto it = pb->advancepassport().begin(); it != pb->advancepassport().end(); it++) {
        FCSDTPassportCard tmp_value;
        _ConvertPbToFCSDTPassportCard(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.AdvancePassport.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->passportcardnum().begin(); it != pb->passportcardnum().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.PassportCardNum.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFCSDTPlayerPvpData(msg.PvpData, &pb->pvpdata());
	_ConvertPbToFPlayerMentorShipInfo(msg.MentorShipInfo, &pb->mentorshipinfo());
	msg.TotalDuration=pb->totalduration();
	_ConvertPbToFCSDTMentorInfo(msg.MentorInfo, &pb->mentorinfo());
	msg.ExchangeState=(EEXCHANGESTATE)pb->exchangestate();
	for (int i = 0; i < pb->passporthistory().size(); i++) {
		auto &a = pb->passporthistory().Get(i);
		FCSDTPassportHistory tmp;
		_ConvertPbToFCSDTPassportHistory(tmp, &a);
		msg.PassportHistory.Add(tmp);
	}
	_ConvertPbToFExchangeRecord(msg.ExchangeRecord, &pb->exchangerecord());
}


USTRUCT(BlueprintType)
struct  FCSDTPvpHistory {
	GENERATED_BODY()

	uint64 PvpId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChangeMmr;	//该次pvp结算的mmr

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool DailyFirstWin;	//是否首胜

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FAward> DailyFirstWinAward;	//首胜奖励

};
static void _ConvertPbToFCSDTPvpHistory(FCSDTPvpHistory &msg, const msg::CSDTPvpHistory *pb) {
	msg.PvpId=pb->pvpid();
	msg.ChangeMmr=pb->changemmr();
	msg.DailyFirstWin=pb->dailyfirstwin();
	for (int i = 0; i < pb->dailyfirstwinaward().size(); i++) {
		auto &a = pb->dailyfirstwinaward().Get(i);
		FAward tmp;
		_ConvertPbToFAward(tmp, &a);
		msg.DailyFirstWinAward.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTStat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MMR;	//MMR

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CompetitionCnt;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MvpCnt;

	int64 RegisterTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessPlayerSkin;	//棋手皮肤

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FollowCount;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FansCount;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTRankSeasonInfo> SeasonInfo;	//赛季信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTRankSeasonData UnSeasonData;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CompetitionCntDaily;	//每日对局数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BindOldPlayerCount;	// 绑定老账号次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TMMR;	//TMMR

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTChessPlayer CurChessPlr;	//当前棋手信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Cup;	// 段位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FFMMR;	// 4v4 mmr

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxQueenRank;	//单人排位最高皇后排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxTQueenRank;	//双人排位最高皇后排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxFQueenRank;	//四人排位最高皇后排名

};
static void _ConvertPbToFCSDTStat(FCSDTStat &msg, const msg::CSDTStat *pb) {
	msg.MMR=pb->mmr();
	msg.CompetitionCnt=pb->competitioncnt();
	msg.MvpCnt=pb->mvpcnt();
	msg.RegisterTime=pb->registertime();
	msg.ChessPlayerSkin=pb->chessplayerskin();
	msg.FollowCount=pb->followcount();
	msg.FansCount=pb->fanscount();

    for (auto it = pb->seasoninfo().begin(); it != pb->seasoninfo().end(); it++) {
        FCSDTRankSeasonInfo tmp_value;
        _ConvertPbToFCSDTRankSeasonInfo(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.SeasonInfo.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFCSDTRankSeasonData(msg.UnSeasonData, &pb->unseasondata());
	msg.CompetitionCntDaily=pb->competitioncntdaily();
	msg.BindOldPlayerCount=pb->bindoldplayercount();
	msg.TMMR=pb->tmmr();
	_ConvertPbToFCSDTChessPlayer(msg.CurChessPlr, &pb->curchessplr());
	msg.Cup=pb->cup();
	msg.FFMMR=pb->ffmmr();
	msg.MaxQueenRank=pb->maxqueenrank();
	msg.MaxTQueenRank=pb->maxtqueenrank();
	msg.MaxFQueenRank=pb->maxfqueenrank();
}


USTRUCT(BlueprintType)
struct  FCSDTNotice {
	GENERATED_BODY()

	int64 Id;	//公告id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Title;	//标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;	//内容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Label;	//标签

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ELABELTYPE LabelType;	//标签类型

	int64 Ts;	//时间戳

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ENOTICESHOWTYPE ShowType;	//公告展示方式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ENOTICECONTENTTYPE ContentType;	//公告内容类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicUrl;	//图片CDN地址

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SkipUrl;	//图片跳转地址

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Flag;

	int64 EndTime;	//结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ENOTICETYPE NoticeType;	//公告类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> CountryList;	//地区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ENOTICETAP Tap;	//公告栏目

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SkipInterface;	//内链类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SkipTab;	//内链页面

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPICNOTICEJUMPTYPE PicJumpType;	//图片公告跳转类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FGMLanguageInfo> WebContent;	//web公告内容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> DownloadList;	//下载渠道

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<EPLATFORMTYPE> PlatformList;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EMAGNETISMTYPE MagnetismType;	//磁块类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString CoverPicUrl;	//封面图

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Subtitle;	//副标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int JumpGoodsId;	//跳转的商品Id，配合SkipInterface使用

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ApkVersionList;	//版本

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PCSkipUrl;	//pc端图片跳转地址

	int64 Sort;	//排序

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool NeedRedPoint;	//是否需要展示小红点

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ExcludeDownload;	//下载渠道除外

	int64 StartTime;	//开始时间

};
static void _ConvertPbToFCSDTNotice(FCSDTNotice &msg, const msg::CSDTNotice *pb) {
	msg.Id=pb->id();
	msg.Title=UTF8_TO_TCHAR(pb->title().c_str());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.Label=UTF8_TO_TCHAR(pb->label().c_str());
	msg.LabelType=(ELABELTYPE)pb->labeltype();
	msg.Ts=pb->ts();
	msg.ShowType=(ENOTICESHOWTYPE)pb->showtype();
	msg.ContentType=(ENOTICECONTENTTYPE)pb->contenttype();
	msg.PicUrl=UTF8_TO_TCHAR(pb->picurl().c_str());
	msg.SkipUrl=UTF8_TO_TCHAR(pb->skipurl().c_str());
	msg.Flag=pb->flag();
	msg.EndTime=pb->endtime();
	msg.NoticeType=(ENOTICETYPE)pb->noticetype();
	for (int i = 0; i < pb->countrylist().size(); i++) {
		auto &a = pb->countrylist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.CountryList.Add(tmp);
	}
	msg.Tap=(ENOTICETAP)pb->tap();
	msg.SkipInterface=UTF8_TO_TCHAR(pb->skipinterface().c_str());
	msg.SkipTab=pb->skiptab();
	msg.PicJumpType=(EPICNOTICEJUMPTYPE)pb->picjumptype();
	for (int i = 0; i < pb->webcontent().size(); i++) {
		auto &a = pb->webcontent().Get(i);
		FGMLanguageInfo tmp;
		_ConvertPbToFGMLanguageInfo(tmp, &a);
		msg.WebContent.Add(tmp);
	}
	for (int i = 0; i < pb->downloadlist().size(); i++) {
		auto &a = pb->downloadlist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.DownloadList.Add(tmp);
	}
	for (int i = 0; i < pb->platformlist().size(); i++) {
		auto &a = pb->platformlist().Get(i);
		EPLATFORMTYPE tmp;
		tmp=(EPLATFORMTYPE)a;
		msg.PlatformList.Add(tmp);
	}
	msg.MagnetismType=(EMAGNETISMTYPE)pb->magnetismtype();
	msg.CoverPicUrl=UTF8_TO_TCHAR(pb->coverpicurl().c_str());
	msg.Subtitle=UTF8_TO_TCHAR(pb->subtitle().c_str());
	msg.JumpGoodsId=pb->jumpgoodsid();
	for (int i = 0; i < pb->apkversionlist().size(); i++) {
		auto &a = pb->apkversionlist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.ApkVersionList.Add(tmp);
	}
	msg.PCSkipUrl=UTF8_TO_TCHAR(pb->pcskipurl().c_str());
	msg.Sort=pb->sort();
	msg.NeedRedPoint=pb->needredpoint();
	for (int i = 0; i < pb->excludedownload().size(); i++) {
		auto &a = pb->excludedownload().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.ExcludeDownload.Add(tmp);
	}
	msg.StartTime=pb->starttime();
}


USTRUCT(BlueprintType)
struct  FCSDTAds {
	GENERATED_BODY()

	int64 Id;	//广告id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Title;	//标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	//图片地址

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ShowLimit;	//浏览上限

	int64 StartTime;	//生效时间

	int64 EndTime;	//失效时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ShowCount;	//展示次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EADSPAYTYPE IsPay;	//是否付费

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> CountryList;	//地区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> WhiteList;	//白名单

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> DownloadList;	//下载渠道

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<EPLATFORMTYPE> PlatformList;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ExcludeDownload;	//下载渠道除外

};
static void _ConvertPbToFCSDTAds(FCSDTAds &msg, const msg::CSDTAds *pb) {
	msg.Id=pb->id();
	msg.Title=UTF8_TO_TCHAR(pb->title().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.ShowLimit=pb->showlimit();
	msg.StartTime=pb->starttime();
	msg.EndTime=pb->endtime();
	msg.ShowCount=pb->showcount();
	msg.IsPay=(EADSPAYTYPE)pb->ispay();
	for (int i = 0; i < pb->countrylist().size(); i++) {
		auto &a = pb->countrylist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.CountryList.Add(tmp);
	}
	for (int i = 0; i < pb->whitelist().size(); i++) {
		auto &a = pb->whitelist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.WhiteList.Add(tmp);
	}
	for (int i = 0; i < pb->downloadlist().size(); i++) {
		auto &a = pb->downloadlist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.DownloadList.Add(tmp);
	}
	for (int i = 0; i < pb->platformlist().size(); i++) {
		auto &a = pb->platformlist().Get(i);
		EPLATFORMTYPE tmp;
		tmp=(EPLATFORMTYPE)a;
		msg.PlatformList.Add(tmp);
	}
	for (int i = 0; i < pb->excludedownload().size(); i++) {
		auto &a = pb->excludedownload().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.ExcludeDownload.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTPvpStat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int DeathNum;	//总死亡数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int KillNum;	//总击杀数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int WaterDeathNum;	//水地形死亡次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HurtGroundDeathNum;	//普通伤害地形（地刺）死亡次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTRoleStat> WinRoleStat;	//赢方角色使用统计

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTRoleStat> FailRoleStat;	//输方角色使用统计

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTRoleStat> DrawRoleStat;	//平方角色使用统计

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MvpRoleId;	//吃鸡英雄id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MvpSkills;	//吃鸡英雄技能

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FCSDTRound> PlayerRound;

};
static void _ConvertPbToFCSDTPvpStat(FCSDTPvpStat &msg, const msg::CSDTPvpStat *pb) {
	msg.DeathNum=pb->deathnum();
	msg.KillNum=pb->killnum();
	msg.WaterDeathNum=pb->waterdeathnum();
	msg.HurtGroundDeathNum=pb->hurtgrounddeathnum();
	for (int i = 0; i < pb->winrolestat().size(); i++) {
		auto &a = pb->winrolestat().Get(i);
		FCSDTRoleStat tmp;
		_ConvertPbToFCSDTRoleStat(tmp, &a);
		msg.WinRoleStat.Add(tmp);
	}
	for (int i = 0; i < pb->failrolestat().size(); i++) {
		auto &a = pb->failrolestat().Get(i);
		FCSDTRoleStat tmp;
		_ConvertPbToFCSDTRoleStat(tmp, &a);
		msg.FailRoleStat.Add(tmp);
	}
	for (int i = 0; i < pb->drawrolestat().size(); i++) {
		auto &a = pb->drawrolestat().Get(i);
		FCSDTRoleStat tmp;
		_ConvertPbToFCSDTRoleStat(tmp, &a);
		msg.DrawRoleStat.Add(tmp);
	}
	msg.MvpRoleId=pb->mvproleid();
	for (int i = 0; i < pb->mvpskills().size(); i++) {
		auto &a = pb->mvpskills().Get(i);
		int tmp;
		tmp=a;
		msg.MvpSkills.Add(tmp);
	}

    for (auto it = pb->playerround().begin(); it != pb->playerround().end(); it++) {
        FCSDTRound tmp_value;
        _ConvertPbToFCSDTRound(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.PlayerRound.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTMarqueeItem {
	GENERATED_BODY()

	int64 Id;	//跑马灯id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;	//内容

	int64 StartTime;	//起始时间

	int64 EndTime;	//截止时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Frequency;	//滚动频率

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Flag;	//0代表明文，1代表语言key

};
static void _ConvertPbToFCSDTMarqueeItem(FCSDTMarqueeItem &msg, const msg::CSDTMarqueeItem *pb) {
	msg.Id=pb->id();
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.StartTime=pb->starttime();
	msg.EndTime=pb->endtime();
	msg.Frequency=pb->frequency();
	msg.Flag=pb->flag();
}


USTRUCT(BlueprintType)
struct  FCommonKVString {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Key;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Value;

};
static void _ConvertPbToFCommonKVString(FCommonKVString &msg, const msg::CommonKVString *pb) {
	msg.Key=UTF8_TO_TCHAR(pb->key().c_str());
	msg.Value=UTF8_TO_TCHAR(pb->value().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTActivityGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTActivityDetail> Activities;	//活动

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Md5Sum;	//MD5码

	int64 BeginTime;	//新手活动开始时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTActivityRecord Record;	//消息记录

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LoginDays;	//活动开启后登录天数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChestLevel;	//宝箱等级

	int64 EndTime;	//活动结束时间(部分活动使用)

};
static void _ConvertPbToFCSDTActivityGroup(FCSDTActivityGroup &msg, const msg::CSDTActivityGroup *pb) {

    for (auto it = pb->activities().begin(); it != pb->activities().end(); it++) {
        FCSDTActivityDetail tmp_value;
        _ConvertPbToFCSDTActivityDetail(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Activities.Add(tmp_key, tmp_value);
    }
	msg.Md5Sum=UTF8_TO_TCHAR(pb->md5sum().c_str());
	msg.BeginTime=pb->begintime();
	_ConvertPbToFCSDTActivityRecord(msg.Record, &pb->record());
	msg.LoginDays=pb->logindays();
	msg.ChestLevel=pb->chestlevel();
	msg.EndTime=pb->endtime();
}


USTRUCT(BlueprintType)
struct  FCSDTActGroupBuyRwd {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> Rewards;

};
static void _ConvertPbToFCSDTActGroupBuyRwd(FCSDTActGroupBuyRwd &msg, const msg::CSDTActGroupBuyRwd *pb) {

    for (auto it = pb->rewards().begin(); it != pb->rewards().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Rewards.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FActivityGroupData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//活动组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EACTIVITYTYPE Type;	//活动切页

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TabName;	//切页名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TabIcon;	//切页图标

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString BeginShowTime;	//开始展示时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString BeginTime;	//开始时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString EndTime;	//结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString EndShowTime;	//结束展示时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Duration;	//活动持续时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PrivateData;	//活动组私有数据 已删？

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Open;	//活动开放开关(应急用)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ActivityId;	//活动ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RepeatType;	//重复的类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ShowParam;	//客户端显示

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FBuffEffect> BuffEffects;	//buff效果

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Modes;	//buff生效的模式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PageType;	//活动派别  活动的分类

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicName;	//大图名称  打脸图名称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool PicOpen;	//大图开关  打脸图开关

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubscriptType;	//角标名称  活动页签上的角标名称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int OrderID;	//活动排序  左侧活动页签排序

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PicInterval;	//弹出间隔  打脸图弹出的时间间隔

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PicSwitchOpen;	//跳转开关  打脸图是否跳转的开关

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EEFFECTTIMETYPE EffectTimeType;	//buff活动配置时间方式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString EffectWeekday;	// buff活动生效周几列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TakeEffectDate;	// buff活动生效日期

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TakeEffectTime;	// buff活动生效时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TakeEffectRank;	//  生效段位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TakeEffectMode;	// 生效的mode列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EACTIVITYTEAMSTATE TeamState;	// 组队状态条件生效

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int UIStylePhone;	// 手游的活动ui 样式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int UIStylePC;	//端游活动UI样式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Zone;	//所属分区信息 逗号分隔 例子：0代表所有分区 1代表1区  1,2代表1和2区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> Channels;	//渠道列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TakeEffectLevel;	// buff生效等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MakeUp;	//活动标记，目前用来做活动签到的补签开关

	int64 LeastMach;	//全民对局保底增量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PlatformClose;	//活动关闭的平台

};
static void _ConvertPbToFActivityGroupData(FActivityGroupData &msg, const msg::ActivityGroupData *pb) {
	msg.Id=pb->id();
	msg.Type=(EACTIVITYTYPE)pb->type();
	msg.TabName=UTF8_TO_TCHAR(pb->tabname().c_str());
	msg.TabIcon=UTF8_TO_TCHAR(pb->tabicon().c_str());
	msg.BeginShowTime=UTF8_TO_TCHAR(pb->beginshowtime().c_str());
	msg.BeginTime=UTF8_TO_TCHAR(pb->begintime().c_str());
	msg.EndTime=UTF8_TO_TCHAR(pb->endtime().c_str());
	msg.EndShowTime=UTF8_TO_TCHAR(pb->endshowtime().c_str());
	msg.Duration=pb->duration();
	msg.PrivateData=pb->privatedata();
	msg.Open=pb->open();
	msg.ActivityId=pb->activityid();
	msg.RepeatType=pb->repeattype();
	msg.ShowParam=UTF8_TO_TCHAR(pb->showparam().c_str());
	for (int i = 0; i < pb->buffeffects().size(); i++) {
		auto &a = pb->buffeffects().Get(i);
		FBuffEffect tmp;
		_ConvertPbToFBuffEffect(tmp, &a);
		msg.BuffEffects.Add(tmp);
	}
	for (int i = 0; i < pb->modes().size(); i++) {
		auto &a = pb->modes().Get(i);
		int tmp;
		tmp=a;
		msg.Modes.Add(tmp);
	}
	msg.PageType=pb->pagetype();
	msg.PicName=UTF8_TO_TCHAR(pb->picname().c_str());
	msg.PicOpen=pb->picopen();
	msg.SubscriptType=pb->subscripttype();
	msg.OrderID=pb->orderid();
	msg.PicInterval=pb->picinterval();
	msg.PicSwitchOpen=pb->picswitchopen();
	msg.EffectTimeType=(EEFFECTTIMETYPE)pb->effecttimetype();
	msg.EffectWeekday=UTF8_TO_TCHAR(pb->effectweekday().c_str());
	msg.TakeEffectDate=UTF8_TO_TCHAR(pb->takeeffectdate().c_str());
	msg.TakeEffectTime=UTF8_TO_TCHAR(pb->takeeffecttime().c_str());
	msg.TakeEffectRank=UTF8_TO_TCHAR(pb->takeeffectrank().c_str());
	msg.TakeEffectMode=UTF8_TO_TCHAR(pb->takeeffectmode().c_str());
	msg.TeamState=(EACTIVITYTEAMSTATE)pb->teamstate();
	msg.UIStylePhone=pb->uistylephone();
	msg.UIStylePC=pb->uistylepc();
	msg.Zone=UTF8_TO_TCHAR(pb->zone().c_str());
	for (int i = 0; i < pb->channels().size(); i++) {
		auto &a = pb->channels().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.Channels.Add(tmp);
	}
	msg.TakeEffectLevel=UTF8_TO_TCHAR(pb->takeeffectlevel().c_str());
	msg.MakeUp=pb->makeup();
	msg.LeastMach=pb->leastmach();
	msg.PlatformClose=UTF8_TO_TCHAR(pb->platformclose().c_str());
}


USTRUCT(BlueprintType)
struct  FActivityData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupId;	//活动组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//活动ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Title;	//活动标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Unit;	//条件进度换算单位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCond Cond;	//条件

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FAward> Awards;	//奖励

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CondGroup;	//条件组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PreCondGroup;	//前置条件组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SkipInterface;	//跳转界面名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SkipTab;	//跳转界面切页标识

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Day;	//天数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Desc;	//描述

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ShowQuality;	//累充累消档位图片背景颜色

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ShowGiftPic;	//累充累消档位展示奖励图片

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EActivityResetType ResetType;	//活动重置类型 已删？

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsRecruiter;	//是否是征募者活动

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ProgressInherit;	//继承任务ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ShowOrder;	//任务排序

};
static void _ConvertPbToFActivityData(FActivityData &msg, const msg::ActivityData *pb) {
	msg.GroupId=pb->groupid();
	msg.Id=pb->id();
	msg.Title=UTF8_TO_TCHAR(pb->title().c_str());
	msg.Unit=pb->unit();
	_ConvertPbToFCond(msg.Cond, &pb->cond());
	for (int i = 0; i < pb->awards().size(); i++) {
		auto &a = pb->awards().Get(i);
		FAward tmp;
		_ConvertPbToFAward(tmp, &a);
		msg.Awards.Add(tmp);
	}
	msg.CondGroup=pb->condgroup();
	msg.PreCondGroup=pb->precondgroup();
	msg.SkipInterface=UTF8_TO_TCHAR(pb->skipinterface().c_str());
	msg.SkipTab=pb->skiptab();
	msg.Day=pb->day();
	msg.Desc=UTF8_TO_TCHAR(pb->desc().c_str());
	msg.ShowQuality=pb->showquality();
	msg.ShowGiftPic=UTF8_TO_TCHAR(pb->showgiftpic().c_str());
	msg.ResetType=(EActivityResetType)pb->resettype();
	msg.IsRecruiter=pb->isrecruiter();
	msg.ProgressInherit=pb->progressinherit();
	msg.ShowOrder=pb->showorder();
}


USTRUCT(BlueprintType)
struct  FPlayLimit {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Age;	//年龄

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//游戏场次

};
static void _ConvertPbToFPlayLimit(FPlayLimit &msg, const msg::PlayLimit *pb) {
	msg.Age=pb->age();
	msg.Count=pb->count();
}


USTRUCT(BlueprintType)
struct  FCSDTGoods {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//商品ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//商品数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Uid;	//随机库ID

};
static void _ConvertPbToFCSDTGoods(FCSDTGoods &msg, const msg::CSDTGoods *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	msg.Uid=pb->uid();
}


USTRUCT(BlueprintType)
struct  FCSDTMallGoodsData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FMallGoodsData MallGoods;	//配置表信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BuyCount;	//购买次数

	int64 LastResetTime;	//上次限购次数重置时间

};
static void _ConvertPbToFCSDTMallGoodsData(FCSDTMallGoodsData &msg, const msg::CSDTMallGoodsData *pb) {
	_ConvertPbToFMallGoodsData(msg.MallGoods, &pb->mallgoods());
	msg.BuyCount=pb->buycount();
	msg.LastResetTime=pb->lastresettime();
}


USTRUCT(BlueprintType)
struct  FCSDTMallBuyCountData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BuyCount;	//购买次数

	int64 LastResetTime;	//上次限购次数重置时间

};
static void _ConvertPbToFCSDTMallBuyCountData(FCSDTMallBuyCountData &msg, const msg::CSDTMallBuyCountData *pb) {
	msg.Id=pb->id();
	msg.BuyCount=pb->buycount();
	msg.LastResetTime=pb->lastresettime();
}


USTRUCT(BlueprintType)
struct  FSign {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Day;	// 签到的天

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int AwardDay;	// 领取奖励池中的第几天的奖励

};
static void _ConvertPbToFSign(FSign &msg, const msg::Sign *pb) {
	msg.Day=pb->day();
	msg.AwardDay=pb->awardday();
}


USTRUCT(BlueprintType)
struct  FCSDTRecommendPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Cup;	//段位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;	//头像

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	//用户名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Scene;	//场景（棋盘）

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ChessPlayer;	//棋手

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RecommendScore;	//玩家推荐分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;	//头像框

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EOBSERVEPRIVILEGE ObservePrivilege;	//观战权限

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatFormType;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Ps4Only;	//psonly

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;	// 用户限制类型

};
static void _ConvertPbToFCSDTRecommendPlayer(FCSDTRecommendPlayer &msg, const msg::CSDTRecommendPlayer *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Cup=pb->cup();
	msg.HeadPic=pb->headpic();
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Scene=pb->scene();
	msg.ChessPlayer=pb->chessplayer();
	msg.RecommendScore=pb->recommendscore();
	msg.HeadPicFrame=pb->headpicframe();
	msg.ObservePrivilege=(EOBSERVEPRIVILEGE)pb->observeprivilege();
	msg.PlatFormType=(EPLATFORMTYPE)pb->platformtype();
	msg.Ps4Only=pb->ps4only();
	msg.RestrictType=(EUserRestrictType)pb->restricttype();
}


USTRUCT(BlueprintType)
struct  FCSDTRedPktData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UId;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	//玩家名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Award;	//领取红包金额

};
static void _ConvertPbToFCSDTRedPktData(FCSDTRedPktData &msg, const msg::CSDTRedPktData *pb) {
	msg.UId=UTF8_TO_TCHAR(pb->uid().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Award=pb->award();
}


USTRUCT(BlueprintType)
struct  FCSDTPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PlayerId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UserName;

};
static void _ConvertPbToFCSDTPlayer(FCSDTPlayer &msg, const msg::CSDTPlayer *pb) {
	msg.PlayerId=UTF8_TO_TCHAR(pb->playerid().c_str());
	msg.UserName=UTF8_TO_TCHAR(pb->username().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTBanner {
	GENERATED_BODY()

	int64 Id;	//Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicUrl;	//图片CDN地址

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EBANNERTYPE BannerType;	//banner类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ESKIPTYPE SkipType;	//跳转类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SkipName;	//跳转大界面名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SkipTap;	//跳转页面显示分页名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MallGoodsId;	//商城商品Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> CountryList;	//国家

	int64 ShowBeginTime;	//展示开始时间

	int64 ShowEndTime;	//展示结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ZoneId;	//投放地区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> DownloadList;	//下载渠道

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<EPLATFORMTYPE> PlatformList;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PCSkipUrl;	//pc端图片跳转地址

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> HallModeList;	//大厅模型展示的物品Id

	int64 Sort;	//排序

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ExcludeDownload;	// 下载渠道 除外

};
static void _ConvertPbToFCSDTBanner(FCSDTBanner &msg, const msg::CSDTBanner *pb) {
	msg.Id=pb->id();
	msg.PicUrl=UTF8_TO_TCHAR(pb->picurl().c_str());
	msg.BannerType=(EBANNERTYPE)pb->bannertype();
	msg.SkipType=(ESKIPTYPE)pb->skiptype();
	msg.SkipName=UTF8_TO_TCHAR(pb->skipname().c_str());
	msg.SkipTap=pb->skiptap();
	msg.MallGoodsId=pb->mallgoodsid();
	for (int i = 0; i < pb->countrylist().size(); i++) {
		auto &a = pb->countrylist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.CountryList.Add(tmp);
	}
	msg.ShowBeginTime=pb->showbegintime();
	msg.ShowEndTime=pb->showendtime();
	for (int i = 0; i < pb->zoneid().size(); i++) {
		auto &a = pb->zoneid().Get(i);
		int tmp;
		tmp=a;
		msg.ZoneId.Add(tmp);
	}
	for (int i = 0; i < pb->downloadlist().size(); i++) {
		auto &a = pb->downloadlist().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.DownloadList.Add(tmp);
	}
	for (int i = 0; i < pb->platformlist().size(); i++) {
		auto &a = pb->platformlist().Get(i);
		EPLATFORMTYPE tmp;
		tmp=(EPLATFORMTYPE)a;
		msg.PlatformList.Add(tmp);
	}
	msg.PCSkipUrl=UTF8_TO_TCHAR(pb->pcskipurl().c_str());
	for (int i = 0; i < pb->hallmodelist().size(); i++) {
		auto &a = pb->hallmodelist().Get(i);
		int tmp;
		tmp=a;
		msg.HallModeList.Add(tmp);
	}
	msg.Sort=pb->sort();
	for (int i = 0; i < pb->excludedownload().size(); i++) {
		auto &a = pb->excludedownload().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.ExcludeDownload.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTActDaySignDetail {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EActSignType Type;

	int64 Time;

};
static void _ConvertPbToFCSDTActDaySignDetail(FCSDTActDaySignDetail &msg, const msg::CSDTActDaySignDetail *pb) {
	msg.Type=(EActSignType)pb->type();
	msg.Time=pb->time();
}


USTRUCT(BlueprintType)
struct  FPlayerTournamentData {
	GENERATED_BODY()

	uint64 Id;	// 赛事id

	uint64 ClassId;	// 级别

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, bool> GetReward;	// 当前赛事进度积分奖励领取情况 最小奖励范围值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Points;	// 积分

	uint64 CurRound;	// 当前轮次

	uint64 GameId;	// 对局id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Out;	// 是否淘汰

	int64 SignUpTime;	// 报名时间

	TMap<uint64, FRoundData> Data;	// 所有参与轮次信息

	uint64 PvpId;	// 对局对应的pvpId

	int64 PvpEndTime;	// 对局结束时间 如果LastGameId和LastPvpId不为0，而此值为0代表进行中

};
static void _ConvertPbToFPlayerTournamentData(FPlayerTournamentData &msg, const msg::PlayerTournamentData *pb) {
	msg.Id=pb->id();
	msg.ClassId=pb->classid();

    for (auto it = pb->getreward().begin(); it != pb->getreward().end(); it++) {
        bool tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.GetReward.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->points().begin(); it != pb->points().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Points.Add(tmp_key, tmp_value);
    }
	msg.CurRound=pb->curround();
	msg.GameId=pb->gameid();
	msg.Out=pb->out();
	msg.SignUpTime=pb->signuptime();

    for (auto it = pb->data().begin(); it != pb->data().end(); it++) {
        FRoundData tmp_value;
        _ConvertPbToFRoundData(tmp_value, &it->second);
        uint64 tmp_key;
        tmp_key=it->first;
        msg.Data.Add(tmp_key, tmp_value);
    }
	msg.PvpId=pb->pvpid();
	msg.PvpEndTime=pb->pvpendtime();
}


USTRUCT(BlueprintType)
struct  FGuildApplicant {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Player_PB;

	int64 ts;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrID;

};
static void _ConvertPbToFGuildApplicant(FGuildApplicant &msg, const msg::GuildApplicant *pb) {
	msg.Player_PB=UTF8_TO_TCHAR(pb->player().c_str());
	msg.ts=pb->ts();
	msg.ChannelUsrID=UTF8_TO_TCHAR(pb->channelusrid().c_str());
}


USTRUCT(BlueprintType)
struct  FGuildMember {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Player_PB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EGUILDROLETYPE Role;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ActiveScore;

};
static void _ConvertPbToFGuildMember(FGuildMember &msg, const msg::GuildMember *pb) {
	msg.Player_PB=UTF8_TO_TCHAR(pb->player().c_str());
	msg.Role=(EGUILDROLETYPE)pb->role();
	msg.ActiveScore=pb->activescore();
}


USTRUCT(BlueprintType)
struct  FGuildLog {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Key;	// 事件key

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FString> Para;	// 事件参数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ps4Only;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ps;

	int64 Ts;	// 秒时间戳

};
static void _ConvertPbToFGuildLog(FGuildLog &msg, const msg::GuildLog *pb) {
	msg.Key=UTF8_TO_TCHAR(pb->key().c_str());

    for (auto it = pb->para().begin(); it != pb->para().end(); it++) {
        FString tmp_value;
        tmp_value=UTF8_TO_TCHAR(it->second.c_str());
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Para.Add(tmp_key, tmp_value);
    }
	msg.ps4Only=pb->ps4only();
	msg.ps=pb->ps();
	msg.Ts=pb->ts();
}


USTRUCT(BlueprintType)
struct  FPvpExtData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPvpBigWinnerData BigWinner;	// 大赢家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Submode;	// 子模式，目前 新手和实战模式会使用到

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PvpChestVipLevel;	// 房间vip等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PveDebuff;	//

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MapKey;	//pve对应的mapkey

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Captain;	//房间房主

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsCardGroup;	//是否为卡组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TDStage;	//塔防关卡

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPveMode PveChallengeMode;	//幻形试炼子模式难度，0普通，1噩梦

};
static void _ConvertPbToFPvpExtData(FPvpExtData &msg, const msg::PvpExtData *pb) {
	_ConvertPbToFPvpBigWinnerData(msg.BigWinner, &pb->bigwinner());
	msg.Submode=pb->submode();
	msg.PvpChestVipLevel=pb->pvpchestviplevel();
	for (int i = 0; i < pb->pvedebuff().size(); i++) {
		auto &a = pb->pvedebuff().Get(i);
		int tmp;
		tmp=a;
		msg.PveDebuff.Add(tmp);
	}
	msg.MapKey=UTF8_TO_TCHAR(pb->mapkey().c_str());
	msg.Captain=UTF8_TO_TCHAR(pb->captain().c_str());
	msg.IsCardGroup=pb->iscardgroup();
	msg.TDStage=pb->tdstage();
	msg.PveChallengeMode=(EPveMode)pb->pvechallengemode();
}


USTRUCT(BlueprintType)
struct  FPlayerExtMap {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> AssistantMap;	//玩家的辅助系数:playerid:辅助系数id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> BattleTimeMap;	//玩家战斗时长(抛开准备时间):playerid:战斗时长(抛开准备时间)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FBuffs> PveBuff;	//玩家带入pve得buff:playerid:[]buffids

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FString> MsRelation;	//师徒关系

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, ETEAMGROUP> PvpPlayerGroup;	//pvp相关玩家分组

};
static void _ConvertPbToFPlayerExtMap(FPlayerExtMap &msg, const msg::PlayerExtMap *pb) {

    for (auto it = pb->assistantmap().begin(); it != pb->assistantmap().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.AssistantMap.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->battletimemap().begin(); it != pb->battletimemap().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.BattleTimeMap.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->pvebuff().begin(); it != pb->pvebuff().end(); it++) {
        FBuffs tmp_value;
        _ConvertPbToFBuffs(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.PveBuff.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->msrelation().begin(); it != pb->msrelation().end(); it++) {
        FString tmp_value;
        tmp_value=UTF8_TO_TCHAR(it->second.c_str());
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.MsRelation.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->pvpplayergroup().begin(); it != pb->pvpplayergroup().end(); it++) {
        ETEAMGROUP tmp_value;
        tmp_value=(ETEAMGROUP)it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.PvpPlayerGroup.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FMailExtData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FExtItem> Items;

};
static void _ConvertPbToFMailExtData(FMailExtData &msg, const msg::MailExtData *pb) {
	for (int i = 0; i < pb->items().size(); i++) {
		auto &a = pb->items().Get(i);
		FExtItem tmp;
		_ConvertPbToFExtItem(tmp, &a);
		msg.Items.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FPvpTeachResult {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PassId;	// 教学关卡ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Win;	// 通关

};
static void _ConvertPbToFPvpTeachResult(FPvpTeachResult &msg, const msg::PvpTeachResult *pb) {
	msg.PassId=pb->passid();
	msg.Win=pb->win();
}


USTRUCT(BlueprintType)
struct  FPveExData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> Talent;	//天赋等级 {天赋系列ID,等级}

};
static void _ConvertPbToFPveExData(FPveExData &msg, const msg::PveExData *pb) {

    for (auto it = pb->talent().begin(); it != pb->talent().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Talent.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FTopRank {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Zone;	// 赛区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Period;	// 届数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> Rank;	// 前8

};
static void _ConvertPbToFTopRank(FTopRank &msg, const msg::TopRank *pb) {
	msg.Zone=pb->zone();
	msg.Period=pb->period();
	for (int i = 0; i < pb->rank().size(); i++) {
		auto &a = pb->rank().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.Rank.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FChampionInfoList {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FChampionInfo> list;	// 冠军信息列表

};
static void _ConvertPbToFChampionInfoList(FChampionInfoList &msg, const msg::ChampionInfoList *pb) {
	for (int i = 0; i < pb->list().size(); i++) {
		auto &a = pb->list().Get(i);
		FChampionInfo tmp;
		_ConvertPbToFChampionInfo(tmp, &a);
		msg.list.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FAuthority {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Mark;	//标记

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	//等级

};
static void _ConvertPbToFAuthority(FAuthority &msg, const msg::Authority *pb) {
	msg.Mark=pb->mark();
	msg.Level=pb->level();
}


USTRUCT(BlueprintType)
struct  FPupil {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTTaskItem> Tasks;	//徒弟修行任务

	int64 GraduateTime;	//出师时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	// 徒弟id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPUPILSTAT Stat;	// 徒弟当前状态

	int64 ApplyGraduateTime;	//申请出师时间

	int64 Intimacy;	//亲密度

};
static void _ConvertPbToFPupil(FPupil &msg, const msg::Pupil *pb) {

    for (auto it = pb->tasks().begin(); it != pb->tasks().end(); it++) {
        FCSDTTaskItem tmp_value;
        _ConvertPbToFCSDTTaskItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Tasks.Add(tmp_key, tmp_value);
    }
	msg.GraduateTime=pb->graduatetime();
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Stat=(EPUPILSTAT)pb->stat();
	msg.ApplyGraduateTime=pb->applygraduatetime();
	msg.Intimacy=pb->intimacy();
}


USTRUCT(BlueprintType)
struct  FTeamOP {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PID;	// 操作者ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETEAMOP type;	// 操作类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamOPSetting setting;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamOPChangeGroup changeGroup;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamOPAppointLeader appointLeader;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamOPSelfChangeGroup selfChangeGroup;	// 这里包含了选手席换位置 以及 不同组之间互换

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamOPChangeName changeName;	// 更改名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamOPSwitchSlot switchSlot;	// 互换槽位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTeamBetOnBounty betOnBounty;	// 投注(赏金)

};
static void _ConvertPbToFTeamOP(FTeamOP &msg, const msg::TeamOP *pb) {
	msg.PID=UTF8_TO_TCHAR(pb->pid().c_str());
	msg.type=(ETEAMOP)pb->type();
	_ConvertPbToFTeamOPSetting(msg.setting, &pb->setting());
	_ConvertPbToFTeamOPChangeGroup(msg.changeGroup, &pb->changegroup());
	_ConvertPbToFTeamOPAppointLeader(msg.appointLeader, &pb->appointleader());
	_ConvertPbToFTeamOPSelfChangeGroup(msg.selfChangeGroup, &pb->selfchangegroup());
	_ConvertPbToFTeamOPChangeName(msg.changeName, &pb->changename());
	_ConvertPbToFTeamOPSwitchSlot(msg.switchSlot, &pb->switchslot());
	_ConvertPbToFTeamBetOnBounty(msg.betOnBounty, &pb->betonbounty());
}


USTRUCT(BlueprintType)
struct  FTeamBaseInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	uint64 TeamId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPVPMODE Mode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CompetotperNum;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CompetotperTotalNum;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool HasPwd;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubMode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FWorkshopSetting WSSetting;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FBountySetting Bounty;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BountyTotal;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString channelUsrId;

};
static void _ConvertPbToFTeamBaseInfo(FTeamBaseInfo &msg, const msg::TeamBaseInfo *pb) {
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.TeamId=pb->teamid();
	msg.Mode=(EPVPMODE)pb->mode();
	msg.CompetotperNum=pb->competotpernum();
	msg.CompetotperTotalNum=pb->competotpertotalnum();
	msg.HasPwd=pb->haspwd();
	msg.SubMode=pb->submode();
	_ConvertPbToFWorkshopSetting(msg.WSSetting, &pb->wssetting());
	_ConvertPbToFBountySetting(msg.Bounty, &pb->bounty());
	msg.BountyTotal=pb->bountytotal();
	msg.channelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
}


USTRUCT(BlueprintType)
struct  FUpdatePlayerData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UserName;	//玩家名字更新

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PassportType;	//通行证类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTChessPlrInfo ChessPlayer;	//棋手和棋手的装备(包括棋手模型)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SceneId;	//棋盘

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FChessSkinSlotData> ChessSkinData;	//棋子皮肤

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;	//头像

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> ShowItems;	//装扮

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTCommonRandList EmotionList;	//表情

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPveExData Pve;	// PVE

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTItem> SkinData;	// 棋手模型 + 棋盘皮肤

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCardGroupData CardGroupData;	// 卡组信息

};
static void _ConvertPbToFUpdatePlayerData(FUpdatePlayerData &msg, const msg::UpdatePlayerData *pb) {
	msg.UserName=UTF8_TO_TCHAR(pb->username().c_str());
	for (int i = 0; i < pb->passporttype().size(); i++) {
		auto &a = pb->passporttype().Get(i);
		int tmp;
		tmp=a;
		msg.PassportType.Add(tmp);
	}
	_ConvertPbToFCSDTChessPlrInfo(msg.ChessPlayer, &pb->chessplayer());
	msg.SceneId=pb->sceneid();

    for (auto it = pb->chessskindata().begin(); it != pb->chessskindata().end(); it++) {
        FChessSkinSlotData tmp_value;
        _ConvertPbToFChessSkinSlotData(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.ChessSkinData.Add(tmp_key, tmp_value);
    }
	msg.HeadPic=pb->headpic();

    for (auto it = pb->showitems().begin(); it != pb->showitems().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.ShowItems.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFCSDTCommonRandList(msg.EmotionList, &pb->emotionlist());
	_ConvertPbToFPveExData(msg.Pve, &pb->pve());

    for (auto it = pb->skindata().begin(); it != pb->skindata().end(); it++) {
        FCSDTItem tmp_value;
        _ConvertPbToFCSDTItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.SkinData.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFCardGroupData(msg.CardGroupData, &pb->cardgroupdata());
}


USTRUCT(BlueprintType)
struct  FSkipType {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Skip;	//内链类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Tap;	//内链界面

};
static void _ConvertPbToFSkipType(FSkipType &msg, const msg::SkipType *pb) {
	msg.Skip=UTF8_TO_TCHAR(pb->skip().c_str());
	msg.Tap=UTF8_TO_TCHAR(pb->tap().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTItemID {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsMedal;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Abrasion;	//磨损度

};
static void _ConvertPbToFCSDTItemID(FCSDTItemID &msg, const msg::CSDTItemID *pb) {
	msg.Id=pb->id();
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
	msg.IsMedal=pb->ismedal();
	msg.Count=pb->count();
	msg.Abrasion=UTF8_TO_TCHAR(pb->abrasion().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTBagItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTItem Item;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTBagPara Para;

};
static void _ConvertPbToFCSDTBagItem(FCSDTBagItem &msg, const msg::CSDTBagItem *pb) {
	_ConvertPbToFCSDTItem(msg.Item, &pb->item());
	_ConvertPbToFCSDTBagPara(msg.Para, &pb->para());
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerStatusInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	// id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLAYERSTATUS PlayerStatus;	// 玩家状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapId;	// 正在进行的pvp mapId

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ApkVersion;	// 版本号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatFormType;	// 登录设备

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HallServerId;	// 玩家所处的hallserver的id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EFRIENDINVISIBLE FriendInvisible;	// 好友不可见

	uint64 ObservePvpId;	// 观战战斗ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPVPMODE ObservePvpMod;	// 观战模式

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ChangeFriendInvisible;	// 只改好友可见

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapPlaying;	// 游玩中的地图

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ChangePsOnly;	// 修改psonly标记

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool PsOnly;	//  psonly

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ServiceVersion;	// 服务器版本号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ELOGINSOURCE LoginSource;	//登录来源

};
static void _ConvertPbToFCSDTPlayerStatusInfo(FCSDTPlayerStatusInfo &msg, const msg::CSDTPlayerStatusInfo *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.PlayerStatus=(EPLAYERSTATUS)pb->playerstatus();
	msg.MapId=pb->mapid();
	msg.ApkVersion=UTF8_TO_TCHAR(pb->apkversion().c_str());
	msg.PlatFormType=(EPLATFORMTYPE)pb->platformtype();
	msg.HallServerId=pb->hallserverid();
	msg.FriendInvisible=(EFRIENDINVISIBLE)pb->friendinvisible();
	msg.ObservePvpId=pb->observepvpid();
	msg.ObservePvpMod=(EPVPMODE)pb->observepvpmod();
	msg.ChangeFriendInvisible=pb->changefriendinvisible();
	msg.MapPlaying=pb->mapplaying();
	msg.ChangePsOnly=pb->changepsonly();
	msg.PsOnly=pb->psonly();
	msg.ServiceVersion=UTF8_TO_TCHAR(pb->serviceversion().c_str());
	msg.LoginSource=(ELOGINSOURCE)pb->loginsource();
}


USTRUCT(BlueprintType)
struct  FCSDTPuzzle {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> OpenMap;	//翻开的图块 [翻开得图块id]

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> GroupAward;	//获取的组奖励 [组奖励id]

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> ItemMap;	//周期内获取得<道具id:数量>

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> AwardPool;	//奖池已获得奖励id

};
static void _ConvertPbToFCSDTPuzzle(FCSDTPuzzle &msg, const msg::CSDTPuzzle *pb) {
	for (int i = 0; i < pb->openmap().size(); i++) {
		auto &a = pb->openmap().Get(i);
		int tmp;
		tmp=a;
		msg.OpenMap.Add(tmp);
	}
	for (int i = 0; i < pb->groupaward().size(); i++) {
		auto &a = pb->groupaward().Get(i);
		int tmp;
		tmp=a;
		msg.GroupAward.Add(tmp);
	}

    for (auto it = pb->itemmap().begin(); it != pb->itemmap().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.ItemMap.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->awardpool().size(); i++) {
		auto &a = pb->awardpool().Get(i);
		int tmp;
		tmp=a;
		msg.AwardPool.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FKernelCardGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ChessIds;

};
static void _ConvertPbToFKernelCardGroup(FKernelCardGroup &msg, const msg::KernelCardGroup *pb) {
	for (int i = 0; i < pb->chessids().size(); i++) {
		auto &a = pb->chessids().Get(i);
		int tmp;
		tmp=a;
		msg.ChessIds.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FApplyWorkshopRule {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FBattleExtData ExtData;

};
static void _ConvertPbToFApplyWorkshopRule(FApplyWorkshopRule &msg, const msg::ApplyWorkshopRule *pb) {
	_ConvertPbToFBattleExtData(msg.ExtData, &pb->extdata());
}


USTRUCT(BlueprintType)
struct  FVisitedMaps {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PlayerID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTVisitedMap> Maps;

};
static void _ConvertPbToFVisitedMaps(FVisitedMaps &msg, const msg::VisitedMaps *pb) {
	msg.PlayerID=UTF8_TO_TCHAR(pb->playerid().c_str());

    for (auto it = pb->maps().begin(); it != pb->maps().end(); it++) {
        FCSDTVisitedMap tmp_value;
        _ConvertPbToFCSDTVisitedMap(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Maps.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTCurShowItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InstanceId;

};
static void _ConvertPbToFCSDTCurShowItem(FCSDTCurShowItem &msg, const msg::CSDTCurShowItem *pb) {
	msg.Id=pb->id();
	msg.InstanceId=UTF8_TO_TCHAR(pb->instanceid().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerRankInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UsrName;	//用户名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;	//头像框

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	// 国家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Cup;	// 段位

};
static void _ConvertPbToFCSDTPlayerRankInfo(FCSDTPlayerRankInfo &msg, const msg::CSDTPlayerRankInfo *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.UsrName=UTF8_TO_TCHAR(pb->usrname().c_str());
	msg.HeadPic=pb->headpic();
	msg.HeadPicFrame=pb->headpicframe();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.Cup=pb->cup();
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerTournamentInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Score;	//积分

};
static void _ConvertPbToFCSDTPlayerTournamentInfo(FCSDTPlayerTournamentInfo &msg, const msg::CSDTPlayerTournamentInfo *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Score=pb->score();
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerPvpInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTPvpHistory> PvpHistory;	//pvp历史记录

};
static void _ConvertPbToFCSDTPlayerPvpInfo(FCSDTPlayerPvpInfo &msg, const msg::CSDTPlayerPvpInfo *pb) {
	for (int i = 0; i < pb->pvphistory().size(); i++) {
		auto &a = pb->pvphistory().Get(i);
		FCSDTPvpHistory tmp;
		_ConvertPbToFCSDTPvpHistory(tmp, &a);
		msg.PvpHistory.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerDetailInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPlayerBaseInfo BaseInfo;	//玩家基础信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTStat Stat;	//玩家统计信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTItem> Items;	//玩家物品信息(部分用到的)

};
static void _ConvertPbToFCSDTPlayerDetailInfo(FCSDTPlayerDetailInfo &msg, const msg::CSDTPlayerDetailInfo *pb) {
	_ConvertPbToFCSDTPlayerBaseInfo(msg.BaseInfo, &pb->baseinfo());
	_ConvertPbToFCSDTStat(msg.Stat, &pb->stat());
	for (int i = 0; i < pb->items().size(); i++) {
		auto &a = pb->items().Get(i);
		FCSDTItem tmp;
		_ConvertPbToFCSDTItem(tmp, &a);
		msg.Items.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerItems {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Cache;	// 是否为缓存

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTItem> Medals;	// 玩家基础信息

};
static void _ConvertPbToFCSDTPlayerItems(FCSDTPlayerItems &msg, const msg::CSDTPlayerItems *pb) {
	msg.Cache=pb->cache();
	for (int i = 0; i < pb->medals().size(); i++) {
		auto &a = pb->medals().Get(i);
		FCSDTItem tmp;
		_ConvertPbToFCSDTItem(tmp, &a);
		msg.Medals.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTNumRankItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Number;	//值

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Rank;	//排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Captain;	// 队长id 仅当custom type中会返回

	int64 Score;

};
static void _ConvertPbToFCSDTNumRankItem(FCSDTNumRankItem &msg, const msg::CSDTNumRankItem *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Number=pb->number();
	msg.Rank=pb->rank();
	msg.Captain=UTF8_TO_TCHAR(pb->captain().c_str());
	msg.Score=pb->score();
}


USTRUCT(BlueprintType)
struct  FCSDTWorldChat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPlayerSimpleInfo BaseInfo;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EmotionId;	//表情ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool NeedLocalize;	//是否需要本地化

	int64 Timestamp;	//消息发送时间戳

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EWORDCHAT WorldChatType;	//普通世界聊天 0, 创意工坊 1

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString WorkshopMapName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FWorkshopSetting WSSetting;	// todo: 手游接入这个新字段后，删掉WorkshopMapName

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHATSOURCETYPE SourceType;	//聊天来源类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelID;	//频道ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTItemMedal MedalInfo;	//皇后勋章详细信息

};
static void _ConvertPbToFCSDTWorldChat(FCSDTWorldChat &msg, const msg::CSDTWorldChat *pb) {
	_ConvertPbToFCSDTPlayerSimpleInfo(msg.BaseInfo, &pb->baseinfo());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.EmotionId=pb->emotionid();
	msg.NeedLocalize=pb->needlocalize();
	msg.Timestamp=pb->timestamp();
	msg.WorldChatType=(EWORDCHAT)pb->worldchattype();
	msg.WorkshopMapName=UTF8_TO_TCHAR(pb->workshopmapname().c_str());
	_ConvertPbToFWorkshopSetting(msg.WSSetting, &pb->wssetting());
	msg.SourceType=(ECHATSOURCETYPE)pb->sourcetype();
	msg.ChannelID=UTF8_TO_TCHAR(pb->channelid().c_str());
	_ConvertPbToFCSDTItemMedal(msg.MedalInfo, &pb->medalinfo());
}


USTRUCT(BlueprintType)
struct  FCSDTBuffAct {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupId;	//活动组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ActId;	//活动ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EBUFFACTSTATUS ActStatus;	//活动状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ShowTime;	//开始显示的时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EndShowTime;	//结束显示的时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int StartTime;	//开始的时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EndTime;	//结束的时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BuffStartTime;	//buff开始时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BuffEndTime;	//buff结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EACTIVITYTYPE ActType;	//添加活动类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EBuffEffectType BuffType;	//buff类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BuffStartLv;	//buff生效等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BuffEndLv;	//buff结束等级

};
static void _ConvertPbToFCSDTBuffAct(FCSDTBuffAct &msg, const msg::CSDTBuffAct *pb) {
	msg.GroupId=pb->groupid();
	msg.ActId=pb->actid();
	msg.ActStatus=(EBUFFACTSTATUS)pb->actstatus();
	msg.ShowTime=pb->showtime();
	msg.EndShowTime=pb->endshowtime();
	msg.StartTime=pb->starttime();
	msg.EndTime=pb->endtime();
	msg.BuffStartTime=pb->buffstarttime();
	msg.BuffEndTime=pb->buffendtime();
	msg.ActType=(EACTIVITYTYPE)pb->acttype();
	msg.BuffType=(EBuffEffectType)pb->bufftype();
	msg.BuffStartLv=pb->buffstartlv();
	msg.BuffEndLv=pb->buffendlv();
}


USTRUCT(BlueprintType)
struct  FCSDTMail {
	GENERATED_BODY()

	uint64 Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Title;	//标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;	//正文

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FAward> Awards;	//奖励

	int64 Ts;	//邮件发送时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsRead;	//是否已读

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsGetAward;	//是否领取奖励

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Flag;	//0代表明文，1代表语言key

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ESOURCE AwardSource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FString> Dict;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FMailExtData ExtData;

	int64 EndTime;	//结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EWEBOP WebOp;	//开放平台操作类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString WebOpenData;	//开放平台前端可见数据

	int64 MustWaitTime;	//必须等待一段时间才能领取奖励

};
static void _ConvertPbToFCSDTMail(FCSDTMail &msg, const msg::CSDTMail *pb) {
	msg.Id=pb->id();
	msg.Title=UTF8_TO_TCHAR(pb->title().c_str());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	for (int i = 0; i < pb->awards().size(); i++) {
		auto &a = pb->awards().Get(i);
		FAward tmp;
		_ConvertPbToFAward(tmp, &a);
		msg.Awards.Add(tmp);
	}
	msg.Ts=pb->ts();
	msg.IsRead=pb->isread();
	msg.IsGetAward=pb->isgetaward();
	msg.Flag=pb->flag();
	msg.AwardSource=(ESOURCE)pb->awardsource();

    for (auto it = pb->dict().begin(); it != pb->dict().end(); it++) {
        FString tmp_value;
        tmp_value=UTF8_TO_TCHAR(it->second.c_str());
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Dict.Add(tmp_key, tmp_value);
    }
	_ConvertPbToFMailExtData(msg.ExtData, &pb->extdata());
	msg.EndTime=pb->endtime();
	msg.WebOp=(EWEBOP)pb->webop();
	msg.WebOpenData=UTF8_TO_TCHAR(pb->webopendata().c_str());
	msg.MustWaitTime=pb->mustwaittime();
}


USTRUCT(BlueprintType)
struct  FCSDTNoticeInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTNotice> Data;	//公告

};
static void _ConvertPbToFCSDTNoticeInfo(FCSDTNoticeInfo &msg, const msg::CSDTNoticeInfo *pb) {
	for (int i = 0; i < pb->data().size(); i++) {
		auto &a = pb->data().Get(i);
		FCSDTNotice tmp;
		_ConvertPbToFCSDTNotice(tmp, &a);
		msg.Data.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTAdsInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTAds> Data;	//广告

};
static void _ConvertPbToFCSDTAdsInfo(FCSDTAdsInfo &msg, const msg::CSDTAdsInfo *pb) {
	for (int i = 0; i < pb->data().size(); i++) {
		auto &a = pb->data().Get(i);
		FCSDTAds tmp;
		_ConvertPbToFCSDTAds(tmp, &a);
		msg.Data.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTRoundEnd {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTRoundItem RounItem;

};
static void _ConvertPbToFCSDTRoundEnd(FCSDTRoundEnd &msg, const msg::CSDTRoundEnd *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	_ConvertPbToFCSDTRoundItem(msg.RounItem, &pb->rounitem());
}


USTRUCT(BlueprintType)
struct  FCSDTPlayerFinish {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PlayerIndex;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int DeathIndex;	//死亡序号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FrameIndex;	//帧号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPvpCampResult CampResult;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPvpStat Stat;

};
static void _ConvertPbToFCSDTPlayerFinish(FCSDTPlayerFinish &msg, const msg::CSDTPlayerFinish *pb) {
	msg.PlayerIndex=pb->playerindex();
	msg.DeathIndex=pb->deathindex();
	msg.FrameIndex=pb->frameindex();
	_ConvertPbToFCSDTPvpCampResult(msg.CampResult, &pb->campresult());
	_ConvertPbToFCSDTPvpStat(msg.Stat, &pb->stat());
}


USTRUCT(BlueprintType)
struct  FCSDTMarquee {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTMarqueeItem> Items;	//跑马灯列表

};
static void _ConvertPbToFCSDTMarquee(FCSDTMarquee &msg, const msg::CSDTMarquee *pb) {
	for (int i = 0; i < pb->items().size(); i++) {
		auto &a = pb->items().Get(i);
		FCSDTMarqueeItem tmp;
		_ConvertPbToFCSDTMarqueeItem(tmp, &a);
		msg.Items.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTTelBook {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Tel;	//电话

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	//昵称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Mmr;	//段位

};
static void _ConvertPbToFCSDTTelBook(FCSDTTelBook &msg, const msg::CSDTTelBook *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Tel=UTF8_TO_TCHAR(pb->tel().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Mmr=pb->mmr();
}


USTRUCT(BlueprintType)
struct  FLanguageData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Key;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> Languages;

};
static void _ConvertPbToFLanguageData(FLanguageData &msg, const msg::LanguageData *pb) {
	msg.Key=UTF8_TO_TCHAR(pb->key().c_str());
	for (int i = 0; i < pb->languages().size(); i++) {
		auto &a = pb->languages().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.Languages.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FGMLanguageData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Key;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FString> Languages;

};
static void _ConvertPbToFGMLanguageData(FGMLanguageData &msg, const msg::GMLanguageData *pb) {
	msg.Key=UTF8_TO_TCHAR(pb->key().c_str());

    for (auto it = pb->languages().begin(); it != pb->languages().end(); it++) {
        FString tmp_value;
        tmp_value=UTF8_TO_TCHAR(it->second.c_str());
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Languages.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCDNLanguageData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Key;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCommonKVString> Languages;

};
static void _ConvertPbToFCDNLanguageData(FCDNLanguageData &msg, const msg::CDNLanguageData *pb) {
	msg.Key=UTF8_TO_TCHAR(pb->key().c_str());
	for (int i = 0; i < pb->languages().size(); i++) {
		auto &a = pb->languages().Get(i);
		FCommonKVString tmp;
		_ConvertPbToFCommonKVString(tmp, &a);
		msg.Languages.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTSeason {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CurRankSeason;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool SeasonAwarded;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SeasonTaskProgress;

};
static void _ConvertPbToFCSDTSeason(FCSDTSeason &msg, const msg::CSDTSeason *pb) {
	msg.CurRankSeason=pb->currankseason();
	msg.SeasonAwarded=pb->seasonawarded();
	msg.SeasonTaskProgress=pb->seasontaskprogress();
}


USTRUCT(BlueprintType)
struct  FCSDTActivity {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTActivityGroup> Groups;	//活动组

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Questionnaires;	//玩家能够回答的问卷列表（不判断是否是活动时间内）

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool UseExcelConf;	//使用excel的配置

};
static void _ConvertPbToFCSDTActivity(FCSDTActivity &msg, const msg::CSDTActivity *pb) {

    for (auto it = pb->groups().begin(); it != pb->groups().end(); it++) {
        FCSDTActivityGroup tmp_value;
        _ConvertPbToFCSDTActivityGroup(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Groups.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->questionnaires().size(); i++) {
		auto &a = pb->questionnaires().Get(i);
		int tmp;
		tmp=a;
		msg.Questionnaires.Add(tmp);
	}
	msg.UseExcelConf=pb->useexcelconf();
}


USTRUCT(BlueprintType)
struct  FCSDTRecruitData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, bool> IsRecruited;	//是否被招募 {活动GroupId,是否被招募}

};
static void _ConvertPbToFCSDTRecruitData(FCSDTRecruitData &msg, const msg::CSDTRecruitData *pb) {

    for (auto it = pb->isrecruited().begin(); it != pb->isrecruited().end(); it++) {
        bool tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.IsRecruited.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTActivityRecruit {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FCSDTRecruitPlayer> Players;	//招募玩家List {玩家ID,玩家信息}

};
static void _ConvertPbToFCSDTActivityRecruit(FCSDTActivityRecruit &msg, const msg::CSDTActivityRecruit *pb) {

    for (auto it = pb->players().begin(); it != pb->players().end(); it++) {
        FCSDTRecruitPlayer tmp_value;
        _ConvertPbToFCSDTRecruitPlayer(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Players.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTActGroupBuy {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> Process;	//档位 - 人次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FCSDTActGroupBuyRwd> Reward;	//档位 - 是否领奖

};
static void _ConvertPbToFCSDTActGroupBuy(FCSDTActGroupBuy &msg, const msg::CSDTActGroupBuy *pb) {

    for (auto it = pb->process().begin(); it != pb->process().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Process.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->reward().begin(); it != pb->reward().end(); it++) {
        FCSDTActGroupBuyRwd tmp_value;
        _ConvertPbToFCSDTActGroupBuyRwd(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Reward.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTActRecruitData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Inviter;	//招募者

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FCSDTRecruitPlayer> Players;	//招募玩家List {玩家ID,玩家信息}

};
static void _ConvertPbToFCSDTActRecruitData(FCSDTActRecruitData &msg, const msg::CSDTActRecruitData *pb) {
	msg.Inviter=UTF8_TO_TCHAR(pb->inviter().c_str());

    for (auto it = pb->players().begin(); it != pb->players().end(); it++) {
        FCSDTRecruitPlayer tmp_value;
        _ConvertPbToFCSDTRecruitPlayer(tmp_value, &it->second);
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.Players.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTActLuckMallData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MallGoods;	//幸运商店商品列表

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TabId;	//栏位ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Discount;	//折扣信息

};
static void _ConvertPbToFCSDTActLuckMallData(FCSDTActLuckMallData &msg, const msg::CSDTActLuckMallData *pb) {
	for (int i = 0; i < pb->mallgoods().size(); i++) {
		auto &a = pb->mallgoods().Get(i);
		int tmp;
		tmp=a;
		msg.MallGoods.Add(tmp);
	}
	msg.TabId=pb->tabid();
	msg.Discount=pb->discount();
}


USTRUCT(BlueprintType)
struct  FCSDTMelee {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Progress;	//活动进度

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool GetAward;	//是否已领奖

	int64 MeleeBeginTime;

	int64 MeleeEndTime;

};
static void _ConvertPbToFCSDTMelee(FCSDTMelee &msg, const msg::CSDTMelee *pb) {
	msg.Progress=pb->progress();
	msg.GetAward=pb->getaward();
	msg.MeleeBeginTime=pb->meleebegintime();
	msg.MeleeEndTime=pb->meleeendtime();
}


USTRUCT(BlueprintType)
struct  FCSDTTeamSlotPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsAI;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Slot;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETEAMGROUP Group;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UsrName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Region;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Lvl;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Cup;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatformType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;

};
static void _ConvertPbToFCSDTTeamSlotPlayer(FCSDTTeamSlotPlayer &msg, const msg::CSDTTeamSlotPlayer *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.IsAI=pb->isai();
	msg.Slot=pb->slot();
	msg.Group=(ETEAMGROUP)pb->group();
	msg.UsrName=UTF8_TO_TCHAR(pb->usrname().c_str());
	msg.HeadPic=pb->headpic();
	msg.Region=UTF8_TO_TCHAR(pb->region().c_str());
	msg.Province=pb->province();
	msg.HeadPicFrame=pb->headpicframe();
	msg.Lvl=pb->lvl();
	msg.Cup=pb->cup();
	msg.PlatformType=(EPLATFORMTYPE)pb->platformtype();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTTeamVoicePlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString VoiceId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int VoiceMemId;	// 腾讯语音使用

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString VoiceUserId;	// 龙渊语音使用

};
static void _ConvertPbToFCSDTTeamVoicePlayer(FCSDTTeamVoicePlayer &msg, const msg::CSDTTeamVoicePlayer *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.VoiceId=UTF8_TO_TCHAR(pb->voiceid().c_str());
	msg.VoiceMemId=pb->voicememid();
	msg.VoiceUserId=UTF8_TO_TCHAR(pb->voiceuserid().c_str());
}


USTRUCT(BlueprintType)
struct  FActivityAttrData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ID;	//活动组ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EABTESTTYPE ABTestType;	//ABTest key

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ABTestValue;	//ABTest value

};
static void _ConvertPbToFActivityAttrData(FActivityAttrData &msg, const msg::ActivityAttrData *pb) {
	msg.ID=pb->id();
	msg.ABTestType=(EABTESTTYPE)pb->abtesttype();
	msg.ABTestValue=pb->abtestvalue();
}


USTRUCT(BlueprintType)
struct  FChannelFunctionData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelId;	//渠道类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ForbiddenLogo;	//12禁Logo

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool AgeJudge;	//年龄判断

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool InformationInput;	//信息录入

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool GameRestrict;	//场次限制

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ForbiddenAge;	//禁止登录玩家年龄

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FPlayLimit> PlayLimits;	//游戏场次限制

};
static void _ConvertPbToFChannelFunctionData(FChannelFunctionData &msg, const msg::ChannelFunctionData *pb) {
	msg.ChannelId=UTF8_TO_TCHAR(pb->channelid().c_str());
	msg.ForbiddenLogo=pb->forbiddenlogo();
	msg.AgeJudge=pb->agejudge();
	msg.InformationInput=pb->informationinput();
	msg.GameRestrict=pb->gamerestrict();
	msg.ForbiddenAge=pb->forbiddenage();
	for (int i = 0; i < pb->playlimits().size(); i++) {
		auto &a = pb->playlimits().Get(i);
		FPlayLimit tmp;
		_ConvertPbToFPlayLimit(tmp, &a);
		msg.PlayLimits.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FPvpHistoryData {
	GENERATED_BODY()

	uint64 PvpId;

	int64 CreateTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPVPMODE Mode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPvpCampResult CampResult;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MeleeRule;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CustomSubMode;

	uint64 TournamentId;	// 赛事id

	uint64 GameId;	// 赛事对局Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPvpTeachResult TeachResult;	// 教学关卡

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPvpExtData ExtData;	// 扩展字段

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FPlayerExtMap PlayerExtData;	//玩家信息扩展字段

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FBattleExtData BattleExt;	//创意工坊扩展字段

};
static void _ConvertPbToFPvpHistoryData(FPvpHistoryData &msg, const msg::PvpHistoryData *pb) {
	msg.PvpId=pb->pvpid();
	msg.CreateTime=pb->createtime();
	msg.Mode=(EPVPMODE)pb->mode();
	_ConvertPbToFCSDTPvpCampResult(msg.CampResult, &pb->campresult());
	msg.MeleeRule=pb->meleerule();
	msg.CustomSubMode=pb->customsubmode();
	msg.TournamentId=pb->tournamentid();
	msg.GameId=pb->gameid();
	_ConvertPbToFPvpTeachResult(msg.TeachResult, &pb->teachresult());
	_ConvertPbToFPvpExtData(msg.ExtData, &pb->extdata());
	_ConvertPbToFPlayerExtMap(msg.PlayerExtData, &pb->playerextdata());
	_ConvertPbToFBattleExtData(msg.BattleExt, &pb->battleext());
}


USTRUCT(BlueprintType)
struct  FCSDTGuide {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString GuideName;	//步骤名称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Status;	//状态

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GuideID;	//步骤ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Sequence;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LastSeq;

};
static void _ConvertPbToFCSDTGuide(FCSDTGuide &msg, const msg::CSDTGuide *pb) {
	msg.GuideName=UTF8_TO_TCHAR(pb->guidename().c_str());
	msg.Status=pb->status();
	msg.GuideID=pb->guideid();
	msg.Sequence=pb->sequence();
	msg.LastSeq=pb->lastseq();
}


USTRUCT(BlueprintType)
struct  FCSDTChat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EmotionId;	//表情ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SenderId;	//发送者ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;	//文本内容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	// ps4 Only 额外信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrId;	// ps4 Only 额外信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool PS4Only;	// ps4 Only 开关

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHATSOURCETYPE SourceType;	//聊天来源类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;	// 用户限制类型

};
static void _ConvertPbToFCSDTChat(FCSDTChat &msg, const msg::CSDTChat *pb) {
	msg.EmotionId=pb->emotionid();
	msg.SenderId=UTF8_TO_TCHAR(pb->senderid().c_str());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();
	msg.ChannelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	msg.PS4Only=pb->ps4only();
	msg.SourceType=(ECHATSOURCETYPE)pb->sourcetype();
	msg.RestrictType=(EUserRestrictType)pb->restricttype();
}


USTRUCT(BlueprintType)
struct  FCSDTGoodsInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ESHOPTYPE Type;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTGoods> GoodsInfo;	//{uid：商品ID}

	int64 RefreshTime;	//上次刷新时间

};
static void _ConvertPbToFCSDTGoodsInfo(FCSDTGoodsInfo &msg, const msg::CSDTGoodsInfo *pb) {
	msg.Type=(ESHOPTYPE)pb->type();
	for (int i = 0; i < pb->goodsinfo().size(); i++) {
		auto &a = pb->goodsinfo().Get(i);
		FCSDTGoods tmp;
		_ConvertPbToFCSDTGoods(tmp, &a);
		msg.GoodsInfo.Add(tmp);
	}
	msg.RefreshTime=pb->refreshtime();
}


USTRUCT(BlueprintType)
struct  FMallTabData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//栏位ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Title;	//栏位标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EMALLTABTYPE Type;	//栏位类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Sort;	//展示顺序

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Skips_Interface_pc;	//PC客户端跳转页面

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ItemTypePage;	//物品类型页签

};
static void _ConvertPbToFMallTabData(FMallTabData &msg, const msg::MallTabData *pb) {
	msg.Id=pb->id();
	msg.Title=UTF8_TO_TCHAR(pb->title().c_str());
	msg.Type=(EMALLTABTYPE)pb->type();
	msg.Sort=pb->sort();
	msg.Skips_Interface_pc=pb->skips_interface_pc();
	msg.ItemTypePage=pb->itemtypepage();
}


USTRUCT(BlueprintType)
struct  FSkip {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Interface;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Tab;

};
static void _ConvertPbToFSkip(FSkip &msg, const msg::Skip *pb) {
	msg.Interface=UTF8_TO_TCHAR(pb->interface().c_str());
	msg.Tab=pb->tab();
}


USTRUCT(BlueprintType)
struct  FCSDTMallGoods {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTMallGoodsData> MallGoods;	//商城栏位商品

};
static void _ConvertPbToFCSDTMallGoods(FCSDTMallGoods &msg, const msg::CSDTMallGoods *pb) {
	for (int i = 0; i < pb->mallgoods().size(); i++) {
		auto &a = pb->mallgoods().Get(i);
		FCSDTMallGoodsData tmp;
		_ConvertPbToFCSDTMallGoodsData(tmp, &a);
		msg.MallGoods.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTMallBuyCount {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTMallBuyCountData> MallGoods;	//商城栏位商品

};
static void _ConvertPbToFCSDTMallBuyCount(FCSDTMallBuyCount &msg, const msg::CSDTMallBuyCount *pb) {
	for (int i = 0; i < pb->mallgoods().size(); i++) {
		auto &a = pb->mallgoods().Get(i);
		FCSDTMallBuyCountData tmp;
		_ConvertPbToFCSDTMallBuyCountData(tmp, &a);
		msg.MallGoods.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FMallNoticeData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	//Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicName;	//图片名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SortId;	//排序Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ESKIPTYPE SkipType;	//跳转类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SkipName;	//跳转大界面名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SkipTap;	//跳转页面显示分页名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MallGoodsId;	//商城商品Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	//国家地区

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ShowBeginTime;	//

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ShowEndTime;

};
static void _ConvertPbToFMallNoticeData(FMallNoticeData &msg, const msg::MallNoticeData *pb) {
	msg.Id=pb->id();
	msg.PicName=UTF8_TO_TCHAR(pb->picname().c_str());
	msg.SortId=pb->sortid();
	msg.SkipType=(ESKIPTYPE)pb->skiptype();
	msg.SkipName=UTF8_TO_TCHAR(pb->skipname().c_str());
	msg.SkipTap=pb->skiptap();
	msg.MallGoodsId=pb->mallgoodsid();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.ShowBeginTime=UTF8_TO_TCHAR(pb->showbegintime().c_str());
	msg.ShowEndTime=UTF8_TO_TCHAR(pb->showendtime().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTSignData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FSign> SignList;	// 当月签到情况

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TodayAwardDay;	// 今天应该领取奖励池中第几天的奖励

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ShareCount;	// 本月累计分享次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ShareAward;	// 已经领取的分享奖励的次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Fit;	// 今日最宜

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Avoid;	// 今日不宜

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LuckyChess;	// 今日幸运棋子

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FortuneProverb;	// 今日棋运箴言

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int FitAvoid;	// 今日棋运箴言

};
static void _ConvertPbToFCSDTSignData(FCSDTSignData &msg, const msg::CSDTSignData *pb) {
	for (int i = 0; i < pb->signlist().size(); i++) {
		auto &a = pb->signlist().Get(i);
		FSign tmp;
		_ConvertPbToFSign(tmp, &a);
		msg.SignList.Add(tmp);
	}
	msg.TodayAwardDay=pb->todayawardday();
	msg.ShareCount=pb->sharecount();
	for (int i = 0; i < pb->shareaward().size(); i++) {
		auto &a = pb->shareaward().Get(i);
		int tmp;
		tmp=a;
		msg.ShareAward.Add(tmp);
	}
	for (int i = 0; i < pb->fit().size(); i++) {
		auto &a = pb->fit().Get(i);
		int tmp;
		tmp=a;
		msg.Fit.Add(tmp);
	}
	for (int i = 0; i < pb->avoid().size(); i++) {
		auto &a = pb->avoid().Get(i);
		int tmp;
		tmp=a;
		msg.Avoid.Add(tmp);
	}
	msg.LuckyChess=pb->luckychess();
	msg.FortuneProverb=pb->fortuneproverb();
	msg.FitAvoid=pb->fitavoid();
}


USTRUCT(BlueprintType)
struct  FMatchTeamData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	// 赛事id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	// 房间数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int StartTeamId;	// 开始ID

	int64 EndTime;	// 结束时间

};
static void _ConvertPbToFMatchTeamData(FMatchTeamData &msg, const msg::MatchTeamData *pb) {
	msg.Id=pb->id();
	msg.Count=pb->count();
	msg.StartTeamId=pb->startteamid();
	msg.EndTime=pb->endtime();
}


USTRUCT(BlueprintType)
struct  FCSDTThirdPvpInfo {
	GENERATED_BODY()

	uint64 ID;	//赛事ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Title;	//标题

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;	//内容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString BigPic;	//大图url

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SmallPic;	//小图url

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString RecommendIcon;	//推荐图标

	int64 PvpStartTime;	//比赛开始时间

	int64 PvpEndTime;	//比赛结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PreShowPic;	//预告图标

};
static void _ConvertPbToFCSDTThirdPvpInfo(FCSDTThirdPvpInfo &msg, const msg::CSDTThirdPvpInfo *pb) {
	msg.ID=pb->id();
	msg.Title=UTF8_TO_TCHAR(pb->title().c_str());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.BigPic=UTF8_TO_TCHAR(pb->bigpic().c_str());
	msg.SmallPic=UTF8_TO_TCHAR(pb->smallpic().c_str());
	msg.RecommendIcon=UTF8_TO_TCHAR(pb->recommendicon().c_str());
	msg.PvpStartTime=pb->pvpstarttime();
	msg.PvpEndTime=pb->pvpendtime();
	msg.PreShowPic=UTF8_TO_TCHAR(pb->preshowpic().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTRecommendPvpInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTRecommendPlayer PlayerInfo;	//展示的玩家信息

	uint64 PvpId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ObserveCount;

	int64 StartTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPVPMODE Mode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTournamentDesc Tournament;	//赛事信息

	uint64 ThirdPvpID;	//第三方比赛ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SubMode;	//子模式ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FAuthority AuthorityData;	//是否是官方指定房间

};
static void _ConvertPbToFCSDTRecommendPvpInfo(FCSDTRecommendPvpInfo &msg, const msg::CSDTRecommendPvpInfo *pb) {
	_ConvertPbToFCSDTRecommendPlayer(msg.PlayerInfo, &pb->playerinfo());
	msg.PvpId=pb->pvpid();
	msg.ObserveCount=pb->observecount();
	msg.StartTime=pb->starttime();
	msg.Mode=(EPVPMODE)pb->mode();
	_ConvertPbToFTournamentDesc(msg.Tournament, &pb->tournament());
	msg.ThirdPvpID=pb->thirdpvpid();
	msg.SubMode=pb->submode();
	_ConvertPbToFAuthority(msg.AuthorityData, &pb->authoritydata());
}


USTRUCT(BlueprintType)
struct  FWxVVipData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	//大玩家等级

	int64 WeeklyTAwardT;	//vip周奖励结算时间戳

	int64 DailyVAwardT;	//vip日奖励时间戳

	int64 DailyAwardT;	//普通日奖励时间戳

};
static void _ConvertPbToFWxVVipData(FWxVVipData &msg, const msg::WxVVipData *pb) {
	msg.Level=pb->level();
	msg.WeeklyTAwardT=pb->weeklytawardt();
	msg.DailyVAwardT=pb->dailyvawardt();
	msg.DailyAwardT=pb->dailyawardt();
}


USTRUCT(BlueprintType)
struct  FCSDTWxRedPktItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString RedPktIdx;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RedPktId;

};
static void _ConvertPbToFCSDTWxRedPktItem(FCSDTWxRedPktItem &msg, const msg::CSDTWxRedPktItem *pb) {
	msg.RedPktIdx=UTF8_TO_TCHAR(pb->redpktidx().c_str());
	msg.RedPktId=pb->redpktid();
}


USTRUCT(BlueprintType)
struct  FCSDTWxRedPktProfile {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SelfRank;	//自己排名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SelfLike;	//自己获得点赞数

};
static void _ConvertPbToFCSDTWxRedPktProfile(FCSDTWxRedPktProfile &msg, const msg::CSDTWxRedPktProfile *pb) {
	msg.SelfRank=pb->selfrank();
	msg.SelfLike=pb->selflike();
}


USTRUCT(BlueprintType)
struct  FCSDTWxVVipRankItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int VLvl;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Likes;

};
static void _ConvertPbToFCSDTWxVVipRankItem(FCSDTWxVVipRankItem &msg, const msg::CSDTWxVVipRankItem *pb) {
	msg.UId=UTF8_TO_TCHAR(pb->uid().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.VLvl=pb->vlvl();
	msg.Likes=pb->likes();
}


USTRUCT(BlueprintType)
struct  FCSDTSlotInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Slot;

};
static void _ConvertPbToFCSDTSlotInfo(FCSDTSlotInfo &msg, const msg::CSDTSlotInfo *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Slot=pb->slot();
}


USTRUCT(BlueprintType)
struct  FCSDTRedPktInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RedPktId;

	int64 RankVer;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTRedPktData> Rank;

};
static void _ConvertPbToFCSDTRedPktInfo(FCSDTRedPktInfo &msg, const msg::CSDTRedPktInfo *pb) {
	msg.RedPktId=pb->redpktid();
	msg.RankVer=pb->rankver();
	for (int i = 0; i < pb->rank().size(); i++) {
		auto &a = pb->rank().Get(i);
		FCSDTRedPktData tmp;
		_ConvertPbToFCSDTRedPktData(tmp, &a);
		msg.Rank.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCreditCfgItem {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ActId;	// id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ThresholdHi;	// 信用分限制上限

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ThresholdLo;	// 信用分限制下限

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LimitLv;	// 等级限制

};
static void _ConvertPbToFCreditCfgItem(FCreditCfgItem &msg, const msg::CreditCfgItem *pb) {
	msg.ActId=pb->actid();
	msg.ThresholdHi=pb->thresholdhi();
	msg.ThresholdLo=pb->thresholdlo();
	msg.LimitLv=pb->limitlv();
}


USTRUCT(BlueprintType)
struct  FCSDTBriefPunishment {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTPlayer> UserName;

	int64 PunishmentDeadline;

};
static void _ConvertPbToFCSDTBriefPunishment(FCSDTBriefPunishment &msg, const msg::CSDTBriefPunishment *pb) {
	for (int i = 0; i < pb->username().size(); i++) {
		auto &a = pb->username().Get(i);
		FCSDTPlayer tmp;
		_ConvertPbToFCSDTPlayer(tmp, &a);
		msg.UserName.Add(tmp);
	}
	msg.PunishmentDeadline=pb->punishmentdeadline();
}


USTRUCT(BlueprintType)
struct  FPlayerConfirmInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PlayerId;	//玩家ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;	//头像

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;	//头像框

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UserName;	//玩家名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsRobot;	//是否是机器人

};
static void _ConvertPbToFPlayerConfirmInfo(FPlayerConfirmInfo &msg, const msg::PlayerConfirmInfo *pb) {
	msg.PlayerId=UTF8_TO_TCHAR(pb->playerid().c_str());
	msg.HeadPic=pb->headpic();
	msg.HeadPicFrame=pb->headpicframe();
	msg.UserName=UTF8_TO_TCHAR(pb->username().c_str());
	msg.IsRobot=pb->isrobot();
}


USTRUCT(BlueprintType)
struct  FAnswerData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Index;	// 答题序号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> Contents;	// 答题内容

};
static void _ConvertPbToFAnswerData(FAnswerData &msg, const msg::AnswerData *pb) {
	msg.Index=pb->index();
	for (int i = 0; i < pb->contents().size(); i++) {
		auto &a = pb->contents().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.Contents.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FVideoInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;	// 视频id  删除的时候只需填写id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	// 视频名称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EVIDEO_TYPE Type;	// 视频类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicUrl;	// 视频预览图url

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ContentUrl;	// 视频内容url

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool LanguageKey;	// 视频名称是否是语言key

};
static void _ConvertPbToFVideoInfo(FVideoInfo &msg, const msg::VideoInfo *pb) {
	msg.Id=pb->id();
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Type=(EVIDEO_TYPE)pb->type();
	msg.PicUrl=UTF8_TO_TCHAR(pb->picurl().c_str());
	msg.ContentUrl=UTF8_TO_TCHAR(pb->contenturl().c_str());
	msg.LanguageKey=pb->languagekey();
}


USTRUCT(BlueprintType)
struct  FCSDTAddictionInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsAuthAddiction;	//玩家是否进行沉迷认证

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString AuthAddictionToken;	//沉迷认证token

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsVerified;	//是否已实名认证

};
static void _ConvertPbToFCSDTAddictionInfo(FCSDTAddictionInfo &msg, const msg::CSDTAddictionInfo *pb) {
	msg.IsAuthAddiction=pb->isauthaddiction();
	msg.AuthAddictionToken=UTF8_TO_TCHAR(pb->authaddictiontoken().c_str());
	msg.IsVerified=pb->isverified();
}


USTRUCT(BlueprintType)
struct  FMultiPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	//昵称

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;	//头像

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPicFrame;	//头像框

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	//等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MMR;	//杯段

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Diamond;	//甜甜圈数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Region;	//区服

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Money;	//糖果数量

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PassportLevel;	//通行证等级

};
static void _ConvertPbToFMultiPlayer(FMultiPlayer &msg, const msg::MultiPlayer *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.HeadPic=pb->headpic();
	msg.HeadPicFrame=pb->headpicframe();
	msg.Level=pb->level();
	msg.MMR=pb->mmr();
	msg.Diamond=pb->diamond();
	msg.Region=UTF8_TO_TCHAR(pb->region().c_str());
	msg.Money=pb->money();
	msg.PassportLevel=pb->passportlevel();
}


USTRUCT(BlueprintType)
struct  FCSDTBannerInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTBanner> Data;	//banner

};
static void _ConvertPbToFCSDTBannerInfo(FCSDTBannerInfo &msg, const msg::CSDTBannerInfo *pb) {
	for (int i = 0; i < pb->data().size(); i++) {
		auto &a = pb->data().Get(i);
		FCSDTBanner tmp;
		_ConvertPbToFCSDTBanner(tmp, &a);
		msg.Data.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTTournament {
	GENERATED_BODY()

	uint64 Id;	//赛事ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int EnrollCount;	//报名数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Enroll;	//该玩家是否报名

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Out;	//该玩家是否被淘汰

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int JoinCount;	//玩家参与该赛事的次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTTournamentClass> Classes;	//每级别每轮次对战信息

	uint64 Round;	//当前轮次

	uint64 LastGameId;	//上一场对局

	uint64 EnrollClass;	//报名级别

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupIdx;	//当前组idx

	TMap<uint64, int> RankInfo;	//玩家所有轮次排名信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PointAwardGet;	//积分进度领取情况

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool Battle;	//当前轮次是否参与过对局

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Points;	//玩家获得的赛事积分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ChallengeAgain;	//玩家是否再次确认开始挑战

	TMap<uint64, int> RoundPoints;	//轮次内积分

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETOURNAMENTSTATUS Status;	//赛事状态

};
static void _ConvertPbToFCSDTTournament(FCSDTTournament &msg, const msg::CSDTTournament *pb) {
	msg.Id=pb->id();
	msg.EnrollCount=pb->enrollcount();
	msg.Enroll=pb->enroll();
	msg.Out=pb->out();
	msg.JoinCount=pb->joincount();
	for (int i = 0; i < pb->classes().size(); i++) {
		auto &a = pb->classes().Get(i);
		FCSDTTournamentClass tmp;
		_ConvertPbToFCSDTTournamentClass(tmp, &a);
		msg.Classes.Add(tmp);
	}
	msg.Round=pb->round();
	msg.LastGameId=pb->lastgameid();
	msg.EnrollClass=pb->enrollclass();
	msg.GroupIdx=pb->groupidx();

    for (auto it = pb->rankinfo().begin(); it != pb->rankinfo().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        uint64 tmp_key;
        tmp_key=it->first;
        msg.RankInfo.Add(tmp_key, tmp_value);
    }
	for (int i = 0; i < pb->pointawardget().size(); i++) {
		auto &a = pb->pointawardget().Get(i);
		int tmp;
		tmp=a;
		msg.PointAwardGet.Add(tmp);
	}
	msg.Battle=pb->battle();

    for (auto it = pb->points().begin(); it != pb->points().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Points.Add(tmp_key, tmp_value);
    }
	msg.ChallengeAgain=pb->challengeagain();

    for (auto it = pb->roundpoints().begin(); it != pb->roundpoints().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        uint64 tmp_key;
        tmp_key=it->first;
        msg.RoundPoints.Add(tmp_key, tmp_value);
    }
	msg.Status=(ETOURNAMENTSTATUS)pb->status();
}


USTRUCT(BlueprintType)
struct  FCSDTActDaySign {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTActDaySignDetail> SignDay;	//每个周期的签到信息{dayNum,是否签到}

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Loop;	//第几伦的签到

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Day;	//签到第几天

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ReSignTimes;	//补签次数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool CanSign;	//今日能否签到

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool CanGetSpecialAward;	//能否领取特殊奖励

};
static void _ConvertPbToFCSDTActDaySign(FCSDTActDaySign &msg, const msg::CSDTActDaySign *pb) {

    for (auto it = pb->signday().begin(); it != pb->signday().end(); it++) {
        FCSDTActDaySignDetail tmp_value;
        _ConvertPbToFCSDTActDaySignDetail(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.SignDay.Add(tmp_key, tmp_value);
    }
	msg.Loop=pb->loop();
	msg.Day=pb->day();
	msg.ReSignTimes=pb->resigntimes();
	msg.CanSign=pb->cansign();
	msg.CanGetSpecialAward=pb->cangetspecialaward();
}


USTRUCT(BlueprintType)
struct  FCSDTGDCommonBin {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;	// 文件名 到后缀

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Md5sum;	// 文件MD5sum

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EGDBinType ConfTyp;	//配置文件类型

	std::string Datas;	// 原始文件内容

};
static void _ConvertPbToFCSDTGDCommonBin(FCSDTGDCommonBin &msg, const msg::CSDTGDCommonBin *pb) {
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Md5sum=UTF8_TO_TCHAR(pb->md5sum().c_str());
	msg.ConfTyp=(EGDBinType)pb->conftyp();
	msg.Datas=pb->datas();
}


USTRUCT(BlueprintType)
struct  FCSDTEnrollEnd {
	GENERATED_BODY()

	uint64 Id;	//赛事ID

	TArray<uint64> CancelClasses;	//取消的级别

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTTournamentClass> ClassGroups;	//战斗分组

};
static void _ConvertPbToFCSDTEnrollEnd(FCSDTEnrollEnd &msg, const msg::CSDTEnrollEnd *pb) {
	msg.Id=pb->id();
	for (int i = 0; i < pb->cancelclasses().size(); i++) {
		auto &a = pb->cancelclasses().Get(i);
		uint64 tmp;
		tmp=a;
		msg.CancelClasses.Add(tmp);
	}
	for (int i = 0; i < pb->classgroups().size(); i++) {
		auto &a = pb->classgroups().Get(i);
		FCSDTTournamentClass tmp;
		_ConvertPbToFCSDTTournamentClass(tmp, &a);
		msg.ClassGroups.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FCSDTNewTournament {
	GENERATED_BODY()

	uint64 Id;	//赛事ID

	TMap<uint64, int> Classes;	//{级别ID:每个级别的玩家上限}

};
static void _ConvertPbToFCSDTNewTournament(FCSDTNewTournament &msg, const msg::CSDTNewTournament *pb) {
	msg.Id=pb->id();

    for (auto it = pb->classes().begin(); it != pb->classes().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        uint64 tmp_key;
        tmp_key=it->first;
        msg.Classes.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FTournamentRoom {
	GENERATED_BODY()

	uint64 GameStartTime;	// unix timestamp

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ReadyIds;	// 已准备的玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SelfSlot;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FPvpPlayerData> PlayerDatas;	// 房间成员的pvpData

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MaxPlayerCount;	// 房间最大人数

	uint64 TournamentID;

	uint64 ClassID;

	uint64 RoundID;	// 自己的轮次ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupIndex;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETeamState Status;

};
static void _ConvertPbToFTournamentRoom(FTournamentRoom &msg, const msg::TournamentRoom *pb) {
	msg.GameStartTime=pb->gamestarttime();
	for (int i = 0; i < pb->readyids().size(); i++) {
		auto &a = pb->readyids().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.ReadyIds.Add(tmp);
	}
	msg.SelfSlot=pb->selfslot();
	for (int i = 0; i < pb->playerdatas().size(); i++) {
		auto &a = pb->playerdatas().Get(i);
		FPvpPlayerData tmp;
		_ConvertPbToFPvpPlayerData(tmp, &a);
		msg.PlayerDatas.Add(tmp);
	}
	msg.MaxPlayerCount=pb->maxplayercount();
	msg.TournamentID=pb->tournamentid();
	msg.ClassID=pb->classid();
	msg.RoundID=pb->roundid();
	msg.GroupIndex=pb->groupindex();
	msg.Status=(ETeamState)pb->status();
}


USTRUCT(BlueprintType)
struct  FPlayerTournament {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	// 玩家id

	TMap<uint64, FPlayerTournamentData> Data;	// 玩家参加的所有赛事信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> Points;	// 玩家所有全局积分信息

	TMap<uint64, int> EnrollCount;	// 赛事报名次数

};
static void _ConvertPbToFPlayerTournament(FPlayerTournament &msg, const msg::PlayerTournament *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());

    for (auto it = pb->data().begin(); it != pb->data().end(); it++) {
        FPlayerTournamentData tmp_value;
        _ConvertPbToFPlayerTournamentData(tmp_value, &it->second);
        uint64 tmp_key;
        tmp_key=it->first;
        msg.Data.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->points().begin(); it != pb->points().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.Points.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->enrollcount().begin(); it != pb->enrollcount().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        uint64 tmp_key;
        tmp_key=it->first;
        msg.EnrollCount.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FGuildBaseInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Sign;	// 标志

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Notice;	// 公告

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString RecruitNotice;	// 招募公告

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Tags;	// 标签

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	// 国家

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Language;	// 语言

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool RequirePermit;	// 加入限制

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RequireCup;	// 最低段位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MemberCount;	// 成员人数

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Owner;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString OwnerName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Exp;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrID;	// 会长channeluid

};
static void _ConvertPbToFGuildBaseInfo(FGuildBaseInfo &msg, const msg::GuildBaseInfo *pb) {
	msg.ID=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Sign=pb->sign();
	msg.Notice=UTF8_TO_TCHAR(pb->notice().c_str());
	msg.RecruitNotice=UTF8_TO_TCHAR(pb->recruitnotice().c_str());
	for (int i = 0; i < pb->tags().size(); i++) {
		auto &a = pb->tags().Get(i);
		int tmp;
		tmp=a;
		msg.Tags.Add(tmp);
	}
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.Language=UTF8_TO_TCHAR(pb->language().c_str());
	msg.RequirePermit=pb->requirepermit();
	msg.RequireCup=pb->requirecup();
	msg.MemberCount=pb->membercount();
	msg.Province=pb->province();
	msg.Owner=UTF8_TO_TCHAR(pb->owner().c_str());
	msg.OwnerName=UTF8_TO_TCHAR(pb->ownername().c_str());
	msg.Level=pb->level();
	msg.Exp=pb->exp();
	msg.ChannelUsrID=UTF8_TO_TCHAR(pb->channelusrid().c_str());
}


USTRUCT(BlueprintType)
struct  FGuildAttr {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Sign;	// 标志背景

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Notice;	// 公告

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString RecruitNotice;	// 招募公告

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Tags;	// 标签

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Owner;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString OwnerName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EGUILDPERMITTYPE RequirePermit;	// 加入限制

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RequireCup;	// 最低段位

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Language;

};
static void _ConvertPbToFGuildAttr(FGuildAttr &msg, const msg::GuildAttr *pb) {
	msg.Name=UTF8_TO_TCHAR(pb->name().c_str());
	msg.Sign=pb->sign();
	msg.Notice=UTF8_TO_TCHAR(pb->notice().c_str());
	msg.RecruitNotice=UTF8_TO_TCHAR(pb->recruitnotice().c_str());
	for (int i = 0; i < pb->tags().size(); i++) {
		auto &a = pb->tags().Get(i);
		int tmp;
		tmp=a;
		msg.Tags.Add(tmp);
	}
	msg.Owner=UTF8_TO_TCHAR(pb->owner().c_str());
	msg.OwnerName=UTF8_TO_TCHAR(pb->ownername().c_str());
	msg.RequirePermit=(EGUILDPERMITTYPE)pb->requirepermit();
	msg.RequireCup=pb->requirecup();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.Province=pb->province();
	msg.Language=UTF8_TO_TCHAR(pb->language().c_str());
}


USTRUCT(BlueprintType)
struct  FGuildExtraInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FGuildMember> Members;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FGuildApplicant> Players;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FGuildLog> Logs;

};
static void _ConvertPbToFGuildExtraInfo(FGuildExtraInfo &msg, const msg::GuildExtraInfo *pb) {
	for (int i = 0; i < pb->members().size(); i++) {
		auto &a = pb->members().Get(i);
		FGuildMember tmp;
		_ConvertPbToFGuildMember(tmp, &a);
		msg.Members.Add(tmp);
	}
	for (int i = 0; i < pb->players().size(); i++) {
		auto &a = pb->players().Get(i);
		FGuildApplicant tmp;
		_ConvertPbToFGuildApplicant(tmp, &a);
		msg.Players.Add(tmp);
	}
	for (int i = 0; i < pb->logs().size(); i++) {
		auto &a = pb->logs().Get(i);
		FGuildLog tmp;
		_ConvertPbToFGuildLog(tmp, &a);
		msg.Logs.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FGuildChatInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPlayerSimpleInfo Player_PB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Emotion;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool NeedLocalize;

	int64 Timestamp;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHATSOURCETYPE SourceType;	//聊天来源类型

};
static void _ConvertPbToFGuildChatInfo(FGuildChatInfo &msg, const msg::GuildChatInfo *pb) {
	_ConvertPbToFCSDTPlayerSimpleInfo(msg.Player_PB, &pb->player());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.Emotion=pb->emotion();
	msg.NeedLocalize=pb->needlocalize();
	msg.Timestamp=pb->timestamp();
	msg.SourceType=(ECHATSOURCETYPE)pb->sourcetype();
}


USTRUCT(BlueprintType)
struct  FGuildApplyInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FCSDTPlayerSimpleInfo Player_PB;	// 玩家基本信息

	int64 Ts;	// 申请时间

};
static void _ConvertPbToFGuildApplyInfo(FGuildApplyInfo &msg, const msg::GuildApplyInfo *pb) {
	_ConvertPbToFCSDTPlayerSimpleInfo(msg.Player_PB, &pb->player());
	msg.Ts=pb->ts();
}


USTRUCT(BlueprintType)
struct  FGuildPlayerRole {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Player_PB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EGUILDROLETYPE Role;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Active;

};
static void _ConvertPbToFGuildPlayerRole(FGuildPlayerRole &msg, const msg::GuildPlayerRole *pb) {
	msg.Player_PB=UTF8_TO_TCHAR(pb->player().c_str());
	msg.Role=(EGUILDROLETYPE)pb->role();
	msg.Active=pb->active();
}


USTRUCT(BlueprintType)
struct  FChestRecord {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Awards;	// 已抽取奖励

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Round;	// 抽了几轮

};
static void _ConvertPbToFChestRecord(FChestRecord &msg, const msg::ChestRecord *pb) {
	for (int i = 0; i < pb->awards().size(); i++) {
		auto &a = pb->awards().Get(i);
		int tmp;
		tmp=a;
		msg.Awards.Add(tmp);
	}
	msg.Round=pb->round();
}


USTRUCT(BlueprintType)
struct  FTeamDesc {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TeamID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTournamentDesc GroupDesc;	// 赛事组key，非赛事房间为空

};
static void _ConvertPbToFTeamDesc(FTeamDesc &msg, const msg::TeamDesc *pb) {
	msg.TeamID=pb->teamid();
	_ConvertPbToFTournamentDesc(msg.GroupDesc, &pb->groupdesc());
}


USTRUCT(BlueprintType)
struct  FOssPlayerData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Data;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString InviteCode;

};
static void _ConvertPbToFOssPlayerData(FOssPlayerData &msg, const msg::OssPlayerData *pb) {
	msg.Data=UTF8_TO_TCHAR(pb->data().c_str());
	msg.InviteCode=UTF8_TO_TCHAR(pb->invitecode().c_str());
}


USTRUCT(BlueprintType)
struct  FActivityGroup {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FActivityGroupData Group;	// 活动组数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FActivityData> Activities;	// 活动组对应活动数据

};
static void _ConvertPbToFActivityGroup(FActivityGroup &msg, const msg::ActivityGroup *pb) {
	_ConvertPbToFActivityGroupData(msg.Group, &pb->group());
	for (int i = 0; i < pb->activities().size(); i++) {
		auto &a = pb->activities().Get(i);
		FActivityData tmp;
		_ConvertPbToFActivityData(tmp, &a);
		msg.Activities.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FScoredMap {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsLike;

};
static void _ConvertPbToFScoredMap(FScoredMap &msg, const msg::ScoredMap *pb) {
	msg.MapID=pb->mapid();
	msg.IsLike=pb->islike();
}


USTRUCT(BlueprintType)
struct  FTransferEvent {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ETransferEventType EType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TokenID;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TokenCount;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Payee;	// 收款方ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString RedHSetField;	// redis HSET field

};
static void _ConvertPbToFTransferEvent(FTransferEvent &msg, const msg::TransferEvent *pb) {
	msg.EType=(ETransferEventType)pb->etype();
	msg.TokenID=pb->tokenid();
	msg.TokenCount=pb->tokencount();
	msg.Payee=UTF8_TO_TCHAR(pb->payee().c_str());
	msg.RedHSetField=UTF8_TO_TCHAR(pb->redhsetfield().c_str());
}


USTRUCT(BlueprintType)
struct  FTransferOP {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PayeeID;	// 收款方ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TokenID;	// 代币ID

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Change;	// 代币变化量（可为负）

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UUID;	// 唯一标识本次兑换的id

};
static void _ConvertPbToFTransferOP(FTransferOP &msg, const msg::TransferOP *pb) {
	msg.PayeeID=UTF8_TO_TCHAR(pb->payeeid().c_str());
	msg.TokenID=pb->tokenid();
	msg.Change=pb->change();
	msg.UUID=UTF8_TO_TCHAR(pb->uuid().c_str());
}


USTRUCT(BlueprintType)
struct  FCSDTBetData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int BetFromAuthor;	// 作者投注

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString AuthorId;	// 作者id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, int> BetFromPlayers;	// 玩家投注

};
static void _ConvertPbToFCSDTBetData(FCSDTBetData &msg, const msg::CSDTBetData *pb) {
	msg.BetFromAuthor=pb->betfromauthor();
	msg.AuthorId=UTF8_TO_TCHAR(pb->authorid().c_str());

    for (auto it = pb->betfromplayers().begin(); it != pb->betfromplayers().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.BetFromPlayers.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSDTTasks {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTTaskItem> Trophy;	// ps4奖杯任务

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FCSDTTaskItem> Achieve;	// 勋章成就任务

};
static void _ConvertPbToFCSDTTasks(FCSDTTasks &msg, const msg::CSDTTasks *pb) {
	for (int i = 0; i < pb->trophy().size(); i++) {
		auto &a = pb->trophy().Get(i);
		FCSDTTaskItem tmp;
		_ConvertPbToFCSDTTaskItem(tmp, &a);
		msg.Trophy.Add(tmp);
	}
	for (int i = 0; i < pb->achieve().size(); i++) {
		auto &a = pb->achieve().Get(i);
		FCSDTTaskItem tmp;
		_ConvertPbToFCSDTTaskItem(tmp, &a);
		msg.Achieve.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FTournamentHistory {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FChampionInfoList> ChampionHistory;	// 赛区与历届冠军列表映射

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FTopRank> TopRankHistory;	// 赛区与上届前八排名

};
static void _ConvertPbToFTournamentHistory(FTournamentHistory &msg, const msg::TournamentHistory *pb) {

    for (auto it = pb->championhistory().begin(); it != pb->championhistory().end(); it++) {
        FChampionInfoList tmp_value;
        _ConvertPbToFChampionInfoList(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.ChampionHistory.Add(tmp_key, tmp_value);
    }

    for (auto it = pb->toprankhistory().begin(); it != pb->toprankhistory().end(); it++) {
        FTopRank tmp_value;
        _ConvertPbToFTopRank(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.TopRankHistory.Add(tmp_key, tmp_value);
    }
}


USTRUCT(BlueprintType)
struct  FCSReqLogin {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString DeviceId;	//设备Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE PlatformType;	//平台类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString OsVersion;	//操作系统版本

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString DeviceType;	//设备型号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ENETTYPE NetType;	//网络类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ELOGINTYPE LoginType;	//登陆类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString LySdkDeviceId;	//龙渊数据采集SDK中的设备Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelId;	//渠道Id(字符串)

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PackageId;	//渠道包Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ApkVersion;	//应用包版本

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Resolution;	//运营商

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	//渠道类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<FString, FString> AuthSDKCode;	//验证SDK code

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SessionId;	//用于客户端游戏中重连服务器

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUserId;	//渠道用户Id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PvpResourceVersion;	//资源版本号

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE PayChannel;	//支付渠道

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ActiveCode;	//激活码

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Language;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ELAUNCHTYPE LaunchType;	// 启动类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Ip;	// ip

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PicUrl;	// 头像URL

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString FengkongDeviceId;	// 风控deviceId

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString GameLanguage;	// 游戏语言

	int64 GamelibVersion;	// 内核版本

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString AdvertisingId;	// 广告id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> PSBlockedUsers;	// playstation 用户的黑名单

	std::string Result;	// authserver验证结果

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ELOGINSOURCE LoginSource;	//登录来源

};
static void _ConvertPbToFCSReqLogin(FCSReqLogin &msg, const msg::CSReqLogin *pb) {
	msg.DeviceId=UTF8_TO_TCHAR(pb->deviceid().c_str());
	msg.PlatformType=(EPLATFORMTYPE)pb->platformtype();
	msg.OsVersion=UTF8_TO_TCHAR(pb->osversion().c_str());
	msg.DeviceType=UTF8_TO_TCHAR(pb->devicetype().c_str());
	msg.NetType=(ENETTYPE)pb->nettype();
	msg.LoginType=(ELOGINTYPE)pb->logintype();
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.LySdkDeviceId=UTF8_TO_TCHAR(pb->lysdkdeviceid().c_str());
	msg.ChannelId=UTF8_TO_TCHAR(pb->channelid().c_str());
	msg.PackageId=UTF8_TO_TCHAR(pb->packageid().c_str());
	msg.ApkVersion=UTF8_TO_TCHAR(pb->apkversion().c_str());
	msg.Resolution=UTF8_TO_TCHAR(pb->resolution().c_str());
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();

    for (auto it = pb->authsdkcode().begin(); it != pb->authsdkcode().end(); it++) {
        FString tmp_value;
        tmp_value=UTF8_TO_TCHAR(it->second.c_str());
        FString tmp_key;
        tmp_key=UTF8_TO_TCHAR(it->first.c_str());
        msg.AuthSDKCode.Add(tmp_key, tmp_value);
    }
	msg.SessionId=UTF8_TO_TCHAR(pb->sessionid().c_str());
	msg.ChannelUserId=UTF8_TO_TCHAR(pb->channeluserid().c_str());
	msg.PvpResourceVersion=UTF8_TO_TCHAR(pb->pvpresourceversion().c_str());
	msg.PayChannel=(ECHANELTYPE)pb->paychannel();
	msg.ActiveCode=UTF8_TO_TCHAR(pb->activecode().c_str());
	msg.Language=UTF8_TO_TCHAR(pb->language().c_str());
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.LaunchType=(ELAUNCHTYPE)pb->launchtype();
	msg.Ip=UTF8_TO_TCHAR(pb->ip().c_str());
	msg.PicUrl=UTF8_TO_TCHAR(pb->picurl().c_str());
	msg.FengkongDeviceId=UTF8_TO_TCHAR(pb->fengkongdeviceid().c_str());
	msg.GameLanguage=UTF8_TO_TCHAR(pb->gamelanguage().c_str());
	msg.GamelibVersion=pb->gamelibversion();
	msg.AdvertisingId=UTF8_TO_TCHAR(pb->advertisingid().c_str());
	for (int i = 0; i < pb->psblockedusers().size(); i++) {
		auto &a = pb->psblockedusers().Get(i);
		FString tmp;
		tmp=UTF8_TO_TCHAR(a.c_str());
		msg.PSBlockedUsers.Add(tmp);
	}
	msg.Result=pb->result();
	msg.LoginSource=(ELOGINSOURCE)pb->loginsource();
}


USTRUCT(BlueprintType)
struct  FLoc {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int X;	//x位置

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Y;	//y位置

};
static void _ConvertPbToFLoc(FLoc &msg, const msg::Loc *pb) {
	msg.X=pb->x();
	msg.Y=pb->y();
}


USTRUCT(BlueprintType)
struct  FGetNumRank {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ERANKTYPE Type;	//排行榜类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;	//国家 如果是腾讯渠道 省份ID

	uint64 TournamentId;	//赛事id

	uint64 ClassId;	//级别id

	uint64 RoundId;	//轮次id 在获取轮次排行或者组内排行才填充

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool SelfRank;	//只拉取自己的名次

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GroupIndex;	//组id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	//玩家渠道类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TargetPlayer;	//指定玩家排名--SelfRank为TRUE并且这个字段不为空 则拉取指定玩家

};
static void _ConvertPbToFGetNumRank(FGetNumRank &msg, const msg::GetNumRank *pb) {
	msg.Type=(ERANKTYPE)pb->type();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());
	msg.TournamentId=pb->tournamentid();
	msg.ClassId=pb->classid();
	msg.RoundId=pb->roundid();
	msg.SelfRank=pb->selfrank();
	msg.GroupIndex=pb->groupindex();
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();
	msg.TargetPlayer=UTF8_TO_TCHAR(pb->targetplayer().c_str());
}


USTRUCT(BlueprintType)
struct  FChessIds {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Ids;

};
static void _ConvertPbToFChessIds(FChessIds &msg, const msg::ChessIds *pb) {
	for (int i = 0; i < pb->ids().size(); i++) {
		auto &a = pb->ids().Get(i);
		int tmp;
		tmp=a;
		msg.Ids.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FPveConsume {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPVECONSUMETYPE Type;	//消耗类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Count;	//数量

};
static void _ConvertPbToFPveConsume(FPveConsume &msg, const msg::PveConsume *pb) {
	msg.Type=(EPVECONSUMETYPE)pb->type();
	msg.Id=pb->id();
	msg.Count=pb->count();
}


USTRUCT(BlueprintType)
struct  FPlayerTeamInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MapKey;	//创意工坊唯一key

};
static void _ConvertPbToFPlayerTeamInfo(FPlayerTeamInfo &msg, const msg::PlayerTeamInfo *pb) {
	msg.MapKey=UTF8_TO_TCHAR(pb->mapkey().c_str());
}


USTRUCT(BlueprintType)
struct  FPveRankRedisInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Caption;	//队长id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TeamName;	// 队伍名

};
static void _ConvertPbToFPveRankRedisInfo(FPveRankRedisInfo &msg, const msg::PveRankRedisInfo *pb) {
	msg.Caption=UTF8_TO_TCHAR(pb->caption().c_str());
	msg.TeamName=UTF8_TO_TCHAR(pb->teamname().c_str());
}


USTRUCT(BlueprintType)
struct  FGmBan {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EFROZEN_TYPE FType;	//封禁类型

	int64 StartTime;	//封禁开始时间

	int64 EndTime;	//封禁结束时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Reason;	//封禁原因

};
static void _ConvertPbToFGmBan(FGmBan &msg, const msg::GmBan *pb) {
	msg.FType=(EFROZEN_TYPE)pb->ftype();
	msg.StartTime=pb->starttime();
	msg.EndTime=pb->endtime();
	msg.Reason=UTF8_TO_TCHAR(pb->reason().c_str());
}


USTRUCT(BlueprintType)
struct  FMentorInviteMsg {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EMENTORSHIP Type;	//邀约类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;	//邀请人

	int64 Ctime;	//创建时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;	//拜师/收徒 内容

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> CompleteTask;	//已经完成的任务 服务器使用

};
static void _ConvertPbToFMentorInviteMsg(FMentorInviteMsg &msg, const msg::MentorInviteMsg *pb) {
	msg.Type=(EMENTORSHIP)pb->type();
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Ctime=pb->ctime();
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	for (int i = 0; i < pb->completetask().size(); i++) {
		auto &a = pb->completetask().Get(i);
		int tmp;
		tmp=a;
		msg.CompleteTask.Add(tmp);
	}
}


USTRUCT(BlueprintType)
struct  FMentorInfo {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EMENTORLEVEL Level;	//师傅等级

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FPupil> Pupils;	//徒弟们

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int InviteTimes;	//邀请次数CSDTBase 这个没用 就不改协议了。。。

	TArray<int64> PunishTime;	//关系解除惩罚冷却时间

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, FCSDTTaskItem> Tasks;	//师傅的成就任务

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GraduateNum;	//毕业玩家数量

};
static void _ConvertPbToFMentorInfo(FMentorInfo &msg, const msg::MentorInfo *pb) {
	msg.Level=(EMENTORLEVEL)pb->level();
	for (int i = 0; i < pb->pupils().size(); i++) {
		auto &a = pb->pupils().Get(i);
		FPupil tmp;
		_ConvertPbToFPupil(tmp, &a);
		msg.Pupils.Add(tmp);
	}
	msg.InviteTimes=pb->invitetimes();
	for (int i = 0; i < pb->punishtime().size(); i++) {
		auto &a = pb->punishtime().Get(i);
		int64 tmp;
		tmp=a;
		msg.PunishTime.Add(tmp);
	}

    for (auto it = pb->tasks().begin(); it != pb->tasks().end(); it++) {
        FCSDTTaskItem tmp_value;
        _ConvertPbToFCSDTTaskItem(tmp_value, &it->second);
        int tmp_key;
        tmp_key=it->first;
        msg.Tasks.Add(tmp_key, tmp_value);
    }
	msg.GraduateNum=pb->graduatenum();
}


USTRUCT(BlueprintType)
struct  FTDUnUse {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDItemId Id1;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDItemId Id2;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDItemId Id3;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDItemGroup ItemGroup1;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FTDItemGroup ItemGroup2;

};
static void _ConvertPbToFTDUnUse(FTDUnUse &msg, const msg::TDUnUse *pb) {
	_ConvertPbToFTDItemId(msg.Id1, &pb->id1());
	_ConvertPbToFTDItemId(msg.Id2, &pb->id2());
	_ConvertPbToFTDItemId(msg.Id3, &pb->id3());
	_ConvertPbToFTDItemGroup(msg.ItemGroup1, &pb->itemgroup1());
	_ConvertPbToFTDItemGroup(msg.ItemGroup2, &pb->itemgroup2());
}


USTRUCT(BlueprintType)
struct  FAddRecommendData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PlayerId;	// 玩家id

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Mmr;	//

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;	//

};
static void _ConvertPbToFAddRecommendData(FAddRecommendData &msg, const msg::AddRecommendData *pb) {
	msg.PlayerId=UTF8_TO_TCHAR(pb->playerid().c_str());
	msg.Mmr=pb->mmr();
	msg.Level=pb->level();
}


USTRUCT(BlueprintType)
struct  FCSDTMentorRecommendPlayer {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PlayerId;

};
static void _ConvertPbToFCSDTMentorRecommendPlayer(FCSDTMentorRecommendPlayer &msg, const msg::CSDTMentorRecommendPlayer *pb) {
	msg.PlayerId=UTF8_TO_TCHAR(pb->playerid().c_str());
}


USTRUCT(BlueprintType)
struct  FPFDTTaskDetail {
	GENERATED_BODY()

	ECONDTYPE CondType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> Para;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Mode;

};
static void _ConvertPbToFPFDTTaskDetail(FPFDTTaskDetail &msg, const msg::PFDTTaskDetail *pb) {
	msg.CondType=(ECONDTYPE)pb->condtype();
	for (int i = 0; i < pb->para().size(); i++) {
		auto &a = pb->para().Get(i);
		int tmp;
		tmp=a;
		msg.Para.Add(tmp);
	}
	msg.Mode=UTF8_TO_TCHAR(pb->mode().c_str());
}


USTRUCT(BlueprintType)
struct  FOBPassThroughData {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EKERNELJSONTYPE Type;	// 类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Round;	//回合数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString PvPPlayerId;	// 战斗玩家数据

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ObPlayerId;	//观战服谁发送得

};
static void _ConvertPbToFOBPassThroughData(FOBPassThroughData &msg, const msg::OBPassThroughData *pb) {
	msg.Type=(EKERNELJSONTYPE)pb->type();
	msg.Round=pb->round();
	msg.PvPPlayerId=UTF8_TO_TCHAR(pb->pvpplayerid().c_str());
	msg.ObPlayerId=UTF8_TO_TCHAR(pb->obplayerid().c_str());
}


USTRUCT(BlueprintType)
struct  FCSNtfPvpChat {
	GENERATED_BODY()

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Content;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Emotion;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Level;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHATTYPE ChatType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Index;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int QuickChat;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString UserName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeadPic;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Country;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TMap<int, int> ShowItems;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool IsWatcher;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Province;

	int64 Timestamp;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EPLATFORMTYPE Platform;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PassportTypeIds;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHANELTYPE ChannelType;	// ps4 Only 额外信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChannelUsrId;	// ps4 Only 额外信息

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool PS4Only;	// ps4 Only 开关

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EUserRestrictType RestrictType;	// 用户限制

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString GuildName;	// 公会名字

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int GuildSign;	// 公会图标

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	ECHATSOURCETYPE SourceType;	// 聊天来源类型

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	EEXCHANGESTATE ExchangeState;	//交易状态

};
static void _ConvertPbToFCSNtfPvpChat(FCSNtfPvpChat &msg, const msg::CSNtfPvpChat *pb) {
	msg.Id=UTF8_TO_TCHAR(pb->id().c_str());
	msg.Content=UTF8_TO_TCHAR(pb->content().c_str());
	msg.Emotion=pb->emotion();
	msg.Level=pb->level();
	msg.ChatType=(ECHATTYPE)pb->chattype();
	msg.Index=pb->index();
	msg.QuickChat=pb->quickchat();
	msg.UserName=UTF8_TO_TCHAR(pb->username().c_str());
	msg.HeadPic=pb->headpic();
	msg.Country=UTF8_TO_TCHAR(pb->country().c_str());

    for (auto it = pb->showitems().begin(); it != pb->showitems().end(); it++) {
        int tmp_value;
        tmp_value=it->second;
        int tmp_key;
        tmp_key=it->first;
        msg.ShowItems.Add(tmp_key, tmp_value);
    }
	msg.IsWatcher=pb->iswatcher();
	msg.Province=pb->province();
	msg.Timestamp=pb->timestamp();
	msg.Platform=(EPLATFORMTYPE)pb->platform();
	for (int i = 0; i < pb->passporttypeids().size(); i++) {
		auto &a = pb->passporttypeids().Get(i);
		int tmp;
		tmp=a;
		msg.PassportTypeIds.Add(tmp);
	}
	msg.ChannelType=(ECHANELTYPE)pb->channeltype();
	msg.ChannelUsrId=UTF8_TO_TCHAR(pb->channelusrid().c_str());
	msg.PS4Only=pb->ps4only();
	msg.RestrictType=(EUserRestrictType)pb->restricttype();
	msg.GuildName=UTF8_TO_TCHAR(pb->guildname().c_str());
	msg.GuildSign=pb->guildsign();
	msg.SourceType=(ECHATSOURCETYPE)pb->sourcetype();
	msg.ExchangeState=(EEXCHANGESTATE)pb->exchangestate();
}


USTRUCT(BlueprintType)
struct  FPlayerObServerInfo {
	GENERATED_BODY()

	uint64 PvpId;	//pvpid

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ObSvrId;	//podid

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ObplayerId;	//登录到观战的pvpserverId

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int PvpSvrId;	//pvpserverid

};
static void _ConvertPbToFPlayerObServerInfo(FPlayerObServerInfo &msg, const msg::PlayerObServerInfo *pb) {
	msg.PvpId=pb->pvpid();
	msg.ObSvrId=pb->obsvrid();
	msg.ObplayerId=UTF8_TO_TCHAR(pb->obplayerid().c_str());
	msg.PvpSvrId=pb->pvpsvrid();
}


