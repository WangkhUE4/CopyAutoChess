// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csprotocol.proto

#include "csprotocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR CSHead::CSHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgid_)*/0
  , /*decltype(_impl_.bodylen_)*/0u
  , /*decltype(_impl_.compress_)*/false
  , /*decltype(_impl_.serverid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSHeadDefaultTypeInternal() {}
  union {
    CSHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSHeadDefaultTypeInternal _CSHead_default_instance_;
PROTOBUF_CONSTEXPR CSReqBody::CSReqBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.heart_)*/nullptr
  , /*decltype(_impl_.login_)*/nullptr
  , /*decltype(_impl_.versioncheck_)*/nullptr
  , /*decltype(_impl_.resourceversioncheck_)*/nullptr
  , /*decltype(_impl_.applyhallserver_)*/nullptr
  , /*decltype(_impl_.getnumrank_)*/nullptr
  , /*decltype(_impl_.worldchat_)*/nullptr
  , /*decltype(_impl_.playersbaseinfo_)*/nullptr
  , /*decltype(_impl_.playerdetailinfo_)*/nullptr
  , /*decltype(_impl_.readmail_)*/nullptr
  , /*decltype(_impl_.getmailaward_)*/nullptr
  , /*decltype(_impl_.buyegg_)*/nullptr
  , /*decltype(_impl_.usernameset_)*/nullptr
  , /*decltype(_impl_.usernamerandom_)*/nullptr
  , /*decltype(_impl_.headpicset_)*/nullptr
  , /*decltype(_impl_.pvp_)*/nullptr
  , /*decltype(_impl_.dresschessplayer_)*/nullptr
  , /*decltype(_impl_.dressscene_)*/nullptr
  , /*decltype(_impl_.pvplogin_)*/nullptr
  , /*decltype(_impl_.pvpend_)*/nullptr
  , /*decltype(_impl_.playerfinish_)*/nullptr
  , /*decltype(_impl_.playerquit_)*/nullptr
  , /*decltype(_impl_.sellitem_)*/nullptr
  , /*decltype(_impl_.getevalaward_)*/nullptr
  , /*decltype(_impl_.usechessplayer_)*/nullptr
  , /*decltype(_impl_.guidreport_)*/nullptr
  , /*decltype(_impl_.getcodeaward_)*/nullptr
  , /*decltype(_impl_.roundreport_)*/nullptr
  , /*decltype(_impl_.loadingprogress_)*/nullptr
  , /*decltype(_impl_.pvpchat_)*/nullptr
  , /*decltype(_impl_.chesscombine_)*/nullptr
  , /*decltype(_impl_.expose_)*/nullptr
  , /*decltype(_impl_.applyorderid_)*/nullptr
  , /*decltype(_impl_.reportorderinfo_)*/nullptr
  , /*decltype(_impl_.setitem_)*/nullptr
  , /*decltype(_impl_.unsetitem_)*/nullptr
  , /*decltype(_impl_.randomitem_)*/nullptr
  , /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_.setchessplayer_)*/nullptr
  , /*decltype(_impl_.unsetchessplayer_)*/nullptr
  , /*decltype(_impl_.getfanslist_)*/nullptr
  , /*decltype(_impl_.followplayer_)*/nullptr
  , /*decltype(_impl_.unfollowplayer_)*/nullptr
  , /*decltype(_impl_.playersstatusinfo_)*/nullptr
  , /*decltype(_impl_.invitejointeam_)*/nullptr
  , /*decltype(_impl_.jointeam_)*/nullptr
  , /*decltype(_impl_.kickoffteamplayer_)*/nullptr
  , /*decltype(_impl_.teammsg_)*/nullptr
  , /*decltype(_impl_.teamready_)*/nullptr
  , /*decltype(_impl_.reportpayresponse_)*/nullptr
  , /*decltype(_impl_.rejectjointeam_)*/nullptr
  , /*decltype(_impl_.shieldchat_)*/nullptr
  , /*decltype(_impl_.buypassportlevel_)*/nullptr
  , /*decltype(_impl_.upgradepassport_)*/nullptr
  , /*decltype(_impl_.getpassportlevelaward_)*/nullptr
  , /*decltype(_impl_.getpassporttaskaward_)*/nullptr
  , /*decltype(_impl_.telbook_)*/nullptr
  , /*decltype(_impl_.activatepassport_)*/nullptr
  , /*decltype(_impl_.rankseasoneval_)*/nullptr
  , /*decltype(_impl_.bindaccount_)*/nullptr
  , /*decltype(_impl_.incadsshowcount_)*/nullptr
  , /*decltype(_impl_.usebonuscard_)*/nullptr
  , /*decltype(_impl_.getseasonaward_)*/nullptr
  , /*decltype(_impl_.getalphaactivityaward_)*/nullptr
  , /*decltype(_impl_.getlanguagedata_)*/nullptr
  , /*decltype(_impl_.getactivityaward_)*/nullptr
  , /*decltype(_impl_.getactivitydata_)*/nullptr
  , /*decltype(_impl_.sendsms_)*/nullptr
  , /*decltype(_impl_.getmeleeaward_)*/nullptr
  , /*decltype(_impl_.addaitoteam_)*/nullptr
  , /*decltype(_impl_.share_)*/nullptr
  , /*decltype(_impl_.skipinterface_)*/nullptr
  , /*decltype(_impl_.teamgame_)*/nullptr
  , /*decltype(_impl_.setteammode_)*/nullptr
  , /*decltype(_impl_.historypvpshowpermission_)*/nullptr
  , /*decltype(_impl_.searchteam_)*/nullptr
  , /*decltype(_impl_.applychat_)*/nullptr
  , /*decltype(_impl_.chatlogin_)*/nullptr
  , /*decltype(_impl_.probenetdelay_)*/nullptr
  , /*decltype(_impl_.geteggs_)*/nullptr
  , /*decltype(_impl_.buygoods_)*/nullptr
  , /*decltype(_impl_.exchangepassportgoods_)*/nullptr
  , /*decltype(_impl_.usepassporttaskcard_)*/nullptr
  , /*decltype(_impl_.openrandchest_)*/nullptr
  , /*decltype(_impl_.egglottery_)*/nullptr
  , /*decltype(_impl_.querydiamondbalance_)*/nullptr
  , /*decltype(_impl_.useitem_)*/nullptr
  , /*decltype(_impl_.useexperiencecard_)*/nullptr
  , /*decltype(_impl_.randtargetitem_)*/nullptr
  , /*decltype(_impl_.addblacklist_)*/nullptr
  , /*decltype(_impl_.removeblacklist_)*/nullptr
  , /*decltype(_impl_.reportplayerbirth_)*/nullptr
  , /*decltype(_impl_.reportinfoinput_)*/nullptr
  , /*decltype(_impl_.sendverificationcode_)*/nullptr
  , /*decltype(_impl_.bindphonenumber_)*/nullptr
  , /*decltype(_impl_.worldinvite_)*/nullptr
  , /*decltype(_impl_.removeexpireitem_)*/nullptr
  , /*decltype(_impl_.getmallgoods_)*/nullptr
  , /*decltype(_impl_.buymallgoods_)*/nullptr
  , /*decltype(_impl_.bindsharingcode_)*/nullptr
  , /*decltype(_impl_.wxblessbag_)*/nullptr
  , /*decltype(_impl_.updatefriendsingame_)*/nullptr
  , /*decltype(_impl_.sharereward_)*/nullptr
  , /*decltype(_impl_.allfightinfo_)*/nullptr
  , /*decltype(_impl_.getoldplayer_)*/nullptr
  , /*decltype(_impl_.bindoldplayer_)*/nullptr
  , /*decltype(_impl_.sendverificationcodewithcheckredis_)*/nullptr
  , /*decltype(_impl_.reportsetting_)*/nullptr
  , /*decltype(_impl_.antidata_)*/nullptr
  , /*decltype(_impl_.tlogdata_)*/nullptr
  , /*decltype(_impl_.daysign_)*/nullptr
  , /*decltype(_impl_.dayfitavoid_)*/nullptr
  , /*decltype(_impl_.sharecountaward_)*/nullptr
  , /*decltype(_impl_.actitemexch_)*/nullptr
  , /*decltype(_impl_.realationstar_)*/nullptr
  , /*decltype(_impl_.getrealationstarinvitesucc_)*/nullptr
  , /*decltype(_impl_.getrealationstar_)*/nullptr
  , /*decltype(_impl_.reqactrecord_)*/nullptr
  , /*decltype(_impl_.joinvoiceteam_)*/nullptr
  , /*decltype(_impl_.joinvoicepvp_)*/nullptr
  , /*decltype(_impl_.joinvoicecamp_)*/nullptr
  , /*decltype(_impl_.usercountryset_)*/nullptr
  , /*decltype(_impl_.offlineinvitejointeam_)*/nullptr
  , /*decltype(_impl_.observe_)*/nullptr
  , /*decltype(_impl_.getrecommendpvp_)*/nullptr
  , /*decltype(_impl_.observelogin_)*/nullptr
  , /*decltype(_impl_.quitobserve_)*/nullptr
  , /*decltype(_impl_.getobserveinfo_)*/nullptr
  , /*decltype(_impl_.freeflow_)*/nullptr
  , /*decltype(_impl_.setpushtoken_)*/nullptr
  , /*decltype(_impl_.tlogevent_)*/nullptr
  , /*decltype(_impl_.wxvvipaward_)*/nullptr
  , /*decltype(_impl_.relationstarwx_)*/nullptr
  , /*decltype(_impl_.sendwxredpacket_)*/nullptr
  , /*decltype(_impl_.recvwxredpacket_)*/nullptr
  , /*decltype(_impl_.wxredpktlike_)*/nullptr
  , /*decltype(_impl_.wxredpktrank_)*/nullptr
  , /*decltype(_impl_.setobserveprivilege_)*/nullptr
  , /*decltype(_impl_.presetfastchat_)*/nullptr
  , /*decltype(_impl_.changeslotteam_)*/nullptr
  , /*decltype(_impl_.changesubmodeteam_)*/nullptr
  , /*decltype(_impl_.confirmchangeslotteam_)*/nullptr
  , /*decltype(_impl_.pvproundend_)*/nullptr
  , /*decltype(_impl_.observechatlogin_)*/nullptr
  , /*decltype(_impl_.pvpconfirm_)*/nullptr
  , /*decltype(_impl_.activitypicshare_)*/nullptr
  , /*decltype(_impl_.bindoldbusinessplayer_)*/nullptr
  , /*decltype(_impl_.translate_)*/nullptr
  , /*decltype(_impl_.submitquestionnaire_)*/nullptr
  , /*decltype(_impl_.cancelchangeslot_)*/nullptr
  , /*decltype(_impl_.setchessskin_)*/nullptr
  , /*decltype(_impl_.unsetchessskin_)*/nullptr
  , /*decltype(_impl_.compose_)*/nullptr
  , /*decltype(_impl_.offhelpreddot_)*/nullptr
  , /*decltype(_impl_.video_)*/nullptr
  , /*decltype(_impl_.changelanguage_)*/nullptr
  , /*decltype(_impl_.videoplay_)*/nullptr
  , /*decltype(_impl_.setprovince_)*/nullptr
  , /*decltype(_impl_.longyuanvoice_)*/nullptr
  , /*decltype(_impl_.enrolltournament_)*/nullptr
  , /*decltype(_impl_.jointournamentroom_)*/nullptr
  , /*decltype(_impl_.tournamentpointaward_)*/nullptr
  , /*decltype(_impl_.dealwebmail_)*/nullptr
  , /*decltype(_impl_.getenrollplayers_)*/nullptr
  , /*decltype(_impl_.challengeagain_)*/nullptr
  , /*decltype(_impl_.historychat_)*/nullptr
  , /*decltype(_impl_.setfriendinvisible_)*/nullptr
  , /*decltype(_impl_.getobserveaward_)*/nullptr
  , /*decltype(_impl_.inviteobserve_)*/nullptr
  , /*decltype(_impl_.rejectobserve_)*/nullptr
  , /*decltype(_impl_.gettxplayer_)*/nullptr
  , /*decltype(_impl_.choosetxplayer_)*/nullptr
  , /*decltype(_impl_.getthirdpvpinfo_)*/nullptr
  , /*decltype(_impl_.markplayerguide_)*/nullptr
  , /*decltype(_impl_.markchessskinclicked_)*/nullptr
  , /*decltype(_impl_.recruitinviteplayer_)*/nullptr
  , /*decltype(_impl_.recruitbindinviter_)*/nullptr
  , /*decltype(_impl_.queryps4entitlements_)*/nullptr
  , /*decltype(_impl_.actdaysign_)*/nullptr
  , /*decltype(_impl_.havethirdpvpinfo_)*/nullptr
  , /*decltype(_impl_.activitymall_)*/nullptr
  , /*decltype(_impl_.psonly_)*/nullptr
  , /*decltype(_impl_.changechanneltype_)*/nullptr
  , /*decltype(_impl_.customcardopt_)*/nullptr
  , /*decltype(_impl_.staticsreport_)*/nullptr
  , /*decltype(_impl_.championhistory_)*/nullptr
  , /*decltype(_impl_.tournamentlasttoprank_)*/nullptr
  , /*decltype(_impl_.bigwinnerexpandmatch_)*/nullptr
  , /*decltype(_impl_.bigwinnerdailyaward_)*/nullptr
  , /*decltype(_impl_.bigwinnerscorehistory_)*/nullptr
  , /*decltype(_impl_.smeltitem_)*/nullptr
  , /*decltype(_impl_.pveuptalentlevel_)*/nullptr
  , /*decltype(_impl_.luckyaward_)*/nullptr
  , /*decltype(_impl_.applychannel_)*/nullptr
  , /*decltype(_impl_.teamop_)*/nullptr
  , /*decltype(_impl_.obteaminfo_)*/nullptr
  , /*decltype(_impl_.headiconurl_)*/nullptr
  , /*decltype(_impl_.getpvpservergroup_)*/nullptr
  , /*decltype(_impl_.reportpvpinfo_)*/nullptr
  , /*decltype(_impl_.chooseplayer_)*/nullptr
  , /*decltype(_impl_.pingtest_)*/nullptr
  , /*decltype(_impl_.reportregioninfo_)*/nullptr
  , /*decltype(_impl_.recalledplaeyr_)*/nullptr
  , /*decltype(_impl_.weblogin_)*/nullptr
  , /*decltype(_impl_.invitecodereset_)*/nullptr
  , /*decltype(_impl_.recallreward_)*/nullptr
  , /*decltype(_impl_.switchtocommonmatch_)*/nullptr
  , /*decltype(_impl_.switchmodeinteam_)*/nullptr
  , /*decltype(_impl_.gettnroomstate_)*/nullptr
  , /*decltype(_impl_.workshopmatch_)*/nullptr
  , /*decltype(_impl_.buyworkshopticket_)*/nullptr
  , /*decltype(_impl_.favouriteworkshopmap_)*/nullptr
  , /*decltype(_impl_.shortcutmapsop_)*/nullptr
  , /*decltype(_impl_.playerstournamentinfo_)*/nullptr
  , /*decltype(_impl_.scoreworkshopmap_)*/nullptr
  , /*decltype(_impl_.mapsvisitedbyfriends_)*/nullptr
  , /*decltype(_impl_.verifyrealname_)*/nullptr
  , /*decltype(_impl_.fakepay_)*/nullptr
  , /*decltype(_impl_.guildcreate_)*/nullptr
  , /*decltype(_impl_.guildapply_)*/nullptr
  , /*decltype(_impl_.guildhome_)*/nullptr
  , /*decltype(_impl_.guildinfo_)*/nullptr
  , /*decltype(_impl_.guildapprove_)*/nullptr
  , /*decltype(_impl_.guildrole_)*/nullptr
  , /*decltype(_impl_.guildmodify_)*/nullptr
  , /*decltype(_impl_.guildkickoff_)*/nullptr
  , /*decltype(_impl_.guilddismiss_)*/nullptr
  , /*decltype(_impl_.guildexit_)*/nullptr
  , /*decltype(_impl_.guildchat_)*/nullptr
  , /*decltype(_impl_.guildlist_)*/nullptr
  , /*decltype(_impl_.guildrecommendplayers_)*/nullptr
  , /*decltype(_impl_.guildinvitelist_)*/nullptr
  , /*decltype(_impl_.guildinvite_)*/nullptr
  , /*decltype(_impl_.guildresign_)*/nullptr
  , /*decltype(_impl_.guildrejectinvite_)*/nullptr
  , /*decltype(_impl_.getvngcommentaward_)*/nullptr
  , /*decltype(_impl_.levelupchest_)*/nullptr
  , /*decltype(_impl_.watchad_)*/nullptr
  , /*decltype(_impl_.pstournamentroom_)*/nullptr
  , /*decltype(_impl_.getadcumulateaward_)*/nullptr
  , /*decltype(_impl_.setmessengerpos_)*/nullptr
  , /*decltype(_impl_.updateantiaddictiontime_)*/nullptr
  , /*decltype(_impl_.cancelreconnect_)*/nullptr
  , /*decltype(_impl_.reconnect_)*/nullptr
  , /*decltype(_impl_.passthrough_)*/nullptr
  , /*decltype(_impl_.visitplayer_)*/nullptr
  , /*decltype(_impl_.leavegameearly_)*/nullptr
  , /*decltype(_impl_.gdcommonbin_)*/nullptr
  , /*decltype(_impl_.gdbindata_)*/nullptr
  , /*decltype(_impl_.autobattleop_)*/nullptr
  , /*decltype(_impl_.restrictuser_)*/nullptr
  , /*decltype(_impl_.equipselectrate_)*/nullptr
  , /*decltype(_impl_.reportabsent_)*/nullptr
  , /*decltype(_impl_.recommendweek_)*/nullptr
  , /*decltype(_impl_.recommendofficial_)*/nullptr
  , /*decltype(_impl_.recommendlatest_)*/nullptr
  , /*decltype(_impl_.recommendhistory_)*/nullptr
  , /*decltype(_impl_.recommendcollect_)*/nullptr
  , /*decltype(_impl_.recommendset_)*/nullptr
  , /*decltype(_impl_.recommendgetcollection_)*/nullptr
  , /*decltype(_impl_.recommendequip_)*/nullptr
  , /*decltype(_impl_.logincancel_)*/nullptr
  , /*decltype(_impl_.convertdebris_)*/nullptr
  , /*decltype(_impl_.protectioncard_)*/nullptr
  , /*decltype(_impl_.usepassportcard_)*/nullptr
  , /*decltype(_impl_.setmedal_)*/nullptr
  , /*decltype(_impl_.unsetmedal_)*/nullptr
  , /*decltype(_impl_.playermedals_)*/nullptr
  , /*decltype(_impl_.updatehotdot_)*/nullptr
  , /*decltype(_impl_.queryhotdot_)*/nullptr
  , /*decltype(_impl_.setcache_)*/nullptr
  , /*decltype(_impl_.getcache_)*/nullptr
  , /*decltype(_impl_.buychallengecount_)*/nullptr
  , /*decltype(_impl_.getpverank_)*/nullptr
  , /*decltype(_impl_.authaccount_)*/nullptr
  , /*decltype(_impl_.unbindaccount_)*/nullptr
  , /*decltype(_impl_.bagtoitem_)*/nullptr
  , /*decltype(_impl_.identifyitem_)*/nullptr
  , /*decltype(_impl_.insetitemaffix_)*/nullptr
  , /*decltype(_impl_.unsetitemaffix_)*/nullptr
  , /*decltype(_impl_.setdefaultattributes_)*/nullptr
  , /*decltype(_impl_.checkcancel_)*/nullptr
  , /*decltype(_impl_.cancelaccount_)*/nullptr
  , /*decltype(_impl_.oauthapp_)*/nullptr
  , /*decltype(_impl_.getselfnumrankdata_)*/nullptr
  , /*decltype(_impl_.updatecardgroup_)*/nullptr
  , /*decltype(_impl_.updatecardgroupname_)*/nullptr
  , /*decltype(_impl_.buypvebuff_)*/nullptr
  , /*decltype(_impl_.setcardgroup_)*/nullptr
  , /*decltype(_impl_.buypvechesstemplate_)*/nullptr
  , /*decltype(_impl_.pveunlockchesstemplate_)*/nullptr
  , /*decltype(_impl_.pvesetteamdebuff_)*/nullptr
  , /*decltype(_impl_.chosecardgroup_)*/nullptr
  , /*decltype(_impl_.removeovertimebuff_)*/nullptr
  , /*decltype(_impl_.updatenewcardgroupsign_)*/nullptr
  , /*decltype(_impl_.tdgetonhookaward_)*/nullptr
  , /*decltype(_impl_.tddraw_)*/nullptr
  , /*decltype(_impl_.tdbuycard_)*/nullptr
  , /*decltype(_impl_.tdsetcardgroup_)*/nullptr
  , /*decltype(_impl_.tdlevelup_)*/nullptr
  , /*decltype(_impl_.tdequip_)*/nullptr
  , /*decltype(_impl_.mentorupdatesetting_)*/nullptr
  , /*decltype(_impl_.mentorinvite_)*/nullptr
  , /*decltype(_impl_.mentorconfirminvite_)*/nullptr
  , /*decltype(_impl_.mentorrecommendlist_)*/nullptr
  , /*decltype(_impl_.mentorgettaskaward_)*/nullptr
  , /*decltype(_impl_.mentorgraduate_)*/nullptr
  , /*decltype(_impl_.mentorrelieverelation_)*/nullptr
  , /*decltype(_impl_.getmentorinfo_)*/nullptr
  , /*decltype(_impl_.mentorgetinvitemsg_)*/nullptr
  , /*decltype(_impl_.updatecardgroupbetter_)*/nullptr
  , /*decltype(_impl_.updatecardgroupsetting_)*/nullptr
  , /*decltype(_impl_.setcontent_)*/nullptr
  , /*decltype(_impl_.getbalance_)*/nullptr
  , /*decltype(_impl_.rechargebalance_)*/nullptr
  , /*decltype(_impl_.withdrawbalance_)*/nullptr
  , /*decltype(_impl_.personalrecommendmall_)*/nullptr
  , /*decltype(_impl_.getmedalchestaward_)*/nullptr
  , /*decltype(_impl_.setitemautouse_)*/nullptr
  , /*decltype(_impl_.seq_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqBodyDefaultTypeInternal() {}
  union {
    CSReqBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqBodyDefaultTypeInternal _CSReqBody_default_instance_;
PROTOBUF_CONSTEXPR CSRspBody::CSRspBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.heart_)*/nullptr
  , /*decltype(_impl_.login_)*/nullptr
  , /*decltype(_impl_.versioncheck_)*/nullptr
  , /*decltype(_impl_.resourceversioncheck_)*/nullptr
  , /*decltype(_impl_.applyhallserver_)*/nullptr
  , /*decltype(_impl_.getnumrank_)*/nullptr
  , /*decltype(_impl_.worldchat_)*/nullptr
  , /*decltype(_impl_.playersbaseinfo_)*/nullptr
  , /*decltype(_impl_.playerdetailinfo_)*/nullptr
  , /*decltype(_impl_.readmail_)*/nullptr
  , /*decltype(_impl_.getmailaward_)*/nullptr
  , /*decltype(_impl_.buyegg_)*/nullptr
  , /*decltype(_impl_.usernameset_)*/nullptr
  , /*decltype(_impl_.usernamerandom_)*/nullptr
  , /*decltype(_impl_.headpicset_)*/nullptr
  , /*decltype(_impl_.dresschessplayer_)*/nullptr
  , /*decltype(_impl_.dressscene_)*/nullptr
  , /*decltype(_impl_.pvplogin_)*/nullptr
  , /*decltype(_impl_.pvpend_)*/nullptr
  , /*decltype(_impl_.playerfinish_)*/nullptr
  , /*decltype(_impl_.playerquit_)*/nullptr
  , /*decltype(_impl_.sellitem_)*/nullptr
  , /*decltype(_impl_.getevalaward_)*/nullptr
  , /*decltype(_impl_.usechessplayer_)*/nullptr
  , /*decltype(_impl_.guidreport_)*/nullptr
  , /*decltype(_impl_.getcodeaward_)*/nullptr
  , /*decltype(_impl_.roundreport_)*/nullptr
  , /*decltype(_impl_.loadingprogress_)*/nullptr
  , /*decltype(_impl_.pvpchat_)*/nullptr
  , /*decltype(_impl_.chesscombine_)*/nullptr
  , /*decltype(_impl_.expose_)*/nullptr
  , /*decltype(_impl_.applyorderid_)*/nullptr
  , /*decltype(_impl_.reportorderinfo_)*/nullptr
  , /*decltype(_impl_.setitem_)*/nullptr
  , /*decltype(_impl_.unsetitem_)*/nullptr
  , /*decltype(_impl_.randomitem_)*/nullptr
  , /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_.setchessplayer_)*/nullptr
  , /*decltype(_impl_.unsetchessplayer_)*/nullptr
  , /*decltype(_impl_.getfanslist_)*/nullptr
  , /*decltype(_impl_.followplayer_)*/nullptr
  , /*decltype(_impl_.unfollowplayer_)*/nullptr
  , /*decltype(_impl_.playersstatusinfo_)*/nullptr
  , /*decltype(_impl_.invitejointeam_)*/nullptr
  , /*decltype(_impl_.jointeam_)*/nullptr
  , /*decltype(_impl_.reportpayresponse_)*/nullptr
  , /*decltype(_impl_.rejectjointeam_)*/nullptr
  , /*decltype(_impl_.shieldchat_)*/nullptr
  , /*decltype(_impl_.buypassportlevel_)*/nullptr
  , /*decltype(_impl_.upgradepassport_)*/nullptr
  , /*decltype(_impl_.getpassportlevelaward_)*/nullptr
  , /*decltype(_impl_.getpassporttaskaward_)*/nullptr
  , /*decltype(_impl_.telbook_)*/nullptr
  , /*decltype(_impl_.activatepassport_)*/nullptr
  , /*decltype(_impl_.rankseasoneval_)*/nullptr
  , /*decltype(_impl_.bindaccount_)*/nullptr
  , /*decltype(_impl_.incadsshowcount_)*/nullptr
  , /*decltype(_impl_.usebonuscard_)*/nullptr
  , /*decltype(_impl_.getseasonaward_)*/nullptr
  , /*decltype(_impl_.getalphaactivityaward_)*/nullptr
  , /*decltype(_impl_.getlanguagedata_)*/nullptr
  , /*decltype(_impl_.getactivityaward_)*/nullptr
  , /*decltype(_impl_.getactivitydata_)*/nullptr
  , /*decltype(_impl_.sendsms_)*/nullptr
  , /*decltype(_impl_.getmeleeaward_)*/nullptr
  , /*decltype(_impl_.addaitoteam_)*/nullptr
  , /*decltype(_impl_.share_)*/nullptr
  , /*decltype(_impl_.skipinterface_)*/nullptr
  , /*decltype(_impl_.teamgame_)*/nullptr
  , /*decltype(_impl_.setteammode_)*/nullptr
  , /*decltype(_impl_.historypvpshowpermission_)*/nullptr
  , /*decltype(_impl_.searchteam_)*/nullptr
  , /*decltype(_impl_.applychat_)*/nullptr
  , /*decltype(_impl_.chatlogin_)*/nullptr
  , /*decltype(_impl_.probenetdelay_)*/nullptr
  , /*decltype(_impl_.geteggs_)*/nullptr
  , /*decltype(_impl_.buygoods_)*/nullptr
  , /*decltype(_impl_.exchangepassportgoods_)*/nullptr
  , /*decltype(_impl_.usepassporttaskcard_)*/nullptr
  , /*decltype(_impl_.openrandchest_)*/nullptr
  , /*decltype(_impl_.egglottery_)*/nullptr
  , /*decltype(_impl_.querydiamondbalance_)*/nullptr
  , /*decltype(_impl_.useitem_)*/nullptr
  , /*decltype(_impl_.useexperiencecard_)*/nullptr
  , /*decltype(_impl_.randtargetitem_)*/nullptr
  , /*decltype(_impl_.addblacklist_)*/nullptr
  , /*decltype(_impl_.removeblacklist_)*/nullptr
  , /*decltype(_impl_.reportplayerbirth_)*/nullptr
  , /*decltype(_impl_.reportinfoinput_)*/nullptr
  , /*decltype(_impl_.sendverificationcode_)*/nullptr
  , /*decltype(_impl_.bindphonenumber_)*/nullptr
  , /*decltype(_impl_.worldinvite_)*/nullptr
  , /*decltype(_impl_.removeexpireitem_)*/nullptr
  , /*decltype(_impl_.getmallgoods_)*/nullptr
  , /*decltype(_impl_.buymallgoods_)*/nullptr
  , /*decltype(_impl_.bindsharingcode_)*/nullptr
  , /*decltype(_impl_.wxblessbag_)*/nullptr
  , /*decltype(_impl_.updatefriendsingame_)*/nullptr
  , /*decltype(_impl_.sharereward_)*/nullptr
  , /*decltype(_impl_.allfightinfo_)*/nullptr
  , /*decltype(_impl_.getoldplayer_)*/nullptr
  , /*decltype(_impl_.bindoldplayer_)*/nullptr
  , /*decltype(_impl_.sendverificationcodewithcheckredis_)*/nullptr
  , /*decltype(_impl_.reportsetting_)*/nullptr
  , /*decltype(_impl_.antidata_)*/nullptr
  , /*decltype(_impl_.tlogdata_)*/nullptr
  , /*decltype(_impl_.daysign_)*/nullptr
  , /*decltype(_impl_.dayfitavoid_)*/nullptr
  , /*decltype(_impl_.sharecountaward_)*/nullptr
  , /*decltype(_impl_.realationstar_)*/nullptr
  , /*decltype(_impl_.getrealationstarinvitesucc_)*/nullptr
  , /*decltype(_impl_.getrealationstar_)*/nullptr
  , /*decltype(_impl_.rspactrecord_)*/nullptr
  , /*decltype(_impl_.joinvoiceteam_)*/nullptr
  , /*decltype(_impl_.joinvoicepvp_)*/nullptr
  , /*decltype(_impl_.joinvoicecamp_)*/nullptr
  , /*decltype(_impl_.usercountryset_)*/nullptr
  , /*decltype(_impl_.observe_)*/nullptr
  , /*decltype(_impl_.getrecommendpvp_)*/nullptr
  , /*decltype(_impl_.observelogin_)*/nullptr
  , /*decltype(_impl_.quitobserve_)*/nullptr
  , /*decltype(_impl_.getobserveinfo_)*/nullptr
  , /*decltype(_impl_.freeflow_)*/nullptr
  , /*decltype(_impl_.setpushtoken_)*/nullptr
  , /*decltype(_impl_.tlogevent_)*/nullptr
  , /*decltype(_impl_.wxvvipaward_)*/nullptr
  , /*decltype(_impl_.relationstarwx_)*/nullptr
  , /*decltype(_impl_.sendwxredpacket_)*/nullptr
  , /*decltype(_impl_.recvwxredpacket_)*/nullptr
  , /*decltype(_impl_.wxredpktlike_)*/nullptr
  , /*decltype(_impl_.wxredpktrank_)*/nullptr
  , /*decltype(_impl_.setobserveprivilege_)*/nullptr
  , /*decltype(_impl_.presetfastchat_)*/nullptr
  , /*decltype(_impl_.changeslotteam_)*/nullptr
  , /*decltype(_impl_.changesubmodeteam_)*/nullptr
  , /*decltype(_impl_.confirmchangeslotteam_)*/nullptr
  , /*decltype(_impl_.pvproundend_)*/nullptr
  , /*decltype(_impl_.pvp_)*/nullptr
  , /*decltype(_impl_.teamready_)*/nullptr
  , /*decltype(_impl_.bindoldbusinessplayer_)*/nullptr
  , /*decltype(_impl_.translate_)*/nullptr
  , /*decltype(_impl_.submitquestionnaire_)*/nullptr
  , /*decltype(_impl_.cancelchangeslot_)*/nullptr
  , /*decltype(_impl_.setchessskin_)*/nullptr
  , /*decltype(_impl_.unsetchessskin_)*/nullptr
  , /*decltype(_impl_.compose_)*/nullptr
  , /*decltype(_impl_.video_)*/nullptr
  , /*decltype(_impl_.offhelpreddot_)*/nullptr
  , /*decltype(_impl_.changelanguage_)*/nullptr
  , /*decltype(_impl_.setprovince_)*/nullptr
  , /*decltype(_impl_.longyuanvoice_)*/nullptr
  , /*decltype(_impl_.enrolltournament_)*/nullptr
  , /*decltype(_impl_.jointournamentroom_)*/nullptr
  , /*decltype(_impl_.tournamentpointaward_)*/nullptr
  , /*decltype(_impl_.getenrollplayers_)*/nullptr
  , /*decltype(_impl_.dealwebmail_)*/nullptr
  , /*decltype(_impl_.challengeagain_)*/nullptr
  , /*decltype(_impl_.historychat_)*/nullptr
  , /*decltype(_impl_.setfriendinvisible_)*/nullptr
  , /*decltype(_impl_.getobserveaward_)*/nullptr
  , /*decltype(_impl_.inviteobserve_)*/nullptr
  , /*decltype(_impl_.rejectobserve_)*/nullptr
  , /*decltype(_impl_.gettxplayer_)*/nullptr
  , /*decltype(_impl_.getthirdpvpinfo_)*/nullptr
  , /*decltype(_impl_.markplayerguide_)*/nullptr
  , /*decltype(_impl_.chessskinclicked_)*/nullptr
  , /*decltype(_impl_.queryps4entitlements_)*/nullptr
  , /*decltype(_impl_.actdaysign_)*/nullptr
  , /*decltype(_impl_.havethirdpvpinfo_)*/nullptr
  , /*decltype(_impl_.activitymall_)*/nullptr
  , /*decltype(_impl_.psonly_)*/nullptr
  , /*decltype(_impl_.changechanneltype_)*/nullptr
  , /*decltype(_impl_.customcardopt_)*/nullptr
  , /*decltype(_impl_.championhistory_)*/nullptr
  , /*decltype(_impl_.tournamentlasttoprank_)*/nullptr
  , /*decltype(_impl_.bigwinnerdailyaward_)*/nullptr
  , /*decltype(_impl_.bigwinnerscorehistory_)*/nullptr
  , /*decltype(_impl_.smeltitem_)*/nullptr
  , /*decltype(_impl_.pveuptalentlevel_)*/nullptr
  , /*decltype(_impl_.luckyaward_)*/nullptr
  , /*decltype(_impl_.applychannel_)*/nullptr
  , /*decltype(_impl_.obteaminfo_)*/nullptr
  , /*decltype(_impl_.getpvpservergroup_)*/nullptr
  , /*decltype(_impl_.reportpvpinfo_)*/nullptr
  , /*decltype(_impl_.chooseplayer_)*/nullptr
  , /*decltype(_impl_.pingtest_)*/nullptr
  , /*decltype(_impl_.reportregioninfo_)*/nullptr
  , /*decltype(_impl_.recalledplaeyr_)*/nullptr
  , /*decltype(_impl_.weblogin_)*/nullptr
  , /*decltype(_impl_.invitecodereset_)*/nullptr
  , /*decltype(_impl_.recallreward_)*/nullptr
  , /*decltype(_impl_.switchtocommonmatch_)*/nullptr
  , /*decltype(_impl_.switchmodeinteam_)*/nullptr
  , /*decltype(_impl_.gettnroomstate_)*/nullptr
  , /*decltype(_impl_.workshopmatch_)*/nullptr
  , /*decltype(_impl_.buyworkshopticket_)*/nullptr
  , /*decltype(_impl_.favouriteworkshopmap_)*/nullptr
  , /*decltype(_impl_.shortcutmapsop_)*/nullptr
  , /*decltype(_impl_.playerstournamentinfo_)*/nullptr
  , /*decltype(_impl_.scoreworkshopmap_)*/nullptr
  , /*decltype(_impl_.mapsvisitedbyfriends_)*/nullptr
  , /*decltype(_impl_.verifyrealname_)*/nullptr
  , /*decltype(_impl_.fakepay_)*/nullptr
  , /*decltype(_impl_.guildcreate_)*/nullptr
  , /*decltype(_impl_.guildapply_)*/nullptr
  , /*decltype(_impl_.guildhome_)*/nullptr
  , /*decltype(_impl_.guildinfo_)*/nullptr
  , /*decltype(_impl_.guildapprove_)*/nullptr
  , /*decltype(_impl_.guildrole_)*/nullptr
  , /*decltype(_impl_.guildmodify_)*/nullptr
  , /*decltype(_impl_.guildkickoff_)*/nullptr
  , /*decltype(_impl_.guilddismiss_)*/nullptr
  , /*decltype(_impl_.guildexit_)*/nullptr
  , /*decltype(_impl_.guildchat_)*/nullptr
  , /*decltype(_impl_.guildlist_)*/nullptr
  , /*decltype(_impl_.guildrecommendplayers_)*/nullptr
  , /*decltype(_impl_.guildinvitelist_)*/nullptr
  , /*decltype(_impl_.guildinvite_)*/nullptr
  , /*decltype(_impl_.guildrejectinvite_)*/nullptr
  , /*decltype(_impl_.getvngcommentaward_)*/nullptr
  , /*decltype(_impl_.levelupchest_)*/nullptr
  , /*decltype(_impl_.watchad_)*/nullptr
  , /*decltype(_impl_.pstournamentroom_)*/nullptr
  , /*decltype(_impl_.getadcumulateaward_)*/nullptr
  , /*decltype(_impl_.setmessengerpos_)*/nullptr
  , /*decltype(_impl_.antiaddictiontime_)*/nullptr
  , /*decltype(_impl_.cancelreconnect_)*/nullptr
  , /*decltype(_impl_.reconnect_)*/nullptr
  , /*decltype(_impl_.passthrough_)*/nullptr
  , /*decltype(_impl_.visitplayer_)*/nullptr
  , /*decltype(_impl_.leavegameearly_)*/nullptr
  , /*decltype(_impl_.gdcommonbin_)*/nullptr
  , /*decltype(_impl_.gdbindata_)*/nullptr
  , /*decltype(_impl_.battlecampresult_)*/nullptr
  , /*decltype(_impl_.autobattleop_)*/nullptr
  , /*decltype(_impl_.restrictuser_)*/nullptr
  , /*decltype(_impl_.equipselectrate_)*/nullptr
  , /*decltype(_impl_.reportabsent_)*/nullptr
  , /*decltype(_impl_.recommendweek_)*/nullptr
  , /*decltype(_impl_.recommendofficial_)*/nullptr
  , /*decltype(_impl_.recommendlatest_)*/nullptr
  , /*decltype(_impl_.recommendhistory_)*/nullptr
  , /*decltype(_impl_.recommendcollect_)*/nullptr
  , /*decltype(_impl_.recommendset_)*/nullptr
  , /*decltype(_impl_.recommendgetcollection_)*/nullptr
  , /*decltype(_impl_.recommendequip_)*/nullptr
  , /*decltype(_impl_.logincancel_)*/nullptr
  , /*decltype(_impl_.convertdebris_)*/nullptr
  , /*decltype(_impl_.protectioncard_)*/nullptr
  , /*decltype(_impl_.usepassportcard_)*/nullptr
  , /*decltype(_impl_.setmedal_)*/nullptr
  , /*decltype(_impl_.unsetmedal_)*/nullptr
  , /*decltype(_impl_.playermedals_)*/nullptr
  , /*decltype(_impl_.updatehotdot_)*/nullptr
  , /*decltype(_impl_.queryhotdot_)*/nullptr
  , /*decltype(_impl_.setcache_)*/nullptr
  , /*decltype(_impl_.getcache_)*/nullptr
  , /*decltype(_impl_.buychallengecount_)*/nullptr
  , /*decltype(_impl_.getpverank_)*/nullptr
  , /*decltype(_impl_.authaccount_)*/nullptr
  , /*decltype(_impl_.unbindaccount_)*/nullptr
  , /*decltype(_impl_.bagtoitem_)*/nullptr
  , /*decltype(_impl_.identifyitem_)*/nullptr
  , /*decltype(_impl_.insetitemaffix_)*/nullptr
  , /*decltype(_impl_.unsetitemaffix_)*/nullptr
  , /*decltype(_impl_.setdefaultattributes_)*/nullptr
  , /*decltype(_impl_.checkcancel_)*/nullptr
  , /*decltype(_impl_.cancelaccount_)*/nullptr
  , /*decltype(_impl_.oauthapp_)*/nullptr
  , /*decltype(_impl_.selfnumrankdata_)*/nullptr
  , /*decltype(_impl_.updatecardgroup_)*/nullptr
  , /*decltype(_impl_.updatecardgroupname_)*/nullptr
  , /*decltype(_impl_.buypvebuff_)*/nullptr
  , /*decltype(_impl_.setcardgroup_)*/nullptr
  , /*decltype(_impl_.buypvechesstemplate_)*/nullptr
  , /*decltype(_impl_.pveunlockchesstemplate_)*/nullptr
  , /*decltype(_impl_.pvesetteamdebuff_)*/nullptr
  , /*decltype(_impl_.chosecardgroup_)*/nullptr
  , /*decltype(_impl_.removeovertimebuff_)*/nullptr
  , /*decltype(_impl_.updatenewcardgroupsign_)*/nullptr
  , /*decltype(_impl_.tdgetonhookaward_)*/nullptr
  , /*decltype(_impl_.tddraw_)*/nullptr
  , /*decltype(_impl_.tdbuycard_)*/nullptr
  , /*decltype(_impl_.tdsetcardgroup_)*/nullptr
  , /*decltype(_impl_.tdlevelup_)*/nullptr
  , /*decltype(_impl_.tdequip_)*/nullptr
  , /*decltype(_impl_.mentorupdatesetting_)*/nullptr
  , /*decltype(_impl_.mentorinvite_)*/nullptr
  , /*decltype(_impl_.mentorconfirminvite_)*/nullptr
  , /*decltype(_impl_.mentorrecommendlist_)*/nullptr
  , /*decltype(_impl_.mentorgettaskaward_)*/nullptr
  , /*decltype(_impl_.mentorgraduate_)*/nullptr
  , /*decltype(_impl_.mentorrelieverelation_)*/nullptr
  , /*decltype(_impl_.getmentorinfo_)*/nullptr
  , /*decltype(_impl_.mentorgetinvitemsg_)*/nullptr
  , /*decltype(_impl_.teammsg_)*/nullptr
  , /*decltype(_impl_.chatmsg_)*/nullptr
  , /*decltype(_impl_.channelchat_)*/nullptr
  , /*decltype(_impl_.updatecardgroupbetter_)*/nullptr
  , /*decltype(_impl_.updatecardgroupsetting_)*/nullptr
  , /*decltype(_impl_.setauctionname_)*/nullptr
  , /*decltype(_impl_.setauctionremark_)*/nullptr
  , /*decltype(_impl_.getbalance_)*/nullptr
  , /*decltype(_impl_.rechargebalance_)*/nullptr
  , /*decltype(_impl_.withdrawbalance_)*/nullptr
  , /*decltype(_impl_.personalrecommendmall_)*/nullptr
  , /*decltype(_impl_.getmedalchestaward_)*/nullptr
  , /*decltype(_impl_.setitemautouse_)*/nullptr
  , /*decltype(_impl_.seq_)*/uint64_t{0u}
  , /*decltype(_impl_.errcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspBodyDefaultTypeInternal() {}
  union {
    CSRspBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspBodyDefaultTypeInternal _CSRspBody_default_instance_;
PROTOBUF_CONSTEXPR CSNtfBody::CSNtfBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mails_)*/{}
  , /*decltype(_impl_.kickoff_)*/nullptr
  , /*decltype(_impl_.ntfwait_)*/nullptr
  , /*decltype(_impl_.passday_)*/nullptr
  , /*decltype(_impl_.passweek_)*/nullptr
  , /*decltype(_impl_.passmonth_)*/nullptr
  , /*decltype(_impl_.worldchat_)*/nullptr
  , /*decltype(_impl_.headpic_)*/nullptr
  , /*decltype(_impl_.pvpmatch_)*/nullptr
  , /*decltype(_impl_.pvp_)*/nullptr
  , /*decltype(_impl_.pvpmatchcancel_)*/nullptr
  , /*decltype(_impl_.pvpstatus_)*/nullptr
  , /*decltype(_impl_.ntfpvpplayerready_)*/nullptr
  , /*decltype(_impl_.pvpbegin_)*/nullptr
  , /*decltype(_impl_.playerfinish_)*/nullptr
  , /*decltype(_impl_.pvpend_)*/nullptr
  , /*decltype(_impl_.marquee_)*/nullptr
  , /*decltype(_impl_.removemarquee_)*/nullptr
  , /*decltype(_impl_.loadingprogress_)*/nullptr
  , /*decltype(_impl_.pvpchat_)*/nullptr
  , /*decltype(_impl_.reload_)*/nullptr
  , /*decltype(_impl_.pay_)*/nullptr
  , /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_.followlist_)*/nullptr
  , /*decltype(_impl_.newfollower_)*/nullptr
  , /*decltype(_impl_.lostfollower_)*/nullptr
  , /*decltype(_impl_.invitejointeam_)*/nullptr
  , /*decltype(_impl_.playerjointeam_)*/nullptr
  , /*decltype(_impl_.playerleaveteam_)*/nullptr
  , /*decltype(_impl_.kickoffteamplayer_)*/nullptr
  , /*decltype(_impl_.teammsg_)*/nullptr
  , /*decltype(_impl_.teamready_)*/nullptr
  , /*decltype(_impl_.rejectjointeam_)*/nullptr
  , /*decltype(_impl_.notice_)*/nullptr
  , /*decltype(_impl_.removenotice_)*/nullptr
  , /*decltype(_impl_.upgradebattlestage_)*/nullptr
  , /*decltype(_impl_.passporttaskprogress_)*/nullptr
  , /*decltype(_impl_.rankseasoneval_)*/nullptr
  , /*decltype(_impl_.bindaccounts_)*/nullptr
  , /*decltype(_impl_.seasontaskprogress_)*/nullptr
  , /*decltype(_impl_.alphaactivity_)*/nullptr
  , /*decltype(_impl_.offseasontonewseason_)*/nullptr
  , /*decltype(_impl_.languagemd5list_)*/nullptr
  , /*decltype(_impl_.activityprogress_)*/nullptr
  , /*decltype(_impl_.removeactivity_)*/nullptr
  , /*decltype(_impl_.activityconfig_)*/nullptr
  , /*decltype(_impl_.meleetaskprogress_)*/nullptr
  , /*decltype(_impl_.setteammode_)*/nullptr
  , /*decltype(_impl_.passportopen_)*/nullptr
  , /*decltype(_impl_.passportclose_)*/nullptr
  , /*decltype(_impl_.weekindex_)*/nullptr
  , /*decltype(_impl_.pvphistory_)*/nullptr
  , /*decltype(_impl_.teampvpend_)*/nullptr
  , /*decltype(_impl_.probenetdelay_)*/nullptr
  , /*decltype(_impl_.refreshgoods_)*/nullptr
  , /*decltype(_impl_.removeeggs_)*/nullptr
  , /*decltype(_impl_.switchset_)*/nullptr
  , /*decltype(_impl_.blacklist_)*/nullptr
  , /*decltype(_impl_.bindphonenumberswitch_)*/nullptr
  , /*decltype(_impl_.worldinvite_)*/nullptr
  , /*decltype(_impl_.mallnotice_)*/nullptr
  , /*decltype(_impl_.privilege_)*/nullptr
  , /*decltype(_impl_.aaremind_)*/nullptr
  , /*decltype(_impl_.aaban_)*/nullptr
  , /*decltype(_impl_.aaverify_)*/nullptr
  , /*decltype(_impl_.phonenumber_)*/nullptr
  , /*decltype(_impl_.anticallback_)*/nullptr
  , /*decltype(_impl_.fortunebagtime_)*/nullptr
  , /*decltype(_impl_.updateitem_)*/nullptr
  , /*decltype(_impl_.creditscore_)*/nullptr
  , /*decltype(_impl_.buffact_)*/nullptr
  , /*decltype(_impl_.activitygroup_)*/nullptr
  , /*decltype(_impl_.clearchat_)*/nullptr
  , /*decltype(_impl_.forbidinfo_)*/nullptr
  , /*decltype(_impl_.midasdiamond_)*/nullptr
  , /*decltype(_impl_.joinvoiceteam_)*/nullptr
  , /*decltype(_impl_.joinvoicepvp_)*/nullptr
  , /*decltype(_impl_.joinvoicecamp_)*/nullptr
  , /*decltype(_impl_.wxvvip_)*/nullptr
  , /*decltype(_impl_.freeflow_)*/nullptr
  , /*decltype(_impl_.observestatus_)*/nullptr
  , /*decltype(_impl_.gamemarquee_)*/nullptr
  , /*decltype(_impl_.wxredpacket_)*/nullptr
  , /*decltype(_impl_.gmsysmsg_)*/nullptr
  , /*decltype(_impl_.newpunishment_)*/nullptr
  , /*decltype(_impl_.teamslot_)*/nullptr
  , /*decltype(_impl_.teamsubmode_)*/nullptr
  , /*decltype(_impl_.teamslotstatus_)*/nullptr
  , /*decltype(_impl_.punishmentinfo_)*/nullptr
  , /*decltype(_impl_.removepunishment_)*/nullptr
  , /*decltype(_impl_.pvpconfirm_)*/nullptr
  , /*decltype(_impl_.matchsuccess_)*/nullptr
  , /*decltype(_impl_.oldbusinessplayer_)*/nullptr
  , /*decltype(_impl_.changeteamslot_)*/nullptr
  , /*decltype(_impl_.refusechangeteamslot_)*/nullptr
  , /*decltype(_impl_.cancelchangeslot_)*/nullptr
  , /*decltype(_impl_.showchessskin_)*/nullptr
  , /*decltype(_impl_.onhelpreddot_)*/nullptr
  , /*decltype(_impl_.bagupdate_)*/nullptr
  , /*decltype(_impl_.refreshmelee_)*/nullptr
  , /*decltype(_impl_.weblogin_)*/nullptr
  , /*decltype(_impl_.currenttournament_)*/nullptr
  , /*decltype(_impl_.tournamentbegin_)*/nullptr
  , /*decltype(_impl_.tournamentenrollbegin_)*/nullptr
  , /*decltype(_impl_.tournamentenrollend_)*/nullptr
  , /*decltype(_impl_.jointournamentroom_)*/nullptr
  , /*decltype(_impl_.tournamentend_)*/nullptr
  , /*decltype(_impl_.tournamentout_)*/nullptr
  , /*decltype(_impl_.tournamentroundend_)*/nullptr
  , /*decltype(_impl_.luckstaraward_)*/nullptr
  , /*decltype(_impl_.inviteobserve_)*/nullptr
  , /*decltype(_impl_.rejectobserve_)*/nullptr
  , /*decltype(_impl_.chestcount_)*/nullptr
  , /*decltype(_impl_.recruitinfo_)*/nullptr
  , /*decltype(_impl_.recruitplayer_)*/nullptr
  , /*decltype(_impl_.recruitplayerbattle_)*/nullptr
  , /*decltype(_impl_.betonbounty_)*/nullptr
  , /*decltype(_impl_.activitytaskunlock_)*/nullptr
  , /*decltype(_impl_.psserveronly_)*/nullptr
  , /*decltype(_impl_.addthirdpvpinfo_)*/nullptr
  , /*decltype(_impl_.delthirdpvpinfo_)*/nullptr
  , /*decltype(_impl_.ps4serveronly_)*/nullptr
  , /*decltype(_impl_.luckmallgoods_)*/nullptr
  , /*decltype(_impl_.chesslisterr_)*/nullptr
  , /*decltype(_impl_.chestrecord_)*/nullptr
  , /*decltype(_impl_.goainfo_)*/nullptr
  , /*decltype(_impl_.medalinfo_)*/nullptr
  , /*decltype(_impl_.medalid_)*/nullptr
  , /*decltype(_impl_.pvpreset_)*/nullptr
  , /*decltype(_impl_.delmail_)*/nullptr
  , /*decltype(_impl_.iteminfo_)*/nullptr
  , /*decltype(_impl_.passportnum_)*/nullptr
  , /*decltype(_impl_.passportyearcardnum_)*/nullptr
  , /*decltype(_impl_.teamop_)*/nullptr
  , /*decltype(_impl_.teamdismiss_)*/nullptr
  , /*decltype(_impl_.switchmodeinteam_)*/nullptr
  , /*decltype(_impl_.addbanner_)*/nullptr
  , /*decltype(_impl_.removebanner_)*/nullptr
  , /*decltype(_impl_.singleroundflow_)*/nullptr
  , /*decltype(_impl_.teamstatus_)*/nullptr
  , /*decltype(_impl_.tngameend_)*/nullptr
  , /*decltype(_impl_.playerlackresource_)*/nullptr
  , /*decltype(_impl_.favmapremoved_)*/nullptr
  , /*decltype(_impl_.workshopmatchresult_)*/nullptr
  , /*decltype(_impl_.bigwinnerexpandmatch_)*/nullptr
  , /*decltype(_impl_.verifyrealname_)*/nullptr
  , /*decltype(_impl_.guildjoin_)*/nullptr
  , /*decltype(_impl_.memberchange_)*/nullptr
  , /*decltype(_impl_.guildkickoff_)*/nullptr
  , /*decltype(_impl_.guildrolechange_)*/nullptr
  , /*decltype(_impl_.guildattrchange_)*/nullptr
  , /*decltype(_impl_.guildchat_)*/nullptr
  , /*decltype(_impl_.newguildlog_)*/nullptr
  , /*decltype(_impl_.applicantchange_)*/nullptr
  , /*decltype(_impl_.inviteechange_)*/nullptr
  , /*decltype(_impl_.guildnewinvite_)*/nullptr
  , /*decltype(_impl_.guildinfo_)*/nullptr
  , /*decltype(_impl_.vngawardreset_)*/nullptr
  , /*decltype(_impl_.adaward_)*/nullptr
  , /*decltype(_impl_.adcount_)*/nullptr
  , /*decltype(_impl_.uiforbid_)*/nullptr
  , /*decltype(_impl_.pvpupdatemessengerpos_)*/nullptr
  , /*decltype(_impl_.pvpplayerloggedin_)*/nullptr
  , /*decltype(_impl_.passthrough_)*/nullptr
  , /*decltype(_impl_.aa_)*/nullptr
  , /*decltype(_impl_.pvpreconnect_)*/nullptr
  , /*decltype(_impl_.updatebattleresult_)*/nullptr
  , /*decltype(_impl_.visitplayer_)*/nullptr
  , /*decltype(_impl_.kridentityauth_)*/nullptr
  , /*decltype(_impl_.kraddictiontip_)*/nullptr
  , /*decltype(_impl_.leavegameearly_)*/nullptr
  , /*decltype(_impl_.kraddictioncountdown_)*/nullptr
  , /*decltype(_impl_.histroychatmsg_)*/nullptr
  , /*decltype(_impl_.gmtime_)*/nullptr
  , /*decltype(_impl_.changename_)*/nullptr
  , /*decltype(_impl_.firstpay_)*/nullptr
  , /*decltype(_impl_.expchanged_)*/nullptr
  , /*decltype(_impl_.taskprogress_)*/nullptr
  , /*decltype(_impl_.newplayerguideended_)*/nullptr
  , /*decltype(_impl_.tasksinfo_)*/nullptr
  , /*decltype(_impl_.pvpawardsinfo_)*/nullptr
  , /*decltype(_impl_.addaward_)*/nullptr
  , /*decltype(_impl_.limitrefresh_)*/nullptr
  , /*decltype(_impl_.updatenotice_)*/nullptr
  , /*decltype(_impl_.updatepvechallengecount_)*/nullptr
  , /*decltype(_impl_.addiscount_)*/nullptr
  , /*decltype(_impl_.calcmmr_)*/nullptr
  , /*decltype(_impl_.bag_)*/nullptr
  , /*decltype(_impl_.itemattributes_)*/nullptr
  , /*decltype(_impl_.pvpaffixtrigger_)*/nullptr
  , /*decltype(_impl_.updatepvpdata_)*/nullptr
  , /*decltype(_impl_.upgradepassport_)*/nullptr
  , /*decltype(_impl_.updateteamdebuff_)*/nullptr
  , /*decltype(_impl_.pveeval_)*/nullptr
  , /*decltype(_impl_.unlockcardgroup_)*/nullptr
  , /*decltype(_impl_.custompveactivity_)*/nullptr
  , /*decltype(_impl_.csntfgmban_)*/nullptr
  , /*decltype(_impl_.tdplayerinfo_)*/nullptr
  , /*decltype(_impl_.mentorinvitemsg_)*/nullptr
  , /*decltype(_impl_.becomementor_)*/nullptr
  , /*decltype(_impl_.mentorrelation_)*/nullptr
  , /*decltype(_impl_.mentorshiptaskupdate_)*/nullptr
  , /*decltype(_impl_.mentorlevel_)*/nullptr
  , /*decltype(_impl_.curdressupdate_)*/nullptr
  , /*decltype(_impl_.changeexchangemark_)*/nullptr
  , /*decltype(_impl_.refreshpassport_)*/nullptr
  , /*decltype(_impl_.gmremovemail_)*/nullptr
  , /*decltype(_impl_.autouseitem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfBodyDefaultTypeInternal() {}
  union {
    CSNtfBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfBodyDefaultTypeInternal _CSNtfBody_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_csprotocol_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_csprotocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_csprotocol_2eproto = nullptr;

const uint32_t TableStruct_csprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSHead, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSHead, _impl_.bodylen_),
  PROTOBUF_FIELD_OFFSET(::msg::CSHead, _impl_.compress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSHead, _impl_.serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.heart_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.versioncheck_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.resourceversioncheck_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.applyhallserver_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getnumrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.worldchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playersbaseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playerdetailinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.readmail_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getmailaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buyegg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usernameset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usernamerandom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.headpicset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.dresschessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.dressscene_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvplogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvpend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playerfinish_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playerquit_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sellitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getevalaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usechessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guidreport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getcodeaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.roundreport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.loadingprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvpchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.chesscombine_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.expose_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.applyorderid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportorderinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unsetitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.randomitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.chat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setchessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unsetchessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getfanslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.followplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unfollowplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playersstatusinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.invitejointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.jointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.kickoffteamplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.teammsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.teamready_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportpayresponse_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.rejectjointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.shieldchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buypassportlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.upgradepassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getpassportlevelaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getpassporttaskaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.telbook_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.activatepassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.rankseasoneval_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bindaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.incadsshowcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usebonuscard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getseasonaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getalphaactivityaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getlanguagedata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getactivityaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getactivitydata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sendsms_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getmeleeaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.addaitoteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.share_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.skipinterface_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.teamgame_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setteammode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.historypvpshowpermission_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.searchteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.applychat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.chatlogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.probenetdelay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.geteggs_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buygoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.exchangepassportgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usepassporttaskcard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.openrandchest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.egglottery_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.querydiamondbalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.useitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.useexperiencecard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.randtargetitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.addblacklist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.removeblacklist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportplayerbirth_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportinfoinput_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sendverificationcode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bindphonenumber_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.worldinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.removeexpireitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getmallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buymallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bindsharingcode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.wxblessbag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatefriendsingame_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sharereward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.allfightinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getoldplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bindoldplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sendverificationcodewithcheckredis_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportsetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.antidata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tlogdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.daysign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.dayfitavoid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sharecountaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.actitemexch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.realationstar_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getrealationstarinvitesucc_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getrealationstar_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reqactrecord_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.joinvoiceteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.joinvoicepvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.joinvoicecamp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usercountryset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.offlineinvitejointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.observe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getrecommendpvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.observelogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.quitobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getobserveinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.freeflow_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setpushtoken_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tlogevent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.wxvvipaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.relationstarwx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.sendwxredpacket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recvwxredpacket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.wxredpktlike_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.wxredpktrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setobserveprivilege_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.presetfastchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.changeslotteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.changesubmodeteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.confirmchangeslotteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvproundend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.observechatlogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvpconfirm_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.activitypicshare_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bindoldbusinessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.translate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.submitquestionnaire_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.cancelchangeslot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setchessskin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unsetchessskin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.compose_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.offhelpreddot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.video_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.changelanguage_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.videoplay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setprovince_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.longyuanvoice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.enrolltournament_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.jointournamentroom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tournamentpointaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.dealwebmail_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getenrollplayers_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.challengeagain_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.historychat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setfriendinvisible_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getobserveaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.inviteobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.rejectobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.gettxplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.choosetxplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getthirdpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.markplayerguide_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.markchessskinclicked_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recruitinviteplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recruitbindinviter_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.queryps4entitlements_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.actdaysign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.havethirdpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.activitymall_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.psonly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.changechanneltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.customcardopt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.staticsreport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.championhistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tournamentlasttoprank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bigwinnerexpandmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bigwinnerdailyaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bigwinnerscorehistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.smeltitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pveuptalentlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.luckyaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.applychannel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.teamop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.obteaminfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.headiconurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getpvpservergroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.chooseplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pingtest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportregioninfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recalledplaeyr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.weblogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.invitecodereset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recallreward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.switchtocommonmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.switchmodeinteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.gettnroomstate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.workshopmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buyworkshopticket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.favouriteworkshopmap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.shortcutmapsop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playerstournamentinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.scoreworkshopmap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mapsvisitedbyfriends_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.verifyrealname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.fakepay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildcreate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildapply_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildhome_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildapprove_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildrole_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildmodify_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildkickoff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guilddismiss_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildexit_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildrecommendplayers_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildinvitelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildresign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.guildrejectinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getvngcommentaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.levelupchest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.watchad_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pstournamentroom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getadcumulateaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setmessengerpos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updateantiaddictiontime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.cancelreconnect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reconnect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.passthrough_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.visitplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.leavegameearly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.gdcommonbin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.gdbindata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.autobattleop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.restrictuser_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.equipselectrate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.reportabsent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendweek_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendofficial_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendlatest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendhistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendcollect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendgetcollection_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.recommendequip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.logincancel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.convertdebris_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.protectioncard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.usepassportcard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setmedal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unsetmedal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.playermedals_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatehotdot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.queryhotdot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setcache_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getcache_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buychallengecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getpverank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.authaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unbindaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.bagtoitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.identifyitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.insetitemaffix_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.unsetitemaffix_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setdefaultattributes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.checkcancel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.cancelaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.oauthapp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getselfnumrankdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatecardgroupname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buypvebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setcardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.buypvechesstemplate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pveunlockchesstemplate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.pvesetteamdebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.chosecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.removeovertimebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatenewcardgroupsign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tdgetonhookaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tddraw_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tdbuycard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tdsetcardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tdlevelup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.tdequip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorupdatesetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorconfirminvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorrecommendlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorgettaskaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorgraduate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorrelieverelation_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getmentorinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.mentorgetinvitemsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatecardgroupbetter_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.updatecardgroupsetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setcontent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getbalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.rechargebalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.withdrawbalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.personalrecommendmall_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.getmedalchestaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBody, _impl_.setitemautouse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.errcode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.heart_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.versioncheck_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.resourceversioncheck_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.applyhallserver_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getnumrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.worldchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playersbaseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playerdetailinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.readmail_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getmailaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buyegg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usernameset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usernamerandom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.headpicset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.dresschessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.dressscene_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pvplogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pvpend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playerfinish_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playerquit_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sellitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getevalaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usechessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guidreport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getcodeaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.roundreport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.loadingprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pvpchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chesscombine_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.expose_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.applyorderid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportorderinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unsetitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.randomitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setchessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unsetchessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getfanslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.followplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unfollowplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playersstatusinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.invitejointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.jointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportpayresponse_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.rejectjointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.shieldchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buypassportlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.upgradepassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getpassportlevelaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getpassporttaskaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.telbook_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.activatepassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.rankseasoneval_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bindaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.incadsshowcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usebonuscard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getseasonaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getalphaactivityaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getlanguagedata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getactivityaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getactivitydata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sendsms_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getmeleeaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.addaitoteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.share_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.skipinterface_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.teamgame_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setteammode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.historypvpshowpermission_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.searchteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.applychat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chatlogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.probenetdelay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.geteggs_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buygoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.exchangepassportgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usepassporttaskcard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.openrandchest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.egglottery_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.querydiamondbalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.useitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.useexperiencecard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.randtargetitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.addblacklist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.removeblacklist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportplayerbirth_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportinfoinput_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sendverificationcode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bindphonenumber_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.worldinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.removeexpireitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getmallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buymallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bindsharingcode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.wxblessbag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatefriendsingame_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sharereward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.allfightinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getoldplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bindoldplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sendverificationcodewithcheckredis_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportsetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.antidata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tlogdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.daysign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.dayfitavoid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sharecountaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.realationstar_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getrealationstarinvitesucc_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getrealationstar_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.rspactrecord_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.joinvoiceteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.joinvoicepvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.joinvoicecamp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usercountryset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.observe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getrecommendpvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.observelogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.quitobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getobserveinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.freeflow_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setpushtoken_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tlogevent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.wxvvipaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.relationstarwx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.sendwxredpacket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recvwxredpacket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.wxredpktlike_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.wxredpktrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setobserveprivilege_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.presetfastchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.changeslotteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.changesubmodeteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.confirmchangeslotteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pvproundend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.teamready_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bindoldbusinessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.translate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.submitquestionnaire_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.cancelchangeslot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setchessskin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unsetchessskin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.compose_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.video_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.offhelpreddot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.changelanguage_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setprovince_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.longyuanvoice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.enrolltournament_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.jointournamentroom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tournamentpointaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getenrollplayers_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.dealwebmail_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.challengeagain_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.historychat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setfriendinvisible_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getobserveaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.inviteobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.rejectobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.gettxplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getthirdpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.markplayerguide_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chessskinclicked_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.queryps4entitlements_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.actdaysign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.havethirdpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.activitymall_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.psonly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.changechanneltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.customcardopt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.championhistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tournamentlasttoprank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bigwinnerdailyaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bigwinnerscorehistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.smeltitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pveuptalentlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.luckyaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.applychannel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.obteaminfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getpvpservergroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chooseplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pingtest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportregioninfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recalledplaeyr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.weblogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.invitecodereset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recallreward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.switchtocommonmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.switchmodeinteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.gettnroomstate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.workshopmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buyworkshopticket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.favouriteworkshopmap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.shortcutmapsop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playerstournamentinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.scoreworkshopmap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mapsvisitedbyfriends_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.verifyrealname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.fakepay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildcreate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildapply_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildhome_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildapprove_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildrole_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildmodify_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildkickoff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guilddismiss_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildexit_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildrecommendplayers_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildinvitelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.guildrejectinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getvngcommentaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.levelupchest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.watchad_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pstournamentroom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getadcumulateaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setmessengerpos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.antiaddictiontime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.cancelreconnect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reconnect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.passthrough_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.visitplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.leavegameearly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.gdcommonbin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.gdbindata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.battlecampresult_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.autobattleop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.restrictuser_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.equipselectrate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.reportabsent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendweek_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendofficial_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendlatest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendhistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendcollect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendgetcollection_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.recommendequip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.logincancel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.convertdebris_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.protectioncard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.usepassportcard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setmedal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unsetmedal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.playermedals_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatehotdot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.queryhotdot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setcache_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getcache_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buychallengecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getpverank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.authaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unbindaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.bagtoitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.identifyitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.insetitemaffix_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.unsetitemaffix_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setdefaultattributes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.checkcancel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.cancelaccount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.oauthapp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.selfnumrankdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatecardgroupname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buypvebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setcardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.buypvechesstemplate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pveunlockchesstemplate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.pvesetteamdebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chosecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.removeovertimebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatenewcardgroupsign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tdgetonhookaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tddraw_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tdbuycard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tdsetcardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tdlevelup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.tdequip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorupdatesetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorconfirminvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorrecommendlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorgettaskaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorgraduate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorrelieverelation_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getmentorinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.mentorgetinvitemsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.teammsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.chatmsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.channelchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatecardgroupbetter_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.updatecardgroupsetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setauctionname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setauctionremark_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getbalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.rechargebalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.withdrawbalance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.personalrecommendmall_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.getmedalchestaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBody, _impl_.setitemautouse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.kickoff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.ntfwait_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passday_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passweek_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passmonth_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.worldchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.mails_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpmatchcancel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpstatus_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.ntfpvpplayerready_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpbegin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.playerfinish_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.marquee_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.removemarquee_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.loadingprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.reload_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.chat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.followlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.newfollower_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.lostfollower_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.invitejointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.playerjointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.playerleaveteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.kickoffteamplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teammsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamready_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.rejectjointeam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.notice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.removenotice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.upgradebattlestage_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passporttaskprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.rankseasoneval_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.bindaccounts_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.seasontaskprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.alphaactivity_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.offseasontonewseason_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.languagemd5list_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.activityprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.removeactivity_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.activityconfig_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.meleetaskprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.setteammode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passportopen_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passportclose_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.weekindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvphistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teampvpend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.probenetdelay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.refreshgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.removeeggs_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.switchset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.blacklist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.bindphonenumberswitch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.worldinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.mallnotice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.privilege_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.aaremind_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.aaban_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.aaverify_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.phonenumber_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.anticallback_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.fortunebagtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.updateitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.creditscore_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.buffact_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.activitygroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.clearchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.forbidinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.midasdiamond_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.joinvoiceteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.joinvoicepvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.joinvoicecamp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.wxvvip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.freeflow_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.observestatus_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.gamemarquee_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.wxredpacket_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.gmsysmsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.newpunishment_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamslot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamsubmode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamslotstatus_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.punishmentinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.removepunishment_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpconfirm_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.matchsuccess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.oldbusinessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.changeteamslot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.refusechangeteamslot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.cancelchangeslot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.showchessskin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.onhelpreddot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.bagupdate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.refreshmelee_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.weblogin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.currenttournament_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tournamentbegin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tournamentenrollbegin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tournamentenrollend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.jointournamentroom_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tournamentend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tournamentout_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tournamentroundend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.luckstaraward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.inviteobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.rejectobserve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.chestcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.recruitinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.recruitplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.recruitplayerbattle_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.betonbounty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.activitytaskunlock_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.psserveronly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.addthirdpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.delthirdpvpinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.ps4serveronly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.luckmallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.chesslisterr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.chestrecord_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.goainfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.medalinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.medalid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpreset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.delmail_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.iteminfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passportnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passportyearcardnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamdismiss_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.switchmodeinteam_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.addbanner_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.removebanner_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.singleroundflow_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.teamstatus_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tngameend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.playerlackresource_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.favmapremoved_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.workshopmatchresult_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.bigwinnerexpandmatch_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.verifyrealname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildjoin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.memberchange_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildkickoff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildrolechange_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildattrchange_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.newguildlog_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.applicantchange_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.inviteechange_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildnewinvite_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.guildinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.vngawardreset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.adaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.adcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.uiforbid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpupdatemessengerpos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpplayerloggedin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.passthrough_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.aa_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpreconnect_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.updatebattleresult_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.visitplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.kridentityauth_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.kraddictiontip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.leavegameearly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.kraddictioncountdown_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.histroychatmsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.gmtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.changename_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.firstpay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.expchanged_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.taskprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.newplayerguideended_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tasksinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpawardsinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.addaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.limitrefresh_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.updatenotice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.updatepvechallengecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.addiscount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.calcmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.bag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.itemattributes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pvpaffixtrigger_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.updatepvpdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.upgradepassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.updateteamdebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.pveeval_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.unlockcardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.custompveactivity_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.csntfgmban_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.tdplayerinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.mentorinvitemsg_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.becomementor_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.mentorrelation_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.mentorshiptaskupdate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.mentorlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.curdressupdate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.changeexchangemark_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.refreshpassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.gmremovemail_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBody, _impl_.autouseitem_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::CSHead)},
  { 10, -1, -1, sizeof(::msg::CSReqBody)},
  { 336, -1, -1, sizeof(::msg::CSRspBody)},
  { 653, -1, -1, sizeof(::msg::CSNtfBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_CSHead_default_instance_._instance,
  &::msg::_CSReqBody_default_instance_._instance,
  &::msg::_CSRspBody_default_instance_._instance,
  &::msg::_CSNtfBody_default_instance_._instance,
};

const char descriptor_table_protodef_csprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020csprotocol.proto\022\003msg\032\014common.proto\032\014r"
  "esult.proto\032\014battle.proto\032\026csprotocolstr"
  "uct.proto\032\022towerdefense.proto\"Z\n\006CSHead\022"
  "\033\n\005MsgId\030\001 \001(\0162\014.msg.CSMsgID\022\017\n\007BodyLen\030"
  "\002 \001(\r\022\020\n\010Compress\030\003 \001(\010\022\020\n\010ServerId\030\004 \001("
  "\r\"\264{\n\tCSReqBody\022\013\n\003Seq\030\001 \001(\004\022\036\n\005Heart\030\002 "
  "\001(\0132\017.msg.CSReqHeart\022\036\n\005Login\030\003 \001(\0132\017.ms"
  "g.CSReqLogin\022,\n\014VersionCheck\030\004 \001(\0132\026.msg"
  ".CSReqVersionCheck\022<\n\024ResourceVersionChe"
  "ck\030\005 \001(\0132\036.msg.CSReqResourceVersionCheck"
  "\0222\n\017ApplyHallServer\030\006 \001(\0132\031.msg.CSReqApp"
  "lyHallServer\022(\n\nGetNumRank\030\007 \001(\0132\024.msg.C"
  "SReqGetNumRank\022&\n\tWorldChat\030\010 \001(\0132\023.msg."
  "CSReqWorldChat\0222\n\017PlayersBaseInfo\030\t \001(\0132"
  "\031.msg.CSReqPlayersBaseInfo\0224\n\020PlayerDeta"
  "ilInfo\030\n \001(\0132\032.msg.CSReqPlayerDetailInfo"
  "\022$\n\010ReadMail\030\013 \001(\0132\022.msg.CSReqReadMail\022,"
  "\n\014GetMailAward\030\014 \001(\0132\026.msg.CSReqGetMailA"
  "ward\022 \n\006BuyEgg\030\r \001(\0132\020.msg.CSReqBuyEgg\022*"
  "\n\013UserNameSet\030\016 \001(\0132\025.msg.CSReqUserNameS"
  "et\0220\n\016UserNameRandom\030\017 \001(\0132\030.msg.CSReqUs"
  "erNameRandom\022(\n\nHeadPicSet\030\020 \001(\0132\024.msg.C"
  "SReqHeadPicSet\022\032\n\003Pvp\030\021 \001(\0132\r.msg.CSReqP"
  "vp\0224\n\020DressChessPlayer\030\022 \001(\0132\032.msg.CSReq"
  "DressChessPlayer\022(\n\nDressScene\030\023 \001(\0132\024.m"
  "sg.CSReqDressScene\022$\n\010PvpLogin\030\024 \001(\0132\022.m"
  "sg.CSReqPvpLogin\022 \n\006PvpEnd\030\027 \001(\0132\020.msg.C"
  "SReqPvpEnd\022,\n\014PlayerFinish\030\030 \001(\0132\026.msg.C"
  "SReqPlayerFinish\022(\n\nPlayerQuit\030\031 \001(\0132\024.m"
  "sg.CSReqPlayerQuit\022$\n\010SellItem\030\032 \001(\0132\022.m"
  "sg.CSReqSellItem\022,\n\014GetEvalAward\030\033 \001(\0132\026"
  ".msg.CSReqGetEvalAward\0220\n\016UseChessPlayer"
  "\030\034 \001(\0132\030.msg.CSReqUseChessPlayer\022(\n\nGuid"
  "Report\030\035 \001(\0132\024.msg.CSReqGuidReport\022,\n\014Ge"
  "tCodeAward\030\036 \001(\0132\026.msg.CSReqGetCodeAward"
  "\022*\n\013RoundReport\030\037 \001(\0132\025.msg.CSReqRoundRe"
  "port\0222\n\017LoadingProgress\030  \001(\0132\031.msg.CSRe"
  "qLoadingProgress\022\"\n\007PvpChat\030! \001(\0132\021.msg."
  "CSReqPvpChat\022,\n\014ChessCombine\030\" \001(\0132\026.msg"
  ".CSReqChessCombine\022 \n\006Expose\030# \001(\0132\020.msg"
  ".CSReqExpose\022,\n\014ApplyOrderId\030$ \001(\0132\026.msg"
  ".CSReqApplyOrderId\0222\n\017ReportOrderInfo\030% "
  "\001(\0132\031.msg.CSReqReportOrderInfo\022\"\n\007SetIte"
  "m\030& \001(\0132\021.msg.CSReqSetItem\022&\n\tUnsetItem\030"
  "\' \001(\0132\023.msg.CSReqUnsetItem\022(\n\nRandomItem"
  "\030( \001(\0132\024.msg.CSReqRandomItem\022\034\n\004Chat\030) \001"
  "(\0132\016.msg.CSReqChat\0220\n\016SetChessPlayer\030* \001"
  "(\0132\030.msg.CSReqSetChessPlayer\0224\n\020UnsetChe"
  "ssPlayer\030+ \001(\0132\032.msg.CSReqUnsetChessPlay"
  "er\022*\n\013GetFansList\030, \001(\0132\025.msg.CSReqGetFa"
  "nsList\022,\n\014FollowPlayer\030- \001(\0132\026.msg.CSReq"
  "FollowPlayer\0220\n\016UnfollowPlayer\030. \001(\0132\030.m"
  "sg.CSReqUnfollowPlayer\0226\n\021PlayersStatusI"
  "nfo\030/ \001(\0132\033.msg.CSReqPlayersStatusInfo\0220"
  "\n\016InviteJoinTeam\0300 \001(\0132\030.msg.CSReqInvite"
  "JoinTeam\022$\n\010JoinTeam\0301 \001(\0132\022.msg.CSReqJo"
  "inTeam\0226\n\021KickOffTeamPlayer\0302 \001(\0132\033.msg."
  "CSReqKickOffTeamPlayer\022\"\n\007TeamMsg\0303 \001(\0132"
  "\021.msg.CSReqTeamMsg\022&\n\tTeamReady\0304 \001(\0132\023."
  "msg.CSReqTeamReady\0226\n\021ReportPayResponse\030"
  "5 \001(\0132\033.msg.CSReqReportPayResponse\0220\n\016Re"
  "jectJoinTeam\0306 \001(\0132\030.msg.CSReqRejectJoin"
  "Team\022(\n\nShieldChat\0307 \001(\0132\024.msg.CSReqShie"
  "ldChat\0224\n\020BuyPassportLevel\0308 \001(\0132\032.msg.C"
  "SReqBuyPassportLevel\0222\n\017UpgradePassport\030"
  "9 \001(\0132\031.msg.CSReqUpgradePassport\022>\n\025GetP"
  "assportLevelAward\030: \001(\0132\037.msg.CSReqGetPa"
  "ssportLevelAward\022<\n\024GetPassportTaskAward"
  "\030; \001(\0132\036.msg.CSReqGetPassportTaskAward\022\""
  "\n\007TelBook\030< \001(\0132\021.msg.CSReqTelBook\0224\n\020Ac"
  "tivatePassport\030= \001(\0132\032.msg.CSReqActivate"
  "Passport\0220\n\016RankSeasonEval\030> \001(\0132\030.msg.C"
  "SReqRankSeasonEval\022*\n\013BindAccount\030\? \001(\0132"
  "\025.msg.CSReqBindAccount\0221\n\017IncAdsShowCoun"
  "t\030@ \001(\0132\030.msg.CSReqIncAdShowCount\022,\n\014Use"
  "BonusCard\030A \001(\0132\026.msg.CSReqUseBonusCard\022"
  "0\n\016GetSeasonAward\030B \001(\0132\030.msg.CSReqGetSe"
  "asonAward\022>\n\025GetAlphaActivityAward\030C \001(\013"
  "2\037.msg.CSReqGetAlphaActivityAward\0222\n\017Get"
  "LanguageData\030D \001(\0132\031.msg.CSReqGetLanguag"
  "eData\0224\n\020GetActivityAward\030E \001(\0132\032.msg.CS"
  "ReqGetActivityAward\0222\n\017GetActivityData\030F"
  " \001(\0132\031.msg.CSReqGetActivityData\022\"\n\007SendS"
  "ms\030G \001(\0132\021.msg.CSReqSendSms\022.\n\rGetMeleeA"
  "ward\030H \001(\0132\027.msg.CSReqGetMeleeAward\022*\n\013A"
  "ddAiToTeam\030I \001(\0132\025.msg.CSReqAddAiToTeam\022"
  "\036\n\005Share\030J \001(\0132\017.msg.CSReqShare\022.\n\rSkipI"
  "nterface\030K \001(\0132\027.msg.CSReqSkipInterface\022"
  "$\n\010TeamGame\030L \001(\0132\022.msg.CSReqTeamGame\022*\n"
  "\013SetTeamMode\030M \001(\0132\025.msg.CSReqSetTeamMod"
  "e\022G\n\030HistoryPvpShowPermission\030N \001(\0132%.ms"
  "g.CSReqSetHistoryPvpShowPermission\022(\n\nSe"
  "archTeam\030O \001(\0132\024.msg.CSReqSearchTeam\022&\n\t"
  "ApplyChat\030P \001(\0132\023.msg.CSReqApplyChat\022&\n\t"
  "ChatLogin\030Q \001(\0132\023.msg.CSReqChatLogin\022.\n\r"
  "ProbeNetDelay\030R \001(\0132\027.msg.CSReqProbeNetD"
  "elay\022\"\n\007GetEggs\030S \001(\0132\021.msg.CSReqGetEggs"
  "\022$\n\010BuyGoods\030T \001(\0132\022.msg.CSReqBuyGoods\022>"
  "\n\025ExchangePassportGoods\030U \001(\0132\037.msg.CSRe"
  "qExchangePassportGoods\022:\n\023UsePassportTas"
  "kCard\030V \001(\0132\035.msg.CSReqUsePassportTaskCa"
  "rd\022.\n\rOpenRandChest\030W \001(\0132\027.msg.CSReqOpe"
  "nRandChest\022(\n\nEggLottery\030X \001(\0132\024.msg.CSR"
  "eqEggLottery\022:\n\023QueryDiamondBalance\030Y \001("
  "\0132\035.msg.CSReqQueryDiamondBalance\022\"\n\007UseI"
  "tem\030Z \001(\0132\021.msg.CSReqUseItem\0226\n\021UseExper"
  "ienceCard\030[ \001(\0132\033.msg.CSReqUseExperience"
  "Card\0220\n\016RandTargetItem\030\\ \001(\0132\030.msg.CSReq"
  "RandTargetItem\022,\n\014AddBlacklist\030] \001(\0132\026.m"
  "sg.CSReqAddBlacklist\0222\n\017RemoveBlacklist\030"
  "^ \001(\0132\031.msg.CSReqRemoveBlacklist\0226\n\021Repo"
  "rtPlayerBirth\030_ \001(\0132\033.msg.CSReqReportPla"
  "yerBirth\0222\n\017ReportInfoInput\030` \001(\0132\031.msg."
  "CSReqReportInfoInput\022<\n\024SendVerification"
  "Code\030a \001(\0132\036.msg.CSReqSendVerificationCo"
  "de\0222\n\017BindPhoneNumber\030b \001(\0132\031.msg.CSReqB"
  "indPhoneNumber\022*\n\013WorldInvite\030c \001(\0132\025.ms"
  "g.CSReqWorldInvite\0224\n\020RemoveExpireItem\030d"
  " \001(\0132\032.msg.CSReqRemoveExpireItem\022,\n\014GetM"
  "allGoods\030e \001(\0132\026.msg.CSReqGetMallGoods\022,"
  "\n\014BuyMallGoods\030f \001(\0132\026.msg.CSReqBuyMallG"
  "oods\0222\n\017BindSharingCode\030g \001(\0132\031.msg.CSRe"
  "qBindSharingCode\022(\n\nWXBlessBag\030h \001(\0132\024.m"
  "sg.CSReqWXBlessBag\022:\n\023UpdateFriendsInGam"
  "e\030i \001(\0132\035.msg.CSReqUpdateFriendsInGame\022*"
  "\n\013ShareReward\030j \001(\0132\025.msg.CSReqShareRewa"
  "rd\022,\n\014AllFightInfo\030k \001(\0132\026.msg.CSReqAllF"
  "ightInfo\022,\n\014GetOldPlayer\030l \001(\0132\026.msg.CSR"
  "eqGetOldPlayer\022.\n\rBindOldPlayer\030m \001(\0132\027."
  "msg.CSReqBindOldPlayer\022X\n\"SendVerificati"
  "onCodeWithCheckRedis\030n \001(\0132,.msg.CSReqSe"
  "ndVerificationCodeWithCheckRedis\022.\n\rRepo"
  "rtSetting\030o \001(\0132\027.msg.CSReqReportSetting"
  "\022$\n\010AntiData\030p \001(\0132\022.msg.CSReqAntiData\022$"
  "\n\010TlogData\030q \001(\0132\022.msg.CSReqTlogData\022\"\n\007"
  "DaySign\030r \001(\0132\021.msg.CSReqDaySign\022*\n\013DayF"
  "itAvoid\030s \001(\0132\025.msg.CSReqDayFitAvoid\0222\n\017"
  "ShareCountAward\030t \001(\0132\031.msg.CSReqShareCo"
  "untAward\022*\n\013ActItemExch\030u \001(\0132\025.msg.CSRe"
  "qActItemExch\022.\n\rRealationStar\030v \001(\0132\027.ms"
  "g.CSReqRealationStar\022H\n\032GetRealationStar"
  "InviteSucc\030w \001(\0132$.msg.CSReqGetRealation"
  "StarInviteSucc\0224\n\020GetRealationStar\030x \001(\013"
  "2\032.msg.CSReqGetRealationStar\022,\n\014ReqActRe"
  "cord\030y \001(\0132\026.msg.CSReqGetActRecord\022.\n\rJo"
  "inVoiceTeam\030z \001(\0132\027.msg.CSReqJoinVoiceTe"
  "am\022,\n\014JoinVoicePvp\030{ \001(\0132\026.msg.CSReqJoin"
  "VoicePvp\022.\n\rJoinVoiceCamp\030| \001(\0132\027.msg.CS"
  "ReqJoinVoiceCamp\0220\n\016UserCountrySet\030} \001(\013"
  "2\030.msg.CSReqUserCountrySet\022>\n\025OfflineInv"
  "iteJoinTeam\030~ \001(\0132\037.msg.CSReqOfflineInvi"
  "teJoinTeam\022\"\n\007Observe\030\177 \001(\0132\021.msg.CSReqO"
  "bserve\0223\n\017GetRecommendPvp\030\200\001 \001(\0132\031.msg.C"
  "SReqGetRecommendPvp\022-\n\014ObserveLogin\030\201\001 \001"
  "(\0132\026.msg.CSReqObserveLogin\022+\n\013QuitObserv"
  "e\030\202\001 \001(\0132\025.msg.CSReqQuitObserve\0221\n\016GetOb"
  "serveInfo\030\203\001 \001(\0132\030.msg.CSReqGetObserveIn"
  "fo\022%\n\010FreeFlow\030\204\001 \001(\0132\022.msg.CSReqFreeFlo"
  "w\022-\n\014SetPushToken\030\205\001 \001(\0132\026.msg.CSReqSetP"
  "ushToken\022\'\n\tTlogEvent\030\206\001 \001(\0132\023.msg.CSReq"
  "TlogEvent\022+\n\013WxVVipAward\030\207\001 \001(\0132\025.msg.CS"
  "ReqWxVVipAward\0224\n\016RelationStarWX\030\210\001 \001(\0132"
  "\033.msg.CSReqGetRelationStarWX\0223\n\017SendWxRe"
  "dPacket\030\211\001 \001(\0132\031.msg.CSReqSendWxRedPacke"
  "t\0223\n\017RecvWxRedPacket\030\212\001 \001(\0132\031.msg.CSReqR"
  "ecvWxRedPacket\022-\n\014WxRedPktLike\030\213\001 \001(\0132\026."
  "msg.CSReqWxRedPktLike\022-\n\014WxRedPktRank\030\214\001"
  " \001(\0132\026.msg.CSReqWxRedPktRank\0228\n\023SetObser"
  "vePrivilege\030\215\001 \001(\0132\032.msg.CSReqObservePri"
  "vilege\0221\n\016PresetFastChat\030\216\001 \001(\0132\030.msg.CS"
  "ReqPresetFastChat\0221\n\016ChangeSlotTeam\030\217\001 \001"
  "(\0132\030.msg.CSReqChangeSlotTeam\0227\n\021ChangeSu"
  "bModeTeam\030\220\001 \001(\0132\033.msg.CSReqChangeSubMod"
  "eTeam\022\?\n\025ConfirmChangeSlotTeam\030\221\001 \001(\0132\037."
  "msg.CSReqConfirmChangeSlotTeam\022+\n\013PvpRou"
  "ndEnd\030\222\001 \001(\0132\025.msg.CSReqPvpRoundEnd\0225\n\020O"
  "bserveChatLogin\030\223\001 \001(\0132\032.msg.CSReqObserv"
  "eChatLogin\022)\n\nPvpConfirm\030\224\001 \001(\0132\024.msg.CS"
  "ReqPvpConfirm\0225\n\020ActivityPicShare\030\225\001 \001(\013"
  "2\032.msg.CSReqActivityPicShare\022\?\n\025BindOldB"
  "usinessPlayer\030\226\001 \001(\0132\037.msg.CSReqBindOldB"
  "usinessPlayer\022\'\n\tTranslate\030\227\001 \001(\0132\023.msg."
  "CSReqTranslate\022;\n\023SubmitQuestionnaire\030\230\001"
  " \001(\0132\035.msg.CSReqSubmitQuestionnaire\0225\n\020C"
  "ancelChangeSlot\030\231\001 \001(\0132\032.msg.CSReqCancel"
  "ChangeSlot\022-\n\014SetChessSkin\030\232\001 \001(\0132\026.msg."
  "CSReqSetChessSkin\0221\n\016UnsetChessSkin\030\233\001 \001"
  "(\0132\030.msg.CSReqUnsetChessSkin\022#\n\007Compose\030"
  "\234\001 \001(\0132\021.msg.CSReqCompose\022/\n\rOffHelpRedd"
  "ot\030\235\001 \001(\0132\027.msg.CSReqOffHelpReddot\022\037\n\005Vi"
  "deo\030\240\001 \001(\0132\017.msg.CSReqVideo\0221\n\016ChangeLan"
  "guage\030\241\001 \001(\0132\030.msg.CSReqChangeLanguage\022-"
  "\n\tVideoPlay\030\242\001 \001(\0132\031.msg.CSReqReportVide"
  "oPlay\022+\n\013SetProvince\030\243\001 \001(\0132\025.msg.CSReqS"
  "etProvince\022/\n\rLongyuanVoice\030\244\001 \001(\0132\027.msg"
  ".CSReqLongyuanVoice\0225\n\020EnrollTournament\030"
  "\245\001 \001(\0132\032.msg.CSReqEnrollTournament\0229\n\022Jo"
  "inTournamentRoom\030\246\001 \001(\0132\034.msg.CSReqJoinT"
  "ournamentRoom\022=\n\024TournamentPointAward\030\247\001"
  " \001(\0132\036.msg.CSReqTournamentPointAward\022+\n\013"
  "DealWebMail\030\250\001 \001(\0132\025.msg.CSReqDealWebMai"
  "l\0225\n\020GetEnrollPlayers\030\251\001 \001(\0132\032.msg.CSReq"
  "GetEnrollPlayers\0221\n\016ChallengeAgain\030\252\001 \001("
  "\0132\030.msg.CSReqChallengeAgain\022.\n\013HistoryCh"
  "at\030\253\001 \001(\0132\030.msg.CSReqHistoryChatMsg\0229\n\022S"
  "etFriendInvisible\030\254\001 \001(\0132\034.msg.CSReqSetF"
  "riendInvisible\0223\n\017GetObserveAward\030\255\001 \001(\013"
  "2\031.msg.CSReqGetObserveAward\022/\n\rInviteObs"
  "erve\030\256\001 \001(\0132\027.msg.CSReqInviteObserve\022/\n\r"
  "RejectObserve\030\257\001 \001(\0132\027.msg.CSReqRejectOb"
  "serve\022+\n\013GetTxPlayer\030\260\001 \001(\0132\025.msg.CSReqG"
  "etTxPlayer\0221\n\016ChooseTxPlayer\030\261\001 \001(\0132\030.ms"
  "g.CSReqChooseTxPlayer\0223\n\017GetThirdPvpInfo"
  "\030\262\001 \001(\0132\031.msg.CSReqGetThirdPvpInfo\0223\n\017Ma"
  "rkPlayerGuide\030\263\001 \001(\0132\031.msg.CSReqMarkPlay"
  "erGuide\022=\n\024MarkChessSkinClicked\030\264\001 \001(\0132\036"
  ".msg.CSReqMarkChessSkinClicked\022;\n\023Recrui"
  "tInvitePlayer\030\265\001 \001(\0132\035.msg.CSReqRecruitI"
  "nvitePlayer\0229\n\022RecruitBindInviter\030\266\001 \001(\013"
  "2\034.msg.CSReqRecruitBindInviter\022=\n\024QueryP"
  "s4Entitlements\030\267\001 \001(\0132\036.msg.CSReqQueryPs"
  "4Entitlements\022)\n\nActDaySign\030\270\001 \001(\0132\024.msg"
  ".CSReqActDaySign\0221\n\020HaveThirdPvpInfo\030\271\001 "
  "\001(\0132\026.msg.CSReqHaveThirdPvp\022-\n\014ActivityM"
  "all\030\272\001 \001(\0132\026.msg.CSReqActivityMall\022!\n\006Ps"
  "Only\030\273\001 \001(\0132\020.msg.CSReqPsOnly\0227\n\021ChangeC"
  "hannelType\030\274\001 \001(\0132\033.msg.CSReqChangeChann"
  "elType\022/\n\rCustomCardOpt\030\275\001 \001(\0132\027.msg.CSR"
  "eqCustomCardOpt\022/\n\rStaticsReport\030\276\001 \001(\0132"
  "\027.msg.CSReqStaticsReport\0223\n\017ChampionHist"
  "ory\030\277\001 \001(\0132\031.msg.CSReqChampionHistory\022\?\n"
  "\025TournamentLastTopRank\030\300\001 \001(\0132\037.msg.CSRe"
  "qTournamentLastTopRank\022=\n\024BigWinnerExpan"
  "dMatch\030\301\001 \001(\0132\036.msg.CSReqBigWinnerExpand"
  "Match\022;\n\023BigWinnerDailyAward\030\302\001 \001(\0132\035.ms"
  "g.CSReqBigWinnerDailyAward\022\?\n\025BigWinnerS"
  "coreHistory\030\303\001 \001(\0132\037.msg.CSReqBigWinnerS"
  "coreHistory\022\'\n\tSmeltItem\030\304\001 \001(\0132\023.msg.CS"
  "ReqSmeltItem\0225\n\020PVEUpTalentLevel\030\305\001 \001(\0132"
  "\032.msg.CSReqPVEUpTalentLevel\022,\n\nLuckyAwar"
  "d\030\306\001 \001(\0132\027.msg.CSReqPVELuckyAward\022-\n\014App"
  "lyChannel\030\307\001 \001(\0132\026.msg.CSReqApplyChannel"
  "\022!\n\006TeamOP\030\254\002 \001(\0132\020.msg.CSReqTeamOP\022)\n\nO"
  "BTeamInfo\030\255\002 \001(\0132\024.msg.CSReqOBTeamInfo\0221"
  "\n\013HeadIconUrl\030\256\002 \001(\0132\033.msg.CSReqReportHe"
  "adIconUrl\0227\n\021GetPvpServerGroup\030\257\002 \001(\0132\033."
  "msg.CSReqGetPvpServerGroup\022/\n\rReportPvpI"
  "nfo\030\260\002 \001(\0132\027.msg.CSReqReportPvpInfo\022-\n\014C"
  "hoosePlayer\030\261\002 \001(\0132\026.msg.CSReqChoosePlay"
  "er\022%\n\010PingTest\030\262\002 \001(\0132\022.msg.CSReqPingTes"
  "t\0225\n\020ReportRegionInfo\030\263\002 \001(\0132\032.msg.CSReq"
  "ReportRegionInfo\0221\n\016RecalledPlaeyr\030\264\002 \001("
  "\0132\030.msg.CSReqRecalledPlayer\022%\n\010WebLogin\030"
  "\265\002 \001(\0132\022.msg.CSReqWebLogin\0223\n\017InviteCode"
  "Reset\030\266\002 \001(\0132\031.msg.CSReqInviteCodeReset\022"
  "-\n\014RecallReward\030\267\002 \001(\0132\026.msg.CSReqRecall"
  "Reward\022;\n\023SwitchToCommonMatch\030\270\002 \001(\0132\035.m"
  "sg.CSReqSwitchToCommonMatch\0225\n\020SwitchMod"
  "eInTeam\030\300\002 \001(\0132\032.msg.CSReqSwitchModeInTe"
  "am\0221\n\016GetTNRoomState\030\301\002 \001(\0132\030.msg.CSReqG"
  "etTNRoomState\022/\n\rWorkshopMatch\030\312\002 \001(\0132\027."
  "msg.CSReqWorkshopMatch\0227\n\021BuyWorkshopTic"
  "ket\030\313\002 \001(\0132\033.msg.CSReqBuyWorkshopTicket\022"
  "=\n\024FavouriteWorkshopMap\030\314\002 \001(\0132\036.msg.CSR"
  "eqFavouriteWorkshopMap\0221\n\016ShortcutMapsOP"
  "\030\315\002 \001(\0132\030.msg.CSReqShortcutMapsOP\022\?\n\025Pla"
  "yersTournamentInfo\030\316\002 \001(\0132\037.msg.CSReqPla"
  "yersTournamentInfo\0225\n\020ScoreWorkshopMap\030\317"
  "\002 \001(\0132\032.msg.CSReqScoreWorkshopMap\022=\n\024Map"
  "sVisitedByFriends\030\320\002 \001(\0132\036.msg.CSReqMaps"
  "VisitedByFriends\0221\n\016VerifyRealName\030\336\002 \001("
  "\0132\030.msg.CSReqVerifyRealName\022#\n\007FakePay\030\337"
  "\002 \001(\0132\021.msg.CSReqFakePay\022+\n\013GuildCreate\030"
  "\350\002 \001(\0132\025.msg.CSReqGuildCreate\022)\n\nGuildAp"
  "ply\030\351\002 \001(\0132\024.msg.CSReqGuildApply\022\'\n\tGuil"
  "dHome\030\352\002 \001(\0132\023.msg.CSReqGuildHome\022\'\n\tGui"
  "ldInfo\030\354\002 \001(\0132\023.msg.CSReqGuildInfo\022-\n\014Gu"
  "ildApprove\030\355\002 \001(\0132\026.msg.CSReqGuildApprov"
  "e\022*\n\tGuildRole\030\356\002 \001(\0132\026.msg.CSReqGuildSe"
  "tRole\022+\n\013GuildModify\030\357\002 \001(\0132\025.msg.CSReqG"
  "uildModify\022-\n\014GuildKickoff\030\360\002 \001(\0132\026.msg."
  "CSReqGuildKickoff\022-\n\014GuildDismiss\030\361\002 \001(\013"
  "2\026.msg.CSReqGuildDismiss\022\'\n\tGuildExit\030\362\002"
  " \001(\0132\023.msg.CSReqGuildExit\022\'\n\tGuildChat\030\363"
  "\002 \001(\0132\023.msg.CSReqGuildChat\022\'\n\tGuildList\030"
  "\364\002 \001(\0132\023.msg.CSReqGuildList\022\?\n\025GuildReco"
  "mmendPlayers\030\365\002 \001(\0132\037.msg.CSReqGuildReco"
  "mmendPlayers\0223\n\017GuildInviteList\030\366\002 \001(\0132\031"
  ".msg.CSReqGuildInviteList\022+\n\013GuildInvite"
  "\030\367\002 \001(\0132\025.msg.CSReqGuildInvite\022+\n\013GuildR"
  "esign\030\370\002 \001(\0132\025.msg.CSReqGuildResign\0227\n\021G"
  "uildRejectInvite\030\371\002 \001(\0132\033.msg.CSReqGuild"
  "RejectInvite\0229\n\022GetVngCommentAward\030\206\003 \001("
  "\0132\034.msg.CSReqGetVngCommentAward\022-\n\014Level"
  "upChest\030\207\003 \001(\0132\026.msg.CSReqLevelupChest\022#"
  "\n\007WatchAd\030\210\003 \001(\0132\021.msg.CSReqWatchAd\022:\n\020P"
  "sTournamentRoom\030\211\003 \001(\0132\037.msg.CSReqQueryP"
  "sTournamentRoom\0229\n\022GetAdCumulateAward\030\212\003"
  " \001(\0132\034.msg.CSReqGetAdCumulateAward\0223\n\017Se"
  "tMessengerPos\030\227\004 \001(\0132\031.msg.CSReqSetMesse"
  "ngerPos\022C\n\027UpdateAntiAddictionTime\030\251\004 \001("
  "\0132!.msg.CSReqUpdateAntiAddictionTime\0223\n\017"
  "CancelReconnect\030\252\004 \001(\0132\031.msg.CSReqCancel"
  "Reconnect\022\'\n\tReconnect\030\254\004 \001(\0132\023.msg.CSRe"
  "qReconnect\022+\n\013PassThrough\030\263\004 \001(\0132\025.msg.C"
  "SReqPassThrough\022+\n\013VisitPlayer\030\264\004 \001(\0132\025."
  "msg.CSReqVisitPlayer\0221\n\016LeaveGameEarly\030\265"
  "\004 \001(\0132\030.msg.CSReqLeaveGameEarly\022+\n\013GDCom"
  "monBin\030\266\004 \001(\0132\025.msg.CSReqGDCommonBin\022-\n\t"
  "GDBinData\030\267\004 \001(\0132\031.msg.CSReqGDCommonBinD"
  "ata\022-\n\014AutoBattleOP\030\270\004 \001(\0132\026.msg.CSReqAu"
  "toBattleOP\022-\n\014RestrictUser\030\271\004 \001(\0132\026.msg."
  "CSReqRestrictUser\0223\n\017EquipSelectRate\030\272\004 "
  "\001(\0132\031.msg.CSReqEquipSelectRate\022-\n\014Report"
  "Absent\030\273\004 \001(\0132\026.msg.CSReqReportAbsent\022/\n"
  "\rRecommendWeek\030\330\004 \001(\0132\027.msg.CSReqRecomme"
  "ndWeek\0227\n\021RecommendOfficial\030\331\004 \001(\0132\033.msg"
  ".CSReqRecommendOfficial\0223\n\017RecommendLate"
  "st\030\332\004 \001(\0132\031.msg.CSReqRecommendLatest\0225\n\020"
  "RecommendHistory\030\333\004 \001(\0132\032.msg.CSReqRecom"
  "mendHistory\0225\n\020RecommendCollect\030\334\004 \001(\0132\032"
  ".msg.CSReqRecommendCollect\022-\n\014RecommendS"
  "et\030\335\004 \001(\0132\026.msg.CSReqRecommendSet\022A\n\026Rec"
  "ommendGetCollection\030\336\004 \001(\0132 .msg.CSReqRe"
  "commendGetCollection\0221\n\016RecommendEquip\030\337"
  "\004 \001(\0132\030.msg.CSReqRecommendEquip\022+\n\013Login"
  "Cancel\030\340\004 \001(\0132\025.msg.CSReqLoginCancel\022/\n\r"
  "ConvertDebris\030\341\004 \001(\0132\027.msg.CSReqConvertD"
  "ebris\0224\n\016ProtectionCard\030\342\004 \001(\0132\033.msg.CSR"
  "eqUseProtectionCard\0223\n\017UsePassportCard\030\343"
  "\004 \001(\0132\031.msg.CSReqUsePassportCard\022%\n\010SetM"
  "edal\030\344\004 \001(\0132\022.msg.CSReqSetMedal\022)\n\nUnSet"
  "Medal\030\345\004 \001(\0132\024.msg.CSReqUnSetMedal\022-\n\014Pl"
  "ayerMedals\030\346\004 \001(\0132\026.msg.CSReqPlayerMedal"
  "s\022-\n\014UpdateHotDot\030\347\004 \001(\0132\026.msg.CSReqUpda"
  "teHotDot\022+\n\013QueryHotDot\030\350\004 \001(\0132\025.msg.CSR"
  "eqQueryHotDot\022%\n\010SetCache\030\351\004 \001(\0132\022.msg.C"
  "SReqSetCache\022%\n\010GetCache\030\352\004 \001(\0132\022.msg.CS"
  "ReqGetCache\0227\n\021BuyChallengeCount\030\353\004 \001(\0132"
  "\033.msg.CSReqBuyChallengeCount\022)\n\nGetPveRa"
  "nk\030\354\004 \001(\0132\024.msg.CSReqGetPveRank\022%\n\013AuthA"
  "ccount\030\355\004 \001(\0132\017.msg.CSReqLogin\022/\n\rUnbind"
  "Account\030\356\004 \001(\0132\027.msg.CSReqUnbindAccount\022"
  "\'\n\tBagToItem\030\357\004 \001(\0132\023.msg.CSReqBagToItem"
  "\022-\n\014IdentifyItem\030\360\004 \001(\0132\026.msg.CSReqIdent"
  "ifyItem\0221\n\016InsetItemAffix\030\361\004 \001(\0132\030.msg.C"
  "SReqInsetItemAffix\0221\n\016UnsetItemAffix\030\362\004 "
  "\001(\0132\030.msg.CSReqUnsetItemAffix\022=\n\024SetDefa"
  "ultAttributes\030\363\004 \001(\0132\036.msg.CSReqSetDefau"
  "ltAttributes\022+\n\013CheckCancel\030\364\004 \001(\0132\025.msg"
  ".CSReqCheckCancel\022/\n\rCancelAccount\030\365\004 \001("
  "\0132\027.msg.CSReqCancelAccount\022%\n\010OAuthApp\030\366"
  "\004 \001(\0132\022.msg.CSReqOAuthApp\0229\n\022GetSelfNumR"
  "ankData\030\367\004 \001(\0132\034.msg.CSReqGetSelfNumRank"
  "Data\0223\n\017UpdateCardGroup\030\370\004 \001(\0132\031.msg.CSR"
  "eqUpdateCardGroup\022;\n\023UpdateCardGroupName"
  "\030\371\004 \001(\0132\035.msg.CSReqUpdateCardGroupName\022)"
  "\n\nBuyPveBuff\030\372\004 \001(\0132\024.msg.CSReqBuyPveBuf"
  "f\022-\n\014SetCardGroup\030\373\004 \001(\0132\026.msg.CSReqSetC"
  "ardGroup\022;\n\023BuyPveChessTemplate\030\374\004 \001(\0132\035"
  ".msg.CSReqBuyPveChessTemplate\022A\n\026PveUnlo"
  "ckChessTemplate\030\375\004 \001(\0132 .msg.CSReqPveUnl"
  "ockChessTemplate\0225\n\020PveSetTeamDeBuff\030\376\004 "
  "\001(\0132\032.msg.CSReqPveSetTeamDeBuff\0221\n\016Chose"
  "CardGroup\030\377\004 \001(\0132\030.msg.CSReqChoseCardGro"
  "up\0229\n\022RemoveOvertimeBuff\030\200\005 \001(\0132\034.msg.CS"
  "ReqRemoveOvertimeBuff\022A\n\026UpdateNewCardGr"
  "oupSign\030\203\005 \001(\0132 .msg.CSRspUpdateNewCardG"
  "roupSign\0225\n\020TDGetOnHookAward\030\204\005 \001(\0132\032.ms"
  "g.CSReqTDGetOnHookAward\022!\n\006TDDraw\030\205\005 \001(\013"
  "2\020.msg.CsReqTDDraw\022\'\n\tTDBuyCard\030\206\005 \001(\0132\023"
  ".msg.CsReqTDBuyCard\0221\n\016TDSetCardGroup\030\207\005"
  " \001(\0132\030.msg.CSReqTDSetCardGroup\022\'\n\tTDLeve"
  "lUp\030\210\005 \001(\0132\023.msg.CSReqTDLevelUp\022#\n\007TDEqu"
  "ip\030\211\005 \001(\0132\021.msg.CSReqTDEquip\022;\n\023MentorUp"
  "dateSetting\030\212\005 \001(\0132\035.msg.CSReqMentorUpda"
  "teSetting\022-\n\014MentorInvite\030\213\005 \001(\0132\026.msg.C"
  "SReqMentorInvite\022;\n\023MentorConfirmInvite\030"
  "\214\005 \001(\0132\035.msg.CSReqMentorConfirmInvite\022;\n"
  "\023MentorRecommendList\030\215\005 \001(\0132\035.msg.CSReqM"
  "entorRecommendList\0229\n\022MentorGetTaskAward"
  "\030\216\005 \001(\0132\034.msg.CSReqMentorGetTaskAward\0221\n"
  "\016MentorGraduate\030\217\005 \001(\0132\030.msg.CSReqMentor"
  "Graduate\022\?\n\025MentorRelieveRelation\030\220\005 \001(\013"
  "2\037.msg.CSReqMentorRelieveRelation\022/\n\rGet"
  "MentorInfo\030\221\005 \001(\0132\027.msg.CSReqGetMentorIn"
  "fo\0229\n\022MentorGetInviteMsg\030\222\005 \001(\0132\034.msg.CS"
  "ReqMentorGetInviteMsg\022\?\n\025UpdateCardGroup"
  "Better\030\223\005 \001(\0132\037.msg.CSReqUpdateCardGroup"
  "Better\022A\n\026UpdateCardGroupSetting\030\224\005 \001(\0132"
  " .msg.CSReqUpdateCardGroupSetting\022)\n\nSet"
  "Content\030\225\005 \001(\0132\024.msg.CSReqSetContent\022)\n\n"
  "GetBalance\030\226\005 \001(\0132\024.msg.CSReqGetBalance\022"
  "3\n\017RechargeBalance\030\227\005 \001(\0132\031.msg.CSReqRec"
  "hargeBalance\0223\n\017WithdrawBalance\030\230\005 \001(\0132\031"
  ".msg.CSReqWithdrawBalance\022\?\n\025PersonalRec"
  "ommendMall\030\231\005 \001(\0132\037.msg.CSReqPersonalRec"
  "ommendMall\0229\n\022GetMedalChestAward\030\232\005 \001(\0132"
  "\034.msg.CSReqGetMedalChestAward\0221\n\016SetItem"
  "AutoUse\030\233\005 \001(\0132\030.msg.CSReqSetItemAutoUse"
  "\"\230w\n\tCSRspBody\022\013\n\003Seq\030\001 \001(\004\022\034\n\007ErrCode\030\002"
  " \001(\0162\013.msg.RESULT\022\016\n\006ErrMsg\030\003 \001(\t\022\036\n\005Hea"
  "rt\030\004 \001(\0132\017.msg.CSRspHeart\022\036\n\005Login\030\005 \001(\013"
  "2\017.msg.CSRspLogin\022,\n\014VersionCheck\030\006 \001(\0132"
  "\026.msg.CSRspVersionCheck\022<\n\024ResourceVersi"
  "onCheck\030\007 \001(\0132\036.msg.CSRspResourceVersion"
  "Check\0222\n\017ApplyHallServer\030\010 \001(\0132\031.msg.CSR"
  "spApplyHallServer\022(\n\nGetNumRank\030\t \001(\0132\024."
  "msg.CSRspGetNumRank\022&\n\tWorldChat\030\n \001(\0132\023"
  ".msg.CSRspWorldChat\0222\n\017PlayersBaseInfo\030\013"
  " \001(\0132\031.msg.CSRspPlayersBaseInfo\0224\n\020Playe"
  "rDetailInfo\030\014 \001(\0132\032.msg.CSRspPlayerDetai"
  "lInfo\022$\n\010ReadMail\030\r \001(\0132\022.msg.CSRspReadM"
  "ail\022,\n\014GetMailAward\030\016 \001(\0132\026.msg.CSRspGet"
  "MailAward\022 \n\006BuyEgg\030\017 \001(\0132\020.msg.CSRspBuy"
  "Egg\022*\n\013UserNameSet\030\020 \001(\0132\025.msg.CSRspUser"
  "NameSet\0220\n\016UserNameRandom\030\021 \001(\0132\030.msg.CS"
  "RspUserNameRandom\022(\n\nHeadPicSet\030\022 \001(\0132\024."
  "msg.CSRspHeadPicSet\0224\n\020DressChessPlayer\030"
  "\023 \001(\0132\032.msg.CSRspDressChessPlayer\022(\n\nDre"
  "ssScene\030\024 \001(\0132\024.msg.CSRspDressScene\022$\n\010P"
  "vpLogin\030\025 \001(\0132\022.msg.CSRspPvpLogin\022 \n\006Pvp"
  "End\030\030 \001(\0132\020.msg.CSRspPvpEnd\022,\n\014PlayerFin"
  "ish\030\031 \001(\0132\026.msg.CSRspPlayerFinish\022(\n\nPla"
  "yerQuit\030\032 \001(\0132\024.msg.CSRspPlayerQuit\022$\n\010S"
  "ellItem\030\033 \001(\0132\022.msg.CSRspSellItem\022,\n\014Get"
  "EvalAward\030\034 \001(\0132\026.msg.CSRspGetEvalAward\022"
  "0\n\016UseChessPlayer\030\035 \001(\0132\030.msg.CSRspUseCh"
  "essPlayer\022(\n\nGuidReport\030\036 \001(\0132\024.msg.CSRs"
  "pGuidReport\022,\n\014GetCodeAward\030\037 \001(\0132\026.msg."
  "CSRspGetCodeAward\022*\n\013RoundReport\030  \001(\0132\025"
  ".msg.CSRspRoundReport\0222\n\017LoadingProgress"
  "\030! \001(\0132\031.msg.CSRspLoadingProgress\022\"\n\007Pvp"
  "Chat\030\" \001(\0132\021.msg.CSRspPvpChat\022,\n\014ChessCo"
  "mbine\030# \001(\0132\026.msg.CSRspChessCombine\022 \n\006E"
  "xpose\030$ \001(\0132\020.msg.CSRspExpose\022,\n\014ApplyOr"
  "derId\030% \001(\0132\026.msg.CSRspApplyOrderId\0222\n\017R"
  "eportOrderInfo\030& \001(\0132\031.msg.CSRspReportOr"
  "derInfo\022\"\n\007SetItem\030\' \001(\0132\021.msg.CSRspSetI"
  "tem\022&\n\tUnsetItem\030( \001(\0132\023.msg.CSRspUnsetI"
  "tem\022(\n\nRandomItem\030) \001(\0132\024.msg.CSRspRando"
  "mItem\022\034\n\004Chat\030* \001(\0132\016.msg.CSRspChat\0220\n\016S"
  "etChessPlayer\030+ \001(\0132\030.msg.CSRspSetChessP"
  "layer\0224\n\020UnsetChessPlayer\030, \001(\0132\032.msg.CS"
  "RspUnsetChessPlayer\022*\n\013GetFansList\030- \001(\013"
  "2\025.msg.CSRspGetFansList\022,\n\014FollowPlayer\030"
  ". \001(\0132\026.msg.CSRspFollowPlayer\0220\n\016Unfollo"
  "wPlayer\030/ \001(\0132\030.msg.CSRspUnfollowPlayer\022"
  "6\n\021PlayersStatusInfo\0300 \001(\0132\033.msg.CSRspPl"
  "ayersStatusInfo\0220\n\016InviteJoinTeam\0301 \001(\0132"
  "\030.msg.CSRspInviteJoinTeam\022$\n\010JoinTeam\0302 "
  "\001(\0132\022.msg.CSRspJoinTeam\0226\n\021ReportPayResp"
  "onse\0303 \001(\0132\033.msg.CSRspReportPayResponse\022"
  "0\n\016RejectJoinTeam\0304 \001(\0132\030.msg.CSRspRejec"
  "tJoinTeam\022(\n\nShieldChat\0305 \001(\0132\024.msg.CSRs"
  "pShieldChat\0224\n\020BuyPassportLevel\0306 \001(\0132\032."
  "msg.CSRspBuyPassportLevel\0222\n\017UpgradePass"
  "port\0307 \001(\0132\031.msg.CSRspUpgradePassport\022>\n"
  "\025GetPassportLevelAward\0308 \001(\0132\037.msg.CSRsp"
  "GetPassportLevelAward\022<\n\024GetPassportTask"
  "Award\0309 \001(\0132\036.msg.CSRspGetPassportTaskAw"
  "ard\022\"\n\007TelBook\030: \001(\0132\021.msg.CSRspTelBook\022"
  "4\n\020ActivatePassport\030; \001(\0132\032.msg.CSRspAct"
  "ivatePassport\0220\n\016RankSeasonEval\030< \001(\0132\030."
  "msg.CSRspRankSeasonEval\022*\n\013BindAccount\030="
  " \001(\0132\025.msg.CSRspBindAccount\0221\n\017IncAdsSho"
  "wCount\030> \001(\0132\030.msg.CSRspIncAdShowCount\022,"
  "\n\014UseBonusCard\030\? \001(\0132\026.msg.CSRspUseBonus"
  "Card\0220\n\016GetSeasonAward\030@ \001(\0132\030.msg.CSRsp"
  "GetSeasonAward\022>\n\025GetAlphaActivityAward\030"
  "A \001(\0132\037.msg.CSRspGetAlphaActivityAward\0222"
  "\n\017GetLanguageData\030B \001(\0132\031.msg.CSRspGetLa"
  "nguageData\0224\n\020GetActivityAward\030C \001(\0132\032.m"
  "sg.CSRspGetActivityAward\0222\n\017GetActivityD"
  "ata\030D \001(\0132\031.msg.CSRspGetActivityData\022\"\n\007"
  "SendSms\030E \001(\0132\021.msg.CSRspSendSms\022.\n\rGetM"
  "eleeAward\030F \001(\0132\027.msg.CSRspGetMeleeAward"
  "\022*\n\013AddAiToTeam\030G \001(\0132\025.msg.CSRspAddAiTo"
  "Team\022\036\n\005Share\030H \001(\0132\017.msg.CSRspShare\022.\n\r"
  "SkipInterface\030I \001(\0132\027.msg.CSRspSkipInter"
  "face\022$\n\010TeamGame\030J \001(\0132\022.msg.CSRspTeamGa"
  "me\022*\n\013SetTeamMode\030K \001(\0132\025.msg.CSRspSetTe"
  "amMode\022G\n\030HistoryPvpShowPermission\030L \001(\013"
  "2%.msg.CSRspSetHistoryPvpShowPermission\022"
  "(\n\nSearchTeam\030M \001(\0132\024.msg.CSRspSearchTea"
  "m\022&\n\tApplyChat\030N \001(\0132\023.msg.CSRspApplyCha"
  "t\022&\n\tChatLogin\030O \001(\0132\023.msg.CSRspChatLogi"
  "n\022.\n\rProbeNetDelay\030P \001(\0132\027.msg.CSRspProb"
  "eNetDelay\022\"\n\007GetEggs\030Q \001(\0132\021.msg.CSRspGe"
  "tEggs\022$\n\010BuyGoods\030R \001(\0132\022.msg.CSRspBuyGo"
  "ods\022>\n\025ExchangePassportGoods\030S \001(\0132\037.msg"
  ".CSRspExchangePassportGoods\022:\n\023UsePasspo"
  "rtTaskCard\030T \001(\0132\035.msg.CSRspUsePassportT"
  "askCard\022.\n\rOpenRandChest\030U \001(\0132\027.msg.CSR"
  "spOpenRandChest\022(\n\nEggLottery\030V \001(\0132\024.ms"
  "g.CSRspEggLottery\022:\n\023QueryDiamondBalance"
  "\030W \001(\0132\035.msg.CSRspQueryDiamondBalance\022\"\n"
  "\007UseItem\030X \001(\0132\021.msg.CSRspUseItem\0226\n\021Use"
  "ExperienceCard\030Y \001(\0132\033.msg.CSRspUseExper"
  "ienceCard\0220\n\016RandTargetItem\030Z \001(\0132\030.msg."
  "CSRspRandTargetItem\022,\n\014AddBlacklist\030[ \001("
  "\0132\026.msg.CSRspAddBlacklist\0222\n\017RemoveBlack"
  "list\030\\ \001(\0132\031.msg.CSRspRemoveBlacklist\0226\n"
  "\021ReportPlayerBirth\030] \001(\0132\033.msg.CSRspRepo"
  "rtPlayerBirth\0222\n\017ReportInfoInput\030^ \001(\0132\031"
  ".msg.CSRspReportInfoInput\022<\n\024SendVerific"
  "ationCode\030_ \001(\0132\036.msg.CSRspSendVerificat"
  "ionCode\0222\n\017BindPhoneNumber\030` \001(\0132\031.msg.C"
  "SRspBindPhoneNumber\022*\n\013WorldInvite\030a \001(\013"
  "2\025.msg.CSRspWorldInvite\0224\n\020RemoveExpireI"
  "tem\030b \001(\0132\032.msg.CSRspRemoveExpireItem\022,\n"
  "\014GetMallGoods\030c \001(\0132\026.msg.CSRspGetMallGo"
  "ods\022,\n\014BuyMallGoods\030d \001(\0132\026.msg.CSRspBuy"
  "MallGoods\0222\n\017BindSharingCode\030e \001(\0132\031.msg"
  ".CSRspBindSharingCode\022(\n\nWXBlessBag\030f \001("
  "\0132\024.msg.CSRspWXBlessBag\022:\n\023UpdateFriends"
  "InGame\030g \001(\0132\035.msg.CSRspUpdateFriendsInG"
  "ame\022*\n\013ShareReward\030h \001(\0132\025.msg.CSRspShar"
  "eReward\022,\n\014AllFightInfo\030i \001(\0132\026.msg.CSRs"
  "pAllFightInfo\022,\n\014GetOldPlayer\030j \001(\0132\026.ms"
  "g.CSRspGetOldPlayer\022.\n\rBindOldPlayer\030k \001"
  "(\0132\027.msg.CSRspBindOldPlayer\022X\n\"SendVerif"
  "icationCodeWithCheckRedis\030l \001(\0132,.msg.CS"
  "RspSendVerificationCodeWithCheckRedis\022.\n"
  "\rReportSetting\030m \001(\0132\027.msg.CSRspReportSe"
  "tting\022$\n\010AntiData\030n \001(\0132\022.msg.CSRspAntiD"
  "ata\022$\n\010TlogData\030o \001(\0132\022.msg.CSRspTlogDat"
  "a\022\"\n\007DaySign\030p \001(\0132\021.msg.CSRspDaySign\022*\n"
  "\013DayFitAvoid\030q \001(\0132\025.msg.CSRspDayFitAvoi"
  "d\0222\n\017ShareCountAward\030r \001(\0132\031.msg.CSRspSh"
  "areCountAward\022.\n\rRealationStar\030s \001(\0132\027.m"
  "sg.CSRspRealationStar\022H\n\032GetRealationSta"
  "rInviteSucc\030t \001(\0132$.msg.CSRspGetRealatio"
  "nStarInviteSucc\0224\n\020GetRealationStar\030u \001("
  "\0132\032.msg.CSRspGetRealationStar\022,\n\014RspActR"
  "ecord\030v \001(\0132\026.msg.CSRspGetActRecord\022.\n\rJ"
  "oinVoiceTeam\030w \001(\0132\027.msg.CSRspJoinVoiceT"
  "eam\022,\n\014JoinVoicePvp\030x \001(\0132\026.msg.CSRspJoi"
  "nVoicePvp\022.\n\rJoinVoiceCamp\030y \001(\0132\027.msg.C"
  "SRspJoinVoiceCamp\0220\n\016UserCountrySet\030z \001("
  "\0132\030.msg.CSRspUserCountrySet\022\"\n\007Observe\030{"
  " \001(\0132\021.msg.CSRspObserve\0222\n\017GetRecommendP"
  "vp\030| \001(\0132\031.msg.CSRspGetRecommendPvp\022,\n\014O"
  "bserveLogin\030} \001(\0132\026.msg.CSRspObserveLogi"
  "n\022*\n\013QuitObserve\030~ \001(\0132\025.msg.CSRspQuitOb"
  "serve\0220\n\016GetObserveInfo\030\177 \001(\0132\030.msg.CSRs"
  "pGetObserveInfo\022%\n\010FreeFlow\030\200\001 \001(\0132\022.msg"
  ".CSRspFreeFlow\022-\n\014SetPushToken\030\201\001 \001(\0132\026."
  "msg.CSRspSetPushToken\022\'\n\tTlogEvent\030\202\001 \001("
  "\0132\023.msg.CSRspTlogEvent\022+\n\013WxVVipAward\030\203\001"
  " \001(\0132\025.msg.CSRspWxVVipAward\0224\n\016RelationS"
  "tarWX\030\204\001 \001(\0132\033.msg.CSRspGetRelationStarW"
  "X\0223\n\017SendWxRedPacket\030\205\001 \001(\0132\031.msg.CSRspS"
  "endWxRedPacket\0223\n\017RecvWxRedPacket\030\206\001 \001(\013"
  "2\031.msg.CSRspRecvWxRedPacket\022-\n\014WxRedPktL"
  "ike\030\207\001 \001(\0132\026.msg.CSRspWxRedPktLike\022-\n\014Wx"
  "RedPktRank\030\210\001 \001(\0132\026.msg.CSRspWxRedPktRan"
  "k\0228\n\023SetObservePrivilege\030\211\001 \001(\0132\032.msg.CS"
  "RspObservePrivilege\0221\n\016PresetFastChat\030\212\001"
  " \001(\0132\030.msg.CSRspPresetFastChat\0221\n\016Change"
  "SlotTeam\030\213\001 \001(\0132\030.msg.CSRspChangeSlotTea"
  "m\0227\n\021ChangeSubModeTeam\030\214\001 \001(\0132\033.msg.CSRs"
  "pChangeSubModeTeam\022\?\n\025ConfirmChangeSlotT"
  "eam\030\215\001 \001(\0132\037.msg.CSRspConfirmChangeSlotT"
  "eam\022+\n\013PvpRoundEnd\030\216\001 \001(\0132\025.msg.CSRspPvp"
  "RoundEnd\022\033\n\003Pvp\030\217\001 \001(\0132\r.msg.CSRspPvp\022\'\n"
  "\tTeamReady\030\220\001 \001(\0132\023.msg.CSRspTeamReady\022\?"
  "\n\025BindOldBusinessPlayer\030\221\001 \001(\0132\037.msg.CSR"
  "spBindOldBusinessPlayer\022\'\n\tTranslate\030\222\001 "
  "\001(\0132\023.msg.CSRspTranslate\022;\n\023SubmitQuesti"
  "onnaire\030\223\001 \001(\0132\035.msg.CSRspSubmitQuestion"
  "naire\0225\n\020CancelChangeSlot\030\224\001 \001(\0132\032.msg.C"
  "SRspCancelChangeSlot\022-\n\014SetChessSkin\030\225\001 "
  "\001(\0132\026.msg.CSRspSetChessSkin\0221\n\016UnsetChes"
  "sSkin\030\226\001 \001(\0132\030.msg.CSRspUnsetChessSkin\022#"
  "\n\007Compose\030\227\001 \001(\0132\021.msg.CSRspCompose\022\037\n\005V"
  "ideo\030\230\001 \001(\0132\017.msg.CSRspVideo\022/\n\rOffHelpR"
  "eddot\030\231\001 \001(\0132\027.msg.CSRspOffHelpReddot\0221\n"
  "\016ChangeLanguage\030\232\001 \001(\0132\030.msg.CSRspChange"
  "Language\022+\n\013SetProvince\030\233\001 \001(\0132\025.msg.CSR"
  "spSetProvince\022/\n\rLongyuanVoice\030\234\001 \001(\0132\027."
  "msg.CSRspLongyuanVoice\0225\n\020EnrollTourname"
  "nt\030\235\001 \001(\0132\032.msg.CSRspEnrollTournament\0229\n"
  "\022JoinTournamentRoom\030\236\001 \001(\0132\034.msg.CSRspJo"
  "inTournamentRoom\022=\n\024TournamentPointAward"
  "\030\237\001 \001(\0132\036.msg.CSRspTournamentPointAward\022"
  "5\n\020GetEnrollPlayers\030\240\001 \001(\0132\032.msg.CSRspGe"
  "tEnrollPlayers\022+\n\013DealWebMail\030\241\001 \001(\0132\025.m"
  "sg.CSRspDealWebMail\0221\n\016ChallengeAgain\030\242\001"
  " \001(\0132\030.msg.CSRspChallengeAgain\022.\n\013Histor"
  "yChat\030\243\001 \001(\0132\030.msg.CSRspHistoryChatMsg\0229"
  "\n\022SetFriendInvisible\030\244\001 \001(\0132\034.msg.CSRspS"
  "etFriendInvisible\0223\n\017GetObserveAward\030\245\001 "
  "\001(\0132\031.msg.CSRspGetObserveAward\022/\n\rInvite"
  "Observe\030\246\001 \001(\0132\027.msg.CSRspInviteObserve\022"
  "/\n\rRejectObserve\030\247\001 \001(\0132\027.msg.CSRspRejec"
  "tObserve\022+\n\013GetTxPlayer\030\250\001 \001(\0132\025.msg.CSR"
  "spGetTxPlayer\0223\n\017GetThirdPvpInfo\030\251\001 \001(\0132"
  "\031.msg.CSRspGetThirdPvpInfo\0223\n\017MarkPlayer"
  "Guide\030\252\001 \001(\0132\031.msg.CSRspMarkPlayerGuide\022"
  "9\n\020ChessSkinClicked\030\253\001 \001(\0132\036.msg.CSRspMa"
  "rkChessSkinClicked\022=\n\024QueryPs4Entitlemen"
  "ts\030\254\001 \001(\0132\036.msg.CSRsqQueryPs4Entitlement"
  "s\022)\n\nActDaySign\030\255\001 \001(\0132\024.msg.CSRspActDay"
  "Sign\0221\n\020HaveThirdPvpInfo\030\256\001 \001(\0132\026.msg.CS"
  "RspHaveThirdPvp\022-\n\014ActivityMall\030\257\001 \001(\0132\026"
  ".msg.CSRspActivityMall\022!\n\006PsOnly\030\260\001 \001(\0132"
  "\020.msg.CSRspPsOnly\0227\n\021ChangeChannelType\030\261"
  "\001 \001(\0132\033.msg.CSRspChangeChannelType\022/\n\rCu"
  "stomCardOpt\030\262\001 \001(\0132\027.msg.CSRspCustomCard"
  "Opt\0223\n\017ChampionHistory\030\263\001 \001(\0132\031.msg.CSRs"
  "pChampionHistory\022\?\n\025TournamentLastTopRan"
  "k\030\264\001 \001(\0132\037.msg.CSRspTournamentLastTopRan"
  "k\022;\n\023BigWinnerDailyAward\030\265\001 \001(\0132\035.msg.CS"
  "RspBigWinnerDailyAward\022\?\n\025BigWinnerScore"
  "History\030\266\001 \001(\0132\037.msg.CSRspBigWinnerScore"
  "History\022\'\n\tSmeltItem\030\267\001 \001(\0132\023.msg.CSRspS"
  "meltItem\0225\n\020PVEUpTalentLevel\030\270\001 \001(\0132\032.ms"
  "g.CSRspPVEUpTalentLevel\022,\n\nLuckyAward\030\271\001"
  " \001(\0132\027.msg.CSRspPVELuckyAward\022-\n\014ApplyCh"
  "annel\030\272\001 \001(\0132\026.msg.CSRspApplyChannel\022)\n\n"
  "OBTeamInfo\030\254\002 \001(\0132\024.msg.CSRspOBTeamInfo\022"
  "7\n\021GetPvpServerGroup\030\257\002 \001(\0132\033.msg.CSRspG"
  "etPvpServerGroup\022/\n\rReportPvpInfo\030\260\002 \001(\013"
  "2\027.msg.CSRspReportPvpInfo\022-\n\014ChoosePlaye"
  "r\030\261\002 \001(\0132\026.msg.CSRspChoosePlayer\022%\n\010Ping"
  "Test\030\262\002 \001(\0132\022.msg.CSRspPingTest\0225\n\020Repor"
  "tRegionInfo\030\263\002 \001(\0132\032.msg.CSRspReportRegi"
  "onInfo\0221\n\016RecalledPlaeyr\030\264\002 \001(\0132\030.msg.CS"
  "RspRecalledPlayer\022%\n\010WebLogin\030\265\002 \001(\0132\022.m"
  "sg.CSRspWebLogin\0223\n\017InviteCodeReset\030\266\002 \001"
  "(\0132\031.msg.CSRspInviteCodeReset\022-\n\014RecallR"
  "eward\030\267\002 \001(\0132\026.msg.CSRspRecallReward\022;\n\023"
  "SwitchToCommonMatch\030\270\002 \001(\0132\035.msg.CSRspSw"
  "itchToCommonMatch\0225\n\020SwitchModeInTeam\030\300\002"
  " \001(\0132\032.msg.CSRspSwitchModeInTeam\0221\n\016GetT"
  "NRoomState\030\301\002 \001(\0132\030.msg.CSRspGetTNRoomSt"
  "ate\022/\n\rWorkshopMatch\030\312\002 \001(\0132\027.msg.CSRspW"
  "orkshopMatch\0227\n\021BuyWorkshopTicket\030\313\002 \001(\013"
  "2\033.msg.CSRspBuyWorkshopTicket\022=\n\024Favouri"
  "teWorkshopMap\030\314\002 \001(\0132\036.msg.CSRspFavourit"
  "eWorkshopMap\0221\n\016ShortcutMapsOP\030\315\002 \001(\0132\030."
  "msg.CSRspShortcutMapsOP\022\?\n\025PlayersTourna"
  "mentInfo\030\316\002 \001(\0132\037.msg.CSRspPlayersTourna"
  "mentInfo\0225\n\020ScoreWorkshopMap\030\317\002 \001(\0132\032.ms"
  "g.CSRspScoreWorkshopMap\022=\n\024MapsVisitedBy"
  "Friends\030\320\002 \001(\0132\036.msg.CSRspMapsVisitedByF"
  "riends\0221\n\016VerifyRealName\030\336\002 \001(\0132\030.msg.CS"
  "RspVerifyRealName\022#\n\007FakePay\030\337\002 \001(\0132\021.ms"
  "g.CSRspFakePay\022+\n\013GuildCreate\030\350\002 \001(\0132\025.m"
  "sg.CSRspGuildCreate\022)\n\nGuildApply\030\351\002 \001(\013"
  "2\024.msg.CSRspGuildApply\022\'\n\tGuildHome\030\352\002 \001"
  "(\0132\023.msg.CSRspGuildHome\022\'\n\tGuildInfo\030\354\002 "
  "\001(\0132\023.msg.CSRspGuildInfo\022-\n\014GuildApprove"
  "\030\355\002 \001(\0132\026.msg.CSRspGuildApprove\022*\n\tGuild"
  "Role\030\356\002 \001(\0132\026.msg.CSRspGuildSetRole\022+\n\013G"
  "uildModify\030\357\002 \001(\0132\025.msg.CSRspGuildModify"
  "\022-\n\014GuildKickoff\030\360\002 \001(\0132\026.msg.CSRspGuild"
  "Kickoff\022-\n\014GuildDismiss\030\361\002 \001(\0132\026.msg.CSR"
  "spGuildDismiss\022\'\n\tGuildExit\030\362\002 \001(\0132\023.msg"
  ".CSRspGuildExit\022\'\n\tGuildChat\030\363\002 \001(\0132\023.ms"
  "g.CSRspGuildChat\022\'\n\tGuildList\030\364\002 \001(\0132\023.m"
  "sg.CSRspGuildList\022\?\n\025GuildRecommendPlaye"
  "rs\030\365\002 \001(\0132\037.msg.CSRspGuildRecommendPlaye"
  "rs\0223\n\017GuildInviteList\030\366\002 \001(\0132\031.msg.CSRsp"
  "GuildInviteList\022+\n\013GuildInvite\030\367\002 \001(\0132\025."
  "msg.CSRspGuildInvite\0227\n\021GuildRejectInvit"
  "e\030\371\002 \001(\0132\033.msg.CSRspGuildRejectInvite\0229\n"
  "\022GetVngCommentAward\030\206\003 \001(\0132\034.msg.CSRspGe"
  "tVngCommentAward\022-\n\014LevelupChest\030\207\003 \001(\0132"
  "\026.msg.CSRspLevelupChest\022#\n\007WatchAd\030\210\003 \001("
  "\0132\021.msg.CSRspWatchAd\022:\n\020PsTournamentRoom"
  "\030\211\003 \001(\0132\037.msg.CSRspQueryPsTournamentRoom"
  "\0229\n\022GetAdCumulateAward\030\212\003 \001(\0132\034.msg.CSRs"
  "pGetAdCumulateAward\0223\n\017SetMessengerPos\030\226"
  "\004 \001(\0132\031.msg.CSRspSetMessengerPos\022=\n\021Anti"
  "AddictionTime\030\252\004 \001(\0132!.msg.CSRspUpdateAn"
  "tiAddictionTime\0223\n\017CancelReconnect\030\253\004 \001("
  "\0132\031.msg.CSRspCancelReconnect\022\'\n\tReconnec"
  "t\030\255\004 \001(\0132\023.msg.CSRspReconnect\022+\n\013PassThr"
  "ough\030\263\004 \001(\0132\025.msg.CSRspPassThrough\022+\n\013Vi"
  "sitPlayer\030\264\004 \001(\0132\025.msg.CSRspVisitPlayer\022"
  "1\n\016LeaveGameEarly\030\265\004 \001(\0132\030.msg.CSRspLeav"
  "eGameEarly\022+\n\013GDCommonBin\030\266\004 \001(\0132\025.msg.C"
  "SRspGDCommonBin\022-\n\tGDBinData\030\267\004 \001(\0132\031.ms"
  "g.CSRspGDCommonBinData\0225\n\020BattleCampResu"
  "lt\030\270\004 \001(\0132\032.msg.CSRspBattleCampResult\022-\n"
  "\014AutoBattleOP\030\271\004 \001(\0132\026.msg.CSRspAutoBatt"
  "leOP\022-\n\014RestrictUser\030\272\004 \001(\0132\026.msg.CSRspR"
  "estrictUser\0223\n\017EquipSelectRate\030\273\004 \001(\0132\031."
  "msg.CSRspEquipSelectRate\022-\n\014ReportAbsent"
  "\030\274\004 \001(\0132\026.msg.CSRspReportAbsent\022/\n\rRecom"
  "mendWeek\030\330\004 \001(\0132\027.msg.CSRspRecommendWeek"
  "\0227\n\021RecommendOfficial\030\331\004 \001(\0132\033.msg.CSRsp"
  "RecommendOfficial\0223\n\017RecommendLatest\030\332\004 "
  "\001(\0132\031.msg.CSRspRecommendLatest\0225\n\020Recomm"
  "endHistory\030\333\004 \001(\0132\032.msg.CSRspRecommendHi"
  "story\0225\n\020RecommendCollect\030\334\004 \001(\0132\032.msg.C"
  "SRspRecommendCollect\022-\n\014RecommendSet\030\335\004 "
  "\001(\0132\026.msg.CSRspRecommendSet\022A\n\026Recommend"
  "GetCollection\030\336\004 \001(\0132 .msg.CSRspRecommen"
  "dGetCollection\0221\n\016RecommendEquip\030\337\004 \001(\0132"
  "\030.msg.CSRspRecommendEquip\022+\n\013LoginCancel"
  "\030\340\004 \001(\0132\025.msg.CSRspLoginCancel\022/\n\rConver"
  "tDebris\030\341\004 \001(\0132\027.msg.CSRspConvertDebris\022"
  "4\n\016ProtectionCard\030\342\004 \001(\0132\033.msg.CSRspUseP"
  "rotectionCard\0223\n\017UsePassportCard\030\343\004 \001(\0132"
  "\031.msg.CSRspUsePassportCard\022%\n\010SetMedal\030\344"
  "\004 \001(\0132\022.msg.CSRspSetMedal\022)\n\nUnSetMedal\030"
  "\345\004 \001(\0132\024.msg.CSRspUnSetMedal\022-\n\014PlayerMe"
  "dals\030\346\004 \001(\0132\026.msg.CSRspPlayerMedals\022-\n\014U"
  "pdateHotDot\030\347\004 \001(\0132\026.msg.CSRspUpdateHotD"
  "ot\022+\n\013QueryHotDot\030\350\004 \001(\0132\025.msg.CSRspQuer"
  "yHotDot\022%\n\010SetCache\030\351\004 \001(\0132\022.msg.CSRspSe"
  "tCache\022%\n\010GetCache\030\352\004 \001(\0132\022.msg.CSRspGet"
  "Cache\0227\n\021BuyChallengeCount\030\353\004 \001(\0132\033.msg."
  "CSRspBuyChallengeCount\022)\n\nGetPveRank\030\354\004 "
  "\001(\0132\024.msg.CSRspGetPveRank\022+\n\013AuthAccount"
  "\030\355\004 \001(\0132\025.msg.CSRspAuthAccount\022/\n\rUnbind"
  "Account\030\356\004 \001(\0132\027.msg.CSRspUnbindAccount\022"
  "\'\n\tBagToItem\030\357\004 \001(\0132\023.msg.CSRspBagToItem"
  "\022-\n\014IdentifyItem\030\360\004 \001(\0132\026.msg.CSRspIdent"
  "ifyItem\0221\n\016InsetItemAffix\030\361\004 \001(\0132\030.msg.C"
  "SRspInsetItemAffix\0221\n\016UnsetItemAffix\030\362\004 "
  "\001(\0132\030.msg.CSRspUnsetItemAffix\022=\n\024SetDefa"
  "ultAttributes\030\363\004 \001(\0132\036.msg.CSRspSetDefau"
  "ltAttributes\022+\n\013CheckCancel\030\364\004 \001(\0132\025.msg"
  ".CSRspCheckCancel\022/\n\rCancelAccount\030\365\004 \001("
  "\0132\027.msg.CSRspCancelAccount\022%\n\010OAuthApp\030\366"
  "\004 \001(\0132\022.msg.CSRspOAuthApp\0226\n\017SelfNumRank"
  "Data\030\367\004 \001(\0132\034.msg.CSRspGetSelfNumRankDat"
  "a\0223\n\017UpdateCardGroup\030\370\004 \001(\0132\031.msg.CSRspU"
  "pdateCardGroup\022;\n\023UpdateCardGroupName\030\371\004"
  " \001(\0132\035.msg.CSRspUpdateCardGroupName\022)\n\nB"
  "uyPveBuff\030\372\004 \001(\0132\024.msg.CSRspBuyPveBuff\022-"
  "\n\014SetCardGroup\030\373\004 \001(\0132\026.msg.CSRspSetCard"
  "Group\022;\n\023BuyPveChessTemplate\030\374\004 \001(\0132\035.ms"
  "g.CSRspBuyPveChessTemplate\022A\n\026PveUnlockC"
  "hessTemplate\030\375\004 \001(\0132 .msg.CSRspPveUnlock"
  "ChessTemplate\0225\n\020PveSetTeamDeBuff\030\376\004 \001(\013"
  "2\032.msg.CSRspPveSetTeamDeBuff\0221\n\016ChoseCar"
  "dGroup\030\377\004 \001(\0132\030.msg.CSRspChoseCardGroup\022"
  "9\n\022RemoveOvertimeBuff\030\200\005 \001(\0132\034.msg.CSRsp"
  "RemoveOvertimeBuff\022A\n\026UpdateNewCardGroup"
  "Sign\030\201\005 \001(\0132 .msg.CSRspUpdateNewCardGrou"
  "pSign\0225\n\020TDGetOnHookAward\030\204\005 \001(\0132\032.msg.C"
  "SRspTDGetOnHookAward\022!\n\006TDDraw\030\205\005 \001(\0132\020."
  "msg.CsRspTDDraw\022\'\n\tTDBuyCard\030\206\005 \001(\0132\023.ms"
  "g.CsRspTDBuyCard\0221\n\016TDSetCardGroup\030\207\005 \001("
  "\0132\030.msg.CSRspTDSetCardGroup\022\'\n\tTDLevelUp"
  "\030\210\005 \001(\0132\023.msg.CSRspTDLevelUp\022#\n\007TDEquip\030"
  "\211\005 \001(\0132\021.msg.CSRspTDEquip\022;\n\023MentorUpdat"
  "eSetting\030\212\005 \001(\0132\035.msg.CSRspMentorUpdateS"
  "etting\022-\n\014MentorInvite\030\213\005 \001(\0132\026.msg.CSRs"
  "pMentorInvite\022;\n\023MentorConfirmInvite\030\214\005 "
  "\001(\0132\035.msg.CSRspMentorConfirmInvite\022;\n\023Me"
  "ntorRecommendList\030\215\005 \001(\0132\035.msg.CSRspMent"
  "orRecommendList\0229\n\022MentorGetTaskAward\030\216\005"
  " \001(\0132\034.msg.CSRspMentorGetTaskAward\0221\n\016Me"
  "ntorGraduate\030\217\005 \001(\0132\030.msg.CSRspMentorGra"
  "duate\022\?\n\025MentorRelieveRelation\030\220\005 \001(\0132\037."
  "msg.CSRspMentorRelieveRelation\022/\n\rGetMen"
  "torInfo\030\221\005 \001(\0132\027.msg.CSRspGetMentorInfo\022"
  "9\n\022MentorGetInviteMsg\030\222\005 \001(\0132\034.msg.CSRsp"
  "MentorGetInviteMsg\022#\n\007TeamMsg\030\223\005 \001(\0132\021.m"
  "sg.CSRspTeamMsg\022#\n\007ChatMsg\030\224\005 \001(\0132\021.msg."
  "CSRspChatMsg\022+\n\013ChannelChat\030\225\005 \001(\0132\025.msg"
  ".CSRspChannelChat\022\?\n\025UpdateCardGroupBett"
  "er\030\226\005 \001(\0132\037.msg.CSRspUpdateCardGroupBett"
  "er\022A\n\026UpdateCardGroupSetting\030\227\005 \001(\0132 .ms"
  "g.CSRspUpdateCardGroupSetting\0221\n\016SetAuct"
  "ionName\030\230\005 \001(\0132\030.msg.CSRspSetAuctionName"
  "\0225\n\020SetAuctionRemark\030\231\005 \001(\0132\032.msg.CSRspS"
  "etAuctionRemark\022)\n\nGetBalance\030\232\005 \001(\0132\024.m"
  "sg.CSRspGetBalance\0223\n\017RechargeBalance\030\233\005"
  " \001(\0132\031.msg.CSRspRechargeBalance\0223\n\017Withd"
  "rawBalance\030\234\005 \001(\0132\031.msg.CSRspWithdrawBal"
  "ance\022\?\n\025PersonalRecommendMall\030\235\005 \001(\0132\037.m"
  "sg.CSRspPersonalRecommendMall\0229\n\022GetMeda"
  "lChestAward\030\236\005 \001(\0132\034.msg.CSRspGetMedalCh"
  "estAward\0221\n\016SetItemAutoUse\030\237\005 \001(\0132\030.msg."
  "CSRspSetItemAutoUse\"\362K\n\tCSNtfBody\022\"\n\007Kic"
  "kOff\030\001 \001(\0132\021.msg.CSNtfKickOff\022\037\n\007NtfWait"
  "\030\002 \001(\0132\016.msg.CSNtfWait\022&\n\007PassDay\030\003 \001(\0132"
  "\025.msg.CSNtfPassDayBody\022(\n\010PassWeek\030\004 \001(\013"
  "2\026.msg.CSNtfPassWeekBody\022*\n\tPassMonth\030\005 "
  "\001(\0132\027.msg.CSNtfPassMonthBody\022&\n\tWorldCha"
  "t\030\006 \001(\0132\023.msg.CSNtfWorldChat\022\034\n\005Mails\030\007 "
  "\003(\0132\r.msg.CSDTMail\022\"\n\007HeadPic\030\010 \001(\0132\021.ms"
  "g.CSNtfHeadPic\022$\n\010PvpMatch\030\t \001(\0132\022.msg.C"
  "SNtfPvpMatch\022\032\n\003Pvp\030\n \001(\0132\r.msg.CSNtfPvp"
  "\0220\n\016PvpMatchCancel\030\013 \001(\0132\030.msg.CSNtfPvpM"
  "atchCancel\022&\n\tPvpStatus\030\014 \001(\0132\023.msg.CSNt"
  "fPvpStatus\0223\n\021NtfPvpPlayerReady\030\r \001(\0132\030."
  "msg.CSNtfPvpPlayerReady\022$\n\010PvpBegin\030\016 \001("
  "\0132\022.msg.CSNtfPvpBegin\022,\n\014PlayerFinish\030\020 "
  "\001(\0132\026.msg.CSNtfPlayerFinish\022 \n\006PvpEnd\030\021 "
  "\001(\0132\020.msg.CSNtfPvpEnd\022\"\n\007Marquee\030\022 \001(\0132\021"
  ".msg.CSNtfMarquee\022.\n\rRemoveMarquee\030\023 \001(\013"
  "2\027.msg.CSNtfRemoveMarquee\0222\n\017LoadingProg"
  "ress\030\024 \001(\0132\031.msg.CSNtfLoadingProgress\022\"\n"
  "\007PvpChat\030\025 \001(\0132\021.msg.CSNtfPvpChat\022 \n\006Rel"
  "oad\030\026 \001(\0132\020.msg.CSNtfReload\022\032\n\003Pay\030\027 \001(\013"
  "2\r.msg.CSNtfPay\022\034\n\004Chat\030\030 \001(\0132\016.msg.CSNt"
  "fChat\022(\n\nFollowList\030\031 \001(\0132\024.msg.CSNtfFol"
  "lowList\022*\n\013NewFollower\030\032 \001(\0132\025.msg.CSNtf"
  "NewFollower\022,\n\014LostFollower\030\033 \001(\0132\026.msg."
  "CSNtfLostFollower\0220\n\016InviteJoinTeam\030\034 \001("
  "\0132\030.msg.CSNtfInviteJoinTeam\0220\n\016PlayerJoi"
  "nTeam\030\035 \001(\0132\030.msg.CSNtfPlayerJoinTeam\0222\n"
  "\017PlayerLeaveTeam\030\036 \001(\0132\031.msg.CSNtfPlayer"
  "LeaveTeam\0226\n\021KickOffTeamPlayer\030\037 \001(\0132\033.m"
  "sg.CSNtfKickOffTeamPlayer\022\"\n\007TeamMsg\030  \001"
  "(\0132\021.msg.CSNtfTeamMsg\022&\n\tTeamReady\030! \001(\013"
  "2\023.msg.CSNtfTeamReady\0220\n\016RejectJoinTeam\030"
  "\" \001(\0132\030.msg.CSNtfRejectJoinTeam\022 \n\006Notic"
  "e\030# \001(\0132\020.msg.CSNtfNotice\022,\n\014RemoveNotic"
  "e\030$ \001(\0132\026.msg.CSNtfRemoveNotice\0228\n\022Upgra"
  "deBattleStage\030% \001(\0132\034.msg.CSNtfUpgradeBa"
  "ttleStage\022<\n\024PassportTaskProgress\030& \001(\0132"
  "\036.msg.CSNtfPassportTaskProgress\0220\n\016RankS"
  "easonEval\030\' \001(\0132\030.msg.CSNtfRankSeasonEva"
  "l\022,\n\014BindAccounts\030( \001(\0132\026.msg.CSNtfBindA"
  "ccounts\0228\n\022SeasonTaskProgress\030) \001(\0132\034.ms"
  "g.CSNtfSeasonTaskProgress\022.\n\rAlphaActivi"
  "ty\030* \001(\0132\027.msg.CSNtfAlphaActivity\022<\n\024Off"
  "SeasonToNewSeason\030+ \001(\0132\036.msg.CSNtfOffSe"
  "asonToNewSeason\0222\n\017LanguageMd5List\030, \001(\013"
  "2\031.msg.CSNtfLanguageMd5List\0224\n\020ActivityP"
  "rogress\030- \001(\0132\032.msg.CSNtfActivityProgres"
  "s\0220\n\016RemoveActivity\030. \001(\0132\030.msg.CSNtfRem"
  "oveActivity\0220\n\016ActivityConfig\030/ \001(\0132\030.ms"
  "g.CSNtfActivityConfig\0226\n\021MeleeTaskProgre"
  "ss\0300 \001(\0132\033.msg.CSNtfMeleeTaskProgress\022*\n"
  "\013SetTeamMode\0301 \001(\0132\025.msg.CSNtfSetTeamMod"
  "e\022,\n\014PassportOpen\0302 \001(\0132\026.msg.CSNtfPassp"
  "ortOpen\022.\n\rPassportClose\0303 \001(\0132\027.msg.CSN"
  "tfPassportClose\022&\n\tWeekIndex\0304 \001(\0132\023.msg"
  ".CSNtfWeekIndex\022(\n\nPvpHistory\0305 \001(\0132\024.ms"
  "g.CSNtfPvpHistory\022(\n\nTeamPvpEnd\0306 \001(\0132\024."
  "msg.CSNtfTeamPvpEnd\022.\n\rProbeNetDelay\0307 \001"
  "(\0132\027.msg.CSNtfProbeNetDelay\022,\n\014RefreshGo"
  "ods\0308 \001(\0132\026.msg.CSNtfRefreshGoods\022(\n\nRem"
  "oveEggs\0309 \001(\0132\024.msg.CSNtfRemoveEggs\022&\n\tS"
  "witchSet\030: \001(\0132\023.msg.CSNtfSwitchSet\022&\n\tB"
  "lacklist\030; \001(\0132\023.msg.CSNtfBlacklist\022>\n\025B"
  "indPhoneNumberSwitch\030< \001(\0132\037.msg.CSNtfBi"
  "ndPhoneNumberSwitch\022*\n\013WorldInvite\030= \001(\013"
  "2\025.msg.CSNtfWorldInvite\022(\n\nMallNotice\030> "
  "\001(\0132\024.msg.CSNtfMallNotice\022&\n\tPrivilege\030\?"
  " \001(\0132\023.msg.CSNtfPrivilege\022$\n\010AARemind\030@ "
  "\001(\0132\022.msg.CSNtfAARemind\022\036\n\005AABan\030A \001(\0132\017"
  ".msg.CSNtfAABan\022$\n\010AAVerify\030B \001(\0132\022.msg."
  "CSNtfAAVerify\022*\n\013PhoneNumber\030C \001(\0132\025.msg"
  ".CSNtfPhoneNumber\022,\n\014AntiCallBack\030D \001(\0132"
  "\026.msg.CSNtfAntiCallBack\0220\n\016FortuneBagTim"
  "e\030E \001(\0132\030.msg.CSNtfFortuneBagTime\022(\n\nUpd"
  "ateItem\030F \001(\0132\024.msg.CSNtfUpdateItem\022*\n\013C"
  "reditScore\030G \001(\0132\025.msg.CSNtfCreditScore\022"
  "\"\n\007BuffAct\030H \001(\0132\021.msg.CSNtfBuffAct\022.\n\rA"
  "ctivityGroup\030I \001(\0132\027.msg.CSNtfActivityGr"
  "oup\022&\n\tClearChat\030J \001(\0132\023.msg.CSNtfClearC"
  "hat\022(\n\nForbidInfo\030K \001(\0132\024.msg.CSNtfForbi"
  "dInfo\022,\n\014MidasDiamond\030L \001(\0132\026.msg.CSNtfM"
  "idasDiamond\022.\n\rJoinVoiceTeam\030M \001(\0132\027.msg"
  ".CSNtfJoinVoiceTeam\022,\n\014JoinVoicePvp\030N \001("
  "\0132\026.msg.CSNtfJoinVoicePvp\022.\n\rJoinVoiceCa"
  "mp\030O \001(\0132\027.msg.CSNtfJoinVoiceCamp\022 \n\006WxV"
  "Vip\030P \001(\0132\020.msg.CSNtfWxVVip\022$\n\010FreeFlow\030"
  "Q \001(\0132\022.msg.CSNtfFreeFlow\022.\n\rObserveStat"
  "us\030R \001(\0132\027.msg.CSNtfObserveStatus\022*\n\013Gam"
  "eMarquee\030S \001(\0132\025.msg.CSNtfGameMarquee\022*\n"
  "\013WxRedPacket\030T \001(\0132\025.msg.CSNtfWxRedPacke"
  "t\022$\n\010GmSysMsg\030U \001(\0132\022.msg.CSNtfGmSysMsg\022"
  ".\n\rNewPunishment\030V \001(\0132\027.msg.CSNtfNewPun"
  "ishment\022$\n\010TeamSlot\030W \001(\0132\022.msg.CSNtfTea"
  "mSlot\022*\n\013TeamSubMode\030X \001(\0132\025.msg.CSNtfTe"
  "amSubMode\0220\n\016TeamSlotStatus\030Y \001(\0132\030.msg."
  "CSNtfTeamSlotStatus\0220\n\016PunishmentInfo\030Z "
  "\001(\0132\030.msg.CSNtfPunishmentInfo\0224\n\020RemoveP"
  "unishment\030[ \001(\0132\032.msg.CSNtfRemovePunishm"
  "ent\022(\n\nPvpConfirm\030\\ \001(\0132\024.msg.CSNtfPvpCo"
  "nfirm\022,\n\014MatchSuccess\030] \001(\0132\026.msg.CSNtfM"
  "atchSuccess\0226\n\021OldBusinessPlayer\030^ \001(\0132\033"
  ".msg.CSNtfOldBusinessPlayer\0220\n\016ChangeTea"
  "mSlot\030_ \001(\0132\030.msg.CSNtfChangeTeamSlot\022<\n"
  "\024RefuseChangeTeamSlot\030` \001(\0132\036.msg.CSNtfR"
  "efuseChangeTeamSlot\0224\n\020CancelChangeSlot\030"
  "a \001(\0132\032.msg.CSNtfCancelChangeSlot\022.\n\rSho"
  "wChessSkin\030b \001(\0132\027.msg.CSNtfShowChessSki"
  "n\022,\n\014OnHelpReddot\030c \001(\0132\026.msg.CSNtfOnHel"
  "pReddot\022&\n\tBagUpdate\030d \001(\0132\023.msg.CSNtfBa"
  "gUpdate\022,\n\014RefreshMelee\030e \001(\0132\026.msg.CSNt"
  "fRefreshMelee\022$\n\010WebLogin\030f \001(\0132\022.msg.CS"
  "NtfWebLogin\0226\n\021CurrentTournament\030g \001(\0132\033"
  ".msg.CSNtfCurrentTournament\0222\n\017Tournamen"
  "tBegin\030h \001(\0132\031.msg.CSNtfTournamentBegin\022"
  ">\n\025TournamentEnrollBegin\030i \001(\0132\037.msg.CSN"
  "tfTournamentEnrollBegin\022:\n\023TournamentEnr"
  "ollEnd\030j \001(\0132\035.msg.CSNtfTournamentEnroll"
  "End\0228\n\022JoinTournamentRoom\030k \001(\0132\034.msg.CS"
  "NtfJoinTournamentRoom\022.\n\rTournamentEnd\030l"
  " \001(\0132\027.msg.CSNtfTournamentEnd\022.\n\rTournam"
  "entOut\030m \001(\0132\027.msg.CSNtfTournamentOut\0228\n"
  "\022TournamentRoundEnd\030n \001(\0132\034.msg.CSNtfTou"
  "rnamentRoundEnd\022.\n\rLuckStarAward\030o \001(\0132\027"
  ".msg.CSNtfLuckStarAward\022.\n\rInviteObserve"
  "\030p \001(\0132\027.msg.CSNtfInviteObserve\022.\n\rRejec"
  "tObserve\030q \001(\0132\027.msg.CSNtfRejectObserve\022"
  "(\n\nChestCount\030r \001(\0132\024.msg.CSNtfChestCoun"
  "t\022*\n\013RecruitInfo\030s \001(\0132\025.msg.CSNtfRecrui"
  "tInfo\022.\n\rRecruitPlayer\030t \001(\0132\027.msg.CSNtf"
  "RecruitPlayer\022:\n\023RecruitPlayerBattle\030u \001"
  "(\0132\035.msg.CSNtfRecruitPlayerBattle\022*\n\013Bet"
  "OnBounty\030v \001(\0132\025.msg.CSNtfBetOnBounty\0228\n"
  "\022ActivityTaskUnlock\030w \001(\0132\034.msg.CSNtfAct"
  "ivityTaskUnlock\022,\n\014PsServerOnly\030x \001(\0132\026."
  "msg.CSNtfPsServerOnly\0222\n\017AddThirdPvpInfo"
  "\030y \001(\0132\031.msg.CSNtfAddThirdPvpInfo\0222\n\017Del"
  "ThirdPvpInfo\030z \001(\0132\031.msg.CSNtfDelThirdPv"
  "pInfo\022.\n\rPs4ServerOnly\030{ \001(\0132\027.msg.CSNtf"
  "Ps4ServerOnly\022.\n\rLuckMallGoods\030| \001(\0132\027.m"
  "sg.CSNtfLuckMallGoods\022,\n\014ChessListErr\030} "
  "\001(\0132\026.msg.CSNtfChessListErr\022*\n\013ChestReco"
  "rd\030~ \001(\0132\025.msg.CSNtfChestRecord\022\"\n\007GOAIn"
  "fo\030\177 \001(\0132\021.msg.CSNtfGOAInfo\022(\n\tMedalInfo"
  "\030\200\001 \001(\0132\024.msg.CSNtfMedalInfos\022#\n\007MedalId"
  "\030\201\001 \001(\0132\021.msg.CSNtfMedalId\022%\n\010PvpReset\030\202"
  "\001 \001(\0132\022.msg.CSNtfPvpReset\022#\n\007DelMail\030\203\001 "
  "\001(\0132\021.msg.CSNtfDelMail\022%\n\010ItemInfo\030\204\001 \001("
  "\0132\022.msg.CSNtfItemInfo\022+\n\013PassportNum\030\205\001 "
  "\001(\0132\025.msg.CSNtfPassportNum\022;\n\023PassportYe"
  "arCardNum\030\206\001 \001(\0132\035.msg.CSNtfPassportYear"
  "CardNum\022!\n\006TeamOP\030\254\002 \001(\0132\020.msg.CSNtfTeam"
  "OP\022+\n\013TeamDismiss\030\255\002 \001(\0132\025.msg.CSNtfTeam"
  "Dismiss\0225\n\020SwitchModeInTeam\030\256\002 \001(\0132\032.msg"
  ".CSNtfSwitchModeInTeam\022\'\n\tAddBanner\030\257\002 \001"
  "(\0132\023.msg.CSNtfAddBanner\022-\n\014RemoveBanner\030"
  "\260\002 \001(\0132\026.msg.CSNtfRemoveBanner\0223\n\017Single"
  "RoundFlow\030\261\002 \001(\0132\031.msg.CSNtfSingleRoundF"
  "low\022)\n\nTeamStatus\030\262\002 \001(\0132\024.msg.CSNtfTeam"
  "Status\022\'\n\tTNGameEnd\030\300\002 \001(\0132\023.msg.CSNtfTN"
  "GameEnd\022\?\n\022PlayerLackResource\030\312\002 \001(\0132\".m"
  "sg.CSNtfPlayerLackResourceInTeam\022/\n\rFavM"
  "apRemoved\030\313\002 \001(\0132\027.msg.CSNtfFavMapRemove"
  "d\022;\n\023WorkshopMatchResult\030\314\002 \001(\0132\035.msg.CS"
  "NtfWorkshopMatchResult\022=\n\024BigWinnerExpan"
  "dMatch\030\315\002 \001(\0132\036.msg.CSNtfBigWinnerExpand"
  "Match\0221\n\016VerifyRealName\030\336\002 \001(\0132\030.msg.CSN"
  "tfVerifyRealName\022\'\n\tGuildJoin\030\350\002 \001(\0132\023.m"
  "sg.CSNtfGuildJoin\0222\n\014MemberChange\030\351\002 \001(\013"
  "2\033.msg.CSNtfGuildMemberChange\022-\n\014GuildKi"
  "ckoff\030\352\002 \001(\0132\026.msg.CSNtfGuildKickoff\0223\n\017"
  "GuildRoleChange\030\353\002 \001(\0132\031.msg.CSNtfGuildR"
  "oleChange\0223\n\017GuildAttrChange\030\354\002 \001(\0132\031.ms"
  "g.CSNtfGuildAttrChange\022\'\n\tGuildChat\030\355\002 \001"
  "(\0132\023.msg.CSNtfGuildChat\022+\n\013NewGuildLog\030\356"
  "\002 \001(\0132\025.msg.CSNtfNewGuildLog\0228\n\017Applican"
  "tChange\030\357\002 \001(\0132\036.msg.CSNtfGuildApplicant"
  "Change\0224\n\rInviteeChange\030\360\002 \001(\0132\034.msg.CSN"
  "tfGuildInviteeChange\0221\n\016GuildNewInvite\030\373"
  "\002 \001(\0132\030.msg.CSNtfGuildNewInvite\022\'\n\tGuild"
  "Info\030\374\002 \001(\0132\023.msg.CSNtfGuildInfo\0226\n\rVngA"
  "wardReset\030\220\003 \001(\0132\036.msg.CSNtfVngCommentAw"
  "ardReset\022#\n\007AdAward\030\221\003 \001(\0132\021.msg.CSNtfAd"
  "Award\022#\n\007AdCount\030\222\003 \001(\0132\021.msg.CSNtfAdCou"
  "nt\022%\n\010UIForbid\030\223\003 \001(\0132\022.msg.CSNtfUIForbi"
  "d\022\?\n\025PvpUpdateMessengerPos\030\212\004 \001(\0132\037.msg."
  "CSNtfPvpUpdateMessengerPos\0227\n\021PvpPlayerL"
  "oggedIn\030\213\004 \001(\0132\033.msg.CSNtfPvpPlayerLogge"
  "dIn\022+\n\013PassThrough\030\266\004 \001(\0132\025.msg.CSNtfPas"
  "sThrough\022\031\n\002AA\030\272\004 \001(\0132\014.msg.CSNtfAA\022-\n\014P"
  "vpReconnect\030\273\004 \001(\0132\026.msg.CSNtfPvpReconne"
  "ct\0229\n\022UpdateBattleResult\030\274\004 \001(\0132\034.msg.CS"
  "NtfUpdateBattleResult\022+\n\013VisitPlayer\030\275\004 "
  "\001(\0132\025.msg.CSNtfVisitPlayer\0221\n\016KrIdentity"
  "Auth\030\276\004 \001(\0132\030.msg.CSNtfKrIdentityAuth\0221\n"
  "\016KrAddictionTip\030\277\004 \001(\0132\030.msg.CSNtfKrAddi"
  "ctionTip\0221\n\016LeaveGameEarly\030\300\004 \001(\0132\030.msg."
  "CSNtfLeaveGameEarly\022=\n\024KrAddictionCountd"
  "own\030\301\004 \001(\0132\036.msg.CSNtfKrAddictionCountdo"
  "wn\0221\n\016HistroyChatMsg\030\302\004 \001(\0132\030.msg.CSNtfH"
  "istoryChatMsg\022\'\n\006GMTime\030\303\004 \001(\0132\026.msg.CSN"
  "tfSystemGmTime\022)\n\nChangeName\030\304\004 \001(\0132\024.ms"
  "g.CSNtfChangeName\022%\n\010FirstPay\030\305\004 \001(\0132\022.m"
  "sg.CSNtfFirstPay\022/\n\nExpChanged\030\306\004 \001(\0132\032."
  "msg.CSNtfPlayerExpChanged\022-\n\014TaskProgres"
  "s\030\307\004 \001(\0132\026.msg.CSNtfTaskProgress\022;\n\023NewP"
  "layerGuideEnded\030\310\004 \001(\0132\035.msg.CSNtfNewPla"
  "yerGuideEnded\022\'\n\tTasksInfo\030\311\004 \001(\0132\023.msg."
  "CSNtfTasksInfo\022/\n\rPvpAwardsInfo\030\312\004 \001(\0132\027"
  ".msg.CSNtfPvpAwardsInfo\022%\n\010AddAward\030\313\004 \001"
  "(\0132\022.msg.CSNtfAddAward\022-\n\014LimitRefresh\030\314"
  "\004 \001(\0132\026.msg.CSNtfLimitRefresh\022-\n\014UpdateN"
  "otice\030\315\004 \001(\0132\026.msg.CSNtfUpdateNotice\022C\n\027"
  "UpdatePveChallengeCount\030\316\004 \001(\0132!.msg.CSN"
  "tfUpdatePveChallengeCount\022)\n\nAdDiscount\030"
  "\317\004 \001(\0132\024.msg.CSNtfAdDiscount\022#\n\007CalcMmr\030"
  "\320\004 \001(\0132\021.msg.CSNtfCalcMmr\022\033\n\003Bag\030\321\004 \001(\0132"
  "\r.msg.CSNtfBag\0221\n\016ItemAttributes\030\322\004 \001(\0132"
  "\030.msg.CSNtfItemAttributes\0223\n\017PVPAffixTri"
  "gger\030\323\004 \001(\0132\031.msg.CSNtfPvpAffixTrigger\022/"
  "\n\rUpdatePvpData\030\324\004 \001(\0132\027.msg.CSNtfUpdate"
  "PvpData\0223\n\017UpgradePassport\030\325\004 \001(\0132\031.msg."
  "CSNtfUpgradePassport\0225\n\020UpdateTeamDeBuff"
  "\030\326\004 \001(\0132\032.msg.CSNtfUpdateTeamDeBuff\022#\n\007P"
  "veEval\030\327\004 \001(\0132\021.msg.CSNtfPveEval\0223\n\017Unlo"
  "ckCardGroup\030\330\004 \001(\0132\031.msg.CSNtfUnlockCard"
  "Group\0227\n\021CustomPveActivity\030\331\004 \001(\0132\033.msg."
  "CSNtfCustomPveActivity\022$\n\nCSNtfGmBan\030\332\004 "
  "\001(\0132\017.msg.CSNtfGmBan\022-\n\014TDPlayerInfo\030\333\004 "
  "\001(\0132\026.msg.CSNtfTDPlayerInfo\0223\n\017MentorInv"
  "iteMsg\030\334\004 \001(\0132\031.msg.CSNtfMentorInviteMsg"
  "\022-\n\014BecomeMentor\030\335\004 \001(\0132\026.msg.CSNtfBecom"
  "eMentor\0221\n\016MentorRelation\030\336\004 \001(\0132\030.msg.C"
  "SNtfMentorRelation\0228\n\024MentorShipTaskUpda"
  "te\030\337\004 \001(\0132\031.msg.CSNtfPupilTaskUpdate\022+\n\013"
  "MentorLevel\030\340\004 \001(\0132\025.msg.CSNtfMentorLeve"
  "l\0221\n\016CurDressUpdate\030\341\004 \001(\0132\030.msg.CSNtfCu"
  "rDressUpdate\0229\n\022ChangeExchangeMark\030\342\004 \001("
  "\0132\034.msg.CSNtfChangeExchangeMark\0223\n\017Refre"
  "shPassport\030\343\004 \001(\0132\031.msg.CSNtfRefreshPass"
  "port\022-\n\014GmRemoveMail\030\344\004 \001(\0132\026.msg.CSNtfG"
  "mRemoveMail\022+\n\013AutoUseItem\030\345\004 \001(\0132\025.msg."
  "CSNtfAutoUseItem*\212\255\001\n\007CSMsgID\022\020\n\014CS_REQ_"
  "BEGIN\020\000\022\r\n\tREQ_HEART\020\001\022\r\n\tREQ_LOGIN\020\002\022\025\n"
  "\021REQ_VERSION_CHECK\020\003\022\036\n\032REQ_RESOURCE_VER"
  "SION_CHECK\020\004\022\031\n\025REQ_APPLY_HALL_SERVER\020\005\022"
  "\024\n\020REQ_GET_NUM_RANK\020\006\022\022\n\016REQ_WORLD_CHAT\020"
  "\007\022\031\n\025REQ_PLAYERS_BASE_INFO\020\010\022\032\n\026REQ_PLAY"
  "ER_DETAIL_INFO\020\t\022\021\n\rREQ_READ_MAIL\020\n\022\026\n\022R"
  "EQ_GET_MAIL_AWARD\020\013\022\017\n\013REQ_BUY_EGG\020\014\022\024\n\020"
  "REQ_USERNAME_SET\020\r\022\027\n\023REQ_USERNAME_RANDO"
  "M\020\016\022\023\n\017REQ_HEADPIC_SET\020\017\022\013\n\007REQ_PVP\020\020\022\030\n"
  "\024REQ_PVP_MATCH_CANCEL\020\021\022\032\n\026REQ_DRESS_CHE"
  "SS_PLAYER\020\022\022\023\n\017REQ_DRESS_SCENE\020\023\022\021\n\rREQ_"
  "PVP_LOGIN\020\024\022\020\n\014REQ_PVP_SEQS\020\025\022\030\n\024REQ_PVP"
  "_PLAYER_READY\020\026\022\030\n\024REQ_PVP_CLIENT_READY\020"
  "\027\022\026\n\022REQ_REP_PVP_ACTION\020\030\022\017\n\013REQ_PVP_END"
  "\020\031\022\025\n\021REQ_PLAYER_FINISH\020\032\022\023\n\017REQ_PLAYER_"
  "QUIT\020\033\022\021\n\rREQ_SELL_ITEM\020\034\022\026\n\022REQ_GET_EVA"
  "L_AWARD\020\035\022\030\n\024REQ_USE_CHESS_PLAYER\020\036\022\023\n\017R"
  "EQ_GUID_REPORT\020\037\022\026\n\022REQ_GET_CODE_AWARD\020 "
  "\022\024\n\020REQ_ROUND_REPORT\020!\022\030\n\024REQ_LOADING_PR"
  "OGRESS\020\"\022\020\n\014REQ_PVP_CHAT\020#\022\025\n\021REQ_CHESS_"
  "COMBINE\020$\022\016\n\nREQ_EXPOSE\020%\022\026\n\022REQ_APPLY_O"
  "RDER_ID\020&\022\031\n\025REQ_REPORT_ORDER_INFO\020\'\022\020\n\014"
  "REQ_SET_ITEM\020(\022\022\n\016REQ_UNSET_ITEM\020)\022\023\n\017RE"
  "Q_RANDOM_ITEM\020*\022\014\n\010REQ_CHAT\020+\022\030\n\024REQ_SET"
  "_CHESS_PLAYER\020,\022\032\n\026REQ_UNSET_CHESS_PLAYE"
  "R\020-\022\025\n\021REQ_GET_FANS_LIST\020.\022\025\n\021REQ_FOLLOW"
  "_PLAYER\020/\022\027\n\023REQ_UNFOLLOW_PLAYER\0200\022\033\n\027RE"
  "Q_PLAYERS_STATUS_INFO\0201\022\030\n\024REQ_INVITE_JO"
  "IN_TEAM\0202\022\021\n\rREQ_JOIN_TEAM\0203\022\022\n\016REQ_LEAV"
  "E_TEAM\0204\022\033\n\027REQ_KICKOFF_TEAM_PLAYER\0205\022\020\n"
  "\014REQ_TEAM_MSG\0206\022\022\n\016REQ_TEAM_READY\0207\022\030\n\024R"
  "EQ_REJECT_JOIN_TEAM\0208\022\033\n\027REQ_REPORT_PAY_"
  "RESPONSE\0209\022\023\n\017REQ_SHIELD_CHAT\020:\022\032\n\026REQ_B"
  "UY_PASSPORT_LEVEL\020;\022\030\n\024REQ_UPGRADE_PASSP"
  "ORT\020<\022 \n\034REQ_GET_PASSPORT_LEVEL_AWARD\020=\022"
  "\037\n\033REQ_GET_PASSPORT_TASK_AWARD\020>\022\020\n\014REQ_"
  "TEL_BOOK\020\?\022\031\n\025REQ_ACTIVATE_PASSPORT\020@\022\027\n"
  "\023REQ_RANKSEASON_EVAL\020A\022\024\n\020REQ_BIND_ACCOU"
  "NT\020B\022\036\n\032REQ_INCREASE_AD_SHOW_COUNT\020C\022\026\n\022"
  "REQ_USE_BONUS_CARD\020D\022\030\n\024REQ_GET_SEASON_A"
  "WARD\020E\022 \n\034REQ_GET_ALPHA_ACTIVITY_AWARD\020F"
  "\022\031\n\025REQ_GET_LANGUAGE_DATA\020G\022\032\n\026REQ_GET_A"
  "CTIVITY_AWARD\020H\022\031\n\025REQ_GET_ACTIVITY_DATA"
  "\020I\022\020\n\014REQ_SEND_SMS\020J\022\027\n\023REQ_GET_MELEE_AW"
  "ARD\020K\022\026\n\022REQ_ADD_AI_TO_TEAM\020L\022\r\n\tREQ_SHA"
  "RE\020M\022\026\n\022REQ_SKIP_INTERFACE\020N\022\021\n\rREQ_TEAM"
  "_GAME\020O\022\025\n\021REQ_SET_TEAM_MODE\020P\022&\n\"REQ_SE"
  "T_HITORY_PVP_SHOW_PERMISSION\020Q\022\023\n\017REQ_SE"
  "ARCH_TEAM\020R\022\022\n\016REQ_APPLY_CHAT\020S\022\022\n\016REQ_C"
  "HAT_LOGIN\020T\022\027\n\023REQ_PROBE_NET_DELAY\020U\022\020\n\014"
  "REQ_GET_EGGS\020V\022\021\n\rREQ_BUY_GOODS\020W\022\037\n\033REQ"
  "_EXCHANGE_PASSPORT_GOODS\020X\022\036\n\032REQ_USE_PA"
  "SSPORT_TASK_CARD\020Y\022\027\n\023REQ_OPEN_RAND_CHES"
  "T\020Z\022\023\n\017REQ_EGG_LOTTERY\020[\022\035\n\031REQ_QUERY_DI"
  "AMOND_BALANCE\020\\\022\020\n\014REQ_USE_ITEM\020]\022\033\n\027REQ"
  "_USE_EXPERIENCE_CARD\020^\022\030\n\024REQ_RAND_TARGE"
  "T_ITEM\020_\022\025\n\021REQ_ADD_BLACKLIST\020`\022\030\n\024REQ_R"
  "EMOVE_BLACKLIST\020a\022\033\n\027REQ_REPORT_PLAYER_B"
  "IRTH\020b\022\031\n\025REQ_REPORT_INFO_INPUT\020c\022\036\n\032REQ"
  "_SEND_VERIFICATION_CODE\020d\022\031\n\025REQ_BIND_PH"
  "ONE_NUMBER\020e\022\024\n\020REQ_WORLD_INVITE\020f\022\032\n\026RE"
  "Q_REMOVE_EXPIRE_ITEM\020g\022\026\n\022REQ_GET_MALL_G"
  "OODS\020h\022\026\n\022REQ_BUY_MALL_GOODS\020i\022\031\n\025REQ_BI"
  "ND_SHARING_CODE\020j\022\024\n\020REQ_WX_BLESS_BAG\020k\022"
  "\035\n\031REQ_UPDATE_FRIENDS_INGAME\020l\022\024\n\020REQ_SH"
  "ARE_REWARD\020m\022\025\n\021REQ_ALLFIGHT_INFO\020n\022\026\n\022R"
  "EQ_GET_OLD_PLAYER\020o\022\027\n\023REQ_BIND_OLD_PLAY"
  "ER\020p\022/\n+REQ_SEND_VERIFICATION_CODE_WITH_"
  "CHECK_REDIS\020q\022\026\n\022REQ_REPORT_SETTING\020r\022\021\n"
  "\rREQ_ANTI_DATA\020s\022\021\n\rREQ_TLOG_DATA\020t\022\020\n\014R"
  "EQ_DAY_SIGN\020u\022\025\n\021REQ_DAY_FIT_AVOID\020v\022\031\n\025"
  "REQ_SHARE_COUNT_AWARD\020w\022\025\n\021REQ_ACT_ITEM_"
  "EXCH\020x\022\026\n\022REQ_REALATION_STAR\020y\022&\n\"REQ_GE"
  "T_REALATION_STAR_INVITE_SUCC\020z\022\032\n\026REQ_GE"
  "T_REALATION_STAR\020{\022\026\n\022REQ_GET_ACT_RECORD"
  "\020|\022\027\n\023REQ_JOIN_VOICE_TEAM\020}\022\026\n\022REQ_JOIN_"
  "VOICE_PVP\020~\022\027\n\023REQ_JOIN_VOICE_CAMP\020\177\022\030\n\023"
  "REQ_USERCOUNTRY_SET\020\200\001\022 \n\033REQ_OFFLINE_IN"
  "VITE_JOINTEAM\020\201\001\022\020\n\013REQ_OBSERVE\020\202\001\022\032\n\025RE"
  "Q_GET_RECOMMEND_PVP\020\203\001\022\026\n\021REQ_OBSERVE_LO"
  "GIN\020\204\001\022\025\n\020REQ_QUIT_OBSERVE\020\205\001\022\031\n\024REQ_GET"
  "_OBSERVE_INFO\020\206\001\022\022\n\rREQ_FREE_FLOW\020\207\001\022\027\n\022"
  "REQ_SET_PUSH_TOKEN\020\210\001\022\023\n\016REQ_TLOG_EVENT\020"
  "\211\001\022\025\n\020REQ_WXVVIP_AWARD\020\212\001\022\034\n\027REQ_GET_REL"
  "ATIONSTAR_WX\020\213\001\022\027\n\022REQ_WX_REDPKT_SEND\020\214\001"
  "\022\027\n\022REQ_WX_REDPKT_RECV\020\215\001\022\027\n\022REQ_WX_REDP"
  "KT_LIKE\020\216\001\022\027\n\022REQ_WX_REDPKT_RANK\020\217\001\022\036\n\031R"
  "EQ_OBSERVE_PRIVILEGE_SET\020\220\001\022\031\n\024REQ_PRESE"
  "T_FAST_CHAT\020\221\001\022\031\n\024REQ_CHANGE_SLOT_TEAM\020\222"
  "\001\022\035\n\030REQ_CHANGE_SUB_MODE_TEAM\020\223\001\022!\n\034REQ_"
  "CONFIRM_CHANGE_SLOT_TEAM\020\224\001\022\026\n\021REQ_PVP_R"
  "OUND_END\020\225\001\022\033\n\026REQ_OBSERVE_CHAT_LOGIN\020\226\001"
  "\022\024\n\017REQ_PVP_CONFIRM\020\227\001\022\033\n\026REQ_ACTIVITY_P"
  "IC_SHARE\020\230\001\022!\n\034REQ_BIND_OLD_BUSINESS_PLA"
  "YER\020\231\001\022\022\n\rREQ_TRANSLATE\020\232\001\022\035\n\030REQ_SUBMIT"
  "_QUESTIONNAIRE\020\233\001\022\032\n\025REQ_CANCEL_CHANGESL"
  "OT\020\234\001\022\027\n\022REQ_SET_CHESS_SKIN\020\235\001\022\031\n\024REQ_UN"
  "SET_CHESS_SKIN\020\236\001\022\020\n\013REQ_COMPOSE\020\237\001\022\016\n\tR"
  "EQ_VIDEO\020\240\001\022\030\n\023REQ_OFF_HELP_REDDOT\020\241\001\022\030\n"
  "\023REQ_CHANGE_LANGUAGE\020\242\001\022\032\n\025REQ_REPORT_VI"
  "DEO_PLAY\020\243\001\022\025\n\020REQ_SET_PROVINCE\020\244\001\022\027\n\022RE"
  "Q_LONGYUAN_VOICE\020\245\001\022\032\n\025REQ_TOURNAMENT_EN"
  "ROLL\020\246\001\022\035\n\030REQ_JOIN_TOURNAMENT_ROOM\020\247\001\022\037"
  "\n\032REQ_TOURNAMENT_POINT_AWARD\020\250\001\022\026\n\021REQ_D"
  "EAL_WEB_MAIL\020\251\001\022\033\n\026REQ_GET_ENROLL_PLAYER"
  "S\020\252\001\022\030\n\023REQ_CHALLENGE_AGAIN\020\253\001\022\036\n\031REQ_SE"
  "T_FRIEND_INVISIABLE\020\254\001\022\037\n\032REQ_GET_OBSERV"
  "E_TASK_AWARD\020\255\001\022\027\n\022REQ_INVITE_OBSERVE\020\256\001"
  "\022\027\n\022REQ_REJECT_OBSERVE\020\257\001\022\026\n\021REQ_GET_TX_"
  "PLAYER\020\260\001\022\031\n\024REQ_CHOOSE_TX_PLAYER\020\261\001\022\027\n\022"
  "REQ_THIRD_PVP_INFO\020\262\001\022\032\n\025REQ_MARK_PLAYER"
  "_GUIDE\020\263\001\022 \n\033REQ_MARK_CHESS_SKIN_CLICKED"
  "\020\264\001\022\036\n\031REQ_RECRUIT_INVITE_PLAYER\020\265\001\022\035\n\030R"
  "EQ_RECRUIT_BIND_INVITER\020\266\001\022\037\n\032REQ_QUERY_"
  "PS4_ENTITLEMENTS\020\267\001\022\024\n\017REQ_ACT_DAYSIGN\020\270"
  "\001\022\027\n\022REQ_HAVE_THIRD_PVP\020\271\001\022\026\n\021REQ_ACTIVI"
  "TY_MALL\020\272\001\022\017\n\nREQ_PSONLY\020\273\001\022\034\n\027REQ_CHANG"
  "E_CHANNEL_TYPE\020\274\001\022\030\n\023REQ_CUSTOM_CARD_OPT"
  "\020\275\001\022\032\n\025REQ_STATISTICS_REPORT\020\276\001\022\031\n\024REQ_C"
  "HAMPION_HISTORY\020\277\001\022!\n\034REQ_TOURNAMENT_LAS"
  "T_TOP_RANK\020\300\001\022\036\n\031REQ_BIGWINNER_EXPANDMAT"
  "CH\020\301\001\022\035\n\030REQ_BIGWINNER_DAILYAWARD\020\302\001\022 \n\033"
  "REQ_BIGWINNER_SCOREHISITORY\020\303\001\022\023\n\016REQ_SM"
  "ELT_ITEM\020\304\001\022\022\n\rREQ_OAUTH_APP\020\310\001\022\020\n\013REQ_T"
  "EAM_OP\020\254\002\022\025\n\020REQ_OB_TEAM_INFO\020\255\002\022\033\n\026REQ_"
  "REPORT_HEADICONURL\020\256\002\022\035\n\030REQ_GET_PVP_SER"
  "VER_GROUP\020\257\002\022\030\n\023REQ_REPORT_PVP_INFO\020\260\002\022\026"
  "\n\021REQ_CHOOSE_PLAYER\020\261\002\022\022\n\rREQ_PING_TEST\020"
  "\262\002\022\033\n\026REQ_REPORT_REGION_INFO\020\263\002\022\027\n\022REQ_R"
  "ECALLEDPLAYER\020\264\002\022\022\n\rREQ_WEB_LOGIN\020\265\002\022\030\n\023"
  "REQ_INVITECODERESET\020\266\002\022\025\n\020REQ_RECALLREWA"
  "RD\020\267\002\022\035\n\030REQ_SWITCHTO_COMMONMATCH\020\270\002\022\034\n\027"
  "REQ_SWITCH_MODE_IN_TEAM\020\300\002\022\031\n\024REQ_GET_TN"
  "ROOM_STATE\020\301\002\022\027\n\022REQ_WORKSHOP_MATCH\020\312\002\022\034"
  "\n\027REQ_BUY_WORKSHOP_TICKET\020\313\002\022\037\n\032REQ_FAVO"
  "URITE_WORKSHOP_MAP\020\314\002\022\031\n\024REQ_SHORTCUT_MA"
  "PS_OP\020\315\002\022 \n\033REQ_PLAYERS_Tournament_INFO\020"
  "\316\002\022\033\n\026REQ_SCORE_WORKSHOP_MAP\020\317\002\022\037\n\032REQ_M"
  "APS_VISITEDBY_FRIENDS\020\320\002\022\031\n\024REQ_VERIFY_R"
  "EAL_NAME\020\336\002\022\021\n\014REQ_FAKE_PAY\020\337\002\022\025\n\020REQ_GU"
  "ILD_CREATE\020\350\002\022\024\n\017REQ_GUILD_APPLY\020\351\002\022\023\n\016R"
  "EQ_GUILD_HOME\020\352\002\022\023\n\016REQ_GUILD_INFO\020\354\002\022\026\n"
  "\021REQ_GUILD_APPROVE\020\355\002\022\027\n\022REQ_GUILD_SET_R"
  "OLE\020\356\002\022\025\n\020REQ_GUILD_MODIFY\020\357\002\022\026\n\021REQ_GUI"
  "LD_KICKOFF\020\360\002\022\026\n\021REQ_GUILD_DISMISS\020\361\002\022\023\n"
  "\016REQ_GUILD_EXIT\020\362\002\022\023\n\016REQ_GUILD_CHAT\020\363\002\022"
  "\023\n\016REQ_GUILD_LIST\020\364\002\022\037\n\032REQ_GUILD_RECOMM"
  "END_PLAYER\020\365\002\022\025\n\020REQ_GUILD_RESIGN\020\366\002\022\025\n\020"
  "REQ_GUILD_INVITE\020\367\002\022\032\n\025REQ_GUILD_INVITE_"
  "LIST\020\370\002\022\034\n\027REQ_GUILD_REJECT_INVITE\020\371\002\022\032\n"
  "\025REQ_VNG_COMMENT_AWARD\020\206\003\022\027\n\022REQ_LEVEL_U"
  "P_CHEST\020\207\003\022\021\n\014REQ_WATCH_AD\020\210\003\022!\n\034REQ_QUE"
  "RY_PS_TOURNAMENT_ROOM\020\211\003\022\036\n\031REQ_GET_AD_C"
  "UMULATE_AWARD\020\212\003\022\025\n\020REQ_CHANNEL_CHAT\020\213\003\022"
  "\033\n\026REQ_APPLY_CHANNEL_CHAT\020\214\003\022\033\n\026REQ_LEAV"
  "E_CHANNEL_CHAT\020\215\003\022\025\n\020REQ_SET_MSGR_POS\020\364\003"
  "\022\031\n\024REQ_CANCEL_RECONNECT\020\210\004\022\022\n\rREQ_RECON"
  "NECT\020\212\004\022\025\n\020REQ_PASS_THROUGH\020\221\004\022\025\n\020REQ_VI"
  "SIT_PLAYER\020\222\004\022\031\n\024REQ_LEAVE_GAME_EARLY\020\223\004"
  "\022\025\n\020REQ_GDCOMMON_BIN\020\224\004\022\031\n\024REQ_GDCOMMONB"
  "IN_DATA\020\225\004\022\031\n\024REQ_HISTORY_CHAT_MSG\020\226\004\022\032\n"
  "\025REQ_BATTLE_CAMPRESULT\020\227\004\022\027\n\022REQ_AUTO_BA"
  "TTLE_OP\020\230\004\022\026\n\021REQ_RESTRICT_USER\020\231\004\022\032\n\025RE"
  "Q_EQUIP_SELECT_RATE\020\232\004\022\026\n\021REQ_REPORT_ABS"
  "ENT\020\233\004\022\027\n\022REQ_RECOMMEND_WEEK\020\330\004\022\033\n\026REQ_R"
  "ECOMMEND_OFFICIAL\020\331\004\022\031\n\024REQ_RECOMMEND_LA"
  "TEST\020\332\004\022\032\n\025REQ_RECOMMEND_HISTORY\020\333\004\022\032\n\025R"
  "EQ_RECOMMEND_COLLECT\020\334\004\022\026\n\021REQ_RECOMMEND"
  "_SET\020\335\004\022 \n\033REQ_RECOMMEND_GETCOLLECTION\020\336"
  "\004\022\030\n\023REQ_RECOMMEND_EQUIP\020\337\004\022\025\n\020REQ_LOGIN"
  "_CANCEL\020\340\004\022\027\n\022REQ_CONVERT_DEBRIS\020\341\004\022\034\n\027R"
  "EQ_USE_PROTECTION_CARD\020\342\004\022\032\n\025REQ_USE_PAS"
  "SPORT_CARD\020\343\004\022\022\n\rREQ_SET_MEDAL\020\344\004\022\024\n\017REQ"
  "_UNSET_MEDAL\020\345\004\022\026\n\021REQ_PLAYER_MEDALS\020\346\004\022"
  "\027\n\022REQ_UPDATE_HOT_DOT\020\350\004\022\026\n\021REQ_QUERY_HO"
  "T_DOT\020\351\004\022\022\n\rREQ_SET_CACHE\020\352\004\022\022\n\rREQ_GET_"
  "CACHE\020\353\004\022\034\n\027REQ_BUY_CHALLENGE_COUNT\020\354\004\022\025"
  "\n\020REQ_GET_PVE_RANK\020\355\004\022\025\n\020REQ_AUTH_ACCOUN"
  "T\020\356\004\022\027\n\022REQ_UNBIND_ACCOUNT\020\357\004\022\022\n\rREQ_BAG"
  "TOITEM\020\360\004\022\026\n\021REQ_IDENTIFY_ITEM\020\361\004\022\032\n\025REQ"
  "_INSERT_ITEM_AFFIX\020\362\004\022\031\n\024REQ_UNSET_ITEM_"
  "AFFIX\020\363\004\022\037\n\032REQ_SET_DEFAULT_ATTRIBUTES\020\364"
  "\004\022\025\n\020REQ_CHECK_CANCEL\020\365\004\022\027\n\022REQ_CANCEL_A"
  "CCOUNT\020\366\004\022\034\n\027REQ_PVE_UP_TALENT_LEVEL\020\367\004\022"
  "\030\n\023REQ_PVE_LUCKY_AWARD\020\370\004\022\037\n\032REQ_GET_SEL"
  "F_NUM_RANK_DATA\020\371\004\022\032\n\025REQ_UPDATE_CARD_GR"
  "OUP\020\372\004\022\037\n\032REQ_UPDATE_CARD_GROUP_NAME\020\373\004\022"
  "\025\n\020REQ_BUY_PVE_BUFF\020\374\004\022\027\n\022REQ_SET_CARD_G"
  "ROUP\020\375\004\022\037\n\032REQ_BUY_PVE_CHESS_TEMPLATE\020\376\004"
  "\022\"\n\035REQ_PVE_UNLOCK_CHESS_TEMPLATE\020\377\004\022\034\n\027"
  "REQ_PVE_SET_TEAM_DEBUFF\020\200\005\022\031\n\024REQ_CHOSE_"
  "CARD_GROUP\020\201\005\022\035\n\030REQ_REMOVE_OVERTIME_BUF"
  "F\020\202\005\022#\n\036REQ_UPDATE_NEW_CARD_GROUP_SIGN\020\203"
  "\005\022\034\n\027REQ_TD_GET_ONHOOK_AWARD\020\204\005\022\020\n\013REQ_T"
  "D_DRAW\020\205\005\022\024\n\017REQ_TD_BUY_CARD\020\206\005\022\032\n\025REQ_T"
  "D_SET_CARD_GROUP\020\207\005\022\024\n\017REQ_TD_LEVEL_UP\020\210"
  "\005\022\021\n\014REQ_TD_EQUIP\020\211\005\022\036\n\031REQ_MENTOR_UPDAT"
  "E_SETTING\020\212\005\022\026\n\021REQ_MENTOR_INVITE\020\213\005\022\036\n\031"
  "REQ_MENTOR_CONFIRM_INVITE\020\214\005\022\036\n\031REQ_MENT"
  "OR_RECOMMEND_LIST\020\215\005\022\036\n\031REQ_MENTOR_GET_T"
  "ASK_AWARD\020\216\005\022\030\n\023REQ_MENTOR_GRADUATE\020\217\005\022 "
  "\n\033REQ_MENTOR_RELIEVE_RELATION\020\220\005\022\030\n\023REQ_"
  "GET_MENTOR_INFO\020\221\005\022\036\n\031REQ_MENTOR_GET_INV"
  "ITE_MSG\020\222\005\022!\n\034REQ_UPDATE_CARD_GROUP_BETT"
  "ER\020\223\005\022\"\n\035REQ_UPDATE_CARD_GROUP_SETTING\020\224"
  "\005\022\031\n\024REQ_SET_AUCTION_NAME\020\225\005\022\033\n\026REQ_SET_"
  "AUCTION_REMARK\020\226\005\022\024\n\017REQ_GET_BALANCE\020\227\005\022"
  "\031\n\024REQ_RECHARGE_BALANCE\020\230\005\022\031\n\024REQ_WITHDR"
  "AW_BALANCE\020\231\005\022 \n\033REQ_PERSONAL_RECOMMEND_"
  "MALL\020\232\005\022\036\n\031REQ_GET_MEDAL_CHEST_AWARD\020\233\005\022"
  "\032\n\025REQ_SET_ITEM_AUTO_USE\020\234\005\022\021\n\014CS_RSP_BE"
  "GIN\020\350\007\022\016\n\tRSP_HEART\020\351\007\022\016\n\tRSP_LOGIN\020\352\007\022\026"
  "\n\021RSP_VERSION_CHECK\020\353\007\022\037\n\032RSP_RESOURCE_V"
  "ERSION_CHECK\020\354\007\022\032\n\025RSP_APPLY_HALL_SERVER"
  "\020\355\007\022\025\n\020RSP_GET_NUM_RANK\020\356\007\022\023\n\016RSP_WORLD_"
  "CHAT\020\357\007\022\032\n\025RSP_PLAYERS_BASE_INFO\020\360\007\022\033\n\026R"
  "SP_PLAYER_DETAIL_INFO\020\361\007\022\022\n\rRSP_READ_MAI"
  "L\020\362\007\022\027\n\022RSP_GET_MAIL_AWARD\020\363\007\022\020\n\013RSP_BUY"
  "_EGG\020\364\007\022\025\n\020RSP_USERNAME_SET\020\365\007\022\030\n\023RSP_US"
  "ERNAME_RANDOM\020\366\007\022\024\n\017RSP_HEADPIC_SET\020\367\007\022\014"
  "\n\007RSP_PVP\020\370\007\022\031\n\024RSP_PVP_MATCH_CANCEL\020\371\007\022"
  "\033\n\026RSP_DRESS_CHESS_PLAYER\020\372\007\022\024\n\017RSP_DRES"
  "S_SCENE\020\373\007\022\022\n\rRSP_PVP_LOGIN\020\374\007\022\021\n\014RSP_PV"
  "P_SEQS\020\375\007\022\031\n\024RSP_PVP_PLAYER_READY\020\376\007\022\031\n\024"
  "RSP_PVP_CLIENT_READY\020\377\007\022\027\n\022RSP_REP_PVP_A"
  "CTION\020\200\010\022\020\n\013RSP_PVP_END\020\201\010\022\026\n\021RSP_PLAYER"
  "_FINISH\020\202\010\022\024\n\017RSP_PLAYER_QUIT\020\203\010\022\022\n\rRSP_"
  "SELL_ITEM\020\204\010\022\027\n\022RSP_GET_EVAL_AWARD\020\205\010\022\031\n"
  "\024RSP_USE_CHESS_PLAYER\020\206\010\022\024\n\017RSP_GUID_REP"
  "ORT\020\207\010\022\027\n\022RSP_GET_CODE_AWARD\020\210\010\022\025\n\020RSP_R"
  "OUND_REPORT\020\211\010\022\031\n\024RSP_LOADING_PROGRESS\020\212"
  "\010\022\021\n\014RSP_PVP_CHAT\020\213\010\022\026\n\021RSP_CHESS_COMBIN"
  "E\020\214\010\022\017\n\nRSP_EXPOSE\020\215\010\022\027\n\022RSP_APPLY_ORDER"
  "_ID\020\216\010\022\032\n\025RSP_REPORT_ORDER_INFO\020\217\010\022\021\n\014RS"
  "P_SET_ITEM\020\220\010\022\023\n\016RSP_UNSET_ITEM\020\221\010\022\024\n\017RS"
  "P_RANDOM_ITEM\020\222\010\022\r\n\010RSP_CHAT\020\223\010\022\031\n\024RSP_S"
  "ET_CHESS_PLAYER\020\224\010\022\033\n\026RSP_UNSET_CHESS_PL"
  "AYER\020\225\010\022\026\n\021RSP_GET_FANS_LIST\020\226\010\022\026\n\021RSP_F"
  "OLLOW_PLAYER\020\227\010\022\030\n\023RSP_UNFOLLOW_PLAYER\020\230"
  "\010\022\034\n\027RSP_PLAYERS_STATUS_INFO\020\231\010\022\031\n\024RSP_I"
  "NVITE_JOIN_TEAM\020\232\010\022\022\n\rRSP_JOIN_TEAM\020\233\010\022\023"
  "\n\016RSP_LEAVE_TEAM\020\234\010\022\034\n\027RSP_KICKOFF_TEAM_"
  "PLAYER\020\235\010\022\021\n\014RSP_TEAM_MSG\020\236\010\022\023\n\016RSP_TEAM"
  "_READY\020\237\010\022\031\n\024RSP_REJECT_JOIN_TEAM\020\240\010\022\034\n\027"
  "RSP_REPORT_PAY_RESPONSE\020\241\010\022\024\n\017RSP_SHIELD"
  "_CHAT\020\242\010\022\033\n\026RSP_BUY_PASSPORT_LEVEL\020\243\010\022\031\n"
  "\024RSP_UPGRADE_PASSPORT\020\244\010\022!\n\034RSP_GET_PASS"
  "PORT_LEVEL_AWARD\020\245\010\022 \n\033RSP_GET_PASSPORT_"
  "TASK_AWARD\020\246\010\022\021\n\014RSP_TEL_BOOK\020\247\010\022\032\n\025RSP_"
  "ACTIVATE_PASSPORT\020\250\010\022\030\n\023RSP_RANKSEASON_E"
  "VAL\020\251\010\022\025\n\020RSP_BIND_ACCOUNT\020\252\010\022\037\n\032RSP_INC"
  "REASE_AD_SHOW_COUNT\020\253\010\022\027\n\022RSP_USE_BONUS_"
  "CARD\020\254\010\022\031\n\024RSP_GET_SEASON_AWARD\020\255\010\022!\n\034RS"
  "P_GET_ALPHA_ACTIVITY_AWARD\020\256\010\022\032\n\025RSP_GET"
  "_LANGUAGE_DATA\020\257\010\022\033\n\026RSP_GET_ACTIVITY_AW"
  "ARD\020\260\010\022\032\n\025RSP_GET_ACTIVITY_DATA\020\261\010\022\021\n\014RS"
  "P_SEND_SMS\020\262\010\022\030\n\023RSP_GET_MELEE_AWARD\020\263\010\022"
  "\027\n\022RSP_ADD_AI_TO_TEAM\020\264\010\022\016\n\tRSP_SHARE\020\265\010"
  "\022\027\n\022RSP_SKIP_INTERFACE\020\266\010\022\022\n\rRSP_TEAM_GA"
  "ME\020\267\010\022\026\n\021RSP_SET_TEAM_MODE\020\270\010\022\'\n\"RSP_SET"
  "_HITORY_PVP_SHOW_PERMISSION\020\271\010\022\024\n\017RSP_SE"
  "ARCH_TEAM\020\272\010\022\023\n\016RSP_APPLY_CHAT\020\273\010\022\023\n\016RSP"
  "_CHAT_LOGIN\020\274\010\022\030\n\023RSP_PROBE_NET_DELAY\020\275\010"
  "\022\021\n\014RSP_GET_EGGS\020\276\010\022\022\n\rRSP_BUY_GOODS\020\277\010\022"
  " \n\033RSP_EXCHANGE_PASSPORT_GOODS\020\300\010\022\037\n\032RSP"
  "_USE_PASSPORT_TASK_CARD\020\301\010\022\030\n\023RSP_OPEN_R"
  "AND_CHEST\020\302\010\022\024\n\017RSP_EGG_LOTTERY\020\303\010\022\036\n\031RS"
  "P_QUERY_DIAMOND_BALANCE\020\304\010\022\021\n\014RSP_USE_IT"
  "EM\020\305\010\022\034\n\027RSP_USE_EXPERIENCE_CARD\020\306\010\022\031\n\024R"
  "SP_RAND_TARGET_ITEM\020\307\010\022\026\n\021RSP_ADD_BLACKL"
  "IST\020\310\010\022\031\n\024RSP_REMOVE_BLACKLIST\020\311\010\022\034\n\027RSP"
  "_REPORT_PLAYER_BIRTH\020\312\010\022\032\n\025RSP_REPORT_IN"
  "FO_INPUT\020\313\010\022\037\n\032RSP_SEND_VERIFICATION_COD"
  "E\020\314\010\022\032\n\025RSP_BIND_PHONE_NUMBER\020\315\010\022\025\n\020RSP_"
  "WORLD_INVITE\020\316\010\022\033\n\026RSP_REMOVE_EXPIRE_ITE"
  "M\020\317\010\022\027\n\022RSP_GET_MALL_GOODS\020\320\010\022\027\n\022RSP_BUY"
  "_MALL_GOODS\020\321\010\022\032\n\025RSP_BIND_SHARING_CODE\020"
  "\322\010\022\025\n\020RSP_WX_BLESS_BAG\020\323\010\022\036\n\031RSP_UPDATE_"
  "FRIENDS_INGAME\020\324\010\022\025\n\020RSP_SHARE_REWARD\020\325\010"
  "\022\026\n\021RSP_ALLFIGHT_INFO\020\326\010\022\027\n\022RSP_GET_OLD_"
  "PLAYER\020\327\010\022\030\n\023RSP_BIND_OLD_PLAYER\020\330\010\0220\n+R"
  "SP_SEND_VERIFICATION_CODE_WITH_CHECK_RED"
  "IS\020\331\010\022\027\n\022RSP_REPORT_SETTING\020\332\010\022\022\n\rRSP_AN"
  "TI_DATA\020\333\010\022\022\n\rRSP_TLOG_DATA\020\334\010\022\021\n\014RSP_DA"
  "Y_SIGN\020\335\010\022\026\n\021RSP_DAY_FIT_AVOID\020\336\010\022\032\n\025RSP"
  "_SHARE_COUNT_AWARD\020\337\010\022\026\n\021RSP_ACT_ITEM_EX"
  "CH\020\340\010\022\027\n\022RSP_REALATION_STAR\020\341\010\022\'\n\"RSP_GE"
  "T_REALATION_STAR_INVITE_SUCC\020\342\010\022\033\n\026RSP_G"
  "ET_REALATION_STAR\020\343\010\022\027\n\022RSP_GET_ACT_RECO"
  "RD\020\344\010\022\030\n\023RSP_JOIN_VOICE_TEAM\020\345\010\022\027\n\022RSP_J"
  "OIN_VOICE_PVP\020\346\010\022\030\n\023RSP_JOIN_VOICE_CAMP\020"
  "\347\010\022\030\n\023RSP_USERCOUNTRY_SET\020\350\010\022 \n\033RSP_OFFL"
  "INE_INVITE_JOINTEAM\020\351\010\022\020\n\013RSP_OBSERVE\020\352\010"
  "\022\032\n\025RSP_GET_RECOMMEND_PVP\020\353\010\022\026\n\021RSP_OBSE"
  "RVE_LOGIN\020\354\010\022\025\n\020RSP_QUIT_OBSERVE\020\355\010\022\031\n\024R"
  "SP_GET_OBSERVE_INFO\020\356\010\022\022\n\rRSP_FREE_FLOW\020"
  "\357\010\022\027\n\022RSP_SET_PUSH_TOKEN\020\360\010\022\023\n\016RSP_TLOG_"
  "EVENT\020\361\010\022\025\n\020RSP_WXVVIP_AWARD\020\362\010\022\034\n\027RSP_G"
  "ET_RELATIONSTAR_WX\020\363\010\022\027\n\022RSP_WX_REDPKT_S"
  "END\020\364\010\022\027\n\022RSP_WX_REDPKT_RECV\020\365\010\022\027\n\022RSP_W"
  "X_REDPKT_LIKE\020\366\010\022\027\n\022RSP_WX_REDPKT_RANK\020\367"
  "\010\022\036\n\031RSP_OBSERVE_PRIVILEGE_SET\020\370\010\022\031\n\024RSP"
  "_PRESET_FAST_CHAT\020\371\010\022\031\n\024RSP_CHANGE_SLOT_"
  "TEAM\020\372\010\022\035\n\030RSP_CHANGE_SUB_MODE_TEAM\020\373\010\022!"
  "\n\034RSP_CONFIRM_CHANGE_SLOT_TEAM\020\374\010\022\026\n\021RSP"
  "_PVP_ROUND_END\020\375\010\022\033\n\026RSP_OBSERVE_CHAT_LO"
  "GIN\020\376\010\022\024\n\017RSP_PVP_CONFIRM\020\377\010\022\033\n\026RSP_ACTI"
  "VITY_PIC_SHARE\020\200\t\022!\n\034RSP_BIND_OLD_BUSINE"
  "SS_PLAYER\020\201\t\022\022\n\rRSP_TRANSLATE\020\202\t\022\035\n\030RSP_"
  "SUBMIT_QUESTIONNAIRE\020\203\t\022\032\n\025RSP_CANCEL_CH"
  "ANGESLOT\020\204\t\022\027\n\022RSP_SET_CHESS_SKIN\020\205\t\022\031\n\024"
  "RSP_UNSET_CHESS_SKIN\020\206\t\022\020\n\013RSP_COMPOSE\020\207"
  "\t\022\016\n\tRSP_VIDEO\020\210\t\022\030\n\023RSP_OFF_HELP_REDDOT"
  "\020\211\t\022\030\n\023RSP_CHANGE_LANGUAGE\020\212\t\022\032\n\025RSP_REP"
  "ORT_VIDEO_PLAY\020\213\t\022\025\n\020RSP_SET_PROVINCE\020\214\t"
  "\022\027\n\022RSP_LONGYUAN_VOICE\020\215\t\022\032\n\025RSP_TOURNAM"
  "ENT_ENROLL\020\216\t\022\035\n\030RSP_JOIN_TOURNAMENT_ROO"
  "M\020\217\t\022\037\n\032RSP_TOURNAMENT_POINT_AWARD\020\220\t\022\026\n"
  "\021RSP_DEAL_WEB_MAIL\020\221\t\022\033\n\026RSP_GET_ENROLL_"
  "PLAYERS\020\222\t\022\030\n\023RSP_CHALLENGE_AGAIN\020\223\t\022\036\n\031"
  "RSP_SET_FRIEND_INVISIABLE\020\224\t\022\037\n\032RSP_GET_"
  "OBSERVE_TASK_AWARD\020\225\t\022\027\n\022RSP_INVITE_OBSE"
  "RVE\020\226\t\022\027\n\022RSP_REJECT_OBSERVE\020\227\t\022\026\n\021RSP_G"
  "ET_TX_PLAYER\020\230\t\022\031\n\024RSP_CHOOSE_TX_PLAYER\020"
  "\231\t\022\027\n\022RSP_THIRD_PVP_INFO\020\232\t\022\032\n\025RSP_MARK_"
  "PLAYER_GUIDE\020\233\t\022 \n\033RSP_MARK_CHESS_SKIN_C"
  "LICKED\020\234\t\022\036\n\031RSP_RECRUIT_INVITE_PLAYER\020\235"
  "\t\022\035\n\030RSP_RECRUIT_BIND_INVITER\020\236\t\022\037\n\032RSP_"
  "QUERY_PS4_ENTITLEMENTS\020\237\t\022\024\n\017RSP_ACT_DAY"
  "SIGN\020\240\t\022\027\n\022RSP_HAVE_THIRD_PVP\020\241\t\022\026\n\021RSP_"
  "ACTIVITY_MALL\020\242\t\022\017\n\nRSP_PSONLY\020\243\t\022\034\n\027RSP"
  "_CHANGE_CHANNEL_TYPE\020\244\t\022\030\n\023RSP_CUSTOM_CA"
  "RD_OPT\020\245\t\022\032\n\025RSP_STATISTICS_REPORT\020\246\t\022\031\n"
  "\024RSP_CHAMPION_HISTORY\020\247\t\022!\n\034RSP_TOURNAME"
  "NT_LAST_TOP_RANK\020\250\t\022\036\n\031RSP_BIGWINNER_EXP"
  "ANDMATCH\020\251\t\022\035\n\030RSP_BIGWINNER_DAILYAWARD\020"
  "\252\t\022 \n\033RSP_BIGWINNER_SCOREHISITORY\020\253\t\022\023\n\016"
  "RSP_SMELT_ITEM\020\254\t\022\022\n\rRSP_OAUTH_APP\020\260\t\022\020\n"
  "\013RSP_TEAM_OP\020\224\n\022\025\n\020RSP_OB_TEAM_INFO\020\225\n\022\035"
  "\n\030RSP_GET_PVP_SERVER_GROUP\020\227\n\022\030\n\023RSP_REP"
  "ORT_PVP_INFO\020\230\n\022\026\n\021RSP_CHOOSE_PLAYER\020\231\n\022"
  "\022\n\rRSP_PING_TEST\020\232\n\022\033\n\026RSP_REPORT_REGION"
  "_INFO\020\233\n\022\027\n\022RSP_RECALLEDPLAYER\020\234\n\022\022\n\rRSP"
  "_WEB_LOGIN\020\235\n\022\030\n\023RSP_INVITECODERESET\020\236\n\022"
  "\025\n\020RSP_RECALLREWARD\020\237\n\022\035\n\030RSP_SWITCHTO_C"
  "OMMONMATCH\020\240\n\022\034\n\027RSP_SWITCH_MODE_IN_TEAM"
  "\020\250\n\022\031\n\024RSP_GET_TNROOM_STATE\020\251\n\022\027\n\022RSP_WO"
  "RKSHOP_MATCH\020\262\n\022\034\n\027RSP_BUY_WORKSHOP_TICK"
  "ET\020\263\n\022\037\n\032RSP_FAVOURITE_WORKSHOP_MAP\020\264\n\022\031"
  "\n\024RSP_SHORTCUT_MAPS_OP\020\265\n\022 \n\033RSP_PLAYERS"
  "_Tournament_INFO\020\266\n\022\033\n\026RSP_SCORE_WORKSHO"
  "P_MAP\020\267\n\022\037\n\032RSP_MAPS_VISITEDBY_FRIENDS\020\270"
  "\n\022\031\n\024RSP_VERIFY_REAL_NAME\020\306\n\022\021\n\014RSP_FAKE"
  "_PAY\020\307\n\022\025\n\020RSP_GUILD_CREATE\020\320\n\022\024\n\017RSP_GU"
  "ILD_APPLY\020\321\n\022\023\n\016RSP_GUILD_HOME\020\322\n\022\031\n\024RSP"
  "_GUILD_APPLY_LIST\020\323\n\022\023\n\016RSP_GUILD_INFO\020\324"
  "\n\022\026\n\021RSP_GUILD_APPROVE\020\325\n\022\027\n\022RSP_GUILD_S"
  "ET_ROLE\020\326\n\022\025\n\020RSP_GUILD_MODIFY\020\327\n\022\026\n\021RSP"
  "_GUILD_KICKOFF\020\330\n\022\026\n\021RSP_GUILD_DISMISS\020\331"
  "\n\022\023\n\016RSP_GUILD_EXIT\020\332\n\022\023\n\016RSP_GUILD_CHAT"
  "\020\333\n\022\023\n\016RSP_GUILD_LIST\020\334\n\022\037\n\032RSP_GUILD_RE"
  "COMMEND_PLAYER\020\335\n\022\025\n\020RSP_GUILD_RESIGN\020\336\n"
  "\022\025\n\020RSP_GUILD_INVITE\020\337\n\022\032\n\025RSP_GUILD_INV"
  "ITE_LIST\020\340\n\022\022\n\rRSP_GUILD_LOG\020\341\n\022\034\n\027RSP_G"
  "UILD_REJECT_INVITE\020\342\n\022\032\n\025RSP_VNG_COMMENT"
  "_AWARD\020\356\n\022\027\n\022RSP_LEVEL_UP_CHEST\020\357\n\022\021\n\014RS"
  "P_WATCH_AD\020\360\n\022!\n\034RSP_QUERY_PS_TOURNAMENT"
  "_ROOM\020\361\n\022\036\n\031RSP_GET_AD_CUMULATE_AWARD\020\362\n"
  "\022\025\n\020RSP_CHANNEL_CHAT\020\363\n\022\033\n\026RSP_APPLY_CHA"
  "NNEL_CHAT\020\364\n\022\033\n\026RSP_LEAVE_CHANNEL_CHAT\020\365"
  "\n\022\025\n\020RSP_SET_MSGR_POS\020\334\013\022\031\n\024RSP_CANCEL_R"
  "ECONNECT\020\360\013\022\022\n\rRSP_RECONNECT\020\362\013\022\025\n\020RSP_P"
  "ASS_THROUGH\020\371\013\022\025\n\020RSP_VISIT_PLAYER\020\372\013\022\031\n"
  "\024RSP_LEAVE_GAME_EARLY\020\373\013\022\025\n\020RSP_GDCOMMON"
  "_BIN\020\374\013\022\031\n\024RSP_GDCOMMONBIN_DATA\020\375\013\022\031\n\024RS"
  "P_HISTORY_CHAT_MSG\020\376\013\022\032\n\025RSP_BATTLE_CAMP"
  "RESULT\020\377\013\022\027\n\022RSP_AUTO_BATTLE_OP\020\200\014\022\026\n\021RS"
  "P_RESTRICT_USER\020\201\014\022\032\n\025RSP_EQUIP_SELECT_R"
  "ATE\020\202\014\022\026\n\021RSP_REPORT_ABSENT\020\203\014\022\027\n\022RSP_RE"
  "COMMEND_WEEK\020\300\014\022\033\n\026RSP_RECOMMEND_OFFICIA"
  "L\020\301\014\022\031\n\024RSP_RECOMMEND_LATEST\020\302\014\022\032\n\025RSP_R"
  "ECOMMEND_HISTORY\020\303\014\022\032\n\025RSP_RECOMMEND_COL"
  "LECT\020\304\014\022\026\n\021RSP_RECOMMEND_SET\020\305\014\022 \n\033RSP_R"
  "ECOMMEND_GETCOLLECTION\020\306\014\022\030\n\023RSP_RECOMME"
  "ND_EQUIP\020\307\014\022\025\n\020RSP_LOGIN_CANCEL\020\310\014\022\027\n\022RS"
  "P_CONVERT_DEBRIS\020\311\014\022\034\n\027RSP_USE_PROTECTIO"
  "N_CARD\020\312\014\022\032\n\025RSP_USE_PASSPORT_CARD\020\313\014\022\022\n"
  "\rRSP_SET_MEDAL\020\314\014\022\024\n\017RSP_UNSET_MEDAL\020\315\014\022"
  "\026\n\021RSP_PLAYER_MEDALS\020\316\014\022\027\n\022RSP_UPDATE_HO"
  "T_DOT\020\320\014\022\026\n\021RSP_QUERY_HOT_DOT\020\321\014\022\022\n\rRSP_"
  "SET_CACHE\020\322\014\022\022\n\rRSP_GET_CACHE\020\323\014\022\034\n\027RSP_"
  "BUY_CHALLENGE_COUNT\020\324\014\022\025\n\020RSP_GET_PVE_RA"
  "NK\020\325\014\022\025\n\020RSP_AUTH_ACCOUNT\020\326\014\022\027\n\022RSP_UNBI"
  "ND_ACCOUNT\020\327\014\022\022\n\rRSP_BAGTOITEM\020\330\014\022\026\n\021RSP"
  "_IDENTIFY_ITEM\020\331\014\022\032\n\025RSP_INSERT_ITEM_AFF"
  "IX\020\332\014\022\031\n\024RSP_UNSET_ITEM_AFFIX\020\333\014\022\037\n\032RSP_"
  "SET_DEFAULT_ATTRIBUTES\020\334\014\022\025\n\020RSP_CHECK_C"
  "ANCEL\020\335\014\022\027\n\022RSP_CANCEL_ACCOUNT\020\336\014\022\034\n\027RSP"
  "_PVE_UP_TALENT_LEVEL\020\337\014\022\030\n\023RSP_PVE_LUCKY"
  "_AWARD\020\340\014\022\037\n\032RSP_GET_SELF_NUM_RANK_DATA\020"
  "\341\014\022\032\n\025RSP_UPDATE_CARD_GROUP\020\342\014\022\037\n\032RSP_UP"
  "DATE_CARD_GROUP_NAME\020\343\014\022\025\n\020RSP_BUY_PVE_B"
  "UFF\020\344\014\022\027\n\022RSP_SET_CARD_GROUP\020\345\014\022\037\n\032RSP_B"
  "UY_PVE_CHESS_TEMPLATE\020\346\014\022\"\n\035RSP_PVE_UNLO"
  "CK_CHESS_TEMPLATE\020\347\014\022\034\n\027RSP_PVE_SET_TEAM"
  "_DEBUFF\020\350\014\022\031\n\024RSP_CHOSE_CARD_GROUP\020\351\014\022\035\n"
  "\030RSP_REMOVE_OVERTIME_BUFF\020\352\014\022#\n\036RSP_UPDA"
  "TE_NEW_CARD_GROUP_SIGN\020\353\014\022\034\n\027RSP_TD_GET_"
  "ONHOOK_AWARD\020\354\014\022\020\n\013RSP_TD_DRAW\020\355\014\022\024\n\017RSP"
  "_TD_BUY_CARD\020\356\014\022\032\n\025RSP_TD_SET_CARD_GROUP"
  "\020\357\014\022\024\n\017RSP_TD_LEVEL_UP\020\360\014\022\021\n\014RSP_TD_EQUI"
  "P\020\361\014\022\036\n\031RSP_MENTOR_UPDATE_SETTING\020\362\014\022\026\n\021"
  "RSP_MENTOR_INVITE\020\363\014\022\036\n\031RSP_MENTOR_CONFI"
  "RM_INVITE\020\364\014\022\036\n\031RSP_MENTOR_RECOMMEND_LIS"
  "T\020\365\014\022\036\n\031RSP_MENTOR_GET_TASK_AWARD\020\366\014\022\030\n\023"
  "RSP_MENTOR_GRADUATE\020\367\014\022 \n\033RSP_MENTOR_REL"
  "IEVE_RELATION\020\370\014\022\030\n\023RSP_GET_MENTOR_INFO\020"
  "\371\014\022\036\n\031RSP_MENTOR_GET_INVITE_MSG\020\372\014\022!\n\034RS"
  "P_UPDATE_CARD_GROUP_BETTER\020\373\014\022\"\n\035RSP_UPD"
  "ATE_CARD_GROUP_SETTING\020\374\014\022\031\n\024RSP_SET_AUC"
  "TION_NAME\020\375\014\022\033\n\026RSP_SET_AUCTION_REMARK\020\376"
  "\014\022\024\n\017RSP_GET_BALANCE\020\377\014\022\031\n\024RSP_RECHARGE_"
  "BALANCE\020\200\r\022\031\n\024RSP_WITHDRAW_BALANCE\020\201\r\022 \n"
  "\033RSP_PERSONAL_RECOMMEND_MALL\020\202\r\022\036\n\031RSP_G"
  "ET_MEDAL_CHEST_AWARD\020\203\r\022\032\n\025RSP_SET_ITEM_"
  "AUTO_USE\020\204\r\022\021\n\014CS_NTF_BEGIN\020\320\017\022\020\n\013NTF_KI"
  "CKOFF\020\321\017\022\024\n\017NTF_PLAYER_WAIT\020\322\017\022\021\n\014NTF_PA"
  "SS_DAY\020\323\017\022\022\n\rNTF_PASS_WEEK\020\324\017\022\023\n\016NTF_PAS"
  "S_MONTH\020\325\017\022\023\n\016NTF_WORLD_CHAT\020\326\017\022\016\n\tNTF_M"
  "AILS\020\327\017\022\021\n\014NTF_HEAD_PIC\020\330\017\022\022\n\rNTF_PVP_MA"
  "TCH\020\331\017\022\031\n\024NTF_PVP_MATCH_CANCEL\020\332\017\022\014\n\007NTF"
  "_PVP\020\333\017\022\023\n\016NTF_PVP_STATUS\020\334\017\022\031\n\024NTF_PVP_"
  "PLAYER_READY\020\335\017\022\022\n\rNTF_PVP_BEGIN\020\336\017\022\020\n\013N"
  "TF_PVP_SEQ\020\337\017\022\026\n\021NTF_PLAYER_FINISH\020\340\017\022\020\n"
  "\013NTF_PVP_END\020\341\017\022\020\n\013NTF_MARQUEE\020\342\017\022\027\n\022NTF"
  "_REMOVE_MARQUEE\020\343\017\022\031\n\024NTF_LOADING_PROGRE"
  "SS\020\344\017\022\021\n\014NTF_PVP_CHAT\020\345\017\022\017\n\nNTF_RELOAD\020\346"
  "\017\022\014\n\007NTF_PAY\020\347\017\022\r\n\010NTF_CHAT\020\350\017\022\024\n\017NTF_FO"
  "LLOW_LIST\020\351\017\022\025\n\020NTF_NEW_FOLLOWER\020\352\017\022\026\n\021N"
  "TF_LOST_FOLLOWER\020\353\017\022\031\n\024NTF_INVITE_JOIN_T"
  "EAM\020\354\017\022\031\n\024NTF_PLAYER_JOIN_TEAM\020\355\017\022\034\n\027NTF"
  "_KICKOFF_TEAM_PLAYER\020\356\017\022\021\n\014NTF_TEAM_MSG\020"
  "\357\017\022\023\n\016NTF_TEAM_READY\020\360\017\022\031\n\024NTF_REJECT_JO"
  "IN_TEAM\020\361\017\022\032\n\025NTF_PLAYER_LEAVE_TEAM\020\362\017\022\017"
  "\n\nNTF_NOTICE\020\363\017\022\026\n\021NTF_REMOVE_NOTICE\020\364\017\022"
  "\035\n\030NTF_UPGRADE_BATTLE_STAGE\020\365\017\022\037\n\032NTF_PA"
  "SSPORT_TASK_PROGRESS\020\366\017\022\030\n\023NTF_RANKSEASO"
  "N_EVAL\020\367\017\022\026\n\021NTF_BIND_ACCOUNTS\020\370\017\022\035\n\030NTF"
  "_SEASON_TASK_PROGRESS\020\371\017\022\027\n\022NTF_ALPHA_AC"
  "TIVITY\020\372\017\022!\n\034NTF_OFF_SEASON_TO_NEW_SEASO"
  "N\020\373\017\022\032\n\025NTF_LANGUAGE_MD5_LIST\020\374\017\022\032\n\025NTF_"
  "ACTIVITY_PROGRESS\020\375\017\022\030\n\023NTF_REMOVE_ACTIV"
  "ITY\020\376\017\022\030\n\023NTF_ACTIVITY_CONFIG\020\377\017\022\034\n\027NTF_"
  "MELEE_TASK_PROGRESS\020\200\020\022\026\n\021NTF_SET_TEAM_M"
  "ODE\020\201\020\022\026\n\021NTF_PASSPORT_OPEN\020\202\020\022\027\n\022NTF_PA"
  "SSPORT_CLOSE\020\203\020\022\023\n\016NTF_WEEK_INDEX\020\204\020\022\030\n\023"
  "NTF_NEW_PVP_HISTORY\020\205\020\022\025\n\020NTF_TEAM_PVP_E"
  "ND\020\206\020\022\030\n\023NTF_PROBE_NET_DELAY\020\207\020\022\026\n\021NTF_R"
  "EFRESH_GOODS\020\210\020\022\027\n\022NTF_SWITCH_SYS_SET\020\212\020"
  "\022\032\n\025NTF_SWITCH_PLAYER_SET\020\213\020\022\022\n\rNTF_BLAC"
  "KLIST\020\214\020\022!\n\034NTF_BIND_PHONE_NUMBER_SWITCH"
  "\020\215\020\022\025\n\020NTF_WORLD_INVITE\020\216\020\022\024\n\017NTF_MALL_N"
  "OTICE\020\217\020\022\022\n\rNTF_PRIVILEGE\020\220\020\022\022\n\rNTF_AA_R"
  "EMIND\020\221\020\022\017\n\nNTF_AA_BAN\020\222\020\022\022\n\rNTF_AA_VERI"
  "FY\020\223\020\022\025\n\020NTF_PHONE_NUMBER\020\224\020\022\026\n\021NTF_ANTI"
  "_CALLBACK\020\225\020\022\030\n\023NTF_FORTUNEBAG_TIME\020\226\020\022\024"
  "\n\017NTF_UPDATE_ITEM\020\227\020\022\025\n\020NTF_CREDIT_SCORE"
  "\020\230\020\022\021\n\014NTF_BUFF_ACT\020\231\020\022\027\n\022NTF_ACTIVITY_G"
  "ROUP\020\232\020\022\026\n\021NTF_GM_SYSMESSAGE\020\233\020\022\023\n\016NTF_C"
  "LEAR_CHAT\020\234\020\022\024\n\017NTF_FORBID_INFO\020\235\020\022\026\n\021NT"
  "F_MIDAS_DIAMOND\020\236\020\022\030\n\023NTF_JOIN_VOICE_TEA"
  "M\020\237\020\022\027\n\022NTF_JOIN_VOICE_PVP\020\240\020\022\030\n\023NTF_JOI"
  "N_VOICE_CAMP\020\241\020\022\026\n\021NTF_WX_VVIP_LEVEL\020\242\020\022"
  "\022\n\rNTF_FREE_FLOW\020\243\020\022\027\n\022NTF_OBSERVE_STATU"
  "S\020\244\020\022\025\n\020NTF_GAME_MARQUEE\020\245\020\022\026\n\021NTF_WX_RE"
  "D_PACKET\020\246\020\022\027\n\022NTF_NEW_PUNISHMENT\020\247\020\022\021\n\014"
  "NTF_TEAMSLOT\020\250\020\022\024\n\017NTF_TEAMSUBMODE\020\251\020\022\027\n"
  "\022NTF_TEAMSLOTSTATUS\020\263\020\022\030\n\023NTF_PUNISHMENT"
  "_INFO\020\264\020\022\032\n\025NTF_REMOVE_PUNISHMENT\020\265\020\022\024\n\017"
  "NTF_PVP_CONFIRM\020\266\020\022\026\n\021NTF_MATCH_SUCCESS\020"
  "\267\020\022\034\n\027NTF_OLD_BUSINESS_PLAYER\020\270\020\022\027\n\022NTF_"
  "CHANGETEAMSLOT\020\271\020\022\035\n\030NTF_REFUSECHANGETEA"
  "MSLOT\020\272\020\022\031\n\024NTF_CANCELCHANGESLOT\020\273\020\022\030\n\023N"
  "TF_SHOW_CHESS_SKIN\020\274\020\022\027\n\022NTF_ON_HELP_RED"
  "DOT\020\275\020\022\023\n\016NTF_BAG_UPDATE\020\276\020\022\026\n\021NTF_REFRE"
  "SH_MELEE\020\277\020\022\034\n\027NTF_CURRENT_TOURNAMENTS\020\300"
  "\020\022\031\n\024NTF_TOURNAMENT_BEGIN\020\301\020\022\027\n\022NTF_TOUR"
  "NAMENT_END\020\302\020\022\025\n\020NTF_ENROLL_BEGIN\020\303\020\022\023\n\016"
  "NTF_ENROLL_END\020\304\020\022\035\n\030NTF_JOIN_TOURNAMENT"
  "_ROOM\020\307\020\022\027\n\022NTF_TOURNAMENT_OUT\020\310\020\022\022\n\rNTF"
  "_ROUND_END\020\311\020\022\024\n\017NTF_TEAM_STATUS\020\312\020\022\027\n\022N"
  "TF_INVITE_OBSERVE\020\313\020\022\027\n\022NTF_REJECT_OBSER"
  "VE\020\314\020\022\024\n\017NTF_CHEST_COUNT\020\315\020\022\034\n\027NTF_ACTIV"
  "ITYTASK_UNLOCK\020\316\020\022\031\n\024NTF_ADD_THIRDPVPINF"
  "O\020\320\020\022\031\n\024NTF_DEL_THIRDPVPINFO\020\321\020\022\030\n\023NTF_P"
  "S4_SERVER_ONLY\020\322\020\022\027\n\022NTF_CHESS_LIST_ERR\020"
  "\323\020\022\025\n\020NTF_CHEST_RECORD\020\324\020\022\021\n\014NTF_GOA_INF"
  "O\020\325\020\022\023\n\016NTF_MEDAL_INFO\020\326\020\022\021\n\014NTF_MEDAL_I"
  "D\020\327\020\022\022\n\rNTF_PVP_RESET\020\330\020\022\021\n\014NTF_DEL_MAIL"
  "\020\331\020\022\022\n\rNTF_ITEM_INFO\020\332\020\022\014\n\007NTF_BAG\020\333\020\022\025\n"
  "\020NTF_PASSPORT_NUM\020\334\020\022\037\n\032NTF_PASSPORT_YEA"
  "R_CARD_NUM\020\335\020\022\020\n\013NTF_TEAM_OP\020\374\021\022\025\n\020NTF_T"
  "EAM_DISMISS\020\375\021\022\022\n\rNTF_WEB_LOGIN\020\376\021\022\032\n\025NT"
  "F_SINGLE_ROUND_FLOW\020\377\021\022\030\n\023NTF_LUCK_STAR_"
  "AWARD\020\200\022\022\025\n\020NTF_RECRUIT_INFO\020\201\022\022\027\n\022NTF_R"
  "ECRUIT_PLAYER\020\202\022\022\036\n\031NTF_RECRUIT_PLAYER_B"
  "ATTLE\020\203\022\022\030\n\023NTF_LUCK_MALL_GOODS\020\204\022\022\036\n\031NT"
  "F_BIGWINNER_EXPANDMATCH\020\205\022\022\034\n\027NTF_SWITCH"
  "_MODE_IN_TEAM\020\206\022\022\023\n\016NTF_TNGAME_END\020\207\022\022\035\n"
  "\030NTF_PLAYER_LACK_RESOURCE\020\220\022\022\030\n\023NTF_FAV_"
  "MAP_REMOVED\020\221\022\022\036\n\031NTF_WORKSHOP_MATCH_RES"
  "ULT\020\222\022\022\031\n\024NTF_VERIFY_REAL_NAME\020\256\022\022\033\n\026NTF"
  "_PLAYER_EXP_CHANGED\020\257\022\022\023\n\016NTF_GUILD_JOIN"
  "\020\340\022\022\034\n\027NTF_GUILD_MEMBER_CHANGE\020\341\022\022\026\n\021NTF"
  "_GUILD_KICKOFF\020\342\022\022\032\n\025NTF_GUILD_ROLE_CHAN"
  "GE\020\343\022\022\032\n\025NTF_GUILD_ATTR_CHANGE\020\344\022\022\023\n\016NTF"
  "_GUILD_CHAT\020\351\022\022\026\n\021NTF_GUILD_NEW_LOG\020\352\022\022\037"
  "\n\032NTF_GUILD_APPLICANT_CHANGE\020\353\022\022\035\n\030NTF_G"
  "UILD_INVITEE_CHANGE\020\354\022\022\031\n\024NTF_GUILD_NEW_"
  "INVITE\020\355\022\022\023\n\016NTF_GUILD_INFO\020\356\022\022 \n\033NTF_VN"
  "G_COMMENT_AWARD_RESET\020\364\022\022\021\n\014NTF_AD_AWARD"
  "\020\365\022\022\021\n\014NTF_AD_COUNT\020\366\022\022\022\n\rNTF_UI_FORBID\020"
  "\367\022\022\034\n\027NTF_PVP_UPDATE_MSGR_POS\020\332\023\022\035\n\030NTF_"
  "PVP_PLAYER_LOGGED_IN\020\333\023\022\025\n\020NTF_PASS_THRO"
  "UGH\020\206\024\022\013\n\006NTF_AA\020\212\024\022\026\n\021NTF_PVP_RECONNECT"
  "\020\213\024\022\035\n\030NTF_UPDATE_BATTLE_RESULT\020\214\024\022\025\n\020NT"
  "F_VISIT_PLAYER\020\215\024\022\030\n\023NTF_KR_IDENTITYAUTH"
  "\020\216\024\022\030\n\023NTF_KR_ADDICTIONTIP\020\217\024\022\031\n\024NTF_LEA"
  "VE_GAME_EARLY\020\220\024\022\036\n\031NTF_KR_ADDICTIONCOUN"
  "TDOWN\020\221\024\022\023\n\016NTF_ADD_BANNER\020\222\024\022\026\n\021NTF_REM"
  "OVE_BANNER\020\223\024\022\030\n\023NTF_HISTOY_CHAT_MSG\020\224\024\022"
  "\027\n\022NTF_SYSTEM_GM_TIME\020\225\024\022\024\n\017NTF_CHANGE_N"
  "AME\020\226\024\022\022\n\rNTF_FIRST_PAY\020\227\024\022\025\n\020NTF_BETON_"
  "BOUNTY\020\230\024\022\026\n\021NTF_TASK_PROGRESS\020\231\024\022\037\n\032NTF"
  "_NEW_PLAYER_GUIDE_ENDED\020\232\024\022\"\n\035NTF_ACHIEV"
  "EMENT_TASK_PROGRESS\020\233\024\022\036\n\031NTF_ACHIEVEMEN"
  "T_TASK_INFO\020\234\024\022\023\n\016NTF_PVP_AWARDS\020\235\024\022\022\n\rN"
  "TF_ADD_AWARD\020\236\024\022\026\n\021NTF_LIMIT_REFRESH\020\237\024\022"
  "\026\n\021NTF_UPDATE_NOTICE\020\240\024\022\021\n\014NTF_CALC_MMR\020"
  "\241\024\022\034\n\027NTF_PVE_CHALLENGE_COUNT\020\242\024\022\024\n\017NTF_"
  "AD_DISCOUNT\020\243\024\022\030\n\023NTF_ITEM_ATTRIBUTES\020\244\024"
  "\022\032\n\025NTF_PVP_AFFIX_TRIGGER\020\245\024\022\030\n\023NTF_UPDA"
  "TE_PVP_DATA\020\246\024\022\031\n\024NTF_UPGRADE_PASSPORT\020\247"
  "\024\022\033\n\026NTF_UODATE_TEAM_DEBUFF\020\250\024\022\021\n\014NTF_PV"
  "E_EVAL\020\251\024\022\032\n\025NTF_UNLOCK_CARD_GROUP\020\252\024\022\034\n"
  "\027NTF_CUSTOM_PVE_ACTIVITY\020\253\024\022\017\n\nNTF_GM_BA"
  "N\020\254\024\022\027\n\022NTF_TD_PLAYER_INFO\020\255\024\022\032\n\025NTF_MEN"
  "TOR_INVITE_MSG\020\256\024\022\026\n\021NTF_BECOME_MENTOR\020\257"
  "\024\022\030\n\023NTF_MENTOR_RELATION\020\260\024\022\030\n\023NTF_MENTO"
  "RSHIP_TASK\020\261\024\022\031\n\024NTF_MENTORSHIP_LEVEL\020\262\024"
  "\022\031\n\024NTF_CUR_DRESS_UPDATE\020\263\024\022\035\n\030NTF_CHANG"
  "E_EXCHANGE_MARK\020\264\024\022\031\n\024NTF_REFRESH_PASSPO"
  "RT\020\265\024\022\027\n\022NTF_GM_REMOVE_MAIL\020\266\024\022\026\n\021NTF_AU"
  "TO_USE_ITEM\020\267\024b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_csprotocol_2eproto_deps[5] = {
  &::descriptor_table_battle_2eproto,
  &::descriptor_table_common_2eproto,
  &::descriptor_table_csprotocolstruct_2eproto,
  &::descriptor_table_result_2eproto,
  &::descriptor_table_towerdefense_2eproto,
};
static ::_pbi::once_flag descriptor_table_csprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_csprotocol_2eproto = {
    false, false, 63142, descriptor_table_protodef_csprotocol_2eproto,
    "csprotocol.proto",
    &descriptor_table_csprotocol_2eproto_once, descriptor_table_csprotocol_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_csprotocol_2eproto::offsets,
    file_level_metadata_csprotocol_2eproto, file_level_enum_descriptors_csprotocol_2eproto,
    file_level_service_descriptors_csprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_csprotocol_2eproto_getter() {
  return &descriptor_table_csprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_csprotocol_2eproto(&descriptor_table_csprotocol_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_csprotocol_2eproto);
  return file_level_enum_descriptors_csprotocol_2eproto[0];
}
bool CSMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 200:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 320:
    case 321:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 350:
    case 351:
    case 360:
    case 361:
    case 362:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 500:
    case 520:
    case 522:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
    case 646:
    case 647:
    case 648:
    case 649:
    case 650:
    case 651:
    case 652:
    case 653:
    case 654:
    case 655:
    case 656:
    case 657:
    case 658:
    case 659:
    case 660:
    case 661:
    case 662:
    case 663:
    case 664:
    case 665:
    case 666:
    case 667:
    case 668:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1200:
    case 1300:
    case 1301:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1320:
    case 1321:
    case 1330:
    case 1331:
    case 1332:
    case 1333:
    case 1334:
    case 1335:
    case 1336:
    case 1350:
    case 1351:
    case 1360:
    case 1361:
    case 1362:
    case 1363:
    case 1364:
    case 1365:
    case 1366:
    case 1367:
    case 1368:
    case 1369:
    case 1370:
    case 1371:
    case 1372:
    case 1373:
    case 1374:
    case 1375:
    case 1376:
    case 1377:
    case 1378:
    case 1390:
    case 1391:
    case 1392:
    case 1393:
    case 1394:
    case 1395:
    case 1396:
    case 1397:
    case 1500:
    case 1520:
    case 1522:
    case 1529:
    case 1530:
    case 1531:
    case 1532:
    case 1533:
    case 1534:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
    case 1608:
    case 1609:
    case 1610:
    case 1611:
    case 1612:
    case 1613:
    case 1614:
    case 1616:
    case 1617:
    case 1618:
    case 1619:
    case 1620:
    case 1621:
    case 1622:
    case 1623:
    case 1624:
    case 1625:
    case 1626:
    case 1627:
    case 1628:
    case 1629:
    case 1630:
    case 1631:
    case 1632:
    case 1633:
    case 1634:
    case 1635:
    case 1636:
    case 1637:
    case 1638:
    case 1639:
    case 1640:
    case 1641:
    case 1642:
    case 1643:
    case 1644:
    case 1645:
    case 1646:
    case 1647:
    case 1648:
    case 1649:
    case 1650:
    case 1651:
    case 1652:
    case 1653:
    case 1654:
    case 1655:
    case 1656:
    case 1657:
    case 1658:
    case 1659:
    case 1660:
    case 1661:
    case 1662:
    case 1663:
    case 1664:
    case 1665:
    case 1666:
    case 1667:
    case 1668:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2086:
    case 2087:
    case 2088:
    case 2089:
    case 2099:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2128:
    case 2129:
    case 2130:
    case 2131:
    case 2132:
    case 2133:
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
    case 2139:
    case 2140:
    case 2141:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2309:
    case 2310:
    case 2311:
    case 2320:
    case 2321:
    case 2322:
    case 2350:
    case 2351:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2409:
    case 2410:
    case 2411:
    case 2412:
    case 2413:
    case 2414:
    case 2420:
    case 2421:
    case 2422:
    case 2423:
    case 2522:
    case 2523:
    case 2566:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSHead::_Internal {
 public:
};

CSHead::CSHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSHead)
}
CSHead::CSHead(const CSHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){}
    , decltype(_impl_.bodylen_){}
    , decltype(_impl_.compress_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msgid_, &from._impl_.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.msgid_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSHead)
}

inline void CSHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgid_){0}
    , decltype(_impl_.bodylen_){0u}
    , decltype(_impl_.compress_){false}
    , decltype(_impl_.serverid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSHead::~CSHead() {
  // @@protoc_insertion_point(destructor:msg.CSHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSHead::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverid_) -
      reinterpret_cast<char*>(&_impl_.msgid_)) + sizeof(_impl_.serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSMsgID MsgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msgid(static_cast<::msg::CSMsgID>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 BodyLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bodylen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Compress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.compress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ServerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSMsgID MsgId = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msgid(), target);
  }

  // uint32 BodyLen = 2;
  if (this->_internal_bodylen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bodylen(), target);
  }

  // bool Compress = 3;
  if (this->_internal_compress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_compress(), target);
  }

  // uint32 ServerId = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSHead)
  return target;
}

size_t CSHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSMsgID MsgId = 1;
  if (this->_internal_msgid() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
  }

  // uint32 BodyLen = 2;
  if (this->_internal_bodylen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bodylen());
  }

  // bool Compress = 3;
  if (this->_internal_compress() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ServerId = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSHead::GetClassData() const { return &_class_data_; }


void CSHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSHead*>(&to_msg);
  auto& from = static_cast<const CSHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  if (from._internal_bodylen() != 0) {
    _this->_internal_set_bodylen(from._internal_bodylen());
  }
  if (from._internal_compress() != 0) {
    _this->_internal_set_compress(from._internal_compress());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSHead::CopyFrom(const CSHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHead::IsInitialized() const {
  return true;
}

void CSHead::InternalSwap(CSHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSHead, _impl_.serverid_)
      + sizeof(CSHead::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(CSHead, _impl_.msgid_)>(
          reinterpret_cast<char*>(&_impl_.msgid_),
          reinterpret_cast<char*>(&other->_impl_.msgid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csprotocol_2eproto_getter, &descriptor_table_csprotocol_2eproto_once,
      file_level_metadata_csprotocol_2eproto[0]);
}

// ===================================================================

class CSReqBody::_Internal {
 public:
  static const ::msg::CSReqHeart& heart(const CSReqBody* msg);
  static const ::msg::CSReqLogin& login(const CSReqBody* msg);
  static const ::msg::CSReqVersionCheck& versioncheck(const CSReqBody* msg);
  static const ::msg::CSReqResourceVersionCheck& resourceversioncheck(const CSReqBody* msg);
  static const ::msg::CSReqApplyHallServer& applyhallserver(const CSReqBody* msg);
  static const ::msg::CSReqGetNumRank& getnumrank(const CSReqBody* msg);
  static const ::msg::CSReqWorldChat& worldchat(const CSReqBody* msg);
  static const ::msg::CSReqPlayersBaseInfo& playersbaseinfo(const CSReqBody* msg);
  static const ::msg::CSReqPlayerDetailInfo& playerdetailinfo(const CSReqBody* msg);
  static const ::msg::CSReqReadMail& readmail(const CSReqBody* msg);
  static const ::msg::CSReqGetMailAward& getmailaward(const CSReqBody* msg);
  static const ::msg::CSReqBuyEgg& buyegg(const CSReqBody* msg);
  static const ::msg::CSReqUserNameSet& usernameset(const CSReqBody* msg);
  static const ::msg::CSReqUserNameRandom& usernamerandom(const CSReqBody* msg);
  static const ::msg::CSReqHeadPicSet& headpicset(const CSReqBody* msg);
  static const ::msg::CSReqPvp& pvp(const CSReqBody* msg);
  static const ::msg::CSReqDressChessPlayer& dresschessplayer(const CSReqBody* msg);
  static const ::msg::CSReqDressScene& dressscene(const CSReqBody* msg);
  static const ::msg::CSReqPvpLogin& pvplogin(const CSReqBody* msg);
  static const ::msg::CSReqPvpEnd& pvpend(const CSReqBody* msg);
  static const ::msg::CSReqPlayerFinish& playerfinish(const CSReqBody* msg);
  static const ::msg::CSReqPlayerQuit& playerquit(const CSReqBody* msg);
  static const ::msg::CSReqSellItem& sellitem(const CSReqBody* msg);
  static const ::msg::CSReqGetEvalAward& getevalaward(const CSReqBody* msg);
  static const ::msg::CSReqUseChessPlayer& usechessplayer(const CSReqBody* msg);
  static const ::msg::CSReqGuidReport& guidreport(const CSReqBody* msg);
  static const ::msg::CSReqGetCodeAward& getcodeaward(const CSReqBody* msg);
  static const ::msg::CSReqRoundReport& roundreport(const CSReqBody* msg);
  static const ::msg::CSReqLoadingProgress& loadingprogress(const CSReqBody* msg);
  static const ::msg::CSReqPvpChat& pvpchat(const CSReqBody* msg);
  static const ::msg::CSReqChessCombine& chesscombine(const CSReqBody* msg);
  static const ::msg::CSReqExpose& expose(const CSReqBody* msg);
  static const ::msg::CSReqApplyOrderId& applyorderid(const CSReqBody* msg);
  static const ::msg::CSReqReportOrderInfo& reportorderinfo(const CSReqBody* msg);
  static const ::msg::CSReqSetItem& setitem(const CSReqBody* msg);
  static const ::msg::CSReqUnsetItem& unsetitem(const CSReqBody* msg);
  static const ::msg::CSReqRandomItem& randomitem(const CSReqBody* msg);
  static const ::msg::CSReqChat& chat(const CSReqBody* msg);
  static const ::msg::CSReqSetChessPlayer& setchessplayer(const CSReqBody* msg);
  static const ::msg::CSReqUnsetChessPlayer& unsetchessplayer(const CSReqBody* msg);
  static const ::msg::CSReqGetFansList& getfanslist(const CSReqBody* msg);
  static const ::msg::CSReqFollowPlayer& followplayer(const CSReqBody* msg);
  static const ::msg::CSReqUnfollowPlayer& unfollowplayer(const CSReqBody* msg);
  static const ::msg::CSReqPlayersStatusInfo& playersstatusinfo(const CSReqBody* msg);
  static const ::msg::CSReqInviteJoinTeam& invitejointeam(const CSReqBody* msg);
  static const ::msg::CSReqJoinTeam& jointeam(const CSReqBody* msg);
  static const ::msg::CSReqKickOffTeamPlayer& kickoffteamplayer(const CSReqBody* msg);
  static const ::msg::CSReqTeamMsg& teammsg(const CSReqBody* msg);
  static const ::msg::CSReqTeamReady& teamready(const CSReqBody* msg);
  static const ::msg::CSReqReportPayResponse& reportpayresponse(const CSReqBody* msg);
  static const ::msg::CSReqRejectJoinTeam& rejectjointeam(const CSReqBody* msg);
  static const ::msg::CSReqShieldChat& shieldchat(const CSReqBody* msg);
  static const ::msg::CSReqBuyPassportLevel& buypassportlevel(const CSReqBody* msg);
  static const ::msg::CSReqUpgradePassport& upgradepassport(const CSReqBody* msg);
  static const ::msg::CSReqGetPassportLevelAward& getpassportlevelaward(const CSReqBody* msg);
  static const ::msg::CSReqGetPassportTaskAward& getpassporttaskaward(const CSReqBody* msg);
  static const ::msg::CSReqTelBook& telbook(const CSReqBody* msg);
  static const ::msg::CSReqActivatePassport& activatepassport(const CSReqBody* msg);
  static const ::msg::CSReqRankSeasonEval& rankseasoneval(const CSReqBody* msg);
  static const ::msg::CSReqBindAccount& bindaccount(const CSReqBody* msg);
  static const ::msg::CSReqIncAdShowCount& incadsshowcount(const CSReqBody* msg);
  static const ::msg::CSReqUseBonusCard& usebonuscard(const CSReqBody* msg);
  static const ::msg::CSReqGetSeasonAward& getseasonaward(const CSReqBody* msg);
  static const ::msg::CSReqGetAlphaActivityAward& getalphaactivityaward(const CSReqBody* msg);
  static const ::msg::CSReqGetLanguageData& getlanguagedata(const CSReqBody* msg);
  static const ::msg::CSReqGetActivityAward& getactivityaward(const CSReqBody* msg);
  static const ::msg::CSReqGetActivityData& getactivitydata(const CSReqBody* msg);
  static const ::msg::CSReqSendSms& sendsms(const CSReqBody* msg);
  static const ::msg::CSReqGetMeleeAward& getmeleeaward(const CSReqBody* msg);
  static const ::msg::CSReqAddAiToTeam& addaitoteam(const CSReqBody* msg);
  static const ::msg::CSReqShare& share(const CSReqBody* msg);
  static const ::msg::CSReqSkipInterface& skipinterface(const CSReqBody* msg);
  static const ::msg::CSReqTeamGame& teamgame(const CSReqBody* msg);
  static const ::msg::CSReqSetTeamMode& setteammode(const CSReqBody* msg);
  static const ::msg::CSReqSetHistoryPvpShowPermission& historypvpshowpermission(const CSReqBody* msg);
  static const ::msg::CSReqSearchTeam& searchteam(const CSReqBody* msg);
  static const ::msg::CSReqApplyChat& applychat(const CSReqBody* msg);
  static const ::msg::CSReqChatLogin& chatlogin(const CSReqBody* msg);
  static const ::msg::CSReqProbeNetDelay& probenetdelay(const CSReqBody* msg);
  static const ::msg::CSReqGetEggs& geteggs(const CSReqBody* msg);
  static const ::msg::CSReqBuyGoods& buygoods(const CSReqBody* msg);
  static const ::msg::CSReqExchangePassportGoods& exchangepassportgoods(const CSReqBody* msg);
  static const ::msg::CSReqUsePassportTaskCard& usepassporttaskcard(const CSReqBody* msg);
  static const ::msg::CSReqOpenRandChest& openrandchest(const CSReqBody* msg);
  static const ::msg::CSReqEggLottery& egglottery(const CSReqBody* msg);
  static const ::msg::CSReqQueryDiamondBalance& querydiamondbalance(const CSReqBody* msg);
  static const ::msg::CSReqUseItem& useitem(const CSReqBody* msg);
  static const ::msg::CSReqUseExperienceCard& useexperiencecard(const CSReqBody* msg);
  static const ::msg::CSReqRandTargetItem& randtargetitem(const CSReqBody* msg);
  static const ::msg::CSReqAddBlacklist& addblacklist(const CSReqBody* msg);
  static const ::msg::CSReqRemoveBlacklist& removeblacklist(const CSReqBody* msg);
  static const ::msg::CSReqReportPlayerBirth& reportplayerbirth(const CSReqBody* msg);
  static const ::msg::CSReqReportInfoInput& reportinfoinput(const CSReqBody* msg);
  static const ::msg::CSReqSendVerificationCode& sendverificationcode(const CSReqBody* msg);
  static const ::msg::CSReqBindPhoneNumber& bindphonenumber(const CSReqBody* msg);
  static const ::msg::CSReqWorldInvite& worldinvite(const CSReqBody* msg);
  static const ::msg::CSReqRemoveExpireItem& removeexpireitem(const CSReqBody* msg);
  static const ::msg::CSReqGetMallGoods& getmallgoods(const CSReqBody* msg);
  static const ::msg::CSReqBuyMallGoods& buymallgoods(const CSReqBody* msg);
  static const ::msg::CSReqBindSharingCode& bindsharingcode(const CSReqBody* msg);
  static const ::msg::CSReqWXBlessBag& wxblessbag(const CSReqBody* msg);
  static const ::msg::CSReqUpdateFriendsInGame& updatefriendsingame(const CSReqBody* msg);
  static const ::msg::CSReqShareReward& sharereward(const CSReqBody* msg);
  static const ::msg::CSReqAllFightInfo& allfightinfo(const CSReqBody* msg);
  static const ::msg::CSReqGetOldPlayer& getoldplayer(const CSReqBody* msg);
  static const ::msg::CSReqBindOldPlayer& bindoldplayer(const CSReqBody* msg);
  static const ::msg::CSReqSendVerificationCodeWithCheckRedis& sendverificationcodewithcheckredis(const CSReqBody* msg);
  static const ::msg::CSReqReportSetting& reportsetting(const CSReqBody* msg);
  static const ::msg::CSReqAntiData& antidata(const CSReqBody* msg);
  static const ::msg::CSReqTlogData& tlogdata(const CSReqBody* msg);
  static const ::msg::CSReqDaySign& daysign(const CSReqBody* msg);
  static const ::msg::CSReqDayFitAvoid& dayfitavoid(const CSReqBody* msg);
  static const ::msg::CSReqShareCountAward& sharecountaward(const CSReqBody* msg);
  static const ::msg::CSReqActItemExch& actitemexch(const CSReqBody* msg);
  static const ::msg::CSReqRealationStar& realationstar(const CSReqBody* msg);
  static const ::msg::CSReqGetRealationStarInviteSucc& getrealationstarinvitesucc(const CSReqBody* msg);
  static const ::msg::CSReqGetRealationStar& getrealationstar(const CSReqBody* msg);
  static const ::msg::CSReqGetActRecord& reqactrecord(const CSReqBody* msg);
  static const ::msg::CSReqJoinVoiceTeam& joinvoiceteam(const CSReqBody* msg);
  static const ::msg::CSReqJoinVoicePvp& joinvoicepvp(const CSReqBody* msg);
  static const ::msg::CSReqJoinVoiceCamp& joinvoicecamp(const CSReqBody* msg);
  static const ::msg::CSReqUserCountrySet& usercountryset(const CSReqBody* msg);
  static const ::msg::CSReqOfflineInviteJoinTeam& offlineinvitejointeam(const CSReqBody* msg);
  static const ::msg::CSReqObserve& observe(const CSReqBody* msg);
  static const ::msg::CSReqGetRecommendPvp& getrecommendpvp(const CSReqBody* msg);
  static const ::msg::CSReqObserveLogin& observelogin(const CSReqBody* msg);
  static const ::msg::CSReqQuitObserve& quitobserve(const CSReqBody* msg);
  static const ::msg::CSReqGetObserveInfo& getobserveinfo(const CSReqBody* msg);
  static const ::msg::CSReqFreeFlow& freeflow(const CSReqBody* msg);
  static const ::msg::CSReqSetPushToken& setpushtoken(const CSReqBody* msg);
  static const ::msg::CSReqTlogEvent& tlogevent(const CSReqBody* msg);
  static const ::msg::CSReqWxVVipAward& wxvvipaward(const CSReqBody* msg);
  static const ::msg::CSReqGetRelationStarWX& relationstarwx(const CSReqBody* msg);
  static const ::msg::CSReqSendWxRedPacket& sendwxredpacket(const CSReqBody* msg);
  static const ::msg::CSReqRecvWxRedPacket& recvwxredpacket(const CSReqBody* msg);
  static const ::msg::CSReqWxRedPktLike& wxredpktlike(const CSReqBody* msg);
  static const ::msg::CSReqWxRedPktRank& wxredpktrank(const CSReqBody* msg);
  static const ::msg::CSReqObservePrivilege& setobserveprivilege(const CSReqBody* msg);
  static const ::msg::CSReqPresetFastChat& presetfastchat(const CSReqBody* msg);
  static const ::msg::CSReqChangeSlotTeam& changeslotteam(const CSReqBody* msg);
  static const ::msg::CSReqChangeSubModeTeam& changesubmodeteam(const CSReqBody* msg);
  static const ::msg::CSReqConfirmChangeSlotTeam& confirmchangeslotteam(const CSReqBody* msg);
  static const ::msg::CSReqPvpRoundEnd& pvproundend(const CSReqBody* msg);
  static const ::msg::CSReqObserveChatLogin& observechatlogin(const CSReqBody* msg);
  static const ::msg::CSReqPvpConfirm& pvpconfirm(const CSReqBody* msg);
  static const ::msg::CSReqActivityPicShare& activitypicshare(const CSReqBody* msg);
  static const ::msg::CSReqBindOldBusinessPlayer& bindoldbusinessplayer(const CSReqBody* msg);
  static const ::msg::CSReqTranslate& translate(const CSReqBody* msg);
  static const ::msg::CSReqSubmitQuestionnaire& submitquestionnaire(const CSReqBody* msg);
  static const ::msg::CSReqCancelChangeSlot& cancelchangeslot(const CSReqBody* msg);
  static const ::msg::CSReqSetChessSkin& setchessskin(const CSReqBody* msg);
  static const ::msg::CSReqUnsetChessSkin& unsetchessskin(const CSReqBody* msg);
  static const ::msg::CSReqCompose& compose(const CSReqBody* msg);
  static const ::msg::CSReqOffHelpReddot& offhelpreddot(const CSReqBody* msg);
  static const ::msg::CSReqVideo& video(const CSReqBody* msg);
  static const ::msg::CSReqChangeLanguage& changelanguage(const CSReqBody* msg);
  static const ::msg::CSReqReportVideoPlay& videoplay(const CSReqBody* msg);
  static const ::msg::CSReqSetProvince& setprovince(const CSReqBody* msg);
  static const ::msg::CSReqLongyuanVoice& longyuanvoice(const CSReqBody* msg);
  static const ::msg::CSReqEnrollTournament& enrolltournament(const CSReqBody* msg);
  static const ::msg::CSReqJoinTournamentRoom& jointournamentroom(const CSReqBody* msg);
  static const ::msg::CSReqTournamentPointAward& tournamentpointaward(const CSReqBody* msg);
  static const ::msg::CSReqDealWebMail& dealwebmail(const CSReqBody* msg);
  static const ::msg::CSReqGetEnrollPlayers& getenrollplayers(const CSReqBody* msg);
  static const ::msg::CSReqChallengeAgain& challengeagain(const CSReqBody* msg);
  static const ::msg::CSReqHistoryChatMsg& historychat(const CSReqBody* msg);
  static const ::msg::CSReqSetFriendInvisible& setfriendinvisible(const CSReqBody* msg);
  static const ::msg::CSReqGetObserveAward& getobserveaward(const CSReqBody* msg);
  static const ::msg::CSReqInviteObserve& inviteobserve(const CSReqBody* msg);
  static const ::msg::CSReqRejectObserve& rejectobserve(const CSReqBody* msg);
  static const ::msg::CSReqGetTxPlayer& gettxplayer(const CSReqBody* msg);
  static const ::msg::CSReqChooseTxPlayer& choosetxplayer(const CSReqBody* msg);
  static const ::msg::CSReqGetThirdPvpInfo& getthirdpvpinfo(const CSReqBody* msg);
  static const ::msg::CSReqMarkPlayerGuide& markplayerguide(const CSReqBody* msg);
  static const ::msg::CSReqMarkChessSkinClicked& markchessskinclicked(const CSReqBody* msg);
  static const ::msg::CSReqRecruitInvitePlayer& recruitinviteplayer(const CSReqBody* msg);
  static const ::msg::CSReqRecruitBindInviter& recruitbindinviter(const CSReqBody* msg);
  static const ::msg::CSReqQueryPs4Entitlements& queryps4entitlements(const CSReqBody* msg);
  static const ::msg::CSReqActDaySign& actdaysign(const CSReqBody* msg);
  static const ::msg::CSReqHaveThirdPvp& havethirdpvpinfo(const CSReqBody* msg);
  static const ::msg::CSReqActivityMall& activitymall(const CSReqBody* msg);
  static const ::msg::CSReqPsOnly& psonly(const CSReqBody* msg);
  static const ::msg::CSReqChangeChannelType& changechanneltype(const CSReqBody* msg);
  static const ::msg::CSReqCustomCardOpt& customcardopt(const CSReqBody* msg);
  static const ::msg::CSReqStaticsReport& staticsreport(const CSReqBody* msg);
  static const ::msg::CSReqChampionHistory& championhistory(const CSReqBody* msg);
  static const ::msg::CSReqTournamentLastTopRank& tournamentlasttoprank(const CSReqBody* msg);
  static const ::msg::CSReqBigWinnerExpandMatch& bigwinnerexpandmatch(const CSReqBody* msg);
  static const ::msg::CSReqBigWinnerDailyAward& bigwinnerdailyaward(const CSReqBody* msg);
  static const ::msg::CSReqBigWinnerScoreHistory& bigwinnerscorehistory(const CSReqBody* msg);
  static const ::msg::CSReqSmeltItem& smeltitem(const CSReqBody* msg);
  static const ::msg::CSReqPVEUpTalentLevel& pveuptalentlevel(const CSReqBody* msg);
  static const ::msg::CSReqPVELuckyAward& luckyaward(const CSReqBody* msg);
  static const ::msg::CSReqApplyChannel& applychannel(const CSReqBody* msg);
  static const ::msg::CSReqTeamOP& teamop(const CSReqBody* msg);
  static const ::msg::CSReqOBTeamInfo& obteaminfo(const CSReqBody* msg);
  static const ::msg::CSReqReportHeadIconUrl& headiconurl(const CSReqBody* msg);
  static const ::msg::CSReqGetPvpServerGroup& getpvpservergroup(const CSReqBody* msg);
  static const ::msg::CSReqReportPvpInfo& reportpvpinfo(const CSReqBody* msg);
  static const ::msg::CSReqChoosePlayer& chooseplayer(const CSReqBody* msg);
  static const ::msg::CSReqPingTest& pingtest(const CSReqBody* msg);
  static const ::msg::CSReqReportRegionInfo& reportregioninfo(const CSReqBody* msg);
  static const ::msg::CSReqRecalledPlayer& recalledplaeyr(const CSReqBody* msg);
  static const ::msg::CSReqWebLogin& weblogin(const CSReqBody* msg);
  static const ::msg::CSReqInviteCodeReset& invitecodereset(const CSReqBody* msg);
  static const ::msg::CSReqRecallReward& recallreward(const CSReqBody* msg);
  static const ::msg::CSReqSwitchToCommonMatch& switchtocommonmatch(const CSReqBody* msg);
  static const ::msg::CSReqSwitchModeInTeam& switchmodeinteam(const CSReqBody* msg);
  static const ::msg::CSReqGetTNRoomState& gettnroomstate(const CSReqBody* msg);
  static const ::msg::CSReqWorkshopMatch& workshopmatch(const CSReqBody* msg);
  static const ::msg::CSReqBuyWorkshopTicket& buyworkshopticket(const CSReqBody* msg);
  static const ::msg::CSReqFavouriteWorkshopMap& favouriteworkshopmap(const CSReqBody* msg);
  static const ::msg::CSReqShortcutMapsOP& shortcutmapsop(const CSReqBody* msg);
  static const ::msg::CSReqPlayersTournamentInfo& playerstournamentinfo(const CSReqBody* msg);
  static const ::msg::CSReqScoreWorkshopMap& scoreworkshopmap(const CSReqBody* msg);
  static const ::msg::CSReqMapsVisitedByFriends& mapsvisitedbyfriends(const CSReqBody* msg);
  static const ::msg::CSReqVerifyRealName& verifyrealname(const CSReqBody* msg);
  static const ::msg::CSReqFakePay& fakepay(const CSReqBody* msg);
  static const ::msg::CSReqGuildCreate& guildcreate(const CSReqBody* msg);
  static const ::msg::CSReqGuildApply& guildapply(const CSReqBody* msg);
  static const ::msg::CSReqGuildHome& guildhome(const CSReqBody* msg);
  static const ::msg::CSReqGuildInfo& guildinfo(const CSReqBody* msg);
  static const ::msg::CSReqGuildApprove& guildapprove(const CSReqBody* msg);
  static const ::msg::CSReqGuildSetRole& guildrole(const CSReqBody* msg);
  static const ::msg::CSReqGuildModify& guildmodify(const CSReqBody* msg);
  static const ::msg::CSReqGuildKickoff& guildkickoff(const CSReqBody* msg);
  static const ::msg::CSReqGuildDismiss& guilddismiss(const CSReqBody* msg);
  static const ::msg::CSReqGuildExit& guildexit(const CSReqBody* msg);
  static const ::msg::CSReqGuildChat& guildchat(const CSReqBody* msg);
  static const ::msg::CSReqGuildList& guildlist(const CSReqBody* msg);
  static const ::msg::CSReqGuildRecommendPlayers& guildrecommendplayers(const CSReqBody* msg);
  static const ::msg::CSReqGuildInviteList& guildinvitelist(const CSReqBody* msg);
  static const ::msg::CSReqGuildInvite& guildinvite(const CSReqBody* msg);
  static const ::msg::CSReqGuildResign& guildresign(const CSReqBody* msg);
  static const ::msg::CSReqGuildRejectInvite& guildrejectinvite(const CSReqBody* msg);
  static const ::msg::CSReqGetVngCommentAward& getvngcommentaward(const CSReqBody* msg);
  static const ::msg::CSReqLevelupChest& levelupchest(const CSReqBody* msg);
  static const ::msg::CSReqWatchAd& watchad(const CSReqBody* msg);
  static const ::msg::CSReqQueryPsTournamentRoom& pstournamentroom(const CSReqBody* msg);
  static const ::msg::CSReqGetAdCumulateAward& getadcumulateaward(const CSReqBody* msg);
  static const ::msg::CSReqSetMessengerPos& setmessengerpos(const CSReqBody* msg);
  static const ::msg::CSReqUpdateAntiAddictionTime& updateantiaddictiontime(const CSReqBody* msg);
  static const ::msg::CSReqCancelReconnect& cancelreconnect(const CSReqBody* msg);
  static const ::msg::CSReqReconnect& reconnect(const CSReqBody* msg);
  static const ::msg::CSReqPassThrough& passthrough(const CSReqBody* msg);
  static const ::msg::CSReqVisitPlayer& visitplayer(const CSReqBody* msg);
  static const ::msg::CSReqLeaveGameEarly& leavegameearly(const CSReqBody* msg);
  static const ::msg::CSReqGDCommonBin& gdcommonbin(const CSReqBody* msg);
  static const ::msg::CSReqGDCommonBinData& gdbindata(const CSReqBody* msg);
  static const ::msg::CSReqAutoBattleOP& autobattleop(const CSReqBody* msg);
  static const ::msg::CSReqRestrictUser& restrictuser(const CSReqBody* msg);
  static const ::msg::CSReqEquipSelectRate& equipselectrate(const CSReqBody* msg);
  static const ::msg::CSReqReportAbsent& reportabsent(const CSReqBody* msg);
  static const ::msg::CSReqRecommendWeek& recommendweek(const CSReqBody* msg);
  static const ::msg::CSReqRecommendOfficial& recommendofficial(const CSReqBody* msg);
  static const ::msg::CSReqRecommendLatest& recommendlatest(const CSReqBody* msg);
  static const ::msg::CSReqRecommendHistory& recommendhistory(const CSReqBody* msg);
  static const ::msg::CSReqRecommendCollect& recommendcollect(const CSReqBody* msg);
  static const ::msg::CSReqRecommendSet& recommendset(const CSReqBody* msg);
  static const ::msg::CSReqRecommendGetCollection& recommendgetcollection(const CSReqBody* msg);
  static const ::msg::CSReqRecommendEquip& recommendequip(const CSReqBody* msg);
  static const ::msg::CSReqLoginCancel& logincancel(const CSReqBody* msg);
  static const ::msg::CSReqConvertDebris& convertdebris(const CSReqBody* msg);
  static const ::msg::CSReqUseProtectionCard& protectioncard(const CSReqBody* msg);
  static const ::msg::CSReqUsePassportCard& usepassportcard(const CSReqBody* msg);
  static const ::msg::CSReqSetMedal& setmedal(const CSReqBody* msg);
  static const ::msg::CSReqUnSetMedal& unsetmedal(const CSReqBody* msg);
  static const ::msg::CSReqPlayerMedals& playermedals(const CSReqBody* msg);
  static const ::msg::CSReqUpdateHotDot& updatehotdot(const CSReqBody* msg);
  static const ::msg::CSReqQueryHotDot& queryhotdot(const CSReqBody* msg);
  static const ::msg::CSReqSetCache& setcache(const CSReqBody* msg);
  static const ::msg::CSReqGetCache& getcache(const CSReqBody* msg);
  static const ::msg::CSReqBuyChallengeCount& buychallengecount(const CSReqBody* msg);
  static const ::msg::CSReqGetPveRank& getpverank(const CSReqBody* msg);
  static const ::msg::CSReqLogin& authaccount(const CSReqBody* msg);
  static const ::msg::CSReqUnbindAccount& unbindaccount(const CSReqBody* msg);
  static const ::msg::CSReqBagToItem& bagtoitem(const CSReqBody* msg);
  static const ::msg::CSReqIdentifyItem& identifyitem(const CSReqBody* msg);
  static const ::msg::CSReqInsetItemAffix& insetitemaffix(const CSReqBody* msg);
  static const ::msg::CSReqUnsetItemAffix& unsetitemaffix(const CSReqBody* msg);
  static const ::msg::CSReqSetDefaultAttributes& setdefaultattributes(const CSReqBody* msg);
  static const ::msg::CSReqCheckCancel& checkcancel(const CSReqBody* msg);
  static const ::msg::CSReqCancelAccount& cancelaccount(const CSReqBody* msg);
  static const ::msg::CSReqOAuthApp& oauthapp(const CSReqBody* msg);
  static const ::msg::CSReqGetSelfNumRankData& getselfnumrankdata(const CSReqBody* msg);
  static const ::msg::CSReqUpdateCardGroup& updatecardgroup(const CSReqBody* msg);
  static const ::msg::CSReqUpdateCardGroupName& updatecardgroupname(const CSReqBody* msg);
  static const ::msg::CSReqBuyPveBuff& buypvebuff(const CSReqBody* msg);
  static const ::msg::CSReqSetCardGroup& setcardgroup(const CSReqBody* msg);
  static const ::msg::CSReqBuyPveChessTemplate& buypvechesstemplate(const CSReqBody* msg);
  static const ::msg::CSReqPveUnlockChessTemplate& pveunlockchesstemplate(const CSReqBody* msg);
  static const ::msg::CSReqPveSetTeamDeBuff& pvesetteamdebuff(const CSReqBody* msg);
  static const ::msg::CSReqChoseCardGroup& chosecardgroup(const CSReqBody* msg);
  static const ::msg::CSReqRemoveOvertimeBuff& removeovertimebuff(const CSReqBody* msg);
  static const ::msg::CSRspUpdateNewCardGroupSign& updatenewcardgroupsign(const CSReqBody* msg);
  static const ::msg::CSReqTDGetOnHookAward& tdgetonhookaward(const CSReqBody* msg);
  static const ::msg::CsReqTDDraw& tddraw(const CSReqBody* msg);
  static const ::msg::CsReqTDBuyCard& tdbuycard(const CSReqBody* msg);
  static const ::msg::CSReqTDSetCardGroup& tdsetcardgroup(const CSReqBody* msg);
  static const ::msg::CSReqTDLevelUp& tdlevelup(const CSReqBody* msg);
  static const ::msg::CSReqTDEquip& tdequip(const CSReqBody* msg);
  static const ::msg::CSReqMentorUpdateSetting& mentorupdatesetting(const CSReqBody* msg);
  static const ::msg::CSReqMentorInvite& mentorinvite(const CSReqBody* msg);
  static const ::msg::CSReqMentorConfirmInvite& mentorconfirminvite(const CSReqBody* msg);
  static const ::msg::CSReqMentorRecommendList& mentorrecommendlist(const CSReqBody* msg);
  static const ::msg::CSReqMentorGetTaskAward& mentorgettaskaward(const CSReqBody* msg);
  static const ::msg::CSReqMentorGraduate& mentorgraduate(const CSReqBody* msg);
  static const ::msg::CSReqMentorRelieveRelation& mentorrelieverelation(const CSReqBody* msg);
  static const ::msg::CSReqGetMentorInfo& getmentorinfo(const CSReqBody* msg);
  static const ::msg::CSReqMentorGetInviteMsg& mentorgetinvitemsg(const CSReqBody* msg);
  static const ::msg::CSReqUpdateCardGroupBetter& updatecardgroupbetter(const CSReqBody* msg);
  static const ::msg::CSReqUpdateCardGroupSetting& updatecardgroupsetting(const CSReqBody* msg);
  static const ::msg::CSReqSetContent& setcontent(const CSReqBody* msg);
  static const ::msg::CSReqGetBalance& getbalance(const CSReqBody* msg);
  static const ::msg::CSReqRechargeBalance& rechargebalance(const CSReqBody* msg);
  static const ::msg::CSReqWithdrawBalance& withdrawbalance(const CSReqBody* msg);
  static const ::msg::CSReqPersonalRecommendMall& personalrecommendmall(const CSReqBody* msg);
  static const ::msg::CSReqGetMedalChestAward& getmedalchestaward(const CSReqBody* msg);
  static const ::msg::CSReqSetItemAutoUse& setitemautouse(const CSReqBody* msg);
};

const ::msg::CSReqHeart&
CSReqBody::_Internal::heart(const CSReqBody* msg) {
  return *msg->_impl_.heart_;
}
const ::msg::CSReqLogin&
CSReqBody::_Internal::login(const CSReqBody* msg) {
  return *msg->_impl_.login_;
}
const ::msg::CSReqVersionCheck&
CSReqBody::_Internal::versioncheck(const CSReqBody* msg) {
  return *msg->_impl_.versioncheck_;
}
const ::msg::CSReqResourceVersionCheck&
CSReqBody::_Internal::resourceversioncheck(const CSReqBody* msg) {
  return *msg->_impl_.resourceversioncheck_;
}
const ::msg::CSReqApplyHallServer&
CSReqBody::_Internal::applyhallserver(const CSReqBody* msg) {
  return *msg->_impl_.applyhallserver_;
}
const ::msg::CSReqGetNumRank&
CSReqBody::_Internal::getnumrank(const CSReqBody* msg) {
  return *msg->_impl_.getnumrank_;
}
const ::msg::CSReqWorldChat&
CSReqBody::_Internal::worldchat(const CSReqBody* msg) {
  return *msg->_impl_.worldchat_;
}
const ::msg::CSReqPlayersBaseInfo&
CSReqBody::_Internal::playersbaseinfo(const CSReqBody* msg) {
  return *msg->_impl_.playersbaseinfo_;
}
const ::msg::CSReqPlayerDetailInfo&
CSReqBody::_Internal::playerdetailinfo(const CSReqBody* msg) {
  return *msg->_impl_.playerdetailinfo_;
}
const ::msg::CSReqReadMail&
CSReqBody::_Internal::readmail(const CSReqBody* msg) {
  return *msg->_impl_.readmail_;
}
const ::msg::CSReqGetMailAward&
CSReqBody::_Internal::getmailaward(const CSReqBody* msg) {
  return *msg->_impl_.getmailaward_;
}
const ::msg::CSReqBuyEgg&
CSReqBody::_Internal::buyegg(const CSReqBody* msg) {
  return *msg->_impl_.buyegg_;
}
const ::msg::CSReqUserNameSet&
CSReqBody::_Internal::usernameset(const CSReqBody* msg) {
  return *msg->_impl_.usernameset_;
}
const ::msg::CSReqUserNameRandom&
CSReqBody::_Internal::usernamerandom(const CSReqBody* msg) {
  return *msg->_impl_.usernamerandom_;
}
const ::msg::CSReqHeadPicSet&
CSReqBody::_Internal::headpicset(const CSReqBody* msg) {
  return *msg->_impl_.headpicset_;
}
const ::msg::CSReqPvp&
CSReqBody::_Internal::pvp(const CSReqBody* msg) {
  return *msg->_impl_.pvp_;
}
const ::msg::CSReqDressChessPlayer&
CSReqBody::_Internal::dresschessplayer(const CSReqBody* msg) {
  return *msg->_impl_.dresschessplayer_;
}
const ::msg::CSReqDressScene&
CSReqBody::_Internal::dressscene(const CSReqBody* msg) {
  return *msg->_impl_.dressscene_;
}
const ::msg::CSReqPvpLogin&
CSReqBody::_Internal::pvplogin(const CSReqBody* msg) {
  return *msg->_impl_.pvplogin_;
}
const ::msg::CSReqPvpEnd&
CSReqBody::_Internal::pvpend(const CSReqBody* msg) {
  return *msg->_impl_.pvpend_;
}
const ::msg::CSReqPlayerFinish&
CSReqBody::_Internal::playerfinish(const CSReqBody* msg) {
  return *msg->_impl_.playerfinish_;
}
const ::msg::CSReqPlayerQuit&
CSReqBody::_Internal::playerquit(const CSReqBody* msg) {
  return *msg->_impl_.playerquit_;
}
const ::msg::CSReqSellItem&
CSReqBody::_Internal::sellitem(const CSReqBody* msg) {
  return *msg->_impl_.sellitem_;
}
const ::msg::CSReqGetEvalAward&
CSReqBody::_Internal::getevalaward(const CSReqBody* msg) {
  return *msg->_impl_.getevalaward_;
}
const ::msg::CSReqUseChessPlayer&
CSReqBody::_Internal::usechessplayer(const CSReqBody* msg) {
  return *msg->_impl_.usechessplayer_;
}
const ::msg::CSReqGuidReport&
CSReqBody::_Internal::guidreport(const CSReqBody* msg) {
  return *msg->_impl_.guidreport_;
}
const ::msg::CSReqGetCodeAward&
CSReqBody::_Internal::getcodeaward(const CSReqBody* msg) {
  return *msg->_impl_.getcodeaward_;
}
const ::msg::CSReqRoundReport&
CSReqBody::_Internal::roundreport(const CSReqBody* msg) {
  return *msg->_impl_.roundreport_;
}
const ::msg::CSReqLoadingProgress&
CSReqBody::_Internal::loadingprogress(const CSReqBody* msg) {
  return *msg->_impl_.loadingprogress_;
}
const ::msg::CSReqPvpChat&
CSReqBody::_Internal::pvpchat(const CSReqBody* msg) {
  return *msg->_impl_.pvpchat_;
}
const ::msg::CSReqChessCombine&
CSReqBody::_Internal::chesscombine(const CSReqBody* msg) {
  return *msg->_impl_.chesscombine_;
}
const ::msg::CSReqExpose&
CSReqBody::_Internal::expose(const CSReqBody* msg) {
  return *msg->_impl_.expose_;
}
const ::msg::CSReqApplyOrderId&
CSReqBody::_Internal::applyorderid(const CSReqBody* msg) {
  return *msg->_impl_.applyorderid_;
}
const ::msg::CSReqReportOrderInfo&
CSReqBody::_Internal::reportorderinfo(const CSReqBody* msg) {
  return *msg->_impl_.reportorderinfo_;
}
const ::msg::CSReqSetItem&
CSReqBody::_Internal::setitem(const CSReqBody* msg) {
  return *msg->_impl_.setitem_;
}
const ::msg::CSReqUnsetItem&
CSReqBody::_Internal::unsetitem(const CSReqBody* msg) {
  return *msg->_impl_.unsetitem_;
}
const ::msg::CSReqRandomItem&
CSReqBody::_Internal::randomitem(const CSReqBody* msg) {
  return *msg->_impl_.randomitem_;
}
const ::msg::CSReqChat&
CSReqBody::_Internal::chat(const CSReqBody* msg) {
  return *msg->_impl_.chat_;
}
const ::msg::CSReqSetChessPlayer&
CSReqBody::_Internal::setchessplayer(const CSReqBody* msg) {
  return *msg->_impl_.setchessplayer_;
}
const ::msg::CSReqUnsetChessPlayer&
CSReqBody::_Internal::unsetchessplayer(const CSReqBody* msg) {
  return *msg->_impl_.unsetchessplayer_;
}
const ::msg::CSReqGetFansList&
CSReqBody::_Internal::getfanslist(const CSReqBody* msg) {
  return *msg->_impl_.getfanslist_;
}
const ::msg::CSReqFollowPlayer&
CSReqBody::_Internal::followplayer(const CSReqBody* msg) {
  return *msg->_impl_.followplayer_;
}
const ::msg::CSReqUnfollowPlayer&
CSReqBody::_Internal::unfollowplayer(const CSReqBody* msg) {
  return *msg->_impl_.unfollowplayer_;
}
const ::msg::CSReqPlayersStatusInfo&
CSReqBody::_Internal::playersstatusinfo(const CSReqBody* msg) {
  return *msg->_impl_.playersstatusinfo_;
}
const ::msg::CSReqInviteJoinTeam&
CSReqBody::_Internal::invitejointeam(const CSReqBody* msg) {
  return *msg->_impl_.invitejointeam_;
}
const ::msg::CSReqJoinTeam&
CSReqBody::_Internal::jointeam(const CSReqBody* msg) {
  return *msg->_impl_.jointeam_;
}
const ::msg::CSReqKickOffTeamPlayer&
CSReqBody::_Internal::kickoffteamplayer(const CSReqBody* msg) {
  return *msg->_impl_.kickoffteamplayer_;
}
const ::msg::CSReqTeamMsg&
CSReqBody::_Internal::teammsg(const CSReqBody* msg) {
  return *msg->_impl_.teammsg_;
}
const ::msg::CSReqTeamReady&
CSReqBody::_Internal::teamready(const CSReqBody* msg) {
  return *msg->_impl_.teamready_;
}
const ::msg::CSReqReportPayResponse&
CSReqBody::_Internal::reportpayresponse(const CSReqBody* msg) {
  return *msg->_impl_.reportpayresponse_;
}
const ::msg::CSReqRejectJoinTeam&
CSReqBody::_Internal::rejectjointeam(const CSReqBody* msg) {
  return *msg->_impl_.rejectjointeam_;
}
const ::msg::CSReqShieldChat&
CSReqBody::_Internal::shieldchat(const CSReqBody* msg) {
  return *msg->_impl_.shieldchat_;
}
const ::msg::CSReqBuyPassportLevel&
CSReqBody::_Internal::buypassportlevel(const CSReqBody* msg) {
  return *msg->_impl_.buypassportlevel_;
}
const ::msg::CSReqUpgradePassport&
CSReqBody::_Internal::upgradepassport(const CSReqBody* msg) {
  return *msg->_impl_.upgradepassport_;
}
const ::msg::CSReqGetPassportLevelAward&
CSReqBody::_Internal::getpassportlevelaward(const CSReqBody* msg) {
  return *msg->_impl_.getpassportlevelaward_;
}
const ::msg::CSReqGetPassportTaskAward&
CSReqBody::_Internal::getpassporttaskaward(const CSReqBody* msg) {
  return *msg->_impl_.getpassporttaskaward_;
}
const ::msg::CSReqTelBook&
CSReqBody::_Internal::telbook(const CSReqBody* msg) {
  return *msg->_impl_.telbook_;
}
const ::msg::CSReqActivatePassport&
CSReqBody::_Internal::activatepassport(const CSReqBody* msg) {
  return *msg->_impl_.activatepassport_;
}
const ::msg::CSReqRankSeasonEval&
CSReqBody::_Internal::rankseasoneval(const CSReqBody* msg) {
  return *msg->_impl_.rankseasoneval_;
}
const ::msg::CSReqBindAccount&
CSReqBody::_Internal::bindaccount(const CSReqBody* msg) {
  return *msg->_impl_.bindaccount_;
}
const ::msg::CSReqIncAdShowCount&
CSReqBody::_Internal::incadsshowcount(const CSReqBody* msg) {
  return *msg->_impl_.incadsshowcount_;
}
const ::msg::CSReqUseBonusCard&
CSReqBody::_Internal::usebonuscard(const CSReqBody* msg) {
  return *msg->_impl_.usebonuscard_;
}
const ::msg::CSReqGetSeasonAward&
CSReqBody::_Internal::getseasonaward(const CSReqBody* msg) {
  return *msg->_impl_.getseasonaward_;
}
const ::msg::CSReqGetAlphaActivityAward&
CSReqBody::_Internal::getalphaactivityaward(const CSReqBody* msg) {
  return *msg->_impl_.getalphaactivityaward_;
}
const ::msg::CSReqGetLanguageData&
CSReqBody::_Internal::getlanguagedata(const CSReqBody* msg) {
  return *msg->_impl_.getlanguagedata_;
}
const ::msg::CSReqGetActivityAward&
CSReqBody::_Internal::getactivityaward(const CSReqBody* msg) {
  return *msg->_impl_.getactivityaward_;
}
const ::msg::CSReqGetActivityData&
CSReqBody::_Internal::getactivitydata(const CSReqBody* msg) {
  return *msg->_impl_.getactivitydata_;
}
const ::msg::CSReqSendSms&
CSReqBody::_Internal::sendsms(const CSReqBody* msg) {
  return *msg->_impl_.sendsms_;
}
const ::msg::CSReqGetMeleeAward&
CSReqBody::_Internal::getmeleeaward(const CSReqBody* msg) {
  return *msg->_impl_.getmeleeaward_;
}
const ::msg::CSReqAddAiToTeam&
CSReqBody::_Internal::addaitoteam(const CSReqBody* msg) {
  return *msg->_impl_.addaitoteam_;
}
const ::msg::CSReqShare&
CSReqBody::_Internal::share(const CSReqBody* msg) {
  return *msg->_impl_.share_;
}
const ::msg::CSReqSkipInterface&
CSReqBody::_Internal::skipinterface(const CSReqBody* msg) {
  return *msg->_impl_.skipinterface_;
}
const ::msg::CSReqTeamGame&
CSReqBody::_Internal::teamgame(const CSReqBody* msg) {
  return *msg->_impl_.teamgame_;
}
const ::msg::CSReqSetTeamMode&
CSReqBody::_Internal::setteammode(const CSReqBody* msg) {
  return *msg->_impl_.setteammode_;
}
const ::msg::CSReqSetHistoryPvpShowPermission&
CSReqBody::_Internal::historypvpshowpermission(const CSReqBody* msg) {
  return *msg->_impl_.historypvpshowpermission_;
}
const ::msg::CSReqSearchTeam&
CSReqBody::_Internal::searchteam(const CSReqBody* msg) {
  return *msg->_impl_.searchteam_;
}
const ::msg::CSReqApplyChat&
CSReqBody::_Internal::applychat(const CSReqBody* msg) {
  return *msg->_impl_.applychat_;
}
const ::msg::CSReqChatLogin&
CSReqBody::_Internal::chatlogin(const CSReqBody* msg) {
  return *msg->_impl_.chatlogin_;
}
const ::msg::CSReqProbeNetDelay&
CSReqBody::_Internal::probenetdelay(const CSReqBody* msg) {
  return *msg->_impl_.probenetdelay_;
}
const ::msg::CSReqGetEggs&
CSReqBody::_Internal::geteggs(const CSReqBody* msg) {
  return *msg->_impl_.geteggs_;
}
const ::msg::CSReqBuyGoods&
CSReqBody::_Internal::buygoods(const CSReqBody* msg) {
  return *msg->_impl_.buygoods_;
}
const ::msg::CSReqExchangePassportGoods&
CSReqBody::_Internal::exchangepassportgoods(const CSReqBody* msg) {
  return *msg->_impl_.exchangepassportgoods_;
}
const ::msg::CSReqUsePassportTaskCard&
CSReqBody::_Internal::usepassporttaskcard(const CSReqBody* msg) {
  return *msg->_impl_.usepassporttaskcard_;
}
const ::msg::CSReqOpenRandChest&
CSReqBody::_Internal::openrandchest(const CSReqBody* msg) {
  return *msg->_impl_.openrandchest_;
}
const ::msg::CSReqEggLottery&
CSReqBody::_Internal::egglottery(const CSReqBody* msg) {
  return *msg->_impl_.egglottery_;
}
const ::msg::CSReqQueryDiamondBalance&
CSReqBody::_Internal::querydiamondbalance(const CSReqBody* msg) {
  return *msg->_impl_.querydiamondbalance_;
}
const ::msg::CSReqUseItem&
CSReqBody::_Internal::useitem(const CSReqBody* msg) {
  return *msg->_impl_.useitem_;
}
const ::msg::CSReqUseExperienceCard&
CSReqBody::_Internal::useexperiencecard(const CSReqBody* msg) {
  return *msg->_impl_.useexperiencecard_;
}
const ::msg::CSReqRandTargetItem&
CSReqBody::_Internal::randtargetitem(const CSReqBody* msg) {
  return *msg->_impl_.randtargetitem_;
}
const ::msg::CSReqAddBlacklist&
CSReqBody::_Internal::addblacklist(const CSReqBody* msg) {
  return *msg->_impl_.addblacklist_;
}
const ::msg::CSReqRemoveBlacklist&
CSReqBody::_Internal::removeblacklist(const CSReqBody* msg) {
  return *msg->_impl_.removeblacklist_;
}
const ::msg::CSReqReportPlayerBirth&
CSReqBody::_Internal::reportplayerbirth(const CSReqBody* msg) {
  return *msg->_impl_.reportplayerbirth_;
}
const ::msg::CSReqReportInfoInput&
CSReqBody::_Internal::reportinfoinput(const CSReqBody* msg) {
  return *msg->_impl_.reportinfoinput_;
}
const ::msg::CSReqSendVerificationCode&
CSReqBody::_Internal::sendverificationcode(const CSReqBody* msg) {
  return *msg->_impl_.sendverificationcode_;
}
const ::msg::CSReqBindPhoneNumber&
CSReqBody::_Internal::bindphonenumber(const CSReqBody* msg) {
  return *msg->_impl_.bindphonenumber_;
}
const ::msg::CSReqWorldInvite&
CSReqBody::_Internal::worldinvite(const CSReqBody* msg) {
  return *msg->_impl_.worldinvite_;
}
const ::msg::CSReqRemoveExpireItem&
CSReqBody::_Internal::removeexpireitem(const CSReqBody* msg) {
  return *msg->_impl_.removeexpireitem_;
}
const ::msg::CSReqGetMallGoods&
CSReqBody::_Internal::getmallgoods(const CSReqBody* msg) {
  return *msg->_impl_.getmallgoods_;
}
const ::msg::CSReqBuyMallGoods&
CSReqBody::_Internal::buymallgoods(const CSReqBody* msg) {
  return *msg->_impl_.buymallgoods_;
}
const ::msg::CSReqBindSharingCode&
CSReqBody::_Internal::bindsharingcode(const CSReqBody* msg) {
  return *msg->_impl_.bindsharingcode_;
}
const ::msg::CSReqWXBlessBag&
CSReqBody::_Internal::wxblessbag(const CSReqBody* msg) {
  return *msg->_impl_.wxblessbag_;
}
const ::msg::CSReqUpdateFriendsInGame&
CSReqBody::_Internal::updatefriendsingame(const CSReqBody* msg) {
  return *msg->_impl_.updatefriendsingame_;
}
const ::msg::CSReqShareReward&
CSReqBody::_Internal::sharereward(const CSReqBody* msg) {
  return *msg->_impl_.sharereward_;
}
const ::msg::CSReqAllFightInfo&
CSReqBody::_Internal::allfightinfo(const CSReqBody* msg) {
  return *msg->_impl_.allfightinfo_;
}
const ::msg::CSReqGetOldPlayer&
CSReqBody::_Internal::getoldplayer(const CSReqBody* msg) {
  return *msg->_impl_.getoldplayer_;
}
const ::msg::CSReqBindOldPlayer&
CSReqBody::_Internal::bindoldplayer(const CSReqBody* msg) {
  return *msg->_impl_.bindoldplayer_;
}
const ::msg::CSReqSendVerificationCodeWithCheckRedis&
CSReqBody::_Internal::sendverificationcodewithcheckredis(const CSReqBody* msg) {
  return *msg->_impl_.sendverificationcodewithcheckredis_;
}
const ::msg::CSReqReportSetting&
CSReqBody::_Internal::reportsetting(const CSReqBody* msg) {
  return *msg->_impl_.reportsetting_;
}
const ::msg::CSReqAntiData&
CSReqBody::_Internal::antidata(const CSReqBody* msg) {
  return *msg->_impl_.antidata_;
}
const ::msg::CSReqTlogData&
CSReqBody::_Internal::tlogdata(const CSReqBody* msg) {
  return *msg->_impl_.tlogdata_;
}
const ::msg::CSReqDaySign&
CSReqBody::_Internal::daysign(const CSReqBody* msg) {
  return *msg->_impl_.daysign_;
}
const ::msg::CSReqDayFitAvoid&
CSReqBody::_Internal::dayfitavoid(const CSReqBody* msg) {
  return *msg->_impl_.dayfitavoid_;
}
const ::msg::CSReqShareCountAward&
CSReqBody::_Internal::sharecountaward(const CSReqBody* msg) {
  return *msg->_impl_.sharecountaward_;
}
const ::msg::CSReqActItemExch&
CSReqBody::_Internal::actitemexch(const CSReqBody* msg) {
  return *msg->_impl_.actitemexch_;
}
const ::msg::CSReqRealationStar&
CSReqBody::_Internal::realationstar(const CSReqBody* msg) {
  return *msg->_impl_.realationstar_;
}
const ::msg::CSReqGetRealationStarInviteSucc&
CSReqBody::_Internal::getrealationstarinvitesucc(const CSReqBody* msg) {
  return *msg->_impl_.getrealationstarinvitesucc_;
}
const ::msg::CSReqGetRealationStar&
CSReqBody::_Internal::getrealationstar(const CSReqBody* msg) {
  return *msg->_impl_.getrealationstar_;
}
const ::msg::CSReqGetActRecord&
CSReqBody::_Internal::reqactrecord(const CSReqBody* msg) {
  return *msg->_impl_.reqactrecord_;
}
const ::msg::CSReqJoinVoiceTeam&
CSReqBody::_Internal::joinvoiceteam(const CSReqBody* msg) {
  return *msg->_impl_.joinvoiceteam_;
}
const ::msg::CSReqJoinVoicePvp&
CSReqBody::_Internal::joinvoicepvp(const CSReqBody* msg) {
  return *msg->_impl_.joinvoicepvp_;
}
const ::msg::CSReqJoinVoiceCamp&
CSReqBody::_Internal::joinvoicecamp(const CSReqBody* msg) {
  return *msg->_impl_.joinvoicecamp_;
}
const ::msg::CSReqUserCountrySet&
CSReqBody::_Internal::usercountryset(const CSReqBody* msg) {
  return *msg->_impl_.usercountryset_;
}
const ::msg::CSReqOfflineInviteJoinTeam&
CSReqBody::_Internal::offlineinvitejointeam(const CSReqBody* msg) {
  return *msg->_impl_.offlineinvitejointeam_;
}
const ::msg::CSReqObserve&
CSReqBody::_Internal::observe(const CSReqBody* msg) {
  return *msg->_impl_.observe_;
}
const ::msg::CSReqGetRecommendPvp&
CSReqBody::_Internal::getrecommendpvp(const CSReqBody* msg) {
  return *msg->_impl_.getrecommendpvp_;
}
const ::msg::CSReqObserveLogin&
CSReqBody::_Internal::observelogin(const CSReqBody* msg) {
  return *msg->_impl_.observelogin_;
}
const ::msg::CSReqQuitObserve&
CSReqBody::_Internal::quitobserve(const CSReqBody* msg) {
  return *msg->_impl_.quitobserve_;
}
const ::msg::CSReqGetObserveInfo&
CSReqBody::_Internal::getobserveinfo(const CSReqBody* msg) {
  return *msg->_impl_.getobserveinfo_;
}
const ::msg::CSReqFreeFlow&
CSReqBody::_Internal::freeflow(const CSReqBody* msg) {
  return *msg->_impl_.freeflow_;
}
const ::msg::CSReqSetPushToken&
CSReqBody::_Internal::setpushtoken(const CSReqBody* msg) {
  return *msg->_impl_.setpushtoken_;
}
const ::msg::CSReqTlogEvent&
CSReqBody::_Internal::tlogevent(const CSReqBody* msg) {
  return *msg->_impl_.tlogevent_;
}
const ::msg::CSReqWxVVipAward&
CSReqBody::_Internal::wxvvipaward(const CSReqBody* msg) {
  return *msg->_impl_.wxvvipaward_;
}
const ::msg::CSReqGetRelationStarWX&
CSReqBody::_Internal::relationstarwx(const CSReqBody* msg) {
  return *msg->_impl_.relationstarwx_;
}
const ::msg::CSReqSendWxRedPacket&
CSReqBody::_Internal::sendwxredpacket(const CSReqBody* msg) {
  return *msg->_impl_.sendwxredpacket_;
}
const ::msg::CSReqRecvWxRedPacket&
CSReqBody::_Internal::recvwxredpacket(const CSReqBody* msg) {
  return *msg->_impl_.recvwxredpacket_;
}
const ::msg::CSReqWxRedPktLike&
CSReqBody::_Internal::wxredpktlike(const CSReqBody* msg) {
  return *msg->_impl_.wxredpktlike_;
}
const ::msg::CSReqWxRedPktRank&
CSReqBody::_Internal::wxredpktrank(const CSReqBody* msg) {
  return *msg->_impl_.wxredpktrank_;
}
const ::msg::CSReqObservePrivilege&
CSReqBody::_Internal::setobserveprivilege(const CSReqBody* msg) {
  return *msg->_impl_.setobserveprivilege_;
}
const ::msg::CSReqPresetFastChat&
CSReqBody::_Internal::presetfastchat(const CSReqBody* msg) {
  return *msg->_impl_.presetfastchat_;
}
const ::msg::CSReqChangeSlotTeam&
CSReqBody::_Internal::changeslotteam(const CSReqBody* msg) {
  return *msg->_impl_.changeslotteam_;
}
const ::msg::CSReqChangeSubModeTeam&
CSReqBody::_Internal::changesubmodeteam(const CSReqBody* msg) {
  return *msg->_impl_.changesubmodeteam_;
}
const ::msg::CSReqConfirmChangeSlotTeam&
CSReqBody::_Internal::confirmchangeslotteam(const CSReqBody* msg) {
  return *msg->_impl_.confirmchangeslotteam_;
}
const ::msg::CSReqPvpRoundEnd&
CSReqBody::_Internal::pvproundend(const CSReqBody* msg) {
  return *msg->_impl_.pvproundend_;
}
const ::msg::CSReqObserveChatLogin&
CSReqBody::_Internal::observechatlogin(const CSReqBody* msg) {
  return *msg->_impl_.observechatlogin_;
}
const ::msg::CSReqPvpConfirm&
CSReqBody::_Internal::pvpconfirm(const CSReqBody* msg) {
  return *msg->_impl_.pvpconfirm_;
}
const ::msg::CSReqActivityPicShare&
CSReqBody::_Internal::activitypicshare(const CSReqBody* msg) {
  return *msg->_impl_.activitypicshare_;
}
const ::msg::CSReqBindOldBusinessPlayer&
CSReqBody::_Internal::bindoldbusinessplayer(const CSReqBody* msg) {
  return *msg->_impl_.bindoldbusinessplayer_;
}
const ::msg::CSReqTranslate&
CSReqBody::_Internal::translate(const CSReqBody* msg) {
  return *msg->_impl_.translate_;
}
const ::msg::CSReqSubmitQuestionnaire&
CSReqBody::_Internal::submitquestionnaire(const CSReqBody* msg) {
  return *msg->_impl_.submitquestionnaire_;
}
const ::msg::CSReqCancelChangeSlot&
CSReqBody::_Internal::cancelchangeslot(const CSReqBody* msg) {
  return *msg->_impl_.cancelchangeslot_;
}
const ::msg::CSReqSetChessSkin&
CSReqBody::_Internal::setchessskin(const CSReqBody* msg) {
  return *msg->_impl_.setchessskin_;
}
const ::msg::CSReqUnsetChessSkin&
CSReqBody::_Internal::unsetchessskin(const CSReqBody* msg) {
  return *msg->_impl_.unsetchessskin_;
}
const ::msg::CSReqCompose&
CSReqBody::_Internal::compose(const CSReqBody* msg) {
  return *msg->_impl_.compose_;
}
const ::msg::CSReqOffHelpReddot&
CSReqBody::_Internal::offhelpreddot(const CSReqBody* msg) {
  return *msg->_impl_.offhelpreddot_;
}
const ::msg::CSReqVideo&
CSReqBody::_Internal::video(const CSReqBody* msg) {
  return *msg->_impl_.video_;
}
const ::msg::CSReqChangeLanguage&
CSReqBody::_Internal::changelanguage(const CSReqBody* msg) {
  return *msg->_impl_.changelanguage_;
}
const ::msg::CSReqReportVideoPlay&
CSReqBody::_Internal::videoplay(const CSReqBody* msg) {
  return *msg->_impl_.videoplay_;
}
const ::msg::CSReqSetProvince&
CSReqBody::_Internal::setprovince(const CSReqBody* msg) {
  return *msg->_impl_.setprovince_;
}
const ::msg::CSReqLongyuanVoice&
CSReqBody::_Internal::longyuanvoice(const CSReqBody* msg) {
  return *msg->_impl_.longyuanvoice_;
}
const ::msg::CSReqEnrollTournament&
CSReqBody::_Internal::enrolltournament(const CSReqBody* msg) {
  return *msg->_impl_.enrolltournament_;
}
const ::msg::CSReqJoinTournamentRoom&
CSReqBody::_Internal::jointournamentroom(const CSReqBody* msg) {
  return *msg->_impl_.jointournamentroom_;
}
const ::msg::CSReqTournamentPointAward&
CSReqBody::_Internal::tournamentpointaward(const CSReqBody* msg) {
  return *msg->_impl_.tournamentpointaward_;
}
const ::msg::CSReqDealWebMail&
CSReqBody::_Internal::dealwebmail(const CSReqBody* msg) {
  return *msg->_impl_.dealwebmail_;
}
const ::msg::CSReqGetEnrollPlayers&
CSReqBody::_Internal::getenrollplayers(const CSReqBody* msg) {
  return *msg->_impl_.getenrollplayers_;
}
const ::msg::CSReqChallengeAgain&
CSReqBody::_Internal::challengeagain(const CSReqBody* msg) {
  return *msg->_impl_.challengeagain_;
}
const ::msg::CSReqHistoryChatMsg&
CSReqBody::_Internal::historychat(const CSReqBody* msg) {
  return *msg->_impl_.historychat_;
}
const ::msg::CSReqSetFriendInvisible&
CSReqBody::_Internal::setfriendinvisible(const CSReqBody* msg) {
  return *msg->_impl_.setfriendinvisible_;
}
const ::msg::CSReqGetObserveAward&
CSReqBody::_Internal::getobserveaward(const CSReqBody* msg) {
  return *msg->_impl_.getobserveaward_;
}
const ::msg::CSReqInviteObserve&
CSReqBody::_Internal::inviteobserve(const CSReqBody* msg) {
  return *msg->_impl_.inviteobserve_;
}
const ::msg::CSReqRejectObserve&
CSReqBody::_Internal::rejectobserve(const CSReqBody* msg) {
  return *msg->_impl_.rejectobserve_;
}
const ::msg::CSReqGetTxPlayer&
CSReqBody::_Internal::gettxplayer(const CSReqBody* msg) {
  return *msg->_impl_.gettxplayer_;
}
const ::msg::CSReqChooseTxPlayer&
CSReqBody::_Internal::choosetxplayer(const CSReqBody* msg) {
  return *msg->_impl_.choosetxplayer_;
}
const ::msg::CSReqGetThirdPvpInfo&
CSReqBody::_Internal::getthirdpvpinfo(const CSReqBody* msg) {
  return *msg->_impl_.getthirdpvpinfo_;
}
const ::msg::CSReqMarkPlayerGuide&
CSReqBody::_Internal::markplayerguide(const CSReqBody* msg) {
  return *msg->_impl_.markplayerguide_;
}
const ::msg::CSReqMarkChessSkinClicked&
CSReqBody::_Internal::markchessskinclicked(const CSReqBody* msg) {
  return *msg->_impl_.markchessskinclicked_;
}
const ::msg::CSReqRecruitInvitePlayer&
CSReqBody::_Internal::recruitinviteplayer(const CSReqBody* msg) {
  return *msg->_impl_.recruitinviteplayer_;
}
const ::msg::CSReqRecruitBindInviter&
CSReqBody::_Internal::recruitbindinviter(const CSReqBody* msg) {
  return *msg->_impl_.recruitbindinviter_;
}
const ::msg::CSReqQueryPs4Entitlements&
CSReqBody::_Internal::queryps4entitlements(const CSReqBody* msg) {
  return *msg->_impl_.queryps4entitlements_;
}
const ::msg::CSReqActDaySign&
CSReqBody::_Internal::actdaysign(const CSReqBody* msg) {
  return *msg->_impl_.actdaysign_;
}
const ::msg::CSReqHaveThirdPvp&
CSReqBody::_Internal::havethirdpvpinfo(const CSReqBody* msg) {
  return *msg->_impl_.havethirdpvpinfo_;
}
const ::msg::CSReqActivityMall&
CSReqBody::_Internal::activitymall(const CSReqBody* msg) {
  return *msg->_impl_.activitymall_;
}
const ::msg::CSReqPsOnly&
CSReqBody::_Internal::psonly(const CSReqBody* msg) {
  return *msg->_impl_.psonly_;
}
const ::msg::CSReqChangeChannelType&
CSReqBody::_Internal::changechanneltype(const CSReqBody* msg) {
  return *msg->_impl_.changechanneltype_;
}
const ::msg::CSReqCustomCardOpt&
CSReqBody::_Internal::customcardopt(const CSReqBody* msg) {
  return *msg->_impl_.customcardopt_;
}
const ::msg::CSReqStaticsReport&
CSReqBody::_Internal::staticsreport(const CSReqBody* msg) {
  return *msg->_impl_.staticsreport_;
}
const ::msg::CSReqChampionHistory&
CSReqBody::_Internal::championhistory(const CSReqBody* msg) {
  return *msg->_impl_.championhistory_;
}
const ::msg::CSReqTournamentLastTopRank&
CSReqBody::_Internal::tournamentlasttoprank(const CSReqBody* msg) {
  return *msg->_impl_.tournamentlasttoprank_;
}
const ::msg::CSReqBigWinnerExpandMatch&
CSReqBody::_Internal::bigwinnerexpandmatch(const CSReqBody* msg) {
  return *msg->_impl_.bigwinnerexpandmatch_;
}
const ::msg::CSReqBigWinnerDailyAward&
CSReqBody::_Internal::bigwinnerdailyaward(const CSReqBody* msg) {
  return *msg->_impl_.bigwinnerdailyaward_;
}
const ::msg::CSReqBigWinnerScoreHistory&
CSReqBody::_Internal::bigwinnerscorehistory(const CSReqBody* msg) {
  return *msg->_impl_.bigwinnerscorehistory_;
}
const ::msg::CSReqSmeltItem&
CSReqBody::_Internal::smeltitem(const CSReqBody* msg) {
  return *msg->_impl_.smeltitem_;
}
const ::msg::CSReqPVEUpTalentLevel&
CSReqBody::_Internal::pveuptalentlevel(const CSReqBody* msg) {
  return *msg->_impl_.pveuptalentlevel_;
}
const ::msg::CSReqPVELuckyAward&
CSReqBody::_Internal::luckyaward(const CSReqBody* msg) {
  return *msg->_impl_.luckyaward_;
}
const ::msg::CSReqApplyChannel&
CSReqBody::_Internal::applychannel(const CSReqBody* msg) {
  return *msg->_impl_.applychannel_;
}
const ::msg::CSReqTeamOP&
CSReqBody::_Internal::teamop(const CSReqBody* msg) {
  return *msg->_impl_.teamop_;
}
const ::msg::CSReqOBTeamInfo&
CSReqBody::_Internal::obteaminfo(const CSReqBody* msg) {
  return *msg->_impl_.obteaminfo_;
}
const ::msg::CSReqReportHeadIconUrl&
CSReqBody::_Internal::headiconurl(const CSReqBody* msg) {
  return *msg->_impl_.headiconurl_;
}
const ::msg::CSReqGetPvpServerGroup&
CSReqBody::_Internal::getpvpservergroup(const CSReqBody* msg) {
  return *msg->_impl_.getpvpservergroup_;
}
const ::msg::CSReqReportPvpInfo&
CSReqBody::_Internal::reportpvpinfo(const CSReqBody* msg) {
  return *msg->_impl_.reportpvpinfo_;
}
const ::msg::CSReqChoosePlayer&
CSReqBody::_Internal::chooseplayer(const CSReqBody* msg) {
  return *msg->_impl_.chooseplayer_;
}
const ::msg::CSReqPingTest&
CSReqBody::_Internal::pingtest(const CSReqBody* msg) {
  return *msg->_impl_.pingtest_;
}
const ::msg::CSReqReportRegionInfo&
CSReqBody::_Internal::reportregioninfo(const CSReqBody* msg) {
  return *msg->_impl_.reportregioninfo_;
}
const ::msg::CSReqRecalledPlayer&
CSReqBody::_Internal::recalledplaeyr(const CSReqBody* msg) {
  return *msg->_impl_.recalledplaeyr_;
}
const ::msg::CSReqWebLogin&
CSReqBody::_Internal::weblogin(const CSReqBody* msg) {
  return *msg->_impl_.weblogin_;
}
const ::msg::CSReqInviteCodeReset&
CSReqBody::_Internal::invitecodereset(const CSReqBody* msg) {
  return *msg->_impl_.invitecodereset_;
}
const ::msg::CSReqRecallReward&
CSReqBody::_Internal::recallreward(const CSReqBody* msg) {
  return *msg->_impl_.recallreward_;
}
const ::msg::CSReqSwitchToCommonMatch&
CSReqBody::_Internal::switchtocommonmatch(const CSReqBody* msg) {
  return *msg->_impl_.switchtocommonmatch_;
}
const ::msg::CSReqSwitchModeInTeam&
CSReqBody::_Internal::switchmodeinteam(const CSReqBody* msg) {
  return *msg->_impl_.switchmodeinteam_;
}
const ::msg::CSReqGetTNRoomState&
CSReqBody::_Internal::gettnroomstate(const CSReqBody* msg) {
  return *msg->_impl_.gettnroomstate_;
}
const ::msg::CSReqWorkshopMatch&
CSReqBody::_Internal::workshopmatch(const CSReqBody* msg) {
  return *msg->_impl_.workshopmatch_;
}
const ::msg::CSReqBuyWorkshopTicket&
CSReqBody::_Internal::buyworkshopticket(const CSReqBody* msg) {
  return *msg->_impl_.buyworkshopticket_;
}
const ::msg::CSReqFavouriteWorkshopMap&
CSReqBody::_Internal::favouriteworkshopmap(const CSReqBody* msg) {
  return *msg->_impl_.favouriteworkshopmap_;
}
const ::msg::CSReqShortcutMapsOP&
CSReqBody::_Internal::shortcutmapsop(const CSReqBody* msg) {
  return *msg->_impl_.shortcutmapsop_;
}
const ::msg::CSReqPlayersTournamentInfo&
CSReqBody::_Internal::playerstournamentinfo(const CSReqBody* msg) {
  return *msg->_impl_.playerstournamentinfo_;
}
const ::msg::CSReqScoreWorkshopMap&
CSReqBody::_Internal::scoreworkshopmap(const CSReqBody* msg) {
  return *msg->_impl_.scoreworkshopmap_;
}
const ::msg::CSReqMapsVisitedByFriends&
CSReqBody::_Internal::mapsvisitedbyfriends(const CSReqBody* msg) {
  return *msg->_impl_.mapsvisitedbyfriends_;
}
const ::msg::CSReqVerifyRealName&
CSReqBody::_Internal::verifyrealname(const CSReqBody* msg) {
  return *msg->_impl_.verifyrealname_;
}
const ::msg::CSReqFakePay&
CSReqBody::_Internal::fakepay(const CSReqBody* msg) {
  return *msg->_impl_.fakepay_;
}
const ::msg::CSReqGuildCreate&
CSReqBody::_Internal::guildcreate(const CSReqBody* msg) {
  return *msg->_impl_.guildcreate_;
}
const ::msg::CSReqGuildApply&
CSReqBody::_Internal::guildapply(const CSReqBody* msg) {
  return *msg->_impl_.guildapply_;
}
const ::msg::CSReqGuildHome&
CSReqBody::_Internal::guildhome(const CSReqBody* msg) {
  return *msg->_impl_.guildhome_;
}
const ::msg::CSReqGuildInfo&
CSReqBody::_Internal::guildinfo(const CSReqBody* msg) {
  return *msg->_impl_.guildinfo_;
}
const ::msg::CSReqGuildApprove&
CSReqBody::_Internal::guildapprove(const CSReqBody* msg) {
  return *msg->_impl_.guildapprove_;
}
const ::msg::CSReqGuildSetRole&
CSReqBody::_Internal::guildrole(const CSReqBody* msg) {
  return *msg->_impl_.guildrole_;
}
const ::msg::CSReqGuildModify&
CSReqBody::_Internal::guildmodify(const CSReqBody* msg) {
  return *msg->_impl_.guildmodify_;
}
const ::msg::CSReqGuildKickoff&
CSReqBody::_Internal::guildkickoff(const CSReqBody* msg) {
  return *msg->_impl_.guildkickoff_;
}
const ::msg::CSReqGuildDismiss&
CSReqBody::_Internal::guilddismiss(const CSReqBody* msg) {
  return *msg->_impl_.guilddismiss_;
}
const ::msg::CSReqGuildExit&
CSReqBody::_Internal::guildexit(const CSReqBody* msg) {
  return *msg->_impl_.guildexit_;
}
const ::msg::CSReqGuildChat&
CSReqBody::_Internal::guildchat(const CSReqBody* msg) {
  return *msg->_impl_.guildchat_;
}
const ::msg::CSReqGuildList&
CSReqBody::_Internal::guildlist(const CSReqBody* msg) {
  return *msg->_impl_.guildlist_;
}
const ::msg::CSReqGuildRecommendPlayers&
CSReqBody::_Internal::guildrecommendplayers(const CSReqBody* msg) {
  return *msg->_impl_.guildrecommendplayers_;
}
const ::msg::CSReqGuildInviteList&
CSReqBody::_Internal::guildinvitelist(const CSReqBody* msg) {
  return *msg->_impl_.guildinvitelist_;
}
const ::msg::CSReqGuildInvite&
CSReqBody::_Internal::guildinvite(const CSReqBody* msg) {
  return *msg->_impl_.guildinvite_;
}
const ::msg::CSReqGuildResign&
CSReqBody::_Internal::guildresign(const CSReqBody* msg) {
  return *msg->_impl_.guildresign_;
}
const ::msg::CSReqGuildRejectInvite&
CSReqBody::_Internal::guildrejectinvite(const CSReqBody* msg) {
  return *msg->_impl_.guildrejectinvite_;
}
const ::msg::CSReqGetVngCommentAward&
CSReqBody::_Internal::getvngcommentaward(const CSReqBody* msg) {
  return *msg->_impl_.getvngcommentaward_;
}
const ::msg::CSReqLevelupChest&
CSReqBody::_Internal::levelupchest(const CSReqBody* msg) {
  return *msg->_impl_.levelupchest_;
}
const ::msg::CSReqWatchAd&
CSReqBody::_Internal::watchad(const CSReqBody* msg) {
  return *msg->_impl_.watchad_;
}
const ::msg::CSReqQueryPsTournamentRoom&
CSReqBody::_Internal::pstournamentroom(const CSReqBody* msg) {
  return *msg->_impl_.pstournamentroom_;
}
const ::msg::CSReqGetAdCumulateAward&
CSReqBody::_Internal::getadcumulateaward(const CSReqBody* msg) {
  return *msg->_impl_.getadcumulateaward_;
}
const ::msg::CSReqSetMessengerPos&
CSReqBody::_Internal::setmessengerpos(const CSReqBody* msg) {
  return *msg->_impl_.setmessengerpos_;
}
const ::msg::CSReqUpdateAntiAddictionTime&
CSReqBody::_Internal::updateantiaddictiontime(const CSReqBody* msg) {
  return *msg->_impl_.updateantiaddictiontime_;
}
const ::msg::CSReqCancelReconnect&
CSReqBody::_Internal::cancelreconnect(const CSReqBody* msg) {
  return *msg->_impl_.cancelreconnect_;
}
const ::msg::CSReqReconnect&
CSReqBody::_Internal::reconnect(const CSReqBody* msg) {
  return *msg->_impl_.reconnect_;
}
const ::msg::CSReqPassThrough&
CSReqBody::_Internal::passthrough(const CSReqBody* msg) {
  return *msg->_impl_.passthrough_;
}
const ::msg::CSReqVisitPlayer&
CSReqBody::_Internal::visitplayer(const CSReqBody* msg) {
  return *msg->_impl_.visitplayer_;
}
const ::msg::CSReqLeaveGameEarly&
CSReqBody::_Internal::leavegameearly(const CSReqBody* msg) {
  return *msg->_impl_.leavegameearly_;
}
const ::msg::CSReqGDCommonBin&
CSReqBody::_Internal::gdcommonbin(const CSReqBody* msg) {
  return *msg->_impl_.gdcommonbin_;
}
const ::msg::CSReqGDCommonBinData&
CSReqBody::_Internal::gdbindata(const CSReqBody* msg) {
  return *msg->_impl_.gdbindata_;
}
const ::msg::CSReqAutoBattleOP&
CSReqBody::_Internal::autobattleop(const CSReqBody* msg) {
  return *msg->_impl_.autobattleop_;
}
const ::msg::CSReqRestrictUser&
CSReqBody::_Internal::restrictuser(const CSReqBody* msg) {
  return *msg->_impl_.restrictuser_;
}
const ::msg::CSReqEquipSelectRate&
CSReqBody::_Internal::equipselectrate(const CSReqBody* msg) {
  return *msg->_impl_.equipselectrate_;
}
const ::msg::CSReqReportAbsent&
CSReqBody::_Internal::reportabsent(const CSReqBody* msg) {
  return *msg->_impl_.reportabsent_;
}
const ::msg::CSReqRecommendWeek&
CSReqBody::_Internal::recommendweek(const CSReqBody* msg) {
  return *msg->_impl_.recommendweek_;
}
const ::msg::CSReqRecommendOfficial&
CSReqBody::_Internal::recommendofficial(const CSReqBody* msg) {
  return *msg->_impl_.recommendofficial_;
}
const ::msg::CSReqRecommendLatest&
CSReqBody::_Internal::recommendlatest(const CSReqBody* msg) {
  return *msg->_impl_.recommendlatest_;
}
const ::msg::CSReqRecommendHistory&
CSReqBody::_Internal::recommendhistory(const CSReqBody* msg) {
  return *msg->_impl_.recommendhistory_;
}
const ::msg::CSReqRecommendCollect&
CSReqBody::_Internal::recommendcollect(const CSReqBody* msg) {
  return *msg->_impl_.recommendcollect_;
}
const ::msg::CSReqRecommendSet&
CSReqBody::_Internal::recommendset(const CSReqBody* msg) {
  return *msg->_impl_.recommendset_;
}
const ::msg::CSReqRecommendGetCollection&
CSReqBody::_Internal::recommendgetcollection(const CSReqBody* msg) {
  return *msg->_impl_.recommendgetcollection_;
}
const ::msg::CSReqRecommendEquip&
CSReqBody::_Internal::recommendequip(const CSReqBody* msg) {
  return *msg->_impl_.recommendequip_;
}
const ::msg::CSReqLoginCancel&
CSReqBody::_Internal::logincancel(const CSReqBody* msg) {
  return *msg->_impl_.logincancel_;
}
const ::msg::CSReqConvertDebris&
CSReqBody::_Internal::convertdebris(const CSReqBody* msg) {
  return *msg->_impl_.convertdebris_;
}
const ::msg::CSReqUseProtectionCard&
CSReqBody::_Internal::protectioncard(const CSReqBody* msg) {
  return *msg->_impl_.protectioncard_;
}
const ::msg::CSReqUsePassportCard&
CSReqBody::_Internal::usepassportcard(const CSReqBody* msg) {
  return *msg->_impl_.usepassportcard_;
}
const ::msg::CSReqSetMedal&
CSReqBody::_Internal::setmedal(const CSReqBody* msg) {
  return *msg->_impl_.setmedal_;
}
const ::msg::CSReqUnSetMedal&
CSReqBody::_Internal::unsetmedal(const CSReqBody* msg) {
  return *msg->_impl_.unsetmedal_;
}
const ::msg::CSReqPlayerMedals&
CSReqBody::_Internal::playermedals(const CSReqBody* msg) {
  return *msg->_impl_.playermedals_;
}
const ::msg::CSReqUpdateHotDot&
CSReqBody::_Internal::updatehotdot(const CSReqBody* msg) {
  return *msg->_impl_.updatehotdot_;
}
const ::msg::CSReqQueryHotDot&
CSReqBody::_Internal::queryhotdot(const CSReqBody* msg) {
  return *msg->_impl_.queryhotdot_;
}
const ::msg::CSReqSetCache&
CSReqBody::_Internal::setcache(const CSReqBody* msg) {
  return *msg->_impl_.setcache_;
}
const ::msg::CSReqGetCache&
CSReqBody::_Internal::getcache(const CSReqBody* msg) {
  return *msg->_impl_.getcache_;
}
const ::msg::CSReqBuyChallengeCount&
CSReqBody::_Internal::buychallengecount(const CSReqBody* msg) {
  return *msg->_impl_.buychallengecount_;
}
const ::msg::CSReqGetPveRank&
CSReqBody::_Internal::getpverank(const CSReqBody* msg) {
  return *msg->_impl_.getpverank_;
}
const ::msg::CSReqLogin&
CSReqBody::_Internal::authaccount(const CSReqBody* msg) {
  return *msg->_impl_.authaccount_;
}
const ::msg::CSReqUnbindAccount&
CSReqBody::_Internal::unbindaccount(const CSReqBody* msg) {
  return *msg->_impl_.unbindaccount_;
}
const ::msg::CSReqBagToItem&
CSReqBody::_Internal::bagtoitem(const CSReqBody* msg) {
  return *msg->_impl_.bagtoitem_;
}
const ::msg::CSReqIdentifyItem&
CSReqBody::_Internal::identifyitem(const CSReqBody* msg) {
  return *msg->_impl_.identifyitem_;
}
const ::msg::CSReqInsetItemAffix&
CSReqBody::_Internal::insetitemaffix(const CSReqBody* msg) {
  return *msg->_impl_.insetitemaffix_;
}
const ::msg::CSReqUnsetItemAffix&
CSReqBody::_Internal::unsetitemaffix(const CSReqBody* msg) {
  return *msg->_impl_.unsetitemaffix_;
}
const ::msg::CSReqSetDefaultAttributes&
CSReqBody::_Internal::setdefaultattributes(const CSReqBody* msg) {
  return *msg->_impl_.setdefaultattributes_;
}
const ::msg::CSReqCheckCancel&
CSReqBody::_Internal::checkcancel(const CSReqBody* msg) {
  return *msg->_impl_.checkcancel_;
}
const ::msg::CSReqCancelAccount&
CSReqBody::_Internal::cancelaccount(const CSReqBody* msg) {
  return *msg->_impl_.cancelaccount_;
}
const ::msg::CSReqOAuthApp&
CSReqBody::_Internal::oauthapp(const CSReqBody* msg) {
  return *msg->_impl_.oauthapp_;
}
const ::msg::CSReqGetSelfNumRankData&
CSReqBody::_Internal::getselfnumrankdata(const CSReqBody* msg) {
  return *msg->_impl_.getselfnumrankdata_;
}
const ::msg::CSReqUpdateCardGroup&
CSReqBody::_Internal::updatecardgroup(const CSReqBody* msg) {
  return *msg->_impl_.updatecardgroup_;
}
const ::msg::CSReqUpdateCardGroupName&
CSReqBody::_Internal::updatecardgroupname(const CSReqBody* msg) {
  return *msg->_impl_.updatecardgroupname_;
}
const ::msg::CSReqBuyPveBuff&
CSReqBody::_Internal::buypvebuff(const CSReqBody* msg) {
  return *msg->_impl_.buypvebuff_;
}
const ::msg::CSReqSetCardGroup&
CSReqBody::_Internal::setcardgroup(const CSReqBody* msg) {
  return *msg->_impl_.setcardgroup_;
}
const ::msg::CSReqBuyPveChessTemplate&
CSReqBody::_Internal::buypvechesstemplate(const CSReqBody* msg) {
  return *msg->_impl_.buypvechesstemplate_;
}
const ::msg::CSReqPveUnlockChessTemplate&
CSReqBody::_Internal::pveunlockchesstemplate(const CSReqBody* msg) {
  return *msg->_impl_.pveunlockchesstemplate_;
}
const ::msg::CSReqPveSetTeamDeBuff&
CSReqBody::_Internal::pvesetteamdebuff(const CSReqBody* msg) {
  return *msg->_impl_.pvesetteamdebuff_;
}
const ::msg::CSReqChoseCardGroup&
CSReqBody::_Internal::chosecardgroup(const CSReqBody* msg) {
  return *msg->_impl_.chosecardgroup_;
}
const ::msg::CSReqRemoveOvertimeBuff&
CSReqBody::_Internal::removeovertimebuff(const CSReqBody* msg) {
  return *msg->_impl_.removeovertimebuff_;
}
const ::msg::CSRspUpdateNewCardGroupSign&
CSReqBody::_Internal::updatenewcardgroupsign(const CSReqBody* msg) {
  return *msg->_impl_.updatenewcardgroupsign_;
}
const ::msg::CSReqTDGetOnHookAward&
CSReqBody::_Internal::tdgetonhookaward(const CSReqBody* msg) {
  return *msg->_impl_.tdgetonhookaward_;
}
const ::msg::CsReqTDDraw&
CSReqBody::_Internal::tddraw(const CSReqBody* msg) {
  return *msg->_impl_.tddraw_;
}
const ::msg::CsReqTDBuyCard&
CSReqBody::_Internal::tdbuycard(const CSReqBody* msg) {
  return *msg->_impl_.tdbuycard_;
}
const ::msg::CSReqTDSetCardGroup&
CSReqBody::_Internal::tdsetcardgroup(const CSReqBody* msg) {
  return *msg->_impl_.tdsetcardgroup_;
}
const ::msg::CSReqTDLevelUp&
CSReqBody::_Internal::tdlevelup(const CSReqBody* msg) {
  return *msg->_impl_.tdlevelup_;
}
const ::msg::CSReqTDEquip&
CSReqBody::_Internal::tdequip(const CSReqBody* msg) {
  return *msg->_impl_.tdequip_;
}
const ::msg::CSReqMentorUpdateSetting&
CSReqBody::_Internal::mentorupdatesetting(const CSReqBody* msg) {
  return *msg->_impl_.mentorupdatesetting_;
}
const ::msg::CSReqMentorInvite&
CSReqBody::_Internal::mentorinvite(const CSReqBody* msg) {
  return *msg->_impl_.mentorinvite_;
}
const ::msg::CSReqMentorConfirmInvite&
CSReqBody::_Internal::mentorconfirminvite(const CSReqBody* msg) {
  return *msg->_impl_.mentorconfirminvite_;
}
const ::msg::CSReqMentorRecommendList&
CSReqBody::_Internal::mentorrecommendlist(const CSReqBody* msg) {
  return *msg->_impl_.mentorrecommendlist_;
}
const ::msg::CSReqMentorGetTaskAward&
CSReqBody::_Internal::mentorgettaskaward(const CSReqBody* msg) {
  return *msg->_impl_.mentorgettaskaward_;
}
const ::msg::CSReqMentorGraduate&
CSReqBody::_Internal::mentorgraduate(const CSReqBody* msg) {
  return *msg->_impl_.mentorgraduate_;
}
const ::msg::CSReqMentorRelieveRelation&
CSReqBody::_Internal::mentorrelieverelation(const CSReqBody* msg) {
  return *msg->_impl_.mentorrelieverelation_;
}
const ::msg::CSReqGetMentorInfo&
CSReqBody::_Internal::getmentorinfo(const CSReqBody* msg) {
  return *msg->_impl_.getmentorinfo_;
}
const ::msg::CSReqMentorGetInviteMsg&
CSReqBody::_Internal::mentorgetinvitemsg(const CSReqBody* msg) {
  return *msg->_impl_.mentorgetinvitemsg_;
}
const ::msg::CSReqUpdateCardGroupBetter&
CSReqBody::_Internal::updatecardgroupbetter(const CSReqBody* msg) {
  return *msg->_impl_.updatecardgroupbetter_;
}
const ::msg::CSReqUpdateCardGroupSetting&
CSReqBody::_Internal::updatecardgroupsetting(const CSReqBody* msg) {
  return *msg->_impl_.updatecardgroupsetting_;
}
const ::msg::CSReqSetContent&
CSReqBody::_Internal::setcontent(const CSReqBody* msg) {
  return *msg->_impl_.setcontent_;
}
const ::msg::CSReqGetBalance&
CSReqBody::_Internal::getbalance(const CSReqBody* msg) {
  return *msg->_impl_.getbalance_;
}
const ::msg::CSReqRechargeBalance&
CSReqBody::_Internal::rechargebalance(const CSReqBody* msg) {
  return *msg->_impl_.rechargebalance_;
}
const ::msg::CSReqWithdrawBalance&
CSReqBody::_Internal::withdrawbalance(const CSReqBody* msg) {
  return *msg->_impl_.withdrawbalance_;
}
const ::msg::CSReqPersonalRecommendMall&
CSReqBody::_Internal::personalrecommendmall(const CSReqBody* msg) {
  return *msg->_impl_.personalrecommendmall_;
}
const ::msg::CSReqGetMedalChestAward&
CSReqBody::_Internal::getmedalchestaward(const CSReqBody* msg) {
  return *msg->_impl_.getmedalchestaward_;
}
const ::msg::CSReqSetItemAutoUse&
CSReqBody::_Internal::setitemautouse(const CSReqBody* msg) {
  return *msg->_impl_.setitemautouse_;
}
void CSReqBody::clear_heart() {
  if (GetArenaForAllocation() == nullptr && _impl_.heart_ != nullptr) {
    delete _impl_.heart_;
  }
  _impl_.heart_ = nullptr;
}
void CSReqBody::clear_login() {
  if (GetArenaForAllocation() == nullptr && _impl_.login_ != nullptr) {
    delete _impl_.login_;
  }
  _impl_.login_ = nullptr;
}
void CSReqBody::clear_versioncheck() {
  if (GetArenaForAllocation() == nullptr && _impl_.versioncheck_ != nullptr) {
    delete _impl_.versioncheck_;
  }
  _impl_.versioncheck_ = nullptr;
}
void CSReqBody::clear_resourceversioncheck() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourceversioncheck_ != nullptr) {
    delete _impl_.resourceversioncheck_;
  }
  _impl_.resourceversioncheck_ = nullptr;
}
void CSReqBody::clear_applyhallserver() {
  if (GetArenaForAllocation() == nullptr && _impl_.applyhallserver_ != nullptr) {
    delete _impl_.applyhallserver_;
  }
  _impl_.applyhallserver_ = nullptr;
}
void CSReqBody::clear_getnumrank() {
  if (GetArenaForAllocation() == nullptr && _impl_.getnumrank_ != nullptr) {
    delete _impl_.getnumrank_;
  }
  _impl_.getnumrank_ = nullptr;
}
void CSReqBody::clear_worldchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.worldchat_ != nullptr) {
    delete _impl_.worldchat_;
  }
  _impl_.worldchat_ = nullptr;
}
void CSReqBody::clear_playersbaseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playersbaseinfo_ != nullptr) {
    delete _impl_.playersbaseinfo_;
  }
  _impl_.playersbaseinfo_ = nullptr;
}
void CSReqBody::clear_playerdetailinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerdetailinfo_ != nullptr) {
    delete _impl_.playerdetailinfo_;
  }
  _impl_.playerdetailinfo_ = nullptr;
}
void CSReqBody::clear_readmail() {
  if (GetArenaForAllocation() == nullptr && _impl_.readmail_ != nullptr) {
    delete _impl_.readmail_;
  }
  _impl_.readmail_ = nullptr;
}
void CSReqBody::clear_getmailaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmailaward_ != nullptr) {
    delete _impl_.getmailaward_;
  }
  _impl_.getmailaward_ = nullptr;
}
void CSReqBody::clear_buyegg() {
  if (GetArenaForAllocation() == nullptr && _impl_.buyegg_ != nullptr) {
    delete _impl_.buyegg_;
  }
  _impl_.buyegg_ = nullptr;
}
void CSReqBody::clear_usernameset() {
  if (GetArenaForAllocation() == nullptr && _impl_.usernameset_ != nullptr) {
    delete _impl_.usernameset_;
  }
  _impl_.usernameset_ = nullptr;
}
void CSReqBody::clear_usernamerandom() {
  if (GetArenaForAllocation() == nullptr && _impl_.usernamerandom_ != nullptr) {
    delete _impl_.usernamerandom_;
  }
  _impl_.usernamerandom_ = nullptr;
}
void CSReqBody::clear_headpicset() {
  if (GetArenaForAllocation() == nullptr && _impl_.headpicset_ != nullptr) {
    delete _impl_.headpicset_;
  }
  _impl_.headpicset_ = nullptr;
}
void CSReqBody::clear_pvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvp_ != nullptr) {
    delete _impl_.pvp_;
  }
  _impl_.pvp_ = nullptr;
}
void CSReqBody::clear_dresschessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.dresschessplayer_ != nullptr) {
    delete _impl_.dresschessplayer_;
  }
  _impl_.dresschessplayer_ = nullptr;
}
void CSReqBody::clear_dressscene() {
  if (GetArenaForAllocation() == nullptr && _impl_.dressscene_ != nullptr) {
    delete _impl_.dressscene_;
  }
  _impl_.dressscene_ = nullptr;
}
void CSReqBody::clear_pvplogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvplogin_ != nullptr) {
    delete _impl_.pvplogin_;
  }
  _impl_.pvplogin_ = nullptr;
}
void CSReqBody::clear_pvpend() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpend_ != nullptr) {
    delete _impl_.pvpend_;
  }
  _impl_.pvpend_ = nullptr;
}
void CSReqBody::clear_playerfinish() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerfinish_ != nullptr) {
    delete _impl_.playerfinish_;
  }
  _impl_.playerfinish_ = nullptr;
}
void CSReqBody::clear_playerquit() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerquit_ != nullptr) {
    delete _impl_.playerquit_;
  }
  _impl_.playerquit_ = nullptr;
}
void CSReqBody::clear_sellitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.sellitem_ != nullptr) {
    delete _impl_.sellitem_;
  }
  _impl_.sellitem_ = nullptr;
}
void CSReqBody::clear_getevalaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getevalaward_ != nullptr) {
    delete _impl_.getevalaward_;
  }
  _impl_.getevalaward_ = nullptr;
}
void CSReqBody::clear_usechessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.usechessplayer_ != nullptr) {
    delete _impl_.usechessplayer_;
  }
  _impl_.usechessplayer_ = nullptr;
}
void CSReqBody::clear_guidreport() {
  if (GetArenaForAllocation() == nullptr && _impl_.guidreport_ != nullptr) {
    delete _impl_.guidreport_;
  }
  _impl_.guidreport_ = nullptr;
}
void CSReqBody::clear_getcodeaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getcodeaward_ != nullptr) {
    delete _impl_.getcodeaward_;
  }
  _impl_.getcodeaward_ = nullptr;
}
void CSReqBody::clear_roundreport() {
  if (GetArenaForAllocation() == nullptr && _impl_.roundreport_ != nullptr) {
    delete _impl_.roundreport_;
  }
  _impl_.roundreport_ = nullptr;
}
void CSReqBody::clear_loadingprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.loadingprogress_ != nullptr) {
    delete _impl_.loadingprogress_;
  }
  _impl_.loadingprogress_ = nullptr;
}
void CSReqBody::clear_pvpchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpchat_ != nullptr) {
    delete _impl_.pvpchat_;
  }
  _impl_.pvpchat_ = nullptr;
}
void CSReqBody::clear_chesscombine() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesscombine_ != nullptr) {
    delete _impl_.chesscombine_;
  }
  _impl_.chesscombine_ = nullptr;
}
void CSReqBody::clear_expose() {
  if (GetArenaForAllocation() == nullptr && _impl_.expose_ != nullptr) {
    delete _impl_.expose_;
  }
  _impl_.expose_ = nullptr;
}
void CSReqBody::clear_applyorderid() {
  if (GetArenaForAllocation() == nullptr && _impl_.applyorderid_ != nullptr) {
    delete _impl_.applyorderid_;
  }
  _impl_.applyorderid_ = nullptr;
}
void CSReqBody::clear_reportorderinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportorderinfo_ != nullptr) {
    delete _impl_.reportorderinfo_;
  }
  _impl_.reportorderinfo_ = nullptr;
}
void CSReqBody::clear_setitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.setitem_ != nullptr) {
    delete _impl_.setitem_;
  }
  _impl_.setitem_ = nullptr;
}
void CSReqBody::clear_unsetitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitem_ != nullptr) {
    delete _impl_.unsetitem_;
  }
  _impl_.unsetitem_ = nullptr;
}
void CSReqBody::clear_randomitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.randomitem_ != nullptr) {
    delete _impl_.randomitem_;
  }
  _impl_.randomitem_ = nullptr;
}
void CSReqBody::clear_chat() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
}
void CSReqBody::clear_setchessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.setchessplayer_ != nullptr) {
    delete _impl_.setchessplayer_;
  }
  _impl_.setchessplayer_ = nullptr;
}
void CSReqBody::clear_unsetchessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessplayer_ != nullptr) {
    delete _impl_.unsetchessplayer_;
  }
  _impl_.unsetchessplayer_ = nullptr;
}
void CSReqBody::clear_getfanslist() {
  if (GetArenaForAllocation() == nullptr && _impl_.getfanslist_ != nullptr) {
    delete _impl_.getfanslist_;
  }
  _impl_.getfanslist_ = nullptr;
}
void CSReqBody::clear_followplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.followplayer_ != nullptr) {
    delete _impl_.followplayer_;
  }
  _impl_.followplayer_ = nullptr;
}
void CSReqBody::clear_unfollowplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.unfollowplayer_ != nullptr) {
    delete _impl_.unfollowplayer_;
  }
  _impl_.unfollowplayer_ = nullptr;
}
void CSReqBody::clear_playersstatusinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playersstatusinfo_ != nullptr) {
    delete _impl_.playersstatusinfo_;
  }
  _impl_.playersstatusinfo_ = nullptr;
}
void CSReqBody::clear_invitejointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.invitejointeam_ != nullptr) {
    delete _impl_.invitejointeam_;
  }
  _impl_.invitejointeam_ = nullptr;
}
void CSReqBody::clear_jointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.jointeam_ != nullptr) {
    delete _impl_.jointeam_;
  }
  _impl_.jointeam_ = nullptr;
}
void CSReqBody::clear_kickoffteamplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.kickoffteamplayer_ != nullptr) {
    delete _impl_.kickoffteamplayer_;
  }
  _impl_.kickoffteamplayer_ = nullptr;
}
void CSReqBody::clear_teammsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.teammsg_ != nullptr) {
    delete _impl_.teammsg_;
  }
  _impl_.teammsg_ = nullptr;
}
void CSReqBody::clear_teamready() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamready_ != nullptr) {
    delete _impl_.teamready_;
  }
  _impl_.teamready_ = nullptr;
}
void CSReqBody::clear_reportpayresponse() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportpayresponse_ != nullptr) {
    delete _impl_.reportpayresponse_;
  }
  _impl_.reportpayresponse_ = nullptr;
}
void CSReqBody::clear_rejectjointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.rejectjointeam_ != nullptr) {
    delete _impl_.rejectjointeam_;
  }
  _impl_.rejectjointeam_ = nullptr;
}
void CSReqBody::clear_shieldchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.shieldchat_ != nullptr) {
    delete _impl_.shieldchat_;
  }
  _impl_.shieldchat_ = nullptr;
}
void CSReqBody::clear_buypassportlevel() {
  if (GetArenaForAllocation() == nullptr && _impl_.buypassportlevel_ != nullptr) {
    delete _impl_.buypassportlevel_;
  }
  _impl_.buypassportlevel_ = nullptr;
}
void CSReqBody::clear_upgradepassport() {
  if (GetArenaForAllocation() == nullptr && _impl_.upgradepassport_ != nullptr) {
    delete _impl_.upgradepassport_;
  }
  _impl_.upgradepassport_ = nullptr;
}
void CSReqBody::clear_getpassportlevelaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpassportlevelaward_ != nullptr) {
    delete _impl_.getpassportlevelaward_;
  }
  _impl_.getpassportlevelaward_ = nullptr;
}
void CSReqBody::clear_getpassporttaskaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpassporttaskaward_ != nullptr) {
    delete _impl_.getpassporttaskaward_;
  }
  _impl_.getpassporttaskaward_ = nullptr;
}
void CSReqBody::clear_telbook() {
  if (GetArenaForAllocation() == nullptr && _impl_.telbook_ != nullptr) {
    delete _impl_.telbook_;
  }
  _impl_.telbook_ = nullptr;
}
void CSReqBody::clear_activatepassport() {
  if (GetArenaForAllocation() == nullptr && _impl_.activatepassport_ != nullptr) {
    delete _impl_.activatepassport_;
  }
  _impl_.activatepassport_ = nullptr;
}
void CSReqBody::clear_rankseasoneval() {
  if (GetArenaForAllocation() == nullptr && _impl_.rankseasoneval_ != nullptr) {
    delete _impl_.rankseasoneval_;
  }
  _impl_.rankseasoneval_ = nullptr;
}
void CSReqBody::clear_bindaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindaccount_ != nullptr) {
    delete _impl_.bindaccount_;
  }
  _impl_.bindaccount_ = nullptr;
}
void CSReqBody::clear_incadsshowcount() {
  if (GetArenaForAllocation() == nullptr && _impl_.incadsshowcount_ != nullptr) {
    delete _impl_.incadsshowcount_;
  }
  _impl_.incadsshowcount_ = nullptr;
}
void CSReqBody::clear_usebonuscard() {
  if (GetArenaForAllocation() == nullptr && _impl_.usebonuscard_ != nullptr) {
    delete _impl_.usebonuscard_;
  }
  _impl_.usebonuscard_ = nullptr;
}
void CSReqBody::clear_getseasonaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getseasonaward_ != nullptr) {
    delete _impl_.getseasonaward_;
  }
  _impl_.getseasonaward_ = nullptr;
}
void CSReqBody::clear_getalphaactivityaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getalphaactivityaward_ != nullptr) {
    delete _impl_.getalphaactivityaward_;
  }
  _impl_.getalphaactivityaward_ = nullptr;
}
void CSReqBody::clear_getlanguagedata() {
  if (GetArenaForAllocation() == nullptr && _impl_.getlanguagedata_ != nullptr) {
    delete _impl_.getlanguagedata_;
  }
  _impl_.getlanguagedata_ = nullptr;
}
void CSReqBody::clear_getactivityaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getactivityaward_ != nullptr) {
    delete _impl_.getactivityaward_;
  }
  _impl_.getactivityaward_ = nullptr;
}
void CSReqBody::clear_getactivitydata() {
  if (GetArenaForAllocation() == nullptr && _impl_.getactivitydata_ != nullptr) {
    delete _impl_.getactivitydata_;
  }
  _impl_.getactivitydata_ = nullptr;
}
void CSReqBody::clear_sendsms() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendsms_ != nullptr) {
    delete _impl_.sendsms_;
  }
  _impl_.sendsms_ = nullptr;
}
void CSReqBody::clear_getmeleeaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmeleeaward_ != nullptr) {
    delete _impl_.getmeleeaward_;
  }
  _impl_.getmeleeaward_ = nullptr;
}
void CSReqBody::clear_addaitoteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.addaitoteam_ != nullptr) {
    delete _impl_.addaitoteam_;
  }
  _impl_.addaitoteam_ = nullptr;
}
void CSReqBody::clear_share() {
  if (GetArenaForAllocation() == nullptr && _impl_.share_ != nullptr) {
    delete _impl_.share_;
  }
  _impl_.share_ = nullptr;
}
void CSReqBody::clear_skipinterface() {
  if (GetArenaForAllocation() == nullptr && _impl_.skipinterface_ != nullptr) {
    delete _impl_.skipinterface_;
  }
  _impl_.skipinterface_ = nullptr;
}
void CSReqBody::clear_teamgame() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamgame_ != nullptr) {
    delete _impl_.teamgame_;
  }
  _impl_.teamgame_ = nullptr;
}
void CSReqBody::clear_setteammode() {
  if (GetArenaForAllocation() == nullptr && _impl_.setteammode_ != nullptr) {
    delete _impl_.setteammode_;
  }
  _impl_.setteammode_ = nullptr;
}
void CSReqBody::clear_historypvpshowpermission() {
  if (GetArenaForAllocation() == nullptr && _impl_.historypvpshowpermission_ != nullptr) {
    delete _impl_.historypvpshowpermission_;
  }
  _impl_.historypvpshowpermission_ = nullptr;
}
void CSReqBody::clear_searchteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.searchteam_ != nullptr) {
    delete _impl_.searchteam_;
  }
  _impl_.searchteam_ = nullptr;
}
void CSReqBody::clear_applychat() {
  if (GetArenaForAllocation() == nullptr && _impl_.applychat_ != nullptr) {
    delete _impl_.applychat_;
  }
  _impl_.applychat_ = nullptr;
}
void CSReqBody::clear_chatlogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.chatlogin_ != nullptr) {
    delete _impl_.chatlogin_;
  }
  _impl_.chatlogin_ = nullptr;
}
void CSReqBody::clear_probenetdelay() {
  if (GetArenaForAllocation() == nullptr && _impl_.probenetdelay_ != nullptr) {
    delete _impl_.probenetdelay_;
  }
  _impl_.probenetdelay_ = nullptr;
}
void CSReqBody::clear_geteggs() {
  if (GetArenaForAllocation() == nullptr && _impl_.geteggs_ != nullptr) {
    delete _impl_.geteggs_;
  }
  _impl_.geteggs_ = nullptr;
}
void CSReqBody::clear_buygoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.buygoods_ != nullptr) {
    delete _impl_.buygoods_;
  }
  _impl_.buygoods_ = nullptr;
}
void CSReqBody::clear_exchangepassportgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchangepassportgoods_ != nullptr) {
    delete _impl_.exchangepassportgoods_;
  }
  _impl_.exchangepassportgoods_ = nullptr;
}
void CSReqBody::clear_usepassporttaskcard() {
  if (GetArenaForAllocation() == nullptr && _impl_.usepassporttaskcard_ != nullptr) {
    delete _impl_.usepassporttaskcard_;
  }
  _impl_.usepassporttaskcard_ = nullptr;
}
void CSReqBody::clear_openrandchest() {
  if (GetArenaForAllocation() == nullptr && _impl_.openrandchest_ != nullptr) {
    delete _impl_.openrandchest_;
  }
  _impl_.openrandchest_ = nullptr;
}
void CSReqBody::clear_egglottery() {
  if (GetArenaForAllocation() == nullptr && _impl_.egglottery_ != nullptr) {
    delete _impl_.egglottery_;
  }
  _impl_.egglottery_ = nullptr;
}
void CSReqBody::clear_querydiamondbalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.querydiamondbalance_ != nullptr) {
    delete _impl_.querydiamondbalance_;
  }
  _impl_.querydiamondbalance_ = nullptr;
}
void CSReqBody::clear_useitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.useitem_ != nullptr) {
    delete _impl_.useitem_;
  }
  _impl_.useitem_ = nullptr;
}
void CSReqBody::clear_useexperiencecard() {
  if (GetArenaForAllocation() == nullptr && _impl_.useexperiencecard_ != nullptr) {
    delete _impl_.useexperiencecard_;
  }
  _impl_.useexperiencecard_ = nullptr;
}
void CSReqBody::clear_randtargetitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.randtargetitem_ != nullptr) {
    delete _impl_.randtargetitem_;
  }
  _impl_.randtargetitem_ = nullptr;
}
void CSReqBody::clear_addblacklist() {
  if (GetArenaForAllocation() == nullptr && _impl_.addblacklist_ != nullptr) {
    delete _impl_.addblacklist_;
  }
  _impl_.addblacklist_ = nullptr;
}
void CSReqBody::clear_removeblacklist() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeblacklist_ != nullptr) {
    delete _impl_.removeblacklist_;
  }
  _impl_.removeblacklist_ = nullptr;
}
void CSReqBody::clear_reportplayerbirth() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportplayerbirth_ != nullptr) {
    delete _impl_.reportplayerbirth_;
  }
  _impl_.reportplayerbirth_ = nullptr;
}
void CSReqBody::clear_reportinfoinput() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportinfoinput_ != nullptr) {
    delete _impl_.reportinfoinput_;
  }
  _impl_.reportinfoinput_ = nullptr;
}
void CSReqBody::clear_sendverificationcode() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcode_ != nullptr) {
    delete _impl_.sendverificationcode_;
  }
  _impl_.sendverificationcode_ = nullptr;
}
void CSReqBody::clear_bindphonenumber() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindphonenumber_ != nullptr) {
    delete _impl_.bindphonenumber_;
  }
  _impl_.bindphonenumber_ = nullptr;
}
void CSReqBody::clear_worldinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.worldinvite_ != nullptr) {
    delete _impl_.worldinvite_;
  }
  _impl_.worldinvite_ = nullptr;
}
void CSReqBody::clear_removeexpireitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeexpireitem_ != nullptr) {
    delete _impl_.removeexpireitem_;
  }
  _impl_.removeexpireitem_ = nullptr;
}
void CSReqBody::clear_getmallgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmallgoods_ != nullptr) {
    delete _impl_.getmallgoods_;
  }
  _impl_.getmallgoods_ = nullptr;
}
void CSReqBody::clear_buymallgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.buymallgoods_ != nullptr) {
    delete _impl_.buymallgoods_;
  }
  _impl_.buymallgoods_ = nullptr;
}
void CSReqBody::clear_bindsharingcode() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindsharingcode_ != nullptr) {
    delete _impl_.bindsharingcode_;
  }
  _impl_.bindsharingcode_ = nullptr;
}
void CSReqBody::clear_wxblessbag() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxblessbag_ != nullptr) {
    delete _impl_.wxblessbag_;
  }
  _impl_.wxblessbag_ = nullptr;
}
void CSReqBody::clear_updatefriendsingame() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatefriendsingame_ != nullptr) {
    delete _impl_.updatefriendsingame_;
  }
  _impl_.updatefriendsingame_ = nullptr;
}
void CSReqBody::clear_sharereward() {
  if (GetArenaForAllocation() == nullptr && _impl_.sharereward_ != nullptr) {
    delete _impl_.sharereward_;
  }
  _impl_.sharereward_ = nullptr;
}
void CSReqBody::clear_allfightinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.allfightinfo_ != nullptr) {
    delete _impl_.allfightinfo_;
  }
  _impl_.allfightinfo_ = nullptr;
}
void CSReqBody::clear_getoldplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.getoldplayer_ != nullptr) {
    delete _impl_.getoldplayer_;
  }
  _impl_.getoldplayer_ = nullptr;
}
void CSReqBody::clear_bindoldplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldplayer_ != nullptr) {
    delete _impl_.bindoldplayer_;
  }
  _impl_.bindoldplayer_ = nullptr;
}
void CSReqBody::clear_sendverificationcodewithcheckredis() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcodewithcheckredis_ != nullptr) {
    delete _impl_.sendverificationcodewithcheckredis_;
  }
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
}
void CSReqBody::clear_reportsetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportsetting_ != nullptr) {
    delete _impl_.reportsetting_;
  }
  _impl_.reportsetting_ = nullptr;
}
void CSReqBody::clear_antidata() {
  if (GetArenaForAllocation() == nullptr && _impl_.antidata_ != nullptr) {
    delete _impl_.antidata_;
  }
  _impl_.antidata_ = nullptr;
}
void CSReqBody::clear_tlogdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.tlogdata_ != nullptr) {
    delete _impl_.tlogdata_;
  }
  _impl_.tlogdata_ = nullptr;
}
void CSReqBody::clear_daysign() {
  if (GetArenaForAllocation() == nullptr && _impl_.daysign_ != nullptr) {
    delete _impl_.daysign_;
  }
  _impl_.daysign_ = nullptr;
}
void CSReqBody::clear_dayfitavoid() {
  if (GetArenaForAllocation() == nullptr && _impl_.dayfitavoid_ != nullptr) {
    delete _impl_.dayfitavoid_;
  }
  _impl_.dayfitavoid_ = nullptr;
}
void CSReqBody::clear_sharecountaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.sharecountaward_ != nullptr) {
    delete _impl_.sharecountaward_;
  }
  _impl_.sharecountaward_ = nullptr;
}
void CSReqBody::clear_actitemexch() {
  if (GetArenaForAllocation() == nullptr && _impl_.actitemexch_ != nullptr) {
    delete _impl_.actitemexch_;
  }
  _impl_.actitemexch_ = nullptr;
}
void CSReqBody::clear_realationstar() {
  if (GetArenaForAllocation() == nullptr && _impl_.realationstar_ != nullptr) {
    delete _impl_.realationstar_;
  }
  _impl_.realationstar_ = nullptr;
}
void CSReqBody::clear_getrealationstarinvitesucc() {
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstarinvitesucc_ != nullptr) {
    delete _impl_.getrealationstarinvitesucc_;
  }
  _impl_.getrealationstarinvitesucc_ = nullptr;
}
void CSReqBody::clear_getrealationstar() {
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstar_ != nullptr) {
    delete _impl_.getrealationstar_;
  }
  _impl_.getrealationstar_ = nullptr;
}
void CSReqBody::clear_reqactrecord() {
  if (GetArenaForAllocation() == nullptr && _impl_.reqactrecord_ != nullptr) {
    delete _impl_.reqactrecord_;
  }
  _impl_.reqactrecord_ = nullptr;
}
void CSReqBody::clear_joinvoiceteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoiceteam_ != nullptr) {
    delete _impl_.joinvoiceteam_;
  }
  _impl_.joinvoiceteam_ = nullptr;
}
void CSReqBody::clear_joinvoicepvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicepvp_ != nullptr) {
    delete _impl_.joinvoicepvp_;
  }
  _impl_.joinvoicepvp_ = nullptr;
}
void CSReqBody::clear_joinvoicecamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicecamp_ != nullptr) {
    delete _impl_.joinvoicecamp_;
  }
  _impl_.joinvoicecamp_ = nullptr;
}
void CSReqBody::clear_usercountryset() {
  if (GetArenaForAllocation() == nullptr && _impl_.usercountryset_ != nullptr) {
    delete _impl_.usercountryset_;
  }
  _impl_.usercountryset_ = nullptr;
}
void CSReqBody::clear_offlineinvitejointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.offlineinvitejointeam_ != nullptr) {
    delete _impl_.offlineinvitejointeam_;
  }
  _impl_.offlineinvitejointeam_ = nullptr;
}
void CSReqBody::clear_observe() {
  if (GetArenaForAllocation() == nullptr && _impl_.observe_ != nullptr) {
    delete _impl_.observe_;
  }
  _impl_.observe_ = nullptr;
}
void CSReqBody::clear_getrecommendpvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.getrecommendpvp_ != nullptr) {
    delete _impl_.getrecommendpvp_;
  }
  _impl_.getrecommendpvp_ = nullptr;
}
void CSReqBody::clear_observelogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.observelogin_ != nullptr) {
    delete _impl_.observelogin_;
  }
  _impl_.observelogin_ = nullptr;
}
void CSReqBody::clear_quitobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.quitobserve_ != nullptr) {
    delete _impl_.quitobserve_;
  }
  _impl_.quitobserve_ = nullptr;
}
void CSReqBody::clear_getobserveinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveinfo_ != nullptr) {
    delete _impl_.getobserveinfo_;
  }
  _impl_.getobserveinfo_ = nullptr;
}
void CSReqBody::clear_freeflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.freeflow_ != nullptr) {
    delete _impl_.freeflow_;
  }
  _impl_.freeflow_ = nullptr;
}
void CSReqBody::clear_setpushtoken() {
  if (GetArenaForAllocation() == nullptr && _impl_.setpushtoken_ != nullptr) {
    delete _impl_.setpushtoken_;
  }
  _impl_.setpushtoken_ = nullptr;
}
void CSReqBody::clear_tlogevent() {
  if (GetArenaForAllocation() == nullptr && _impl_.tlogevent_ != nullptr) {
    delete _impl_.tlogevent_;
  }
  _impl_.tlogevent_ = nullptr;
}
void CSReqBody::clear_wxvvipaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxvvipaward_ != nullptr) {
    delete _impl_.wxvvipaward_;
  }
  _impl_.wxvvipaward_ = nullptr;
}
void CSReqBody::clear_relationstarwx() {
  if (GetArenaForAllocation() == nullptr && _impl_.relationstarwx_ != nullptr) {
    delete _impl_.relationstarwx_;
  }
  _impl_.relationstarwx_ = nullptr;
}
void CSReqBody::clear_sendwxredpacket() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendwxredpacket_ != nullptr) {
    delete _impl_.sendwxredpacket_;
  }
  _impl_.sendwxredpacket_ = nullptr;
}
void CSReqBody::clear_recvwxredpacket() {
  if (GetArenaForAllocation() == nullptr && _impl_.recvwxredpacket_ != nullptr) {
    delete _impl_.recvwxredpacket_;
  }
  _impl_.recvwxredpacket_ = nullptr;
}
void CSReqBody::clear_wxredpktlike() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktlike_ != nullptr) {
    delete _impl_.wxredpktlike_;
  }
  _impl_.wxredpktlike_ = nullptr;
}
void CSReqBody::clear_wxredpktrank() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktrank_ != nullptr) {
    delete _impl_.wxredpktrank_;
  }
  _impl_.wxredpktrank_ = nullptr;
}
void CSReqBody::clear_setobserveprivilege() {
  if (GetArenaForAllocation() == nullptr && _impl_.setobserveprivilege_ != nullptr) {
    delete _impl_.setobserveprivilege_;
  }
  _impl_.setobserveprivilege_ = nullptr;
}
void CSReqBody::clear_presetfastchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.presetfastchat_ != nullptr) {
    delete _impl_.presetfastchat_;
  }
  _impl_.presetfastchat_ = nullptr;
}
void CSReqBody::clear_changeslotteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.changeslotteam_ != nullptr) {
    delete _impl_.changeslotteam_;
  }
  _impl_.changeslotteam_ = nullptr;
}
void CSReqBody::clear_changesubmodeteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.changesubmodeteam_ != nullptr) {
    delete _impl_.changesubmodeteam_;
  }
  _impl_.changesubmodeteam_ = nullptr;
}
void CSReqBody::clear_confirmchangeslotteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.confirmchangeslotteam_ != nullptr) {
    delete _impl_.confirmchangeslotteam_;
  }
  _impl_.confirmchangeslotteam_ = nullptr;
}
void CSReqBody::clear_pvproundend() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvproundend_ != nullptr) {
    delete _impl_.pvproundend_;
  }
  _impl_.pvproundend_ = nullptr;
}
void CSReqBody::clear_observechatlogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.observechatlogin_ != nullptr) {
    delete _impl_.observechatlogin_;
  }
  _impl_.observechatlogin_ = nullptr;
}
void CSReqBody::clear_pvpconfirm() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpconfirm_ != nullptr) {
    delete _impl_.pvpconfirm_;
  }
  _impl_.pvpconfirm_ = nullptr;
}
void CSReqBody::clear_activitypicshare() {
  if (GetArenaForAllocation() == nullptr && _impl_.activitypicshare_ != nullptr) {
    delete _impl_.activitypicshare_;
  }
  _impl_.activitypicshare_ = nullptr;
}
void CSReqBody::clear_bindoldbusinessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldbusinessplayer_ != nullptr) {
    delete _impl_.bindoldbusinessplayer_;
  }
  _impl_.bindoldbusinessplayer_ = nullptr;
}
void CSReqBody::clear_translate() {
  if (GetArenaForAllocation() == nullptr && _impl_.translate_ != nullptr) {
    delete _impl_.translate_;
  }
  _impl_.translate_ = nullptr;
}
void CSReqBody::clear_submitquestionnaire() {
  if (GetArenaForAllocation() == nullptr && _impl_.submitquestionnaire_ != nullptr) {
    delete _impl_.submitquestionnaire_;
  }
  _impl_.submitquestionnaire_ = nullptr;
}
void CSReqBody::clear_cancelchangeslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelchangeslot_ != nullptr) {
    delete _impl_.cancelchangeslot_;
  }
  _impl_.cancelchangeslot_ = nullptr;
}
void CSReqBody::clear_setchessskin() {
  if (GetArenaForAllocation() == nullptr && _impl_.setchessskin_ != nullptr) {
    delete _impl_.setchessskin_;
  }
  _impl_.setchessskin_ = nullptr;
}
void CSReqBody::clear_unsetchessskin() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessskin_ != nullptr) {
    delete _impl_.unsetchessskin_;
  }
  _impl_.unsetchessskin_ = nullptr;
}
void CSReqBody::clear_compose() {
  if (GetArenaForAllocation() == nullptr && _impl_.compose_ != nullptr) {
    delete _impl_.compose_;
  }
  _impl_.compose_ = nullptr;
}
void CSReqBody::clear_offhelpreddot() {
  if (GetArenaForAllocation() == nullptr && _impl_.offhelpreddot_ != nullptr) {
    delete _impl_.offhelpreddot_;
  }
  _impl_.offhelpreddot_ = nullptr;
}
void CSReqBody::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
void CSReqBody::clear_changelanguage() {
  if (GetArenaForAllocation() == nullptr && _impl_.changelanguage_ != nullptr) {
    delete _impl_.changelanguage_;
  }
  _impl_.changelanguage_ = nullptr;
}
void CSReqBody::clear_videoplay() {
  if (GetArenaForAllocation() == nullptr && _impl_.videoplay_ != nullptr) {
    delete _impl_.videoplay_;
  }
  _impl_.videoplay_ = nullptr;
}
void CSReqBody::clear_setprovince() {
  if (GetArenaForAllocation() == nullptr && _impl_.setprovince_ != nullptr) {
    delete _impl_.setprovince_;
  }
  _impl_.setprovince_ = nullptr;
}
void CSReqBody::clear_longyuanvoice() {
  if (GetArenaForAllocation() == nullptr && _impl_.longyuanvoice_ != nullptr) {
    delete _impl_.longyuanvoice_;
  }
  _impl_.longyuanvoice_ = nullptr;
}
void CSReqBody::clear_enrolltournament() {
  if (GetArenaForAllocation() == nullptr && _impl_.enrolltournament_ != nullptr) {
    delete _impl_.enrolltournament_;
  }
  _impl_.enrolltournament_ = nullptr;
}
void CSReqBody::clear_jointournamentroom() {
  if (GetArenaForAllocation() == nullptr && _impl_.jointournamentroom_ != nullptr) {
    delete _impl_.jointournamentroom_;
  }
  _impl_.jointournamentroom_ = nullptr;
}
void CSReqBody::clear_tournamentpointaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentpointaward_ != nullptr) {
    delete _impl_.tournamentpointaward_;
  }
  _impl_.tournamentpointaward_ = nullptr;
}
void CSReqBody::clear_dealwebmail() {
  if (GetArenaForAllocation() == nullptr && _impl_.dealwebmail_ != nullptr) {
    delete _impl_.dealwebmail_;
  }
  _impl_.dealwebmail_ = nullptr;
}
void CSReqBody::clear_getenrollplayers() {
  if (GetArenaForAllocation() == nullptr && _impl_.getenrollplayers_ != nullptr) {
    delete _impl_.getenrollplayers_;
  }
  _impl_.getenrollplayers_ = nullptr;
}
void CSReqBody::clear_challengeagain() {
  if (GetArenaForAllocation() == nullptr && _impl_.challengeagain_ != nullptr) {
    delete _impl_.challengeagain_;
  }
  _impl_.challengeagain_ = nullptr;
}
void CSReqBody::clear_historychat() {
  if (GetArenaForAllocation() == nullptr && _impl_.historychat_ != nullptr) {
    delete _impl_.historychat_;
  }
  _impl_.historychat_ = nullptr;
}
void CSReqBody::clear_setfriendinvisible() {
  if (GetArenaForAllocation() == nullptr && _impl_.setfriendinvisible_ != nullptr) {
    delete _impl_.setfriendinvisible_;
  }
  _impl_.setfriendinvisible_ = nullptr;
}
void CSReqBody::clear_getobserveaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveaward_ != nullptr) {
    delete _impl_.getobserveaward_;
  }
  _impl_.getobserveaward_ = nullptr;
}
void CSReqBody::clear_inviteobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.inviteobserve_ != nullptr) {
    delete _impl_.inviteobserve_;
  }
  _impl_.inviteobserve_ = nullptr;
}
void CSReqBody::clear_rejectobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.rejectobserve_ != nullptr) {
    delete _impl_.rejectobserve_;
  }
  _impl_.rejectobserve_ = nullptr;
}
void CSReqBody::clear_gettxplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.gettxplayer_ != nullptr) {
    delete _impl_.gettxplayer_;
  }
  _impl_.gettxplayer_ = nullptr;
}
void CSReqBody::clear_choosetxplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.choosetxplayer_ != nullptr) {
    delete _impl_.choosetxplayer_;
  }
  _impl_.choosetxplayer_ = nullptr;
}
void CSReqBody::clear_getthirdpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.getthirdpvpinfo_ != nullptr) {
    delete _impl_.getthirdpvpinfo_;
  }
  _impl_.getthirdpvpinfo_ = nullptr;
}
void CSReqBody::clear_markplayerguide() {
  if (GetArenaForAllocation() == nullptr && _impl_.markplayerguide_ != nullptr) {
    delete _impl_.markplayerguide_;
  }
  _impl_.markplayerguide_ = nullptr;
}
void CSReqBody::clear_markchessskinclicked() {
  if (GetArenaForAllocation() == nullptr && _impl_.markchessskinclicked_ != nullptr) {
    delete _impl_.markchessskinclicked_;
  }
  _impl_.markchessskinclicked_ = nullptr;
}
void CSReqBody::clear_recruitinviteplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.recruitinviteplayer_ != nullptr) {
    delete _impl_.recruitinviteplayer_;
  }
  _impl_.recruitinviteplayer_ = nullptr;
}
void CSReqBody::clear_recruitbindinviter() {
  if (GetArenaForAllocation() == nullptr && _impl_.recruitbindinviter_ != nullptr) {
    delete _impl_.recruitbindinviter_;
  }
  _impl_.recruitbindinviter_ = nullptr;
}
void CSReqBody::clear_queryps4entitlements() {
  if (GetArenaForAllocation() == nullptr && _impl_.queryps4entitlements_ != nullptr) {
    delete _impl_.queryps4entitlements_;
  }
  _impl_.queryps4entitlements_ = nullptr;
}
void CSReqBody::clear_actdaysign() {
  if (GetArenaForAllocation() == nullptr && _impl_.actdaysign_ != nullptr) {
    delete _impl_.actdaysign_;
  }
  _impl_.actdaysign_ = nullptr;
}
void CSReqBody::clear_havethirdpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.havethirdpvpinfo_ != nullptr) {
    delete _impl_.havethirdpvpinfo_;
  }
  _impl_.havethirdpvpinfo_ = nullptr;
}
void CSReqBody::clear_activitymall() {
  if (GetArenaForAllocation() == nullptr && _impl_.activitymall_ != nullptr) {
    delete _impl_.activitymall_;
  }
  _impl_.activitymall_ = nullptr;
}
void CSReqBody::clear_psonly() {
  if (GetArenaForAllocation() == nullptr && _impl_.psonly_ != nullptr) {
    delete _impl_.psonly_;
  }
  _impl_.psonly_ = nullptr;
}
void CSReqBody::clear_changechanneltype() {
  if (GetArenaForAllocation() == nullptr && _impl_.changechanneltype_ != nullptr) {
    delete _impl_.changechanneltype_;
  }
  _impl_.changechanneltype_ = nullptr;
}
void CSReqBody::clear_customcardopt() {
  if (GetArenaForAllocation() == nullptr && _impl_.customcardopt_ != nullptr) {
    delete _impl_.customcardopt_;
  }
  _impl_.customcardopt_ = nullptr;
}
void CSReqBody::clear_staticsreport() {
  if (GetArenaForAllocation() == nullptr && _impl_.staticsreport_ != nullptr) {
    delete _impl_.staticsreport_;
  }
  _impl_.staticsreport_ = nullptr;
}
void CSReqBody::clear_championhistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.championhistory_ != nullptr) {
    delete _impl_.championhistory_;
  }
  _impl_.championhistory_ = nullptr;
}
void CSReqBody::clear_tournamentlasttoprank() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentlasttoprank_ != nullptr) {
    delete _impl_.tournamentlasttoprank_;
  }
  _impl_.tournamentlasttoprank_ = nullptr;
}
void CSReqBody::clear_bigwinnerexpandmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerexpandmatch_ != nullptr) {
    delete _impl_.bigwinnerexpandmatch_;
  }
  _impl_.bigwinnerexpandmatch_ = nullptr;
}
void CSReqBody::clear_bigwinnerdailyaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerdailyaward_ != nullptr) {
    delete _impl_.bigwinnerdailyaward_;
  }
  _impl_.bigwinnerdailyaward_ = nullptr;
}
void CSReqBody::clear_bigwinnerscorehistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerscorehistory_ != nullptr) {
    delete _impl_.bigwinnerscorehistory_;
  }
  _impl_.bigwinnerscorehistory_ = nullptr;
}
void CSReqBody::clear_smeltitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.smeltitem_ != nullptr) {
    delete _impl_.smeltitem_;
  }
  _impl_.smeltitem_ = nullptr;
}
void CSReqBody::clear_pveuptalentlevel() {
  if (GetArenaForAllocation() == nullptr && _impl_.pveuptalentlevel_ != nullptr) {
    delete _impl_.pveuptalentlevel_;
  }
  _impl_.pveuptalentlevel_ = nullptr;
}
void CSReqBody::clear_luckyaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.luckyaward_ != nullptr) {
    delete _impl_.luckyaward_;
  }
  _impl_.luckyaward_ = nullptr;
}
void CSReqBody::clear_applychannel() {
  if (GetArenaForAllocation() == nullptr && _impl_.applychannel_ != nullptr) {
    delete _impl_.applychannel_;
  }
  _impl_.applychannel_ = nullptr;
}
void CSReqBody::clear_teamop() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamop_ != nullptr) {
    delete _impl_.teamop_;
  }
  _impl_.teamop_ = nullptr;
}
void CSReqBody::clear_obteaminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.obteaminfo_ != nullptr) {
    delete _impl_.obteaminfo_;
  }
  _impl_.obteaminfo_ = nullptr;
}
void CSReqBody::clear_headiconurl() {
  if (GetArenaForAllocation() == nullptr && _impl_.headiconurl_ != nullptr) {
    delete _impl_.headiconurl_;
  }
  _impl_.headiconurl_ = nullptr;
}
void CSReqBody::clear_getpvpservergroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpvpservergroup_ != nullptr) {
    delete _impl_.getpvpservergroup_;
  }
  _impl_.getpvpservergroup_ = nullptr;
}
void CSReqBody::clear_reportpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportpvpinfo_ != nullptr) {
    delete _impl_.reportpvpinfo_;
  }
  _impl_.reportpvpinfo_ = nullptr;
}
void CSReqBody::clear_chooseplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.chooseplayer_ != nullptr) {
    delete _impl_.chooseplayer_;
  }
  _impl_.chooseplayer_ = nullptr;
}
void CSReqBody::clear_pingtest() {
  if (GetArenaForAllocation() == nullptr && _impl_.pingtest_ != nullptr) {
    delete _impl_.pingtest_;
  }
  _impl_.pingtest_ = nullptr;
}
void CSReqBody::clear_reportregioninfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportregioninfo_ != nullptr) {
    delete _impl_.reportregioninfo_;
  }
  _impl_.reportregioninfo_ = nullptr;
}
void CSReqBody::clear_recalledplaeyr() {
  if (GetArenaForAllocation() == nullptr && _impl_.recalledplaeyr_ != nullptr) {
    delete _impl_.recalledplaeyr_;
  }
  _impl_.recalledplaeyr_ = nullptr;
}
void CSReqBody::clear_weblogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.weblogin_ != nullptr) {
    delete _impl_.weblogin_;
  }
  _impl_.weblogin_ = nullptr;
}
void CSReqBody::clear_invitecodereset() {
  if (GetArenaForAllocation() == nullptr && _impl_.invitecodereset_ != nullptr) {
    delete _impl_.invitecodereset_;
  }
  _impl_.invitecodereset_ = nullptr;
}
void CSReqBody::clear_recallreward() {
  if (GetArenaForAllocation() == nullptr && _impl_.recallreward_ != nullptr) {
    delete _impl_.recallreward_;
  }
  _impl_.recallreward_ = nullptr;
}
void CSReqBody::clear_switchtocommonmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchtocommonmatch_ != nullptr) {
    delete _impl_.switchtocommonmatch_;
  }
  _impl_.switchtocommonmatch_ = nullptr;
}
void CSReqBody::clear_switchmodeinteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchmodeinteam_ != nullptr) {
    delete _impl_.switchmodeinteam_;
  }
  _impl_.switchmodeinteam_ = nullptr;
}
void CSReqBody::clear_gettnroomstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.gettnroomstate_ != nullptr) {
    delete _impl_.gettnroomstate_;
  }
  _impl_.gettnroomstate_ = nullptr;
}
void CSReqBody::clear_workshopmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.workshopmatch_ != nullptr) {
    delete _impl_.workshopmatch_;
  }
  _impl_.workshopmatch_ = nullptr;
}
void CSReqBody::clear_buyworkshopticket() {
  if (GetArenaForAllocation() == nullptr && _impl_.buyworkshopticket_ != nullptr) {
    delete _impl_.buyworkshopticket_;
  }
  _impl_.buyworkshopticket_ = nullptr;
}
void CSReqBody::clear_favouriteworkshopmap() {
  if (GetArenaForAllocation() == nullptr && _impl_.favouriteworkshopmap_ != nullptr) {
    delete _impl_.favouriteworkshopmap_;
  }
  _impl_.favouriteworkshopmap_ = nullptr;
}
void CSReqBody::clear_shortcutmapsop() {
  if (GetArenaForAllocation() == nullptr && _impl_.shortcutmapsop_ != nullptr) {
    delete _impl_.shortcutmapsop_;
  }
  _impl_.shortcutmapsop_ = nullptr;
}
void CSReqBody::clear_playerstournamentinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerstournamentinfo_ != nullptr) {
    delete _impl_.playerstournamentinfo_;
  }
  _impl_.playerstournamentinfo_ = nullptr;
}
void CSReqBody::clear_scoreworkshopmap() {
  if (GetArenaForAllocation() == nullptr && _impl_.scoreworkshopmap_ != nullptr) {
    delete _impl_.scoreworkshopmap_;
  }
  _impl_.scoreworkshopmap_ = nullptr;
}
void CSReqBody::clear_mapsvisitedbyfriends() {
  if (GetArenaForAllocation() == nullptr && _impl_.mapsvisitedbyfriends_ != nullptr) {
    delete _impl_.mapsvisitedbyfriends_;
  }
  _impl_.mapsvisitedbyfriends_ = nullptr;
}
void CSReqBody::clear_verifyrealname() {
  if (GetArenaForAllocation() == nullptr && _impl_.verifyrealname_ != nullptr) {
    delete _impl_.verifyrealname_;
  }
  _impl_.verifyrealname_ = nullptr;
}
void CSReqBody::clear_fakepay() {
  if (GetArenaForAllocation() == nullptr && _impl_.fakepay_ != nullptr) {
    delete _impl_.fakepay_;
  }
  _impl_.fakepay_ = nullptr;
}
void CSReqBody::clear_guildcreate() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildcreate_ != nullptr) {
    delete _impl_.guildcreate_;
  }
  _impl_.guildcreate_ = nullptr;
}
void CSReqBody::clear_guildapply() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildapply_ != nullptr) {
    delete _impl_.guildapply_;
  }
  _impl_.guildapply_ = nullptr;
}
void CSReqBody::clear_guildhome() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildhome_ != nullptr) {
    delete _impl_.guildhome_;
  }
  _impl_.guildhome_ = nullptr;
}
void CSReqBody::clear_guildinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
}
void CSReqBody::clear_guildapprove() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildapprove_ != nullptr) {
    delete _impl_.guildapprove_;
  }
  _impl_.guildapprove_ = nullptr;
}
void CSReqBody::clear_guildrole() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrole_ != nullptr) {
    delete _impl_.guildrole_;
  }
  _impl_.guildrole_ = nullptr;
}
void CSReqBody::clear_guildmodify() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildmodify_ != nullptr) {
    delete _impl_.guildmodify_;
  }
  _impl_.guildmodify_ = nullptr;
}
void CSReqBody::clear_guildkickoff() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildkickoff_ != nullptr) {
    delete _impl_.guildkickoff_;
  }
  _impl_.guildkickoff_ = nullptr;
}
void CSReqBody::clear_guilddismiss() {
  if (GetArenaForAllocation() == nullptr && _impl_.guilddismiss_ != nullptr) {
    delete _impl_.guilddismiss_;
  }
  _impl_.guilddismiss_ = nullptr;
}
void CSReqBody::clear_guildexit() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildexit_ != nullptr) {
    delete _impl_.guildexit_;
  }
  _impl_.guildexit_ = nullptr;
}
void CSReqBody::clear_guildchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildchat_ != nullptr) {
    delete _impl_.guildchat_;
  }
  _impl_.guildchat_ = nullptr;
}
void CSReqBody::clear_guildlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildlist_ != nullptr) {
    delete _impl_.guildlist_;
  }
  _impl_.guildlist_ = nullptr;
}
void CSReqBody::clear_guildrecommendplayers() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrecommendplayers_ != nullptr) {
    delete _impl_.guildrecommendplayers_;
  }
  _impl_.guildrecommendplayers_ = nullptr;
}
void CSReqBody::clear_guildinvitelist() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvitelist_ != nullptr) {
    delete _impl_.guildinvitelist_;
  }
  _impl_.guildinvitelist_ = nullptr;
}
void CSReqBody::clear_guildinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvite_ != nullptr) {
    delete _impl_.guildinvite_;
  }
  _impl_.guildinvite_ = nullptr;
}
void CSReqBody::clear_guildresign() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildresign_ != nullptr) {
    delete _impl_.guildresign_;
  }
  _impl_.guildresign_ = nullptr;
}
void CSReqBody::clear_guildrejectinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrejectinvite_ != nullptr) {
    delete _impl_.guildrejectinvite_;
  }
  _impl_.guildrejectinvite_ = nullptr;
}
void CSReqBody::clear_getvngcommentaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getvngcommentaward_ != nullptr) {
    delete _impl_.getvngcommentaward_;
  }
  _impl_.getvngcommentaward_ = nullptr;
}
void CSReqBody::clear_levelupchest() {
  if (GetArenaForAllocation() == nullptr && _impl_.levelupchest_ != nullptr) {
    delete _impl_.levelupchest_;
  }
  _impl_.levelupchest_ = nullptr;
}
void CSReqBody::clear_watchad() {
  if (GetArenaForAllocation() == nullptr && _impl_.watchad_ != nullptr) {
    delete _impl_.watchad_;
  }
  _impl_.watchad_ = nullptr;
}
void CSReqBody::clear_pstournamentroom() {
  if (GetArenaForAllocation() == nullptr && _impl_.pstournamentroom_ != nullptr) {
    delete _impl_.pstournamentroom_;
  }
  _impl_.pstournamentroom_ = nullptr;
}
void CSReqBody::clear_getadcumulateaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getadcumulateaward_ != nullptr) {
    delete _impl_.getadcumulateaward_;
  }
  _impl_.getadcumulateaward_ = nullptr;
}
void CSReqBody::clear_setmessengerpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.setmessengerpos_ != nullptr) {
    delete _impl_.setmessengerpos_;
  }
  _impl_.setmessengerpos_ = nullptr;
}
void CSReqBody::clear_updateantiaddictiontime() {
  if (GetArenaForAllocation() == nullptr && _impl_.updateantiaddictiontime_ != nullptr) {
    delete _impl_.updateantiaddictiontime_;
  }
  _impl_.updateantiaddictiontime_ = nullptr;
}
void CSReqBody::clear_cancelreconnect() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelreconnect_ != nullptr) {
    delete _impl_.cancelreconnect_;
  }
  _impl_.cancelreconnect_ = nullptr;
}
void CSReqBody::clear_reconnect() {
  if (GetArenaForAllocation() == nullptr && _impl_.reconnect_ != nullptr) {
    delete _impl_.reconnect_;
  }
  _impl_.reconnect_ = nullptr;
}
void CSReqBody::clear_passthrough() {
  if (GetArenaForAllocation() == nullptr && _impl_.passthrough_ != nullptr) {
    delete _impl_.passthrough_;
  }
  _impl_.passthrough_ = nullptr;
}
void CSReqBody::clear_visitplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.visitplayer_ != nullptr) {
    delete _impl_.visitplayer_;
  }
  _impl_.visitplayer_ = nullptr;
}
void CSReqBody::clear_leavegameearly() {
  if (GetArenaForAllocation() == nullptr && _impl_.leavegameearly_ != nullptr) {
    delete _impl_.leavegameearly_;
  }
  _impl_.leavegameearly_ = nullptr;
}
void CSReqBody::clear_gdcommonbin() {
  if (GetArenaForAllocation() == nullptr && _impl_.gdcommonbin_ != nullptr) {
    delete _impl_.gdcommonbin_;
  }
  _impl_.gdcommonbin_ = nullptr;
}
void CSReqBody::clear_gdbindata() {
  if (GetArenaForAllocation() == nullptr && _impl_.gdbindata_ != nullptr) {
    delete _impl_.gdbindata_;
  }
  _impl_.gdbindata_ = nullptr;
}
void CSReqBody::clear_autobattleop() {
  if (GetArenaForAllocation() == nullptr && _impl_.autobattleop_ != nullptr) {
    delete _impl_.autobattleop_;
  }
  _impl_.autobattleop_ = nullptr;
}
void CSReqBody::clear_restrictuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.restrictuser_ != nullptr) {
    delete _impl_.restrictuser_;
  }
  _impl_.restrictuser_ = nullptr;
}
void CSReqBody::clear_equipselectrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.equipselectrate_ != nullptr) {
    delete _impl_.equipselectrate_;
  }
  _impl_.equipselectrate_ = nullptr;
}
void CSReqBody::clear_reportabsent() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportabsent_ != nullptr) {
    delete _impl_.reportabsent_;
  }
  _impl_.reportabsent_ = nullptr;
}
void CSReqBody::clear_recommendweek() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendweek_ != nullptr) {
    delete _impl_.recommendweek_;
  }
  _impl_.recommendweek_ = nullptr;
}
void CSReqBody::clear_recommendofficial() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendofficial_ != nullptr) {
    delete _impl_.recommendofficial_;
  }
  _impl_.recommendofficial_ = nullptr;
}
void CSReqBody::clear_recommendlatest() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendlatest_ != nullptr) {
    delete _impl_.recommendlatest_;
  }
  _impl_.recommendlatest_ = nullptr;
}
void CSReqBody::clear_recommendhistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendhistory_ != nullptr) {
    delete _impl_.recommendhistory_;
  }
  _impl_.recommendhistory_ = nullptr;
}
void CSReqBody::clear_recommendcollect() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendcollect_ != nullptr) {
    delete _impl_.recommendcollect_;
  }
  _impl_.recommendcollect_ = nullptr;
}
void CSReqBody::clear_recommendset() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendset_ != nullptr) {
    delete _impl_.recommendset_;
  }
  _impl_.recommendset_ = nullptr;
}
void CSReqBody::clear_recommendgetcollection() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendgetcollection_ != nullptr) {
    delete _impl_.recommendgetcollection_;
  }
  _impl_.recommendgetcollection_ = nullptr;
}
void CSReqBody::clear_recommendequip() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendequip_ != nullptr) {
    delete _impl_.recommendequip_;
  }
  _impl_.recommendequip_ = nullptr;
}
void CSReqBody::clear_logincancel() {
  if (GetArenaForAllocation() == nullptr && _impl_.logincancel_ != nullptr) {
    delete _impl_.logincancel_;
  }
  _impl_.logincancel_ = nullptr;
}
void CSReqBody::clear_convertdebris() {
  if (GetArenaForAllocation() == nullptr && _impl_.convertdebris_ != nullptr) {
    delete _impl_.convertdebris_;
  }
  _impl_.convertdebris_ = nullptr;
}
void CSReqBody::clear_protectioncard() {
  if (GetArenaForAllocation() == nullptr && _impl_.protectioncard_ != nullptr) {
    delete _impl_.protectioncard_;
  }
  _impl_.protectioncard_ = nullptr;
}
void CSReqBody::clear_usepassportcard() {
  if (GetArenaForAllocation() == nullptr && _impl_.usepassportcard_ != nullptr) {
    delete _impl_.usepassportcard_;
  }
  _impl_.usepassportcard_ = nullptr;
}
void CSReqBody::clear_setmedal() {
  if (GetArenaForAllocation() == nullptr && _impl_.setmedal_ != nullptr) {
    delete _impl_.setmedal_;
  }
  _impl_.setmedal_ = nullptr;
}
void CSReqBody::clear_unsetmedal() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetmedal_ != nullptr) {
    delete _impl_.unsetmedal_;
  }
  _impl_.unsetmedal_ = nullptr;
}
void CSReqBody::clear_playermedals() {
  if (GetArenaForAllocation() == nullptr && _impl_.playermedals_ != nullptr) {
    delete _impl_.playermedals_;
  }
  _impl_.playermedals_ = nullptr;
}
void CSReqBody::clear_updatehotdot() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatehotdot_ != nullptr) {
    delete _impl_.updatehotdot_;
  }
  _impl_.updatehotdot_ = nullptr;
}
void CSReqBody::clear_queryhotdot() {
  if (GetArenaForAllocation() == nullptr && _impl_.queryhotdot_ != nullptr) {
    delete _impl_.queryhotdot_;
  }
  _impl_.queryhotdot_ = nullptr;
}
void CSReqBody::clear_setcache() {
  if (GetArenaForAllocation() == nullptr && _impl_.setcache_ != nullptr) {
    delete _impl_.setcache_;
  }
  _impl_.setcache_ = nullptr;
}
void CSReqBody::clear_getcache() {
  if (GetArenaForAllocation() == nullptr && _impl_.getcache_ != nullptr) {
    delete _impl_.getcache_;
  }
  _impl_.getcache_ = nullptr;
}
void CSReqBody::clear_buychallengecount() {
  if (GetArenaForAllocation() == nullptr && _impl_.buychallengecount_ != nullptr) {
    delete _impl_.buychallengecount_;
  }
  _impl_.buychallengecount_ = nullptr;
}
void CSReqBody::clear_getpverank() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpverank_ != nullptr) {
    delete _impl_.getpverank_;
  }
  _impl_.getpverank_ = nullptr;
}
void CSReqBody::clear_authaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.authaccount_ != nullptr) {
    delete _impl_.authaccount_;
  }
  _impl_.authaccount_ = nullptr;
}
void CSReqBody::clear_unbindaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.unbindaccount_ != nullptr) {
    delete _impl_.unbindaccount_;
  }
  _impl_.unbindaccount_ = nullptr;
}
void CSReqBody::clear_bagtoitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.bagtoitem_ != nullptr) {
    delete _impl_.bagtoitem_;
  }
  _impl_.bagtoitem_ = nullptr;
}
void CSReqBody::clear_identifyitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.identifyitem_ != nullptr) {
    delete _impl_.identifyitem_;
  }
  _impl_.identifyitem_ = nullptr;
}
void CSReqBody::clear_insetitemaffix() {
  if (GetArenaForAllocation() == nullptr && _impl_.insetitemaffix_ != nullptr) {
    delete _impl_.insetitemaffix_;
  }
  _impl_.insetitemaffix_ = nullptr;
}
void CSReqBody::clear_unsetitemaffix() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitemaffix_ != nullptr) {
    delete _impl_.unsetitemaffix_;
  }
  _impl_.unsetitemaffix_ = nullptr;
}
void CSReqBody::clear_setdefaultattributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.setdefaultattributes_ != nullptr) {
    delete _impl_.setdefaultattributes_;
  }
  _impl_.setdefaultattributes_ = nullptr;
}
void CSReqBody::clear_checkcancel() {
  if (GetArenaForAllocation() == nullptr && _impl_.checkcancel_ != nullptr) {
    delete _impl_.checkcancel_;
  }
  _impl_.checkcancel_ = nullptr;
}
void CSReqBody::clear_cancelaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelaccount_ != nullptr) {
    delete _impl_.cancelaccount_;
  }
  _impl_.cancelaccount_ = nullptr;
}
void CSReqBody::clear_oauthapp() {
  if (GetArenaForAllocation() == nullptr && _impl_.oauthapp_ != nullptr) {
    delete _impl_.oauthapp_;
  }
  _impl_.oauthapp_ = nullptr;
}
void CSReqBody::clear_getselfnumrankdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.getselfnumrankdata_ != nullptr) {
    delete _impl_.getselfnumrankdata_;
  }
  _impl_.getselfnumrankdata_ = nullptr;
}
void CSReqBody::clear_updatecardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroup_ != nullptr) {
    delete _impl_.updatecardgroup_;
  }
  _impl_.updatecardgroup_ = nullptr;
}
void CSReqBody::clear_updatecardgroupname() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupname_ != nullptr) {
    delete _impl_.updatecardgroupname_;
  }
  _impl_.updatecardgroupname_ = nullptr;
}
void CSReqBody::clear_buypvebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.buypvebuff_ != nullptr) {
    delete _impl_.buypvebuff_;
  }
  _impl_.buypvebuff_ = nullptr;
}
void CSReqBody::clear_setcardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.setcardgroup_ != nullptr) {
    delete _impl_.setcardgroup_;
  }
  _impl_.setcardgroup_ = nullptr;
}
void CSReqBody::clear_buypvechesstemplate() {
  if (GetArenaForAllocation() == nullptr && _impl_.buypvechesstemplate_ != nullptr) {
    delete _impl_.buypvechesstemplate_;
  }
  _impl_.buypvechesstemplate_ = nullptr;
}
void CSReqBody::clear_pveunlockchesstemplate() {
  if (GetArenaForAllocation() == nullptr && _impl_.pveunlockchesstemplate_ != nullptr) {
    delete _impl_.pveunlockchesstemplate_;
  }
  _impl_.pveunlockchesstemplate_ = nullptr;
}
void CSReqBody::clear_pvesetteamdebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvesetteamdebuff_ != nullptr) {
    delete _impl_.pvesetteamdebuff_;
  }
  _impl_.pvesetteamdebuff_ = nullptr;
}
void CSReqBody::clear_chosecardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.chosecardgroup_ != nullptr) {
    delete _impl_.chosecardgroup_;
  }
  _impl_.chosecardgroup_ = nullptr;
}
void CSReqBody::clear_removeovertimebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeovertimebuff_ != nullptr) {
    delete _impl_.removeovertimebuff_;
  }
  _impl_.removeovertimebuff_ = nullptr;
}
void CSReqBody::clear_updatenewcardgroupsign() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatenewcardgroupsign_ != nullptr) {
    delete _impl_.updatenewcardgroupsign_;
  }
  _impl_.updatenewcardgroupsign_ = nullptr;
}
void CSReqBody::clear_tdgetonhookaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdgetonhookaward_ != nullptr) {
    delete _impl_.tdgetonhookaward_;
  }
  _impl_.tdgetonhookaward_ = nullptr;
}
void CSReqBody::clear_tddraw() {
  if (GetArenaForAllocation() == nullptr && _impl_.tddraw_ != nullptr) {
    delete _impl_.tddraw_;
  }
  _impl_.tddraw_ = nullptr;
}
void CSReqBody::clear_tdbuycard() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdbuycard_ != nullptr) {
    delete _impl_.tdbuycard_;
  }
  _impl_.tdbuycard_ = nullptr;
}
void CSReqBody::clear_tdsetcardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdsetcardgroup_ != nullptr) {
    delete _impl_.tdsetcardgroup_;
  }
  _impl_.tdsetcardgroup_ = nullptr;
}
void CSReqBody::clear_tdlevelup() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdlevelup_ != nullptr) {
    delete _impl_.tdlevelup_;
  }
  _impl_.tdlevelup_ = nullptr;
}
void CSReqBody::clear_tdequip() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdequip_ != nullptr) {
    delete _impl_.tdequip_;
  }
  _impl_.tdequip_ = nullptr;
}
void CSReqBody::clear_mentorupdatesetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorupdatesetting_ != nullptr) {
    delete _impl_.mentorupdatesetting_;
  }
  _impl_.mentorupdatesetting_ = nullptr;
}
void CSReqBody::clear_mentorinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinvite_ != nullptr) {
    delete _impl_.mentorinvite_;
  }
  _impl_.mentorinvite_ = nullptr;
}
void CSReqBody::clear_mentorconfirminvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorconfirminvite_ != nullptr) {
    delete _impl_.mentorconfirminvite_;
  }
  _impl_.mentorconfirminvite_ = nullptr;
}
void CSReqBody::clear_mentorrecommendlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrecommendlist_ != nullptr) {
    delete _impl_.mentorrecommendlist_;
  }
  _impl_.mentorrecommendlist_ = nullptr;
}
void CSReqBody::clear_mentorgettaskaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgettaskaward_ != nullptr) {
    delete _impl_.mentorgettaskaward_;
  }
  _impl_.mentorgettaskaward_ = nullptr;
}
void CSReqBody::clear_mentorgraduate() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgraduate_ != nullptr) {
    delete _impl_.mentorgraduate_;
  }
  _impl_.mentorgraduate_ = nullptr;
}
void CSReqBody::clear_mentorrelieverelation() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrelieverelation_ != nullptr) {
    delete _impl_.mentorrelieverelation_;
  }
  _impl_.mentorrelieverelation_ = nullptr;
}
void CSReqBody::clear_getmentorinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmentorinfo_ != nullptr) {
    delete _impl_.getmentorinfo_;
  }
  _impl_.getmentorinfo_ = nullptr;
}
void CSReqBody::clear_mentorgetinvitemsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgetinvitemsg_ != nullptr) {
    delete _impl_.mentorgetinvitemsg_;
  }
  _impl_.mentorgetinvitemsg_ = nullptr;
}
void CSReqBody::clear_updatecardgroupbetter() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupbetter_ != nullptr) {
    delete _impl_.updatecardgroupbetter_;
  }
  _impl_.updatecardgroupbetter_ = nullptr;
}
void CSReqBody::clear_updatecardgroupsetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupsetting_ != nullptr) {
    delete _impl_.updatecardgroupsetting_;
  }
  _impl_.updatecardgroupsetting_ = nullptr;
}
void CSReqBody::clear_setcontent() {
  if (GetArenaForAllocation() == nullptr && _impl_.setcontent_ != nullptr) {
    delete _impl_.setcontent_;
  }
  _impl_.setcontent_ = nullptr;
}
void CSReqBody::clear_getbalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.getbalance_ != nullptr) {
    delete _impl_.getbalance_;
  }
  _impl_.getbalance_ = nullptr;
}
void CSReqBody::clear_rechargebalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.rechargebalance_ != nullptr) {
    delete _impl_.rechargebalance_;
  }
  _impl_.rechargebalance_ = nullptr;
}
void CSReqBody::clear_withdrawbalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.withdrawbalance_ != nullptr) {
    delete _impl_.withdrawbalance_;
  }
  _impl_.withdrawbalance_ = nullptr;
}
void CSReqBody::clear_personalrecommendmall() {
  if (GetArenaForAllocation() == nullptr && _impl_.personalrecommendmall_ != nullptr) {
    delete _impl_.personalrecommendmall_;
  }
  _impl_.personalrecommendmall_ = nullptr;
}
void CSReqBody::clear_getmedalchestaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmedalchestaward_ != nullptr) {
    delete _impl_.getmedalchestaward_;
  }
  _impl_.getmedalchestaward_ = nullptr;
}
void CSReqBody::clear_setitemautouse() {
  if (GetArenaForAllocation() == nullptr && _impl_.setitemautouse_ != nullptr) {
    delete _impl_.setitemautouse_;
  }
  _impl_.setitemautouse_ = nullptr;
}
CSReqBody::CSReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqBody)
}
CSReqBody::CSReqBody(const CSReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.heart_){nullptr}
    , decltype(_impl_.login_){nullptr}
    , decltype(_impl_.versioncheck_){nullptr}
    , decltype(_impl_.resourceversioncheck_){nullptr}
    , decltype(_impl_.applyhallserver_){nullptr}
    , decltype(_impl_.getnumrank_){nullptr}
    , decltype(_impl_.worldchat_){nullptr}
    , decltype(_impl_.playersbaseinfo_){nullptr}
    , decltype(_impl_.playerdetailinfo_){nullptr}
    , decltype(_impl_.readmail_){nullptr}
    , decltype(_impl_.getmailaward_){nullptr}
    , decltype(_impl_.buyegg_){nullptr}
    , decltype(_impl_.usernameset_){nullptr}
    , decltype(_impl_.usernamerandom_){nullptr}
    , decltype(_impl_.headpicset_){nullptr}
    , decltype(_impl_.pvp_){nullptr}
    , decltype(_impl_.dresschessplayer_){nullptr}
    , decltype(_impl_.dressscene_){nullptr}
    , decltype(_impl_.pvplogin_){nullptr}
    , decltype(_impl_.pvpend_){nullptr}
    , decltype(_impl_.playerfinish_){nullptr}
    , decltype(_impl_.playerquit_){nullptr}
    , decltype(_impl_.sellitem_){nullptr}
    , decltype(_impl_.getevalaward_){nullptr}
    , decltype(_impl_.usechessplayer_){nullptr}
    , decltype(_impl_.guidreport_){nullptr}
    , decltype(_impl_.getcodeaward_){nullptr}
    , decltype(_impl_.roundreport_){nullptr}
    , decltype(_impl_.loadingprogress_){nullptr}
    , decltype(_impl_.pvpchat_){nullptr}
    , decltype(_impl_.chesscombine_){nullptr}
    , decltype(_impl_.expose_){nullptr}
    , decltype(_impl_.applyorderid_){nullptr}
    , decltype(_impl_.reportorderinfo_){nullptr}
    , decltype(_impl_.setitem_){nullptr}
    , decltype(_impl_.unsetitem_){nullptr}
    , decltype(_impl_.randomitem_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.setchessplayer_){nullptr}
    , decltype(_impl_.unsetchessplayer_){nullptr}
    , decltype(_impl_.getfanslist_){nullptr}
    , decltype(_impl_.followplayer_){nullptr}
    , decltype(_impl_.unfollowplayer_){nullptr}
    , decltype(_impl_.playersstatusinfo_){nullptr}
    , decltype(_impl_.invitejointeam_){nullptr}
    , decltype(_impl_.jointeam_){nullptr}
    , decltype(_impl_.kickoffteamplayer_){nullptr}
    , decltype(_impl_.teammsg_){nullptr}
    , decltype(_impl_.teamready_){nullptr}
    , decltype(_impl_.reportpayresponse_){nullptr}
    , decltype(_impl_.rejectjointeam_){nullptr}
    , decltype(_impl_.shieldchat_){nullptr}
    , decltype(_impl_.buypassportlevel_){nullptr}
    , decltype(_impl_.upgradepassport_){nullptr}
    , decltype(_impl_.getpassportlevelaward_){nullptr}
    , decltype(_impl_.getpassporttaskaward_){nullptr}
    , decltype(_impl_.telbook_){nullptr}
    , decltype(_impl_.activatepassport_){nullptr}
    , decltype(_impl_.rankseasoneval_){nullptr}
    , decltype(_impl_.bindaccount_){nullptr}
    , decltype(_impl_.incadsshowcount_){nullptr}
    , decltype(_impl_.usebonuscard_){nullptr}
    , decltype(_impl_.getseasonaward_){nullptr}
    , decltype(_impl_.getalphaactivityaward_){nullptr}
    , decltype(_impl_.getlanguagedata_){nullptr}
    , decltype(_impl_.getactivityaward_){nullptr}
    , decltype(_impl_.getactivitydata_){nullptr}
    , decltype(_impl_.sendsms_){nullptr}
    , decltype(_impl_.getmeleeaward_){nullptr}
    , decltype(_impl_.addaitoteam_){nullptr}
    , decltype(_impl_.share_){nullptr}
    , decltype(_impl_.skipinterface_){nullptr}
    , decltype(_impl_.teamgame_){nullptr}
    , decltype(_impl_.setteammode_){nullptr}
    , decltype(_impl_.historypvpshowpermission_){nullptr}
    , decltype(_impl_.searchteam_){nullptr}
    , decltype(_impl_.applychat_){nullptr}
    , decltype(_impl_.chatlogin_){nullptr}
    , decltype(_impl_.probenetdelay_){nullptr}
    , decltype(_impl_.geteggs_){nullptr}
    , decltype(_impl_.buygoods_){nullptr}
    , decltype(_impl_.exchangepassportgoods_){nullptr}
    , decltype(_impl_.usepassporttaskcard_){nullptr}
    , decltype(_impl_.openrandchest_){nullptr}
    , decltype(_impl_.egglottery_){nullptr}
    , decltype(_impl_.querydiamondbalance_){nullptr}
    , decltype(_impl_.useitem_){nullptr}
    , decltype(_impl_.useexperiencecard_){nullptr}
    , decltype(_impl_.randtargetitem_){nullptr}
    , decltype(_impl_.addblacklist_){nullptr}
    , decltype(_impl_.removeblacklist_){nullptr}
    , decltype(_impl_.reportplayerbirth_){nullptr}
    , decltype(_impl_.reportinfoinput_){nullptr}
    , decltype(_impl_.sendverificationcode_){nullptr}
    , decltype(_impl_.bindphonenumber_){nullptr}
    , decltype(_impl_.worldinvite_){nullptr}
    , decltype(_impl_.removeexpireitem_){nullptr}
    , decltype(_impl_.getmallgoods_){nullptr}
    , decltype(_impl_.buymallgoods_){nullptr}
    , decltype(_impl_.bindsharingcode_){nullptr}
    , decltype(_impl_.wxblessbag_){nullptr}
    , decltype(_impl_.updatefriendsingame_){nullptr}
    , decltype(_impl_.sharereward_){nullptr}
    , decltype(_impl_.allfightinfo_){nullptr}
    , decltype(_impl_.getoldplayer_){nullptr}
    , decltype(_impl_.bindoldplayer_){nullptr}
    , decltype(_impl_.sendverificationcodewithcheckredis_){nullptr}
    , decltype(_impl_.reportsetting_){nullptr}
    , decltype(_impl_.antidata_){nullptr}
    , decltype(_impl_.tlogdata_){nullptr}
    , decltype(_impl_.daysign_){nullptr}
    , decltype(_impl_.dayfitavoid_){nullptr}
    , decltype(_impl_.sharecountaward_){nullptr}
    , decltype(_impl_.actitemexch_){nullptr}
    , decltype(_impl_.realationstar_){nullptr}
    , decltype(_impl_.getrealationstarinvitesucc_){nullptr}
    , decltype(_impl_.getrealationstar_){nullptr}
    , decltype(_impl_.reqactrecord_){nullptr}
    , decltype(_impl_.joinvoiceteam_){nullptr}
    , decltype(_impl_.joinvoicepvp_){nullptr}
    , decltype(_impl_.joinvoicecamp_){nullptr}
    , decltype(_impl_.usercountryset_){nullptr}
    , decltype(_impl_.offlineinvitejointeam_){nullptr}
    , decltype(_impl_.observe_){nullptr}
    , decltype(_impl_.getrecommendpvp_){nullptr}
    , decltype(_impl_.observelogin_){nullptr}
    , decltype(_impl_.quitobserve_){nullptr}
    , decltype(_impl_.getobserveinfo_){nullptr}
    , decltype(_impl_.freeflow_){nullptr}
    , decltype(_impl_.setpushtoken_){nullptr}
    , decltype(_impl_.tlogevent_){nullptr}
    , decltype(_impl_.wxvvipaward_){nullptr}
    , decltype(_impl_.relationstarwx_){nullptr}
    , decltype(_impl_.sendwxredpacket_){nullptr}
    , decltype(_impl_.recvwxredpacket_){nullptr}
    , decltype(_impl_.wxredpktlike_){nullptr}
    , decltype(_impl_.wxredpktrank_){nullptr}
    , decltype(_impl_.setobserveprivilege_){nullptr}
    , decltype(_impl_.presetfastchat_){nullptr}
    , decltype(_impl_.changeslotteam_){nullptr}
    , decltype(_impl_.changesubmodeteam_){nullptr}
    , decltype(_impl_.confirmchangeslotteam_){nullptr}
    , decltype(_impl_.pvproundend_){nullptr}
    , decltype(_impl_.observechatlogin_){nullptr}
    , decltype(_impl_.pvpconfirm_){nullptr}
    , decltype(_impl_.activitypicshare_){nullptr}
    , decltype(_impl_.bindoldbusinessplayer_){nullptr}
    , decltype(_impl_.translate_){nullptr}
    , decltype(_impl_.submitquestionnaire_){nullptr}
    , decltype(_impl_.cancelchangeslot_){nullptr}
    , decltype(_impl_.setchessskin_){nullptr}
    , decltype(_impl_.unsetchessskin_){nullptr}
    , decltype(_impl_.compose_){nullptr}
    , decltype(_impl_.offhelpreddot_){nullptr}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.changelanguage_){nullptr}
    , decltype(_impl_.videoplay_){nullptr}
    , decltype(_impl_.setprovince_){nullptr}
    , decltype(_impl_.longyuanvoice_){nullptr}
    , decltype(_impl_.enrolltournament_){nullptr}
    , decltype(_impl_.jointournamentroom_){nullptr}
    , decltype(_impl_.tournamentpointaward_){nullptr}
    , decltype(_impl_.dealwebmail_){nullptr}
    , decltype(_impl_.getenrollplayers_){nullptr}
    , decltype(_impl_.challengeagain_){nullptr}
    , decltype(_impl_.historychat_){nullptr}
    , decltype(_impl_.setfriendinvisible_){nullptr}
    , decltype(_impl_.getobserveaward_){nullptr}
    , decltype(_impl_.inviteobserve_){nullptr}
    , decltype(_impl_.rejectobserve_){nullptr}
    , decltype(_impl_.gettxplayer_){nullptr}
    , decltype(_impl_.choosetxplayer_){nullptr}
    , decltype(_impl_.getthirdpvpinfo_){nullptr}
    , decltype(_impl_.markplayerguide_){nullptr}
    , decltype(_impl_.markchessskinclicked_){nullptr}
    , decltype(_impl_.recruitinviteplayer_){nullptr}
    , decltype(_impl_.recruitbindinviter_){nullptr}
    , decltype(_impl_.queryps4entitlements_){nullptr}
    , decltype(_impl_.actdaysign_){nullptr}
    , decltype(_impl_.havethirdpvpinfo_){nullptr}
    , decltype(_impl_.activitymall_){nullptr}
    , decltype(_impl_.psonly_){nullptr}
    , decltype(_impl_.changechanneltype_){nullptr}
    , decltype(_impl_.customcardopt_){nullptr}
    , decltype(_impl_.staticsreport_){nullptr}
    , decltype(_impl_.championhistory_){nullptr}
    , decltype(_impl_.tournamentlasttoprank_){nullptr}
    , decltype(_impl_.bigwinnerexpandmatch_){nullptr}
    , decltype(_impl_.bigwinnerdailyaward_){nullptr}
    , decltype(_impl_.bigwinnerscorehistory_){nullptr}
    , decltype(_impl_.smeltitem_){nullptr}
    , decltype(_impl_.pveuptalentlevel_){nullptr}
    , decltype(_impl_.luckyaward_){nullptr}
    , decltype(_impl_.applychannel_){nullptr}
    , decltype(_impl_.teamop_){nullptr}
    , decltype(_impl_.obteaminfo_){nullptr}
    , decltype(_impl_.headiconurl_){nullptr}
    , decltype(_impl_.getpvpservergroup_){nullptr}
    , decltype(_impl_.reportpvpinfo_){nullptr}
    , decltype(_impl_.chooseplayer_){nullptr}
    , decltype(_impl_.pingtest_){nullptr}
    , decltype(_impl_.reportregioninfo_){nullptr}
    , decltype(_impl_.recalledplaeyr_){nullptr}
    , decltype(_impl_.weblogin_){nullptr}
    , decltype(_impl_.invitecodereset_){nullptr}
    , decltype(_impl_.recallreward_){nullptr}
    , decltype(_impl_.switchtocommonmatch_){nullptr}
    , decltype(_impl_.switchmodeinteam_){nullptr}
    , decltype(_impl_.gettnroomstate_){nullptr}
    , decltype(_impl_.workshopmatch_){nullptr}
    , decltype(_impl_.buyworkshopticket_){nullptr}
    , decltype(_impl_.favouriteworkshopmap_){nullptr}
    , decltype(_impl_.shortcutmapsop_){nullptr}
    , decltype(_impl_.playerstournamentinfo_){nullptr}
    , decltype(_impl_.scoreworkshopmap_){nullptr}
    , decltype(_impl_.mapsvisitedbyfriends_){nullptr}
    , decltype(_impl_.verifyrealname_){nullptr}
    , decltype(_impl_.fakepay_){nullptr}
    , decltype(_impl_.guildcreate_){nullptr}
    , decltype(_impl_.guildapply_){nullptr}
    , decltype(_impl_.guildhome_){nullptr}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.guildapprove_){nullptr}
    , decltype(_impl_.guildrole_){nullptr}
    , decltype(_impl_.guildmodify_){nullptr}
    , decltype(_impl_.guildkickoff_){nullptr}
    , decltype(_impl_.guilddismiss_){nullptr}
    , decltype(_impl_.guildexit_){nullptr}
    , decltype(_impl_.guildchat_){nullptr}
    , decltype(_impl_.guildlist_){nullptr}
    , decltype(_impl_.guildrecommendplayers_){nullptr}
    , decltype(_impl_.guildinvitelist_){nullptr}
    , decltype(_impl_.guildinvite_){nullptr}
    , decltype(_impl_.guildresign_){nullptr}
    , decltype(_impl_.guildrejectinvite_){nullptr}
    , decltype(_impl_.getvngcommentaward_){nullptr}
    , decltype(_impl_.levelupchest_){nullptr}
    , decltype(_impl_.watchad_){nullptr}
    , decltype(_impl_.pstournamentroom_){nullptr}
    , decltype(_impl_.getadcumulateaward_){nullptr}
    , decltype(_impl_.setmessengerpos_){nullptr}
    , decltype(_impl_.updateantiaddictiontime_){nullptr}
    , decltype(_impl_.cancelreconnect_){nullptr}
    , decltype(_impl_.reconnect_){nullptr}
    , decltype(_impl_.passthrough_){nullptr}
    , decltype(_impl_.visitplayer_){nullptr}
    , decltype(_impl_.leavegameearly_){nullptr}
    , decltype(_impl_.gdcommonbin_){nullptr}
    , decltype(_impl_.gdbindata_){nullptr}
    , decltype(_impl_.autobattleop_){nullptr}
    , decltype(_impl_.restrictuser_){nullptr}
    , decltype(_impl_.equipselectrate_){nullptr}
    , decltype(_impl_.reportabsent_){nullptr}
    , decltype(_impl_.recommendweek_){nullptr}
    , decltype(_impl_.recommendofficial_){nullptr}
    , decltype(_impl_.recommendlatest_){nullptr}
    , decltype(_impl_.recommendhistory_){nullptr}
    , decltype(_impl_.recommendcollect_){nullptr}
    , decltype(_impl_.recommendset_){nullptr}
    , decltype(_impl_.recommendgetcollection_){nullptr}
    , decltype(_impl_.recommendequip_){nullptr}
    , decltype(_impl_.logincancel_){nullptr}
    , decltype(_impl_.convertdebris_){nullptr}
    , decltype(_impl_.protectioncard_){nullptr}
    , decltype(_impl_.usepassportcard_){nullptr}
    , decltype(_impl_.setmedal_){nullptr}
    , decltype(_impl_.unsetmedal_){nullptr}
    , decltype(_impl_.playermedals_){nullptr}
    , decltype(_impl_.updatehotdot_){nullptr}
    , decltype(_impl_.queryhotdot_){nullptr}
    , decltype(_impl_.setcache_){nullptr}
    , decltype(_impl_.getcache_){nullptr}
    , decltype(_impl_.buychallengecount_){nullptr}
    , decltype(_impl_.getpverank_){nullptr}
    , decltype(_impl_.authaccount_){nullptr}
    , decltype(_impl_.unbindaccount_){nullptr}
    , decltype(_impl_.bagtoitem_){nullptr}
    , decltype(_impl_.identifyitem_){nullptr}
    , decltype(_impl_.insetitemaffix_){nullptr}
    , decltype(_impl_.unsetitemaffix_){nullptr}
    , decltype(_impl_.setdefaultattributes_){nullptr}
    , decltype(_impl_.checkcancel_){nullptr}
    , decltype(_impl_.cancelaccount_){nullptr}
    , decltype(_impl_.oauthapp_){nullptr}
    , decltype(_impl_.getselfnumrankdata_){nullptr}
    , decltype(_impl_.updatecardgroup_){nullptr}
    , decltype(_impl_.updatecardgroupname_){nullptr}
    , decltype(_impl_.buypvebuff_){nullptr}
    , decltype(_impl_.setcardgroup_){nullptr}
    , decltype(_impl_.buypvechesstemplate_){nullptr}
    , decltype(_impl_.pveunlockchesstemplate_){nullptr}
    , decltype(_impl_.pvesetteamdebuff_){nullptr}
    , decltype(_impl_.chosecardgroup_){nullptr}
    , decltype(_impl_.removeovertimebuff_){nullptr}
    , decltype(_impl_.updatenewcardgroupsign_){nullptr}
    , decltype(_impl_.tdgetonhookaward_){nullptr}
    , decltype(_impl_.tddraw_){nullptr}
    , decltype(_impl_.tdbuycard_){nullptr}
    , decltype(_impl_.tdsetcardgroup_){nullptr}
    , decltype(_impl_.tdlevelup_){nullptr}
    , decltype(_impl_.tdequip_){nullptr}
    , decltype(_impl_.mentorupdatesetting_){nullptr}
    , decltype(_impl_.mentorinvite_){nullptr}
    , decltype(_impl_.mentorconfirminvite_){nullptr}
    , decltype(_impl_.mentorrecommendlist_){nullptr}
    , decltype(_impl_.mentorgettaskaward_){nullptr}
    , decltype(_impl_.mentorgraduate_){nullptr}
    , decltype(_impl_.mentorrelieverelation_){nullptr}
    , decltype(_impl_.getmentorinfo_){nullptr}
    , decltype(_impl_.mentorgetinvitemsg_){nullptr}
    , decltype(_impl_.updatecardgroupbetter_){nullptr}
    , decltype(_impl_.updatecardgroupsetting_){nullptr}
    , decltype(_impl_.setcontent_){nullptr}
    , decltype(_impl_.getbalance_){nullptr}
    , decltype(_impl_.rechargebalance_){nullptr}
    , decltype(_impl_.withdrawbalance_){nullptr}
    , decltype(_impl_.personalrecommendmall_){nullptr}
    , decltype(_impl_.getmedalchestaward_){nullptr}
    , decltype(_impl_.setitemautouse_){nullptr}
    , decltype(_impl_.seq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heart()) {
    _this->_impl_.heart_ = new ::msg::CSReqHeart(*from._impl_.heart_);
  }
  if (from._internal_has_login()) {
    _this->_impl_.login_ = new ::msg::CSReqLogin(*from._impl_.login_);
  }
  if (from._internal_has_versioncheck()) {
    _this->_impl_.versioncheck_ = new ::msg::CSReqVersionCheck(*from._impl_.versioncheck_);
  }
  if (from._internal_has_resourceversioncheck()) {
    _this->_impl_.resourceversioncheck_ = new ::msg::CSReqResourceVersionCheck(*from._impl_.resourceversioncheck_);
  }
  if (from._internal_has_applyhallserver()) {
    _this->_impl_.applyhallserver_ = new ::msg::CSReqApplyHallServer(*from._impl_.applyhallserver_);
  }
  if (from._internal_has_getnumrank()) {
    _this->_impl_.getnumrank_ = new ::msg::CSReqGetNumRank(*from._impl_.getnumrank_);
  }
  if (from._internal_has_worldchat()) {
    _this->_impl_.worldchat_ = new ::msg::CSReqWorldChat(*from._impl_.worldchat_);
  }
  if (from._internal_has_playersbaseinfo()) {
    _this->_impl_.playersbaseinfo_ = new ::msg::CSReqPlayersBaseInfo(*from._impl_.playersbaseinfo_);
  }
  if (from._internal_has_playerdetailinfo()) {
    _this->_impl_.playerdetailinfo_ = new ::msg::CSReqPlayerDetailInfo(*from._impl_.playerdetailinfo_);
  }
  if (from._internal_has_readmail()) {
    _this->_impl_.readmail_ = new ::msg::CSReqReadMail(*from._impl_.readmail_);
  }
  if (from._internal_has_getmailaward()) {
    _this->_impl_.getmailaward_ = new ::msg::CSReqGetMailAward(*from._impl_.getmailaward_);
  }
  if (from._internal_has_buyegg()) {
    _this->_impl_.buyegg_ = new ::msg::CSReqBuyEgg(*from._impl_.buyegg_);
  }
  if (from._internal_has_usernameset()) {
    _this->_impl_.usernameset_ = new ::msg::CSReqUserNameSet(*from._impl_.usernameset_);
  }
  if (from._internal_has_usernamerandom()) {
    _this->_impl_.usernamerandom_ = new ::msg::CSReqUserNameRandom(*from._impl_.usernamerandom_);
  }
  if (from._internal_has_headpicset()) {
    _this->_impl_.headpicset_ = new ::msg::CSReqHeadPicSet(*from._impl_.headpicset_);
  }
  if (from._internal_has_pvp()) {
    _this->_impl_.pvp_ = new ::msg::CSReqPvp(*from._impl_.pvp_);
  }
  if (from._internal_has_dresschessplayer()) {
    _this->_impl_.dresschessplayer_ = new ::msg::CSReqDressChessPlayer(*from._impl_.dresschessplayer_);
  }
  if (from._internal_has_dressscene()) {
    _this->_impl_.dressscene_ = new ::msg::CSReqDressScene(*from._impl_.dressscene_);
  }
  if (from._internal_has_pvplogin()) {
    _this->_impl_.pvplogin_ = new ::msg::CSReqPvpLogin(*from._impl_.pvplogin_);
  }
  if (from._internal_has_pvpend()) {
    _this->_impl_.pvpend_ = new ::msg::CSReqPvpEnd(*from._impl_.pvpend_);
  }
  if (from._internal_has_playerfinish()) {
    _this->_impl_.playerfinish_ = new ::msg::CSReqPlayerFinish(*from._impl_.playerfinish_);
  }
  if (from._internal_has_playerquit()) {
    _this->_impl_.playerquit_ = new ::msg::CSReqPlayerQuit(*from._impl_.playerquit_);
  }
  if (from._internal_has_sellitem()) {
    _this->_impl_.sellitem_ = new ::msg::CSReqSellItem(*from._impl_.sellitem_);
  }
  if (from._internal_has_getevalaward()) {
    _this->_impl_.getevalaward_ = new ::msg::CSReqGetEvalAward(*from._impl_.getevalaward_);
  }
  if (from._internal_has_usechessplayer()) {
    _this->_impl_.usechessplayer_ = new ::msg::CSReqUseChessPlayer(*from._impl_.usechessplayer_);
  }
  if (from._internal_has_guidreport()) {
    _this->_impl_.guidreport_ = new ::msg::CSReqGuidReport(*from._impl_.guidreport_);
  }
  if (from._internal_has_getcodeaward()) {
    _this->_impl_.getcodeaward_ = new ::msg::CSReqGetCodeAward(*from._impl_.getcodeaward_);
  }
  if (from._internal_has_roundreport()) {
    _this->_impl_.roundreport_ = new ::msg::CSReqRoundReport(*from._impl_.roundreport_);
  }
  if (from._internal_has_loadingprogress()) {
    _this->_impl_.loadingprogress_ = new ::msg::CSReqLoadingProgress(*from._impl_.loadingprogress_);
  }
  if (from._internal_has_pvpchat()) {
    _this->_impl_.pvpchat_ = new ::msg::CSReqPvpChat(*from._impl_.pvpchat_);
  }
  if (from._internal_has_chesscombine()) {
    _this->_impl_.chesscombine_ = new ::msg::CSReqChessCombine(*from._impl_.chesscombine_);
  }
  if (from._internal_has_expose()) {
    _this->_impl_.expose_ = new ::msg::CSReqExpose(*from._impl_.expose_);
  }
  if (from._internal_has_applyorderid()) {
    _this->_impl_.applyorderid_ = new ::msg::CSReqApplyOrderId(*from._impl_.applyorderid_);
  }
  if (from._internal_has_reportorderinfo()) {
    _this->_impl_.reportorderinfo_ = new ::msg::CSReqReportOrderInfo(*from._impl_.reportorderinfo_);
  }
  if (from._internal_has_setitem()) {
    _this->_impl_.setitem_ = new ::msg::CSReqSetItem(*from._impl_.setitem_);
  }
  if (from._internal_has_unsetitem()) {
    _this->_impl_.unsetitem_ = new ::msg::CSReqUnsetItem(*from._impl_.unsetitem_);
  }
  if (from._internal_has_randomitem()) {
    _this->_impl_.randomitem_ = new ::msg::CSReqRandomItem(*from._impl_.randomitem_);
  }
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::msg::CSReqChat(*from._impl_.chat_);
  }
  if (from._internal_has_setchessplayer()) {
    _this->_impl_.setchessplayer_ = new ::msg::CSReqSetChessPlayer(*from._impl_.setchessplayer_);
  }
  if (from._internal_has_unsetchessplayer()) {
    _this->_impl_.unsetchessplayer_ = new ::msg::CSReqUnsetChessPlayer(*from._impl_.unsetchessplayer_);
  }
  if (from._internal_has_getfanslist()) {
    _this->_impl_.getfanslist_ = new ::msg::CSReqGetFansList(*from._impl_.getfanslist_);
  }
  if (from._internal_has_followplayer()) {
    _this->_impl_.followplayer_ = new ::msg::CSReqFollowPlayer(*from._impl_.followplayer_);
  }
  if (from._internal_has_unfollowplayer()) {
    _this->_impl_.unfollowplayer_ = new ::msg::CSReqUnfollowPlayer(*from._impl_.unfollowplayer_);
  }
  if (from._internal_has_playersstatusinfo()) {
    _this->_impl_.playersstatusinfo_ = new ::msg::CSReqPlayersStatusInfo(*from._impl_.playersstatusinfo_);
  }
  if (from._internal_has_invitejointeam()) {
    _this->_impl_.invitejointeam_ = new ::msg::CSReqInviteJoinTeam(*from._impl_.invitejointeam_);
  }
  if (from._internal_has_jointeam()) {
    _this->_impl_.jointeam_ = new ::msg::CSReqJoinTeam(*from._impl_.jointeam_);
  }
  if (from._internal_has_kickoffteamplayer()) {
    _this->_impl_.kickoffteamplayer_ = new ::msg::CSReqKickOffTeamPlayer(*from._impl_.kickoffteamplayer_);
  }
  if (from._internal_has_teammsg()) {
    _this->_impl_.teammsg_ = new ::msg::CSReqTeamMsg(*from._impl_.teammsg_);
  }
  if (from._internal_has_teamready()) {
    _this->_impl_.teamready_ = new ::msg::CSReqTeamReady(*from._impl_.teamready_);
  }
  if (from._internal_has_reportpayresponse()) {
    _this->_impl_.reportpayresponse_ = new ::msg::CSReqReportPayResponse(*from._impl_.reportpayresponse_);
  }
  if (from._internal_has_rejectjointeam()) {
    _this->_impl_.rejectjointeam_ = new ::msg::CSReqRejectJoinTeam(*from._impl_.rejectjointeam_);
  }
  if (from._internal_has_shieldchat()) {
    _this->_impl_.shieldchat_ = new ::msg::CSReqShieldChat(*from._impl_.shieldchat_);
  }
  if (from._internal_has_buypassportlevel()) {
    _this->_impl_.buypassportlevel_ = new ::msg::CSReqBuyPassportLevel(*from._impl_.buypassportlevel_);
  }
  if (from._internal_has_upgradepassport()) {
    _this->_impl_.upgradepassport_ = new ::msg::CSReqUpgradePassport(*from._impl_.upgradepassport_);
  }
  if (from._internal_has_getpassportlevelaward()) {
    _this->_impl_.getpassportlevelaward_ = new ::msg::CSReqGetPassportLevelAward(*from._impl_.getpassportlevelaward_);
  }
  if (from._internal_has_getpassporttaskaward()) {
    _this->_impl_.getpassporttaskaward_ = new ::msg::CSReqGetPassportTaskAward(*from._impl_.getpassporttaskaward_);
  }
  if (from._internal_has_telbook()) {
    _this->_impl_.telbook_ = new ::msg::CSReqTelBook(*from._impl_.telbook_);
  }
  if (from._internal_has_activatepassport()) {
    _this->_impl_.activatepassport_ = new ::msg::CSReqActivatePassport(*from._impl_.activatepassport_);
  }
  if (from._internal_has_rankseasoneval()) {
    _this->_impl_.rankseasoneval_ = new ::msg::CSReqRankSeasonEval(*from._impl_.rankseasoneval_);
  }
  if (from._internal_has_bindaccount()) {
    _this->_impl_.bindaccount_ = new ::msg::CSReqBindAccount(*from._impl_.bindaccount_);
  }
  if (from._internal_has_incadsshowcount()) {
    _this->_impl_.incadsshowcount_ = new ::msg::CSReqIncAdShowCount(*from._impl_.incadsshowcount_);
  }
  if (from._internal_has_usebonuscard()) {
    _this->_impl_.usebonuscard_ = new ::msg::CSReqUseBonusCard(*from._impl_.usebonuscard_);
  }
  if (from._internal_has_getseasonaward()) {
    _this->_impl_.getseasonaward_ = new ::msg::CSReqGetSeasonAward(*from._impl_.getseasonaward_);
  }
  if (from._internal_has_getalphaactivityaward()) {
    _this->_impl_.getalphaactivityaward_ = new ::msg::CSReqGetAlphaActivityAward(*from._impl_.getalphaactivityaward_);
  }
  if (from._internal_has_getlanguagedata()) {
    _this->_impl_.getlanguagedata_ = new ::msg::CSReqGetLanguageData(*from._impl_.getlanguagedata_);
  }
  if (from._internal_has_getactivityaward()) {
    _this->_impl_.getactivityaward_ = new ::msg::CSReqGetActivityAward(*from._impl_.getactivityaward_);
  }
  if (from._internal_has_getactivitydata()) {
    _this->_impl_.getactivitydata_ = new ::msg::CSReqGetActivityData(*from._impl_.getactivitydata_);
  }
  if (from._internal_has_sendsms()) {
    _this->_impl_.sendsms_ = new ::msg::CSReqSendSms(*from._impl_.sendsms_);
  }
  if (from._internal_has_getmeleeaward()) {
    _this->_impl_.getmeleeaward_ = new ::msg::CSReqGetMeleeAward(*from._impl_.getmeleeaward_);
  }
  if (from._internal_has_addaitoteam()) {
    _this->_impl_.addaitoteam_ = new ::msg::CSReqAddAiToTeam(*from._impl_.addaitoteam_);
  }
  if (from._internal_has_share()) {
    _this->_impl_.share_ = new ::msg::CSReqShare(*from._impl_.share_);
  }
  if (from._internal_has_skipinterface()) {
    _this->_impl_.skipinterface_ = new ::msg::CSReqSkipInterface(*from._impl_.skipinterface_);
  }
  if (from._internal_has_teamgame()) {
    _this->_impl_.teamgame_ = new ::msg::CSReqTeamGame(*from._impl_.teamgame_);
  }
  if (from._internal_has_setteammode()) {
    _this->_impl_.setteammode_ = new ::msg::CSReqSetTeamMode(*from._impl_.setteammode_);
  }
  if (from._internal_has_historypvpshowpermission()) {
    _this->_impl_.historypvpshowpermission_ = new ::msg::CSReqSetHistoryPvpShowPermission(*from._impl_.historypvpshowpermission_);
  }
  if (from._internal_has_searchteam()) {
    _this->_impl_.searchteam_ = new ::msg::CSReqSearchTeam(*from._impl_.searchteam_);
  }
  if (from._internal_has_applychat()) {
    _this->_impl_.applychat_ = new ::msg::CSReqApplyChat(*from._impl_.applychat_);
  }
  if (from._internal_has_chatlogin()) {
    _this->_impl_.chatlogin_ = new ::msg::CSReqChatLogin(*from._impl_.chatlogin_);
  }
  if (from._internal_has_probenetdelay()) {
    _this->_impl_.probenetdelay_ = new ::msg::CSReqProbeNetDelay(*from._impl_.probenetdelay_);
  }
  if (from._internal_has_geteggs()) {
    _this->_impl_.geteggs_ = new ::msg::CSReqGetEggs(*from._impl_.geteggs_);
  }
  if (from._internal_has_buygoods()) {
    _this->_impl_.buygoods_ = new ::msg::CSReqBuyGoods(*from._impl_.buygoods_);
  }
  if (from._internal_has_exchangepassportgoods()) {
    _this->_impl_.exchangepassportgoods_ = new ::msg::CSReqExchangePassportGoods(*from._impl_.exchangepassportgoods_);
  }
  if (from._internal_has_usepassporttaskcard()) {
    _this->_impl_.usepassporttaskcard_ = new ::msg::CSReqUsePassportTaskCard(*from._impl_.usepassporttaskcard_);
  }
  if (from._internal_has_openrandchest()) {
    _this->_impl_.openrandchest_ = new ::msg::CSReqOpenRandChest(*from._impl_.openrandchest_);
  }
  if (from._internal_has_egglottery()) {
    _this->_impl_.egglottery_ = new ::msg::CSReqEggLottery(*from._impl_.egglottery_);
  }
  if (from._internal_has_querydiamondbalance()) {
    _this->_impl_.querydiamondbalance_ = new ::msg::CSReqQueryDiamondBalance(*from._impl_.querydiamondbalance_);
  }
  if (from._internal_has_useitem()) {
    _this->_impl_.useitem_ = new ::msg::CSReqUseItem(*from._impl_.useitem_);
  }
  if (from._internal_has_useexperiencecard()) {
    _this->_impl_.useexperiencecard_ = new ::msg::CSReqUseExperienceCard(*from._impl_.useexperiencecard_);
  }
  if (from._internal_has_randtargetitem()) {
    _this->_impl_.randtargetitem_ = new ::msg::CSReqRandTargetItem(*from._impl_.randtargetitem_);
  }
  if (from._internal_has_addblacklist()) {
    _this->_impl_.addblacklist_ = new ::msg::CSReqAddBlacklist(*from._impl_.addblacklist_);
  }
  if (from._internal_has_removeblacklist()) {
    _this->_impl_.removeblacklist_ = new ::msg::CSReqRemoveBlacklist(*from._impl_.removeblacklist_);
  }
  if (from._internal_has_reportplayerbirth()) {
    _this->_impl_.reportplayerbirth_ = new ::msg::CSReqReportPlayerBirth(*from._impl_.reportplayerbirth_);
  }
  if (from._internal_has_reportinfoinput()) {
    _this->_impl_.reportinfoinput_ = new ::msg::CSReqReportInfoInput(*from._impl_.reportinfoinput_);
  }
  if (from._internal_has_sendverificationcode()) {
    _this->_impl_.sendverificationcode_ = new ::msg::CSReqSendVerificationCode(*from._impl_.sendverificationcode_);
  }
  if (from._internal_has_bindphonenumber()) {
    _this->_impl_.bindphonenumber_ = new ::msg::CSReqBindPhoneNumber(*from._impl_.bindphonenumber_);
  }
  if (from._internal_has_worldinvite()) {
    _this->_impl_.worldinvite_ = new ::msg::CSReqWorldInvite(*from._impl_.worldinvite_);
  }
  if (from._internal_has_removeexpireitem()) {
    _this->_impl_.removeexpireitem_ = new ::msg::CSReqRemoveExpireItem(*from._impl_.removeexpireitem_);
  }
  if (from._internal_has_getmallgoods()) {
    _this->_impl_.getmallgoods_ = new ::msg::CSReqGetMallGoods(*from._impl_.getmallgoods_);
  }
  if (from._internal_has_buymallgoods()) {
    _this->_impl_.buymallgoods_ = new ::msg::CSReqBuyMallGoods(*from._impl_.buymallgoods_);
  }
  if (from._internal_has_bindsharingcode()) {
    _this->_impl_.bindsharingcode_ = new ::msg::CSReqBindSharingCode(*from._impl_.bindsharingcode_);
  }
  if (from._internal_has_wxblessbag()) {
    _this->_impl_.wxblessbag_ = new ::msg::CSReqWXBlessBag(*from._impl_.wxblessbag_);
  }
  if (from._internal_has_updatefriendsingame()) {
    _this->_impl_.updatefriendsingame_ = new ::msg::CSReqUpdateFriendsInGame(*from._impl_.updatefriendsingame_);
  }
  if (from._internal_has_sharereward()) {
    _this->_impl_.sharereward_ = new ::msg::CSReqShareReward(*from._impl_.sharereward_);
  }
  if (from._internal_has_allfightinfo()) {
    _this->_impl_.allfightinfo_ = new ::msg::CSReqAllFightInfo(*from._impl_.allfightinfo_);
  }
  if (from._internal_has_getoldplayer()) {
    _this->_impl_.getoldplayer_ = new ::msg::CSReqGetOldPlayer(*from._impl_.getoldplayer_);
  }
  if (from._internal_has_bindoldplayer()) {
    _this->_impl_.bindoldplayer_ = new ::msg::CSReqBindOldPlayer(*from._impl_.bindoldplayer_);
  }
  if (from._internal_has_sendverificationcodewithcheckredis()) {
    _this->_impl_.sendverificationcodewithcheckredis_ = new ::msg::CSReqSendVerificationCodeWithCheckRedis(*from._impl_.sendverificationcodewithcheckredis_);
  }
  if (from._internal_has_reportsetting()) {
    _this->_impl_.reportsetting_ = new ::msg::CSReqReportSetting(*from._impl_.reportsetting_);
  }
  if (from._internal_has_antidata()) {
    _this->_impl_.antidata_ = new ::msg::CSReqAntiData(*from._impl_.antidata_);
  }
  if (from._internal_has_tlogdata()) {
    _this->_impl_.tlogdata_ = new ::msg::CSReqTlogData(*from._impl_.tlogdata_);
  }
  if (from._internal_has_daysign()) {
    _this->_impl_.daysign_ = new ::msg::CSReqDaySign(*from._impl_.daysign_);
  }
  if (from._internal_has_dayfitavoid()) {
    _this->_impl_.dayfitavoid_ = new ::msg::CSReqDayFitAvoid(*from._impl_.dayfitavoid_);
  }
  if (from._internal_has_sharecountaward()) {
    _this->_impl_.sharecountaward_ = new ::msg::CSReqShareCountAward(*from._impl_.sharecountaward_);
  }
  if (from._internal_has_actitemexch()) {
    _this->_impl_.actitemexch_ = new ::msg::CSReqActItemExch(*from._impl_.actitemexch_);
  }
  if (from._internal_has_realationstar()) {
    _this->_impl_.realationstar_ = new ::msg::CSReqRealationStar(*from._impl_.realationstar_);
  }
  if (from._internal_has_getrealationstarinvitesucc()) {
    _this->_impl_.getrealationstarinvitesucc_ = new ::msg::CSReqGetRealationStarInviteSucc(*from._impl_.getrealationstarinvitesucc_);
  }
  if (from._internal_has_getrealationstar()) {
    _this->_impl_.getrealationstar_ = new ::msg::CSReqGetRealationStar(*from._impl_.getrealationstar_);
  }
  if (from._internal_has_reqactrecord()) {
    _this->_impl_.reqactrecord_ = new ::msg::CSReqGetActRecord(*from._impl_.reqactrecord_);
  }
  if (from._internal_has_joinvoiceteam()) {
    _this->_impl_.joinvoiceteam_ = new ::msg::CSReqJoinVoiceTeam(*from._impl_.joinvoiceteam_);
  }
  if (from._internal_has_joinvoicepvp()) {
    _this->_impl_.joinvoicepvp_ = new ::msg::CSReqJoinVoicePvp(*from._impl_.joinvoicepvp_);
  }
  if (from._internal_has_joinvoicecamp()) {
    _this->_impl_.joinvoicecamp_ = new ::msg::CSReqJoinVoiceCamp(*from._impl_.joinvoicecamp_);
  }
  if (from._internal_has_usercountryset()) {
    _this->_impl_.usercountryset_ = new ::msg::CSReqUserCountrySet(*from._impl_.usercountryset_);
  }
  if (from._internal_has_offlineinvitejointeam()) {
    _this->_impl_.offlineinvitejointeam_ = new ::msg::CSReqOfflineInviteJoinTeam(*from._impl_.offlineinvitejointeam_);
  }
  if (from._internal_has_observe()) {
    _this->_impl_.observe_ = new ::msg::CSReqObserve(*from._impl_.observe_);
  }
  if (from._internal_has_getrecommendpvp()) {
    _this->_impl_.getrecommendpvp_ = new ::msg::CSReqGetRecommendPvp(*from._impl_.getrecommendpvp_);
  }
  if (from._internal_has_observelogin()) {
    _this->_impl_.observelogin_ = new ::msg::CSReqObserveLogin(*from._impl_.observelogin_);
  }
  if (from._internal_has_quitobserve()) {
    _this->_impl_.quitobserve_ = new ::msg::CSReqQuitObserve(*from._impl_.quitobserve_);
  }
  if (from._internal_has_getobserveinfo()) {
    _this->_impl_.getobserveinfo_ = new ::msg::CSReqGetObserveInfo(*from._impl_.getobserveinfo_);
  }
  if (from._internal_has_freeflow()) {
    _this->_impl_.freeflow_ = new ::msg::CSReqFreeFlow(*from._impl_.freeflow_);
  }
  if (from._internal_has_setpushtoken()) {
    _this->_impl_.setpushtoken_ = new ::msg::CSReqSetPushToken(*from._impl_.setpushtoken_);
  }
  if (from._internal_has_tlogevent()) {
    _this->_impl_.tlogevent_ = new ::msg::CSReqTlogEvent(*from._impl_.tlogevent_);
  }
  if (from._internal_has_wxvvipaward()) {
    _this->_impl_.wxvvipaward_ = new ::msg::CSReqWxVVipAward(*from._impl_.wxvvipaward_);
  }
  if (from._internal_has_relationstarwx()) {
    _this->_impl_.relationstarwx_ = new ::msg::CSReqGetRelationStarWX(*from._impl_.relationstarwx_);
  }
  if (from._internal_has_sendwxredpacket()) {
    _this->_impl_.sendwxredpacket_ = new ::msg::CSReqSendWxRedPacket(*from._impl_.sendwxredpacket_);
  }
  if (from._internal_has_recvwxredpacket()) {
    _this->_impl_.recvwxredpacket_ = new ::msg::CSReqRecvWxRedPacket(*from._impl_.recvwxredpacket_);
  }
  if (from._internal_has_wxredpktlike()) {
    _this->_impl_.wxredpktlike_ = new ::msg::CSReqWxRedPktLike(*from._impl_.wxredpktlike_);
  }
  if (from._internal_has_wxredpktrank()) {
    _this->_impl_.wxredpktrank_ = new ::msg::CSReqWxRedPktRank(*from._impl_.wxredpktrank_);
  }
  if (from._internal_has_setobserveprivilege()) {
    _this->_impl_.setobserveprivilege_ = new ::msg::CSReqObservePrivilege(*from._impl_.setobserveprivilege_);
  }
  if (from._internal_has_presetfastchat()) {
    _this->_impl_.presetfastchat_ = new ::msg::CSReqPresetFastChat(*from._impl_.presetfastchat_);
  }
  if (from._internal_has_changeslotteam()) {
    _this->_impl_.changeslotteam_ = new ::msg::CSReqChangeSlotTeam(*from._impl_.changeslotteam_);
  }
  if (from._internal_has_changesubmodeteam()) {
    _this->_impl_.changesubmodeteam_ = new ::msg::CSReqChangeSubModeTeam(*from._impl_.changesubmodeteam_);
  }
  if (from._internal_has_confirmchangeslotteam()) {
    _this->_impl_.confirmchangeslotteam_ = new ::msg::CSReqConfirmChangeSlotTeam(*from._impl_.confirmchangeslotteam_);
  }
  if (from._internal_has_pvproundend()) {
    _this->_impl_.pvproundend_ = new ::msg::CSReqPvpRoundEnd(*from._impl_.pvproundend_);
  }
  if (from._internal_has_observechatlogin()) {
    _this->_impl_.observechatlogin_ = new ::msg::CSReqObserveChatLogin(*from._impl_.observechatlogin_);
  }
  if (from._internal_has_pvpconfirm()) {
    _this->_impl_.pvpconfirm_ = new ::msg::CSReqPvpConfirm(*from._impl_.pvpconfirm_);
  }
  if (from._internal_has_activitypicshare()) {
    _this->_impl_.activitypicshare_ = new ::msg::CSReqActivityPicShare(*from._impl_.activitypicshare_);
  }
  if (from._internal_has_bindoldbusinessplayer()) {
    _this->_impl_.bindoldbusinessplayer_ = new ::msg::CSReqBindOldBusinessPlayer(*from._impl_.bindoldbusinessplayer_);
  }
  if (from._internal_has_translate()) {
    _this->_impl_.translate_ = new ::msg::CSReqTranslate(*from._impl_.translate_);
  }
  if (from._internal_has_submitquestionnaire()) {
    _this->_impl_.submitquestionnaire_ = new ::msg::CSReqSubmitQuestionnaire(*from._impl_.submitquestionnaire_);
  }
  if (from._internal_has_cancelchangeslot()) {
    _this->_impl_.cancelchangeslot_ = new ::msg::CSReqCancelChangeSlot(*from._impl_.cancelchangeslot_);
  }
  if (from._internal_has_setchessskin()) {
    _this->_impl_.setchessskin_ = new ::msg::CSReqSetChessSkin(*from._impl_.setchessskin_);
  }
  if (from._internal_has_unsetchessskin()) {
    _this->_impl_.unsetchessskin_ = new ::msg::CSReqUnsetChessSkin(*from._impl_.unsetchessskin_);
  }
  if (from._internal_has_compose()) {
    _this->_impl_.compose_ = new ::msg::CSReqCompose(*from._impl_.compose_);
  }
  if (from._internal_has_offhelpreddot()) {
    _this->_impl_.offhelpreddot_ = new ::msg::CSReqOffHelpReddot(*from._impl_.offhelpreddot_);
  }
  if (from._internal_has_video()) {
    _this->_impl_.video_ = new ::msg::CSReqVideo(*from._impl_.video_);
  }
  if (from._internal_has_changelanguage()) {
    _this->_impl_.changelanguage_ = new ::msg::CSReqChangeLanguage(*from._impl_.changelanguage_);
  }
  if (from._internal_has_videoplay()) {
    _this->_impl_.videoplay_ = new ::msg::CSReqReportVideoPlay(*from._impl_.videoplay_);
  }
  if (from._internal_has_setprovince()) {
    _this->_impl_.setprovince_ = new ::msg::CSReqSetProvince(*from._impl_.setprovince_);
  }
  if (from._internal_has_longyuanvoice()) {
    _this->_impl_.longyuanvoice_ = new ::msg::CSReqLongyuanVoice(*from._impl_.longyuanvoice_);
  }
  if (from._internal_has_enrolltournament()) {
    _this->_impl_.enrolltournament_ = new ::msg::CSReqEnrollTournament(*from._impl_.enrolltournament_);
  }
  if (from._internal_has_jointournamentroom()) {
    _this->_impl_.jointournamentroom_ = new ::msg::CSReqJoinTournamentRoom(*from._impl_.jointournamentroom_);
  }
  if (from._internal_has_tournamentpointaward()) {
    _this->_impl_.tournamentpointaward_ = new ::msg::CSReqTournamentPointAward(*from._impl_.tournamentpointaward_);
  }
  if (from._internal_has_dealwebmail()) {
    _this->_impl_.dealwebmail_ = new ::msg::CSReqDealWebMail(*from._impl_.dealwebmail_);
  }
  if (from._internal_has_getenrollplayers()) {
    _this->_impl_.getenrollplayers_ = new ::msg::CSReqGetEnrollPlayers(*from._impl_.getenrollplayers_);
  }
  if (from._internal_has_challengeagain()) {
    _this->_impl_.challengeagain_ = new ::msg::CSReqChallengeAgain(*from._impl_.challengeagain_);
  }
  if (from._internal_has_historychat()) {
    _this->_impl_.historychat_ = new ::msg::CSReqHistoryChatMsg(*from._impl_.historychat_);
  }
  if (from._internal_has_setfriendinvisible()) {
    _this->_impl_.setfriendinvisible_ = new ::msg::CSReqSetFriendInvisible(*from._impl_.setfriendinvisible_);
  }
  if (from._internal_has_getobserveaward()) {
    _this->_impl_.getobserveaward_ = new ::msg::CSReqGetObserveAward(*from._impl_.getobserveaward_);
  }
  if (from._internal_has_inviteobserve()) {
    _this->_impl_.inviteobserve_ = new ::msg::CSReqInviteObserve(*from._impl_.inviteobserve_);
  }
  if (from._internal_has_rejectobserve()) {
    _this->_impl_.rejectobserve_ = new ::msg::CSReqRejectObserve(*from._impl_.rejectobserve_);
  }
  if (from._internal_has_gettxplayer()) {
    _this->_impl_.gettxplayer_ = new ::msg::CSReqGetTxPlayer(*from._impl_.gettxplayer_);
  }
  if (from._internal_has_choosetxplayer()) {
    _this->_impl_.choosetxplayer_ = new ::msg::CSReqChooseTxPlayer(*from._impl_.choosetxplayer_);
  }
  if (from._internal_has_getthirdpvpinfo()) {
    _this->_impl_.getthirdpvpinfo_ = new ::msg::CSReqGetThirdPvpInfo(*from._impl_.getthirdpvpinfo_);
  }
  if (from._internal_has_markplayerguide()) {
    _this->_impl_.markplayerguide_ = new ::msg::CSReqMarkPlayerGuide(*from._impl_.markplayerguide_);
  }
  if (from._internal_has_markchessskinclicked()) {
    _this->_impl_.markchessskinclicked_ = new ::msg::CSReqMarkChessSkinClicked(*from._impl_.markchessskinclicked_);
  }
  if (from._internal_has_recruitinviteplayer()) {
    _this->_impl_.recruitinviteplayer_ = new ::msg::CSReqRecruitInvitePlayer(*from._impl_.recruitinviteplayer_);
  }
  if (from._internal_has_recruitbindinviter()) {
    _this->_impl_.recruitbindinviter_ = new ::msg::CSReqRecruitBindInviter(*from._impl_.recruitbindinviter_);
  }
  if (from._internal_has_queryps4entitlements()) {
    _this->_impl_.queryps4entitlements_ = new ::msg::CSReqQueryPs4Entitlements(*from._impl_.queryps4entitlements_);
  }
  if (from._internal_has_actdaysign()) {
    _this->_impl_.actdaysign_ = new ::msg::CSReqActDaySign(*from._impl_.actdaysign_);
  }
  if (from._internal_has_havethirdpvpinfo()) {
    _this->_impl_.havethirdpvpinfo_ = new ::msg::CSReqHaveThirdPvp(*from._impl_.havethirdpvpinfo_);
  }
  if (from._internal_has_activitymall()) {
    _this->_impl_.activitymall_ = new ::msg::CSReqActivityMall(*from._impl_.activitymall_);
  }
  if (from._internal_has_psonly()) {
    _this->_impl_.psonly_ = new ::msg::CSReqPsOnly(*from._impl_.psonly_);
  }
  if (from._internal_has_changechanneltype()) {
    _this->_impl_.changechanneltype_ = new ::msg::CSReqChangeChannelType(*from._impl_.changechanneltype_);
  }
  if (from._internal_has_customcardopt()) {
    _this->_impl_.customcardopt_ = new ::msg::CSReqCustomCardOpt(*from._impl_.customcardopt_);
  }
  if (from._internal_has_staticsreport()) {
    _this->_impl_.staticsreport_ = new ::msg::CSReqStaticsReport(*from._impl_.staticsreport_);
  }
  if (from._internal_has_championhistory()) {
    _this->_impl_.championhistory_ = new ::msg::CSReqChampionHistory(*from._impl_.championhistory_);
  }
  if (from._internal_has_tournamentlasttoprank()) {
    _this->_impl_.tournamentlasttoprank_ = new ::msg::CSReqTournamentLastTopRank(*from._impl_.tournamentlasttoprank_);
  }
  if (from._internal_has_bigwinnerexpandmatch()) {
    _this->_impl_.bigwinnerexpandmatch_ = new ::msg::CSReqBigWinnerExpandMatch(*from._impl_.bigwinnerexpandmatch_);
  }
  if (from._internal_has_bigwinnerdailyaward()) {
    _this->_impl_.bigwinnerdailyaward_ = new ::msg::CSReqBigWinnerDailyAward(*from._impl_.bigwinnerdailyaward_);
  }
  if (from._internal_has_bigwinnerscorehistory()) {
    _this->_impl_.bigwinnerscorehistory_ = new ::msg::CSReqBigWinnerScoreHistory(*from._impl_.bigwinnerscorehistory_);
  }
  if (from._internal_has_smeltitem()) {
    _this->_impl_.smeltitem_ = new ::msg::CSReqSmeltItem(*from._impl_.smeltitem_);
  }
  if (from._internal_has_pveuptalentlevel()) {
    _this->_impl_.pveuptalentlevel_ = new ::msg::CSReqPVEUpTalentLevel(*from._impl_.pveuptalentlevel_);
  }
  if (from._internal_has_luckyaward()) {
    _this->_impl_.luckyaward_ = new ::msg::CSReqPVELuckyAward(*from._impl_.luckyaward_);
  }
  if (from._internal_has_applychannel()) {
    _this->_impl_.applychannel_ = new ::msg::CSReqApplyChannel(*from._impl_.applychannel_);
  }
  if (from._internal_has_teamop()) {
    _this->_impl_.teamop_ = new ::msg::CSReqTeamOP(*from._impl_.teamop_);
  }
  if (from._internal_has_obteaminfo()) {
    _this->_impl_.obteaminfo_ = new ::msg::CSReqOBTeamInfo(*from._impl_.obteaminfo_);
  }
  if (from._internal_has_headiconurl()) {
    _this->_impl_.headiconurl_ = new ::msg::CSReqReportHeadIconUrl(*from._impl_.headiconurl_);
  }
  if (from._internal_has_getpvpservergroup()) {
    _this->_impl_.getpvpservergroup_ = new ::msg::CSReqGetPvpServerGroup(*from._impl_.getpvpservergroup_);
  }
  if (from._internal_has_reportpvpinfo()) {
    _this->_impl_.reportpvpinfo_ = new ::msg::CSReqReportPvpInfo(*from._impl_.reportpvpinfo_);
  }
  if (from._internal_has_chooseplayer()) {
    _this->_impl_.chooseplayer_ = new ::msg::CSReqChoosePlayer(*from._impl_.chooseplayer_);
  }
  if (from._internal_has_pingtest()) {
    _this->_impl_.pingtest_ = new ::msg::CSReqPingTest(*from._impl_.pingtest_);
  }
  if (from._internal_has_reportregioninfo()) {
    _this->_impl_.reportregioninfo_ = new ::msg::CSReqReportRegionInfo(*from._impl_.reportregioninfo_);
  }
  if (from._internal_has_recalledplaeyr()) {
    _this->_impl_.recalledplaeyr_ = new ::msg::CSReqRecalledPlayer(*from._impl_.recalledplaeyr_);
  }
  if (from._internal_has_weblogin()) {
    _this->_impl_.weblogin_ = new ::msg::CSReqWebLogin(*from._impl_.weblogin_);
  }
  if (from._internal_has_invitecodereset()) {
    _this->_impl_.invitecodereset_ = new ::msg::CSReqInviteCodeReset(*from._impl_.invitecodereset_);
  }
  if (from._internal_has_recallreward()) {
    _this->_impl_.recallreward_ = new ::msg::CSReqRecallReward(*from._impl_.recallreward_);
  }
  if (from._internal_has_switchtocommonmatch()) {
    _this->_impl_.switchtocommonmatch_ = new ::msg::CSReqSwitchToCommonMatch(*from._impl_.switchtocommonmatch_);
  }
  if (from._internal_has_switchmodeinteam()) {
    _this->_impl_.switchmodeinteam_ = new ::msg::CSReqSwitchModeInTeam(*from._impl_.switchmodeinteam_);
  }
  if (from._internal_has_gettnroomstate()) {
    _this->_impl_.gettnroomstate_ = new ::msg::CSReqGetTNRoomState(*from._impl_.gettnroomstate_);
  }
  if (from._internal_has_workshopmatch()) {
    _this->_impl_.workshopmatch_ = new ::msg::CSReqWorkshopMatch(*from._impl_.workshopmatch_);
  }
  if (from._internal_has_buyworkshopticket()) {
    _this->_impl_.buyworkshopticket_ = new ::msg::CSReqBuyWorkshopTicket(*from._impl_.buyworkshopticket_);
  }
  if (from._internal_has_favouriteworkshopmap()) {
    _this->_impl_.favouriteworkshopmap_ = new ::msg::CSReqFavouriteWorkshopMap(*from._impl_.favouriteworkshopmap_);
  }
  if (from._internal_has_shortcutmapsop()) {
    _this->_impl_.shortcutmapsop_ = new ::msg::CSReqShortcutMapsOP(*from._impl_.shortcutmapsop_);
  }
  if (from._internal_has_playerstournamentinfo()) {
    _this->_impl_.playerstournamentinfo_ = new ::msg::CSReqPlayersTournamentInfo(*from._impl_.playerstournamentinfo_);
  }
  if (from._internal_has_scoreworkshopmap()) {
    _this->_impl_.scoreworkshopmap_ = new ::msg::CSReqScoreWorkshopMap(*from._impl_.scoreworkshopmap_);
  }
  if (from._internal_has_mapsvisitedbyfriends()) {
    _this->_impl_.mapsvisitedbyfriends_ = new ::msg::CSReqMapsVisitedByFriends(*from._impl_.mapsvisitedbyfriends_);
  }
  if (from._internal_has_verifyrealname()) {
    _this->_impl_.verifyrealname_ = new ::msg::CSReqVerifyRealName(*from._impl_.verifyrealname_);
  }
  if (from._internal_has_fakepay()) {
    _this->_impl_.fakepay_ = new ::msg::CSReqFakePay(*from._impl_.fakepay_);
  }
  if (from._internal_has_guildcreate()) {
    _this->_impl_.guildcreate_ = new ::msg::CSReqGuildCreate(*from._impl_.guildcreate_);
  }
  if (from._internal_has_guildapply()) {
    _this->_impl_.guildapply_ = new ::msg::CSReqGuildApply(*from._impl_.guildapply_);
  }
  if (from._internal_has_guildhome()) {
    _this->_impl_.guildhome_ = new ::msg::CSReqGuildHome(*from._impl_.guildhome_);
  }
  if (from._internal_has_guildinfo()) {
    _this->_impl_.guildinfo_ = new ::msg::CSReqGuildInfo(*from._impl_.guildinfo_);
  }
  if (from._internal_has_guildapprove()) {
    _this->_impl_.guildapprove_ = new ::msg::CSReqGuildApprove(*from._impl_.guildapprove_);
  }
  if (from._internal_has_guildrole()) {
    _this->_impl_.guildrole_ = new ::msg::CSReqGuildSetRole(*from._impl_.guildrole_);
  }
  if (from._internal_has_guildmodify()) {
    _this->_impl_.guildmodify_ = new ::msg::CSReqGuildModify(*from._impl_.guildmodify_);
  }
  if (from._internal_has_guildkickoff()) {
    _this->_impl_.guildkickoff_ = new ::msg::CSReqGuildKickoff(*from._impl_.guildkickoff_);
  }
  if (from._internal_has_guilddismiss()) {
    _this->_impl_.guilddismiss_ = new ::msg::CSReqGuildDismiss(*from._impl_.guilddismiss_);
  }
  if (from._internal_has_guildexit()) {
    _this->_impl_.guildexit_ = new ::msg::CSReqGuildExit(*from._impl_.guildexit_);
  }
  if (from._internal_has_guildchat()) {
    _this->_impl_.guildchat_ = new ::msg::CSReqGuildChat(*from._impl_.guildchat_);
  }
  if (from._internal_has_guildlist()) {
    _this->_impl_.guildlist_ = new ::msg::CSReqGuildList(*from._impl_.guildlist_);
  }
  if (from._internal_has_guildrecommendplayers()) {
    _this->_impl_.guildrecommendplayers_ = new ::msg::CSReqGuildRecommendPlayers(*from._impl_.guildrecommendplayers_);
  }
  if (from._internal_has_guildinvitelist()) {
    _this->_impl_.guildinvitelist_ = new ::msg::CSReqGuildInviteList(*from._impl_.guildinvitelist_);
  }
  if (from._internal_has_guildinvite()) {
    _this->_impl_.guildinvite_ = new ::msg::CSReqGuildInvite(*from._impl_.guildinvite_);
  }
  if (from._internal_has_guildresign()) {
    _this->_impl_.guildresign_ = new ::msg::CSReqGuildResign(*from._impl_.guildresign_);
  }
  if (from._internal_has_guildrejectinvite()) {
    _this->_impl_.guildrejectinvite_ = new ::msg::CSReqGuildRejectInvite(*from._impl_.guildrejectinvite_);
  }
  if (from._internal_has_getvngcommentaward()) {
    _this->_impl_.getvngcommentaward_ = new ::msg::CSReqGetVngCommentAward(*from._impl_.getvngcommentaward_);
  }
  if (from._internal_has_levelupchest()) {
    _this->_impl_.levelupchest_ = new ::msg::CSReqLevelupChest(*from._impl_.levelupchest_);
  }
  if (from._internal_has_watchad()) {
    _this->_impl_.watchad_ = new ::msg::CSReqWatchAd(*from._impl_.watchad_);
  }
  if (from._internal_has_pstournamentroom()) {
    _this->_impl_.pstournamentroom_ = new ::msg::CSReqQueryPsTournamentRoom(*from._impl_.pstournamentroom_);
  }
  if (from._internal_has_getadcumulateaward()) {
    _this->_impl_.getadcumulateaward_ = new ::msg::CSReqGetAdCumulateAward(*from._impl_.getadcumulateaward_);
  }
  if (from._internal_has_setmessengerpos()) {
    _this->_impl_.setmessengerpos_ = new ::msg::CSReqSetMessengerPos(*from._impl_.setmessengerpos_);
  }
  if (from._internal_has_updateantiaddictiontime()) {
    _this->_impl_.updateantiaddictiontime_ = new ::msg::CSReqUpdateAntiAddictionTime(*from._impl_.updateantiaddictiontime_);
  }
  if (from._internal_has_cancelreconnect()) {
    _this->_impl_.cancelreconnect_ = new ::msg::CSReqCancelReconnect(*from._impl_.cancelreconnect_);
  }
  if (from._internal_has_reconnect()) {
    _this->_impl_.reconnect_ = new ::msg::CSReqReconnect(*from._impl_.reconnect_);
  }
  if (from._internal_has_passthrough()) {
    _this->_impl_.passthrough_ = new ::msg::CSReqPassThrough(*from._impl_.passthrough_);
  }
  if (from._internal_has_visitplayer()) {
    _this->_impl_.visitplayer_ = new ::msg::CSReqVisitPlayer(*from._impl_.visitplayer_);
  }
  if (from._internal_has_leavegameearly()) {
    _this->_impl_.leavegameearly_ = new ::msg::CSReqLeaveGameEarly(*from._impl_.leavegameearly_);
  }
  if (from._internal_has_gdcommonbin()) {
    _this->_impl_.gdcommonbin_ = new ::msg::CSReqGDCommonBin(*from._impl_.gdcommonbin_);
  }
  if (from._internal_has_gdbindata()) {
    _this->_impl_.gdbindata_ = new ::msg::CSReqGDCommonBinData(*from._impl_.gdbindata_);
  }
  if (from._internal_has_autobattleop()) {
    _this->_impl_.autobattleop_ = new ::msg::CSReqAutoBattleOP(*from._impl_.autobattleop_);
  }
  if (from._internal_has_restrictuser()) {
    _this->_impl_.restrictuser_ = new ::msg::CSReqRestrictUser(*from._impl_.restrictuser_);
  }
  if (from._internal_has_equipselectrate()) {
    _this->_impl_.equipselectrate_ = new ::msg::CSReqEquipSelectRate(*from._impl_.equipselectrate_);
  }
  if (from._internal_has_reportabsent()) {
    _this->_impl_.reportabsent_ = new ::msg::CSReqReportAbsent(*from._impl_.reportabsent_);
  }
  if (from._internal_has_recommendweek()) {
    _this->_impl_.recommendweek_ = new ::msg::CSReqRecommendWeek(*from._impl_.recommendweek_);
  }
  if (from._internal_has_recommendofficial()) {
    _this->_impl_.recommendofficial_ = new ::msg::CSReqRecommendOfficial(*from._impl_.recommendofficial_);
  }
  if (from._internal_has_recommendlatest()) {
    _this->_impl_.recommendlatest_ = new ::msg::CSReqRecommendLatest(*from._impl_.recommendlatest_);
  }
  if (from._internal_has_recommendhistory()) {
    _this->_impl_.recommendhistory_ = new ::msg::CSReqRecommendHistory(*from._impl_.recommendhistory_);
  }
  if (from._internal_has_recommendcollect()) {
    _this->_impl_.recommendcollect_ = new ::msg::CSReqRecommendCollect(*from._impl_.recommendcollect_);
  }
  if (from._internal_has_recommendset()) {
    _this->_impl_.recommendset_ = new ::msg::CSReqRecommendSet(*from._impl_.recommendset_);
  }
  if (from._internal_has_recommendgetcollection()) {
    _this->_impl_.recommendgetcollection_ = new ::msg::CSReqRecommendGetCollection(*from._impl_.recommendgetcollection_);
  }
  if (from._internal_has_recommendequip()) {
    _this->_impl_.recommendequip_ = new ::msg::CSReqRecommendEquip(*from._impl_.recommendequip_);
  }
  if (from._internal_has_logincancel()) {
    _this->_impl_.logincancel_ = new ::msg::CSReqLoginCancel(*from._impl_.logincancel_);
  }
  if (from._internal_has_convertdebris()) {
    _this->_impl_.convertdebris_ = new ::msg::CSReqConvertDebris(*from._impl_.convertdebris_);
  }
  if (from._internal_has_protectioncard()) {
    _this->_impl_.protectioncard_ = new ::msg::CSReqUseProtectionCard(*from._impl_.protectioncard_);
  }
  if (from._internal_has_usepassportcard()) {
    _this->_impl_.usepassportcard_ = new ::msg::CSReqUsePassportCard(*from._impl_.usepassportcard_);
  }
  if (from._internal_has_setmedal()) {
    _this->_impl_.setmedal_ = new ::msg::CSReqSetMedal(*from._impl_.setmedal_);
  }
  if (from._internal_has_unsetmedal()) {
    _this->_impl_.unsetmedal_ = new ::msg::CSReqUnSetMedal(*from._impl_.unsetmedal_);
  }
  if (from._internal_has_playermedals()) {
    _this->_impl_.playermedals_ = new ::msg::CSReqPlayerMedals(*from._impl_.playermedals_);
  }
  if (from._internal_has_updatehotdot()) {
    _this->_impl_.updatehotdot_ = new ::msg::CSReqUpdateHotDot(*from._impl_.updatehotdot_);
  }
  if (from._internal_has_queryhotdot()) {
    _this->_impl_.queryhotdot_ = new ::msg::CSReqQueryHotDot(*from._impl_.queryhotdot_);
  }
  if (from._internal_has_setcache()) {
    _this->_impl_.setcache_ = new ::msg::CSReqSetCache(*from._impl_.setcache_);
  }
  if (from._internal_has_getcache()) {
    _this->_impl_.getcache_ = new ::msg::CSReqGetCache(*from._impl_.getcache_);
  }
  if (from._internal_has_buychallengecount()) {
    _this->_impl_.buychallengecount_ = new ::msg::CSReqBuyChallengeCount(*from._impl_.buychallengecount_);
  }
  if (from._internal_has_getpverank()) {
    _this->_impl_.getpverank_ = new ::msg::CSReqGetPveRank(*from._impl_.getpverank_);
  }
  if (from._internal_has_authaccount()) {
    _this->_impl_.authaccount_ = new ::msg::CSReqLogin(*from._impl_.authaccount_);
  }
  if (from._internal_has_unbindaccount()) {
    _this->_impl_.unbindaccount_ = new ::msg::CSReqUnbindAccount(*from._impl_.unbindaccount_);
  }
  if (from._internal_has_bagtoitem()) {
    _this->_impl_.bagtoitem_ = new ::msg::CSReqBagToItem(*from._impl_.bagtoitem_);
  }
  if (from._internal_has_identifyitem()) {
    _this->_impl_.identifyitem_ = new ::msg::CSReqIdentifyItem(*from._impl_.identifyitem_);
  }
  if (from._internal_has_insetitemaffix()) {
    _this->_impl_.insetitemaffix_ = new ::msg::CSReqInsetItemAffix(*from._impl_.insetitemaffix_);
  }
  if (from._internal_has_unsetitemaffix()) {
    _this->_impl_.unsetitemaffix_ = new ::msg::CSReqUnsetItemAffix(*from._impl_.unsetitemaffix_);
  }
  if (from._internal_has_setdefaultattributes()) {
    _this->_impl_.setdefaultattributes_ = new ::msg::CSReqSetDefaultAttributes(*from._impl_.setdefaultattributes_);
  }
  if (from._internal_has_checkcancel()) {
    _this->_impl_.checkcancel_ = new ::msg::CSReqCheckCancel(*from._impl_.checkcancel_);
  }
  if (from._internal_has_cancelaccount()) {
    _this->_impl_.cancelaccount_ = new ::msg::CSReqCancelAccount(*from._impl_.cancelaccount_);
  }
  if (from._internal_has_oauthapp()) {
    _this->_impl_.oauthapp_ = new ::msg::CSReqOAuthApp(*from._impl_.oauthapp_);
  }
  if (from._internal_has_getselfnumrankdata()) {
    _this->_impl_.getselfnumrankdata_ = new ::msg::CSReqGetSelfNumRankData(*from._impl_.getselfnumrankdata_);
  }
  if (from._internal_has_updatecardgroup()) {
    _this->_impl_.updatecardgroup_ = new ::msg::CSReqUpdateCardGroup(*from._impl_.updatecardgroup_);
  }
  if (from._internal_has_updatecardgroupname()) {
    _this->_impl_.updatecardgroupname_ = new ::msg::CSReqUpdateCardGroupName(*from._impl_.updatecardgroupname_);
  }
  if (from._internal_has_buypvebuff()) {
    _this->_impl_.buypvebuff_ = new ::msg::CSReqBuyPveBuff(*from._impl_.buypvebuff_);
  }
  if (from._internal_has_setcardgroup()) {
    _this->_impl_.setcardgroup_ = new ::msg::CSReqSetCardGroup(*from._impl_.setcardgroup_);
  }
  if (from._internal_has_buypvechesstemplate()) {
    _this->_impl_.buypvechesstemplate_ = new ::msg::CSReqBuyPveChessTemplate(*from._impl_.buypvechesstemplate_);
  }
  if (from._internal_has_pveunlockchesstemplate()) {
    _this->_impl_.pveunlockchesstemplate_ = new ::msg::CSReqPveUnlockChessTemplate(*from._impl_.pveunlockchesstemplate_);
  }
  if (from._internal_has_pvesetteamdebuff()) {
    _this->_impl_.pvesetteamdebuff_ = new ::msg::CSReqPveSetTeamDeBuff(*from._impl_.pvesetteamdebuff_);
  }
  if (from._internal_has_chosecardgroup()) {
    _this->_impl_.chosecardgroup_ = new ::msg::CSReqChoseCardGroup(*from._impl_.chosecardgroup_);
  }
  if (from._internal_has_removeovertimebuff()) {
    _this->_impl_.removeovertimebuff_ = new ::msg::CSReqRemoveOvertimeBuff(*from._impl_.removeovertimebuff_);
  }
  if (from._internal_has_updatenewcardgroupsign()) {
    _this->_impl_.updatenewcardgroupsign_ = new ::msg::CSRspUpdateNewCardGroupSign(*from._impl_.updatenewcardgroupsign_);
  }
  if (from._internal_has_tdgetonhookaward()) {
    _this->_impl_.tdgetonhookaward_ = new ::msg::CSReqTDGetOnHookAward(*from._impl_.tdgetonhookaward_);
  }
  if (from._internal_has_tddraw()) {
    _this->_impl_.tddraw_ = new ::msg::CsReqTDDraw(*from._impl_.tddraw_);
  }
  if (from._internal_has_tdbuycard()) {
    _this->_impl_.tdbuycard_ = new ::msg::CsReqTDBuyCard(*from._impl_.tdbuycard_);
  }
  if (from._internal_has_tdsetcardgroup()) {
    _this->_impl_.tdsetcardgroup_ = new ::msg::CSReqTDSetCardGroup(*from._impl_.tdsetcardgroup_);
  }
  if (from._internal_has_tdlevelup()) {
    _this->_impl_.tdlevelup_ = new ::msg::CSReqTDLevelUp(*from._impl_.tdlevelup_);
  }
  if (from._internal_has_tdequip()) {
    _this->_impl_.tdequip_ = new ::msg::CSReqTDEquip(*from._impl_.tdequip_);
  }
  if (from._internal_has_mentorupdatesetting()) {
    _this->_impl_.mentorupdatesetting_ = new ::msg::CSReqMentorUpdateSetting(*from._impl_.mentorupdatesetting_);
  }
  if (from._internal_has_mentorinvite()) {
    _this->_impl_.mentorinvite_ = new ::msg::CSReqMentorInvite(*from._impl_.mentorinvite_);
  }
  if (from._internal_has_mentorconfirminvite()) {
    _this->_impl_.mentorconfirminvite_ = new ::msg::CSReqMentorConfirmInvite(*from._impl_.mentorconfirminvite_);
  }
  if (from._internal_has_mentorrecommendlist()) {
    _this->_impl_.mentorrecommendlist_ = new ::msg::CSReqMentorRecommendList(*from._impl_.mentorrecommendlist_);
  }
  if (from._internal_has_mentorgettaskaward()) {
    _this->_impl_.mentorgettaskaward_ = new ::msg::CSReqMentorGetTaskAward(*from._impl_.mentorgettaskaward_);
  }
  if (from._internal_has_mentorgraduate()) {
    _this->_impl_.mentorgraduate_ = new ::msg::CSReqMentorGraduate(*from._impl_.mentorgraduate_);
  }
  if (from._internal_has_mentorrelieverelation()) {
    _this->_impl_.mentorrelieverelation_ = new ::msg::CSReqMentorRelieveRelation(*from._impl_.mentorrelieverelation_);
  }
  if (from._internal_has_getmentorinfo()) {
    _this->_impl_.getmentorinfo_ = new ::msg::CSReqGetMentorInfo(*from._impl_.getmentorinfo_);
  }
  if (from._internal_has_mentorgetinvitemsg()) {
    _this->_impl_.mentorgetinvitemsg_ = new ::msg::CSReqMentorGetInviteMsg(*from._impl_.mentorgetinvitemsg_);
  }
  if (from._internal_has_updatecardgroupbetter()) {
    _this->_impl_.updatecardgroupbetter_ = new ::msg::CSReqUpdateCardGroupBetter(*from._impl_.updatecardgroupbetter_);
  }
  if (from._internal_has_updatecardgroupsetting()) {
    _this->_impl_.updatecardgroupsetting_ = new ::msg::CSReqUpdateCardGroupSetting(*from._impl_.updatecardgroupsetting_);
  }
  if (from._internal_has_setcontent()) {
    _this->_impl_.setcontent_ = new ::msg::CSReqSetContent(*from._impl_.setcontent_);
  }
  if (from._internal_has_getbalance()) {
    _this->_impl_.getbalance_ = new ::msg::CSReqGetBalance(*from._impl_.getbalance_);
  }
  if (from._internal_has_rechargebalance()) {
    _this->_impl_.rechargebalance_ = new ::msg::CSReqRechargeBalance(*from._impl_.rechargebalance_);
  }
  if (from._internal_has_withdrawbalance()) {
    _this->_impl_.withdrawbalance_ = new ::msg::CSReqWithdrawBalance(*from._impl_.withdrawbalance_);
  }
  if (from._internal_has_personalrecommendmall()) {
    _this->_impl_.personalrecommendmall_ = new ::msg::CSReqPersonalRecommendMall(*from._impl_.personalrecommendmall_);
  }
  if (from._internal_has_getmedalchestaward()) {
    _this->_impl_.getmedalchestaward_ = new ::msg::CSReqGetMedalChestAward(*from._impl_.getmedalchestaward_);
  }
  if (from._internal_has_setitemautouse()) {
    _this->_impl_.setitemautouse_ = new ::msg::CSReqSetItemAutoUse(*from._impl_.setitemautouse_);
  }
  _this->_impl_.seq_ = from._impl_.seq_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqBody)
}

inline void CSReqBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.heart_){nullptr}
    , decltype(_impl_.login_){nullptr}
    , decltype(_impl_.versioncheck_){nullptr}
    , decltype(_impl_.resourceversioncheck_){nullptr}
    , decltype(_impl_.applyhallserver_){nullptr}
    , decltype(_impl_.getnumrank_){nullptr}
    , decltype(_impl_.worldchat_){nullptr}
    , decltype(_impl_.playersbaseinfo_){nullptr}
    , decltype(_impl_.playerdetailinfo_){nullptr}
    , decltype(_impl_.readmail_){nullptr}
    , decltype(_impl_.getmailaward_){nullptr}
    , decltype(_impl_.buyegg_){nullptr}
    , decltype(_impl_.usernameset_){nullptr}
    , decltype(_impl_.usernamerandom_){nullptr}
    , decltype(_impl_.headpicset_){nullptr}
    , decltype(_impl_.pvp_){nullptr}
    , decltype(_impl_.dresschessplayer_){nullptr}
    , decltype(_impl_.dressscene_){nullptr}
    , decltype(_impl_.pvplogin_){nullptr}
    , decltype(_impl_.pvpend_){nullptr}
    , decltype(_impl_.playerfinish_){nullptr}
    , decltype(_impl_.playerquit_){nullptr}
    , decltype(_impl_.sellitem_){nullptr}
    , decltype(_impl_.getevalaward_){nullptr}
    , decltype(_impl_.usechessplayer_){nullptr}
    , decltype(_impl_.guidreport_){nullptr}
    , decltype(_impl_.getcodeaward_){nullptr}
    , decltype(_impl_.roundreport_){nullptr}
    , decltype(_impl_.loadingprogress_){nullptr}
    , decltype(_impl_.pvpchat_){nullptr}
    , decltype(_impl_.chesscombine_){nullptr}
    , decltype(_impl_.expose_){nullptr}
    , decltype(_impl_.applyorderid_){nullptr}
    , decltype(_impl_.reportorderinfo_){nullptr}
    , decltype(_impl_.setitem_){nullptr}
    , decltype(_impl_.unsetitem_){nullptr}
    , decltype(_impl_.randomitem_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.setchessplayer_){nullptr}
    , decltype(_impl_.unsetchessplayer_){nullptr}
    , decltype(_impl_.getfanslist_){nullptr}
    , decltype(_impl_.followplayer_){nullptr}
    , decltype(_impl_.unfollowplayer_){nullptr}
    , decltype(_impl_.playersstatusinfo_){nullptr}
    , decltype(_impl_.invitejointeam_){nullptr}
    , decltype(_impl_.jointeam_){nullptr}
    , decltype(_impl_.kickoffteamplayer_){nullptr}
    , decltype(_impl_.teammsg_){nullptr}
    , decltype(_impl_.teamready_){nullptr}
    , decltype(_impl_.reportpayresponse_){nullptr}
    , decltype(_impl_.rejectjointeam_){nullptr}
    , decltype(_impl_.shieldchat_){nullptr}
    , decltype(_impl_.buypassportlevel_){nullptr}
    , decltype(_impl_.upgradepassport_){nullptr}
    , decltype(_impl_.getpassportlevelaward_){nullptr}
    , decltype(_impl_.getpassporttaskaward_){nullptr}
    , decltype(_impl_.telbook_){nullptr}
    , decltype(_impl_.activatepassport_){nullptr}
    , decltype(_impl_.rankseasoneval_){nullptr}
    , decltype(_impl_.bindaccount_){nullptr}
    , decltype(_impl_.incadsshowcount_){nullptr}
    , decltype(_impl_.usebonuscard_){nullptr}
    , decltype(_impl_.getseasonaward_){nullptr}
    , decltype(_impl_.getalphaactivityaward_){nullptr}
    , decltype(_impl_.getlanguagedata_){nullptr}
    , decltype(_impl_.getactivityaward_){nullptr}
    , decltype(_impl_.getactivitydata_){nullptr}
    , decltype(_impl_.sendsms_){nullptr}
    , decltype(_impl_.getmeleeaward_){nullptr}
    , decltype(_impl_.addaitoteam_){nullptr}
    , decltype(_impl_.share_){nullptr}
    , decltype(_impl_.skipinterface_){nullptr}
    , decltype(_impl_.teamgame_){nullptr}
    , decltype(_impl_.setteammode_){nullptr}
    , decltype(_impl_.historypvpshowpermission_){nullptr}
    , decltype(_impl_.searchteam_){nullptr}
    , decltype(_impl_.applychat_){nullptr}
    , decltype(_impl_.chatlogin_){nullptr}
    , decltype(_impl_.probenetdelay_){nullptr}
    , decltype(_impl_.geteggs_){nullptr}
    , decltype(_impl_.buygoods_){nullptr}
    , decltype(_impl_.exchangepassportgoods_){nullptr}
    , decltype(_impl_.usepassporttaskcard_){nullptr}
    , decltype(_impl_.openrandchest_){nullptr}
    , decltype(_impl_.egglottery_){nullptr}
    , decltype(_impl_.querydiamondbalance_){nullptr}
    , decltype(_impl_.useitem_){nullptr}
    , decltype(_impl_.useexperiencecard_){nullptr}
    , decltype(_impl_.randtargetitem_){nullptr}
    , decltype(_impl_.addblacklist_){nullptr}
    , decltype(_impl_.removeblacklist_){nullptr}
    , decltype(_impl_.reportplayerbirth_){nullptr}
    , decltype(_impl_.reportinfoinput_){nullptr}
    , decltype(_impl_.sendverificationcode_){nullptr}
    , decltype(_impl_.bindphonenumber_){nullptr}
    , decltype(_impl_.worldinvite_){nullptr}
    , decltype(_impl_.removeexpireitem_){nullptr}
    , decltype(_impl_.getmallgoods_){nullptr}
    , decltype(_impl_.buymallgoods_){nullptr}
    , decltype(_impl_.bindsharingcode_){nullptr}
    , decltype(_impl_.wxblessbag_){nullptr}
    , decltype(_impl_.updatefriendsingame_){nullptr}
    , decltype(_impl_.sharereward_){nullptr}
    , decltype(_impl_.allfightinfo_){nullptr}
    , decltype(_impl_.getoldplayer_){nullptr}
    , decltype(_impl_.bindoldplayer_){nullptr}
    , decltype(_impl_.sendverificationcodewithcheckredis_){nullptr}
    , decltype(_impl_.reportsetting_){nullptr}
    , decltype(_impl_.antidata_){nullptr}
    , decltype(_impl_.tlogdata_){nullptr}
    , decltype(_impl_.daysign_){nullptr}
    , decltype(_impl_.dayfitavoid_){nullptr}
    , decltype(_impl_.sharecountaward_){nullptr}
    , decltype(_impl_.actitemexch_){nullptr}
    , decltype(_impl_.realationstar_){nullptr}
    , decltype(_impl_.getrealationstarinvitesucc_){nullptr}
    , decltype(_impl_.getrealationstar_){nullptr}
    , decltype(_impl_.reqactrecord_){nullptr}
    , decltype(_impl_.joinvoiceteam_){nullptr}
    , decltype(_impl_.joinvoicepvp_){nullptr}
    , decltype(_impl_.joinvoicecamp_){nullptr}
    , decltype(_impl_.usercountryset_){nullptr}
    , decltype(_impl_.offlineinvitejointeam_){nullptr}
    , decltype(_impl_.observe_){nullptr}
    , decltype(_impl_.getrecommendpvp_){nullptr}
    , decltype(_impl_.observelogin_){nullptr}
    , decltype(_impl_.quitobserve_){nullptr}
    , decltype(_impl_.getobserveinfo_){nullptr}
    , decltype(_impl_.freeflow_){nullptr}
    , decltype(_impl_.setpushtoken_){nullptr}
    , decltype(_impl_.tlogevent_){nullptr}
    , decltype(_impl_.wxvvipaward_){nullptr}
    , decltype(_impl_.relationstarwx_){nullptr}
    , decltype(_impl_.sendwxredpacket_){nullptr}
    , decltype(_impl_.recvwxredpacket_){nullptr}
    , decltype(_impl_.wxredpktlike_){nullptr}
    , decltype(_impl_.wxredpktrank_){nullptr}
    , decltype(_impl_.setobserveprivilege_){nullptr}
    , decltype(_impl_.presetfastchat_){nullptr}
    , decltype(_impl_.changeslotteam_){nullptr}
    , decltype(_impl_.changesubmodeteam_){nullptr}
    , decltype(_impl_.confirmchangeslotteam_){nullptr}
    , decltype(_impl_.pvproundend_){nullptr}
    , decltype(_impl_.observechatlogin_){nullptr}
    , decltype(_impl_.pvpconfirm_){nullptr}
    , decltype(_impl_.activitypicshare_){nullptr}
    , decltype(_impl_.bindoldbusinessplayer_){nullptr}
    , decltype(_impl_.translate_){nullptr}
    , decltype(_impl_.submitquestionnaire_){nullptr}
    , decltype(_impl_.cancelchangeslot_){nullptr}
    , decltype(_impl_.setchessskin_){nullptr}
    , decltype(_impl_.unsetchessskin_){nullptr}
    , decltype(_impl_.compose_){nullptr}
    , decltype(_impl_.offhelpreddot_){nullptr}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.changelanguage_){nullptr}
    , decltype(_impl_.videoplay_){nullptr}
    , decltype(_impl_.setprovince_){nullptr}
    , decltype(_impl_.longyuanvoice_){nullptr}
    , decltype(_impl_.enrolltournament_){nullptr}
    , decltype(_impl_.jointournamentroom_){nullptr}
    , decltype(_impl_.tournamentpointaward_){nullptr}
    , decltype(_impl_.dealwebmail_){nullptr}
    , decltype(_impl_.getenrollplayers_){nullptr}
    , decltype(_impl_.challengeagain_){nullptr}
    , decltype(_impl_.historychat_){nullptr}
    , decltype(_impl_.setfriendinvisible_){nullptr}
    , decltype(_impl_.getobserveaward_){nullptr}
    , decltype(_impl_.inviteobserve_){nullptr}
    , decltype(_impl_.rejectobserve_){nullptr}
    , decltype(_impl_.gettxplayer_){nullptr}
    , decltype(_impl_.choosetxplayer_){nullptr}
    , decltype(_impl_.getthirdpvpinfo_){nullptr}
    , decltype(_impl_.markplayerguide_){nullptr}
    , decltype(_impl_.markchessskinclicked_){nullptr}
    , decltype(_impl_.recruitinviteplayer_){nullptr}
    , decltype(_impl_.recruitbindinviter_){nullptr}
    , decltype(_impl_.queryps4entitlements_){nullptr}
    , decltype(_impl_.actdaysign_){nullptr}
    , decltype(_impl_.havethirdpvpinfo_){nullptr}
    , decltype(_impl_.activitymall_){nullptr}
    , decltype(_impl_.psonly_){nullptr}
    , decltype(_impl_.changechanneltype_){nullptr}
    , decltype(_impl_.customcardopt_){nullptr}
    , decltype(_impl_.staticsreport_){nullptr}
    , decltype(_impl_.championhistory_){nullptr}
    , decltype(_impl_.tournamentlasttoprank_){nullptr}
    , decltype(_impl_.bigwinnerexpandmatch_){nullptr}
    , decltype(_impl_.bigwinnerdailyaward_){nullptr}
    , decltype(_impl_.bigwinnerscorehistory_){nullptr}
    , decltype(_impl_.smeltitem_){nullptr}
    , decltype(_impl_.pveuptalentlevel_){nullptr}
    , decltype(_impl_.luckyaward_){nullptr}
    , decltype(_impl_.applychannel_){nullptr}
    , decltype(_impl_.teamop_){nullptr}
    , decltype(_impl_.obteaminfo_){nullptr}
    , decltype(_impl_.headiconurl_){nullptr}
    , decltype(_impl_.getpvpservergroup_){nullptr}
    , decltype(_impl_.reportpvpinfo_){nullptr}
    , decltype(_impl_.chooseplayer_){nullptr}
    , decltype(_impl_.pingtest_){nullptr}
    , decltype(_impl_.reportregioninfo_){nullptr}
    , decltype(_impl_.recalledplaeyr_){nullptr}
    , decltype(_impl_.weblogin_){nullptr}
    , decltype(_impl_.invitecodereset_){nullptr}
    , decltype(_impl_.recallreward_){nullptr}
    , decltype(_impl_.switchtocommonmatch_){nullptr}
    , decltype(_impl_.switchmodeinteam_){nullptr}
    , decltype(_impl_.gettnroomstate_){nullptr}
    , decltype(_impl_.workshopmatch_){nullptr}
    , decltype(_impl_.buyworkshopticket_){nullptr}
    , decltype(_impl_.favouriteworkshopmap_){nullptr}
    , decltype(_impl_.shortcutmapsop_){nullptr}
    , decltype(_impl_.playerstournamentinfo_){nullptr}
    , decltype(_impl_.scoreworkshopmap_){nullptr}
    , decltype(_impl_.mapsvisitedbyfriends_){nullptr}
    , decltype(_impl_.verifyrealname_){nullptr}
    , decltype(_impl_.fakepay_){nullptr}
    , decltype(_impl_.guildcreate_){nullptr}
    , decltype(_impl_.guildapply_){nullptr}
    , decltype(_impl_.guildhome_){nullptr}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.guildapprove_){nullptr}
    , decltype(_impl_.guildrole_){nullptr}
    , decltype(_impl_.guildmodify_){nullptr}
    , decltype(_impl_.guildkickoff_){nullptr}
    , decltype(_impl_.guilddismiss_){nullptr}
    , decltype(_impl_.guildexit_){nullptr}
    , decltype(_impl_.guildchat_){nullptr}
    , decltype(_impl_.guildlist_){nullptr}
    , decltype(_impl_.guildrecommendplayers_){nullptr}
    , decltype(_impl_.guildinvitelist_){nullptr}
    , decltype(_impl_.guildinvite_){nullptr}
    , decltype(_impl_.guildresign_){nullptr}
    , decltype(_impl_.guildrejectinvite_){nullptr}
    , decltype(_impl_.getvngcommentaward_){nullptr}
    , decltype(_impl_.levelupchest_){nullptr}
    , decltype(_impl_.watchad_){nullptr}
    , decltype(_impl_.pstournamentroom_){nullptr}
    , decltype(_impl_.getadcumulateaward_){nullptr}
    , decltype(_impl_.setmessengerpos_){nullptr}
    , decltype(_impl_.updateantiaddictiontime_){nullptr}
    , decltype(_impl_.cancelreconnect_){nullptr}
    , decltype(_impl_.reconnect_){nullptr}
    , decltype(_impl_.passthrough_){nullptr}
    , decltype(_impl_.visitplayer_){nullptr}
    , decltype(_impl_.leavegameearly_){nullptr}
    , decltype(_impl_.gdcommonbin_){nullptr}
    , decltype(_impl_.gdbindata_){nullptr}
    , decltype(_impl_.autobattleop_){nullptr}
    , decltype(_impl_.restrictuser_){nullptr}
    , decltype(_impl_.equipselectrate_){nullptr}
    , decltype(_impl_.reportabsent_){nullptr}
    , decltype(_impl_.recommendweek_){nullptr}
    , decltype(_impl_.recommendofficial_){nullptr}
    , decltype(_impl_.recommendlatest_){nullptr}
    , decltype(_impl_.recommendhistory_){nullptr}
    , decltype(_impl_.recommendcollect_){nullptr}
    , decltype(_impl_.recommendset_){nullptr}
    , decltype(_impl_.recommendgetcollection_){nullptr}
    , decltype(_impl_.recommendequip_){nullptr}
    , decltype(_impl_.logincancel_){nullptr}
    , decltype(_impl_.convertdebris_){nullptr}
    , decltype(_impl_.protectioncard_){nullptr}
    , decltype(_impl_.usepassportcard_){nullptr}
    , decltype(_impl_.setmedal_){nullptr}
    , decltype(_impl_.unsetmedal_){nullptr}
    , decltype(_impl_.playermedals_){nullptr}
    , decltype(_impl_.updatehotdot_){nullptr}
    , decltype(_impl_.queryhotdot_){nullptr}
    , decltype(_impl_.setcache_){nullptr}
    , decltype(_impl_.getcache_){nullptr}
    , decltype(_impl_.buychallengecount_){nullptr}
    , decltype(_impl_.getpverank_){nullptr}
    , decltype(_impl_.authaccount_){nullptr}
    , decltype(_impl_.unbindaccount_){nullptr}
    , decltype(_impl_.bagtoitem_){nullptr}
    , decltype(_impl_.identifyitem_){nullptr}
    , decltype(_impl_.insetitemaffix_){nullptr}
    , decltype(_impl_.unsetitemaffix_){nullptr}
    , decltype(_impl_.setdefaultattributes_){nullptr}
    , decltype(_impl_.checkcancel_){nullptr}
    , decltype(_impl_.cancelaccount_){nullptr}
    , decltype(_impl_.oauthapp_){nullptr}
    , decltype(_impl_.getselfnumrankdata_){nullptr}
    , decltype(_impl_.updatecardgroup_){nullptr}
    , decltype(_impl_.updatecardgroupname_){nullptr}
    , decltype(_impl_.buypvebuff_){nullptr}
    , decltype(_impl_.setcardgroup_){nullptr}
    , decltype(_impl_.buypvechesstemplate_){nullptr}
    , decltype(_impl_.pveunlockchesstemplate_){nullptr}
    , decltype(_impl_.pvesetteamdebuff_){nullptr}
    , decltype(_impl_.chosecardgroup_){nullptr}
    , decltype(_impl_.removeovertimebuff_){nullptr}
    , decltype(_impl_.updatenewcardgroupsign_){nullptr}
    , decltype(_impl_.tdgetonhookaward_){nullptr}
    , decltype(_impl_.tddraw_){nullptr}
    , decltype(_impl_.tdbuycard_){nullptr}
    , decltype(_impl_.tdsetcardgroup_){nullptr}
    , decltype(_impl_.tdlevelup_){nullptr}
    , decltype(_impl_.tdequip_){nullptr}
    , decltype(_impl_.mentorupdatesetting_){nullptr}
    , decltype(_impl_.mentorinvite_){nullptr}
    , decltype(_impl_.mentorconfirminvite_){nullptr}
    , decltype(_impl_.mentorrecommendlist_){nullptr}
    , decltype(_impl_.mentorgettaskaward_){nullptr}
    , decltype(_impl_.mentorgraduate_){nullptr}
    , decltype(_impl_.mentorrelieverelation_){nullptr}
    , decltype(_impl_.getmentorinfo_){nullptr}
    , decltype(_impl_.mentorgetinvitemsg_){nullptr}
    , decltype(_impl_.updatecardgroupbetter_){nullptr}
    , decltype(_impl_.updatecardgroupsetting_){nullptr}
    , decltype(_impl_.setcontent_){nullptr}
    , decltype(_impl_.getbalance_){nullptr}
    , decltype(_impl_.rechargebalance_){nullptr}
    , decltype(_impl_.withdrawbalance_){nullptr}
    , decltype(_impl_.personalrecommendmall_){nullptr}
    , decltype(_impl_.getmedalchestaward_){nullptr}
    , decltype(_impl_.setitemautouse_){nullptr}
    , decltype(_impl_.seq_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqBody::~CSReqBody() {
  // @@protoc_insertion_point(destructor:msg.CSReqBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.heart_;
  if (this != internal_default_instance()) delete _impl_.login_;
  if (this != internal_default_instance()) delete _impl_.versioncheck_;
  if (this != internal_default_instance()) delete _impl_.resourceversioncheck_;
  if (this != internal_default_instance()) delete _impl_.applyhallserver_;
  if (this != internal_default_instance()) delete _impl_.getnumrank_;
  if (this != internal_default_instance()) delete _impl_.worldchat_;
  if (this != internal_default_instance()) delete _impl_.playersbaseinfo_;
  if (this != internal_default_instance()) delete _impl_.playerdetailinfo_;
  if (this != internal_default_instance()) delete _impl_.readmail_;
  if (this != internal_default_instance()) delete _impl_.getmailaward_;
  if (this != internal_default_instance()) delete _impl_.buyegg_;
  if (this != internal_default_instance()) delete _impl_.usernameset_;
  if (this != internal_default_instance()) delete _impl_.usernamerandom_;
  if (this != internal_default_instance()) delete _impl_.headpicset_;
  if (this != internal_default_instance()) delete _impl_.pvp_;
  if (this != internal_default_instance()) delete _impl_.dresschessplayer_;
  if (this != internal_default_instance()) delete _impl_.dressscene_;
  if (this != internal_default_instance()) delete _impl_.pvplogin_;
  if (this != internal_default_instance()) delete _impl_.pvpend_;
  if (this != internal_default_instance()) delete _impl_.playerfinish_;
  if (this != internal_default_instance()) delete _impl_.playerquit_;
  if (this != internal_default_instance()) delete _impl_.sellitem_;
  if (this != internal_default_instance()) delete _impl_.getevalaward_;
  if (this != internal_default_instance()) delete _impl_.usechessplayer_;
  if (this != internal_default_instance()) delete _impl_.guidreport_;
  if (this != internal_default_instance()) delete _impl_.getcodeaward_;
  if (this != internal_default_instance()) delete _impl_.roundreport_;
  if (this != internal_default_instance()) delete _impl_.loadingprogress_;
  if (this != internal_default_instance()) delete _impl_.pvpchat_;
  if (this != internal_default_instance()) delete _impl_.chesscombine_;
  if (this != internal_default_instance()) delete _impl_.expose_;
  if (this != internal_default_instance()) delete _impl_.applyorderid_;
  if (this != internal_default_instance()) delete _impl_.reportorderinfo_;
  if (this != internal_default_instance()) delete _impl_.setitem_;
  if (this != internal_default_instance()) delete _impl_.unsetitem_;
  if (this != internal_default_instance()) delete _impl_.randomitem_;
  if (this != internal_default_instance()) delete _impl_.chat_;
  if (this != internal_default_instance()) delete _impl_.setchessplayer_;
  if (this != internal_default_instance()) delete _impl_.unsetchessplayer_;
  if (this != internal_default_instance()) delete _impl_.getfanslist_;
  if (this != internal_default_instance()) delete _impl_.followplayer_;
  if (this != internal_default_instance()) delete _impl_.unfollowplayer_;
  if (this != internal_default_instance()) delete _impl_.playersstatusinfo_;
  if (this != internal_default_instance()) delete _impl_.invitejointeam_;
  if (this != internal_default_instance()) delete _impl_.jointeam_;
  if (this != internal_default_instance()) delete _impl_.kickoffteamplayer_;
  if (this != internal_default_instance()) delete _impl_.teammsg_;
  if (this != internal_default_instance()) delete _impl_.teamready_;
  if (this != internal_default_instance()) delete _impl_.reportpayresponse_;
  if (this != internal_default_instance()) delete _impl_.rejectjointeam_;
  if (this != internal_default_instance()) delete _impl_.shieldchat_;
  if (this != internal_default_instance()) delete _impl_.buypassportlevel_;
  if (this != internal_default_instance()) delete _impl_.upgradepassport_;
  if (this != internal_default_instance()) delete _impl_.getpassportlevelaward_;
  if (this != internal_default_instance()) delete _impl_.getpassporttaskaward_;
  if (this != internal_default_instance()) delete _impl_.telbook_;
  if (this != internal_default_instance()) delete _impl_.activatepassport_;
  if (this != internal_default_instance()) delete _impl_.rankseasoneval_;
  if (this != internal_default_instance()) delete _impl_.bindaccount_;
  if (this != internal_default_instance()) delete _impl_.incadsshowcount_;
  if (this != internal_default_instance()) delete _impl_.usebonuscard_;
  if (this != internal_default_instance()) delete _impl_.getseasonaward_;
  if (this != internal_default_instance()) delete _impl_.getalphaactivityaward_;
  if (this != internal_default_instance()) delete _impl_.getlanguagedata_;
  if (this != internal_default_instance()) delete _impl_.getactivityaward_;
  if (this != internal_default_instance()) delete _impl_.getactivitydata_;
  if (this != internal_default_instance()) delete _impl_.sendsms_;
  if (this != internal_default_instance()) delete _impl_.getmeleeaward_;
  if (this != internal_default_instance()) delete _impl_.addaitoteam_;
  if (this != internal_default_instance()) delete _impl_.share_;
  if (this != internal_default_instance()) delete _impl_.skipinterface_;
  if (this != internal_default_instance()) delete _impl_.teamgame_;
  if (this != internal_default_instance()) delete _impl_.setteammode_;
  if (this != internal_default_instance()) delete _impl_.historypvpshowpermission_;
  if (this != internal_default_instance()) delete _impl_.searchteam_;
  if (this != internal_default_instance()) delete _impl_.applychat_;
  if (this != internal_default_instance()) delete _impl_.chatlogin_;
  if (this != internal_default_instance()) delete _impl_.probenetdelay_;
  if (this != internal_default_instance()) delete _impl_.geteggs_;
  if (this != internal_default_instance()) delete _impl_.buygoods_;
  if (this != internal_default_instance()) delete _impl_.exchangepassportgoods_;
  if (this != internal_default_instance()) delete _impl_.usepassporttaskcard_;
  if (this != internal_default_instance()) delete _impl_.openrandchest_;
  if (this != internal_default_instance()) delete _impl_.egglottery_;
  if (this != internal_default_instance()) delete _impl_.querydiamondbalance_;
  if (this != internal_default_instance()) delete _impl_.useitem_;
  if (this != internal_default_instance()) delete _impl_.useexperiencecard_;
  if (this != internal_default_instance()) delete _impl_.randtargetitem_;
  if (this != internal_default_instance()) delete _impl_.addblacklist_;
  if (this != internal_default_instance()) delete _impl_.removeblacklist_;
  if (this != internal_default_instance()) delete _impl_.reportplayerbirth_;
  if (this != internal_default_instance()) delete _impl_.reportinfoinput_;
  if (this != internal_default_instance()) delete _impl_.sendverificationcode_;
  if (this != internal_default_instance()) delete _impl_.bindphonenumber_;
  if (this != internal_default_instance()) delete _impl_.worldinvite_;
  if (this != internal_default_instance()) delete _impl_.removeexpireitem_;
  if (this != internal_default_instance()) delete _impl_.getmallgoods_;
  if (this != internal_default_instance()) delete _impl_.buymallgoods_;
  if (this != internal_default_instance()) delete _impl_.bindsharingcode_;
  if (this != internal_default_instance()) delete _impl_.wxblessbag_;
  if (this != internal_default_instance()) delete _impl_.updatefriendsingame_;
  if (this != internal_default_instance()) delete _impl_.sharereward_;
  if (this != internal_default_instance()) delete _impl_.allfightinfo_;
  if (this != internal_default_instance()) delete _impl_.getoldplayer_;
  if (this != internal_default_instance()) delete _impl_.bindoldplayer_;
  if (this != internal_default_instance()) delete _impl_.sendverificationcodewithcheckredis_;
  if (this != internal_default_instance()) delete _impl_.reportsetting_;
  if (this != internal_default_instance()) delete _impl_.antidata_;
  if (this != internal_default_instance()) delete _impl_.tlogdata_;
  if (this != internal_default_instance()) delete _impl_.daysign_;
  if (this != internal_default_instance()) delete _impl_.dayfitavoid_;
  if (this != internal_default_instance()) delete _impl_.sharecountaward_;
  if (this != internal_default_instance()) delete _impl_.actitemexch_;
  if (this != internal_default_instance()) delete _impl_.realationstar_;
  if (this != internal_default_instance()) delete _impl_.getrealationstarinvitesucc_;
  if (this != internal_default_instance()) delete _impl_.getrealationstar_;
  if (this != internal_default_instance()) delete _impl_.reqactrecord_;
  if (this != internal_default_instance()) delete _impl_.joinvoiceteam_;
  if (this != internal_default_instance()) delete _impl_.joinvoicepvp_;
  if (this != internal_default_instance()) delete _impl_.joinvoicecamp_;
  if (this != internal_default_instance()) delete _impl_.usercountryset_;
  if (this != internal_default_instance()) delete _impl_.offlineinvitejointeam_;
  if (this != internal_default_instance()) delete _impl_.observe_;
  if (this != internal_default_instance()) delete _impl_.getrecommendpvp_;
  if (this != internal_default_instance()) delete _impl_.observelogin_;
  if (this != internal_default_instance()) delete _impl_.quitobserve_;
  if (this != internal_default_instance()) delete _impl_.getobserveinfo_;
  if (this != internal_default_instance()) delete _impl_.freeflow_;
  if (this != internal_default_instance()) delete _impl_.setpushtoken_;
  if (this != internal_default_instance()) delete _impl_.tlogevent_;
  if (this != internal_default_instance()) delete _impl_.wxvvipaward_;
  if (this != internal_default_instance()) delete _impl_.relationstarwx_;
  if (this != internal_default_instance()) delete _impl_.sendwxredpacket_;
  if (this != internal_default_instance()) delete _impl_.recvwxredpacket_;
  if (this != internal_default_instance()) delete _impl_.wxredpktlike_;
  if (this != internal_default_instance()) delete _impl_.wxredpktrank_;
  if (this != internal_default_instance()) delete _impl_.setobserveprivilege_;
  if (this != internal_default_instance()) delete _impl_.presetfastchat_;
  if (this != internal_default_instance()) delete _impl_.changeslotteam_;
  if (this != internal_default_instance()) delete _impl_.changesubmodeteam_;
  if (this != internal_default_instance()) delete _impl_.confirmchangeslotteam_;
  if (this != internal_default_instance()) delete _impl_.pvproundend_;
  if (this != internal_default_instance()) delete _impl_.observechatlogin_;
  if (this != internal_default_instance()) delete _impl_.pvpconfirm_;
  if (this != internal_default_instance()) delete _impl_.activitypicshare_;
  if (this != internal_default_instance()) delete _impl_.bindoldbusinessplayer_;
  if (this != internal_default_instance()) delete _impl_.translate_;
  if (this != internal_default_instance()) delete _impl_.submitquestionnaire_;
  if (this != internal_default_instance()) delete _impl_.cancelchangeslot_;
  if (this != internal_default_instance()) delete _impl_.setchessskin_;
  if (this != internal_default_instance()) delete _impl_.unsetchessskin_;
  if (this != internal_default_instance()) delete _impl_.compose_;
  if (this != internal_default_instance()) delete _impl_.offhelpreddot_;
  if (this != internal_default_instance()) delete _impl_.video_;
  if (this != internal_default_instance()) delete _impl_.changelanguage_;
  if (this != internal_default_instance()) delete _impl_.videoplay_;
  if (this != internal_default_instance()) delete _impl_.setprovince_;
  if (this != internal_default_instance()) delete _impl_.longyuanvoice_;
  if (this != internal_default_instance()) delete _impl_.enrolltournament_;
  if (this != internal_default_instance()) delete _impl_.jointournamentroom_;
  if (this != internal_default_instance()) delete _impl_.tournamentpointaward_;
  if (this != internal_default_instance()) delete _impl_.dealwebmail_;
  if (this != internal_default_instance()) delete _impl_.getenrollplayers_;
  if (this != internal_default_instance()) delete _impl_.challengeagain_;
  if (this != internal_default_instance()) delete _impl_.historychat_;
  if (this != internal_default_instance()) delete _impl_.setfriendinvisible_;
  if (this != internal_default_instance()) delete _impl_.getobserveaward_;
  if (this != internal_default_instance()) delete _impl_.inviteobserve_;
  if (this != internal_default_instance()) delete _impl_.rejectobserve_;
  if (this != internal_default_instance()) delete _impl_.gettxplayer_;
  if (this != internal_default_instance()) delete _impl_.choosetxplayer_;
  if (this != internal_default_instance()) delete _impl_.getthirdpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.markplayerguide_;
  if (this != internal_default_instance()) delete _impl_.markchessskinclicked_;
  if (this != internal_default_instance()) delete _impl_.recruitinviteplayer_;
  if (this != internal_default_instance()) delete _impl_.recruitbindinviter_;
  if (this != internal_default_instance()) delete _impl_.queryps4entitlements_;
  if (this != internal_default_instance()) delete _impl_.actdaysign_;
  if (this != internal_default_instance()) delete _impl_.havethirdpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.activitymall_;
  if (this != internal_default_instance()) delete _impl_.psonly_;
  if (this != internal_default_instance()) delete _impl_.changechanneltype_;
  if (this != internal_default_instance()) delete _impl_.customcardopt_;
  if (this != internal_default_instance()) delete _impl_.staticsreport_;
  if (this != internal_default_instance()) delete _impl_.championhistory_;
  if (this != internal_default_instance()) delete _impl_.tournamentlasttoprank_;
  if (this != internal_default_instance()) delete _impl_.bigwinnerexpandmatch_;
  if (this != internal_default_instance()) delete _impl_.bigwinnerdailyaward_;
  if (this != internal_default_instance()) delete _impl_.bigwinnerscorehistory_;
  if (this != internal_default_instance()) delete _impl_.smeltitem_;
  if (this != internal_default_instance()) delete _impl_.pveuptalentlevel_;
  if (this != internal_default_instance()) delete _impl_.luckyaward_;
  if (this != internal_default_instance()) delete _impl_.applychannel_;
  if (this != internal_default_instance()) delete _impl_.teamop_;
  if (this != internal_default_instance()) delete _impl_.obteaminfo_;
  if (this != internal_default_instance()) delete _impl_.headiconurl_;
  if (this != internal_default_instance()) delete _impl_.getpvpservergroup_;
  if (this != internal_default_instance()) delete _impl_.reportpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.chooseplayer_;
  if (this != internal_default_instance()) delete _impl_.pingtest_;
  if (this != internal_default_instance()) delete _impl_.reportregioninfo_;
  if (this != internal_default_instance()) delete _impl_.recalledplaeyr_;
  if (this != internal_default_instance()) delete _impl_.weblogin_;
  if (this != internal_default_instance()) delete _impl_.invitecodereset_;
  if (this != internal_default_instance()) delete _impl_.recallreward_;
  if (this != internal_default_instance()) delete _impl_.switchtocommonmatch_;
  if (this != internal_default_instance()) delete _impl_.switchmodeinteam_;
  if (this != internal_default_instance()) delete _impl_.gettnroomstate_;
  if (this != internal_default_instance()) delete _impl_.workshopmatch_;
  if (this != internal_default_instance()) delete _impl_.buyworkshopticket_;
  if (this != internal_default_instance()) delete _impl_.favouriteworkshopmap_;
  if (this != internal_default_instance()) delete _impl_.shortcutmapsop_;
  if (this != internal_default_instance()) delete _impl_.playerstournamentinfo_;
  if (this != internal_default_instance()) delete _impl_.scoreworkshopmap_;
  if (this != internal_default_instance()) delete _impl_.mapsvisitedbyfriends_;
  if (this != internal_default_instance()) delete _impl_.verifyrealname_;
  if (this != internal_default_instance()) delete _impl_.fakepay_;
  if (this != internal_default_instance()) delete _impl_.guildcreate_;
  if (this != internal_default_instance()) delete _impl_.guildapply_;
  if (this != internal_default_instance()) delete _impl_.guildhome_;
  if (this != internal_default_instance()) delete _impl_.guildinfo_;
  if (this != internal_default_instance()) delete _impl_.guildapprove_;
  if (this != internal_default_instance()) delete _impl_.guildrole_;
  if (this != internal_default_instance()) delete _impl_.guildmodify_;
  if (this != internal_default_instance()) delete _impl_.guildkickoff_;
  if (this != internal_default_instance()) delete _impl_.guilddismiss_;
  if (this != internal_default_instance()) delete _impl_.guildexit_;
  if (this != internal_default_instance()) delete _impl_.guildchat_;
  if (this != internal_default_instance()) delete _impl_.guildlist_;
  if (this != internal_default_instance()) delete _impl_.guildrecommendplayers_;
  if (this != internal_default_instance()) delete _impl_.guildinvitelist_;
  if (this != internal_default_instance()) delete _impl_.guildinvite_;
  if (this != internal_default_instance()) delete _impl_.guildresign_;
  if (this != internal_default_instance()) delete _impl_.guildrejectinvite_;
  if (this != internal_default_instance()) delete _impl_.getvngcommentaward_;
  if (this != internal_default_instance()) delete _impl_.levelupchest_;
  if (this != internal_default_instance()) delete _impl_.watchad_;
  if (this != internal_default_instance()) delete _impl_.pstournamentroom_;
  if (this != internal_default_instance()) delete _impl_.getadcumulateaward_;
  if (this != internal_default_instance()) delete _impl_.setmessengerpos_;
  if (this != internal_default_instance()) delete _impl_.updateantiaddictiontime_;
  if (this != internal_default_instance()) delete _impl_.cancelreconnect_;
  if (this != internal_default_instance()) delete _impl_.reconnect_;
  if (this != internal_default_instance()) delete _impl_.passthrough_;
  if (this != internal_default_instance()) delete _impl_.visitplayer_;
  if (this != internal_default_instance()) delete _impl_.leavegameearly_;
  if (this != internal_default_instance()) delete _impl_.gdcommonbin_;
  if (this != internal_default_instance()) delete _impl_.gdbindata_;
  if (this != internal_default_instance()) delete _impl_.autobattleop_;
  if (this != internal_default_instance()) delete _impl_.restrictuser_;
  if (this != internal_default_instance()) delete _impl_.equipselectrate_;
  if (this != internal_default_instance()) delete _impl_.reportabsent_;
  if (this != internal_default_instance()) delete _impl_.recommendweek_;
  if (this != internal_default_instance()) delete _impl_.recommendofficial_;
  if (this != internal_default_instance()) delete _impl_.recommendlatest_;
  if (this != internal_default_instance()) delete _impl_.recommendhistory_;
  if (this != internal_default_instance()) delete _impl_.recommendcollect_;
  if (this != internal_default_instance()) delete _impl_.recommendset_;
  if (this != internal_default_instance()) delete _impl_.recommendgetcollection_;
  if (this != internal_default_instance()) delete _impl_.recommendequip_;
  if (this != internal_default_instance()) delete _impl_.logincancel_;
  if (this != internal_default_instance()) delete _impl_.convertdebris_;
  if (this != internal_default_instance()) delete _impl_.protectioncard_;
  if (this != internal_default_instance()) delete _impl_.usepassportcard_;
  if (this != internal_default_instance()) delete _impl_.setmedal_;
  if (this != internal_default_instance()) delete _impl_.unsetmedal_;
  if (this != internal_default_instance()) delete _impl_.playermedals_;
  if (this != internal_default_instance()) delete _impl_.updatehotdot_;
  if (this != internal_default_instance()) delete _impl_.queryhotdot_;
  if (this != internal_default_instance()) delete _impl_.setcache_;
  if (this != internal_default_instance()) delete _impl_.getcache_;
  if (this != internal_default_instance()) delete _impl_.buychallengecount_;
  if (this != internal_default_instance()) delete _impl_.getpverank_;
  if (this != internal_default_instance()) delete _impl_.authaccount_;
  if (this != internal_default_instance()) delete _impl_.unbindaccount_;
  if (this != internal_default_instance()) delete _impl_.bagtoitem_;
  if (this != internal_default_instance()) delete _impl_.identifyitem_;
  if (this != internal_default_instance()) delete _impl_.insetitemaffix_;
  if (this != internal_default_instance()) delete _impl_.unsetitemaffix_;
  if (this != internal_default_instance()) delete _impl_.setdefaultattributes_;
  if (this != internal_default_instance()) delete _impl_.checkcancel_;
  if (this != internal_default_instance()) delete _impl_.cancelaccount_;
  if (this != internal_default_instance()) delete _impl_.oauthapp_;
  if (this != internal_default_instance()) delete _impl_.getselfnumrankdata_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroup_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroupname_;
  if (this != internal_default_instance()) delete _impl_.buypvebuff_;
  if (this != internal_default_instance()) delete _impl_.setcardgroup_;
  if (this != internal_default_instance()) delete _impl_.buypvechesstemplate_;
  if (this != internal_default_instance()) delete _impl_.pveunlockchesstemplate_;
  if (this != internal_default_instance()) delete _impl_.pvesetteamdebuff_;
  if (this != internal_default_instance()) delete _impl_.chosecardgroup_;
  if (this != internal_default_instance()) delete _impl_.removeovertimebuff_;
  if (this != internal_default_instance()) delete _impl_.updatenewcardgroupsign_;
  if (this != internal_default_instance()) delete _impl_.tdgetonhookaward_;
  if (this != internal_default_instance()) delete _impl_.tddraw_;
  if (this != internal_default_instance()) delete _impl_.tdbuycard_;
  if (this != internal_default_instance()) delete _impl_.tdsetcardgroup_;
  if (this != internal_default_instance()) delete _impl_.tdlevelup_;
  if (this != internal_default_instance()) delete _impl_.tdequip_;
  if (this != internal_default_instance()) delete _impl_.mentorupdatesetting_;
  if (this != internal_default_instance()) delete _impl_.mentorinvite_;
  if (this != internal_default_instance()) delete _impl_.mentorconfirminvite_;
  if (this != internal_default_instance()) delete _impl_.mentorrecommendlist_;
  if (this != internal_default_instance()) delete _impl_.mentorgettaskaward_;
  if (this != internal_default_instance()) delete _impl_.mentorgraduate_;
  if (this != internal_default_instance()) delete _impl_.mentorrelieverelation_;
  if (this != internal_default_instance()) delete _impl_.getmentorinfo_;
  if (this != internal_default_instance()) delete _impl_.mentorgetinvitemsg_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroupbetter_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroupsetting_;
  if (this != internal_default_instance()) delete _impl_.setcontent_;
  if (this != internal_default_instance()) delete _impl_.getbalance_;
  if (this != internal_default_instance()) delete _impl_.rechargebalance_;
  if (this != internal_default_instance()) delete _impl_.withdrawbalance_;
  if (this != internal_default_instance()) delete _impl_.personalrecommendmall_;
  if (this != internal_default_instance()) delete _impl_.getmedalchestaward_;
  if (this != internal_default_instance()) delete _impl_.setitemautouse_;
}

void CSReqBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.heart_ != nullptr) {
    delete _impl_.heart_;
  }
  _impl_.heart_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.login_ != nullptr) {
    delete _impl_.login_;
  }
  _impl_.login_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.versioncheck_ != nullptr) {
    delete _impl_.versioncheck_;
  }
  _impl_.versioncheck_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resourceversioncheck_ != nullptr) {
    delete _impl_.resourceversioncheck_;
  }
  _impl_.resourceversioncheck_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applyhallserver_ != nullptr) {
    delete _impl_.applyhallserver_;
  }
  _impl_.applyhallserver_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getnumrank_ != nullptr) {
    delete _impl_.getnumrank_;
  }
  _impl_.getnumrank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worldchat_ != nullptr) {
    delete _impl_.worldchat_;
  }
  _impl_.worldchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playersbaseinfo_ != nullptr) {
    delete _impl_.playersbaseinfo_;
  }
  _impl_.playersbaseinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerdetailinfo_ != nullptr) {
    delete _impl_.playerdetailinfo_;
  }
  _impl_.playerdetailinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.readmail_ != nullptr) {
    delete _impl_.readmail_;
  }
  _impl_.readmail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmailaward_ != nullptr) {
    delete _impl_.getmailaward_;
  }
  _impl_.getmailaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buyegg_ != nullptr) {
    delete _impl_.buyegg_;
  }
  _impl_.buyegg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usernameset_ != nullptr) {
    delete _impl_.usernameset_;
  }
  _impl_.usernameset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usernamerandom_ != nullptr) {
    delete _impl_.usernamerandom_;
  }
  _impl_.usernamerandom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.headpicset_ != nullptr) {
    delete _impl_.headpicset_;
  }
  _impl_.headpicset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvp_ != nullptr) {
    delete _impl_.pvp_;
  }
  _impl_.pvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dresschessplayer_ != nullptr) {
    delete _impl_.dresschessplayer_;
  }
  _impl_.dresschessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dressscene_ != nullptr) {
    delete _impl_.dressscene_;
  }
  _impl_.dressscene_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvplogin_ != nullptr) {
    delete _impl_.pvplogin_;
  }
  _impl_.pvplogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpend_ != nullptr) {
    delete _impl_.pvpend_;
  }
  _impl_.pvpend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerfinish_ != nullptr) {
    delete _impl_.playerfinish_;
  }
  _impl_.playerfinish_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerquit_ != nullptr) {
    delete _impl_.playerquit_;
  }
  _impl_.playerquit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sellitem_ != nullptr) {
    delete _impl_.sellitem_;
  }
  _impl_.sellitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getevalaward_ != nullptr) {
    delete _impl_.getevalaward_;
  }
  _impl_.getevalaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usechessplayer_ != nullptr) {
    delete _impl_.usechessplayer_;
  }
  _impl_.usechessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guidreport_ != nullptr) {
    delete _impl_.guidreport_;
  }
  _impl_.guidreport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getcodeaward_ != nullptr) {
    delete _impl_.getcodeaward_;
  }
  _impl_.getcodeaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.roundreport_ != nullptr) {
    delete _impl_.roundreport_;
  }
  _impl_.roundreport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.loadingprogress_ != nullptr) {
    delete _impl_.loadingprogress_;
  }
  _impl_.loadingprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpchat_ != nullptr) {
    delete _impl_.pvpchat_;
  }
  _impl_.pvpchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chesscombine_ != nullptr) {
    delete _impl_.chesscombine_;
  }
  _impl_.chesscombine_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expose_ != nullptr) {
    delete _impl_.expose_;
  }
  _impl_.expose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applyorderid_ != nullptr) {
    delete _impl_.applyorderid_;
  }
  _impl_.applyorderid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportorderinfo_ != nullptr) {
    delete _impl_.reportorderinfo_;
  }
  _impl_.reportorderinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setitem_ != nullptr) {
    delete _impl_.setitem_;
  }
  _impl_.setitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitem_ != nullptr) {
    delete _impl_.unsetitem_;
  }
  _impl_.unsetitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.randomitem_ != nullptr) {
    delete _impl_.randomitem_;
  }
  _impl_.randomitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setchessplayer_ != nullptr) {
    delete _impl_.setchessplayer_;
  }
  _impl_.setchessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessplayer_ != nullptr) {
    delete _impl_.unsetchessplayer_;
  }
  _impl_.unsetchessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getfanslist_ != nullptr) {
    delete _impl_.getfanslist_;
  }
  _impl_.getfanslist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.followplayer_ != nullptr) {
    delete _impl_.followplayer_;
  }
  _impl_.followplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unfollowplayer_ != nullptr) {
    delete _impl_.unfollowplayer_;
  }
  _impl_.unfollowplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playersstatusinfo_ != nullptr) {
    delete _impl_.playersstatusinfo_;
  }
  _impl_.playersstatusinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.invitejointeam_ != nullptr) {
    delete _impl_.invitejointeam_;
  }
  _impl_.invitejointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jointeam_ != nullptr) {
    delete _impl_.jointeam_;
  }
  _impl_.jointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kickoffteamplayer_ != nullptr) {
    delete _impl_.kickoffteamplayer_;
  }
  _impl_.kickoffteamplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teammsg_ != nullptr) {
    delete _impl_.teammsg_;
  }
  _impl_.teammsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamready_ != nullptr) {
    delete _impl_.teamready_;
  }
  _impl_.teamready_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportpayresponse_ != nullptr) {
    delete _impl_.reportpayresponse_;
  }
  _impl_.reportpayresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rejectjointeam_ != nullptr) {
    delete _impl_.rejectjointeam_;
  }
  _impl_.rejectjointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shieldchat_ != nullptr) {
    delete _impl_.shieldchat_;
  }
  _impl_.shieldchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buypassportlevel_ != nullptr) {
    delete _impl_.buypassportlevel_;
  }
  _impl_.buypassportlevel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.upgradepassport_ != nullptr) {
    delete _impl_.upgradepassport_;
  }
  _impl_.upgradepassport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpassportlevelaward_ != nullptr) {
    delete _impl_.getpassportlevelaward_;
  }
  _impl_.getpassportlevelaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpassporttaskaward_ != nullptr) {
    delete _impl_.getpassporttaskaward_;
  }
  _impl_.getpassporttaskaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.telbook_ != nullptr) {
    delete _impl_.telbook_;
  }
  _impl_.telbook_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activatepassport_ != nullptr) {
    delete _impl_.activatepassport_;
  }
  _impl_.activatepassport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rankseasoneval_ != nullptr) {
    delete _impl_.rankseasoneval_;
  }
  _impl_.rankseasoneval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindaccount_ != nullptr) {
    delete _impl_.bindaccount_;
  }
  _impl_.bindaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.incadsshowcount_ != nullptr) {
    delete _impl_.incadsshowcount_;
  }
  _impl_.incadsshowcount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usebonuscard_ != nullptr) {
    delete _impl_.usebonuscard_;
  }
  _impl_.usebonuscard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getseasonaward_ != nullptr) {
    delete _impl_.getseasonaward_;
  }
  _impl_.getseasonaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getalphaactivityaward_ != nullptr) {
    delete _impl_.getalphaactivityaward_;
  }
  _impl_.getalphaactivityaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getlanguagedata_ != nullptr) {
    delete _impl_.getlanguagedata_;
  }
  _impl_.getlanguagedata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getactivityaward_ != nullptr) {
    delete _impl_.getactivityaward_;
  }
  _impl_.getactivityaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getactivitydata_ != nullptr) {
    delete _impl_.getactivitydata_;
  }
  _impl_.getactivitydata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendsms_ != nullptr) {
    delete _impl_.sendsms_;
  }
  _impl_.sendsms_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmeleeaward_ != nullptr) {
    delete _impl_.getmeleeaward_;
  }
  _impl_.getmeleeaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addaitoteam_ != nullptr) {
    delete _impl_.addaitoteam_;
  }
  _impl_.addaitoteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.share_ != nullptr) {
    delete _impl_.share_;
  }
  _impl_.share_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.skipinterface_ != nullptr) {
    delete _impl_.skipinterface_;
  }
  _impl_.skipinterface_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamgame_ != nullptr) {
    delete _impl_.teamgame_;
  }
  _impl_.teamgame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setteammode_ != nullptr) {
    delete _impl_.setteammode_;
  }
  _impl_.setteammode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.historypvpshowpermission_ != nullptr) {
    delete _impl_.historypvpshowpermission_;
  }
  _impl_.historypvpshowpermission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.searchteam_ != nullptr) {
    delete _impl_.searchteam_;
  }
  _impl_.searchteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applychat_ != nullptr) {
    delete _impl_.applychat_;
  }
  _impl_.applychat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chatlogin_ != nullptr) {
    delete _impl_.chatlogin_;
  }
  _impl_.chatlogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.probenetdelay_ != nullptr) {
    delete _impl_.probenetdelay_;
  }
  _impl_.probenetdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geteggs_ != nullptr) {
    delete _impl_.geteggs_;
  }
  _impl_.geteggs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buygoods_ != nullptr) {
    delete _impl_.buygoods_;
  }
  _impl_.buygoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchangepassportgoods_ != nullptr) {
    delete _impl_.exchangepassportgoods_;
  }
  _impl_.exchangepassportgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usepassporttaskcard_ != nullptr) {
    delete _impl_.usepassporttaskcard_;
  }
  _impl_.usepassporttaskcard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.openrandchest_ != nullptr) {
    delete _impl_.openrandchest_;
  }
  _impl_.openrandchest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.egglottery_ != nullptr) {
    delete _impl_.egglottery_;
  }
  _impl_.egglottery_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.querydiamondbalance_ != nullptr) {
    delete _impl_.querydiamondbalance_;
  }
  _impl_.querydiamondbalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.useitem_ != nullptr) {
    delete _impl_.useitem_;
  }
  _impl_.useitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.useexperiencecard_ != nullptr) {
    delete _impl_.useexperiencecard_;
  }
  _impl_.useexperiencecard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.randtargetitem_ != nullptr) {
    delete _impl_.randtargetitem_;
  }
  _impl_.randtargetitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addblacklist_ != nullptr) {
    delete _impl_.addblacklist_;
  }
  _impl_.addblacklist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeblacklist_ != nullptr) {
    delete _impl_.removeblacklist_;
  }
  _impl_.removeblacklist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportplayerbirth_ != nullptr) {
    delete _impl_.reportplayerbirth_;
  }
  _impl_.reportplayerbirth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportinfoinput_ != nullptr) {
    delete _impl_.reportinfoinput_;
  }
  _impl_.reportinfoinput_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcode_ != nullptr) {
    delete _impl_.sendverificationcode_;
  }
  _impl_.sendverificationcode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindphonenumber_ != nullptr) {
    delete _impl_.bindphonenumber_;
  }
  _impl_.bindphonenumber_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worldinvite_ != nullptr) {
    delete _impl_.worldinvite_;
  }
  _impl_.worldinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeexpireitem_ != nullptr) {
    delete _impl_.removeexpireitem_;
  }
  _impl_.removeexpireitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmallgoods_ != nullptr) {
    delete _impl_.getmallgoods_;
  }
  _impl_.getmallgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buymallgoods_ != nullptr) {
    delete _impl_.buymallgoods_;
  }
  _impl_.buymallgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindsharingcode_ != nullptr) {
    delete _impl_.bindsharingcode_;
  }
  _impl_.bindsharingcode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxblessbag_ != nullptr) {
    delete _impl_.wxblessbag_;
  }
  _impl_.wxblessbag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatefriendsingame_ != nullptr) {
    delete _impl_.updatefriendsingame_;
  }
  _impl_.updatefriendsingame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sharereward_ != nullptr) {
    delete _impl_.sharereward_;
  }
  _impl_.sharereward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allfightinfo_ != nullptr) {
    delete _impl_.allfightinfo_;
  }
  _impl_.allfightinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getoldplayer_ != nullptr) {
    delete _impl_.getoldplayer_;
  }
  _impl_.getoldplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldplayer_ != nullptr) {
    delete _impl_.bindoldplayer_;
  }
  _impl_.bindoldplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcodewithcheckredis_ != nullptr) {
    delete _impl_.sendverificationcodewithcheckredis_;
  }
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportsetting_ != nullptr) {
    delete _impl_.reportsetting_;
  }
  _impl_.reportsetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.antidata_ != nullptr) {
    delete _impl_.antidata_;
  }
  _impl_.antidata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tlogdata_ != nullptr) {
    delete _impl_.tlogdata_;
  }
  _impl_.tlogdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.daysign_ != nullptr) {
    delete _impl_.daysign_;
  }
  _impl_.daysign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dayfitavoid_ != nullptr) {
    delete _impl_.dayfitavoid_;
  }
  _impl_.dayfitavoid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sharecountaward_ != nullptr) {
    delete _impl_.sharecountaward_;
  }
  _impl_.sharecountaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.actitemexch_ != nullptr) {
    delete _impl_.actitemexch_;
  }
  _impl_.actitemexch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.realationstar_ != nullptr) {
    delete _impl_.realationstar_;
  }
  _impl_.realationstar_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstarinvitesucc_ != nullptr) {
    delete _impl_.getrealationstarinvitesucc_;
  }
  _impl_.getrealationstarinvitesucc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstar_ != nullptr) {
    delete _impl_.getrealationstar_;
  }
  _impl_.getrealationstar_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reqactrecord_ != nullptr) {
    delete _impl_.reqactrecord_;
  }
  _impl_.reqactrecord_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoiceteam_ != nullptr) {
    delete _impl_.joinvoiceteam_;
  }
  _impl_.joinvoiceteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicepvp_ != nullptr) {
    delete _impl_.joinvoicepvp_;
  }
  _impl_.joinvoicepvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicecamp_ != nullptr) {
    delete _impl_.joinvoicecamp_;
  }
  _impl_.joinvoicecamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usercountryset_ != nullptr) {
    delete _impl_.usercountryset_;
  }
  _impl_.usercountryset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offlineinvitejointeam_ != nullptr) {
    delete _impl_.offlineinvitejointeam_;
  }
  _impl_.offlineinvitejointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observe_ != nullptr) {
    delete _impl_.observe_;
  }
  _impl_.observe_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getrecommendpvp_ != nullptr) {
    delete _impl_.getrecommendpvp_;
  }
  _impl_.getrecommendpvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observelogin_ != nullptr) {
    delete _impl_.observelogin_;
  }
  _impl_.observelogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quitobserve_ != nullptr) {
    delete _impl_.quitobserve_;
  }
  _impl_.quitobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveinfo_ != nullptr) {
    delete _impl_.getobserveinfo_;
  }
  _impl_.getobserveinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.freeflow_ != nullptr) {
    delete _impl_.freeflow_;
  }
  _impl_.freeflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setpushtoken_ != nullptr) {
    delete _impl_.setpushtoken_;
  }
  _impl_.setpushtoken_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tlogevent_ != nullptr) {
    delete _impl_.tlogevent_;
  }
  _impl_.tlogevent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxvvipaward_ != nullptr) {
    delete _impl_.wxvvipaward_;
  }
  _impl_.wxvvipaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relationstarwx_ != nullptr) {
    delete _impl_.relationstarwx_;
  }
  _impl_.relationstarwx_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendwxredpacket_ != nullptr) {
    delete _impl_.sendwxredpacket_;
  }
  _impl_.sendwxredpacket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recvwxredpacket_ != nullptr) {
    delete _impl_.recvwxredpacket_;
  }
  _impl_.recvwxredpacket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktlike_ != nullptr) {
    delete _impl_.wxredpktlike_;
  }
  _impl_.wxredpktlike_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktrank_ != nullptr) {
    delete _impl_.wxredpktrank_;
  }
  _impl_.wxredpktrank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setobserveprivilege_ != nullptr) {
    delete _impl_.setobserveprivilege_;
  }
  _impl_.setobserveprivilege_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.presetfastchat_ != nullptr) {
    delete _impl_.presetfastchat_;
  }
  _impl_.presetfastchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changeslotteam_ != nullptr) {
    delete _impl_.changeslotteam_;
  }
  _impl_.changeslotteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changesubmodeteam_ != nullptr) {
    delete _impl_.changesubmodeteam_;
  }
  _impl_.changesubmodeteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.confirmchangeslotteam_ != nullptr) {
    delete _impl_.confirmchangeslotteam_;
  }
  _impl_.confirmchangeslotteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvproundend_ != nullptr) {
    delete _impl_.pvproundend_;
  }
  _impl_.pvproundend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observechatlogin_ != nullptr) {
    delete _impl_.observechatlogin_;
  }
  _impl_.observechatlogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpconfirm_ != nullptr) {
    delete _impl_.pvpconfirm_;
  }
  _impl_.pvpconfirm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activitypicshare_ != nullptr) {
    delete _impl_.activitypicshare_;
  }
  _impl_.activitypicshare_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldbusinessplayer_ != nullptr) {
    delete _impl_.bindoldbusinessplayer_;
  }
  _impl_.bindoldbusinessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.translate_ != nullptr) {
    delete _impl_.translate_;
  }
  _impl_.translate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.submitquestionnaire_ != nullptr) {
    delete _impl_.submitquestionnaire_;
  }
  _impl_.submitquestionnaire_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelchangeslot_ != nullptr) {
    delete _impl_.cancelchangeslot_;
  }
  _impl_.cancelchangeslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setchessskin_ != nullptr) {
    delete _impl_.setchessskin_;
  }
  _impl_.setchessskin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessskin_ != nullptr) {
    delete _impl_.unsetchessskin_;
  }
  _impl_.unsetchessskin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.compose_ != nullptr) {
    delete _impl_.compose_;
  }
  _impl_.compose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offhelpreddot_ != nullptr) {
    delete _impl_.offhelpreddot_;
  }
  _impl_.offhelpreddot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changelanguage_ != nullptr) {
    delete _impl_.changelanguage_;
  }
  _impl_.changelanguage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.videoplay_ != nullptr) {
    delete _impl_.videoplay_;
  }
  _impl_.videoplay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setprovince_ != nullptr) {
    delete _impl_.setprovince_;
  }
  _impl_.setprovince_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.longyuanvoice_ != nullptr) {
    delete _impl_.longyuanvoice_;
  }
  _impl_.longyuanvoice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enrolltournament_ != nullptr) {
    delete _impl_.enrolltournament_;
  }
  _impl_.enrolltournament_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jointournamentroom_ != nullptr) {
    delete _impl_.jointournamentroom_;
  }
  _impl_.jointournamentroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentpointaward_ != nullptr) {
    delete _impl_.tournamentpointaward_;
  }
  _impl_.tournamentpointaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dealwebmail_ != nullptr) {
    delete _impl_.dealwebmail_;
  }
  _impl_.dealwebmail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getenrollplayers_ != nullptr) {
    delete _impl_.getenrollplayers_;
  }
  _impl_.getenrollplayers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.challengeagain_ != nullptr) {
    delete _impl_.challengeagain_;
  }
  _impl_.challengeagain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.historychat_ != nullptr) {
    delete _impl_.historychat_;
  }
  _impl_.historychat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setfriendinvisible_ != nullptr) {
    delete _impl_.setfriendinvisible_;
  }
  _impl_.setfriendinvisible_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveaward_ != nullptr) {
    delete _impl_.getobserveaward_;
  }
  _impl_.getobserveaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inviteobserve_ != nullptr) {
    delete _impl_.inviteobserve_;
  }
  _impl_.inviteobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rejectobserve_ != nullptr) {
    delete _impl_.rejectobserve_;
  }
  _impl_.rejectobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gettxplayer_ != nullptr) {
    delete _impl_.gettxplayer_;
  }
  _impl_.gettxplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.choosetxplayer_ != nullptr) {
    delete _impl_.choosetxplayer_;
  }
  _impl_.choosetxplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getthirdpvpinfo_ != nullptr) {
    delete _impl_.getthirdpvpinfo_;
  }
  _impl_.getthirdpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.markplayerguide_ != nullptr) {
    delete _impl_.markplayerguide_;
  }
  _impl_.markplayerguide_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.markchessskinclicked_ != nullptr) {
    delete _impl_.markchessskinclicked_;
  }
  _impl_.markchessskinclicked_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recruitinviteplayer_ != nullptr) {
    delete _impl_.recruitinviteplayer_;
  }
  _impl_.recruitinviteplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recruitbindinviter_ != nullptr) {
    delete _impl_.recruitbindinviter_;
  }
  _impl_.recruitbindinviter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.queryps4entitlements_ != nullptr) {
    delete _impl_.queryps4entitlements_;
  }
  _impl_.queryps4entitlements_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.actdaysign_ != nullptr) {
    delete _impl_.actdaysign_;
  }
  _impl_.actdaysign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.havethirdpvpinfo_ != nullptr) {
    delete _impl_.havethirdpvpinfo_;
  }
  _impl_.havethirdpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activitymall_ != nullptr) {
    delete _impl_.activitymall_;
  }
  _impl_.activitymall_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.psonly_ != nullptr) {
    delete _impl_.psonly_;
  }
  _impl_.psonly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changechanneltype_ != nullptr) {
    delete _impl_.changechanneltype_;
  }
  _impl_.changechanneltype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.customcardopt_ != nullptr) {
    delete _impl_.customcardopt_;
  }
  _impl_.customcardopt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.staticsreport_ != nullptr) {
    delete _impl_.staticsreport_;
  }
  _impl_.staticsreport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.championhistory_ != nullptr) {
    delete _impl_.championhistory_;
  }
  _impl_.championhistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentlasttoprank_ != nullptr) {
    delete _impl_.tournamentlasttoprank_;
  }
  _impl_.tournamentlasttoprank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerexpandmatch_ != nullptr) {
    delete _impl_.bigwinnerexpandmatch_;
  }
  _impl_.bigwinnerexpandmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerdailyaward_ != nullptr) {
    delete _impl_.bigwinnerdailyaward_;
  }
  _impl_.bigwinnerdailyaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerscorehistory_ != nullptr) {
    delete _impl_.bigwinnerscorehistory_;
  }
  _impl_.bigwinnerscorehistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.smeltitem_ != nullptr) {
    delete _impl_.smeltitem_;
  }
  _impl_.smeltitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pveuptalentlevel_ != nullptr) {
    delete _impl_.pveuptalentlevel_;
  }
  _impl_.pveuptalentlevel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.luckyaward_ != nullptr) {
    delete _impl_.luckyaward_;
  }
  _impl_.luckyaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applychannel_ != nullptr) {
    delete _impl_.applychannel_;
  }
  _impl_.applychannel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamop_ != nullptr) {
    delete _impl_.teamop_;
  }
  _impl_.teamop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.obteaminfo_ != nullptr) {
    delete _impl_.obteaminfo_;
  }
  _impl_.obteaminfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.headiconurl_ != nullptr) {
    delete _impl_.headiconurl_;
  }
  _impl_.headiconurl_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpvpservergroup_ != nullptr) {
    delete _impl_.getpvpservergroup_;
  }
  _impl_.getpvpservergroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportpvpinfo_ != nullptr) {
    delete _impl_.reportpvpinfo_;
  }
  _impl_.reportpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chooseplayer_ != nullptr) {
    delete _impl_.chooseplayer_;
  }
  _impl_.chooseplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pingtest_ != nullptr) {
    delete _impl_.pingtest_;
  }
  _impl_.pingtest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportregioninfo_ != nullptr) {
    delete _impl_.reportregioninfo_;
  }
  _impl_.reportregioninfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recalledplaeyr_ != nullptr) {
    delete _impl_.recalledplaeyr_;
  }
  _impl_.recalledplaeyr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.weblogin_ != nullptr) {
    delete _impl_.weblogin_;
  }
  _impl_.weblogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.invitecodereset_ != nullptr) {
    delete _impl_.invitecodereset_;
  }
  _impl_.invitecodereset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recallreward_ != nullptr) {
    delete _impl_.recallreward_;
  }
  _impl_.recallreward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchtocommonmatch_ != nullptr) {
    delete _impl_.switchtocommonmatch_;
  }
  _impl_.switchtocommonmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchmodeinteam_ != nullptr) {
    delete _impl_.switchmodeinteam_;
  }
  _impl_.switchmodeinteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gettnroomstate_ != nullptr) {
    delete _impl_.gettnroomstate_;
  }
  _impl_.gettnroomstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workshopmatch_ != nullptr) {
    delete _impl_.workshopmatch_;
  }
  _impl_.workshopmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buyworkshopticket_ != nullptr) {
    delete _impl_.buyworkshopticket_;
  }
  _impl_.buyworkshopticket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.favouriteworkshopmap_ != nullptr) {
    delete _impl_.favouriteworkshopmap_;
  }
  _impl_.favouriteworkshopmap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shortcutmapsop_ != nullptr) {
    delete _impl_.shortcutmapsop_;
  }
  _impl_.shortcutmapsop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerstournamentinfo_ != nullptr) {
    delete _impl_.playerstournamentinfo_;
  }
  _impl_.playerstournamentinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scoreworkshopmap_ != nullptr) {
    delete _impl_.scoreworkshopmap_;
  }
  _impl_.scoreworkshopmap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mapsvisitedbyfriends_ != nullptr) {
    delete _impl_.mapsvisitedbyfriends_;
  }
  _impl_.mapsvisitedbyfriends_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.verifyrealname_ != nullptr) {
    delete _impl_.verifyrealname_;
  }
  _impl_.verifyrealname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fakepay_ != nullptr) {
    delete _impl_.fakepay_;
  }
  _impl_.fakepay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildcreate_ != nullptr) {
    delete _impl_.guildcreate_;
  }
  _impl_.guildcreate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildapply_ != nullptr) {
    delete _impl_.guildapply_;
  }
  _impl_.guildapply_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildhome_ != nullptr) {
    delete _impl_.guildhome_;
  }
  _impl_.guildhome_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildapprove_ != nullptr) {
    delete _impl_.guildapprove_;
  }
  _impl_.guildapprove_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrole_ != nullptr) {
    delete _impl_.guildrole_;
  }
  _impl_.guildrole_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildmodify_ != nullptr) {
    delete _impl_.guildmodify_;
  }
  _impl_.guildmodify_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildkickoff_ != nullptr) {
    delete _impl_.guildkickoff_;
  }
  _impl_.guildkickoff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guilddismiss_ != nullptr) {
    delete _impl_.guilddismiss_;
  }
  _impl_.guilddismiss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildexit_ != nullptr) {
    delete _impl_.guildexit_;
  }
  _impl_.guildexit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildchat_ != nullptr) {
    delete _impl_.guildchat_;
  }
  _impl_.guildchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildlist_ != nullptr) {
    delete _impl_.guildlist_;
  }
  _impl_.guildlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrecommendplayers_ != nullptr) {
    delete _impl_.guildrecommendplayers_;
  }
  _impl_.guildrecommendplayers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvitelist_ != nullptr) {
    delete _impl_.guildinvitelist_;
  }
  _impl_.guildinvitelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvite_ != nullptr) {
    delete _impl_.guildinvite_;
  }
  _impl_.guildinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildresign_ != nullptr) {
    delete _impl_.guildresign_;
  }
  _impl_.guildresign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrejectinvite_ != nullptr) {
    delete _impl_.guildrejectinvite_;
  }
  _impl_.guildrejectinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getvngcommentaward_ != nullptr) {
    delete _impl_.getvngcommentaward_;
  }
  _impl_.getvngcommentaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.levelupchest_ != nullptr) {
    delete _impl_.levelupchest_;
  }
  _impl_.levelupchest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.watchad_ != nullptr) {
    delete _impl_.watchad_;
  }
  _impl_.watchad_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pstournamentroom_ != nullptr) {
    delete _impl_.pstournamentroom_;
  }
  _impl_.pstournamentroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getadcumulateaward_ != nullptr) {
    delete _impl_.getadcumulateaward_;
  }
  _impl_.getadcumulateaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setmessengerpos_ != nullptr) {
    delete _impl_.setmessengerpos_;
  }
  _impl_.setmessengerpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updateantiaddictiontime_ != nullptr) {
    delete _impl_.updateantiaddictiontime_;
  }
  _impl_.updateantiaddictiontime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelreconnect_ != nullptr) {
    delete _impl_.cancelreconnect_;
  }
  _impl_.cancelreconnect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reconnect_ != nullptr) {
    delete _impl_.reconnect_;
  }
  _impl_.reconnect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passthrough_ != nullptr) {
    delete _impl_.passthrough_;
  }
  _impl_.passthrough_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visitplayer_ != nullptr) {
    delete _impl_.visitplayer_;
  }
  _impl_.visitplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leavegameearly_ != nullptr) {
    delete _impl_.leavegameearly_;
  }
  _impl_.leavegameearly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gdcommonbin_ != nullptr) {
    delete _impl_.gdcommonbin_;
  }
  _impl_.gdcommonbin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gdbindata_ != nullptr) {
    delete _impl_.gdbindata_;
  }
  _impl_.gdbindata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autobattleop_ != nullptr) {
    delete _impl_.autobattleop_;
  }
  _impl_.autobattleop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.restrictuser_ != nullptr) {
    delete _impl_.restrictuser_;
  }
  _impl_.restrictuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.equipselectrate_ != nullptr) {
    delete _impl_.equipselectrate_;
  }
  _impl_.equipselectrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportabsent_ != nullptr) {
    delete _impl_.reportabsent_;
  }
  _impl_.reportabsent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendweek_ != nullptr) {
    delete _impl_.recommendweek_;
  }
  _impl_.recommendweek_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendofficial_ != nullptr) {
    delete _impl_.recommendofficial_;
  }
  _impl_.recommendofficial_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendlatest_ != nullptr) {
    delete _impl_.recommendlatest_;
  }
  _impl_.recommendlatest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendhistory_ != nullptr) {
    delete _impl_.recommendhistory_;
  }
  _impl_.recommendhistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendcollect_ != nullptr) {
    delete _impl_.recommendcollect_;
  }
  _impl_.recommendcollect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendset_ != nullptr) {
    delete _impl_.recommendset_;
  }
  _impl_.recommendset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendgetcollection_ != nullptr) {
    delete _impl_.recommendgetcollection_;
  }
  _impl_.recommendgetcollection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendequip_ != nullptr) {
    delete _impl_.recommendequip_;
  }
  _impl_.recommendequip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logincancel_ != nullptr) {
    delete _impl_.logincancel_;
  }
  _impl_.logincancel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.convertdebris_ != nullptr) {
    delete _impl_.convertdebris_;
  }
  _impl_.convertdebris_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectioncard_ != nullptr) {
    delete _impl_.protectioncard_;
  }
  _impl_.protectioncard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usepassportcard_ != nullptr) {
    delete _impl_.usepassportcard_;
  }
  _impl_.usepassportcard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setmedal_ != nullptr) {
    delete _impl_.setmedal_;
  }
  _impl_.setmedal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetmedal_ != nullptr) {
    delete _impl_.unsetmedal_;
  }
  _impl_.unsetmedal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playermedals_ != nullptr) {
    delete _impl_.playermedals_;
  }
  _impl_.playermedals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatehotdot_ != nullptr) {
    delete _impl_.updatehotdot_;
  }
  _impl_.updatehotdot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.queryhotdot_ != nullptr) {
    delete _impl_.queryhotdot_;
  }
  _impl_.queryhotdot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setcache_ != nullptr) {
    delete _impl_.setcache_;
  }
  _impl_.setcache_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getcache_ != nullptr) {
    delete _impl_.getcache_;
  }
  _impl_.getcache_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buychallengecount_ != nullptr) {
    delete _impl_.buychallengecount_;
  }
  _impl_.buychallengecount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpverank_ != nullptr) {
    delete _impl_.getpverank_;
  }
  _impl_.getpverank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.authaccount_ != nullptr) {
    delete _impl_.authaccount_;
  }
  _impl_.authaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unbindaccount_ != nullptr) {
    delete _impl_.unbindaccount_;
  }
  _impl_.unbindaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bagtoitem_ != nullptr) {
    delete _impl_.bagtoitem_;
  }
  _impl_.bagtoitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.identifyitem_ != nullptr) {
    delete _impl_.identifyitem_;
  }
  _impl_.identifyitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insetitemaffix_ != nullptr) {
    delete _impl_.insetitemaffix_;
  }
  _impl_.insetitemaffix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitemaffix_ != nullptr) {
    delete _impl_.unsetitemaffix_;
  }
  _impl_.unsetitemaffix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setdefaultattributes_ != nullptr) {
    delete _impl_.setdefaultattributes_;
  }
  _impl_.setdefaultattributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.checkcancel_ != nullptr) {
    delete _impl_.checkcancel_;
  }
  _impl_.checkcancel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelaccount_ != nullptr) {
    delete _impl_.cancelaccount_;
  }
  _impl_.cancelaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.oauthapp_ != nullptr) {
    delete _impl_.oauthapp_;
  }
  _impl_.oauthapp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getselfnumrankdata_ != nullptr) {
    delete _impl_.getselfnumrankdata_;
  }
  _impl_.getselfnumrankdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroup_ != nullptr) {
    delete _impl_.updatecardgroup_;
  }
  _impl_.updatecardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupname_ != nullptr) {
    delete _impl_.updatecardgroupname_;
  }
  _impl_.updatecardgroupname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buypvebuff_ != nullptr) {
    delete _impl_.buypvebuff_;
  }
  _impl_.buypvebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setcardgroup_ != nullptr) {
    delete _impl_.setcardgroup_;
  }
  _impl_.setcardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buypvechesstemplate_ != nullptr) {
    delete _impl_.buypvechesstemplate_;
  }
  _impl_.buypvechesstemplate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pveunlockchesstemplate_ != nullptr) {
    delete _impl_.pveunlockchesstemplate_;
  }
  _impl_.pveunlockchesstemplate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvesetteamdebuff_ != nullptr) {
    delete _impl_.pvesetteamdebuff_;
  }
  _impl_.pvesetteamdebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chosecardgroup_ != nullptr) {
    delete _impl_.chosecardgroup_;
  }
  _impl_.chosecardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeovertimebuff_ != nullptr) {
    delete _impl_.removeovertimebuff_;
  }
  _impl_.removeovertimebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatenewcardgroupsign_ != nullptr) {
    delete _impl_.updatenewcardgroupsign_;
  }
  _impl_.updatenewcardgroupsign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdgetonhookaward_ != nullptr) {
    delete _impl_.tdgetonhookaward_;
  }
  _impl_.tdgetonhookaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tddraw_ != nullptr) {
    delete _impl_.tddraw_;
  }
  _impl_.tddraw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdbuycard_ != nullptr) {
    delete _impl_.tdbuycard_;
  }
  _impl_.tdbuycard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdsetcardgroup_ != nullptr) {
    delete _impl_.tdsetcardgroup_;
  }
  _impl_.tdsetcardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdlevelup_ != nullptr) {
    delete _impl_.tdlevelup_;
  }
  _impl_.tdlevelup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdequip_ != nullptr) {
    delete _impl_.tdequip_;
  }
  _impl_.tdequip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorupdatesetting_ != nullptr) {
    delete _impl_.mentorupdatesetting_;
  }
  _impl_.mentorupdatesetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinvite_ != nullptr) {
    delete _impl_.mentorinvite_;
  }
  _impl_.mentorinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorconfirminvite_ != nullptr) {
    delete _impl_.mentorconfirminvite_;
  }
  _impl_.mentorconfirminvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrecommendlist_ != nullptr) {
    delete _impl_.mentorrecommendlist_;
  }
  _impl_.mentorrecommendlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgettaskaward_ != nullptr) {
    delete _impl_.mentorgettaskaward_;
  }
  _impl_.mentorgettaskaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgraduate_ != nullptr) {
    delete _impl_.mentorgraduate_;
  }
  _impl_.mentorgraduate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrelieverelation_ != nullptr) {
    delete _impl_.mentorrelieverelation_;
  }
  _impl_.mentorrelieverelation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmentorinfo_ != nullptr) {
    delete _impl_.getmentorinfo_;
  }
  _impl_.getmentorinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgetinvitemsg_ != nullptr) {
    delete _impl_.mentorgetinvitemsg_;
  }
  _impl_.mentorgetinvitemsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupbetter_ != nullptr) {
    delete _impl_.updatecardgroupbetter_;
  }
  _impl_.updatecardgroupbetter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupsetting_ != nullptr) {
    delete _impl_.updatecardgroupsetting_;
  }
  _impl_.updatecardgroupsetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setcontent_ != nullptr) {
    delete _impl_.setcontent_;
  }
  _impl_.setcontent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getbalance_ != nullptr) {
    delete _impl_.getbalance_;
  }
  _impl_.getbalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rechargebalance_ != nullptr) {
    delete _impl_.rechargebalance_;
  }
  _impl_.rechargebalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.withdrawbalance_ != nullptr) {
    delete _impl_.withdrawbalance_;
  }
  _impl_.withdrawbalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.personalrecommendmall_ != nullptr) {
    delete _impl_.personalrecommendmall_;
  }
  _impl_.personalrecommendmall_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmedalchestaward_ != nullptr) {
    delete _impl_.getmedalchestaward_;
  }
  _impl_.getmedalchestaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setitemautouse_ != nullptr) {
    delete _impl_.setitemautouse_;
  }
  _impl_.setitemautouse_ = nullptr;
  _impl_.seq_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqHeart Heart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLogin Login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqVersionCheck VersionCheck = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_versioncheck(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqResourceVersionCheck ResourceVersionCheck = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourceversioncheck(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqApplyHallServer ApplyHallServer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_applyhallserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetNumRank GetNumRank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_getnumrank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWorldChat WorldChat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayersBaseInfo PlayersBaseInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersbaseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayerDetailInfo PlayerDetailInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerdetailinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReadMail ReadMail = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_readmail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetMailAward GetMailAward = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmailaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyEgg BuyEgg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyegg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUserNameSet UserNameSet = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_usernameset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUserNameRandom UserNameRandom = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_usernamerandom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqHeadPicSet HeadPicSet = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_headpicset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPvp Pvp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqDressChessPlayer DressChessPlayer = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_dresschessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqDressScene DressScene = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_dressscene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPvpLogin PvpLogin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvplogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPvpEnd PvpEnd = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayerFinish PlayerFinish = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerfinish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayerQuit PlayerQuit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerquit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSellItem SellItem = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_sellitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetEvalAward GetEvalAward = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_getevalaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUseChessPlayer UseChessPlayer = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_usechessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuidReport GuidReport = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_guidreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetCodeAward GetCodeAward = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcodeaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRoundReport RoundReport = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLoadingProgress LoadingProgress = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadingprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPvpChat PvpChat = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChessCombine ChessCombine = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesscombine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqExpose Expose = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqApplyOrderId ApplyOrderId = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_applyorderid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportOrderInfo ReportOrderInfo = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportorderinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetItem SetItem = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_setitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnsetItem UnsetItem = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRandomItem RandomItem = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_randomitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChat Chat = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetChessPlayer SetChessPlayer = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_setchessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnsetChessPlayer UnsetChessPlayer = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetchessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetFansList GetFansList = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfanslist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqFollowPlayer FollowPlayer = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_followplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnfollowPlayer UnfollowPlayer = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_unfollowplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayersStatusInfo PlayersStatusInfo = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersstatusinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqInviteJoinTeam InviteJoinTeam = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitejointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqJoinTeam JoinTeam = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_jointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqKickOffTeamPlayer KickOffTeamPlayer = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickoffteamplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTeamMsg TeamMsg = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_teammsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTeamReady TeamReady = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportPayResponse ReportPayResponse = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportpayresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRejectJoinTeam RejectJoinTeam = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectjointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqShieldChat ShieldChat = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_shieldchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyPassportLevel BuyPassportLevel = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypassportlevel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpgradePassport UpgradePassport = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradepassport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetPassportLevelAward GetPassportLevelAward = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpassportlevelaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetPassportTaskAward GetPassportTaskAward = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpassporttaskaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTelBook TelBook = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_telbook(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqActivatePassport ActivatePassport = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_activatepassport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRankSeasonEval RankSeasonEval = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_rankseasoneval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBindAccount BindAccount = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqIncAdShowCount IncAdsShowCount = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_incadsshowcount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUseBonusCard UseBonusCard = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_usebonuscard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetSeasonAward GetSeasonAward = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getseasonaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetAlphaActivityAward GetAlphaActivityAward = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getalphaactivityaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetLanguageData GetLanguageData = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlanguagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetActivityAward GetActivityAward = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getactivityaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetActivityData GetActivityData = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getactivitydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSendSms SendSms = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendsms(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetMeleeAward GetMeleeAward = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmeleeaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqAddAiToTeam AddAiToTeam = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_addaitoteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqShare Share = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_share(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSkipInterface SkipInterface = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_skipinterface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTeamGame TeamGame = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamgame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetTeamMode SetTeamMode = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_setteammode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetHistoryPvpShowPermission HistoryPvpShowPermission = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_historypvpshowpermission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSearchTeam SearchTeam = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqApplyChat ApplyChat = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_applychat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChatLogin ChatLogin = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatlogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqProbeNetDelay ProbeNetDelay = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_probenetdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetEggs GetEggs = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_geteggs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyGoods BuyGoods = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_buygoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqExchangePassportGoods ExchangePassportGoods = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchangepassportgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUsePassportTaskCard UsePassportTaskCard = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_usepassporttaskcard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqOpenRandChest OpenRandChest = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_openrandchest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqEggLottery EggLottery = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_egglottery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqQueryDiamondBalance QueryDiamondBalance = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_querydiamondbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUseItem UseItem = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_useitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUseExperienceCard UseExperienceCard = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_useexperiencecard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRandTargetItem RandTargetItem = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_randtargetitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqAddBlacklist AddBlacklist = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_addblacklist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRemoveBlacklist RemoveBlacklist = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeblacklist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportPlayerBirth ReportPlayerBirth = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportplayerbirth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportInfoInput ReportInfoInput = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportinfoinput(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSendVerificationCode SendVerificationCode = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendverificationcode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBindPhoneNumber BindPhoneNumber = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindphonenumber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWorldInvite WorldInvite = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRemoveExpireItem RemoveExpireItem = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeexpireitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetMallGoods GetMallGoods = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmallgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyMallGoods BuyMallGoods = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_buymallgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBindSharingCode BindSharingCode = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindsharingcode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWXBlessBag WXBlessBag = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxblessbag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateFriendsInGame UpdateFriendsInGame = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatefriendsingame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqShareReward ShareReward = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharereward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqAllFightInfo AllFightInfo = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_allfightinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetOldPlayer GetOldPlayer = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getoldplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBindOldPlayer BindOldPlayer = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindoldplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendverificationcodewithcheckredis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportSetting ReportSetting = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportsetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqAntiData AntiData = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_antidata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTlogData TlogData = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tlogdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqDaySign DaySign = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_daysign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqDayFitAvoid DayFitAvoid = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_dayfitavoid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqShareCountAward ShareCountAward = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharecountaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqActItemExch ActItemExch = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_actitemexch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRealationStar RealationStar = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_realationstar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetRealationStarInviteSucc GetRealationStarInviteSucc = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrealationstarinvitesucc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetRealationStar GetRealationStar = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrealationstar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetActRecord ReqActRecord = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqactrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqJoinVoiceTeam JoinVoiceTeam = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoiceteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqJoinVoicePvp JoinVoicePvp = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoicepvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqJoinVoiceCamp JoinVoiceCamp = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoicecamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUserCountrySet UserCountrySet = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_usercountryset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqOfflineInviteJoinTeam OfflineInviteJoinTeam = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_offlineinvitejointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqObserve Observe = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_observe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetRecommendPvp GetRecommendPvp = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrecommendpvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqObserveLogin ObserveLogin = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_observelogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqQuitObserve QuitObserve = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quitobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetObserveInfo GetObserveInfo = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getobserveinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqFreeFlow FreeFlow = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetPushToken SetPushToken = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpushtoken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTlogEvent TlogEvent = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tlogevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWxVVipAward WxVVipAward = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxvvipaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetRelationStarWX RelationStarWX = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationstarwx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSendWxRedPacket SendWxRedPacket = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendwxredpacket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecvWxRedPacket RecvWxRedPacket = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_recvwxredpacket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWxRedPktLike WxRedPktLike = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxredpktlike(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWxRedPktRank WxRedPktRank = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxredpktrank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqObservePrivilege SetObservePrivilege = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_setobserveprivilege(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPresetFastChat PresetFastChat = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_presetfastchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChangeSlotTeam ChangeSlotTeam = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_changeslotteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChangeSubModeTeam ChangeSubModeTeam = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_changesubmodeteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqConfirmChangeSlotTeam ConfirmChangeSlotTeam = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmchangeslotteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPvpRoundEnd PvpRoundEnd = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvproundend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqObserveChatLogin ObserveChatLogin = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_observechatlogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPvpConfirm PvpConfirm = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpconfirm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqActivityPicShare ActivityPicShare = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitypicshare(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBindOldBusinessPlayer BindOldBusinessPlayer = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindoldbusinessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTranslate Translate = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSubmitQuestionnaire SubmitQuestionnaire = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_submitquestionnaire(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqCancelChangeSlot CancelChangeSlot = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelchangeslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetChessSkin SetChessSkin = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_setchessskin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnsetChessSkin UnsetChessSkin = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetchessskin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqCompose Compose = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_compose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqOffHelpReddot OffHelpReddot = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_offhelpreddot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqVideo Video = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChangeLanguage ChangeLanguage = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_changelanguage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportVideoPlay VideoPlay = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_videoplay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetProvince SetProvince = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_setprovince(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLongyuanVoice LongyuanVoice = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_longyuanvoice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqEnrollTournament EnrollTournament = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_enrolltournament(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqJoinTournamentRoom JoinTournamentRoom = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_jointournamentroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTournamentPointAward TournamentPointAward = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentpointaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqDealWebMail DealWebMail = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealwebmail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetEnrollPlayers GetEnrollPlayers = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getenrollplayers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChallengeAgain ChallengeAgain = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_challengeagain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqHistoryChatMsg HistoryChat = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_historychat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetFriendInvisible SetFriendInvisible = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_setfriendinvisible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetObserveAward GetObserveAward = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_getobserveaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqInviteObserve InviteObserve = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviteobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRejectObserve RejectObserve = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetTxPlayer GetTxPlayer = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettxplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChooseTxPlayer ChooseTxPlayer = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_choosetxplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetThirdPvpInfo GetThirdPvpInfo = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_getthirdpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMarkPlayerGuide MarkPlayerGuide = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_markplayerguide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMarkChessSkinClicked MarkChessSkinClicked = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_markchessskinclicked(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecruitInvitePlayer RecruitInvitePlayer = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_recruitinviteplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecruitBindInviter RecruitBindInviter = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_recruitbindinviter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqQueryPs4Entitlements QueryPs4Entitlements = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryps4entitlements(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqActDaySign ActDaySign = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_actdaysign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqHaveThirdPvp HaveThirdPvpInfo = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_havethirdpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqActivityMall ActivityMall = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitymall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPsOnly PsOnly = 187;
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_psonly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChangeChannelType ChangeChannelType = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_changechanneltype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqCustomCardOpt CustomCardOpt = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_customcardopt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqStaticsReport StaticsReport = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_staticsreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChampionHistory ChampionHistory = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_championhistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTournamentLastTopRank TournamentLastTopRank = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentlasttoprank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBigWinnerExpandMatch BigWinnerExpandMatch = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinnerexpandmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBigWinnerDailyAward BigWinnerDailyAward = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinnerdailyaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBigWinnerScoreHistory BigWinnerScoreHistory = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinnerscorehistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSmeltItem SmeltItem = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_smeltitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPVEUpTalentLevel PVEUpTalentLevel = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pveuptalentlevel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPVELuckyAward LuckyAward = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_luckyaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqApplyChannel ApplyChannel = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_applychannel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTeamOP TeamOP = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqOBTeamInfo OBTeamInfo = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_obteaminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportHeadIconUrl HeadIconUrl = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_headiconurl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetPvpServerGroup GetPvpServerGroup = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpvpservergroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportPvpInfo ReportPvpInfo = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChoosePlayer ChoosePlayer = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_chooseplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPingTest PingTest = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pingtest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportRegionInfo ReportRegionInfo = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportregioninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecalledPlayer RecalledPlaeyr = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_recalledplaeyr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWebLogin WebLogin = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_weblogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqInviteCodeReset InviteCodeReset = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitecodereset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecallReward RecallReward = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_recallreward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSwitchToCommonMatch SwitchToCommonMatch = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchtocommonmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSwitchModeInTeam SwitchModeInTeam = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchmodeinteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetTNRoomState GetTNRoomState = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettnroomstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWorkshopMatch WorkshopMatch = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_workshopmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyWorkshopTicket BuyWorkshopTicket = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyworkshopticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqFavouriteWorkshopMap FavouriteWorkshopMap = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_favouriteworkshopmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqShortcutMapsOP ShortcutMapsOP = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_shortcutmapsop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayersTournamentInfo PlayersTournamentInfo = 334;
      case 334:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerstournamentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqScoreWorkshopMap ScoreWorkshopMap = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoreworkshopmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMapsVisitedByFriends MapsVisitedByFriends = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapsvisitedbyfriends(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqVerifyRealName VerifyRealName = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_verifyrealname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqFakePay FakePay = 351;
      case 351:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_fakepay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildCreate GuildCreate = 360;
      case 360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildcreate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildApply GuildApply = 361;
      case 361:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildapply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildHome GuildHome = 362;
      case 362:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildhome(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildInfo GuildInfo = 364;
      case 364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildApprove GuildApprove = 365;
      case 365:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildapprove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildSetRole GuildRole = 366;
      case 366:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrole(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildModify GuildModify = 367;
      case 367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildmodify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildKickoff GuildKickoff = 368;
      case 368:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildkickoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildDismiss GuildDismiss = 369;
      case 369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_guilddismiss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildExit GuildExit = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildexit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildChat GuildChat = 371;
      case 371:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildList GuildList = 372;
      case 372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildRecommendPlayers GuildRecommendPlayers = 373;
      case 373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrecommendplayers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildInviteList GuildInviteList = 374;
      case 374:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinvitelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildInvite GuildInvite = 375;
      case 375:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildResign GuildResign = 376;
      case 376:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildresign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGuildRejectInvite GuildRejectInvite = 377;
      case 377:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrejectinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetVngCommentAward GetVngCommentAward = 390;
      case 390:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getvngcommentaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLevelupChest LevelupChest = 391;
      case 391:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_levelupchest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWatchAd WatchAd = 392;
      case 392:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqQueryPsTournamentRoom PsTournamentRoom = 393;
      case 393:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pstournamentroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetAdCumulateAward GetAdCumulateAward = 394;
      case 394:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getadcumulateaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetMessengerPos SetMessengerPos = 535;
      case 535:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_setmessengerpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateAntiAddictionTime UpdateAntiAddictionTime = 553;
      case 553:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateantiaddictiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqCancelReconnect CancelReconnect = 554;
      case 554:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelreconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReconnect Reconnect = 556;
      case 556:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPassThrough PassThrough = 563;
      case 563:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_passthrough(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqVisitPlayer VisitPlayer = 564;
      case 564:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_visitplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLeaveGameEarly LeaveGameEarly = 565;
      case 565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_leavegameearly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGDCommonBin GDCommonBin = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_gdcommonbin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGDCommonBinData GDBinData = 567;
      case 567:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_gdbindata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqAutoBattleOP AutoBattleOP = 568;
      case 568:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_autobattleop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRestrictUser RestrictUser = 569;
      case 569:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqEquipSelectRate EquipSelectRate = 570;
      case 570:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipselectrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqReportAbsent ReportAbsent = 571;
      case 571:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportabsent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendWeek RecommendWeek = 600;
      case 600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendweek(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendOfficial RecommendOfficial = 601;
      case 601:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendofficial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendLatest RecommendLatest = 602;
      case 602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendlatest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendHistory RecommendHistory = 603;
      case 603:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendhistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendCollect RecommendCollect = 604;
      case 604:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendcollect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendSet RecommendSet = 605;
      case 605:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendGetCollection RecommendGetCollection = 606;
      case 606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendgetcollection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRecommendEquip RecommendEquip = 607;
      case 607:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendequip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLoginCancel LoginCancel = 608;
      case 608:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_logincancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqConvertDebris ConvertDebris = 609;
      case 609:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convertdebris(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUseProtectionCard ProtectionCard = 610;
      case 610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectioncard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUsePassportCard UsePassportCard = 611;
      case 611:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_usepassportcard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetMedal SetMedal = 612;
      case 612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_setmedal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnSetMedal UnSetMedal = 613;
      case 613:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetmedal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPlayerMedals PlayerMedals = 614;
      case 614:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_playermedals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateHotDot UpdateHotDot = 615;
      case 615:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatehotdot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqQueryHotDot QueryHotDot = 616;
      case 616:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryhotdot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetCache SetCache = 617;
      case 617:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetCache GetCache = 618;
      case 618:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyChallengeCount BuyChallengeCount = 619;
      case 619:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buychallengecount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetPveRank GetPveRank = 620;
      case 620:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpverank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqLogin AuthAccount = 621;
      case 621:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_authaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnbindAccount UnbindAccount = 622;
      case 622:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbindaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBagToItem BagToItem = 623;
      case 623:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_bagtoitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqIdentifyItem IdentifyItem = 624;
      case 624:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifyitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqInsetItemAffix InsetItemAffix = 625;
      case 625:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_insetitemaffix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUnsetItemAffix UnsetItemAffix = 626;
      case 626:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetitemaffix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetDefaultAttributes SetDefaultAttributes = 627;
      case 627:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_setdefaultattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqCheckCancel CheckCancel = 628;
      case 628:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkcancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqCancelAccount CancelAccount = 629;
      case 629:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqOAuthApp OAuthApp = 630;
      case 630:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_oauthapp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetSelfNumRankData GetSelfNumRankData = 631;
      case 631:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_getselfnumrankdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateCardGroup UpdateCardGroup = 632;
      case 632:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateCardGroupName UpdateCardGroupName = 633;
      case 633:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroupname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyPveBuff BuyPveBuff = 634;
      case 634:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypvebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetCardGroup SetCardGroup = 635;
      case 635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqBuyPveChessTemplate BuyPveChessTemplate = 636;
      case 636:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypvechesstemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPveUnlockChessTemplate PveUnlockChessTemplate = 637;
      case 637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_pveunlockchesstemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPveSetTeamDeBuff PveSetTeamDeBuff = 638;
      case 638:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvesetteamdebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqChoseCardGroup ChoseCardGroup = 639;
      case 639:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_chosecardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRemoveOvertimeBuff RemoveOvertimeBuff = 640;
      case 640:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeovertimebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 643;
      case 643:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatenewcardgroupsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTDGetOnHookAward TDGetOnHookAward = 644;
      case 644:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdgetonhookaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CsReqTDDraw TDDraw = 645;
      case 645:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tddraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CsReqTDBuyCard TDBuyCard = 646;
      case 646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdbuycard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTDSetCardGroup TDSetCardGroup = 647;
      case 647:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdsetcardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTDLevelUp TDLevelUp = 648;
      case 648:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdlevelup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqTDEquip TDEquip = 649;
      case 649:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdequip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorUpdateSetting MentorUpdateSetting = 650;
      case 650:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorupdatesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorInvite MentorInvite = 651;
      case 651:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorConfirmInvite MentorConfirmInvite = 652;
      case 652:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorconfirminvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorRecommendList MentorRecommendList = 653;
      case 653:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorrecommendlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorGetTaskAward MentorGetTaskAward = 654;
      case 654:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorgettaskaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorGraduate MentorGraduate = 655;
      case 655:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorgraduate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorRelieveRelation MentorRelieveRelation = 656;
      case 656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorrelieverelation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetMentorInfo GetMentorInfo = 657;
      case 657:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmentorinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqMentorGetInviteMsg MentorGetInviteMsg = 658;
      case 658:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorgetinvitemsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateCardGroupBetter UpdateCardGroupBetter = 659;
      case 659:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroupbetter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqUpdateCardGroupSetting UpdateCardGroupSetting = 660;
      case 660:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroupsetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetContent SetContent = 661;
      case 661:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcontent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetBalance GetBalance = 662;
      case 662:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqRechargeBalance RechargeBalance = 663;
      case 663:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_rechargebalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqWithdrawBalance WithdrawBalance = 664;
      case 664:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqPersonalRecommendMall PersonalRecommendMall = 665;
      case 665:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_personalrecommendmall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqGetMedalChestAward GetMedalChestAward = 666;
      case 666:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmedalchestaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSReqSetItemAutoUse SetItemAutoUse = 667;
      case 667:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_setitemautouse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq(), target);
  }

  // .msg.CSReqHeart Heart = 2;
  if (this->_internal_has_heart()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::heart(this),
        _Internal::heart(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLogin Login = 3;
  if (this->_internal_has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::login(this),
        _Internal::login(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqVersionCheck VersionCheck = 4;
  if (this->_internal_has_versioncheck()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::versioncheck(this),
        _Internal::versioncheck(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqResourceVersionCheck ResourceVersionCheck = 5;
  if (this->_internal_has_resourceversioncheck()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::resourceversioncheck(this),
        _Internal::resourceversioncheck(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqApplyHallServer ApplyHallServer = 6;
  if (this->_internal_has_applyhallserver()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::applyhallserver(this),
        _Internal::applyhallserver(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetNumRank GetNumRank = 7;
  if (this->_internal_has_getnumrank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::getnumrank(this),
        _Internal::getnumrank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWorldChat WorldChat = 8;
  if (this->_internal_has_worldchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::worldchat(this),
        _Internal::worldchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayersBaseInfo PlayersBaseInfo = 9;
  if (this->_internal_has_playersbaseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::playersbaseinfo(this),
        _Internal::playersbaseinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayerDetailInfo PlayerDetailInfo = 10;
  if (this->_internal_has_playerdetailinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::playerdetailinfo(this),
        _Internal::playerdetailinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReadMail ReadMail = 11;
  if (this->_internal_has_readmail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::readmail(this),
        _Internal::readmail(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetMailAward GetMailAward = 12;
  if (this->_internal_has_getmailaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::getmailaward(this),
        _Internal::getmailaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyEgg BuyEgg = 13;
  if (this->_internal_has_buyegg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::buyegg(this),
        _Internal::buyegg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUserNameSet UserNameSet = 14;
  if (this->_internal_has_usernameset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::usernameset(this),
        _Internal::usernameset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUserNameRandom UserNameRandom = 15;
  if (this->_internal_has_usernamerandom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::usernamerandom(this),
        _Internal::usernamerandom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqHeadPicSet HeadPicSet = 16;
  if (this->_internal_has_headpicset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::headpicset(this),
        _Internal::headpicset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPvp Pvp = 17;
  if (this->_internal_has_pvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::pvp(this),
        _Internal::pvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqDressChessPlayer DressChessPlayer = 18;
  if (this->_internal_has_dresschessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::dresschessplayer(this),
        _Internal::dresschessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqDressScene DressScene = 19;
  if (this->_internal_has_dressscene()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::dressscene(this),
        _Internal::dressscene(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPvpLogin PvpLogin = 20;
  if (this->_internal_has_pvplogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::pvplogin(this),
        _Internal::pvplogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPvpEnd PvpEnd = 23;
  if (this->_internal_has_pvpend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::pvpend(this),
        _Internal::pvpend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayerFinish PlayerFinish = 24;
  if (this->_internal_has_playerfinish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::playerfinish(this),
        _Internal::playerfinish(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayerQuit PlayerQuit = 25;
  if (this->_internal_has_playerquit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::playerquit(this),
        _Internal::playerquit(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSellItem SellItem = 26;
  if (this->_internal_has_sellitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::sellitem(this),
        _Internal::sellitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetEvalAward GetEvalAward = 27;
  if (this->_internal_has_getevalaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::getevalaward(this),
        _Internal::getevalaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUseChessPlayer UseChessPlayer = 28;
  if (this->_internal_has_usechessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::usechessplayer(this),
        _Internal::usechessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuidReport GuidReport = 29;
  if (this->_internal_has_guidreport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::guidreport(this),
        _Internal::guidreport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetCodeAward GetCodeAward = 30;
  if (this->_internal_has_getcodeaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::getcodeaward(this),
        _Internal::getcodeaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRoundReport RoundReport = 31;
  if (this->_internal_has_roundreport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::roundreport(this),
        _Internal::roundreport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLoadingProgress LoadingProgress = 32;
  if (this->_internal_has_loadingprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::loadingprogress(this),
        _Internal::loadingprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPvpChat PvpChat = 33;
  if (this->_internal_has_pvpchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::pvpchat(this),
        _Internal::pvpchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChessCombine ChessCombine = 34;
  if (this->_internal_has_chesscombine()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::chesscombine(this),
        _Internal::chesscombine(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqExpose Expose = 35;
  if (this->_internal_has_expose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::expose(this),
        _Internal::expose(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqApplyOrderId ApplyOrderId = 36;
  if (this->_internal_has_applyorderid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::applyorderid(this),
        _Internal::applyorderid(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportOrderInfo ReportOrderInfo = 37;
  if (this->_internal_has_reportorderinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::reportorderinfo(this),
        _Internal::reportorderinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetItem SetItem = 38;
  if (this->_internal_has_setitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::setitem(this),
        _Internal::setitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnsetItem UnsetItem = 39;
  if (this->_internal_has_unsetitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::unsetitem(this),
        _Internal::unsetitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRandomItem RandomItem = 40;
  if (this->_internal_has_randomitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::randomitem(this),
        _Internal::randomitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChat Chat = 41;
  if (this->_internal_has_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetChessPlayer SetChessPlayer = 42;
  if (this->_internal_has_setchessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::setchessplayer(this),
        _Internal::setchessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnsetChessPlayer UnsetChessPlayer = 43;
  if (this->_internal_has_unsetchessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::unsetchessplayer(this),
        _Internal::unsetchessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetFansList GetFansList = 44;
  if (this->_internal_has_getfanslist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::getfanslist(this),
        _Internal::getfanslist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqFollowPlayer FollowPlayer = 45;
  if (this->_internal_has_followplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::followplayer(this),
        _Internal::followplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnfollowPlayer UnfollowPlayer = 46;
  if (this->_internal_has_unfollowplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::unfollowplayer(this),
        _Internal::unfollowplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayersStatusInfo PlayersStatusInfo = 47;
  if (this->_internal_has_playersstatusinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::playersstatusinfo(this),
        _Internal::playersstatusinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqInviteJoinTeam InviteJoinTeam = 48;
  if (this->_internal_has_invitejointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::invitejointeam(this),
        _Internal::invitejointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqJoinTeam JoinTeam = 49;
  if (this->_internal_has_jointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::jointeam(this),
        _Internal::jointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqKickOffTeamPlayer KickOffTeamPlayer = 50;
  if (this->_internal_has_kickoffteamplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::kickoffteamplayer(this),
        _Internal::kickoffteamplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTeamMsg TeamMsg = 51;
  if (this->_internal_has_teammsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::teammsg(this),
        _Internal::teammsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTeamReady TeamReady = 52;
  if (this->_internal_has_teamready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::teamready(this),
        _Internal::teamready(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportPayResponse ReportPayResponse = 53;
  if (this->_internal_has_reportpayresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::reportpayresponse(this),
        _Internal::reportpayresponse(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRejectJoinTeam RejectJoinTeam = 54;
  if (this->_internal_has_rejectjointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::rejectjointeam(this),
        _Internal::rejectjointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqShieldChat ShieldChat = 55;
  if (this->_internal_has_shieldchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::shieldchat(this),
        _Internal::shieldchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyPassportLevel BuyPassportLevel = 56;
  if (this->_internal_has_buypassportlevel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::buypassportlevel(this),
        _Internal::buypassportlevel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpgradePassport UpgradePassport = 57;
  if (this->_internal_has_upgradepassport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::upgradepassport(this),
        _Internal::upgradepassport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetPassportLevelAward GetPassportLevelAward = 58;
  if (this->_internal_has_getpassportlevelaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::getpassportlevelaward(this),
        _Internal::getpassportlevelaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetPassportTaskAward GetPassportTaskAward = 59;
  if (this->_internal_has_getpassporttaskaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::getpassporttaskaward(this),
        _Internal::getpassporttaskaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTelBook TelBook = 60;
  if (this->_internal_has_telbook()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::telbook(this),
        _Internal::telbook(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqActivatePassport ActivatePassport = 61;
  if (this->_internal_has_activatepassport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::activatepassport(this),
        _Internal::activatepassport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRankSeasonEval RankSeasonEval = 62;
  if (this->_internal_has_rankseasoneval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::rankseasoneval(this),
        _Internal::rankseasoneval(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBindAccount BindAccount = 63;
  if (this->_internal_has_bindaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::bindaccount(this),
        _Internal::bindaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqIncAdShowCount IncAdsShowCount = 64;
  if (this->_internal_has_incadsshowcount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::incadsshowcount(this),
        _Internal::incadsshowcount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUseBonusCard UseBonusCard = 65;
  if (this->_internal_has_usebonuscard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::usebonuscard(this),
        _Internal::usebonuscard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetSeasonAward GetSeasonAward = 66;
  if (this->_internal_has_getseasonaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::getseasonaward(this),
        _Internal::getseasonaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetAlphaActivityAward GetAlphaActivityAward = 67;
  if (this->_internal_has_getalphaactivityaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::getalphaactivityaward(this),
        _Internal::getalphaactivityaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetLanguageData GetLanguageData = 68;
  if (this->_internal_has_getlanguagedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::getlanguagedata(this),
        _Internal::getlanguagedata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetActivityAward GetActivityAward = 69;
  if (this->_internal_has_getactivityaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::getactivityaward(this),
        _Internal::getactivityaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetActivityData GetActivityData = 70;
  if (this->_internal_has_getactivitydata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::getactivitydata(this),
        _Internal::getactivitydata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSendSms SendSms = 71;
  if (this->_internal_has_sendsms()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::sendsms(this),
        _Internal::sendsms(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetMeleeAward GetMeleeAward = 72;
  if (this->_internal_has_getmeleeaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, _Internal::getmeleeaward(this),
        _Internal::getmeleeaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqAddAiToTeam AddAiToTeam = 73;
  if (this->_internal_has_addaitoteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, _Internal::addaitoteam(this),
        _Internal::addaitoteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqShare Share = 74;
  if (this->_internal_has_share()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::share(this),
        _Internal::share(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSkipInterface SkipInterface = 75;
  if (this->_internal_has_skipinterface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::skipinterface(this),
        _Internal::skipinterface(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTeamGame TeamGame = 76;
  if (this->_internal_has_teamgame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::teamgame(this),
        _Internal::teamgame(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetTeamMode SetTeamMode = 77;
  if (this->_internal_has_setteammode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::setteammode(this),
        _Internal::setteammode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetHistoryPvpShowPermission HistoryPvpShowPermission = 78;
  if (this->_internal_has_historypvpshowpermission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::historypvpshowpermission(this),
        _Internal::historypvpshowpermission(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSearchTeam SearchTeam = 79;
  if (this->_internal_has_searchteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::searchteam(this),
        _Internal::searchteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqApplyChat ApplyChat = 80;
  if (this->_internal_has_applychat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::applychat(this),
        _Internal::applychat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChatLogin ChatLogin = 81;
  if (this->_internal_has_chatlogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::chatlogin(this),
        _Internal::chatlogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqProbeNetDelay ProbeNetDelay = 82;
  if (this->_internal_has_probenetdelay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::probenetdelay(this),
        _Internal::probenetdelay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetEggs GetEggs = 83;
  if (this->_internal_has_geteggs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(83, _Internal::geteggs(this),
        _Internal::geteggs(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyGoods BuyGoods = 84;
  if (this->_internal_has_buygoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::buygoods(this),
        _Internal::buygoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqExchangePassportGoods ExchangePassportGoods = 85;
  if (this->_internal_has_exchangepassportgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::exchangepassportgoods(this),
        _Internal::exchangepassportgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUsePassportTaskCard UsePassportTaskCard = 86;
  if (this->_internal_has_usepassporttaskcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::usepassporttaskcard(this),
        _Internal::usepassporttaskcard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqOpenRandChest OpenRandChest = 87;
  if (this->_internal_has_openrandchest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::openrandchest(this),
        _Internal::openrandchest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqEggLottery EggLottery = 88;
  if (this->_internal_has_egglottery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::egglottery(this),
        _Internal::egglottery(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqQueryDiamondBalance QueryDiamondBalance = 89;
  if (this->_internal_has_querydiamondbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(89, _Internal::querydiamondbalance(this),
        _Internal::querydiamondbalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUseItem UseItem = 90;
  if (this->_internal_has_useitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, _Internal::useitem(this),
        _Internal::useitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUseExperienceCard UseExperienceCard = 91;
  if (this->_internal_has_useexperiencecard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, _Internal::useexperiencecard(this),
        _Internal::useexperiencecard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRandTargetItem RandTargetItem = 92;
  if (this->_internal_has_randtargetitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(92, _Internal::randtargetitem(this),
        _Internal::randtargetitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqAddBlacklist AddBlacklist = 93;
  if (this->_internal_has_addblacklist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(93, _Internal::addblacklist(this),
        _Internal::addblacklist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRemoveBlacklist RemoveBlacklist = 94;
  if (this->_internal_has_removeblacklist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(94, _Internal::removeblacklist(this),
        _Internal::removeblacklist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportPlayerBirth ReportPlayerBirth = 95;
  if (this->_internal_has_reportplayerbirth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(95, _Internal::reportplayerbirth(this),
        _Internal::reportplayerbirth(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportInfoInput ReportInfoInput = 96;
  if (this->_internal_has_reportinfoinput()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(96, _Internal::reportinfoinput(this),
        _Internal::reportinfoinput(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSendVerificationCode SendVerificationCode = 97;
  if (this->_internal_has_sendverificationcode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(97, _Internal::sendverificationcode(this),
        _Internal::sendverificationcode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBindPhoneNumber BindPhoneNumber = 98;
  if (this->_internal_has_bindphonenumber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(98, _Internal::bindphonenumber(this),
        _Internal::bindphonenumber(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWorldInvite WorldInvite = 99;
  if (this->_internal_has_worldinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::worldinvite(this),
        _Internal::worldinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRemoveExpireItem RemoveExpireItem = 100;
  if (this->_internal_has_removeexpireitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::removeexpireitem(this),
        _Internal::removeexpireitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetMallGoods GetMallGoods = 101;
  if (this->_internal_has_getmallgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::getmallgoods(this),
        _Internal::getmallgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyMallGoods BuyMallGoods = 102;
  if (this->_internal_has_buymallgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::buymallgoods(this),
        _Internal::buymallgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBindSharingCode BindSharingCode = 103;
  if (this->_internal_has_bindsharingcode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::bindsharingcode(this),
        _Internal::bindsharingcode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWXBlessBag WXBlessBag = 104;
  if (this->_internal_has_wxblessbag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::wxblessbag(this),
        _Internal::wxblessbag(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateFriendsInGame UpdateFriendsInGame = 105;
  if (this->_internal_has_updatefriendsingame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::updatefriendsingame(this),
        _Internal::updatefriendsingame(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqShareReward ShareReward = 106;
  if (this->_internal_has_sharereward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::sharereward(this),
        _Internal::sharereward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqAllFightInfo AllFightInfo = 107;
  if (this->_internal_has_allfightinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::allfightinfo(this),
        _Internal::allfightinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetOldPlayer GetOldPlayer = 108;
  if (this->_internal_has_getoldplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::getoldplayer(this),
        _Internal::getoldplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBindOldPlayer BindOldPlayer = 109;
  if (this->_internal_has_bindoldplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::bindoldplayer(this),
        _Internal::bindoldplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 110;
  if (this->_internal_has_sendverificationcodewithcheckredis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::sendverificationcodewithcheckredis(this),
        _Internal::sendverificationcodewithcheckredis(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportSetting ReportSetting = 111;
  if (this->_internal_has_reportsetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(111, _Internal::reportsetting(this),
        _Internal::reportsetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqAntiData AntiData = 112;
  if (this->_internal_has_antidata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(112, _Internal::antidata(this),
        _Internal::antidata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTlogData TlogData = 113;
  if (this->_internal_has_tlogdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, _Internal::tlogdata(this),
        _Internal::tlogdata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqDaySign DaySign = 114;
  if (this->_internal_has_daysign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(114, _Internal::daysign(this),
        _Internal::daysign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqDayFitAvoid DayFitAvoid = 115;
  if (this->_internal_has_dayfitavoid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, _Internal::dayfitavoid(this),
        _Internal::dayfitavoid(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqShareCountAward ShareCountAward = 116;
  if (this->_internal_has_sharecountaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, _Internal::sharecountaward(this),
        _Internal::sharecountaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqActItemExch ActItemExch = 117;
  if (this->_internal_has_actitemexch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::actitemexch(this),
        _Internal::actitemexch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRealationStar RealationStar = 118;
  if (this->_internal_has_realationstar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, _Internal::realationstar(this),
        _Internal::realationstar(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetRealationStarInviteSucc GetRealationStarInviteSucc = 119;
  if (this->_internal_has_getrealationstarinvitesucc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, _Internal::getrealationstarinvitesucc(this),
        _Internal::getrealationstarinvitesucc(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetRealationStar GetRealationStar = 120;
  if (this->_internal_has_getrealationstar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, _Internal::getrealationstar(this),
        _Internal::getrealationstar(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetActRecord ReqActRecord = 121;
  if (this->_internal_has_reqactrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(121, _Internal::reqactrecord(this),
        _Internal::reqactrecord(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqJoinVoiceTeam JoinVoiceTeam = 122;
  if (this->_internal_has_joinvoiceteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(122, _Internal::joinvoiceteam(this),
        _Internal::joinvoiceteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqJoinVoicePvp JoinVoicePvp = 123;
  if (this->_internal_has_joinvoicepvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::joinvoicepvp(this),
        _Internal::joinvoicepvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqJoinVoiceCamp JoinVoiceCamp = 124;
  if (this->_internal_has_joinvoicecamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(124, _Internal::joinvoicecamp(this),
        _Internal::joinvoicecamp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUserCountrySet UserCountrySet = 125;
  if (this->_internal_has_usercountryset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(125, _Internal::usercountryset(this),
        _Internal::usercountryset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqOfflineInviteJoinTeam OfflineInviteJoinTeam = 126;
  if (this->_internal_has_offlineinvitejointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(126, _Internal::offlineinvitejointeam(this),
        _Internal::offlineinvitejointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqObserve Observe = 127;
  if (this->_internal_has_observe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(127, _Internal::observe(this),
        _Internal::observe(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetRecommendPvp GetRecommendPvp = 128;
  if (this->_internal_has_getrecommendpvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, _Internal::getrecommendpvp(this),
        _Internal::getrecommendpvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqObserveLogin ObserveLogin = 129;
  if (this->_internal_has_observelogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(129, _Internal::observelogin(this),
        _Internal::observelogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqQuitObserve QuitObserve = 130;
  if (this->_internal_has_quitobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::quitobserve(this),
        _Internal::quitobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetObserveInfo GetObserveInfo = 131;
  if (this->_internal_has_getobserveinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(131, _Internal::getobserveinfo(this),
        _Internal::getobserveinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqFreeFlow FreeFlow = 132;
  if (this->_internal_has_freeflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(132, _Internal::freeflow(this),
        _Internal::freeflow(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetPushToken SetPushToken = 133;
  if (this->_internal_has_setpushtoken()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, _Internal::setpushtoken(this),
        _Internal::setpushtoken(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTlogEvent TlogEvent = 134;
  if (this->_internal_has_tlogevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(134, _Internal::tlogevent(this),
        _Internal::tlogevent(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWxVVipAward WxVVipAward = 135;
  if (this->_internal_has_wxvvipaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(135, _Internal::wxvvipaward(this),
        _Internal::wxvvipaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetRelationStarWX RelationStarWX = 136;
  if (this->_internal_has_relationstarwx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(136, _Internal::relationstarwx(this),
        _Internal::relationstarwx(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSendWxRedPacket SendWxRedPacket = 137;
  if (this->_internal_has_sendwxredpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(137, _Internal::sendwxredpacket(this),
        _Internal::sendwxredpacket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecvWxRedPacket RecvWxRedPacket = 138;
  if (this->_internal_has_recvwxredpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(138, _Internal::recvwxredpacket(this),
        _Internal::recvwxredpacket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWxRedPktLike WxRedPktLike = 139;
  if (this->_internal_has_wxredpktlike()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(139, _Internal::wxredpktlike(this),
        _Internal::wxredpktlike(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWxRedPktRank WxRedPktRank = 140;
  if (this->_internal_has_wxredpktrank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(140, _Internal::wxredpktrank(this),
        _Internal::wxredpktrank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqObservePrivilege SetObservePrivilege = 141;
  if (this->_internal_has_setobserveprivilege()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(141, _Internal::setobserveprivilege(this),
        _Internal::setobserveprivilege(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPresetFastChat PresetFastChat = 142;
  if (this->_internal_has_presetfastchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(142, _Internal::presetfastchat(this),
        _Internal::presetfastchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChangeSlotTeam ChangeSlotTeam = 143;
  if (this->_internal_has_changeslotteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(143, _Internal::changeslotteam(this),
        _Internal::changeslotteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChangeSubModeTeam ChangeSubModeTeam = 144;
  if (this->_internal_has_changesubmodeteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(144, _Internal::changesubmodeteam(this),
        _Internal::changesubmodeteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqConfirmChangeSlotTeam ConfirmChangeSlotTeam = 145;
  if (this->_internal_has_confirmchangeslotteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(145, _Internal::confirmchangeslotteam(this),
        _Internal::confirmchangeslotteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPvpRoundEnd PvpRoundEnd = 146;
  if (this->_internal_has_pvproundend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(146, _Internal::pvproundend(this),
        _Internal::pvproundend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqObserveChatLogin ObserveChatLogin = 147;
  if (this->_internal_has_observechatlogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(147, _Internal::observechatlogin(this),
        _Internal::observechatlogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPvpConfirm PvpConfirm = 148;
  if (this->_internal_has_pvpconfirm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(148, _Internal::pvpconfirm(this),
        _Internal::pvpconfirm(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqActivityPicShare ActivityPicShare = 149;
  if (this->_internal_has_activitypicshare()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(149, _Internal::activitypicshare(this),
        _Internal::activitypicshare(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBindOldBusinessPlayer BindOldBusinessPlayer = 150;
  if (this->_internal_has_bindoldbusinessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(150, _Internal::bindoldbusinessplayer(this),
        _Internal::bindoldbusinessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTranslate Translate = 151;
  if (this->_internal_has_translate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(151, _Internal::translate(this),
        _Internal::translate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSubmitQuestionnaire SubmitQuestionnaire = 152;
  if (this->_internal_has_submitquestionnaire()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(152, _Internal::submitquestionnaire(this),
        _Internal::submitquestionnaire(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqCancelChangeSlot CancelChangeSlot = 153;
  if (this->_internal_has_cancelchangeslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(153, _Internal::cancelchangeslot(this),
        _Internal::cancelchangeslot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetChessSkin SetChessSkin = 154;
  if (this->_internal_has_setchessskin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(154, _Internal::setchessskin(this),
        _Internal::setchessskin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnsetChessSkin UnsetChessSkin = 155;
  if (this->_internal_has_unsetchessskin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(155, _Internal::unsetchessskin(this),
        _Internal::unsetchessskin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqCompose Compose = 156;
  if (this->_internal_has_compose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(156, _Internal::compose(this),
        _Internal::compose(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqOffHelpReddot OffHelpReddot = 157;
  if (this->_internal_has_offhelpreddot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(157, _Internal::offhelpreddot(this),
        _Internal::offhelpreddot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqVideo Video = 160;
  if (this->_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(160, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChangeLanguage ChangeLanguage = 161;
  if (this->_internal_has_changelanguage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(161, _Internal::changelanguage(this),
        _Internal::changelanguage(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportVideoPlay VideoPlay = 162;
  if (this->_internal_has_videoplay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(162, _Internal::videoplay(this),
        _Internal::videoplay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetProvince SetProvince = 163;
  if (this->_internal_has_setprovince()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(163, _Internal::setprovince(this),
        _Internal::setprovince(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLongyuanVoice LongyuanVoice = 164;
  if (this->_internal_has_longyuanvoice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(164, _Internal::longyuanvoice(this),
        _Internal::longyuanvoice(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqEnrollTournament EnrollTournament = 165;
  if (this->_internal_has_enrolltournament()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(165, _Internal::enrolltournament(this),
        _Internal::enrolltournament(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqJoinTournamentRoom JoinTournamentRoom = 166;
  if (this->_internal_has_jointournamentroom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(166, _Internal::jointournamentroom(this),
        _Internal::jointournamentroom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTournamentPointAward TournamentPointAward = 167;
  if (this->_internal_has_tournamentpointaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(167, _Internal::tournamentpointaward(this),
        _Internal::tournamentpointaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqDealWebMail DealWebMail = 168;
  if (this->_internal_has_dealwebmail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(168, _Internal::dealwebmail(this),
        _Internal::dealwebmail(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetEnrollPlayers GetEnrollPlayers = 169;
  if (this->_internal_has_getenrollplayers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(169, _Internal::getenrollplayers(this),
        _Internal::getenrollplayers(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChallengeAgain ChallengeAgain = 170;
  if (this->_internal_has_challengeagain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(170, _Internal::challengeagain(this),
        _Internal::challengeagain(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqHistoryChatMsg HistoryChat = 171;
  if (this->_internal_has_historychat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(171, _Internal::historychat(this),
        _Internal::historychat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetFriendInvisible SetFriendInvisible = 172;
  if (this->_internal_has_setfriendinvisible()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(172, _Internal::setfriendinvisible(this),
        _Internal::setfriendinvisible(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetObserveAward GetObserveAward = 173;
  if (this->_internal_has_getobserveaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(173, _Internal::getobserveaward(this),
        _Internal::getobserveaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqInviteObserve InviteObserve = 174;
  if (this->_internal_has_inviteobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(174, _Internal::inviteobserve(this),
        _Internal::inviteobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRejectObserve RejectObserve = 175;
  if (this->_internal_has_rejectobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(175, _Internal::rejectobserve(this),
        _Internal::rejectobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetTxPlayer GetTxPlayer = 176;
  if (this->_internal_has_gettxplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(176, _Internal::gettxplayer(this),
        _Internal::gettxplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChooseTxPlayer ChooseTxPlayer = 177;
  if (this->_internal_has_choosetxplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(177, _Internal::choosetxplayer(this),
        _Internal::choosetxplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetThirdPvpInfo GetThirdPvpInfo = 178;
  if (this->_internal_has_getthirdpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(178, _Internal::getthirdpvpinfo(this),
        _Internal::getthirdpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMarkPlayerGuide MarkPlayerGuide = 179;
  if (this->_internal_has_markplayerguide()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(179, _Internal::markplayerguide(this),
        _Internal::markplayerguide(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMarkChessSkinClicked MarkChessSkinClicked = 180;
  if (this->_internal_has_markchessskinclicked()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(180, _Internal::markchessskinclicked(this),
        _Internal::markchessskinclicked(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecruitInvitePlayer RecruitInvitePlayer = 181;
  if (this->_internal_has_recruitinviteplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(181, _Internal::recruitinviteplayer(this),
        _Internal::recruitinviteplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecruitBindInviter RecruitBindInviter = 182;
  if (this->_internal_has_recruitbindinviter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(182, _Internal::recruitbindinviter(this),
        _Internal::recruitbindinviter(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqQueryPs4Entitlements QueryPs4Entitlements = 183;
  if (this->_internal_has_queryps4entitlements()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(183, _Internal::queryps4entitlements(this),
        _Internal::queryps4entitlements(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqActDaySign ActDaySign = 184;
  if (this->_internal_has_actdaysign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(184, _Internal::actdaysign(this),
        _Internal::actdaysign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqHaveThirdPvp HaveThirdPvpInfo = 185;
  if (this->_internal_has_havethirdpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(185, _Internal::havethirdpvpinfo(this),
        _Internal::havethirdpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqActivityMall ActivityMall = 186;
  if (this->_internal_has_activitymall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(186, _Internal::activitymall(this),
        _Internal::activitymall(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPsOnly PsOnly = 187;
  if (this->_internal_has_psonly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(187, _Internal::psonly(this),
        _Internal::psonly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChangeChannelType ChangeChannelType = 188;
  if (this->_internal_has_changechanneltype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(188, _Internal::changechanneltype(this),
        _Internal::changechanneltype(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqCustomCardOpt CustomCardOpt = 189;
  if (this->_internal_has_customcardopt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(189, _Internal::customcardopt(this),
        _Internal::customcardopt(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqStaticsReport StaticsReport = 190;
  if (this->_internal_has_staticsreport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(190, _Internal::staticsreport(this),
        _Internal::staticsreport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChampionHistory ChampionHistory = 191;
  if (this->_internal_has_championhistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(191, _Internal::championhistory(this),
        _Internal::championhistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTournamentLastTopRank TournamentLastTopRank = 192;
  if (this->_internal_has_tournamentlasttoprank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(192, _Internal::tournamentlasttoprank(this),
        _Internal::tournamentlasttoprank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBigWinnerExpandMatch BigWinnerExpandMatch = 193;
  if (this->_internal_has_bigwinnerexpandmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(193, _Internal::bigwinnerexpandmatch(this),
        _Internal::bigwinnerexpandmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBigWinnerDailyAward BigWinnerDailyAward = 194;
  if (this->_internal_has_bigwinnerdailyaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(194, _Internal::bigwinnerdailyaward(this),
        _Internal::bigwinnerdailyaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBigWinnerScoreHistory BigWinnerScoreHistory = 195;
  if (this->_internal_has_bigwinnerscorehistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(195, _Internal::bigwinnerscorehistory(this),
        _Internal::bigwinnerscorehistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSmeltItem SmeltItem = 196;
  if (this->_internal_has_smeltitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(196, _Internal::smeltitem(this),
        _Internal::smeltitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPVEUpTalentLevel PVEUpTalentLevel = 197;
  if (this->_internal_has_pveuptalentlevel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(197, _Internal::pveuptalentlevel(this),
        _Internal::pveuptalentlevel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPVELuckyAward LuckyAward = 198;
  if (this->_internal_has_luckyaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(198, _Internal::luckyaward(this),
        _Internal::luckyaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqApplyChannel ApplyChannel = 199;
  if (this->_internal_has_applychannel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(199, _Internal::applychannel(this),
        _Internal::applychannel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTeamOP TeamOP = 300;
  if (this->_internal_has_teamop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::teamop(this),
        _Internal::teamop(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqOBTeamInfo OBTeamInfo = 301;
  if (this->_internal_has_obteaminfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::obteaminfo(this),
        _Internal::obteaminfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportHeadIconUrl HeadIconUrl = 302;
  if (this->_internal_has_headiconurl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::headiconurl(this),
        _Internal::headiconurl(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetPvpServerGroup GetPvpServerGroup = 303;
  if (this->_internal_has_getpvpservergroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::getpvpservergroup(this),
        _Internal::getpvpservergroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportPvpInfo ReportPvpInfo = 304;
  if (this->_internal_has_reportpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::reportpvpinfo(this),
        _Internal::reportpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChoosePlayer ChoosePlayer = 305;
  if (this->_internal_has_chooseplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::chooseplayer(this),
        _Internal::chooseplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPingTest PingTest = 306;
  if (this->_internal_has_pingtest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(306, _Internal::pingtest(this),
        _Internal::pingtest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportRegionInfo ReportRegionInfo = 307;
  if (this->_internal_has_reportregioninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(307, _Internal::reportregioninfo(this),
        _Internal::reportregioninfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecalledPlayer RecalledPlaeyr = 308;
  if (this->_internal_has_recalledplaeyr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(308, _Internal::recalledplaeyr(this),
        _Internal::recalledplaeyr(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWebLogin WebLogin = 309;
  if (this->_internal_has_weblogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(309, _Internal::weblogin(this),
        _Internal::weblogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqInviteCodeReset InviteCodeReset = 310;
  if (this->_internal_has_invitecodereset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(310, _Internal::invitecodereset(this),
        _Internal::invitecodereset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecallReward RecallReward = 311;
  if (this->_internal_has_recallreward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(311, _Internal::recallreward(this),
        _Internal::recallreward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSwitchToCommonMatch SwitchToCommonMatch = 312;
  if (this->_internal_has_switchtocommonmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(312, _Internal::switchtocommonmatch(this),
        _Internal::switchtocommonmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSwitchModeInTeam SwitchModeInTeam = 320;
  if (this->_internal_has_switchmodeinteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(320, _Internal::switchmodeinteam(this),
        _Internal::switchmodeinteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetTNRoomState GetTNRoomState = 321;
  if (this->_internal_has_gettnroomstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(321, _Internal::gettnroomstate(this),
        _Internal::gettnroomstate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWorkshopMatch WorkshopMatch = 330;
  if (this->_internal_has_workshopmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(330, _Internal::workshopmatch(this),
        _Internal::workshopmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyWorkshopTicket BuyWorkshopTicket = 331;
  if (this->_internal_has_buyworkshopticket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(331, _Internal::buyworkshopticket(this),
        _Internal::buyworkshopticket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqFavouriteWorkshopMap FavouriteWorkshopMap = 332;
  if (this->_internal_has_favouriteworkshopmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(332, _Internal::favouriteworkshopmap(this),
        _Internal::favouriteworkshopmap(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqShortcutMapsOP ShortcutMapsOP = 333;
  if (this->_internal_has_shortcutmapsop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(333, _Internal::shortcutmapsop(this),
        _Internal::shortcutmapsop(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayersTournamentInfo PlayersTournamentInfo = 334;
  if (this->_internal_has_playerstournamentinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(334, _Internal::playerstournamentinfo(this),
        _Internal::playerstournamentinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqScoreWorkshopMap ScoreWorkshopMap = 335;
  if (this->_internal_has_scoreworkshopmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(335, _Internal::scoreworkshopmap(this),
        _Internal::scoreworkshopmap(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMapsVisitedByFriends MapsVisitedByFriends = 336;
  if (this->_internal_has_mapsvisitedbyfriends()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(336, _Internal::mapsvisitedbyfriends(this),
        _Internal::mapsvisitedbyfriends(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqVerifyRealName VerifyRealName = 350;
  if (this->_internal_has_verifyrealname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(350, _Internal::verifyrealname(this),
        _Internal::verifyrealname(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqFakePay FakePay = 351;
  if (this->_internal_has_fakepay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(351, _Internal::fakepay(this),
        _Internal::fakepay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildCreate GuildCreate = 360;
  if (this->_internal_has_guildcreate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(360, _Internal::guildcreate(this),
        _Internal::guildcreate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildApply GuildApply = 361;
  if (this->_internal_has_guildapply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(361, _Internal::guildapply(this),
        _Internal::guildapply(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildHome GuildHome = 362;
  if (this->_internal_has_guildhome()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(362, _Internal::guildhome(this),
        _Internal::guildhome(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildInfo GuildInfo = 364;
  if (this->_internal_has_guildinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(364, _Internal::guildinfo(this),
        _Internal::guildinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildApprove GuildApprove = 365;
  if (this->_internal_has_guildapprove()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(365, _Internal::guildapprove(this),
        _Internal::guildapprove(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildSetRole GuildRole = 366;
  if (this->_internal_has_guildrole()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(366, _Internal::guildrole(this),
        _Internal::guildrole(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildModify GuildModify = 367;
  if (this->_internal_has_guildmodify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(367, _Internal::guildmodify(this),
        _Internal::guildmodify(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildKickoff GuildKickoff = 368;
  if (this->_internal_has_guildkickoff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(368, _Internal::guildkickoff(this),
        _Internal::guildkickoff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildDismiss GuildDismiss = 369;
  if (this->_internal_has_guilddismiss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(369, _Internal::guilddismiss(this),
        _Internal::guilddismiss(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildExit GuildExit = 370;
  if (this->_internal_has_guildexit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(370, _Internal::guildexit(this),
        _Internal::guildexit(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildChat GuildChat = 371;
  if (this->_internal_has_guildchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(371, _Internal::guildchat(this),
        _Internal::guildchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildList GuildList = 372;
  if (this->_internal_has_guildlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(372, _Internal::guildlist(this),
        _Internal::guildlist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildRecommendPlayers GuildRecommendPlayers = 373;
  if (this->_internal_has_guildrecommendplayers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(373, _Internal::guildrecommendplayers(this),
        _Internal::guildrecommendplayers(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildInviteList GuildInviteList = 374;
  if (this->_internal_has_guildinvitelist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(374, _Internal::guildinvitelist(this),
        _Internal::guildinvitelist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildInvite GuildInvite = 375;
  if (this->_internal_has_guildinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(375, _Internal::guildinvite(this),
        _Internal::guildinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildResign GuildResign = 376;
  if (this->_internal_has_guildresign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(376, _Internal::guildresign(this),
        _Internal::guildresign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGuildRejectInvite GuildRejectInvite = 377;
  if (this->_internal_has_guildrejectinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(377, _Internal::guildrejectinvite(this),
        _Internal::guildrejectinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetVngCommentAward GetVngCommentAward = 390;
  if (this->_internal_has_getvngcommentaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(390, _Internal::getvngcommentaward(this),
        _Internal::getvngcommentaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLevelupChest LevelupChest = 391;
  if (this->_internal_has_levelupchest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(391, _Internal::levelupchest(this),
        _Internal::levelupchest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWatchAd WatchAd = 392;
  if (this->_internal_has_watchad()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(392, _Internal::watchad(this),
        _Internal::watchad(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqQueryPsTournamentRoom PsTournamentRoom = 393;
  if (this->_internal_has_pstournamentroom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(393, _Internal::pstournamentroom(this),
        _Internal::pstournamentroom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetAdCumulateAward GetAdCumulateAward = 394;
  if (this->_internal_has_getadcumulateaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(394, _Internal::getadcumulateaward(this),
        _Internal::getadcumulateaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetMessengerPos SetMessengerPos = 535;
  if (this->_internal_has_setmessengerpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(535, _Internal::setmessengerpos(this),
        _Internal::setmessengerpos(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateAntiAddictionTime UpdateAntiAddictionTime = 553;
  if (this->_internal_has_updateantiaddictiontime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(553, _Internal::updateantiaddictiontime(this),
        _Internal::updateantiaddictiontime(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqCancelReconnect CancelReconnect = 554;
  if (this->_internal_has_cancelreconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(554, _Internal::cancelreconnect(this),
        _Internal::cancelreconnect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReconnect Reconnect = 556;
  if (this->_internal_has_reconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(556, _Internal::reconnect(this),
        _Internal::reconnect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPassThrough PassThrough = 563;
  if (this->_internal_has_passthrough()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(563, _Internal::passthrough(this),
        _Internal::passthrough(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqVisitPlayer VisitPlayer = 564;
  if (this->_internal_has_visitplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(564, _Internal::visitplayer(this),
        _Internal::visitplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLeaveGameEarly LeaveGameEarly = 565;
  if (this->_internal_has_leavegameearly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(565, _Internal::leavegameearly(this),
        _Internal::leavegameearly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGDCommonBin GDCommonBin = 566;
  if (this->_internal_has_gdcommonbin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(566, _Internal::gdcommonbin(this),
        _Internal::gdcommonbin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGDCommonBinData GDBinData = 567;
  if (this->_internal_has_gdbindata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(567, _Internal::gdbindata(this),
        _Internal::gdbindata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqAutoBattleOP AutoBattleOP = 568;
  if (this->_internal_has_autobattleop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(568, _Internal::autobattleop(this),
        _Internal::autobattleop(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRestrictUser RestrictUser = 569;
  if (this->_internal_has_restrictuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(569, _Internal::restrictuser(this),
        _Internal::restrictuser(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqEquipSelectRate EquipSelectRate = 570;
  if (this->_internal_has_equipselectrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(570, _Internal::equipselectrate(this),
        _Internal::equipselectrate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqReportAbsent ReportAbsent = 571;
  if (this->_internal_has_reportabsent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(571, _Internal::reportabsent(this),
        _Internal::reportabsent(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendWeek RecommendWeek = 600;
  if (this->_internal_has_recommendweek()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(600, _Internal::recommendweek(this),
        _Internal::recommendweek(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendOfficial RecommendOfficial = 601;
  if (this->_internal_has_recommendofficial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(601, _Internal::recommendofficial(this),
        _Internal::recommendofficial(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendLatest RecommendLatest = 602;
  if (this->_internal_has_recommendlatest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(602, _Internal::recommendlatest(this),
        _Internal::recommendlatest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendHistory RecommendHistory = 603;
  if (this->_internal_has_recommendhistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(603, _Internal::recommendhistory(this),
        _Internal::recommendhistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendCollect RecommendCollect = 604;
  if (this->_internal_has_recommendcollect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(604, _Internal::recommendcollect(this),
        _Internal::recommendcollect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendSet RecommendSet = 605;
  if (this->_internal_has_recommendset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(605, _Internal::recommendset(this),
        _Internal::recommendset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendGetCollection RecommendGetCollection = 606;
  if (this->_internal_has_recommendgetcollection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(606, _Internal::recommendgetcollection(this),
        _Internal::recommendgetcollection(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRecommendEquip RecommendEquip = 607;
  if (this->_internal_has_recommendequip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(607, _Internal::recommendequip(this),
        _Internal::recommendequip(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLoginCancel LoginCancel = 608;
  if (this->_internal_has_logincancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(608, _Internal::logincancel(this),
        _Internal::logincancel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqConvertDebris ConvertDebris = 609;
  if (this->_internal_has_convertdebris()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(609, _Internal::convertdebris(this),
        _Internal::convertdebris(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUseProtectionCard ProtectionCard = 610;
  if (this->_internal_has_protectioncard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(610, _Internal::protectioncard(this),
        _Internal::protectioncard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUsePassportCard UsePassportCard = 611;
  if (this->_internal_has_usepassportcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(611, _Internal::usepassportcard(this),
        _Internal::usepassportcard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetMedal SetMedal = 612;
  if (this->_internal_has_setmedal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(612, _Internal::setmedal(this),
        _Internal::setmedal(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnSetMedal UnSetMedal = 613;
  if (this->_internal_has_unsetmedal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(613, _Internal::unsetmedal(this),
        _Internal::unsetmedal(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPlayerMedals PlayerMedals = 614;
  if (this->_internal_has_playermedals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(614, _Internal::playermedals(this),
        _Internal::playermedals(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateHotDot UpdateHotDot = 615;
  if (this->_internal_has_updatehotdot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(615, _Internal::updatehotdot(this),
        _Internal::updatehotdot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqQueryHotDot QueryHotDot = 616;
  if (this->_internal_has_queryhotdot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(616, _Internal::queryhotdot(this),
        _Internal::queryhotdot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetCache SetCache = 617;
  if (this->_internal_has_setcache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(617, _Internal::setcache(this),
        _Internal::setcache(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetCache GetCache = 618;
  if (this->_internal_has_getcache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(618, _Internal::getcache(this),
        _Internal::getcache(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyChallengeCount BuyChallengeCount = 619;
  if (this->_internal_has_buychallengecount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(619, _Internal::buychallengecount(this),
        _Internal::buychallengecount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetPveRank GetPveRank = 620;
  if (this->_internal_has_getpverank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(620, _Internal::getpverank(this),
        _Internal::getpverank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqLogin AuthAccount = 621;
  if (this->_internal_has_authaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(621, _Internal::authaccount(this),
        _Internal::authaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnbindAccount UnbindAccount = 622;
  if (this->_internal_has_unbindaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(622, _Internal::unbindaccount(this),
        _Internal::unbindaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBagToItem BagToItem = 623;
  if (this->_internal_has_bagtoitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(623, _Internal::bagtoitem(this),
        _Internal::bagtoitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqIdentifyItem IdentifyItem = 624;
  if (this->_internal_has_identifyitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(624, _Internal::identifyitem(this),
        _Internal::identifyitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqInsetItemAffix InsetItemAffix = 625;
  if (this->_internal_has_insetitemaffix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(625, _Internal::insetitemaffix(this),
        _Internal::insetitemaffix(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUnsetItemAffix UnsetItemAffix = 626;
  if (this->_internal_has_unsetitemaffix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(626, _Internal::unsetitemaffix(this),
        _Internal::unsetitemaffix(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetDefaultAttributes SetDefaultAttributes = 627;
  if (this->_internal_has_setdefaultattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(627, _Internal::setdefaultattributes(this),
        _Internal::setdefaultattributes(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqCheckCancel CheckCancel = 628;
  if (this->_internal_has_checkcancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(628, _Internal::checkcancel(this),
        _Internal::checkcancel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqCancelAccount CancelAccount = 629;
  if (this->_internal_has_cancelaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(629, _Internal::cancelaccount(this),
        _Internal::cancelaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqOAuthApp OAuthApp = 630;
  if (this->_internal_has_oauthapp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(630, _Internal::oauthapp(this),
        _Internal::oauthapp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetSelfNumRankData GetSelfNumRankData = 631;
  if (this->_internal_has_getselfnumrankdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(631, _Internal::getselfnumrankdata(this),
        _Internal::getselfnumrankdata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateCardGroup UpdateCardGroup = 632;
  if (this->_internal_has_updatecardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(632, _Internal::updatecardgroup(this),
        _Internal::updatecardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateCardGroupName UpdateCardGroupName = 633;
  if (this->_internal_has_updatecardgroupname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(633, _Internal::updatecardgroupname(this),
        _Internal::updatecardgroupname(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyPveBuff BuyPveBuff = 634;
  if (this->_internal_has_buypvebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(634, _Internal::buypvebuff(this),
        _Internal::buypvebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetCardGroup SetCardGroup = 635;
  if (this->_internal_has_setcardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(635, _Internal::setcardgroup(this),
        _Internal::setcardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqBuyPveChessTemplate BuyPveChessTemplate = 636;
  if (this->_internal_has_buypvechesstemplate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(636, _Internal::buypvechesstemplate(this),
        _Internal::buypvechesstemplate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPveUnlockChessTemplate PveUnlockChessTemplate = 637;
  if (this->_internal_has_pveunlockchesstemplate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(637, _Internal::pveunlockchesstemplate(this),
        _Internal::pveunlockchesstemplate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPveSetTeamDeBuff PveSetTeamDeBuff = 638;
  if (this->_internal_has_pvesetteamdebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(638, _Internal::pvesetteamdebuff(this),
        _Internal::pvesetteamdebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqChoseCardGroup ChoseCardGroup = 639;
  if (this->_internal_has_chosecardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(639, _Internal::chosecardgroup(this),
        _Internal::chosecardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRemoveOvertimeBuff RemoveOvertimeBuff = 640;
  if (this->_internal_has_removeovertimebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(640, _Internal::removeovertimebuff(this),
        _Internal::removeovertimebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 643;
  if (this->_internal_has_updatenewcardgroupsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(643, _Internal::updatenewcardgroupsign(this),
        _Internal::updatenewcardgroupsign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTDGetOnHookAward TDGetOnHookAward = 644;
  if (this->_internal_has_tdgetonhookaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(644, _Internal::tdgetonhookaward(this),
        _Internal::tdgetonhookaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CsReqTDDraw TDDraw = 645;
  if (this->_internal_has_tddraw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(645, _Internal::tddraw(this),
        _Internal::tddraw(this).GetCachedSize(), target, stream);
  }

  // .msg.CsReqTDBuyCard TDBuyCard = 646;
  if (this->_internal_has_tdbuycard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(646, _Internal::tdbuycard(this),
        _Internal::tdbuycard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTDSetCardGroup TDSetCardGroup = 647;
  if (this->_internal_has_tdsetcardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(647, _Internal::tdsetcardgroup(this),
        _Internal::tdsetcardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTDLevelUp TDLevelUp = 648;
  if (this->_internal_has_tdlevelup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(648, _Internal::tdlevelup(this),
        _Internal::tdlevelup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqTDEquip TDEquip = 649;
  if (this->_internal_has_tdequip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(649, _Internal::tdequip(this),
        _Internal::tdequip(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorUpdateSetting MentorUpdateSetting = 650;
  if (this->_internal_has_mentorupdatesetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(650, _Internal::mentorupdatesetting(this),
        _Internal::mentorupdatesetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorInvite MentorInvite = 651;
  if (this->_internal_has_mentorinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(651, _Internal::mentorinvite(this),
        _Internal::mentorinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorConfirmInvite MentorConfirmInvite = 652;
  if (this->_internal_has_mentorconfirminvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(652, _Internal::mentorconfirminvite(this),
        _Internal::mentorconfirminvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorRecommendList MentorRecommendList = 653;
  if (this->_internal_has_mentorrecommendlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(653, _Internal::mentorrecommendlist(this),
        _Internal::mentorrecommendlist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorGetTaskAward MentorGetTaskAward = 654;
  if (this->_internal_has_mentorgettaskaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(654, _Internal::mentorgettaskaward(this),
        _Internal::mentorgettaskaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorGraduate MentorGraduate = 655;
  if (this->_internal_has_mentorgraduate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(655, _Internal::mentorgraduate(this),
        _Internal::mentorgraduate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorRelieveRelation MentorRelieveRelation = 656;
  if (this->_internal_has_mentorrelieverelation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(656, _Internal::mentorrelieverelation(this),
        _Internal::mentorrelieverelation(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetMentorInfo GetMentorInfo = 657;
  if (this->_internal_has_getmentorinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(657, _Internal::getmentorinfo(this),
        _Internal::getmentorinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqMentorGetInviteMsg MentorGetInviteMsg = 658;
  if (this->_internal_has_mentorgetinvitemsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(658, _Internal::mentorgetinvitemsg(this),
        _Internal::mentorgetinvitemsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateCardGroupBetter UpdateCardGroupBetter = 659;
  if (this->_internal_has_updatecardgroupbetter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(659, _Internal::updatecardgroupbetter(this),
        _Internal::updatecardgroupbetter(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqUpdateCardGroupSetting UpdateCardGroupSetting = 660;
  if (this->_internal_has_updatecardgroupsetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(660, _Internal::updatecardgroupsetting(this),
        _Internal::updatecardgroupsetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetContent SetContent = 661;
  if (this->_internal_has_setcontent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(661, _Internal::setcontent(this),
        _Internal::setcontent(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetBalance GetBalance = 662;
  if (this->_internal_has_getbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(662, _Internal::getbalance(this),
        _Internal::getbalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqRechargeBalance RechargeBalance = 663;
  if (this->_internal_has_rechargebalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(663, _Internal::rechargebalance(this),
        _Internal::rechargebalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqWithdrawBalance WithdrawBalance = 664;
  if (this->_internal_has_withdrawbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(664, _Internal::withdrawbalance(this),
        _Internal::withdrawbalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqPersonalRecommendMall PersonalRecommendMall = 665;
  if (this->_internal_has_personalrecommendmall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(665, _Internal::personalrecommendmall(this),
        _Internal::personalrecommendmall(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqGetMedalChestAward GetMedalChestAward = 666;
  if (this->_internal_has_getmedalchestaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(666, _Internal::getmedalchestaward(this),
        _Internal::getmedalchestaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSReqSetItemAutoUse SetItemAutoUse = 667;
  if (this->_internal_has_setitemautouse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(667, _Internal::setitemautouse(this),
        _Internal::setitemautouse(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqBody)
  return target;
}

size_t CSReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSReqHeart Heart = 2;
  if (this->_internal_has_heart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.heart_);
  }

  // .msg.CSReqLogin Login = 3;
  if (this->_internal_has_login()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.login_);
  }

  // .msg.CSReqVersionCheck VersionCheck = 4;
  if (this->_internal_has_versioncheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.versioncheck_);
  }

  // .msg.CSReqResourceVersionCheck ResourceVersionCheck = 5;
  if (this->_internal_has_resourceversioncheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resourceversioncheck_);
  }

  // .msg.CSReqApplyHallServer ApplyHallServer = 6;
  if (this->_internal_has_applyhallserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applyhallserver_);
  }

  // .msg.CSReqGetNumRank GetNumRank = 7;
  if (this->_internal_has_getnumrank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getnumrank_);
  }

  // .msg.CSReqWorldChat WorldChat = 8;
  if (this->_internal_has_worldchat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worldchat_);
  }

  // .msg.CSReqPlayersBaseInfo PlayersBaseInfo = 9;
  if (this->_internal_has_playersbaseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playersbaseinfo_);
  }

  // .msg.CSReqPlayerDetailInfo PlayerDetailInfo = 10;
  if (this->_internal_has_playerdetailinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerdetailinfo_);
  }

  // .msg.CSReqReadMail ReadMail = 11;
  if (this->_internal_has_readmail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readmail_);
  }

  // .msg.CSReqGetMailAward GetMailAward = 12;
  if (this->_internal_has_getmailaward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmailaward_);
  }

  // .msg.CSReqBuyEgg BuyEgg = 13;
  if (this->_internal_has_buyegg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buyegg_);
  }

  // .msg.CSReqUserNameSet UserNameSet = 14;
  if (this->_internal_has_usernameset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usernameset_);
  }

  // .msg.CSReqUserNameRandom UserNameRandom = 15;
  if (this->_internal_has_usernamerandom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usernamerandom_);
  }

  // .msg.CSReqHeadPicSet HeadPicSet = 16;
  if (this->_internal_has_headpicset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.headpicset_);
  }

  // .msg.CSReqPvp Pvp = 17;
  if (this->_internal_has_pvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvp_);
  }

  // .msg.CSReqDressChessPlayer DressChessPlayer = 18;
  if (this->_internal_has_dresschessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dresschessplayer_);
  }

  // .msg.CSReqDressScene DressScene = 19;
  if (this->_internal_has_dressscene()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dressscene_);
  }

  // .msg.CSReqPvpLogin PvpLogin = 20;
  if (this->_internal_has_pvplogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvplogin_);
  }

  // .msg.CSReqPvpEnd PvpEnd = 23;
  if (this->_internal_has_pvpend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpend_);
  }

  // .msg.CSReqPlayerFinish PlayerFinish = 24;
  if (this->_internal_has_playerfinish()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerfinish_);
  }

  // .msg.CSReqPlayerQuit PlayerQuit = 25;
  if (this->_internal_has_playerquit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerquit_);
  }

  // .msg.CSReqSellItem SellItem = 26;
  if (this->_internal_has_sellitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sellitem_);
  }

  // .msg.CSReqGetEvalAward GetEvalAward = 27;
  if (this->_internal_has_getevalaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getevalaward_);
  }

  // .msg.CSReqUseChessPlayer UseChessPlayer = 28;
  if (this->_internal_has_usechessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usechessplayer_);
  }

  // .msg.CSReqGuidReport GuidReport = 29;
  if (this->_internal_has_guidreport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guidreport_);
  }

  // .msg.CSReqGetCodeAward GetCodeAward = 30;
  if (this->_internal_has_getcodeaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getcodeaward_);
  }

  // .msg.CSReqRoundReport RoundReport = 31;
  if (this->_internal_has_roundreport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roundreport_);
  }

  // .msg.CSReqLoadingProgress LoadingProgress = 32;
  if (this->_internal_has_loadingprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loadingprogress_);
  }

  // .msg.CSReqPvpChat PvpChat = 33;
  if (this->_internal_has_pvpchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpchat_);
  }

  // .msg.CSReqChessCombine ChessCombine = 34;
  if (this->_internal_has_chesscombine()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesscombine_);
  }

  // .msg.CSReqExpose Expose = 35;
  if (this->_internal_has_expose()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expose_);
  }

  // .msg.CSReqApplyOrderId ApplyOrderId = 36;
  if (this->_internal_has_applyorderid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applyorderid_);
  }

  // .msg.CSReqReportOrderInfo ReportOrderInfo = 37;
  if (this->_internal_has_reportorderinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportorderinfo_);
  }

  // .msg.CSReqSetItem SetItem = 38;
  if (this->_internal_has_setitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setitem_);
  }

  // .msg.CSReqUnsetItem UnsetItem = 39;
  if (this->_internal_has_unsetitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetitem_);
  }

  // .msg.CSReqRandomItem RandomItem = 40;
  if (this->_internal_has_randomitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.randomitem_);
  }

  // .msg.CSReqChat Chat = 41;
  if (this->_internal_has_chat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_);
  }

  // .msg.CSReqSetChessPlayer SetChessPlayer = 42;
  if (this->_internal_has_setchessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setchessplayer_);
  }

  // .msg.CSReqUnsetChessPlayer UnsetChessPlayer = 43;
  if (this->_internal_has_unsetchessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetchessplayer_);
  }

  // .msg.CSReqGetFansList GetFansList = 44;
  if (this->_internal_has_getfanslist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getfanslist_);
  }

  // .msg.CSReqFollowPlayer FollowPlayer = 45;
  if (this->_internal_has_followplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.followplayer_);
  }

  // .msg.CSReqUnfollowPlayer UnfollowPlayer = 46;
  if (this->_internal_has_unfollowplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unfollowplayer_);
  }

  // .msg.CSReqPlayersStatusInfo PlayersStatusInfo = 47;
  if (this->_internal_has_playersstatusinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playersstatusinfo_);
  }

  // .msg.CSReqInviteJoinTeam InviteJoinTeam = 48;
  if (this->_internal_has_invitejointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.invitejointeam_);
  }

  // .msg.CSReqJoinTeam JoinTeam = 49;
  if (this->_internal_has_jointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jointeam_);
  }

  // .msg.CSReqKickOffTeamPlayer KickOffTeamPlayer = 50;
  if (this->_internal_has_kickoffteamplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kickoffteamplayer_);
  }

  // .msg.CSReqTeamMsg TeamMsg = 51;
  if (this->_internal_has_teammsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teammsg_);
  }

  // .msg.CSReqTeamReady TeamReady = 52;
  if (this->_internal_has_teamready()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamready_);
  }

  // .msg.CSReqReportPayResponse ReportPayResponse = 53;
  if (this->_internal_has_reportpayresponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportpayresponse_);
  }

  // .msg.CSReqRejectJoinTeam RejectJoinTeam = 54;
  if (this->_internal_has_rejectjointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rejectjointeam_);
  }

  // .msg.CSReqShieldChat ShieldChat = 55;
  if (this->_internal_has_shieldchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shieldchat_);
  }

  // .msg.CSReqBuyPassportLevel BuyPassportLevel = 56;
  if (this->_internal_has_buypassportlevel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buypassportlevel_);
  }

  // .msg.CSReqUpgradePassport UpgradePassport = 57;
  if (this->_internal_has_upgradepassport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upgradepassport_);
  }

  // .msg.CSReqGetPassportLevelAward GetPassportLevelAward = 58;
  if (this->_internal_has_getpassportlevelaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpassportlevelaward_);
  }

  // .msg.CSReqGetPassportTaskAward GetPassportTaskAward = 59;
  if (this->_internal_has_getpassporttaskaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpassporttaskaward_);
  }

  // .msg.CSReqTelBook TelBook = 60;
  if (this->_internal_has_telbook()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.telbook_);
  }

  // .msg.CSReqActivatePassport ActivatePassport = 61;
  if (this->_internal_has_activatepassport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activatepassport_);
  }

  // .msg.CSReqRankSeasonEval RankSeasonEval = 62;
  if (this->_internal_has_rankseasoneval()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rankseasoneval_);
  }

  // .msg.CSReqBindAccount BindAccount = 63;
  if (this->_internal_has_bindaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindaccount_);
  }

  // .msg.CSReqIncAdShowCount IncAdsShowCount = 64;
  if (this->_internal_has_incadsshowcount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.incadsshowcount_);
  }

  // .msg.CSReqUseBonusCard UseBonusCard = 65;
  if (this->_internal_has_usebonuscard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usebonuscard_);
  }

  // .msg.CSReqGetSeasonAward GetSeasonAward = 66;
  if (this->_internal_has_getseasonaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getseasonaward_);
  }

  // .msg.CSReqGetAlphaActivityAward GetAlphaActivityAward = 67;
  if (this->_internal_has_getalphaactivityaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getalphaactivityaward_);
  }

  // .msg.CSReqGetLanguageData GetLanguageData = 68;
  if (this->_internal_has_getlanguagedata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getlanguagedata_);
  }

  // .msg.CSReqGetActivityAward GetActivityAward = 69;
  if (this->_internal_has_getactivityaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getactivityaward_);
  }

  // .msg.CSReqGetActivityData GetActivityData = 70;
  if (this->_internal_has_getactivitydata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getactivitydata_);
  }

  // .msg.CSReqSendSms SendSms = 71;
  if (this->_internal_has_sendsms()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendsms_);
  }

  // .msg.CSReqGetMeleeAward GetMeleeAward = 72;
  if (this->_internal_has_getmeleeaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmeleeaward_);
  }

  // .msg.CSReqAddAiToTeam AddAiToTeam = 73;
  if (this->_internal_has_addaitoteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addaitoteam_);
  }

  // .msg.CSReqShare Share = 74;
  if (this->_internal_has_share()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.share_);
  }

  // .msg.CSReqSkipInterface SkipInterface = 75;
  if (this->_internal_has_skipinterface()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skipinterface_);
  }

  // .msg.CSReqTeamGame TeamGame = 76;
  if (this->_internal_has_teamgame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamgame_);
  }

  // .msg.CSReqSetTeamMode SetTeamMode = 77;
  if (this->_internal_has_setteammode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setteammode_);
  }

  // .msg.CSReqSetHistoryPvpShowPermission HistoryPvpShowPermission = 78;
  if (this->_internal_has_historypvpshowpermission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.historypvpshowpermission_);
  }

  // .msg.CSReqSearchTeam SearchTeam = 79;
  if (this->_internal_has_searchteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.searchteam_);
  }

  // .msg.CSReqApplyChat ApplyChat = 80;
  if (this->_internal_has_applychat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applychat_);
  }

  // .msg.CSReqChatLogin ChatLogin = 81;
  if (this->_internal_has_chatlogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chatlogin_);
  }

  // .msg.CSReqProbeNetDelay ProbeNetDelay = 82;
  if (this->_internal_has_probenetdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.probenetdelay_);
  }

  // .msg.CSReqGetEggs GetEggs = 83;
  if (this->_internal_has_geteggs()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geteggs_);
  }

  // .msg.CSReqBuyGoods BuyGoods = 84;
  if (this->_internal_has_buygoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buygoods_);
  }

  // .msg.CSReqExchangePassportGoods ExchangePassportGoods = 85;
  if (this->_internal_has_exchangepassportgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchangepassportgoods_);
  }

  // .msg.CSReqUsePassportTaskCard UsePassportTaskCard = 86;
  if (this->_internal_has_usepassporttaskcard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usepassporttaskcard_);
  }

  // .msg.CSReqOpenRandChest OpenRandChest = 87;
  if (this->_internal_has_openrandchest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.openrandchest_);
  }

  // .msg.CSReqEggLottery EggLottery = 88;
  if (this->_internal_has_egglottery()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.egglottery_);
  }

  // .msg.CSReqQueryDiamondBalance QueryDiamondBalance = 89;
  if (this->_internal_has_querydiamondbalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.querydiamondbalance_);
  }

  // .msg.CSReqUseItem UseItem = 90;
  if (this->_internal_has_useitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.useitem_);
  }

  // .msg.CSReqUseExperienceCard UseExperienceCard = 91;
  if (this->_internal_has_useexperiencecard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.useexperiencecard_);
  }

  // .msg.CSReqRandTargetItem RandTargetItem = 92;
  if (this->_internal_has_randtargetitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.randtargetitem_);
  }

  // .msg.CSReqAddBlacklist AddBlacklist = 93;
  if (this->_internal_has_addblacklist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addblacklist_);
  }

  // .msg.CSReqRemoveBlacklist RemoveBlacklist = 94;
  if (this->_internal_has_removeblacklist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeblacklist_);
  }

  // .msg.CSReqReportPlayerBirth ReportPlayerBirth = 95;
  if (this->_internal_has_reportplayerbirth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportplayerbirth_);
  }

  // .msg.CSReqReportInfoInput ReportInfoInput = 96;
  if (this->_internal_has_reportinfoinput()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportinfoinput_);
  }

  // .msg.CSReqSendVerificationCode SendVerificationCode = 97;
  if (this->_internal_has_sendverificationcode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendverificationcode_);
  }

  // .msg.CSReqBindPhoneNumber BindPhoneNumber = 98;
  if (this->_internal_has_bindphonenumber()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindphonenumber_);
  }

  // .msg.CSReqWorldInvite WorldInvite = 99;
  if (this->_internal_has_worldinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worldinvite_);
  }

  // .msg.CSReqRemoveExpireItem RemoveExpireItem = 100;
  if (this->_internal_has_removeexpireitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeexpireitem_);
  }

  // .msg.CSReqGetMallGoods GetMallGoods = 101;
  if (this->_internal_has_getmallgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmallgoods_);
  }

  // .msg.CSReqBuyMallGoods BuyMallGoods = 102;
  if (this->_internal_has_buymallgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buymallgoods_);
  }

  // .msg.CSReqBindSharingCode BindSharingCode = 103;
  if (this->_internal_has_bindsharingcode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindsharingcode_);
  }

  // .msg.CSReqWXBlessBag WXBlessBag = 104;
  if (this->_internal_has_wxblessbag()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxblessbag_);
  }

  // .msg.CSReqUpdateFriendsInGame UpdateFriendsInGame = 105;
  if (this->_internal_has_updatefriendsingame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatefriendsingame_);
  }

  // .msg.CSReqShareReward ShareReward = 106;
  if (this->_internal_has_sharereward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sharereward_);
  }

  // .msg.CSReqAllFightInfo AllFightInfo = 107;
  if (this->_internal_has_allfightinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allfightinfo_);
  }

  // .msg.CSReqGetOldPlayer GetOldPlayer = 108;
  if (this->_internal_has_getoldplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getoldplayer_);
  }

  // .msg.CSReqBindOldPlayer BindOldPlayer = 109;
  if (this->_internal_has_bindoldplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindoldplayer_);
  }

  // .msg.CSReqSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 110;
  if (this->_internal_has_sendverificationcodewithcheckredis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendverificationcodewithcheckredis_);
  }

  // .msg.CSReqReportSetting ReportSetting = 111;
  if (this->_internal_has_reportsetting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportsetting_);
  }

  // .msg.CSReqAntiData AntiData = 112;
  if (this->_internal_has_antidata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.antidata_);
  }

  // .msg.CSReqTlogData TlogData = 113;
  if (this->_internal_has_tlogdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tlogdata_);
  }

  // .msg.CSReqDaySign DaySign = 114;
  if (this->_internal_has_daysign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.daysign_);
  }

  // .msg.CSReqDayFitAvoid DayFitAvoid = 115;
  if (this->_internal_has_dayfitavoid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dayfitavoid_);
  }

  // .msg.CSReqShareCountAward ShareCountAward = 116;
  if (this->_internal_has_sharecountaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sharecountaward_);
  }

  // .msg.CSReqActItemExch ActItemExch = 117;
  if (this->_internal_has_actitemexch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actitemexch_);
  }

  // .msg.CSReqRealationStar RealationStar = 118;
  if (this->_internal_has_realationstar()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.realationstar_);
  }

  // .msg.CSReqGetRealationStarInviteSucc GetRealationStarInviteSucc = 119;
  if (this->_internal_has_getrealationstarinvitesucc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getrealationstarinvitesucc_);
  }

  // .msg.CSReqGetRealationStar GetRealationStar = 120;
  if (this->_internal_has_getrealationstar()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getrealationstar_);
  }

  // .msg.CSReqGetActRecord ReqActRecord = 121;
  if (this->_internal_has_reqactrecord()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reqactrecord_);
  }

  // .msg.CSReqJoinVoiceTeam JoinVoiceTeam = 122;
  if (this->_internal_has_joinvoiceteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoiceteam_);
  }

  // .msg.CSReqJoinVoicePvp JoinVoicePvp = 123;
  if (this->_internal_has_joinvoicepvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoicepvp_);
  }

  // .msg.CSReqJoinVoiceCamp JoinVoiceCamp = 124;
  if (this->_internal_has_joinvoicecamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoicecamp_);
  }

  // .msg.CSReqUserCountrySet UserCountrySet = 125;
  if (this->_internal_has_usercountryset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usercountryset_);
  }

  // .msg.CSReqOfflineInviteJoinTeam OfflineInviteJoinTeam = 126;
  if (this->_internal_has_offlineinvitejointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offlineinvitejointeam_);
  }

  // .msg.CSReqObserve Observe = 127;
  if (this->_internal_has_observe()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observe_);
  }

  // .msg.CSReqGetRecommendPvp GetRecommendPvp = 128;
  if (this->_internal_has_getrecommendpvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getrecommendpvp_);
  }

  // .msg.CSReqObserveLogin ObserveLogin = 129;
  if (this->_internal_has_observelogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observelogin_);
  }

  // .msg.CSReqQuitObserve QuitObserve = 130;
  if (this->_internal_has_quitobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quitobserve_);
  }

  // .msg.CSReqGetObserveInfo GetObserveInfo = 131;
  if (this->_internal_has_getobserveinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getobserveinfo_);
  }

  // .msg.CSReqFreeFlow FreeFlow = 132;
  if (this->_internal_has_freeflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.freeflow_);
  }

  // .msg.CSReqSetPushToken SetPushToken = 133;
  if (this->_internal_has_setpushtoken()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setpushtoken_);
  }

  // .msg.CSReqTlogEvent TlogEvent = 134;
  if (this->_internal_has_tlogevent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tlogevent_);
  }

  // .msg.CSReqWxVVipAward WxVVipAward = 135;
  if (this->_internal_has_wxvvipaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxvvipaward_);
  }

  // .msg.CSReqGetRelationStarWX RelationStarWX = 136;
  if (this->_internal_has_relationstarwx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relationstarwx_);
  }

  // .msg.CSReqSendWxRedPacket SendWxRedPacket = 137;
  if (this->_internal_has_sendwxredpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendwxredpacket_);
  }

  // .msg.CSReqRecvWxRedPacket RecvWxRedPacket = 138;
  if (this->_internal_has_recvwxredpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recvwxredpacket_);
  }

  // .msg.CSReqWxRedPktLike WxRedPktLike = 139;
  if (this->_internal_has_wxredpktlike()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxredpktlike_);
  }

  // .msg.CSReqWxRedPktRank WxRedPktRank = 140;
  if (this->_internal_has_wxredpktrank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxredpktrank_);
  }

  // .msg.CSReqObservePrivilege SetObservePrivilege = 141;
  if (this->_internal_has_setobserveprivilege()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setobserveprivilege_);
  }

  // .msg.CSReqPresetFastChat PresetFastChat = 142;
  if (this->_internal_has_presetfastchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.presetfastchat_);
  }

  // .msg.CSReqChangeSlotTeam ChangeSlotTeam = 143;
  if (this->_internal_has_changeslotteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changeslotteam_);
  }

  // .msg.CSReqChangeSubModeTeam ChangeSubModeTeam = 144;
  if (this->_internal_has_changesubmodeteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changesubmodeteam_);
  }

  // .msg.CSReqConfirmChangeSlotTeam ConfirmChangeSlotTeam = 145;
  if (this->_internal_has_confirmchangeslotteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.confirmchangeslotteam_);
  }

  // .msg.CSReqPvpRoundEnd PvpRoundEnd = 146;
  if (this->_internal_has_pvproundend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvproundend_);
  }

  // .msg.CSReqObserveChatLogin ObserveChatLogin = 147;
  if (this->_internal_has_observechatlogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observechatlogin_);
  }

  // .msg.CSReqPvpConfirm PvpConfirm = 148;
  if (this->_internal_has_pvpconfirm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpconfirm_);
  }

  // .msg.CSReqActivityPicShare ActivityPicShare = 149;
  if (this->_internal_has_activitypicshare()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activitypicshare_);
  }

  // .msg.CSReqBindOldBusinessPlayer BindOldBusinessPlayer = 150;
  if (this->_internal_has_bindoldbusinessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindoldbusinessplayer_);
  }

  // .msg.CSReqTranslate Translate = 151;
  if (this->_internal_has_translate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translate_);
  }

  // .msg.CSReqSubmitQuestionnaire SubmitQuestionnaire = 152;
  if (this->_internal_has_submitquestionnaire()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.submitquestionnaire_);
  }

  // .msg.CSReqCancelChangeSlot CancelChangeSlot = 153;
  if (this->_internal_has_cancelchangeslot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelchangeslot_);
  }

  // .msg.CSReqSetChessSkin SetChessSkin = 154;
  if (this->_internal_has_setchessskin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setchessskin_);
  }

  // .msg.CSReqUnsetChessSkin UnsetChessSkin = 155;
  if (this->_internal_has_unsetchessskin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetchessskin_);
  }

  // .msg.CSReqCompose Compose = 156;
  if (this->_internal_has_compose()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.compose_);
  }

  // .msg.CSReqOffHelpReddot OffHelpReddot = 157;
  if (this->_internal_has_offhelpreddot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offhelpreddot_);
  }

  // .msg.CSReqVideo Video = 160;
  if (this->_internal_has_video()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);
  }

  // .msg.CSReqChangeLanguage ChangeLanguage = 161;
  if (this->_internal_has_changelanguage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changelanguage_);
  }

  // .msg.CSReqReportVideoPlay VideoPlay = 162;
  if (this->_internal_has_videoplay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.videoplay_);
  }

  // .msg.CSReqSetProvince SetProvince = 163;
  if (this->_internal_has_setprovince()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setprovince_);
  }

  // .msg.CSReqLongyuanVoice LongyuanVoice = 164;
  if (this->_internal_has_longyuanvoice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.longyuanvoice_);
  }

  // .msg.CSReqEnrollTournament EnrollTournament = 165;
  if (this->_internal_has_enrolltournament()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enrolltournament_);
  }

  // .msg.CSReqJoinTournamentRoom JoinTournamentRoom = 166;
  if (this->_internal_has_jointournamentroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jointournamentroom_);
  }

  // .msg.CSReqTournamentPointAward TournamentPointAward = 167;
  if (this->_internal_has_tournamentpointaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentpointaward_);
  }

  // .msg.CSReqDealWebMail DealWebMail = 168;
  if (this->_internal_has_dealwebmail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dealwebmail_);
  }

  // .msg.CSReqGetEnrollPlayers GetEnrollPlayers = 169;
  if (this->_internal_has_getenrollplayers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getenrollplayers_);
  }

  // .msg.CSReqChallengeAgain ChallengeAgain = 170;
  if (this->_internal_has_challengeagain()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.challengeagain_);
  }

  // .msg.CSReqHistoryChatMsg HistoryChat = 171;
  if (this->_internal_has_historychat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.historychat_);
  }

  // .msg.CSReqSetFriendInvisible SetFriendInvisible = 172;
  if (this->_internal_has_setfriendinvisible()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setfriendinvisible_);
  }

  // .msg.CSReqGetObserveAward GetObserveAward = 173;
  if (this->_internal_has_getobserveaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getobserveaward_);
  }

  // .msg.CSReqInviteObserve InviteObserve = 174;
  if (this->_internal_has_inviteobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inviteobserve_);
  }

  // .msg.CSReqRejectObserve RejectObserve = 175;
  if (this->_internal_has_rejectobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rejectobserve_);
  }

  // .msg.CSReqGetTxPlayer GetTxPlayer = 176;
  if (this->_internal_has_gettxplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gettxplayer_);
  }

  // .msg.CSReqChooseTxPlayer ChooseTxPlayer = 177;
  if (this->_internal_has_choosetxplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.choosetxplayer_);
  }

  // .msg.CSReqGetThirdPvpInfo GetThirdPvpInfo = 178;
  if (this->_internal_has_getthirdpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getthirdpvpinfo_);
  }

  // .msg.CSReqMarkPlayerGuide MarkPlayerGuide = 179;
  if (this->_internal_has_markplayerguide()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.markplayerguide_);
  }

  // .msg.CSReqMarkChessSkinClicked MarkChessSkinClicked = 180;
  if (this->_internal_has_markchessskinclicked()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.markchessskinclicked_);
  }

  // .msg.CSReqRecruitInvitePlayer RecruitInvitePlayer = 181;
  if (this->_internal_has_recruitinviteplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recruitinviteplayer_);
  }

  // .msg.CSReqRecruitBindInviter RecruitBindInviter = 182;
  if (this->_internal_has_recruitbindinviter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recruitbindinviter_);
  }

  // .msg.CSReqQueryPs4Entitlements QueryPs4Entitlements = 183;
  if (this->_internal_has_queryps4entitlements()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.queryps4entitlements_);
  }

  // .msg.CSReqActDaySign ActDaySign = 184;
  if (this->_internal_has_actdaysign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actdaysign_);
  }

  // .msg.CSReqHaveThirdPvp HaveThirdPvpInfo = 185;
  if (this->_internal_has_havethirdpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.havethirdpvpinfo_);
  }

  // .msg.CSReqActivityMall ActivityMall = 186;
  if (this->_internal_has_activitymall()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activitymall_);
  }

  // .msg.CSReqPsOnly PsOnly = 187;
  if (this->_internal_has_psonly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.psonly_);
  }

  // .msg.CSReqChangeChannelType ChangeChannelType = 188;
  if (this->_internal_has_changechanneltype()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changechanneltype_);
  }

  // .msg.CSReqCustomCardOpt CustomCardOpt = 189;
  if (this->_internal_has_customcardopt()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.customcardopt_);
  }

  // .msg.CSReqStaticsReport StaticsReport = 190;
  if (this->_internal_has_staticsreport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.staticsreport_);
  }

  // .msg.CSReqChampionHistory ChampionHistory = 191;
  if (this->_internal_has_championhistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.championhistory_);
  }

  // .msg.CSReqTournamentLastTopRank TournamentLastTopRank = 192;
  if (this->_internal_has_tournamentlasttoprank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentlasttoprank_);
  }

  // .msg.CSReqBigWinnerExpandMatch BigWinnerExpandMatch = 193;
  if (this->_internal_has_bigwinnerexpandmatch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinnerexpandmatch_);
  }

  // .msg.CSReqBigWinnerDailyAward BigWinnerDailyAward = 194;
  if (this->_internal_has_bigwinnerdailyaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinnerdailyaward_);
  }

  // .msg.CSReqBigWinnerScoreHistory BigWinnerScoreHistory = 195;
  if (this->_internal_has_bigwinnerscorehistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinnerscorehistory_);
  }

  // .msg.CSReqSmeltItem SmeltItem = 196;
  if (this->_internal_has_smeltitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.smeltitem_);
  }

  // .msg.CSReqPVEUpTalentLevel PVEUpTalentLevel = 197;
  if (this->_internal_has_pveuptalentlevel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pveuptalentlevel_);
  }

  // .msg.CSReqPVELuckyAward LuckyAward = 198;
  if (this->_internal_has_luckyaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.luckyaward_);
  }

  // .msg.CSReqApplyChannel ApplyChannel = 199;
  if (this->_internal_has_applychannel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applychannel_);
  }

  // .msg.CSReqTeamOP TeamOP = 300;
  if (this->_internal_has_teamop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamop_);
  }

  // .msg.CSReqOBTeamInfo OBTeamInfo = 301;
  if (this->_internal_has_obteaminfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obteaminfo_);
  }

  // .msg.CSReqReportHeadIconUrl HeadIconUrl = 302;
  if (this->_internal_has_headiconurl()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.headiconurl_);
  }

  // .msg.CSReqGetPvpServerGroup GetPvpServerGroup = 303;
  if (this->_internal_has_getpvpservergroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpvpservergroup_);
  }

  // .msg.CSReqReportPvpInfo ReportPvpInfo = 304;
  if (this->_internal_has_reportpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportpvpinfo_);
  }

  // .msg.CSReqChoosePlayer ChoosePlayer = 305;
  if (this->_internal_has_chooseplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chooseplayer_);
  }

  // .msg.CSReqPingTest PingTest = 306;
  if (this->_internal_has_pingtest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pingtest_);
  }

  // .msg.CSReqReportRegionInfo ReportRegionInfo = 307;
  if (this->_internal_has_reportregioninfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportregioninfo_);
  }

  // .msg.CSReqRecalledPlayer RecalledPlaeyr = 308;
  if (this->_internal_has_recalledplaeyr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recalledplaeyr_);
  }

  // .msg.CSReqWebLogin WebLogin = 309;
  if (this->_internal_has_weblogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weblogin_);
  }

  // .msg.CSReqInviteCodeReset InviteCodeReset = 310;
  if (this->_internal_has_invitecodereset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.invitecodereset_);
  }

  // .msg.CSReqRecallReward RecallReward = 311;
  if (this->_internal_has_recallreward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recallreward_);
  }

  // .msg.CSReqSwitchToCommonMatch SwitchToCommonMatch = 312;
  if (this->_internal_has_switchtocommonmatch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchtocommonmatch_);
  }

  // .msg.CSReqSwitchModeInTeam SwitchModeInTeam = 320;
  if (this->_internal_has_switchmodeinteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchmodeinteam_);
  }

  // .msg.CSReqGetTNRoomState GetTNRoomState = 321;
  if (this->_internal_has_gettnroomstate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gettnroomstate_);
  }

  // .msg.CSReqWorkshopMatch WorkshopMatch = 330;
  if (this->_internal_has_workshopmatch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workshopmatch_);
  }

  // .msg.CSReqBuyWorkshopTicket BuyWorkshopTicket = 331;
  if (this->_internal_has_buyworkshopticket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buyworkshopticket_);
  }

  // .msg.CSReqFavouriteWorkshopMap FavouriteWorkshopMap = 332;
  if (this->_internal_has_favouriteworkshopmap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.favouriteworkshopmap_);
  }

  // .msg.CSReqShortcutMapsOP ShortcutMapsOP = 333;
  if (this->_internal_has_shortcutmapsop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shortcutmapsop_);
  }

  // .msg.CSReqPlayersTournamentInfo PlayersTournamentInfo = 334;
  if (this->_internal_has_playerstournamentinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerstournamentinfo_);
  }

  // .msg.CSReqScoreWorkshopMap ScoreWorkshopMap = 335;
  if (this->_internal_has_scoreworkshopmap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scoreworkshopmap_);
  }

  // .msg.CSReqMapsVisitedByFriends MapsVisitedByFriends = 336;
  if (this->_internal_has_mapsvisitedbyfriends()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapsvisitedbyfriends_);
  }

  // .msg.CSReqVerifyRealName VerifyRealName = 350;
  if (this->_internal_has_verifyrealname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.verifyrealname_);
  }

  // .msg.CSReqFakePay FakePay = 351;
  if (this->_internal_has_fakepay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fakepay_);
  }

  // .msg.CSReqGuildCreate GuildCreate = 360;
  if (this->_internal_has_guildcreate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildcreate_);
  }

  // .msg.CSReqGuildApply GuildApply = 361;
  if (this->_internal_has_guildapply()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildapply_);
  }

  // .msg.CSReqGuildHome GuildHome = 362;
  if (this->_internal_has_guildhome()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildhome_);
  }

  // .msg.CSReqGuildInfo GuildInfo = 364;
  if (this->_internal_has_guildinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinfo_);
  }

  // .msg.CSReqGuildApprove GuildApprove = 365;
  if (this->_internal_has_guildapprove()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildapprove_);
  }

  // .msg.CSReqGuildSetRole GuildRole = 366;
  if (this->_internal_has_guildrole()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrole_);
  }

  // .msg.CSReqGuildModify GuildModify = 367;
  if (this->_internal_has_guildmodify()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildmodify_);
  }

  // .msg.CSReqGuildKickoff GuildKickoff = 368;
  if (this->_internal_has_guildkickoff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildkickoff_);
  }

  // .msg.CSReqGuildDismiss GuildDismiss = 369;
  if (this->_internal_has_guilddismiss()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guilddismiss_);
  }

  // .msg.CSReqGuildExit GuildExit = 370;
  if (this->_internal_has_guildexit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildexit_);
  }

  // .msg.CSReqGuildChat GuildChat = 371;
  if (this->_internal_has_guildchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildchat_);
  }

  // .msg.CSReqGuildList GuildList = 372;
  if (this->_internal_has_guildlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildlist_);
  }

  // .msg.CSReqGuildRecommendPlayers GuildRecommendPlayers = 373;
  if (this->_internal_has_guildrecommendplayers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrecommendplayers_);
  }

  // .msg.CSReqGuildInviteList GuildInviteList = 374;
  if (this->_internal_has_guildinvitelist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinvitelist_);
  }

  // .msg.CSReqGuildInvite GuildInvite = 375;
  if (this->_internal_has_guildinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinvite_);
  }

  // .msg.CSReqGuildResign GuildResign = 376;
  if (this->_internal_has_guildresign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildresign_);
  }

  // .msg.CSReqGuildRejectInvite GuildRejectInvite = 377;
  if (this->_internal_has_guildrejectinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrejectinvite_);
  }

  // .msg.CSReqGetVngCommentAward GetVngCommentAward = 390;
  if (this->_internal_has_getvngcommentaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getvngcommentaward_);
  }

  // .msg.CSReqLevelupChest LevelupChest = 391;
  if (this->_internal_has_levelupchest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.levelupchest_);
  }

  // .msg.CSReqWatchAd WatchAd = 392;
  if (this->_internal_has_watchad()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.watchad_);
  }

  // .msg.CSReqQueryPsTournamentRoom PsTournamentRoom = 393;
  if (this->_internal_has_pstournamentroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pstournamentroom_);
  }

  // .msg.CSReqGetAdCumulateAward GetAdCumulateAward = 394;
  if (this->_internal_has_getadcumulateaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getadcumulateaward_);
  }

  // .msg.CSReqSetMessengerPos SetMessengerPos = 535;
  if (this->_internal_has_setmessengerpos()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setmessengerpos_);
  }

  // .msg.CSReqUpdateAntiAddictionTime UpdateAntiAddictionTime = 553;
  if (this->_internal_has_updateantiaddictiontime()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updateantiaddictiontime_);
  }

  // .msg.CSReqCancelReconnect CancelReconnect = 554;
  if (this->_internal_has_cancelreconnect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelreconnect_);
  }

  // .msg.CSReqReconnect Reconnect = 556;
  if (this->_internal_has_reconnect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reconnect_);
  }

  // .msg.CSReqPassThrough PassThrough = 563;
  if (this->_internal_has_passthrough()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passthrough_);
  }

  // .msg.CSReqVisitPlayer VisitPlayer = 564;
  if (this->_internal_has_visitplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visitplayer_);
  }

  // .msg.CSReqLeaveGameEarly LeaveGameEarly = 565;
  if (this->_internal_has_leavegameearly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leavegameearly_);
  }

  // .msg.CSReqGDCommonBin GDCommonBin = 566;
  if (this->_internal_has_gdcommonbin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gdcommonbin_);
  }

  // .msg.CSReqGDCommonBinData GDBinData = 567;
  if (this->_internal_has_gdbindata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gdbindata_);
  }

  // .msg.CSReqAutoBattleOP AutoBattleOP = 568;
  if (this->_internal_has_autobattleop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autobattleop_);
  }

  // .msg.CSReqRestrictUser RestrictUser = 569;
  if (this->_internal_has_restrictuser()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.restrictuser_);
  }

  // .msg.CSReqEquipSelectRate EquipSelectRate = 570;
  if (this->_internal_has_equipselectrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equipselectrate_);
  }

  // .msg.CSReqReportAbsent ReportAbsent = 571;
  if (this->_internal_has_reportabsent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportabsent_);
  }

  // .msg.CSReqRecommendWeek RecommendWeek = 600;
  if (this->_internal_has_recommendweek()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendweek_);
  }

  // .msg.CSReqRecommendOfficial RecommendOfficial = 601;
  if (this->_internal_has_recommendofficial()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendofficial_);
  }

  // .msg.CSReqRecommendLatest RecommendLatest = 602;
  if (this->_internal_has_recommendlatest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendlatest_);
  }

  // .msg.CSReqRecommendHistory RecommendHistory = 603;
  if (this->_internal_has_recommendhistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendhistory_);
  }

  // .msg.CSReqRecommendCollect RecommendCollect = 604;
  if (this->_internal_has_recommendcollect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendcollect_);
  }

  // .msg.CSReqRecommendSet RecommendSet = 605;
  if (this->_internal_has_recommendset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendset_);
  }

  // .msg.CSReqRecommendGetCollection RecommendGetCollection = 606;
  if (this->_internal_has_recommendgetcollection()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendgetcollection_);
  }

  // .msg.CSReqRecommendEquip RecommendEquip = 607;
  if (this->_internal_has_recommendequip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendequip_);
  }

  // .msg.CSReqLoginCancel LoginCancel = 608;
  if (this->_internal_has_logincancel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logincancel_);
  }

  // .msg.CSReqConvertDebris ConvertDebris = 609;
  if (this->_internal_has_convertdebris()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convertdebris_);
  }

  // .msg.CSReqUseProtectionCard ProtectionCard = 610;
  if (this->_internal_has_protectioncard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectioncard_);
  }

  // .msg.CSReqUsePassportCard UsePassportCard = 611;
  if (this->_internal_has_usepassportcard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usepassportcard_);
  }

  // .msg.CSReqSetMedal SetMedal = 612;
  if (this->_internal_has_setmedal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setmedal_);
  }

  // .msg.CSReqUnSetMedal UnSetMedal = 613;
  if (this->_internal_has_unsetmedal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetmedal_);
  }

  // .msg.CSReqPlayerMedals PlayerMedals = 614;
  if (this->_internal_has_playermedals()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playermedals_);
  }

  // .msg.CSReqUpdateHotDot UpdateHotDot = 615;
  if (this->_internal_has_updatehotdot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatehotdot_);
  }

  // .msg.CSReqQueryHotDot QueryHotDot = 616;
  if (this->_internal_has_queryhotdot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.queryhotdot_);
  }

  // .msg.CSReqSetCache SetCache = 617;
  if (this->_internal_has_setcache()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setcache_);
  }

  // .msg.CSReqGetCache GetCache = 618;
  if (this->_internal_has_getcache()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getcache_);
  }

  // .msg.CSReqBuyChallengeCount BuyChallengeCount = 619;
  if (this->_internal_has_buychallengecount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buychallengecount_);
  }

  // .msg.CSReqGetPveRank GetPveRank = 620;
  if (this->_internal_has_getpverank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpverank_);
  }

  // .msg.CSReqLogin AuthAccount = 621;
  if (this->_internal_has_authaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authaccount_);
  }

  // .msg.CSReqUnbindAccount UnbindAccount = 622;
  if (this->_internal_has_unbindaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unbindaccount_);
  }

  // .msg.CSReqBagToItem BagToItem = 623;
  if (this->_internal_has_bagtoitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bagtoitem_);
  }

  // .msg.CSReqIdentifyItem IdentifyItem = 624;
  if (this->_internal_has_identifyitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifyitem_);
  }

  // .msg.CSReqInsetItemAffix InsetItemAffix = 625;
  if (this->_internal_has_insetitemaffix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insetitemaffix_);
  }

  // .msg.CSReqUnsetItemAffix UnsetItemAffix = 626;
  if (this->_internal_has_unsetitemaffix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetitemaffix_);
  }

  // .msg.CSReqSetDefaultAttributes SetDefaultAttributes = 627;
  if (this->_internal_has_setdefaultattributes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setdefaultattributes_);
  }

  // .msg.CSReqCheckCancel CheckCancel = 628;
  if (this->_internal_has_checkcancel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.checkcancel_);
  }

  // .msg.CSReqCancelAccount CancelAccount = 629;
  if (this->_internal_has_cancelaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelaccount_);
  }

  // .msg.CSReqOAuthApp OAuthApp = 630;
  if (this->_internal_has_oauthapp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oauthapp_);
  }

  // .msg.CSReqGetSelfNumRankData GetSelfNumRankData = 631;
  if (this->_internal_has_getselfnumrankdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getselfnumrankdata_);
  }

  // .msg.CSReqUpdateCardGroup UpdateCardGroup = 632;
  if (this->_internal_has_updatecardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroup_);
  }

  // .msg.CSReqUpdateCardGroupName UpdateCardGroupName = 633;
  if (this->_internal_has_updatecardgroupname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroupname_);
  }

  // .msg.CSReqBuyPveBuff BuyPveBuff = 634;
  if (this->_internal_has_buypvebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buypvebuff_);
  }

  // .msg.CSReqSetCardGroup SetCardGroup = 635;
  if (this->_internal_has_setcardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setcardgroup_);
  }

  // .msg.CSReqBuyPveChessTemplate BuyPveChessTemplate = 636;
  if (this->_internal_has_buypvechesstemplate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buypvechesstemplate_);
  }

  // .msg.CSReqPveUnlockChessTemplate PveUnlockChessTemplate = 637;
  if (this->_internal_has_pveunlockchesstemplate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pveunlockchesstemplate_);
  }

  // .msg.CSReqPveSetTeamDeBuff PveSetTeamDeBuff = 638;
  if (this->_internal_has_pvesetteamdebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvesetteamdebuff_);
  }

  // .msg.CSReqChoseCardGroup ChoseCardGroup = 639;
  if (this->_internal_has_chosecardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chosecardgroup_);
  }

  // .msg.CSReqRemoveOvertimeBuff RemoveOvertimeBuff = 640;
  if (this->_internal_has_removeovertimebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeovertimebuff_);
  }

  // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 643;
  if (this->_internal_has_updatenewcardgroupsign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatenewcardgroupsign_);
  }

  // .msg.CSReqTDGetOnHookAward TDGetOnHookAward = 644;
  if (this->_internal_has_tdgetonhookaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdgetonhookaward_);
  }

  // .msg.CsReqTDDraw TDDraw = 645;
  if (this->_internal_has_tddraw()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tddraw_);
  }

  // .msg.CsReqTDBuyCard TDBuyCard = 646;
  if (this->_internal_has_tdbuycard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdbuycard_);
  }

  // .msg.CSReqTDSetCardGroup TDSetCardGroup = 647;
  if (this->_internal_has_tdsetcardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdsetcardgroup_);
  }

  // .msg.CSReqTDLevelUp TDLevelUp = 648;
  if (this->_internal_has_tdlevelup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdlevelup_);
  }

  // .msg.CSReqTDEquip TDEquip = 649;
  if (this->_internal_has_tdequip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdequip_);
  }

  // .msg.CSReqMentorUpdateSetting MentorUpdateSetting = 650;
  if (this->_internal_has_mentorupdatesetting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorupdatesetting_);
  }

  // .msg.CSReqMentorInvite MentorInvite = 651;
  if (this->_internal_has_mentorinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorinvite_);
  }

  // .msg.CSReqMentorConfirmInvite MentorConfirmInvite = 652;
  if (this->_internal_has_mentorconfirminvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorconfirminvite_);
  }

  // .msg.CSReqMentorRecommendList MentorRecommendList = 653;
  if (this->_internal_has_mentorrecommendlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorrecommendlist_);
  }

  // .msg.CSReqMentorGetTaskAward MentorGetTaskAward = 654;
  if (this->_internal_has_mentorgettaskaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorgettaskaward_);
  }

  // .msg.CSReqMentorGraduate MentorGraduate = 655;
  if (this->_internal_has_mentorgraduate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorgraduate_);
  }

  // .msg.CSReqMentorRelieveRelation MentorRelieveRelation = 656;
  if (this->_internal_has_mentorrelieverelation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorrelieverelation_);
  }

  // .msg.CSReqGetMentorInfo GetMentorInfo = 657;
  if (this->_internal_has_getmentorinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmentorinfo_);
  }

  // .msg.CSReqMentorGetInviteMsg MentorGetInviteMsg = 658;
  if (this->_internal_has_mentorgetinvitemsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorgetinvitemsg_);
  }

  // .msg.CSReqUpdateCardGroupBetter UpdateCardGroupBetter = 659;
  if (this->_internal_has_updatecardgroupbetter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroupbetter_);
  }

  // .msg.CSReqUpdateCardGroupSetting UpdateCardGroupSetting = 660;
  if (this->_internal_has_updatecardgroupsetting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroupsetting_);
  }

  // .msg.CSReqSetContent SetContent = 661;
  if (this->_internal_has_setcontent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setcontent_);
  }

  // .msg.CSReqGetBalance GetBalance = 662;
  if (this->_internal_has_getbalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getbalance_);
  }

  // .msg.CSReqRechargeBalance RechargeBalance = 663;
  if (this->_internal_has_rechargebalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rechargebalance_);
  }

  // .msg.CSReqWithdrawBalance WithdrawBalance = 664;
  if (this->_internal_has_withdrawbalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.withdrawbalance_);
  }

  // .msg.CSReqPersonalRecommendMall PersonalRecommendMall = 665;
  if (this->_internal_has_personalrecommendmall()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.personalrecommendmall_);
  }

  // .msg.CSReqGetMedalChestAward GetMedalChestAward = 666;
  if (this->_internal_has_getmedalchestaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmedalchestaward_);
  }

  // .msg.CSReqSetItemAutoUse SetItemAutoUse = 667;
  if (this->_internal_has_setitemautouse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setitemautouse_);
  }

  // uint64 Seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqBody::GetClassData() const { return &_class_data_; }


void CSReqBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqBody*>(&to_msg);
  auto& from = static_cast<const CSReqBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_heart()) {
    _this->_internal_mutable_heart()->::msg::CSReqHeart::MergeFrom(
        from._internal_heart());
  }
  if (from._internal_has_login()) {
    _this->_internal_mutable_login()->::msg::CSReqLogin::MergeFrom(
        from._internal_login());
  }
  if (from._internal_has_versioncheck()) {
    _this->_internal_mutable_versioncheck()->::msg::CSReqVersionCheck::MergeFrom(
        from._internal_versioncheck());
  }
  if (from._internal_has_resourceversioncheck()) {
    _this->_internal_mutable_resourceversioncheck()->::msg::CSReqResourceVersionCheck::MergeFrom(
        from._internal_resourceversioncheck());
  }
  if (from._internal_has_applyhallserver()) {
    _this->_internal_mutable_applyhallserver()->::msg::CSReqApplyHallServer::MergeFrom(
        from._internal_applyhallserver());
  }
  if (from._internal_has_getnumrank()) {
    _this->_internal_mutable_getnumrank()->::msg::CSReqGetNumRank::MergeFrom(
        from._internal_getnumrank());
  }
  if (from._internal_has_worldchat()) {
    _this->_internal_mutable_worldchat()->::msg::CSReqWorldChat::MergeFrom(
        from._internal_worldchat());
  }
  if (from._internal_has_playersbaseinfo()) {
    _this->_internal_mutable_playersbaseinfo()->::msg::CSReqPlayersBaseInfo::MergeFrom(
        from._internal_playersbaseinfo());
  }
  if (from._internal_has_playerdetailinfo()) {
    _this->_internal_mutable_playerdetailinfo()->::msg::CSReqPlayerDetailInfo::MergeFrom(
        from._internal_playerdetailinfo());
  }
  if (from._internal_has_readmail()) {
    _this->_internal_mutable_readmail()->::msg::CSReqReadMail::MergeFrom(
        from._internal_readmail());
  }
  if (from._internal_has_getmailaward()) {
    _this->_internal_mutable_getmailaward()->::msg::CSReqGetMailAward::MergeFrom(
        from._internal_getmailaward());
  }
  if (from._internal_has_buyegg()) {
    _this->_internal_mutable_buyegg()->::msg::CSReqBuyEgg::MergeFrom(
        from._internal_buyegg());
  }
  if (from._internal_has_usernameset()) {
    _this->_internal_mutable_usernameset()->::msg::CSReqUserNameSet::MergeFrom(
        from._internal_usernameset());
  }
  if (from._internal_has_usernamerandom()) {
    _this->_internal_mutable_usernamerandom()->::msg::CSReqUserNameRandom::MergeFrom(
        from._internal_usernamerandom());
  }
  if (from._internal_has_headpicset()) {
    _this->_internal_mutable_headpicset()->::msg::CSReqHeadPicSet::MergeFrom(
        from._internal_headpicset());
  }
  if (from._internal_has_pvp()) {
    _this->_internal_mutable_pvp()->::msg::CSReqPvp::MergeFrom(
        from._internal_pvp());
  }
  if (from._internal_has_dresschessplayer()) {
    _this->_internal_mutable_dresschessplayer()->::msg::CSReqDressChessPlayer::MergeFrom(
        from._internal_dresschessplayer());
  }
  if (from._internal_has_dressscene()) {
    _this->_internal_mutable_dressscene()->::msg::CSReqDressScene::MergeFrom(
        from._internal_dressscene());
  }
  if (from._internal_has_pvplogin()) {
    _this->_internal_mutable_pvplogin()->::msg::CSReqPvpLogin::MergeFrom(
        from._internal_pvplogin());
  }
  if (from._internal_has_pvpend()) {
    _this->_internal_mutable_pvpend()->::msg::CSReqPvpEnd::MergeFrom(
        from._internal_pvpend());
  }
  if (from._internal_has_playerfinish()) {
    _this->_internal_mutable_playerfinish()->::msg::CSReqPlayerFinish::MergeFrom(
        from._internal_playerfinish());
  }
  if (from._internal_has_playerquit()) {
    _this->_internal_mutable_playerquit()->::msg::CSReqPlayerQuit::MergeFrom(
        from._internal_playerquit());
  }
  if (from._internal_has_sellitem()) {
    _this->_internal_mutable_sellitem()->::msg::CSReqSellItem::MergeFrom(
        from._internal_sellitem());
  }
  if (from._internal_has_getevalaward()) {
    _this->_internal_mutable_getevalaward()->::msg::CSReqGetEvalAward::MergeFrom(
        from._internal_getevalaward());
  }
  if (from._internal_has_usechessplayer()) {
    _this->_internal_mutable_usechessplayer()->::msg::CSReqUseChessPlayer::MergeFrom(
        from._internal_usechessplayer());
  }
  if (from._internal_has_guidreport()) {
    _this->_internal_mutable_guidreport()->::msg::CSReqGuidReport::MergeFrom(
        from._internal_guidreport());
  }
  if (from._internal_has_getcodeaward()) {
    _this->_internal_mutable_getcodeaward()->::msg::CSReqGetCodeAward::MergeFrom(
        from._internal_getcodeaward());
  }
  if (from._internal_has_roundreport()) {
    _this->_internal_mutable_roundreport()->::msg::CSReqRoundReport::MergeFrom(
        from._internal_roundreport());
  }
  if (from._internal_has_loadingprogress()) {
    _this->_internal_mutable_loadingprogress()->::msg::CSReqLoadingProgress::MergeFrom(
        from._internal_loadingprogress());
  }
  if (from._internal_has_pvpchat()) {
    _this->_internal_mutable_pvpchat()->::msg::CSReqPvpChat::MergeFrom(
        from._internal_pvpchat());
  }
  if (from._internal_has_chesscombine()) {
    _this->_internal_mutable_chesscombine()->::msg::CSReqChessCombine::MergeFrom(
        from._internal_chesscombine());
  }
  if (from._internal_has_expose()) {
    _this->_internal_mutable_expose()->::msg::CSReqExpose::MergeFrom(
        from._internal_expose());
  }
  if (from._internal_has_applyorderid()) {
    _this->_internal_mutable_applyorderid()->::msg::CSReqApplyOrderId::MergeFrom(
        from._internal_applyorderid());
  }
  if (from._internal_has_reportorderinfo()) {
    _this->_internal_mutable_reportorderinfo()->::msg::CSReqReportOrderInfo::MergeFrom(
        from._internal_reportorderinfo());
  }
  if (from._internal_has_setitem()) {
    _this->_internal_mutable_setitem()->::msg::CSReqSetItem::MergeFrom(
        from._internal_setitem());
  }
  if (from._internal_has_unsetitem()) {
    _this->_internal_mutable_unsetitem()->::msg::CSReqUnsetItem::MergeFrom(
        from._internal_unsetitem());
  }
  if (from._internal_has_randomitem()) {
    _this->_internal_mutable_randomitem()->::msg::CSReqRandomItem::MergeFrom(
        from._internal_randomitem());
  }
  if (from._internal_has_chat()) {
    _this->_internal_mutable_chat()->::msg::CSReqChat::MergeFrom(
        from._internal_chat());
  }
  if (from._internal_has_setchessplayer()) {
    _this->_internal_mutable_setchessplayer()->::msg::CSReqSetChessPlayer::MergeFrom(
        from._internal_setchessplayer());
  }
  if (from._internal_has_unsetchessplayer()) {
    _this->_internal_mutable_unsetchessplayer()->::msg::CSReqUnsetChessPlayer::MergeFrom(
        from._internal_unsetchessplayer());
  }
  if (from._internal_has_getfanslist()) {
    _this->_internal_mutable_getfanslist()->::msg::CSReqGetFansList::MergeFrom(
        from._internal_getfanslist());
  }
  if (from._internal_has_followplayer()) {
    _this->_internal_mutable_followplayer()->::msg::CSReqFollowPlayer::MergeFrom(
        from._internal_followplayer());
  }
  if (from._internal_has_unfollowplayer()) {
    _this->_internal_mutable_unfollowplayer()->::msg::CSReqUnfollowPlayer::MergeFrom(
        from._internal_unfollowplayer());
  }
  if (from._internal_has_playersstatusinfo()) {
    _this->_internal_mutable_playersstatusinfo()->::msg::CSReqPlayersStatusInfo::MergeFrom(
        from._internal_playersstatusinfo());
  }
  if (from._internal_has_invitejointeam()) {
    _this->_internal_mutable_invitejointeam()->::msg::CSReqInviteJoinTeam::MergeFrom(
        from._internal_invitejointeam());
  }
  if (from._internal_has_jointeam()) {
    _this->_internal_mutable_jointeam()->::msg::CSReqJoinTeam::MergeFrom(
        from._internal_jointeam());
  }
  if (from._internal_has_kickoffteamplayer()) {
    _this->_internal_mutable_kickoffteamplayer()->::msg::CSReqKickOffTeamPlayer::MergeFrom(
        from._internal_kickoffteamplayer());
  }
  if (from._internal_has_teammsg()) {
    _this->_internal_mutable_teammsg()->::msg::CSReqTeamMsg::MergeFrom(
        from._internal_teammsg());
  }
  if (from._internal_has_teamready()) {
    _this->_internal_mutable_teamready()->::msg::CSReqTeamReady::MergeFrom(
        from._internal_teamready());
  }
  if (from._internal_has_reportpayresponse()) {
    _this->_internal_mutable_reportpayresponse()->::msg::CSReqReportPayResponse::MergeFrom(
        from._internal_reportpayresponse());
  }
  if (from._internal_has_rejectjointeam()) {
    _this->_internal_mutable_rejectjointeam()->::msg::CSReqRejectJoinTeam::MergeFrom(
        from._internal_rejectjointeam());
  }
  if (from._internal_has_shieldchat()) {
    _this->_internal_mutable_shieldchat()->::msg::CSReqShieldChat::MergeFrom(
        from._internal_shieldchat());
  }
  if (from._internal_has_buypassportlevel()) {
    _this->_internal_mutable_buypassportlevel()->::msg::CSReqBuyPassportLevel::MergeFrom(
        from._internal_buypassportlevel());
  }
  if (from._internal_has_upgradepassport()) {
    _this->_internal_mutable_upgradepassport()->::msg::CSReqUpgradePassport::MergeFrom(
        from._internal_upgradepassport());
  }
  if (from._internal_has_getpassportlevelaward()) {
    _this->_internal_mutable_getpassportlevelaward()->::msg::CSReqGetPassportLevelAward::MergeFrom(
        from._internal_getpassportlevelaward());
  }
  if (from._internal_has_getpassporttaskaward()) {
    _this->_internal_mutable_getpassporttaskaward()->::msg::CSReqGetPassportTaskAward::MergeFrom(
        from._internal_getpassporttaskaward());
  }
  if (from._internal_has_telbook()) {
    _this->_internal_mutable_telbook()->::msg::CSReqTelBook::MergeFrom(
        from._internal_telbook());
  }
  if (from._internal_has_activatepassport()) {
    _this->_internal_mutable_activatepassport()->::msg::CSReqActivatePassport::MergeFrom(
        from._internal_activatepassport());
  }
  if (from._internal_has_rankseasoneval()) {
    _this->_internal_mutable_rankseasoneval()->::msg::CSReqRankSeasonEval::MergeFrom(
        from._internal_rankseasoneval());
  }
  if (from._internal_has_bindaccount()) {
    _this->_internal_mutable_bindaccount()->::msg::CSReqBindAccount::MergeFrom(
        from._internal_bindaccount());
  }
  if (from._internal_has_incadsshowcount()) {
    _this->_internal_mutable_incadsshowcount()->::msg::CSReqIncAdShowCount::MergeFrom(
        from._internal_incadsshowcount());
  }
  if (from._internal_has_usebonuscard()) {
    _this->_internal_mutable_usebonuscard()->::msg::CSReqUseBonusCard::MergeFrom(
        from._internal_usebonuscard());
  }
  if (from._internal_has_getseasonaward()) {
    _this->_internal_mutable_getseasonaward()->::msg::CSReqGetSeasonAward::MergeFrom(
        from._internal_getseasonaward());
  }
  if (from._internal_has_getalphaactivityaward()) {
    _this->_internal_mutable_getalphaactivityaward()->::msg::CSReqGetAlphaActivityAward::MergeFrom(
        from._internal_getalphaactivityaward());
  }
  if (from._internal_has_getlanguagedata()) {
    _this->_internal_mutable_getlanguagedata()->::msg::CSReqGetLanguageData::MergeFrom(
        from._internal_getlanguagedata());
  }
  if (from._internal_has_getactivityaward()) {
    _this->_internal_mutable_getactivityaward()->::msg::CSReqGetActivityAward::MergeFrom(
        from._internal_getactivityaward());
  }
  if (from._internal_has_getactivitydata()) {
    _this->_internal_mutable_getactivitydata()->::msg::CSReqGetActivityData::MergeFrom(
        from._internal_getactivitydata());
  }
  if (from._internal_has_sendsms()) {
    _this->_internal_mutable_sendsms()->::msg::CSReqSendSms::MergeFrom(
        from._internal_sendsms());
  }
  if (from._internal_has_getmeleeaward()) {
    _this->_internal_mutable_getmeleeaward()->::msg::CSReqGetMeleeAward::MergeFrom(
        from._internal_getmeleeaward());
  }
  if (from._internal_has_addaitoteam()) {
    _this->_internal_mutable_addaitoteam()->::msg::CSReqAddAiToTeam::MergeFrom(
        from._internal_addaitoteam());
  }
  if (from._internal_has_share()) {
    _this->_internal_mutable_share()->::msg::CSReqShare::MergeFrom(
        from._internal_share());
  }
  if (from._internal_has_skipinterface()) {
    _this->_internal_mutable_skipinterface()->::msg::CSReqSkipInterface::MergeFrom(
        from._internal_skipinterface());
  }
  if (from._internal_has_teamgame()) {
    _this->_internal_mutable_teamgame()->::msg::CSReqTeamGame::MergeFrom(
        from._internal_teamgame());
  }
  if (from._internal_has_setteammode()) {
    _this->_internal_mutable_setteammode()->::msg::CSReqSetTeamMode::MergeFrom(
        from._internal_setteammode());
  }
  if (from._internal_has_historypvpshowpermission()) {
    _this->_internal_mutable_historypvpshowpermission()->::msg::CSReqSetHistoryPvpShowPermission::MergeFrom(
        from._internal_historypvpshowpermission());
  }
  if (from._internal_has_searchteam()) {
    _this->_internal_mutable_searchteam()->::msg::CSReqSearchTeam::MergeFrom(
        from._internal_searchteam());
  }
  if (from._internal_has_applychat()) {
    _this->_internal_mutable_applychat()->::msg::CSReqApplyChat::MergeFrom(
        from._internal_applychat());
  }
  if (from._internal_has_chatlogin()) {
    _this->_internal_mutable_chatlogin()->::msg::CSReqChatLogin::MergeFrom(
        from._internal_chatlogin());
  }
  if (from._internal_has_probenetdelay()) {
    _this->_internal_mutable_probenetdelay()->::msg::CSReqProbeNetDelay::MergeFrom(
        from._internal_probenetdelay());
  }
  if (from._internal_has_geteggs()) {
    _this->_internal_mutable_geteggs()->::msg::CSReqGetEggs::MergeFrom(
        from._internal_geteggs());
  }
  if (from._internal_has_buygoods()) {
    _this->_internal_mutable_buygoods()->::msg::CSReqBuyGoods::MergeFrom(
        from._internal_buygoods());
  }
  if (from._internal_has_exchangepassportgoods()) {
    _this->_internal_mutable_exchangepassportgoods()->::msg::CSReqExchangePassportGoods::MergeFrom(
        from._internal_exchangepassportgoods());
  }
  if (from._internal_has_usepassporttaskcard()) {
    _this->_internal_mutable_usepassporttaskcard()->::msg::CSReqUsePassportTaskCard::MergeFrom(
        from._internal_usepassporttaskcard());
  }
  if (from._internal_has_openrandchest()) {
    _this->_internal_mutable_openrandchest()->::msg::CSReqOpenRandChest::MergeFrom(
        from._internal_openrandchest());
  }
  if (from._internal_has_egglottery()) {
    _this->_internal_mutable_egglottery()->::msg::CSReqEggLottery::MergeFrom(
        from._internal_egglottery());
  }
  if (from._internal_has_querydiamondbalance()) {
    _this->_internal_mutable_querydiamondbalance()->::msg::CSReqQueryDiamondBalance::MergeFrom(
        from._internal_querydiamondbalance());
  }
  if (from._internal_has_useitem()) {
    _this->_internal_mutable_useitem()->::msg::CSReqUseItem::MergeFrom(
        from._internal_useitem());
  }
  if (from._internal_has_useexperiencecard()) {
    _this->_internal_mutable_useexperiencecard()->::msg::CSReqUseExperienceCard::MergeFrom(
        from._internal_useexperiencecard());
  }
  if (from._internal_has_randtargetitem()) {
    _this->_internal_mutable_randtargetitem()->::msg::CSReqRandTargetItem::MergeFrom(
        from._internal_randtargetitem());
  }
  if (from._internal_has_addblacklist()) {
    _this->_internal_mutable_addblacklist()->::msg::CSReqAddBlacklist::MergeFrom(
        from._internal_addblacklist());
  }
  if (from._internal_has_removeblacklist()) {
    _this->_internal_mutable_removeblacklist()->::msg::CSReqRemoveBlacklist::MergeFrom(
        from._internal_removeblacklist());
  }
  if (from._internal_has_reportplayerbirth()) {
    _this->_internal_mutable_reportplayerbirth()->::msg::CSReqReportPlayerBirth::MergeFrom(
        from._internal_reportplayerbirth());
  }
  if (from._internal_has_reportinfoinput()) {
    _this->_internal_mutable_reportinfoinput()->::msg::CSReqReportInfoInput::MergeFrom(
        from._internal_reportinfoinput());
  }
  if (from._internal_has_sendverificationcode()) {
    _this->_internal_mutable_sendverificationcode()->::msg::CSReqSendVerificationCode::MergeFrom(
        from._internal_sendverificationcode());
  }
  if (from._internal_has_bindphonenumber()) {
    _this->_internal_mutable_bindphonenumber()->::msg::CSReqBindPhoneNumber::MergeFrom(
        from._internal_bindphonenumber());
  }
  if (from._internal_has_worldinvite()) {
    _this->_internal_mutable_worldinvite()->::msg::CSReqWorldInvite::MergeFrom(
        from._internal_worldinvite());
  }
  if (from._internal_has_removeexpireitem()) {
    _this->_internal_mutable_removeexpireitem()->::msg::CSReqRemoveExpireItem::MergeFrom(
        from._internal_removeexpireitem());
  }
  if (from._internal_has_getmallgoods()) {
    _this->_internal_mutable_getmallgoods()->::msg::CSReqGetMallGoods::MergeFrom(
        from._internal_getmallgoods());
  }
  if (from._internal_has_buymallgoods()) {
    _this->_internal_mutable_buymallgoods()->::msg::CSReqBuyMallGoods::MergeFrom(
        from._internal_buymallgoods());
  }
  if (from._internal_has_bindsharingcode()) {
    _this->_internal_mutable_bindsharingcode()->::msg::CSReqBindSharingCode::MergeFrom(
        from._internal_bindsharingcode());
  }
  if (from._internal_has_wxblessbag()) {
    _this->_internal_mutable_wxblessbag()->::msg::CSReqWXBlessBag::MergeFrom(
        from._internal_wxblessbag());
  }
  if (from._internal_has_updatefriendsingame()) {
    _this->_internal_mutable_updatefriendsingame()->::msg::CSReqUpdateFriendsInGame::MergeFrom(
        from._internal_updatefriendsingame());
  }
  if (from._internal_has_sharereward()) {
    _this->_internal_mutable_sharereward()->::msg::CSReqShareReward::MergeFrom(
        from._internal_sharereward());
  }
  if (from._internal_has_allfightinfo()) {
    _this->_internal_mutable_allfightinfo()->::msg::CSReqAllFightInfo::MergeFrom(
        from._internal_allfightinfo());
  }
  if (from._internal_has_getoldplayer()) {
    _this->_internal_mutable_getoldplayer()->::msg::CSReqGetOldPlayer::MergeFrom(
        from._internal_getoldplayer());
  }
  if (from._internal_has_bindoldplayer()) {
    _this->_internal_mutable_bindoldplayer()->::msg::CSReqBindOldPlayer::MergeFrom(
        from._internal_bindoldplayer());
  }
  if (from._internal_has_sendverificationcodewithcheckredis()) {
    _this->_internal_mutable_sendverificationcodewithcheckredis()->::msg::CSReqSendVerificationCodeWithCheckRedis::MergeFrom(
        from._internal_sendverificationcodewithcheckredis());
  }
  if (from._internal_has_reportsetting()) {
    _this->_internal_mutable_reportsetting()->::msg::CSReqReportSetting::MergeFrom(
        from._internal_reportsetting());
  }
  if (from._internal_has_antidata()) {
    _this->_internal_mutable_antidata()->::msg::CSReqAntiData::MergeFrom(
        from._internal_antidata());
  }
  if (from._internal_has_tlogdata()) {
    _this->_internal_mutable_tlogdata()->::msg::CSReqTlogData::MergeFrom(
        from._internal_tlogdata());
  }
  if (from._internal_has_daysign()) {
    _this->_internal_mutable_daysign()->::msg::CSReqDaySign::MergeFrom(
        from._internal_daysign());
  }
  if (from._internal_has_dayfitavoid()) {
    _this->_internal_mutable_dayfitavoid()->::msg::CSReqDayFitAvoid::MergeFrom(
        from._internal_dayfitavoid());
  }
  if (from._internal_has_sharecountaward()) {
    _this->_internal_mutable_sharecountaward()->::msg::CSReqShareCountAward::MergeFrom(
        from._internal_sharecountaward());
  }
  if (from._internal_has_actitemexch()) {
    _this->_internal_mutable_actitemexch()->::msg::CSReqActItemExch::MergeFrom(
        from._internal_actitemexch());
  }
  if (from._internal_has_realationstar()) {
    _this->_internal_mutable_realationstar()->::msg::CSReqRealationStar::MergeFrom(
        from._internal_realationstar());
  }
  if (from._internal_has_getrealationstarinvitesucc()) {
    _this->_internal_mutable_getrealationstarinvitesucc()->::msg::CSReqGetRealationStarInviteSucc::MergeFrom(
        from._internal_getrealationstarinvitesucc());
  }
  if (from._internal_has_getrealationstar()) {
    _this->_internal_mutable_getrealationstar()->::msg::CSReqGetRealationStar::MergeFrom(
        from._internal_getrealationstar());
  }
  if (from._internal_has_reqactrecord()) {
    _this->_internal_mutable_reqactrecord()->::msg::CSReqGetActRecord::MergeFrom(
        from._internal_reqactrecord());
  }
  if (from._internal_has_joinvoiceteam()) {
    _this->_internal_mutable_joinvoiceteam()->::msg::CSReqJoinVoiceTeam::MergeFrom(
        from._internal_joinvoiceteam());
  }
  if (from._internal_has_joinvoicepvp()) {
    _this->_internal_mutable_joinvoicepvp()->::msg::CSReqJoinVoicePvp::MergeFrom(
        from._internal_joinvoicepvp());
  }
  if (from._internal_has_joinvoicecamp()) {
    _this->_internal_mutable_joinvoicecamp()->::msg::CSReqJoinVoiceCamp::MergeFrom(
        from._internal_joinvoicecamp());
  }
  if (from._internal_has_usercountryset()) {
    _this->_internal_mutable_usercountryset()->::msg::CSReqUserCountrySet::MergeFrom(
        from._internal_usercountryset());
  }
  if (from._internal_has_offlineinvitejointeam()) {
    _this->_internal_mutable_offlineinvitejointeam()->::msg::CSReqOfflineInviteJoinTeam::MergeFrom(
        from._internal_offlineinvitejointeam());
  }
  if (from._internal_has_observe()) {
    _this->_internal_mutable_observe()->::msg::CSReqObserve::MergeFrom(
        from._internal_observe());
  }
  if (from._internal_has_getrecommendpvp()) {
    _this->_internal_mutable_getrecommendpvp()->::msg::CSReqGetRecommendPvp::MergeFrom(
        from._internal_getrecommendpvp());
  }
  if (from._internal_has_observelogin()) {
    _this->_internal_mutable_observelogin()->::msg::CSReqObserveLogin::MergeFrom(
        from._internal_observelogin());
  }
  if (from._internal_has_quitobserve()) {
    _this->_internal_mutable_quitobserve()->::msg::CSReqQuitObserve::MergeFrom(
        from._internal_quitobserve());
  }
  if (from._internal_has_getobserveinfo()) {
    _this->_internal_mutable_getobserveinfo()->::msg::CSReqGetObserveInfo::MergeFrom(
        from._internal_getobserveinfo());
  }
  if (from._internal_has_freeflow()) {
    _this->_internal_mutable_freeflow()->::msg::CSReqFreeFlow::MergeFrom(
        from._internal_freeflow());
  }
  if (from._internal_has_setpushtoken()) {
    _this->_internal_mutable_setpushtoken()->::msg::CSReqSetPushToken::MergeFrom(
        from._internal_setpushtoken());
  }
  if (from._internal_has_tlogevent()) {
    _this->_internal_mutable_tlogevent()->::msg::CSReqTlogEvent::MergeFrom(
        from._internal_tlogevent());
  }
  if (from._internal_has_wxvvipaward()) {
    _this->_internal_mutable_wxvvipaward()->::msg::CSReqWxVVipAward::MergeFrom(
        from._internal_wxvvipaward());
  }
  if (from._internal_has_relationstarwx()) {
    _this->_internal_mutable_relationstarwx()->::msg::CSReqGetRelationStarWX::MergeFrom(
        from._internal_relationstarwx());
  }
  if (from._internal_has_sendwxredpacket()) {
    _this->_internal_mutable_sendwxredpacket()->::msg::CSReqSendWxRedPacket::MergeFrom(
        from._internal_sendwxredpacket());
  }
  if (from._internal_has_recvwxredpacket()) {
    _this->_internal_mutable_recvwxredpacket()->::msg::CSReqRecvWxRedPacket::MergeFrom(
        from._internal_recvwxredpacket());
  }
  if (from._internal_has_wxredpktlike()) {
    _this->_internal_mutable_wxredpktlike()->::msg::CSReqWxRedPktLike::MergeFrom(
        from._internal_wxredpktlike());
  }
  if (from._internal_has_wxredpktrank()) {
    _this->_internal_mutable_wxredpktrank()->::msg::CSReqWxRedPktRank::MergeFrom(
        from._internal_wxredpktrank());
  }
  if (from._internal_has_setobserveprivilege()) {
    _this->_internal_mutable_setobserveprivilege()->::msg::CSReqObservePrivilege::MergeFrom(
        from._internal_setobserveprivilege());
  }
  if (from._internal_has_presetfastchat()) {
    _this->_internal_mutable_presetfastchat()->::msg::CSReqPresetFastChat::MergeFrom(
        from._internal_presetfastchat());
  }
  if (from._internal_has_changeslotteam()) {
    _this->_internal_mutable_changeslotteam()->::msg::CSReqChangeSlotTeam::MergeFrom(
        from._internal_changeslotteam());
  }
  if (from._internal_has_changesubmodeteam()) {
    _this->_internal_mutable_changesubmodeteam()->::msg::CSReqChangeSubModeTeam::MergeFrom(
        from._internal_changesubmodeteam());
  }
  if (from._internal_has_confirmchangeslotteam()) {
    _this->_internal_mutable_confirmchangeslotteam()->::msg::CSReqConfirmChangeSlotTeam::MergeFrom(
        from._internal_confirmchangeslotteam());
  }
  if (from._internal_has_pvproundend()) {
    _this->_internal_mutable_pvproundend()->::msg::CSReqPvpRoundEnd::MergeFrom(
        from._internal_pvproundend());
  }
  if (from._internal_has_observechatlogin()) {
    _this->_internal_mutable_observechatlogin()->::msg::CSReqObserveChatLogin::MergeFrom(
        from._internal_observechatlogin());
  }
  if (from._internal_has_pvpconfirm()) {
    _this->_internal_mutable_pvpconfirm()->::msg::CSReqPvpConfirm::MergeFrom(
        from._internal_pvpconfirm());
  }
  if (from._internal_has_activitypicshare()) {
    _this->_internal_mutable_activitypicshare()->::msg::CSReqActivityPicShare::MergeFrom(
        from._internal_activitypicshare());
  }
  if (from._internal_has_bindoldbusinessplayer()) {
    _this->_internal_mutable_bindoldbusinessplayer()->::msg::CSReqBindOldBusinessPlayer::MergeFrom(
        from._internal_bindoldbusinessplayer());
  }
  if (from._internal_has_translate()) {
    _this->_internal_mutable_translate()->::msg::CSReqTranslate::MergeFrom(
        from._internal_translate());
  }
  if (from._internal_has_submitquestionnaire()) {
    _this->_internal_mutable_submitquestionnaire()->::msg::CSReqSubmitQuestionnaire::MergeFrom(
        from._internal_submitquestionnaire());
  }
  if (from._internal_has_cancelchangeslot()) {
    _this->_internal_mutable_cancelchangeslot()->::msg::CSReqCancelChangeSlot::MergeFrom(
        from._internal_cancelchangeslot());
  }
  if (from._internal_has_setchessskin()) {
    _this->_internal_mutable_setchessskin()->::msg::CSReqSetChessSkin::MergeFrom(
        from._internal_setchessskin());
  }
  if (from._internal_has_unsetchessskin()) {
    _this->_internal_mutable_unsetchessskin()->::msg::CSReqUnsetChessSkin::MergeFrom(
        from._internal_unsetchessskin());
  }
  if (from._internal_has_compose()) {
    _this->_internal_mutable_compose()->::msg::CSReqCompose::MergeFrom(
        from._internal_compose());
  }
  if (from._internal_has_offhelpreddot()) {
    _this->_internal_mutable_offhelpreddot()->::msg::CSReqOffHelpReddot::MergeFrom(
        from._internal_offhelpreddot());
  }
  if (from._internal_has_video()) {
    _this->_internal_mutable_video()->::msg::CSReqVideo::MergeFrom(
        from._internal_video());
  }
  if (from._internal_has_changelanguage()) {
    _this->_internal_mutable_changelanguage()->::msg::CSReqChangeLanguage::MergeFrom(
        from._internal_changelanguage());
  }
  if (from._internal_has_videoplay()) {
    _this->_internal_mutable_videoplay()->::msg::CSReqReportVideoPlay::MergeFrom(
        from._internal_videoplay());
  }
  if (from._internal_has_setprovince()) {
    _this->_internal_mutable_setprovince()->::msg::CSReqSetProvince::MergeFrom(
        from._internal_setprovince());
  }
  if (from._internal_has_longyuanvoice()) {
    _this->_internal_mutable_longyuanvoice()->::msg::CSReqLongyuanVoice::MergeFrom(
        from._internal_longyuanvoice());
  }
  if (from._internal_has_enrolltournament()) {
    _this->_internal_mutable_enrolltournament()->::msg::CSReqEnrollTournament::MergeFrom(
        from._internal_enrolltournament());
  }
  if (from._internal_has_jointournamentroom()) {
    _this->_internal_mutable_jointournamentroom()->::msg::CSReqJoinTournamentRoom::MergeFrom(
        from._internal_jointournamentroom());
  }
  if (from._internal_has_tournamentpointaward()) {
    _this->_internal_mutable_tournamentpointaward()->::msg::CSReqTournamentPointAward::MergeFrom(
        from._internal_tournamentpointaward());
  }
  if (from._internal_has_dealwebmail()) {
    _this->_internal_mutable_dealwebmail()->::msg::CSReqDealWebMail::MergeFrom(
        from._internal_dealwebmail());
  }
  if (from._internal_has_getenrollplayers()) {
    _this->_internal_mutable_getenrollplayers()->::msg::CSReqGetEnrollPlayers::MergeFrom(
        from._internal_getenrollplayers());
  }
  if (from._internal_has_challengeagain()) {
    _this->_internal_mutable_challengeagain()->::msg::CSReqChallengeAgain::MergeFrom(
        from._internal_challengeagain());
  }
  if (from._internal_has_historychat()) {
    _this->_internal_mutable_historychat()->::msg::CSReqHistoryChatMsg::MergeFrom(
        from._internal_historychat());
  }
  if (from._internal_has_setfriendinvisible()) {
    _this->_internal_mutable_setfriendinvisible()->::msg::CSReqSetFriendInvisible::MergeFrom(
        from._internal_setfriendinvisible());
  }
  if (from._internal_has_getobserveaward()) {
    _this->_internal_mutable_getobserveaward()->::msg::CSReqGetObserveAward::MergeFrom(
        from._internal_getobserveaward());
  }
  if (from._internal_has_inviteobserve()) {
    _this->_internal_mutable_inviteobserve()->::msg::CSReqInviteObserve::MergeFrom(
        from._internal_inviteobserve());
  }
  if (from._internal_has_rejectobserve()) {
    _this->_internal_mutable_rejectobserve()->::msg::CSReqRejectObserve::MergeFrom(
        from._internal_rejectobserve());
  }
  if (from._internal_has_gettxplayer()) {
    _this->_internal_mutable_gettxplayer()->::msg::CSReqGetTxPlayer::MergeFrom(
        from._internal_gettxplayer());
  }
  if (from._internal_has_choosetxplayer()) {
    _this->_internal_mutable_choosetxplayer()->::msg::CSReqChooseTxPlayer::MergeFrom(
        from._internal_choosetxplayer());
  }
  if (from._internal_has_getthirdpvpinfo()) {
    _this->_internal_mutable_getthirdpvpinfo()->::msg::CSReqGetThirdPvpInfo::MergeFrom(
        from._internal_getthirdpvpinfo());
  }
  if (from._internal_has_markplayerguide()) {
    _this->_internal_mutable_markplayerguide()->::msg::CSReqMarkPlayerGuide::MergeFrom(
        from._internal_markplayerguide());
  }
  if (from._internal_has_markchessskinclicked()) {
    _this->_internal_mutable_markchessskinclicked()->::msg::CSReqMarkChessSkinClicked::MergeFrom(
        from._internal_markchessskinclicked());
  }
  if (from._internal_has_recruitinviteplayer()) {
    _this->_internal_mutable_recruitinviteplayer()->::msg::CSReqRecruitInvitePlayer::MergeFrom(
        from._internal_recruitinviteplayer());
  }
  if (from._internal_has_recruitbindinviter()) {
    _this->_internal_mutable_recruitbindinviter()->::msg::CSReqRecruitBindInviter::MergeFrom(
        from._internal_recruitbindinviter());
  }
  if (from._internal_has_queryps4entitlements()) {
    _this->_internal_mutable_queryps4entitlements()->::msg::CSReqQueryPs4Entitlements::MergeFrom(
        from._internal_queryps4entitlements());
  }
  if (from._internal_has_actdaysign()) {
    _this->_internal_mutable_actdaysign()->::msg::CSReqActDaySign::MergeFrom(
        from._internal_actdaysign());
  }
  if (from._internal_has_havethirdpvpinfo()) {
    _this->_internal_mutable_havethirdpvpinfo()->::msg::CSReqHaveThirdPvp::MergeFrom(
        from._internal_havethirdpvpinfo());
  }
  if (from._internal_has_activitymall()) {
    _this->_internal_mutable_activitymall()->::msg::CSReqActivityMall::MergeFrom(
        from._internal_activitymall());
  }
  if (from._internal_has_psonly()) {
    _this->_internal_mutable_psonly()->::msg::CSReqPsOnly::MergeFrom(
        from._internal_psonly());
  }
  if (from._internal_has_changechanneltype()) {
    _this->_internal_mutable_changechanneltype()->::msg::CSReqChangeChannelType::MergeFrom(
        from._internal_changechanneltype());
  }
  if (from._internal_has_customcardopt()) {
    _this->_internal_mutable_customcardopt()->::msg::CSReqCustomCardOpt::MergeFrom(
        from._internal_customcardopt());
  }
  if (from._internal_has_staticsreport()) {
    _this->_internal_mutable_staticsreport()->::msg::CSReqStaticsReport::MergeFrom(
        from._internal_staticsreport());
  }
  if (from._internal_has_championhistory()) {
    _this->_internal_mutable_championhistory()->::msg::CSReqChampionHistory::MergeFrom(
        from._internal_championhistory());
  }
  if (from._internal_has_tournamentlasttoprank()) {
    _this->_internal_mutable_tournamentlasttoprank()->::msg::CSReqTournamentLastTopRank::MergeFrom(
        from._internal_tournamentlasttoprank());
  }
  if (from._internal_has_bigwinnerexpandmatch()) {
    _this->_internal_mutable_bigwinnerexpandmatch()->::msg::CSReqBigWinnerExpandMatch::MergeFrom(
        from._internal_bigwinnerexpandmatch());
  }
  if (from._internal_has_bigwinnerdailyaward()) {
    _this->_internal_mutable_bigwinnerdailyaward()->::msg::CSReqBigWinnerDailyAward::MergeFrom(
        from._internal_bigwinnerdailyaward());
  }
  if (from._internal_has_bigwinnerscorehistory()) {
    _this->_internal_mutable_bigwinnerscorehistory()->::msg::CSReqBigWinnerScoreHistory::MergeFrom(
        from._internal_bigwinnerscorehistory());
  }
  if (from._internal_has_smeltitem()) {
    _this->_internal_mutable_smeltitem()->::msg::CSReqSmeltItem::MergeFrom(
        from._internal_smeltitem());
  }
  if (from._internal_has_pveuptalentlevel()) {
    _this->_internal_mutable_pveuptalentlevel()->::msg::CSReqPVEUpTalentLevel::MergeFrom(
        from._internal_pveuptalentlevel());
  }
  if (from._internal_has_luckyaward()) {
    _this->_internal_mutable_luckyaward()->::msg::CSReqPVELuckyAward::MergeFrom(
        from._internal_luckyaward());
  }
  if (from._internal_has_applychannel()) {
    _this->_internal_mutable_applychannel()->::msg::CSReqApplyChannel::MergeFrom(
        from._internal_applychannel());
  }
  if (from._internal_has_teamop()) {
    _this->_internal_mutable_teamop()->::msg::CSReqTeamOP::MergeFrom(
        from._internal_teamop());
  }
  if (from._internal_has_obteaminfo()) {
    _this->_internal_mutable_obteaminfo()->::msg::CSReqOBTeamInfo::MergeFrom(
        from._internal_obteaminfo());
  }
  if (from._internal_has_headiconurl()) {
    _this->_internal_mutable_headiconurl()->::msg::CSReqReportHeadIconUrl::MergeFrom(
        from._internal_headiconurl());
  }
  if (from._internal_has_getpvpservergroup()) {
    _this->_internal_mutable_getpvpservergroup()->::msg::CSReqGetPvpServerGroup::MergeFrom(
        from._internal_getpvpservergroup());
  }
  if (from._internal_has_reportpvpinfo()) {
    _this->_internal_mutable_reportpvpinfo()->::msg::CSReqReportPvpInfo::MergeFrom(
        from._internal_reportpvpinfo());
  }
  if (from._internal_has_chooseplayer()) {
    _this->_internal_mutable_chooseplayer()->::msg::CSReqChoosePlayer::MergeFrom(
        from._internal_chooseplayer());
  }
  if (from._internal_has_pingtest()) {
    _this->_internal_mutable_pingtest()->::msg::CSReqPingTest::MergeFrom(
        from._internal_pingtest());
  }
  if (from._internal_has_reportregioninfo()) {
    _this->_internal_mutable_reportregioninfo()->::msg::CSReqReportRegionInfo::MergeFrom(
        from._internal_reportregioninfo());
  }
  if (from._internal_has_recalledplaeyr()) {
    _this->_internal_mutable_recalledplaeyr()->::msg::CSReqRecalledPlayer::MergeFrom(
        from._internal_recalledplaeyr());
  }
  if (from._internal_has_weblogin()) {
    _this->_internal_mutable_weblogin()->::msg::CSReqWebLogin::MergeFrom(
        from._internal_weblogin());
  }
  if (from._internal_has_invitecodereset()) {
    _this->_internal_mutable_invitecodereset()->::msg::CSReqInviteCodeReset::MergeFrom(
        from._internal_invitecodereset());
  }
  if (from._internal_has_recallreward()) {
    _this->_internal_mutable_recallreward()->::msg::CSReqRecallReward::MergeFrom(
        from._internal_recallreward());
  }
  if (from._internal_has_switchtocommonmatch()) {
    _this->_internal_mutable_switchtocommonmatch()->::msg::CSReqSwitchToCommonMatch::MergeFrom(
        from._internal_switchtocommonmatch());
  }
  if (from._internal_has_switchmodeinteam()) {
    _this->_internal_mutable_switchmodeinteam()->::msg::CSReqSwitchModeInTeam::MergeFrom(
        from._internal_switchmodeinteam());
  }
  if (from._internal_has_gettnroomstate()) {
    _this->_internal_mutable_gettnroomstate()->::msg::CSReqGetTNRoomState::MergeFrom(
        from._internal_gettnroomstate());
  }
  if (from._internal_has_workshopmatch()) {
    _this->_internal_mutable_workshopmatch()->::msg::CSReqWorkshopMatch::MergeFrom(
        from._internal_workshopmatch());
  }
  if (from._internal_has_buyworkshopticket()) {
    _this->_internal_mutable_buyworkshopticket()->::msg::CSReqBuyWorkshopTicket::MergeFrom(
        from._internal_buyworkshopticket());
  }
  if (from._internal_has_favouriteworkshopmap()) {
    _this->_internal_mutable_favouriteworkshopmap()->::msg::CSReqFavouriteWorkshopMap::MergeFrom(
        from._internal_favouriteworkshopmap());
  }
  if (from._internal_has_shortcutmapsop()) {
    _this->_internal_mutable_shortcutmapsop()->::msg::CSReqShortcutMapsOP::MergeFrom(
        from._internal_shortcutmapsop());
  }
  if (from._internal_has_playerstournamentinfo()) {
    _this->_internal_mutable_playerstournamentinfo()->::msg::CSReqPlayersTournamentInfo::MergeFrom(
        from._internal_playerstournamentinfo());
  }
  if (from._internal_has_scoreworkshopmap()) {
    _this->_internal_mutable_scoreworkshopmap()->::msg::CSReqScoreWorkshopMap::MergeFrom(
        from._internal_scoreworkshopmap());
  }
  if (from._internal_has_mapsvisitedbyfriends()) {
    _this->_internal_mutable_mapsvisitedbyfriends()->::msg::CSReqMapsVisitedByFriends::MergeFrom(
        from._internal_mapsvisitedbyfriends());
  }
  if (from._internal_has_verifyrealname()) {
    _this->_internal_mutable_verifyrealname()->::msg::CSReqVerifyRealName::MergeFrom(
        from._internal_verifyrealname());
  }
  if (from._internal_has_fakepay()) {
    _this->_internal_mutable_fakepay()->::msg::CSReqFakePay::MergeFrom(
        from._internal_fakepay());
  }
  if (from._internal_has_guildcreate()) {
    _this->_internal_mutable_guildcreate()->::msg::CSReqGuildCreate::MergeFrom(
        from._internal_guildcreate());
  }
  if (from._internal_has_guildapply()) {
    _this->_internal_mutable_guildapply()->::msg::CSReqGuildApply::MergeFrom(
        from._internal_guildapply());
  }
  if (from._internal_has_guildhome()) {
    _this->_internal_mutable_guildhome()->::msg::CSReqGuildHome::MergeFrom(
        from._internal_guildhome());
  }
  if (from._internal_has_guildinfo()) {
    _this->_internal_mutable_guildinfo()->::msg::CSReqGuildInfo::MergeFrom(
        from._internal_guildinfo());
  }
  if (from._internal_has_guildapprove()) {
    _this->_internal_mutable_guildapprove()->::msg::CSReqGuildApprove::MergeFrom(
        from._internal_guildapprove());
  }
  if (from._internal_has_guildrole()) {
    _this->_internal_mutable_guildrole()->::msg::CSReqGuildSetRole::MergeFrom(
        from._internal_guildrole());
  }
  if (from._internal_has_guildmodify()) {
    _this->_internal_mutable_guildmodify()->::msg::CSReqGuildModify::MergeFrom(
        from._internal_guildmodify());
  }
  if (from._internal_has_guildkickoff()) {
    _this->_internal_mutable_guildkickoff()->::msg::CSReqGuildKickoff::MergeFrom(
        from._internal_guildkickoff());
  }
  if (from._internal_has_guilddismiss()) {
    _this->_internal_mutable_guilddismiss()->::msg::CSReqGuildDismiss::MergeFrom(
        from._internal_guilddismiss());
  }
  if (from._internal_has_guildexit()) {
    _this->_internal_mutable_guildexit()->::msg::CSReqGuildExit::MergeFrom(
        from._internal_guildexit());
  }
  if (from._internal_has_guildchat()) {
    _this->_internal_mutable_guildchat()->::msg::CSReqGuildChat::MergeFrom(
        from._internal_guildchat());
  }
  if (from._internal_has_guildlist()) {
    _this->_internal_mutable_guildlist()->::msg::CSReqGuildList::MergeFrom(
        from._internal_guildlist());
  }
  if (from._internal_has_guildrecommendplayers()) {
    _this->_internal_mutable_guildrecommendplayers()->::msg::CSReqGuildRecommendPlayers::MergeFrom(
        from._internal_guildrecommendplayers());
  }
  if (from._internal_has_guildinvitelist()) {
    _this->_internal_mutable_guildinvitelist()->::msg::CSReqGuildInviteList::MergeFrom(
        from._internal_guildinvitelist());
  }
  if (from._internal_has_guildinvite()) {
    _this->_internal_mutable_guildinvite()->::msg::CSReqGuildInvite::MergeFrom(
        from._internal_guildinvite());
  }
  if (from._internal_has_guildresign()) {
    _this->_internal_mutable_guildresign()->::msg::CSReqGuildResign::MergeFrom(
        from._internal_guildresign());
  }
  if (from._internal_has_guildrejectinvite()) {
    _this->_internal_mutable_guildrejectinvite()->::msg::CSReqGuildRejectInvite::MergeFrom(
        from._internal_guildrejectinvite());
  }
  if (from._internal_has_getvngcommentaward()) {
    _this->_internal_mutable_getvngcommentaward()->::msg::CSReqGetVngCommentAward::MergeFrom(
        from._internal_getvngcommentaward());
  }
  if (from._internal_has_levelupchest()) {
    _this->_internal_mutable_levelupchest()->::msg::CSReqLevelupChest::MergeFrom(
        from._internal_levelupchest());
  }
  if (from._internal_has_watchad()) {
    _this->_internal_mutable_watchad()->::msg::CSReqWatchAd::MergeFrom(
        from._internal_watchad());
  }
  if (from._internal_has_pstournamentroom()) {
    _this->_internal_mutable_pstournamentroom()->::msg::CSReqQueryPsTournamentRoom::MergeFrom(
        from._internal_pstournamentroom());
  }
  if (from._internal_has_getadcumulateaward()) {
    _this->_internal_mutable_getadcumulateaward()->::msg::CSReqGetAdCumulateAward::MergeFrom(
        from._internal_getadcumulateaward());
  }
  if (from._internal_has_setmessengerpos()) {
    _this->_internal_mutable_setmessengerpos()->::msg::CSReqSetMessengerPos::MergeFrom(
        from._internal_setmessengerpos());
  }
  if (from._internal_has_updateantiaddictiontime()) {
    _this->_internal_mutable_updateantiaddictiontime()->::msg::CSReqUpdateAntiAddictionTime::MergeFrom(
        from._internal_updateantiaddictiontime());
  }
  if (from._internal_has_cancelreconnect()) {
    _this->_internal_mutable_cancelreconnect()->::msg::CSReqCancelReconnect::MergeFrom(
        from._internal_cancelreconnect());
  }
  if (from._internal_has_reconnect()) {
    _this->_internal_mutable_reconnect()->::msg::CSReqReconnect::MergeFrom(
        from._internal_reconnect());
  }
  if (from._internal_has_passthrough()) {
    _this->_internal_mutable_passthrough()->::msg::CSReqPassThrough::MergeFrom(
        from._internal_passthrough());
  }
  if (from._internal_has_visitplayer()) {
    _this->_internal_mutable_visitplayer()->::msg::CSReqVisitPlayer::MergeFrom(
        from._internal_visitplayer());
  }
  if (from._internal_has_leavegameearly()) {
    _this->_internal_mutable_leavegameearly()->::msg::CSReqLeaveGameEarly::MergeFrom(
        from._internal_leavegameearly());
  }
  if (from._internal_has_gdcommonbin()) {
    _this->_internal_mutable_gdcommonbin()->::msg::CSReqGDCommonBin::MergeFrom(
        from._internal_gdcommonbin());
  }
  if (from._internal_has_gdbindata()) {
    _this->_internal_mutable_gdbindata()->::msg::CSReqGDCommonBinData::MergeFrom(
        from._internal_gdbindata());
  }
  if (from._internal_has_autobattleop()) {
    _this->_internal_mutable_autobattleop()->::msg::CSReqAutoBattleOP::MergeFrom(
        from._internal_autobattleop());
  }
  if (from._internal_has_restrictuser()) {
    _this->_internal_mutable_restrictuser()->::msg::CSReqRestrictUser::MergeFrom(
        from._internal_restrictuser());
  }
  if (from._internal_has_equipselectrate()) {
    _this->_internal_mutable_equipselectrate()->::msg::CSReqEquipSelectRate::MergeFrom(
        from._internal_equipselectrate());
  }
  if (from._internal_has_reportabsent()) {
    _this->_internal_mutable_reportabsent()->::msg::CSReqReportAbsent::MergeFrom(
        from._internal_reportabsent());
  }
  if (from._internal_has_recommendweek()) {
    _this->_internal_mutable_recommendweek()->::msg::CSReqRecommendWeek::MergeFrom(
        from._internal_recommendweek());
  }
  if (from._internal_has_recommendofficial()) {
    _this->_internal_mutable_recommendofficial()->::msg::CSReqRecommendOfficial::MergeFrom(
        from._internal_recommendofficial());
  }
  if (from._internal_has_recommendlatest()) {
    _this->_internal_mutable_recommendlatest()->::msg::CSReqRecommendLatest::MergeFrom(
        from._internal_recommendlatest());
  }
  if (from._internal_has_recommendhistory()) {
    _this->_internal_mutable_recommendhistory()->::msg::CSReqRecommendHistory::MergeFrom(
        from._internal_recommendhistory());
  }
  if (from._internal_has_recommendcollect()) {
    _this->_internal_mutable_recommendcollect()->::msg::CSReqRecommendCollect::MergeFrom(
        from._internal_recommendcollect());
  }
  if (from._internal_has_recommendset()) {
    _this->_internal_mutable_recommendset()->::msg::CSReqRecommendSet::MergeFrom(
        from._internal_recommendset());
  }
  if (from._internal_has_recommendgetcollection()) {
    _this->_internal_mutable_recommendgetcollection()->::msg::CSReqRecommendGetCollection::MergeFrom(
        from._internal_recommendgetcollection());
  }
  if (from._internal_has_recommendequip()) {
    _this->_internal_mutable_recommendequip()->::msg::CSReqRecommendEquip::MergeFrom(
        from._internal_recommendequip());
  }
  if (from._internal_has_logincancel()) {
    _this->_internal_mutable_logincancel()->::msg::CSReqLoginCancel::MergeFrom(
        from._internal_logincancel());
  }
  if (from._internal_has_convertdebris()) {
    _this->_internal_mutable_convertdebris()->::msg::CSReqConvertDebris::MergeFrom(
        from._internal_convertdebris());
  }
  if (from._internal_has_protectioncard()) {
    _this->_internal_mutable_protectioncard()->::msg::CSReqUseProtectionCard::MergeFrom(
        from._internal_protectioncard());
  }
  if (from._internal_has_usepassportcard()) {
    _this->_internal_mutable_usepassportcard()->::msg::CSReqUsePassportCard::MergeFrom(
        from._internal_usepassportcard());
  }
  if (from._internal_has_setmedal()) {
    _this->_internal_mutable_setmedal()->::msg::CSReqSetMedal::MergeFrom(
        from._internal_setmedal());
  }
  if (from._internal_has_unsetmedal()) {
    _this->_internal_mutable_unsetmedal()->::msg::CSReqUnSetMedal::MergeFrom(
        from._internal_unsetmedal());
  }
  if (from._internal_has_playermedals()) {
    _this->_internal_mutable_playermedals()->::msg::CSReqPlayerMedals::MergeFrom(
        from._internal_playermedals());
  }
  if (from._internal_has_updatehotdot()) {
    _this->_internal_mutable_updatehotdot()->::msg::CSReqUpdateHotDot::MergeFrom(
        from._internal_updatehotdot());
  }
  if (from._internal_has_queryhotdot()) {
    _this->_internal_mutable_queryhotdot()->::msg::CSReqQueryHotDot::MergeFrom(
        from._internal_queryhotdot());
  }
  if (from._internal_has_setcache()) {
    _this->_internal_mutable_setcache()->::msg::CSReqSetCache::MergeFrom(
        from._internal_setcache());
  }
  if (from._internal_has_getcache()) {
    _this->_internal_mutable_getcache()->::msg::CSReqGetCache::MergeFrom(
        from._internal_getcache());
  }
  if (from._internal_has_buychallengecount()) {
    _this->_internal_mutable_buychallengecount()->::msg::CSReqBuyChallengeCount::MergeFrom(
        from._internal_buychallengecount());
  }
  if (from._internal_has_getpverank()) {
    _this->_internal_mutable_getpverank()->::msg::CSReqGetPveRank::MergeFrom(
        from._internal_getpverank());
  }
  if (from._internal_has_authaccount()) {
    _this->_internal_mutable_authaccount()->::msg::CSReqLogin::MergeFrom(
        from._internal_authaccount());
  }
  if (from._internal_has_unbindaccount()) {
    _this->_internal_mutable_unbindaccount()->::msg::CSReqUnbindAccount::MergeFrom(
        from._internal_unbindaccount());
  }
  if (from._internal_has_bagtoitem()) {
    _this->_internal_mutable_bagtoitem()->::msg::CSReqBagToItem::MergeFrom(
        from._internal_bagtoitem());
  }
  if (from._internal_has_identifyitem()) {
    _this->_internal_mutable_identifyitem()->::msg::CSReqIdentifyItem::MergeFrom(
        from._internal_identifyitem());
  }
  if (from._internal_has_insetitemaffix()) {
    _this->_internal_mutable_insetitemaffix()->::msg::CSReqInsetItemAffix::MergeFrom(
        from._internal_insetitemaffix());
  }
  if (from._internal_has_unsetitemaffix()) {
    _this->_internal_mutable_unsetitemaffix()->::msg::CSReqUnsetItemAffix::MergeFrom(
        from._internal_unsetitemaffix());
  }
  if (from._internal_has_setdefaultattributes()) {
    _this->_internal_mutable_setdefaultattributes()->::msg::CSReqSetDefaultAttributes::MergeFrom(
        from._internal_setdefaultattributes());
  }
  if (from._internal_has_checkcancel()) {
    _this->_internal_mutable_checkcancel()->::msg::CSReqCheckCancel::MergeFrom(
        from._internal_checkcancel());
  }
  if (from._internal_has_cancelaccount()) {
    _this->_internal_mutable_cancelaccount()->::msg::CSReqCancelAccount::MergeFrom(
        from._internal_cancelaccount());
  }
  if (from._internal_has_oauthapp()) {
    _this->_internal_mutable_oauthapp()->::msg::CSReqOAuthApp::MergeFrom(
        from._internal_oauthapp());
  }
  if (from._internal_has_getselfnumrankdata()) {
    _this->_internal_mutable_getselfnumrankdata()->::msg::CSReqGetSelfNumRankData::MergeFrom(
        from._internal_getselfnumrankdata());
  }
  if (from._internal_has_updatecardgroup()) {
    _this->_internal_mutable_updatecardgroup()->::msg::CSReqUpdateCardGroup::MergeFrom(
        from._internal_updatecardgroup());
  }
  if (from._internal_has_updatecardgroupname()) {
    _this->_internal_mutable_updatecardgroupname()->::msg::CSReqUpdateCardGroupName::MergeFrom(
        from._internal_updatecardgroupname());
  }
  if (from._internal_has_buypvebuff()) {
    _this->_internal_mutable_buypvebuff()->::msg::CSReqBuyPveBuff::MergeFrom(
        from._internal_buypvebuff());
  }
  if (from._internal_has_setcardgroup()) {
    _this->_internal_mutable_setcardgroup()->::msg::CSReqSetCardGroup::MergeFrom(
        from._internal_setcardgroup());
  }
  if (from._internal_has_buypvechesstemplate()) {
    _this->_internal_mutable_buypvechesstemplate()->::msg::CSReqBuyPveChessTemplate::MergeFrom(
        from._internal_buypvechesstemplate());
  }
  if (from._internal_has_pveunlockchesstemplate()) {
    _this->_internal_mutable_pveunlockchesstemplate()->::msg::CSReqPveUnlockChessTemplate::MergeFrom(
        from._internal_pveunlockchesstemplate());
  }
  if (from._internal_has_pvesetteamdebuff()) {
    _this->_internal_mutable_pvesetteamdebuff()->::msg::CSReqPveSetTeamDeBuff::MergeFrom(
        from._internal_pvesetteamdebuff());
  }
  if (from._internal_has_chosecardgroup()) {
    _this->_internal_mutable_chosecardgroup()->::msg::CSReqChoseCardGroup::MergeFrom(
        from._internal_chosecardgroup());
  }
  if (from._internal_has_removeovertimebuff()) {
    _this->_internal_mutable_removeovertimebuff()->::msg::CSReqRemoveOvertimeBuff::MergeFrom(
        from._internal_removeovertimebuff());
  }
  if (from._internal_has_updatenewcardgroupsign()) {
    _this->_internal_mutable_updatenewcardgroupsign()->::msg::CSRspUpdateNewCardGroupSign::MergeFrom(
        from._internal_updatenewcardgroupsign());
  }
  if (from._internal_has_tdgetonhookaward()) {
    _this->_internal_mutable_tdgetonhookaward()->::msg::CSReqTDGetOnHookAward::MergeFrom(
        from._internal_tdgetonhookaward());
  }
  if (from._internal_has_tddraw()) {
    _this->_internal_mutable_tddraw()->::msg::CsReqTDDraw::MergeFrom(
        from._internal_tddraw());
  }
  if (from._internal_has_tdbuycard()) {
    _this->_internal_mutable_tdbuycard()->::msg::CsReqTDBuyCard::MergeFrom(
        from._internal_tdbuycard());
  }
  if (from._internal_has_tdsetcardgroup()) {
    _this->_internal_mutable_tdsetcardgroup()->::msg::CSReqTDSetCardGroup::MergeFrom(
        from._internal_tdsetcardgroup());
  }
  if (from._internal_has_tdlevelup()) {
    _this->_internal_mutable_tdlevelup()->::msg::CSReqTDLevelUp::MergeFrom(
        from._internal_tdlevelup());
  }
  if (from._internal_has_tdequip()) {
    _this->_internal_mutable_tdequip()->::msg::CSReqTDEquip::MergeFrom(
        from._internal_tdequip());
  }
  if (from._internal_has_mentorupdatesetting()) {
    _this->_internal_mutable_mentorupdatesetting()->::msg::CSReqMentorUpdateSetting::MergeFrom(
        from._internal_mentorupdatesetting());
  }
  if (from._internal_has_mentorinvite()) {
    _this->_internal_mutable_mentorinvite()->::msg::CSReqMentorInvite::MergeFrom(
        from._internal_mentorinvite());
  }
  if (from._internal_has_mentorconfirminvite()) {
    _this->_internal_mutable_mentorconfirminvite()->::msg::CSReqMentorConfirmInvite::MergeFrom(
        from._internal_mentorconfirminvite());
  }
  if (from._internal_has_mentorrecommendlist()) {
    _this->_internal_mutable_mentorrecommendlist()->::msg::CSReqMentorRecommendList::MergeFrom(
        from._internal_mentorrecommendlist());
  }
  if (from._internal_has_mentorgettaskaward()) {
    _this->_internal_mutable_mentorgettaskaward()->::msg::CSReqMentorGetTaskAward::MergeFrom(
        from._internal_mentorgettaskaward());
  }
  if (from._internal_has_mentorgraduate()) {
    _this->_internal_mutable_mentorgraduate()->::msg::CSReqMentorGraduate::MergeFrom(
        from._internal_mentorgraduate());
  }
  if (from._internal_has_mentorrelieverelation()) {
    _this->_internal_mutable_mentorrelieverelation()->::msg::CSReqMentorRelieveRelation::MergeFrom(
        from._internal_mentorrelieverelation());
  }
  if (from._internal_has_getmentorinfo()) {
    _this->_internal_mutable_getmentorinfo()->::msg::CSReqGetMentorInfo::MergeFrom(
        from._internal_getmentorinfo());
  }
  if (from._internal_has_mentorgetinvitemsg()) {
    _this->_internal_mutable_mentorgetinvitemsg()->::msg::CSReqMentorGetInviteMsg::MergeFrom(
        from._internal_mentorgetinvitemsg());
  }
  if (from._internal_has_updatecardgroupbetter()) {
    _this->_internal_mutable_updatecardgroupbetter()->::msg::CSReqUpdateCardGroupBetter::MergeFrom(
        from._internal_updatecardgroupbetter());
  }
  if (from._internal_has_updatecardgroupsetting()) {
    _this->_internal_mutable_updatecardgroupsetting()->::msg::CSReqUpdateCardGroupSetting::MergeFrom(
        from._internal_updatecardgroupsetting());
  }
  if (from._internal_has_setcontent()) {
    _this->_internal_mutable_setcontent()->::msg::CSReqSetContent::MergeFrom(
        from._internal_setcontent());
  }
  if (from._internal_has_getbalance()) {
    _this->_internal_mutable_getbalance()->::msg::CSReqGetBalance::MergeFrom(
        from._internal_getbalance());
  }
  if (from._internal_has_rechargebalance()) {
    _this->_internal_mutable_rechargebalance()->::msg::CSReqRechargeBalance::MergeFrom(
        from._internal_rechargebalance());
  }
  if (from._internal_has_withdrawbalance()) {
    _this->_internal_mutable_withdrawbalance()->::msg::CSReqWithdrawBalance::MergeFrom(
        from._internal_withdrawbalance());
  }
  if (from._internal_has_personalrecommendmall()) {
    _this->_internal_mutable_personalrecommendmall()->::msg::CSReqPersonalRecommendMall::MergeFrom(
        from._internal_personalrecommendmall());
  }
  if (from._internal_has_getmedalchestaward()) {
    _this->_internal_mutable_getmedalchestaward()->::msg::CSReqGetMedalChestAward::MergeFrom(
        from._internal_getmedalchestaward());
  }
  if (from._internal_has_setitemautouse()) {
    _this->_internal_mutable_setitemautouse()->::msg::CSReqSetItemAutoUse::MergeFrom(
        from._internal_setitemautouse());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqBody::CopyFrom(const CSReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqBody::IsInitialized() const {
  return true;
}

void CSReqBody::InternalSwap(CSReqBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqBody, _impl_.seq_)
      + sizeof(CSReqBody::_impl_.seq_)
      - PROTOBUF_FIELD_OFFSET(CSReqBody, _impl_.heart_)>(
          reinterpret_cast<char*>(&_impl_.heart_),
          reinterpret_cast<char*>(&other->_impl_.heart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csprotocol_2eproto_getter, &descriptor_table_csprotocol_2eproto_once,
      file_level_metadata_csprotocol_2eproto[1]);
}

// ===================================================================

class CSRspBody::_Internal {
 public:
  static const ::msg::CSRspHeart& heart(const CSRspBody* msg);
  static const ::msg::CSRspLogin& login(const CSRspBody* msg);
  static const ::msg::CSRspVersionCheck& versioncheck(const CSRspBody* msg);
  static const ::msg::CSRspResourceVersionCheck& resourceversioncheck(const CSRspBody* msg);
  static const ::msg::CSRspApplyHallServer& applyhallserver(const CSRspBody* msg);
  static const ::msg::CSRspGetNumRank& getnumrank(const CSRspBody* msg);
  static const ::msg::CSRspWorldChat& worldchat(const CSRspBody* msg);
  static const ::msg::CSRspPlayersBaseInfo& playersbaseinfo(const CSRspBody* msg);
  static const ::msg::CSRspPlayerDetailInfo& playerdetailinfo(const CSRspBody* msg);
  static const ::msg::CSRspReadMail& readmail(const CSRspBody* msg);
  static const ::msg::CSRspGetMailAward& getmailaward(const CSRspBody* msg);
  static const ::msg::CSRspBuyEgg& buyegg(const CSRspBody* msg);
  static const ::msg::CSRspUserNameSet& usernameset(const CSRspBody* msg);
  static const ::msg::CSRspUserNameRandom& usernamerandom(const CSRspBody* msg);
  static const ::msg::CSRspHeadPicSet& headpicset(const CSRspBody* msg);
  static const ::msg::CSRspDressChessPlayer& dresschessplayer(const CSRspBody* msg);
  static const ::msg::CSRspDressScene& dressscene(const CSRspBody* msg);
  static const ::msg::CSRspPvpLogin& pvplogin(const CSRspBody* msg);
  static const ::msg::CSRspPvpEnd& pvpend(const CSRspBody* msg);
  static const ::msg::CSRspPlayerFinish& playerfinish(const CSRspBody* msg);
  static const ::msg::CSRspPlayerQuit& playerquit(const CSRspBody* msg);
  static const ::msg::CSRspSellItem& sellitem(const CSRspBody* msg);
  static const ::msg::CSRspGetEvalAward& getevalaward(const CSRspBody* msg);
  static const ::msg::CSRspUseChessPlayer& usechessplayer(const CSRspBody* msg);
  static const ::msg::CSRspGuidReport& guidreport(const CSRspBody* msg);
  static const ::msg::CSRspGetCodeAward& getcodeaward(const CSRspBody* msg);
  static const ::msg::CSRspRoundReport& roundreport(const CSRspBody* msg);
  static const ::msg::CSRspLoadingProgress& loadingprogress(const CSRspBody* msg);
  static const ::msg::CSRspPvpChat& pvpchat(const CSRspBody* msg);
  static const ::msg::CSRspChessCombine& chesscombine(const CSRspBody* msg);
  static const ::msg::CSRspExpose& expose(const CSRspBody* msg);
  static const ::msg::CSRspApplyOrderId& applyorderid(const CSRspBody* msg);
  static const ::msg::CSRspReportOrderInfo& reportorderinfo(const CSRspBody* msg);
  static const ::msg::CSRspSetItem& setitem(const CSRspBody* msg);
  static const ::msg::CSRspUnsetItem& unsetitem(const CSRspBody* msg);
  static const ::msg::CSRspRandomItem& randomitem(const CSRspBody* msg);
  static const ::msg::CSRspChat& chat(const CSRspBody* msg);
  static const ::msg::CSRspSetChessPlayer& setchessplayer(const CSRspBody* msg);
  static const ::msg::CSRspUnsetChessPlayer& unsetchessplayer(const CSRspBody* msg);
  static const ::msg::CSRspGetFansList& getfanslist(const CSRspBody* msg);
  static const ::msg::CSRspFollowPlayer& followplayer(const CSRspBody* msg);
  static const ::msg::CSRspUnfollowPlayer& unfollowplayer(const CSRspBody* msg);
  static const ::msg::CSRspPlayersStatusInfo& playersstatusinfo(const CSRspBody* msg);
  static const ::msg::CSRspInviteJoinTeam& invitejointeam(const CSRspBody* msg);
  static const ::msg::CSRspJoinTeam& jointeam(const CSRspBody* msg);
  static const ::msg::CSRspReportPayResponse& reportpayresponse(const CSRspBody* msg);
  static const ::msg::CSRspRejectJoinTeam& rejectjointeam(const CSRspBody* msg);
  static const ::msg::CSRspShieldChat& shieldchat(const CSRspBody* msg);
  static const ::msg::CSRspBuyPassportLevel& buypassportlevel(const CSRspBody* msg);
  static const ::msg::CSRspUpgradePassport& upgradepassport(const CSRspBody* msg);
  static const ::msg::CSRspGetPassportLevelAward& getpassportlevelaward(const CSRspBody* msg);
  static const ::msg::CSRspGetPassportTaskAward& getpassporttaskaward(const CSRspBody* msg);
  static const ::msg::CSRspTelBook& telbook(const CSRspBody* msg);
  static const ::msg::CSRspActivatePassport& activatepassport(const CSRspBody* msg);
  static const ::msg::CSRspRankSeasonEval& rankseasoneval(const CSRspBody* msg);
  static const ::msg::CSRspBindAccount& bindaccount(const CSRspBody* msg);
  static const ::msg::CSRspIncAdShowCount& incadsshowcount(const CSRspBody* msg);
  static const ::msg::CSRspUseBonusCard& usebonuscard(const CSRspBody* msg);
  static const ::msg::CSRspGetSeasonAward& getseasonaward(const CSRspBody* msg);
  static const ::msg::CSRspGetAlphaActivityAward& getalphaactivityaward(const CSRspBody* msg);
  static const ::msg::CSRspGetLanguageData& getlanguagedata(const CSRspBody* msg);
  static const ::msg::CSRspGetActivityAward& getactivityaward(const CSRspBody* msg);
  static const ::msg::CSRspGetActivityData& getactivitydata(const CSRspBody* msg);
  static const ::msg::CSRspSendSms& sendsms(const CSRspBody* msg);
  static const ::msg::CSRspGetMeleeAward& getmeleeaward(const CSRspBody* msg);
  static const ::msg::CSRspAddAiToTeam& addaitoteam(const CSRspBody* msg);
  static const ::msg::CSRspShare& share(const CSRspBody* msg);
  static const ::msg::CSRspSkipInterface& skipinterface(const CSRspBody* msg);
  static const ::msg::CSRspTeamGame& teamgame(const CSRspBody* msg);
  static const ::msg::CSRspSetTeamMode& setteammode(const CSRspBody* msg);
  static const ::msg::CSRspSetHistoryPvpShowPermission& historypvpshowpermission(const CSRspBody* msg);
  static const ::msg::CSRspSearchTeam& searchteam(const CSRspBody* msg);
  static const ::msg::CSRspApplyChat& applychat(const CSRspBody* msg);
  static const ::msg::CSRspChatLogin& chatlogin(const CSRspBody* msg);
  static const ::msg::CSRspProbeNetDelay& probenetdelay(const CSRspBody* msg);
  static const ::msg::CSRspGetEggs& geteggs(const CSRspBody* msg);
  static const ::msg::CSRspBuyGoods& buygoods(const CSRspBody* msg);
  static const ::msg::CSRspExchangePassportGoods& exchangepassportgoods(const CSRspBody* msg);
  static const ::msg::CSRspUsePassportTaskCard& usepassporttaskcard(const CSRspBody* msg);
  static const ::msg::CSRspOpenRandChest& openrandchest(const CSRspBody* msg);
  static const ::msg::CSRspEggLottery& egglottery(const CSRspBody* msg);
  static const ::msg::CSRspQueryDiamondBalance& querydiamondbalance(const CSRspBody* msg);
  static const ::msg::CSRspUseItem& useitem(const CSRspBody* msg);
  static const ::msg::CSRspUseExperienceCard& useexperiencecard(const CSRspBody* msg);
  static const ::msg::CSRspRandTargetItem& randtargetitem(const CSRspBody* msg);
  static const ::msg::CSRspAddBlacklist& addblacklist(const CSRspBody* msg);
  static const ::msg::CSRspRemoveBlacklist& removeblacklist(const CSRspBody* msg);
  static const ::msg::CSRspReportPlayerBirth& reportplayerbirth(const CSRspBody* msg);
  static const ::msg::CSRspReportInfoInput& reportinfoinput(const CSRspBody* msg);
  static const ::msg::CSRspSendVerificationCode& sendverificationcode(const CSRspBody* msg);
  static const ::msg::CSRspBindPhoneNumber& bindphonenumber(const CSRspBody* msg);
  static const ::msg::CSRspWorldInvite& worldinvite(const CSRspBody* msg);
  static const ::msg::CSRspRemoveExpireItem& removeexpireitem(const CSRspBody* msg);
  static const ::msg::CSRspGetMallGoods& getmallgoods(const CSRspBody* msg);
  static const ::msg::CSRspBuyMallGoods& buymallgoods(const CSRspBody* msg);
  static const ::msg::CSRspBindSharingCode& bindsharingcode(const CSRspBody* msg);
  static const ::msg::CSRspWXBlessBag& wxblessbag(const CSRspBody* msg);
  static const ::msg::CSRspUpdateFriendsInGame& updatefriendsingame(const CSRspBody* msg);
  static const ::msg::CSRspShareReward& sharereward(const CSRspBody* msg);
  static const ::msg::CSRspAllFightInfo& allfightinfo(const CSRspBody* msg);
  static const ::msg::CSRspGetOldPlayer& getoldplayer(const CSRspBody* msg);
  static const ::msg::CSRspBindOldPlayer& bindoldplayer(const CSRspBody* msg);
  static const ::msg::CSRspSendVerificationCodeWithCheckRedis& sendverificationcodewithcheckredis(const CSRspBody* msg);
  static const ::msg::CSRspReportSetting& reportsetting(const CSRspBody* msg);
  static const ::msg::CSRspAntiData& antidata(const CSRspBody* msg);
  static const ::msg::CSRspTlogData& tlogdata(const CSRspBody* msg);
  static const ::msg::CSRspDaySign& daysign(const CSRspBody* msg);
  static const ::msg::CSRspDayFitAvoid& dayfitavoid(const CSRspBody* msg);
  static const ::msg::CSRspShareCountAward& sharecountaward(const CSRspBody* msg);
  static const ::msg::CSRspRealationStar& realationstar(const CSRspBody* msg);
  static const ::msg::CSRspGetRealationStarInviteSucc& getrealationstarinvitesucc(const CSRspBody* msg);
  static const ::msg::CSRspGetRealationStar& getrealationstar(const CSRspBody* msg);
  static const ::msg::CSRspGetActRecord& rspactrecord(const CSRspBody* msg);
  static const ::msg::CSRspJoinVoiceTeam& joinvoiceteam(const CSRspBody* msg);
  static const ::msg::CSRspJoinVoicePvp& joinvoicepvp(const CSRspBody* msg);
  static const ::msg::CSRspJoinVoiceCamp& joinvoicecamp(const CSRspBody* msg);
  static const ::msg::CSRspUserCountrySet& usercountryset(const CSRspBody* msg);
  static const ::msg::CSRspObserve& observe(const CSRspBody* msg);
  static const ::msg::CSRspGetRecommendPvp& getrecommendpvp(const CSRspBody* msg);
  static const ::msg::CSRspObserveLogin& observelogin(const CSRspBody* msg);
  static const ::msg::CSRspQuitObserve& quitobserve(const CSRspBody* msg);
  static const ::msg::CSRspGetObserveInfo& getobserveinfo(const CSRspBody* msg);
  static const ::msg::CSRspFreeFlow& freeflow(const CSRspBody* msg);
  static const ::msg::CSRspSetPushToken& setpushtoken(const CSRspBody* msg);
  static const ::msg::CSRspTlogEvent& tlogevent(const CSRspBody* msg);
  static const ::msg::CSRspWxVVipAward& wxvvipaward(const CSRspBody* msg);
  static const ::msg::CSRspGetRelationStarWX& relationstarwx(const CSRspBody* msg);
  static const ::msg::CSRspSendWxRedPacket& sendwxredpacket(const CSRspBody* msg);
  static const ::msg::CSRspRecvWxRedPacket& recvwxredpacket(const CSRspBody* msg);
  static const ::msg::CSRspWxRedPktLike& wxredpktlike(const CSRspBody* msg);
  static const ::msg::CSRspWxRedPktRank& wxredpktrank(const CSRspBody* msg);
  static const ::msg::CSRspObservePrivilege& setobserveprivilege(const CSRspBody* msg);
  static const ::msg::CSRspPresetFastChat& presetfastchat(const CSRspBody* msg);
  static const ::msg::CSRspChangeSlotTeam& changeslotteam(const CSRspBody* msg);
  static const ::msg::CSRspChangeSubModeTeam& changesubmodeteam(const CSRspBody* msg);
  static const ::msg::CSRspConfirmChangeSlotTeam& confirmchangeslotteam(const CSRspBody* msg);
  static const ::msg::CSRspPvpRoundEnd& pvproundend(const CSRspBody* msg);
  static const ::msg::CSRspPvp& pvp(const CSRspBody* msg);
  static const ::msg::CSRspTeamReady& teamready(const CSRspBody* msg);
  static const ::msg::CSRspBindOldBusinessPlayer& bindoldbusinessplayer(const CSRspBody* msg);
  static const ::msg::CSRspTranslate& translate(const CSRspBody* msg);
  static const ::msg::CSRspSubmitQuestionnaire& submitquestionnaire(const CSRspBody* msg);
  static const ::msg::CSRspCancelChangeSlot& cancelchangeslot(const CSRspBody* msg);
  static const ::msg::CSRspSetChessSkin& setchessskin(const CSRspBody* msg);
  static const ::msg::CSRspUnsetChessSkin& unsetchessskin(const CSRspBody* msg);
  static const ::msg::CSRspCompose& compose(const CSRspBody* msg);
  static const ::msg::CSRspVideo& video(const CSRspBody* msg);
  static const ::msg::CSRspOffHelpReddot& offhelpreddot(const CSRspBody* msg);
  static const ::msg::CSRspChangeLanguage& changelanguage(const CSRspBody* msg);
  static const ::msg::CSRspSetProvince& setprovince(const CSRspBody* msg);
  static const ::msg::CSRspLongyuanVoice& longyuanvoice(const CSRspBody* msg);
  static const ::msg::CSRspEnrollTournament& enrolltournament(const CSRspBody* msg);
  static const ::msg::CSRspJoinTournamentRoom& jointournamentroom(const CSRspBody* msg);
  static const ::msg::CSRspTournamentPointAward& tournamentpointaward(const CSRspBody* msg);
  static const ::msg::CSRspGetEnrollPlayers& getenrollplayers(const CSRspBody* msg);
  static const ::msg::CSRspDealWebMail& dealwebmail(const CSRspBody* msg);
  static const ::msg::CSRspChallengeAgain& challengeagain(const CSRspBody* msg);
  static const ::msg::CSRspHistoryChatMsg& historychat(const CSRspBody* msg);
  static const ::msg::CSRspSetFriendInvisible& setfriendinvisible(const CSRspBody* msg);
  static const ::msg::CSRspGetObserveAward& getobserveaward(const CSRspBody* msg);
  static const ::msg::CSRspInviteObserve& inviteobserve(const CSRspBody* msg);
  static const ::msg::CSRspRejectObserve& rejectobserve(const CSRspBody* msg);
  static const ::msg::CSRspGetTxPlayer& gettxplayer(const CSRspBody* msg);
  static const ::msg::CSRspGetThirdPvpInfo& getthirdpvpinfo(const CSRspBody* msg);
  static const ::msg::CSRspMarkPlayerGuide& markplayerguide(const CSRspBody* msg);
  static const ::msg::CSRspMarkChessSkinClicked& chessskinclicked(const CSRspBody* msg);
  static const ::msg::CSRsqQueryPs4Entitlements& queryps4entitlements(const CSRspBody* msg);
  static const ::msg::CSRspActDaySign& actdaysign(const CSRspBody* msg);
  static const ::msg::CSRspHaveThirdPvp& havethirdpvpinfo(const CSRspBody* msg);
  static const ::msg::CSRspActivityMall& activitymall(const CSRspBody* msg);
  static const ::msg::CSRspPsOnly& psonly(const CSRspBody* msg);
  static const ::msg::CSRspChangeChannelType& changechanneltype(const CSRspBody* msg);
  static const ::msg::CSRspCustomCardOpt& customcardopt(const CSRspBody* msg);
  static const ::msg::CSRspChampionHistory& championhistory(const CSRspBody* msg);
  static const ::msg::CSRspTournamentLastTopRank& tournamentlasttoprank(const CSRspBody* msg);
  static const ::msg::CSRspBigWinnerDailyAward& bigwinnerdailyaward(const CSRspBody* msg);
  static const ::msg::CSRspBigWinnerScoreHistory& bigwinnerscorehistory(const CSRspBody* msg);
  static const ::msg::CSRspSmeltItem& smeltitem(const CSRspBody* msg);
  static const ::msg::CSRspPVEUpTalentLevel& pveuptalentlevel(const CSRspBody* msg);
  static const ::msg::CSRspPVELuckyAward& luckyaward(const CSRspBody* msg);
  static const ::msg::CSRspApplyChannel& applychannel(const CSRspBody* msg);
  static const ::msg::CSRspOBTeamInfo& obteaminfo(const CSRspBody* msg);
  static const ::msg::CSRspGetPvpServerGroup& getpvpservergroup(const CSRspBody* msg);
  static const ::msg::CSRspReportPvpInfo& reportpvpinfo(const CSRspBody* msg);
  static const ::msg::CSRspChoosePlayer& chooseplayer(const CSRspBody* msg);
  static const ::msg::CSRspPingTest& pingtest(const CSRspBody* msg);
  static const ::msg::CSRspReportRegionInfo& reportregioninfo(const CSRspBody* msg);
  static const ::msg::CSRspRecalledPlayer& recalledplaeyr(const CSRspBody* msg);
  static const ::msg::CSRspWebLogin& weblogin(const CSRspBody* msg);
  static const ::msg::CSRspInviteCodeReset& invitecodereset(const CSRspBody* msg);
  static const ::msg::CSRspRecallReward& recallreward(const CSRspBody* msg);
  static const ::msg::CSRspSwitchToCommonMatch& switchtocommonmatch(const CSRspBody* msg);
  static const ::msg::CSRspSwitchModeInTeam& switchmodeinteam(const CSRspBody* msg);
  static const ::msg::CSRspGetTNRoomState& gettnroomstate(const CSRspBody* msg);
  static const ::msg::CSRspWorkshopMatch& workshopmatch(const CSRspBody* msg);
  static const ::msg::CSRspBuyWorkshopTicket& buyworkshopticket(const CSRspBody* msg);
  static const ::msg::CSRspFavouriteWorkshopMap& favouriteworkshopmap(const CSRspBody* msg);
  static const ::msg::CSRspShortcutMapsOP& shortcutmapsop(const CSRspBody* msg);
  static const ::msg::CSRspPlayersTournamentInfo& playerstournamentinfo(const CSRspBody* msg);
  static const ::msg::CSRspScoreWorkshopMap& scoreworkshopmap(const CSRspBody* msg);
  static const ::msg::CSRspMapsVisitedByFriends& mapsvisitedbyfriends(const CSRspBody* msg);
  static const ::msg::CSRspVerifyRealName& verifyrealname(const CSRspBody* msg);
  static const ::msg::CSRspFakePay& fakepay(const CSRspBody* msg);
  static const ::msg::CSRspGuildCreate& guildcreate(const CSRspBody* msg);
  static const ::msg::CSRspGuildApply& guildapply(const CSRspBody* msg);
  static const ::msg::CSRspGuildHome& guildhome(const CSRspBody* msg);
  static const ::msg::CSRspGuildInfo& guildinfo(const CSRspBody* msg);
  static const ::msg::CSRspGuildApprove& guildapprove(const CSRspBody* msg);
  static const ::msg::CSRspGuildSetRole& guildrole(const CSRspBody* msg);
  static const ::msg::CSRspGuildModify& guildmodify(const CSRspBody* msg);
  static const ::msg::CSRspGuildKickoff& guildkickoff(const CSRspBody* msg);
  static const ::msg::CSRspGuildDismiss& guilddismiss(const CSRspBody* msg);
  static const ::msg::CSRspGuildExit& guildexit(const CSRspBody* msg);
  static const ::msg::CSRspGuildChat& guildchat(const CSRspBody* msg);
  static const ::msg::CSRspGuildList& guildlist(const CSRspBody* msg);
  static const ::msg::CSRspGuildRecommendPlayers& guildrecommendplayers(const CSRspBody* msg);
  static const ::msg::CSRspGuildInviteList& guildinvitelist(const CSRspBody* msg);
  static const ::msg::CSRspGuildInvite& guildinvite(const CSRspBody* msg);
  static const ::msg::CSRspGuildRejectInvite& guildrejectinvite(const CSRspBody* msg);
  static const ::msg::CSRspGetVngCommentAward& getvngcommentaward(const CSRspBody* msg);
  static const ::msg::CSRspLevelupChest& levelupchest(const CSRspBody* msg);
  static const ::msg::CSRspWatchAd& watchad(const CSRspBody* msg);
  static const ::msg::CSRspQueryPsTournamentRoom& pstournamentroom(const CSRspBody* msg);
  static const ::msg::CSRspGetAdCumulateAward& getadcumulateaward(const CSRspBody* msg);
  static const ::msg::CSRspSetMessengerPos& setmessengerpos(const CSRspBody* msg);
  static const ::msg::CSRspUpdateAntiAddictionTime& antiaddictiontime(const CSRspBody* msg);
  static const ::msg::CSRspCancelReconnect& cancelreconnect(const CSRspBody* msg);
  static const ::msg::CSRspReconnect& reconnect(const CSRspBody* msg);
  static const ::msg::CSRspPassThrough& passthrough(const CSRspBody* msg);
  static const ::msg::CSRspVisitPlayer& visitplayer(const CSRspBody* msg);
  static const ::msg::CSRspLeaveGameEarly& leavegameearly(const CSRspBody* msg);
  static const ::msg::CSRspGDCommonBin& gdcommonbin(const CSRspBody* msg);
  static const ::msg::CSRspGDCommonBinData& gdbindata(const CSRspBody* msg);
  static const ::msg::CSRspBattleCampResult& battlecampresult(const CSRspBody* msg);
  static const ::msg::CSRspAutoBattleOP& autobattleop(const CSRspBody* msg);
  static const ::msg::CSRspRestrictUser& restrictuser(const CSRspBody* msg);
  static const ::msg::CSRspEquipSelectRate& equipselectrate(const CSRspBody* msg);
  static const ::msg::CSRspReportAbsent& reportabsent(const CSRspBody* msg);
  static const ::msg::CSRspRecommendWeek& recommendweek(const CSRspBody* msg);
  static const ::msg::CSRspRecommendOfficial& recommendofficial(const CSRspBody* msg);
  static const ::msg::CSRspRecommendLatest& recommendlatest(const CSRspBody* msg);
  static const ::msg::CSRspRecommendHistory& recommendhistory(const CSRspBody* msg);
  static const ::msg::CSRspRecommendCollect& recommendcollect(const CSRspBody* msg);
  static const ::msg::CSRspRecommendSet& recommendset(const CSRspBody* msg);
  static const ::msg::CSRspRecommendGetCollection& recommendgetcollection(const CSRspBody* msg);
  static const ::msg::CSRspRecommendEquip& recommendequip(const CSRspBody* msg);
  static const ::msg::CSRspLoginCancel& logincancel(const CSRspBody* msg);
  static const ::msg::CSRspConvertDebris& convertdebris(const CSRspBody* msg);
  static const ::msg::CSRspUseProtectionCard& protectioncard(const CSRspBody* msg);
  static const ::msg::CSRspUsePassportCard& usepassportcard(const CSRspBody* msg);
  static const ::msg::CSRspSetMedal& setmedal(const CSRspBody* msg);
  static const ::msg::CSRspUnSetMedal& unsetmedal(const CSRspBody* msg);
  static const ::msg::CSRspPlayerMedals& playermedals(const CSRspBody* msg);
  static const ::msg::CSRspUpdateHotDot& updatehotdot(const CSRspBody* msg);
  static const ::msg::CSRspQueryHotDot& queryhotdot(const CSRspBody* msg);
  static const ::msg::CSRspSetCache& setcache(const CSRspBody* msg);
  static const ::msg::CSRspGetCache& getcache(const CSRspBody* msg);
  static const ::msg::CSRspBuyChallengeCount& buychallengecount(const CSRspBody* msg);
  static const ::msg::CSRspGetPveRank& getpverank(const CSRspBody* msg);
  static const ::msg::CSRspAuthAccount& authaccount(const CSRspBody* msg);
  static const ::msg::CSRspUnbindAccount& unbindaccount(const CSRspBody* msg);
  static const ::msg::CSRspBagToItem& bagtoitem(const CSRspBody* msg);
  static const ::msg::CSRspIdentifyItem& identifyitem(const CSRspBody* msg);
  static const ::msg::CSRspInsetItemAffix& insetitemaffix(const CSRspBody* msg);
  static const ::msg::CSRspUnsetItemAffix& unsetitemaffix(const CSRspBody* msg);
  static const ::msg::CSRspSetDefaultAttributes& setdefaultattributes(const CSRspBody* msg);
  static const ::msg::CSRspCheckCancel& checkcancel(const CSRspBody* msg);
  static const ::msg::CSRspCancelAccount& cancelaccount(const CSRspBody* msg);
  static const ::msg::CSRspOAuthApp& oauthapp(const CSRspBody* msg);
  static const ::msg::CSRspGetSelfNumRankData& selfnumrankdata(const CSRspBody* msg);
  static const ::msg::CSRspUpdateCardGroup& updatecardgroup(const CSRspBody* msg);
  static const ::msg::CSRspUpdateCardGroupName& updatecardgroupname(const CSRspBody* msg);
  static const ::msg::CSRspBuyPveBuff& buypvebuff(const CSRspBody* msg);
  static const ::msg::CSRspSetCardGroup& setcardgroup(const CSRspBody* msg);
  static const ::msg::CSRspBuyPveChessTemplate& buypvechesstemplate(const CSRspBody* msg);
  static const ::msg::CSRspPveUnlockChessTemplate& pveunlockchesstemplate(const CSRspBody* msg);
  static const ::msg::CSRspPveSetTeamDeBuff& pvesetteamdebuff(const CSRspBody* msg);
  static const ::msg::CSRspChoseCardGroup& chosecardgroup(const CSRspBody* msg);
  static const ::msg::CSRspRemoveOvertimeBuff& removeovertimebuff(const CSRspBody* msg);
  static const ::msg::CSRspUpdateNewCardGroupSign& updatenewcardgroupsign(const CSRspBody* msg);
  static const ::msg::CSRspTDGetOnHookAward& tdgetonhookaward(const CSRspBody* msg);
  static const ::msg::CsRspTDDraw& tddraw(const CSRspBody* msg);
  static const ::msg::CsRspTDBuyCard& tdbuycard(const CSRspBody* msg);
  static const ::msg::CSRspTDSetCardGroup& tdsetcardgroup(const CSRspBody* msg);
  static const ::msg::CSRspTDLevelUp& tdlevelup(const CSRspBody* msg);
  static const ::msg::CSRspTDEquip& tdequip(const CSRspBody* msg);
  static const ::msg::CSRspMentorUpdateSetting& mentorupdatesetting(const CSRspBody* msg);
  static const ::msg::CSRspMentorInvite& mentorinvite(const CSRspBody* msg);
  static const ::msg::CSRspMentorConfirmInvite& mentorconfirminvite(const CSRspBody* msg);
  static const ::msg::CSRspMentorRecommendList& mentorrecommendlist(const CSRspBody* msg);
  static const ::msg::CSRspMentorGetTaskAward& mentorgettaskaward(const CSRspBody* msg);
  static const ::msg::CSRspMentorGraduate& mentorgraduate(const CSRspBody* msg);
  static const ::msg::CSRspMentorRelieveRelation& mentorrelieverelation(const CSRspBody* msg);
  static const ::msg::CSRspGetMentorInfo& getmentorinfo(const CSRspBody* msg);
  static const ::msg::CSRspMentorGetInviteMsg& mentorgetinvitemsg(const CSRspBody* msg);
  static const ::msg::CSRspTeamMsg& teammsg(const CSRspBody* msg);
  static const ::msg::CSRspChatMsg& chatmsg(const CSRspBody* msg);
  static const ::msg::CSRspChannelChat& channelchat(const CSRspBody* msg);
  static const ::msg::CSRspUpdateCardGroupBetter& updatecardgroupbetter(const CSRspBody* msg);
  static const ::msg::CSRspUpdateCardGroupSetting& updatecardgroupsetting(const CSRspBody* msg);
  static const ::msg::CSRspSetAuctionName& setauctionname(const CSRspBody* msg);
  static const ::msg::CSRspSetAuctionRemark& setauctionremark(const CSRspBody* msg);
  static const ::msg::CSRspGetBalance& getbalance(const CSRspBody* msg);
  static const ::msg::CSRspRechargeBalance& rechargebalance(const CSRspBody* msg);
  static const ::msg::CSRspWithdrawBalance& withdrawbalance(const CSRspBody* msg);
  static const ::msg::CSRspPersonalRecommendMall& personalrecommendmall(const CSRspBody* msg);
  static const ::msg::CSRspGetMedalChestAward& getmedalchestaward(const CSRspBody* msg);
  static const ::msg::CSRspSetItemAutoUse& setitemautouse(const CSRspBody* msg);
};

const ::msg::CSRspHeart&
CSRspBody::_Internal::heart(const CSRspBody* msg) {
  return *msg->_impl_.heart_;
}
const ::msg::CSRspLogin&
CSRspBody::_Internal::login(const CSRspBody* msg) {
  return *msg->_impl_.login_;
}
const ::msg::CSRspVersionCheck&
CSRspBody::_Internal::versioncheck(const CSRspBody* msg) {
  return *msg->_impl_.versioncheck_;
}
const ::msg::CSRspResourceVersionCheck&
CSRspBody::_Internal::resourceversioncheck(const CSRspBody* msg) {
  return *msg->_impl_.resourceversioncheck_;
}
const ::msg::CSRspApplyHallServer&
CSRspBody::_Internal::applyhallserver(const CSRspBody* msg) {
  return *msg->_impl_.applyhallserver_;
}
const ::msg::CSRspGetNumRank&
CSRspBody::_Internal::getnumrank(const CSRspBody* msg) {
  return *msg->_impl_.getnumrank_;
}
const ::msg::CSRspWorldChat&
CSRspBody::_Internal::worldchat(const CSRspBody* msg) {
  return *msg->_impl_.worldchat_;
}
const ::msg::CSRspPlayersBaseInfo&
CSRspBody::_Internal::playersbaseinfo(const CSRspBody* msg) {
  return *msg->_impl_.playersbaseinfo_;
}
const ::msg::CSRspPlayerDetailInfo&
CSRspBody::_Internal::playerdetailinfo(const CSRspBody* msg) {
  return *msg->_impl_.playerdetailinfo_;
}
const ::msg::CSRspReadMail&
CSRspBody::_Internal::readmail(const CSRspBody* msg) {
  return *msg->_impl_.readmail_;
}
const ::msg::CSRspGetMailAward&
CSRspBody::_Internal::getmailaward(const CSRspBody* msg) {
  return *msg->_impl_.getmailaward_;
}
const ::msg::CSRspBuyEgg&
CSRspBody::_Internal::buyegg(const CSRspBody* msg) {
  return *msg->_impl_.buyegg_;
}
const ::msg::CSRspUserNameSet&
CSRspBody::_Internal::usernameset(const CSRspBody* msg) {
  return *msg->_impl_.usernameset_;
}
const ::msg::CSRspUserNameRandom&
CSRspBody::_Internal::usernamerandom(const CSRspBody* msg) {
  return *msg->_impl_.usernamerandom_;
}
const ::msg::CSRspHeadPicSet&
CSRspBody::_Internal::headpicset(const CSRspBody* msg) {
  return *msg->_impl_.headpicset_;
}
const ::msg::CSRspDressChessPlayer&
CSRspBody::_Internal::dresschessplayer(const CSRspBody* msg) {
  return *msg->_impl_.dresschessplayer_;
}
const ::msg::CSRspDressScene&
CSRspBody::_Internal::dressscene(const CSRspBody* msg) {
  return *msg->_impl_.dressscene_;
}
const ::msg::CSRspPvpLogin&
CSRspBody::_Internal::pvplogin(const CSRspBody* msg) {
  return *msg->_impl_.pvplogin_;
}
const ::msg::CSRspPvpEnd&
CSRspBody::_Internal::pvpend(const CSRspBody* msg) {
  return *msg->_impl_.pvpend_;
}
const ::msg::CSRspPlayerFinish&
CSRspBody::_Internal::playerfinish(const CSRspBody* msg) {
  return *msg->_impl_.playerfinish_;
}
const ::msg::CSRspPlayerQuit&
CSRspBody::_Internal::playerquit(const CSRspBody* msg) {
  return *msg->_impl_.playerquit_;
}
const ::msg::CSRspSellItem&
CSRspBody::_Internal::sellitem(const CSRspBody* msg) {
  return *msg->_impl_.sellitem_;
}
const ::msg::CSRspGetEvalAward&
CSRspBody::_Internal::getevalaward(const CSRspBody* msg) {
  return *msg->_impl_.getevalaward_;
}
const ::msg::CSRspUseChessPlayer&
CSRspBody::_Internal::usechessplayer(const CSRspBody* msg) {
  return *msg->_impl_.usechessplayer_;
}
const ::msg::CSRspGuidReport&
CSRspBody::_Internal::guidreport(const CSRspBody* msg) {
  return *msg->_impl_.guidreport_;
}
const ::msg::CSRspGetCodeAward&
CSRspBody::_Internal::getcodeaward(const CSRspBody* msg) {
  return *msg->_impl_.getcodeaward_;
}
const ::msg::CSRspRoundReport&
CSRspBody::_Internal::roundreport(const CSRspBody* msg) {
  return *msg->_impl_.roundreport_;
}
const ::msg::CSRspLoadingProgress&
CSRspBody::_Internal::loadingprogress(const CSRspBody* msg) {
  return *msg->_impl_.loadingprogress_;
}
const ::msg::CSRspPvpChat&
CSRspBody::_Internal::pvpchat(const CSRspBody* msg) {
  return *msg->_impl_.pvpchat_;
}
const ::msg::CSRspChessCombine&
CSRspBody::_Internal::chesscombine(const CSRspBody* msg) {
  return *msg->_impl_.chesscombine_;
}
const ::msg::CSRspExpose&
CSRspBody::_Internal::expose(const CSRspBody* msg) {
  return *msg->_impl_.expose_;
}
const ::msg::CSRspApplyOrderId&
CSRspBody::_Internal::applyorderid(const CSRspBody* msg) {
  return *msg->_impl_.applyorderid_;
}
const ::msg::CSRspReportOrderInfo&
CSRspBody::_Internal::reportorderinfo(const CSRspBody* msg) {
  return *msg->_impl_.reportorderinfo_;
}
const ::msg::CSRspSetItem&
CSRspBody::_Internal::setitem(const CSRspBody* msg) {
  return *msg->_impl_.setitem_;
}
const ::msg::CSRspUnsetItem&
CSRspBody::_Internal::unsetitem(const CSRspBody* msg) {
  return *msg->_impl_.unsetitem_;
}
const ::msg::CSRspRandomItem&
CSRspBody::_Internal::randomitem(const CSRspBody* msg) {
  return *msg->_impl_.randomitem_;
}
const ::msg::CSRspChat&
CSRspBody::_Internal::chat(const CSRspBody* msg) {
  return *msg->_impl_.chat_;
}
const ::msg::CSRspSetChessPlayer&
CSRspBody::_Internal::setchessplayer(const CSRspBody* msg) {
  return *msg->_impl_.setchessplayer_;
}
const ::msg::CSRspUnsetChessPlayer&
CSRspBody::_Internal::unsetchessplayer(const CSRspBody* msg) {
  return *msg->_impl_.unsetchessplayer_;
}
const ::msg::CSRspGetFansList&
CSRspBody::_Internal::getfanslist(const CSRspBody* msg) {
  return *msg->_impl_.getfanslist_;
}
const ::msg::CSRspFollowPlayer&
CSRspBody::_Internal::followplayer(const CSRspBody* msg) {
  return *msg->_impl_.followplayer_;
}
const ::msg::CSRspUnfollowPlayer&
CSRspBody::_Internal::unfollowplayer(const CSRspBody* msg) {
  return *msg->_impl_.unfollowplayer_;
}
const ::msg::CSRspPlayersStatusInfo&
CSRspBody::_Internal::playersstatusinfo(const CSRspBody* msg) {
  return *msg->_impl_.playersstatusinfo_;
}
const ::msg::CSRspInviteJoinTeam&
CSRspBody::_Internal::invitejointeam(const CSRspBody* msg) {
  return *msg->_impl_.invitejointeam_;
}
const ::msg::CSRspJoinTeam&
CSRspBody::_Internal::jointeam(const CSRspBody* msg) {
  return *msg->_impl_.jointeam_;
}
const ::msg::CSRspReportPayResponse&
CSRspBody::_Internal::reportpayresponse(const CSRspBody* msg) {
  return *msg->_impl_.reportpayresponse_;
}
const ::msg::CSRspRejectJoinTeam&
CSRspBody::_Internal::rejectjointeam(const CSRspBody* msg) {
  return *msg->_impl_.rejectjointeam_;
}
const ::msg::CSRspShieldChat&
CSRspBody::_Internal::shieldchat(const CSRspBody* msg) {
  return *msg->_impl_.shieldchat_;
}
const ::msg::CSRspBuyPassportLevel&
CSRspBody::_Internal::buypassportlevel(const CSRspBody* msg) {
  return *msg->_impl_.buypassportlevel_;
}
const ::msg::CSRspUpgradePassport&
CSRspBody::_Internal::upgradepassport(const CSRspBody* msg) {
  return *msg->_impl_.upgradepassport_;
}
const ::msg::CSRspGetPassportLevelAward&
CSRspBody::_Internal::getpassportlevelaward(const CSRspBody* msg) {
  return *msg->_impl_.getpassportlevelaward_;
}
const ::msg::CSRspGetPassportTaskAward&
CSRspBody::_Internal::getpassporttaskaward(const CSRspBody* msg) {
  return *msg->_impl_.getpassporttaskaward_;
}
const ::msg::CSRspTelBook&
CSRspBody::_Internal::telbook(const CSRspBody* msg) {
  return *msg->_impl_.telbook_;
}
const ::msg::CSRspActivatePassport&
CSRspBody::_Internal::activatepassport(const CSRspBody* msg) {
  return *msg->_impl_.activatepassport_;
}
const ::msg::CSRspRankSeasonEval&
CSRspBody::_Internal::rankseasoneval(const CSRspBody* msg) {
  return *msg->_impl_.rankseasoneval_;
}
const ::msg::CSRspBindAccount&
CSRspBody::_Internal::bindaccount(const CSRspBody* msg) {
  return *msg->_impl_.bindaccount_;
}
const ::msg::CSRspIncAdShowCount&
CSRspBody::_Internal::incadsshowcount(const CSRspBody* msg) {
  return *msg->_impl_.incadsshowcount_;
}
const ::msg::CSRspUseBonusCard&
CSRspBody::_Internal::usebonuscard(const CSRspBody* msg) {
  return *msg->_impl_.usebonuscard_;
}
const ::msg::CSRspGetSeasonAward&
CSRspBody::_Internal::getseasonaward(const CSRspBody* msg) {
  return *msg->_impl_.getseasonaward_;
}
const ::msg::CSRspGetAlphaActivityAward&
CSRspBody::_Internal::getalphaactivityaward(const CSRspBody* msg) {
  return *msg->_impl_.getalphaactivityaward_;
}
const ::msg::CSRspGetLanguageData&
CSRspBody::_Internal::getlanguagedata(const CSRspBody* msg) {
  return *msg->_impl_.getlanguagedata_;
}
const ::msg::CSRspGetActivityAward&
CSRspBody::_Internal::getactivityaward(const CSRspBody* msg) {
  return *msg->_impl_.getactivityaward_;
}
const ::msg::CSRspGetActivityData&
CSRspBody::_Internal::getactivitydata(const CSRspBody* msg) {
  return *msg->_impl_.getactivitydata_;
}
const ::msg::CSRspSendSms&
CSRspBody::_Internal::sendsms(const CSRspBody* msg) {
  return *msg->_impl_.sendsms_;
}
const ::msg::CSRspGetMeleeAward&
CSRspBody::_Internal::getmeleeaward(const CSRspBody* msg) {
  return *msg->_impl_.getmeleeaward_;
}
const ::msg::CSRspAddAiToTeam&
CSRspBody::_Internal::addaitoteam(const CSRspBody* msg) {
  return *msg->_impl_.addaitoteam_;
}
const ::msg::CSRspShare&
CSRspBody::_Internal::share(const CSRspBody* msg) {
  return *msg->_impl_.share_;
}
const ::msg::CSRspSkipInterface&
CSRspBody::_Internal::skipinterface(const CSRspBody* msg) {
  return *msg->_impl_.skipinterface_;
}
const ::msg::CSRspTeamGame&
CSRspBody::_Internal::teamgame(const CSRspBody* msg) {
  return *msg->_impl_.teamgame_;
}
const ::msg::CSRspSetTeamMode&
CSRspBody::_Internal::setteammode(const CSRspBody* msg) {
  return *msg->_impl_.setteammode_;
}
const ::msg::CSRspSetHistoryPvpShowPermission&
CSRspBody::_Internal::historypvpshowpermission(const CSRspBody* msg) {
  return *msg->_impl_.historypvpshowpermission_;
}
const ::msg::CSRspSearchTeam&
CSRspBody::_Internal::searchteam(const CSRspBody* msg) {
  return *msg->_impl_.searchteam_;
}
const ::msg::CSRspApplyChat&
CSRspBody::_Internal::applychat(const CSRspBody* msg) {
  return *msg->_impl_.applychat_;
}
const ::msg::CSRspChatLogin&
CSRspBody::_Internal::chatlogin(const CSRspBody* msg) {
  return *msg->_impl_.chatlogin_;
}
const ::msg::CSRspProbeNetDelay&
CSRspBody::_Internal::probenetdelay(const CSRspBody* msg) {
  return *msg->_impl_.probenetdelay_;
}
const ::msg::CSRspGetEggs&
CSRspBody::_Internal::geteggs(const CSRspBody* msg) {
  return *msg->_impl_.geteggs_;
}
const ::msg::CSRspBuyGoods&
CSRspBody::_Internal::buygoods(const CSRspBody* msg) {
  return *msg->_impl_.buygoods_;
}
const ::msg::CSRspExchangePassportGoods&
CSRspBody::_Internal::exchangepassportgoods(const CSRspBody* msg) {
  return *msg->_impl_.exchangepassportgoods_;
}
const ::msg::CSRspUsePassportTaskCard&
CSRspBody::_Internal::usepassporttaskcard(const CSRspBody* msg) {
  return *msg->_impl_.usepassporttaskcard_;
}
const ::msg::CSRspOpenRandChest&
CSRspBody::_Internal::openrandchest(const CSRspBody* msg) {
  return *msg->_impl_.openrandchest_;
}
const ::msg::CSRspEggLottery&
CSRspBody::_Internal::egglottery(const CSRspBody* msg) {
  return *msg->_impl_.egglottery_;
}
const ::msg::CSRspQueryDiamondBalance&
CSRspBody::_Internal::querydiamondbalance(const CSRspBody* msg) {
  return *msg->_impl_.querydiamondbalance_;
}
const ::msg::CSRspUseItem&
CSRspBody::_Internal::useitem(const CSRspBody* msg) {
  return *msg->_impl_.useitem_;
}
const ::msg::CSRspUseExperienceCard&
CSRspBody::_Internal::useexperiencecard(const CSRspBody* msg) {
  return *msg->_impl_.useexperiencecard_;
}
const ::msg::CSRspRandTargetItem&
CSRspBody::_Internal::randtargetitem(const CSRspBody* msg) {
  return *msg->_impl_.randtargetitem_;
}
const ::msg::CSRspAddBlacklist&
CSRspBody::_Internal::addblacklist(const CSRspBody* msg) {
  return *msg->_impl_.addblacklist_;
}
const ::msg::CSRspRemoveBlacklist&
CSRspBody::_Internal::removeblacklist(const CSRspBody* msg) {
  return *msg->_impl_.removeblacklist_;
}
const ::msg::CSRspReportPlayerBirth&
CSRspBody::_Internal::reportplayerbirth(const CSRspBody* msg) {
  return *msg->_impl_.reportplayerbirth_;
}
const ::msg::CSRspReportInfoInput&
CSRspBody::_Internal::reportinfoinput(const CSRspBody* msg) {
  return *msg->_impl_.reportinfoinput_;
}
const ::msg::CSRspSendVerificationCode&
CSRspBody::_Internal::sendverificationcode(const CSRspBody* msg) {
  return *msg->_impl_.sendverificationcode_;
}
const ::msg::CSRspBindPhoneNumber&
CSRspBody::_Internal::bindphonenumber(const CSRspBody* msg) {
  return *msg->_impl_.bindphonenumber_;
}
const ::msg::CSRspWorldInvite&
CSRspBody::_Internal::worldinvite(const CSRspBody* msg) {
  return *msg->_impl_.worldinvite_;
}
const ::msg::CSRspRemoveExpireItem&
CSRspBody::_Internal::removeexpireitem(const CSRspBody* msg) {
  return *msg->_impl_.removeexpireitem_;
}
const ::msg::CSRspGetMallGoods&
CSRspBody::_Internal::getmallgoods(const CSRspBody* msg) {
  return *msg->_impl_.getmallgoods_;
}
const ::msg::CSRspBuyMallGoods&
CSRspBody::_Internal::buymallgoods(const CSRspBody* msg) {
  return *msg->_impl_.buymallgoods_;
}
const ::msg::CSRspBindSharingCode&
CSRspBody::_Internal::bindsharingcode(const CSRspBody* msg) {
  return *msg->_impl_.bindsharingcode_;
}
const ::msg::CSRspWXBlessBag&
CSRspBody::_Internal::wxblessbag(const CSRspBody* msg) {
  return *msg->_impl_.wxblessbag_;
}
const ::msg::CSRspUpdateFriendsInGame&
CSRspBody::_Internal::updatefriendsingame(const CSRspBody* msg) {
  return *msg->_impl_.updatefriendsingame_;
}
const ::msg::CSRspShareReward&
CSRspBody::_Internal::sharereward(const CSRspBody* msg) {
  return *msg->_impl_.sharereward_;
}
const ::msg::CSRspAllFightInfo&
CSRspBody::_Internal::allfightinfo(const CSRspBody* msg) {
  return *msg->_impl_.allfightinfo_;
}
const ::msg::CSRspGetOldPlayer&
CSRspBody::_Internal::getoldplayer(const CSRspBody* msg) {
  return *msg->_impl_.getoldplayer_;
}
const ::msg::CSRspBindOldPlayer&
CSRspBody::_Internal::bindoldplayer(const CSRspBody* msg) {
  return *msg->_impl_.bindoldplayer_;
}
const ::msg::CSRspSendVerificationCodeWithCheckRedis&
CSRspBody::_Internal::sendverificationcodewithcheckredis(const CSRspBody* msg) {
  return *msg->_impl_.sendverificationcodewithcheckredis_;
}
const ::msg::CSRspReportSetting&
CSRspBody::_Internal::reportsetting(const CSRspBody* msg) {
  return *msg->_impl_.reportsetting_;
}
const ::msg::CSRspAntiData&
CSRspBody::_Internal::antidata(const CSRspBody* msg) {
  return *msg->_impl_.antidata_;
}
const ::msg::CSRspTlogData&
CSRspBody::_Internal::tlogdata(const CSRspBody* msg) {
  return *msg->_impl_.tlogdata_;
}
const ::msg::CSRspDaySign&
CSRspBody::_Internal::daysign(const CSRspBody* msg) {
  return *msg->_impl_.daysign_;
}
const ::msg::CSRspDayFitAvoid&
CSRspBody::_Internal::dayfitavoid(const CSRspBody* msg) {
  return *msg->_impl_.dayfitavoid_;
}
const ::msg::CSRspShareCountAward&
CSRspBody::_Internal::sharecountaward(const CSRspBody* msg) {
  return *msg->_impl_.sharecountaward_;
}
const ::msg::CSRspRealationStar&
CSRspBody::_Internal::realationstar(const CSRspBody* msg) {
  return *msg->_impl_.realationstar_;
}
const ::msg::CSRspGetRealationStarInviteSucc&
CSRspBody::_Internal::getrealationstarinvitesucc(const CSRspBody* msg) {
  return *msg->_impl_.getrealationstarinvitesucc_;
}
const ::msg::CSRspGetRealationStar&
CSRspBody::_Internal::getrealationstar(const CSRspBody* msg) {
  return *msg->_impl_.getrealationstar_;
}
const ::msg::CSRspGetActRecord&
CSRspBody::_Internal::rspactrecord(const CSRspBody* msg) {
  return *msg->_impl_.rspactrecord_;
}
const ::msg::CSRspJoinVoiceTeam&
CSRspBody::_Internal::joinvoiceteam(const CSRspBody* msg) {
  return *msg->_impl_.joinvoiceteam_;
}
const ::msg::CSRspJoinVoicePvp&
CSRspBody::_Internal::joinvoicepvp(const CSRspBody* msg) {
  return *msg->_impl_.joinvoicepvp_;
}
const ::msg::CSRspJoinVoiceCamp&
CSRspBody::_Internal::joinvoicecamp(const CSRspBody* msg) {
  return *msg->_impl_.joinvoicecamp_;
}
const ::msg::CSRspUserCountrySet&
CSRspBody::_Internal::usercountryset(const CSRspBody* msg) {
  return *msg->_impl_.usercountryset_;
}
const ::msg::CSRspObserve&
CSRspBody::_Internal::observe(const CSRspBody* msg) {
  return *msg->_impl_.observe_;
}
const ::msg::CSRspGetRecommendPvp&
CSRspBody::_Internal::getrecommendpvp(const CSRspBody* msg) {
  return *msg->_impl_.getrecommendpvp_;
}
const ::msg::CSRspObserveLogin&
CSRspBody::_Internal::observelogin(const CSRspBody* msg) {
  return *msg->_impl_.observelogin_;
}
const ::msg::CSRspQuitObserve&
CSRspBody::_Internal::quitobserve(const CSRspBody* msg) {
  return *msg->_impl_.quitobserve_;
}
const ::msg::CSRspGetObserveInfo&
CSRspBody::_Internal::getobserveinfo(const CSRspBody* msg) {
  return *msg->_impl_.getobserveinfo_;
}
const ::msg::CSRspFreeFlow&
CSRspBody::_Internal::freeflow(const CSRspBody* msg) {
  return *msg->_impl_.freeflow_;
}
const ::msg::CSRspSetPushToken&
CSRspBody::_Internal::setpushtoken(const CSRspBody* msg) {
  return *msg->_impl_.setpushtoken_;
}
const ::msg::CSRspTlogEvent&
CSRspBody::_Internal::tlogevent(const CSRspBody* msg) {
  return *msg->_impl_.tlogevent_;
}
const ::msg::CSRspWxVVipAward&
CSRspBody::_Internal::wxvvipaward(const CSRspBody* msg) {
  return *msg->_impl_.wxvvipaward_;
}
const ::msg::CSRspGetRelationStarWX&
CSRspBody::_Internal::relationstarwx(const CSRspBody* msg) {
  return *msg->_impl_.relationstarwx_;
}
const ::msg::CSRspSendWxRedPacket&
CSRspBody::_Internal::sendwxredpacket(const CSRspBody* msg) {
  return *msg->_impl_.sendwxredpacket_;
}
const ::msg::CSRspRecvWxRedPacket&
CSRspBody::_Internal::recvwxredpacket(const CSRspBody* msg) {
  return *msg->_impl_.recvwxredpacket_;
}
const ::msg::CSRspWxRedPktLike&
CSRspBody::_Internal::wxredpktlike(const CSRspBody* msg) {
  return *msg->_impl_.wxredpktlike_;
}
const ::msg::CSRspWxRedPktRank&
CSRspBody::_Internal::wxredpktrank(const CSRspBody* msg) {
  return *msg->_impl_.wxredpktrank_;
}
const ::msg::CSRspObservePrivilege&
CSRspBody::_Internal::setobserveprivilege(const CSRspBody* msg) {
  return *msg->_impl_.setobserveprivilege_;
}
const ::msg::CSRspPresetFastChat&
CSRspBody::_Internal::presetfastchat(const CSRspBody* msg) {
  return *msg->_impl_.presetfastchat_;
}
const ::msg::CSRspChangeSlotTeam&
CSRspBody::_Internal::changeslotteam(const CSRspBody* msg) {
  return *msg->_impl_.changeslotteam_;
}
const ::msg::CSRspChangeSubModeTeam&
CSRspBody::_Internal::changesubmodeteam(const CSRspBody* msg) {
  return *msg->_impl_.changesubmodeteam_;
}
const ::msg::CSRspConfirmChangeSlotTeam&
CSRspBody::_Internal::confirmchangeslotteam(const CSRspBody* msg) {
  return *msg->_impl_.confirmchangeslotteam_;
}
const ::msg::CSRspPvpRoundEnd&
CSRspBody::_Internal::pvproundend(const CSRspBody* msg) {
  return *msg->_impl_.pvproundend_;
}
const ::msg::CSRspPvp&
CSRspBody::_Internal::pvp(const CSRspBody* msg) {
  return *msg->_impl_.pvp_;
}
const ::msg::CSRspTeamReady&
CSRspBody::_Internal::teamready(const CSRspBody* msg) {
  return *msg->_impl_.teamready_;
}
const ::msg::CSRspBindOldBusinessPlayer&
CSRspBody::_Internal::bindoldbusinessplayer(const CSRspBody* msg) {
  return *msg->_impl_.bindoldbusinessplayer_;
}
const ::msg::CSRspTranslate&
CSRspBody::_Internal::translate(const CSRspBody* msg) {
  return *msg->_impl_.translate_;
}
const ::msg::CSRspSubmitQuestionnaire&
CSRspBody::_Internal::submitquestionnaire(const CSRspBody* msg) {
  return *msg->_impl_.submitquestionnaire_;
}
const ::msg::CSRspCancelChangeSlot&
CSRspBody::_Internal::cancelchangeslot(const CSRspBody* msg) {
  return *msg->_impl_.cancelchangeslot_;
}
const ::msg::CSRspSetChessSkin&
CSRspBody::_Internal::setchessskin(const CSRspBody* msg) {
  return *msg->_impl_.setchessskin_;
}
const ::msg::CSRspUnsetChessSkin&
CSRspBody::_Internal::unsetchessskin(const CSRspBody* msg) {
  return *msg->_impl_.unsetchessskin_;
}
const ::msg::CSRspCompose&
CSRspBody::_Internal::compose(const CSRspBody* msg) {
  return *msg->_impl_.compose_;
}
const ::msg::CSRspVideo&
CSRspBody::_Internal::video(const CSRspBody* msg) {
  return *msg->_impl_.video_;
}
const ::msg::CSRspOffHelpReddot&
CSRspBody::_Internal::offhelpreddot(const CSRspBody* msg) {
  return *msg->_impl_.offhelpreddot_;
}
const ::msg::CSRspChangeLanguage&
CSRspBody::_Internal::changelanguage(const CSRspBody* msg) {
  return *msg->_impl_.changelanguage_;
}
const ::msg::CSRspSetProvince&
CSRspBody::_Internal::setprovince(const CSRspBody* msg) {
  return *msg->_impl_.setprovince_;
}
const ::msg::CSRspLongyuanVoice&
CSRspBody::_Internal::longyuanvoice(const CSRspBody* msg) {
  return *msg->_impl_.longyuanvoice_;
}
const ::msg::CSRspEnrollTournament&
CSRspBody::_Internal::enrolltournament(const CSRspBody* msg) {
  return *msg->_impl_.enrolltournament_;
}
const ::msg::CSRspJoinTournamentRoom&
CSRspBody::_Internal::jointournamentroom(const CSRspBody* msg) {
  return *msg->_impl_.jointournamentroom_;
}
const ::msg::CSRspTournamentPointAward&
CSRspBody::_Internal::tournamentpointaward(const CSRspBody* msg) {
  return *msg->_impl_.tournamentpointaward_;
}
const ::msg::CSRspGetEnrollPlayers&
CSRspBody::_Internal::getenrollplayers(const CSRspBody* msg) {
  return *msg->_impl_.getenrollplayers_;
}
const ::msg::CSRspDealWebMail&
CSRspBody::_Internal::dealwebmail(const CSRspBody* msg) {
  return *msg->_impl_.dealwebmail_;
}
const ::msg::CSRspChallengeAgain&
CSRspBody::_Internal::challengeagain(const CSRspBody* msg) {
  return *msg->_impl_.challengeagain_;
}
const ::msg::CSRspHistoryChatMsg&
CSRspBody::_Internal::historychat(const CSRspBody* msg) {
  return *msg->_impl_.historychat_;
}
const ::msg::CSRspSetFriendInvisible&
CSRspBody::_Internal::setfriendinvisible(const CSRspBody* msg) {
  return *msg->_impl_.setfriendinvisible_;
}
const ::msg::CSRspGetObserveAward&
CSRspBody::_Internal::getobserveaward(const CSRspBody* msg) {
  return *msg->_impl_.getobserveaward_;
}
const ::msg::CSRspInviteObserve&
CSRspBody::_Internal::inviteobserve(const CSRspBody* msg) {
  return *msg->_impl_.inviteobserve_;
}
const ::msg::CSRspRejectObserve&
CSRspBody::_Internal::rejectobserve(const CSRspBody* msg) {
  return *msg->_impl_.rejectobserve_;
}
const ::msg::CSRspGetTxPlayer&
CSRspBody::_Internal::gettxplayer(const CSRspBody* msg) {
  return *msg->_impl_.gettxplayer_;
}
const ::msg::CSRspGetThirdPvpInfo&
CSRspBody::_Internal::getthirdpvpinfo(const CSRspBody* msg) {
  return *msg->_impl_.getthirdpvpinfo_;
}
const ::msg::CSRspMarkPlayerGuide&
CSRspBody::_Internal::markplayerguide(const CSRspBody* msg) {
  return *msg->_impl_.markplayerguide_;
}
const ::msg::CSRspMarkChessSkinClicked&
CSRspBody::_Internal::chessskinclicked(const CSRspBody* msg) {
  return *msg->_impl_.chessskinclicked_;
}
const ::msg::CSRsqQueryPs4Entitlements&
CSRspBody::_Internal::queryps4entitlements(const CSRspBody* msg) {
  return *msg->_impl_.queryps4entitlements_;
}
const ::msg::CSRspActDaySign&
CSRspBody::_Internal::actdaysign(const CSRspBody* msg) {
  return *msg->_impl_.actdaysign_;
}
const ::msg::CSRspHaveThirdPvp&
CSRspBody::_Internal::havethirdpvpinfo(const CSRspBody* msg) {
  return *msg->_impl_.havethirdpvpinfo_;
}
const ::msg::CSRspActivityMall&
CSRspBody::_Internal::activitymall(const CSRspBody* msg) {
  return *msg->_impl_.activitymall_;
}
const ::msg::CSRspPsOnly&
CSRspBody::_Internal::psonly(const CSRspBody* msg) {
  return *msg->_impl_.psonly_;
}
const ::msg::CSRspChangeChannelType&
CSRspBody::_Internal::changechanneltype(const CSRspBody* msg) {
  return *msg->_impl_.changechanneltype_;
}
const ::msg::CSRspCustomCardOpt&
CSRspBody::_Internal::customcardopt(const CSRspBody* msg) {
  return *msg->_impl_.customcardopt_;
}
const ::msg::CSRspChampionHistory&
CSRspBody::_Internal::championhistory(const CSRspBody* msg) {
  return *msg->_impl_.championhistory_;
}
const ::msg::CSRspTournamentLastTopRank&
CSRspBody::_Internal::tournamentlasttoprank(const CSRspBody* msg) {
  return *msg->_impl_.tournamentlasttoprank_;
}
const ::msg::CSRspBigWinnerDailyAward&
CSRspBody::_Internal::bigwinnerdailyaward(const CSRspBody* msg) {
  return *msg->_impl_.bigwinnerdailyaward_;
}
const ::msg::CSRspBigWinnerScoreHistory&
CSRspBody::_Internal::bigwinnerscorehistory(const CSRspBody* msg) {
  return *msg->_impl_.bigwinnerscorehistory_;
}
const ::msg::CSRspSmeltItem&
CSRspBody::_Internal::smeltitem(const CSRspBody* msg) {
  return *msg->_impl_.smeltitem_;
}
const ::msg::CSRspPVEUpTalentLevel&
CSRspBody::_Internal::pveuptalentlevel(const CSRspBody* msg) {
  return *msg->_impl_.pveuptalentlevel_;
}
const ::msg::CSRspPVELuckyAward&
CSRspBody::_Internal::luckyaward(const CSRspBody* msg) {
  return *msg->_impl_.luckyaward_;
}
const ::msg::CSRspApplyChannel&
CSRspBody::_Internal::applychannel(const CSRspBody* msg) {
  return *msg->_impl_.applychannel_;
}
const ::msg::CSRspOBTeamInfo&
CSRspBody::_Internal::obteaminfo(const CSRspBody* msg) {
  return *msg->_impl_.obteaminfo_;
}
const ::msg::CSRspGetPvpServerGroup&
CSRspBody::_Internal::getpvpservergroup(const CSRspBody* msg) {
  return *msg->_impl_.getpvpservergroup_;
}
const ::msg::CSRspReportPvpInfo&
CSRspBody::_Internal::reportpvpinfo(const CSRspBody* msg) {
  return *msg->_impl_.reportpvpinfo_;
}
const ::msg::CSRspChoosePlayer&
CSRspBody::_Internal::chooseplayer(const CSRspBody* msg) {
  return *msg->_impl_.chooseplayer_;
}
const ::msg::CSRspPingTest&
CSRspBody::_Internal::pingtest(const CSRspBody* msg) {
  return *msg->_impl_.pingtest_;
}
const ::msg::CSRspReportRegionInfo&
CSRspBody::_Internal::reportregioninfo(const CSRspBody* msg) {
  return *msg->_impl_.reportregioninfo_;
}
const ::msg::CSRspRecalledPlayer&
CSRspBody::_Internal::recalledplaeyr(const CSRspBody* msg) {
  return *msg->_impl_.recalledplaeyr_;
}
const ::msg::CSRspWebLogin&
CSRspBody::_Internal::weblogin(const CSRspBody* msg) {
  return *msg->_impl_.weblogin_;
}
const ::msg::CSRspInviteCodeReset&
CSRspBody::_Internal::invitecodereset(const CSRspBody* msg) {
  return *msg->_impl_.invitecodereset_;
}
const ::msg::CSRspRecallReward&
CSRspBody::_Internal::recallreward(const CSRspBody* msg) {
  return *msg->_impl_.recallreward_;
}
const ::msg::CSRspSwitchToCommonMatch&
CSRspBody::_Internal::switchtocommonmatch(const CSRspBody* msg) {
  return *msg->_impl_.switchtocommonmatch_;
}
const ::msg::CSRspSwitchModeInTeam&
CSRspBody::_Internal::switchmodeinteam(const CSRspBody* msg) {
  return *msg->_impl_.switchmodeinteam_;
}
const ::msg::CSRspGetTNRoomState&
CSRspBody::_Internal::gettnroomstate(const CSRspBody* msg) {
  return *msg->_impl_.gettnroomstate_;
}
const ::msg::CSRspWorkshopMatch&
CSRspBody::_Internal::workshopmatch(const CSRspBody* msg) {
  return *msg->_impl_.workshopmatch_;
}
const ::msg::CSRspBuyWorkshopTicket&
CSRspBody::_Internal::buyworkshopticket(const CSRspBody* msg) {
  return *msg->_impl_.buyworkshopticket_;
}
const ::msg::CSRspFavouriteWorkshopMap&
CSRspBody::_Internal::favouriteworkshopmap(const CSRspBody* msg) {
  return *msg->_impl_.favouriteworkshopmap_;
}
const ::msg::CSRspShortcutMapsOP&
CSRspBody::_Internal::shortcutmapsop(const CSRspBody* msg) {
  return *msg->_impl_.shortcutmapsop_;
}
const ::msg::CSRspPlayersTournamentInfo&
CSRspBody::_Internal::playerstournamentinfo(const CSRspBody* msg) {
  return *msg->_impl_.playerstournamentinfo_;
}
const ::msg::CSRspScoreWorkshopMap&
CSRspBody::_Internal::scoreworkshopmap(const CSRspBody* msg) {
  return *msg->_impl_.scoreworkshopmap_;
}
const ::msg::CSRspMapsVisitedByFriends&
CSRspBody::_Internal::mapsvisitedbyfriends(const CSRspBody* msg) {
  return *msg->_impl_.mapsvisitedbyfriends_;
}
const ::msg::CSRspVerifyRealName&
CSRspBody::_Internal::verifyrealname(const CSRspBody* msg) {
  return *msg->_impl_.verifyrealname_;
}
const ::msg::CSRspFakePay&
CSRspBody::_Internal::fakepay(const CSRspBody* msg) {
  return *msg->_impl_.fakepay_;
}
const ::msg::CSRspGuildCreate&
CSRspBody::_Internal::guildcreate(const CSRspBody* msg) {
  return *msg->_impl_.guildcreate_;
}
const ::msg::CSRspGuildApply&
CSRspBody::_Internal::guildapply(const CSRspBody* msg) {
  return *msg->_impl_.guildapply_;
}
const ::msg::CSRspGuildHome&
CSRspBody::_Internal::guildhome(const CSRspBody* msg) {
  return *msg->_impl_.guildhome_;
}
const ::msg::CSRspGuildInfo&
CSRspBody::_Internal::guildinfo(const CSRspBody* msg) {
  return *msg->_impl_.guildinfo_;
}
const ::msg::CSRspGuildApprove&
CSRspBody::_Internal::guildapprove(const CSRspBody* msg) {
  return *msg->_impl_.guildapprove_;
}
const ::msg::CSRspGuildSetRole&
CSRspBody::_Internal::guildrole(const CSRspBody* msg) {
  return *msg->_impl_.guildrole_;
}
const ::msg::CSRspGuildModify&
CSRspBody::_Internal::guildmodify(const CSRspBody* msg) {
  return *msg->_impl_.guildmodify_;
}
const ::msg::CSRspGuildKickoff&
CSRspBody::_Internal::guildkickoff(const CSRspBody* msg) {
  return *msg->_impl_.guildkickoff_;
}
const ::msg::CSRspGuildDismiss&
CSRspBody::_Internal::guilddismiss(const CSRspBody* msg) {
  return *msg->_impl_.guilddismiss_;
}
const ::msg::CSRspGuildExit&
CSRspBody::_Internal::guildexit(const CSRspBody* msg) {
  return *msg->_impl_.guildexit_;
}
const ::msg::CSRspGuildChat&
CSRspBody::_Internal::guildchat(const CSRspBody* msg) {
  return *msg->_impl_.guildchat_;
}
const ::msg::CSRspGuildList&
CSRspBody::_Internal::guildlist(const CSRspBody* msg) {
  return *msg->_impl_.guildlist_;
}
const ::msg::CSRspGuildRecommendPlayers&
CSRspBody::_Internal::guildrecommendplayers(const CSRspBody* msg) {
  return *msg->_impl_.guildrecommendplayers_;
}
const ::msg::CSRspGuildInviteList&
CSRspBody::_Internal::guildinvitelist(const CSRspBody* msg) {
  return *msg->_impl_.guildinvitelist_;
}
const ::msg::CSRspGuildInvite&
CSRspBody::_Internal::guildinvite(const CSRspBody* msg) {
  return *msg->_impl_.guildinvite_;
}
const ::msg::CSRspGuildRejectInvite&
CSRspBody::_Internal::guildrejectinvite(const CSRspBody* msg) {
  return *msg->_impl_.guildrejectinvite_;
}
const ::msg::CSRspGetVngCommentAward&
CSRspBody::_Internal::getvngcommentaward(const CSRspBody* msg) {
  return *msg->_impl_.getvngcommentaward_;
}
const ::msg::CSRspLevelupChest&
CSRspBody::_Internal::levelupchest(const CSRspBody* msg) {
  return *msg->_impl_.levelupchest_;
}
const ::msg::CSRspWatchAd&
CSRspBody::_Internal::watchad(const CSRspBody* msg) {
  return *msg->_impl_.watchad_;
}
const ::msg::CSRspQueryPsTournamentRoom&
CSRspBody::_Internal::pstournamentroom(const CSRspBody* msg) {
  return *msg->_impl_.pstournamentroom_;
}
const ::msg::CSRspGetAdCumulateAward&
CSRspBody::_Internal::getadcumulateaward(const CSRspBody* msg) {
  return *msg->_impl_.getadcumulateaward_;
}
const ::msg::CSRspSetMessengerPos&
CSRspBody::_Internal::setmessengerpos(const CSRspBody* msg) {
  return *msg->_impl_.setmessengerpos_;
}
const ::msg::CSRspUpdateAntiAddictionTime&
CSRspBody::_Internal::antiaddictiontime(const CSRspBody* msg) {
  return *msg->_impl_.antiaddictiontime_;
}
const ::msg::CSRspCancelReconnect&
CSRspBody::_Internal::cancelreconnect(const CSRspBody* msg) {
  return *msg->_impl_.cancelreconnect_;
}
const ::msg::CSRspReconnect&
CSRspBody::_Internal::reconnect(const CSRspBody* msg) {
  return *msg->_impl_.reconnect_;
}
const ::msg::CSRspPassThrough&
CSRspBody::_Internal::passthrough(const CSRspBody* msg) {
  return *msg->_impl_.passthrough_;
}
const ::msg::CSRspVisitPlayer&
CSRspBody::_Internal::visitplayer(const CSRspBody* msg) {
  return *msg->_impl_.visitplayer_;
}
const ::msg::CSRspLeaveGameEarly&
CSRspBody::_Internal::leavegameearly(const CSRspBody* msg) {
  return *msg->_impl_.leavegameearly_;
}
const ::msg::CSRspGDCommonBin&
CSRspBody::_Internal::gdcommonbin(const CSRspBody* msg) {
  return *msg->_impl_.gdcommonbin_;
}
const ::msg::CSRspGDCommonBinData&
CSRspBody::_Internal::gdbindata(const CSRspBody* msg) {
  return *msg->_impl_.gdbindata_;
}
const ::msg::CSRspBattleCampResult&
CSRspBody::_Internal::battlecampresult(const CSRspBody* msg) {
  return *msg->_impl_.battlecampresult_;
}
const ::msg::CSRspAutoBattleOP&
CSRspBody::_Internal::autobattleop(const CSRspBody* msg) {
  return *msg->_impl_.autobattleop_;
}
const ::msg::CSRspRestrictUser&
CSRspBody::_Internal::restrictuser(const CSRspBody* msg) {
  return *msg->_impl_.restrictuser_;
}
const ::msg::CSRspEquipSelectRate&
CSRspBody::_Internal::equipselectrate(const CSRspBody* msg) {
  return *msg->_impl_.equipselectrate_;
}
const ::msg::CSRspReportAbsent&
CSRspBody::_Internal::reportabsent(const CSRspBody* msg) {
  return *msg->_impl_.reportabsent_;
}
const ::msg::CSRspRecommendWeek&
CSRspBody::_Internal::recommendweek(const CSRspBody* msg) {
  return *msg->_impl_.recommendweek_;
}
const ::msg::CSRspRecommendOfficial&
CSRspBody::_Internal::recommendofficial(const CSRspBody* msg) {
  return *msg->_impl_.recommendofficial_;
}
const ::msg::CSRspRecommendLatest&
CSRspBody::_Internal::recommendlatest(const CSRspBody* msg) {
  return *msg->_impl_.recommendlatest_;
}
const ::msg::CSRspRecommendHistory&
CSRspBody::_Internal::recommendhistory(const CSRspBody* msg) {
  return *msg->_impl_.recommendhistory_;
}
const ::msg::CSRspRecommendCollect&
CSRspBody::_Internal::recommendcollect(const CSRspBody* msg) {
  return *msg->_impl_.recommendcollect_;
}
const ::msg::CSRspRecommendSet&
CSRspBody::_Internal::recommendset(const CSRspBody* msg) {
  return *msg->_impl_.recommendset_;
}
const ::msg::CSRspRecommendGetCollection&
CSRspBody::_Internal::recommendgetcollection(const CSRspBody* msg) {
  return *msg->_impl_.recommendgetcollection_;
}
const ::msg::CSRspRecommendEquip&
CSRspBody::_Internal::recommendequip(const CSRspBody* msg) {
  return *msg->_impl_.recommendequip_;
}
const ::msg::CSRspLoginCancel&
CSRspBody::_Internal::logincancel(const CSRspBody* msg) {
  return *msg->_impl_.logincancel_;
}
const ::msg::CSRspConvertDebris&
CSRspBody::_Internal::convertdebris(const CSRspBody* msg) {
  return *msg->_impl_.convertdebris_;
}
const ::msg::CSRspUseProtectionCard&
CSRspBody::_Internal::protectioncard(const CSRspBody* msg) {
  return *msg->_impl_.protectioncard_;
}
const ::msg::CSRspUsePassportCard&
CSRspBody::_Internal::usepassportcard(const CSRspBody* msg) {
  return *msg->_impl_.usepassportcard_;
}
const ::msg::CSRspSetMedal&
CSRspBody::_Internal::setmedal(const CSRspBody* msg) {
  return *msg->_impl_.setmedal_;
}
const ::msg::CSRspUnSetMedal&
CSRspBody::_Internal::unsetmedal(const CSRspBody* msg) {
  return *msg->_impl_.unsetmedal_;
}
const ::msg::CSRspPlayerMedals&
CSRspBody::_Internal::playermedals(const CSRspBody* msg) {
  return *msg->_impl_.playermedals_;
}
const ::msg::CSRspUpdateHotDot&
CSRspBody::_Internal::updatehotdot(const CSRspBody* msg) {
  return *msg->_impl_.updatehotdot_;
}
const ::msg::CSRspQueryHotDot&
CSRspBody::_Internal::queryhotdot(const CSRspBody* msg) {
  return *msg->_impl_.queryhotdot_;
}
const ::msg::CSRspSetCache&
CSRspBody::_Internal::setcache(const CSRspBody* msg) {
  return *msg->_impl_.setcache_;
}
const ::msg::CSRspGetCache&
CSRspBody::_Internal::getcache(const CSRspBody* msg) {
  return *msg->_impl_.getcache_;
}
const ::msg::CSRspBuyChallengeCount&
CSRspBody::_Internal::buychallengecount(const CSRspBody* msg) {
  return *msg->_impl_.buychallengecount_;
}
const ::msg::CSRspGetPveRank&
CSRspBody::_Internal::getpverank(const CSRspBody* msg) {
  return *msg->_impl_.getpverank_;
}
const ::msg::CSRspAuthAccount&
CSRspBody::_Internal::authaccount(const CSRspBody* msg) {
  return *msg->_impl_.authaccount_;
}
const ::msg::CSRspUnbindAccount&
CSRspBody::_Internal::unbindaccount(const CSRspBody* msg) {
  return *msg->_impl_.unbindaccount_;
}
const ::msg::CSRspBagToItem&
CSRspBody::_Internal::bagtoitem(const CSRspBody* msg) {
  return *msg->_impl_.bagtoitem_;
}
const ::msg::CSRspIdentifyItem&
CSRspBody::_Internal::identifyitem(const CSRspBody* msg) {
  return *msg->_impl_.identifyitem_;
}
const ::msg::CSRspInsetItemAffix&
CSRspBody::_Internal::insetitemaffix(const CSRspBody* msg) {
  return *msg->_impl_.insetitemaffix_;
}
const ::msg::CSRspUnsetItemAffix&
CSRspBody::_Internal::unsetitemaffix(const CSRspBody* msg) {
  return *msg->_impl_.unsetitemaffix_;
}
const ::msg::CSRspSetDefaultAttributes&
CSRspBody::_Internal::setdefaultattributes(const CSRspBody* msg) {
  return *msg->_impl_.setdefaultattributes_;
}
const ::msg::CSRspCheckCancel&
CSRspBody::_Internal::checkcancel(const CSRspBody* msg) {
  return *msg->_impl_.checkcancel_;
}
const ::msg::CSRspCancelAccount&
CSRspBody::_Internal::cancelaccount(const CSRspBody* msg) {
  return *msg->_impl_.cancelaccount_;
}
const ::msg::CSRspOAuthApp&
CSRspBody::_Internal::oauthapp(const CSRspBody* msg) {
  return *msg->_impl_.oauthapp_;
}
const ::msg::CSRspGetSelfNumRankData&
CSRspBody::_Internal::selfnumrankdata(const CSRspBody* msg) {
  return *msg->_impl_.selfnumrankdata_;
}
const ::msg::CSRspUpdateCardGroup&
CSRspBody::_Internal::updatecardgroup(const CSRspBody* msg) {
  return *msg->_impl_.updatecardgroup_;
}
const ::msg::CSRspUpdateCardGroupName&
CSRspBody::_Internal::updatecardgroupname(const CSRspBody* msg) {
  return *msg->_impl_.updatecardgroupname_;
}
const ::msg::CSRspBuyPveBuff&
CSRspBody::_Internal::buypvebuff(const CSRspBody* msg) {
  return *msg->_impl_.buypvebuff_;
}
const ::msg::CSRspSetCardGroup&
CSRspBody::_Internal::setcardgroup(const CSRspBody* msg) {
  return *msg->_impl_.setcardgroup_;
}
const ::msg::CSRspBuyPveChessTemplate&
CSRspBody::_Internal::buypvechesstemplate(const CSRspBody* msg) {
  return *msg->_impl_.buypvechesstemplate_;
}
const ::msg::CSRspPveUnlockChessTemplate&
CSRspBody::_Internal::pveunlockchesstemplate(const CSRspBody* msg) {
  return *msg->_impl_.pveunlockchesstemplate_;
}
const ::msg::CSRspPveSetTeamDeBuff&
CSRspBody::_Internal::pvesetteamdebuff(const CSRspBody* msg) {
  return *msg->_impl_.pvesetteamdebuff_;
}
const ::msg::CSRspChoseCardGroup&
CSRspBody::_Internal::chosecardgroup(const CSRspBody* msg) {
  return *msg->_impl_.chosecardgroup_;
}
const ::msg::CSRspRemoveOvertimeBuff&
CSRspBody::_Internal::removeovertimebuff(const CSRspBody* msg) {
  return *msg->_impl_.removeovertimebuff_;
}
const ::msg::CSRspUpdateNewCardGroupSign&
CSRspBody::_Internal::updatenewcardgroupsign(const CSRspBody* msg) {
  return *msg->_impl_.updatenewcardgroupsign_;
}
const ::msg::CSRspTDGetOnHookAward&
CSRspBody::_Internal::tdgetonhookaward(const CSRspBody* msg) {
  return *msg->_impl_.tdgetonhookaward_;
}
const ::msg::CsRspTDDraw&
CSRspBody::_Internal::tddraw(const CSRspBody* msg) {
  return *msg->_impl_.tddraw_;
}
const ::msg::CsRspTDBuyCard&
CSRspBody::_Internal::tdbuycard(const CSRspBody* msg) {
  return *msg->_impl_.tdbuycard_;
}
const ::msg::CSRspTDSetCardGroup&
CSRspBody::_Internal::tdsetcardgroup(const CSRspBody* msg) {
  return *msg->_impl_.tdsetcardgroup_;
}
const ::msg::CSRspTDLevelUp&
CSRspBody::_Internal::tdlevelup(const CSRspBody* msg) {
  return *msg->_impl_.tdlevelup_;
}
const ::msg::CSRspTDEquip&
CSRspBody::_Internal::tdequip(const CSRspBody* msg) {
  return *msg->_impl_.tdequip_;
}
const ::msg::CSRspMentorUpdateSetting&
CSRspBody::_Internal::mentorupdatesetting(const CSRspBody* msg) {
  return *msg->_impl_.mentorupdatesetting_;
}
const ::msg::CSRspMentorInvite&
CSRspBody::_Internal::mentorinvite(const CSRspBody* msg) {
  return *msg->_impl_.mentorinvite_;
}
const ::msg::CSRspMentorConfirmInvite&
CSRspBody::_Internal::mentorconfirminvite(const CSRspBody* msg) {
  return *msg->_impl_.mentorconfirminvite_;
}
const ::msg::CSRspMentorRecommendList&
CSRspBody::_Internal::mentorrecommendlist(const CSRspBody* msg) {
  return *msg->_impl_.mentorrecommendlist_;
}
const ::msg::CSRspMentorGetTaskAward&
CSRspBody::_Internal::mentorgettaskaward(const CSRspBody* msg) {
  return *msg->_impl_.mentorgettaskaward_;
}
const ::msg::CSRspMentorGraduate&
CSRspBody::_Internal::mentorgraduate(const CSRspBody* msg) {
  return *msg->_impl_.mentorgraduate_;
}
const ::msg::CSRspMentorRelieveRelation&
CSRspBody::_Internal::mentorrelieverelation(const CSRspBody* msg) {
  return *msg->_impl_.mentorrelieverelation_;
}
const ::msg::CSRspGetMentorInfo&
CSRspBody::_Internal::getmentorinfo(const CSRspBody* msg) {
  return *msg->_impl_.getmentorinfo_;
}
const ::msg::CSRspMentorGetInviteMsg&
CSRspBody::_Internal::mentorgetinvitemsg(const CSRspBody* msg) {
  return *msg->_impl_.mentorgetinvitemsg_;
}
const ::msg::CSRspTeamMsg&
CSRspBody::_Internal::teammsg(const CSRspBody* msg) {
  return *msg->_impl_.teammsg_;
}
const ::msg::CSRspChatMsg&
CSRspBody::_Internal::chatmsg(const CSRspBody* msg) {
  return *msg->_impl_.chatmsg_;
}
const ::msg::CSRspChannelChat&
CSRspBody::_Internal::channelchat(const CSRspBody* msg) {
  return *msg->_impl_.channelchat_;
}
const ::msg::CSRspUpdateCardGroupBetter&
CSRspBody::_Internal::updatecardgroupbetter(const CSRspBody* msg) {
  return *msg->_impl_.updatecardgroupbetter_;
}
const ::msg::CSRspUpdateCardGroupSetting&
CSRspBody::_Internal::updatecardgroupsetting(const CSRspBody* msg) {
  return *msg->_impl_.updatecardgroupsetting_;
}
const ::msg::CSRspSetAuctionName&
CSRspBody::_Internal::setauctionname(const CSRspBody* msg) {
  return *msg->_impl_.setauctionname_;
}
const ::msg::CSRspSetAuctionRemark&
CSRspBody::_Internal::setauctionremark(const CSRspBody* msg) {
  return *msg->_impl_.setauctionremark_;
}
const ::msg::CSRspGetBalance&
CSRspBody::_Internal::getbalance(const CSRspBody* msg) {
  return *msg->_impl_.getbalance_;
}
const ::msg::CSRspRechargeBalance&
CSRspBody::_Internal::rechargebalance(const CSRspBody* msg) {
  return *msg->_impl_.rechargebalance_;
}
const ::msg::CSRspWithdrawBalance&
CSRspBody::_Internal::withdrawbalance(const CSRspBody* msg) {
  return *msg->_impl_.withdrawbalance_;
}
const ::msg::CSRspPersonalRecommendMall&
CSRspBody::_Internal::personalrecommendmall(const CSRspBody* msg) {
  return *msg->_impl_.personalrecommendmall_;
}
const ::msg::CSRspGetMedalChestAward&
CSRspBody::_Internal::getmedalchestaward(const CSRspBody* msg) {
  return *msg->_impl_.getmedalchestaward_;
}
const ::msg::CSRspSetItemAutoUse&
CSRspBody::_Internal::setitemautouse(const CSRspBody* msg) {
  return *msg->_impl_.setitemautouse_;
}
void CSRspBody::clear_heart() {
  if (GetArenaForAllocation() == nullptr && _impl_.heart_ != nullptr) {
    delete _impl_.heart_;
  }
  _impl_.heart_ = nullptr;
}
void CSRspBody::clear_login() {
  if (GetArenaForAllocation() == nullptr && _impl_.login_ != nullptr) {
    delete _impl_.login_;
  }
  _impl_.login_ = nullptr;
}
void CSRspBody::clear_versioncheck() {
  if (GetArenaForAllocation() == nullptr && _impl_.versioncheck_ != nullptr) {
    delete _impl_.versioncheck_;
  }
  _impl_.versioncheck_ = nullptr;
}
void CSRspBody::clear_resourceversioncheck() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourceversioncheck_ != nullptr) {
    delete _impl_.resourceversioncheck_;
  }
  _impl_.resourceversioncheck_ = nullptr;
}
void CSRspBody::clear_applyhallserver() {
  if (GetArenaForAllocation() == nullptr && _impl_.applyhallserver_ != nullptr) {
    delete _impl_.applyhallserver_;
  }
  _impl_.applyhallserver_ = nullptr;
}
void CSRspBody::clear_getnumrank() {
  if (GetArenaForAllocation() == nullptr && _impl_.getnumrank_ != nullptr) {
    delete _impl_.getnumrank_;
  }
  _impl_.getnumrank_ = nullptr;
}
void CSRspBody::clear_worldchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.worldchat_ != nullptr) {
    delete _impl_.worldchat_;
  }
  _impl_.worldchat_ = nullptr;
}
void CSRspBody::clear_playersbaseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playersbaseinfo_ != nullptr) {
    delete _impl_.playersbaseinfo_;
  }
  _impl_.playersbaseinfo_ = nullptr;
}
void CSRspBody::clear_playerdetailinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerdetailinfo_ != nullptr) {
    delete _impl_.playerdetailinfo_;
  }
  _impl_.playerdetailinfo_ = nullptr;
}
void CSRspBody::clear_readmail() {
  if (GetArenaForAllocation() == nullptr && _impl_.readmail_ != nullptr) {
    delete _impl_.readmail_;
  }
  _impl_.readmail_ = nullptr;
}
void CSRspBody::clear_getmailaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmailaward_ != nullptr) {
    delete _impl_.getmailaward_;
  }
  _impl_.getmailaward_ = nullptr;
}
void CSRspBody::clear_buyegg() {
  if (GetArenaForAllocation() == nullptr && _impl_.buyegg_ != nullptr) {
    delete _impl_.buyegg_;
  }
  _impl_.buyegg_ = nullptr;
}
void CSRspBody::clear_usernameset() {
  if (GetArenaForAllocation() == nullptr && _impl_.usernameset_ != nullptr) {
    delete _impl_.usernameset_;
  }
  _impl_.usernameset_ = nullptr;
}
void CSRspBody::clear_usernamerandom() {
  if (GetArenaForAllocation() == nullptr && _impl_.usernamerandom_ != nullptr) {
    delete _impl_.usernamerandom_;
  }
  _impl_.usernamerandom_ = nullptr;
}
void CSRspBody::clear_headpicset() {
  if (GetArenaForAllocation() == nullptr && _impl_.headpicset_ != nullptr) {
    delete _impl_.headpicset_;
  }
  _impl_.headpicset_ = nullptr;
}
void CSRspBody::clear_dresschessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.dresschessplayer_ != nullptr) {
    delete _impl_.dresschessplayer_;
  }
  _impl_.dresschessplayer_ = nullptr;
}
void CSRspBody::clear_dressscene() {
  if (GetArenaForAllocation() == nullptr && _impl_.dressscene_ != nullptr) {
    delete _impl_.dressscene_;
  }
  _impl_.dressscene_ = nullptr;
}
void CSRspBody::clear_pvplogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvplogin_ != nullptr) {
    delete _impl_.pvplogin_;
  }
  _impl_.pvplogin_ = nullptr;
}
void CSRspBody::clear_pvpend() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpend_ != nullptr) {
    delete _impl_.pvpend_;
  }
  _impl_.pvpend_ = nullptr;
}
void CSRspBody::clear_playerfinish() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerfinish_ != nullptr) {
    delete _impl_.playerfinish_;
  }
  _impl_.playerfinish_ = nullptr;
}
void CSRspBody::clear_playerquit() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerquit_ != nullptr) {
    delete _impl_.playerquit_;
  }
  _impl_.playerquit_ = nullptr;
}
void CSRspBody::clear_sellitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.sellitem_ != nullptr) {
    delete _impl_.sellitem_;
  }
  _impl_.sellitem_ = nullptr;
}
void CSRspBody::clear_getevalaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getevalaward_ != nullptr) {
    delete _impl_.getevalaward_;
  }
  _impl_.getevalaward_ = nullptr;
}
void CSRspBody::clear_usechessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.usechessplayer_ != nullptr) {
    delete _impl_.usechessplayer_;
  }
  _impl_.usechessplayer_ = nullptr;
}
void CSRspBody::clear_guidreport() {
  if (GetArenaForAllocation() == nullptr && _impl_.guidreport_ != nullptr) {
    delete _impl_.guidreport_;
  }
  _impl_.guidreport_ = nullptr;
}
void CSRspBody::clear_getcodeaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getcodeaward_ != nullptr) {
    delete _impl_.getcodeaward_;
  }
  _impl_.getcodeaward_ = nullptr;
}
void CSRspBody::clear_roundreport() {
  if (GetArenaForAllocation() == nullptr && _impl_.roundreport_ != nullptr) {
    delete _impl_.roundreport_;
  }
  _impl_.roundreport_ = nullptr;
}
void CSRspBody::clear_loadingprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.loadingprogress_ != nullptr) {
    delete _impl_.loadingprogress_;
  }
  _impl_.loadingprogress_ = nullptr;
}
void CSRspBody::clear_pvpchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpchat_ != nullptr) {
    delete _impl_.pvpchat_;
  }
  _impl_.pvpchat_ = nullptr;
}
void CSRspBody::clear_chesscombine() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesscombine_ != nullptr) {
    delete _impl_.chesscombine_;
  }
  _impl_.chesscombine_ = nullptr;
}
void CSRspBody::clear_expose() {
  if (GetArenaForAllocation() == nullptr && _impl_.expose_ != nullptr) {
    delete _impl_.expose_;
  }
  _impl_.expose_ = nullptr;
}
void CSRspBody::clear_applyorderid() {
  if (GetArenaForAllocation() == nullptr && _impl_.applyorderid_ != nullptr) {
    delete _impl_.applyorderid_;
  }
  _impl_.applyorderid_ = nullptr;
}
void CSRspBody::clear_reportorderinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportorderinfo_ != nullptr) {
    delete _impl_.reportorderinfo_;
  }
  _impl_.reportorderinfo_ = nullptr;
}
void CSRspBody::clear_setitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.setitem_ != nullptr) {
    delete _impl_.setitem_;
  }
  _impl_.setitem_ = nullptr;
}
void CSRspBody::clear_unsetitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitem_ != nullptr) {
    delete _impl_.unsetitem_;
  }
  _impl_.unsetitem_ = nullptr;
}
void CSRspBody::clear_randomitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.randomitem_ != nullptr) {
    delete _impl_.randomitem_;
  }
  _impl_.randomitem_ = nullptr;
}
void CSRspBody::clear_chat() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
}
void CSRspBody::clear_setchessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.setchessplayer_ != nullptr) {
    delete _impl_.setchessplayer_;
  }
  _impl_.setchessplayer_ = nullptr;
}
void CSRspBody::clear_unsetchessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessplayer_ != nullptr) {
    delete _impl_.unsetchessplayer_;
  }
  _impl_.unsetchessplayer_ = nullptr;
}
void CSRspBody::clear_getfanslist() {
  if (GetArenaForAllocation() == nullptr && _impl_.getfanslist_ != nullptr) {
    delete _impl_.getfanslist_;
  }
  _impl_.getfanslist_ = nullptr;
}
void CSRspBody::clear_followplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.followplayer_ != nullptr) {
    delete _impl_.followplayer_;
  }
  _impl_.followplayer_ = nullptr;
}
void CSRspBody::clear_unfollowplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.unfollowplayer_ != nullptr) {
    delete _impl_.unfollowplayer_;
  }
  _impl_.unfollowplayer_ = nullptr;
}
void CSRspBody::clear_playersstatusinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playersstatusinfo_ != nullptr) {
    delete _impl_.playersstatusinfo_;
  }
  _impl_.playersstatusinfo_ = nullptr;
}
void CSRspBody::clear_invitejointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.invitejointeam_ != nullptr) {
    delete _impl_.invitejointeam_;
  }
  _impl_.invitejointeam_ = nullptr;
}
void CSRspBody::clear_jointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.jointeam_ != nullptr) {
    delete _impl_.jointeam_;
  }
  _impl_.jointeam_ = nullptr;
}
void CSRspBody::clear_reportpayresponse() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportpayresponse_ != nullptr) {
    delete _impl_.reportpayresponse_;
  }
  _impl_.reportpayresponse_ = nullptr;
}
void CSRspBody::clear_rejectjointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.rejectjointeam_ != nullptr) {
    delete _impl_.rejectjointeam_;
  }
  _impl_.rejectjointeam_ = nullptr;
}
void CSRspBody::clear_shieldchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.shieldchat_ != nullptr) {
    delete _impl_.shieldchat_;
  }
  _impl_.shieldchat_ = nullptr;
}
void CSRspBody::clear_buypassportlevel() {
  if (GetArenaForAllocation() == nullptr && _impl_.buypassportlevel_ != nullptr) {
    delete _impl_.buypassportlevel_;
  }
  _impl_.buypassportlevel_ = nullptr;
}
void CSRspBody::clear_upgradepassport() {
  if (GetArenaForAllocation() == nullptr && _impl_.upgradepassport_ != nullptr) {
    delete _impl_.upgradepassport_;
  }
  _impl_.upgradepassport_ = nullptr;
}
void CSRspBody::clear_getpassportlevelaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpassportlevelaward_ != nullptr) {
    delete _impl_.getpassportlevelaward_;
  }
  _impl_.getpassportlevelaward_ = nullptr;
}
void CSRspBody::clear_getpassporttaskaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpassporttaskaward_ != nullptr) {
    delete _impl_.getpassporttaskaward_;
  }
  _impl_.getpassporttaskaward_ = nullptr;
}
void CSRspBody::clear_telbook() {
  if (GetArenaForAllocation() == nullptr && _impl_.telbook_ != nullptr) {
    delete _impl_.telbook_;
  }
  _impl_.telbook_ = nullptr;
}
void CSRspBody::clear_activatepassport() {
  if (GetArenaForAllocation() == nullptr && _impl_.activatepassport_ != nullptr) {
    delete _impl_.activatepassport_;
  }
  _impl_.activatepassport_ = nullptr;
}
void CSRspBody::clear_rankseasoneval() {
  if (GetArenaForAllocation() == nullptr && _impl_.rankseasoneval_ != nullptr) {
    delete _impl_.rankseasoneval_;
  }
  _impl_.rankseasoneval_ = nullptr;
}
void CSRspBody::clear_bindaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindaccount_ != nullptr) {
    delete _impl_.bindaccount_;
  }
  _impl_.bindaccount_ = nullptr;
}
void CSRspBody::clear_incadsshowcount() {
  if (GetArenaForAllocation() == nullptr && _impl_.incadsshowcount_ != nullptr) {
    delete _impl_.incadsshowcount_;
  }
  _impl_.incadsshowcount_ = nullptr;
}
void CSRspBody::clear_usebonuscard() {
  if (GetArenaForAllocation() == nullptr && _impl_.usebonuscard_ != nullptr) {
    delete _impl_.usebonuscard_;
  }
  _impl_.usebonuscard_ = nullptr;
}
void CSRspBody::clear_getseasonaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getseasonaward_ != nullptr) {
    delete _impl_.getseasonaward_;
  }
  _impl_.getseasonaward_ = nullptr;
}
void CSRspBody::clear_getalphaactivityaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getalphaactivityaward_ != nullptr) {
    delete _impl_.getalphaactivityaward_;
  }
  _impl_.getalphaactivityaward_ = nullptr;
}
void CSRspBody::clear_getlanguagedata() {
  if (GetArenaForAllocation() == nullptr && _impl_.getlanguagedata_ != nullptr) {
    delete _impl_.getlanguagedata_;
  }
  _impl_.getlanguagedata_ = nullptr;
}
void CSRspBody::clear_getactivityaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getactivityaward_ != nullptr) {
    delete _impl_.getactivityaward_;
  }
  _impl_.getactivityaward_ = nullptr;
}
void CSRspBody::clear_getactivitydata() {
  if (GetArenaForAllocation() == nullptr && _impl_.getactivitydata_ != nullptr) {
    delete _impl_.getactivitydata_;
  }
  _impl_.getactivitydata_ = nullptr;
}
void CSRspBody::clear_sendsms() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendsms_ != nullptr) {
    delete _impl_.sendsms_;
  }
  _impl_.sendsms_ = nullptr;
}
void CSRspBody::clear_getmeleeaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmeleeaward_ != nullptr) {
    delete _impl_.getmeleeaward_;
  }
  _impl_.getmeleeaward_ = nullptr;
}
void CSRspBody::clear_addaitoteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.addaitoteam_ != nullptr) {
    delete _impl_.addaitoteam_;
  }
  _impl_.addaitoteam_ = nullptr;
}
void CSRspBody::clear_share() {
  if (GetArenaForAllocation() == nullptr && _impl_.share_ != nullptr) {
    delete _impl_.share_;
  }
  _impl_.share_ = nullptr;
}
void CSRspBody::clear_skipinterface() {
  if (GetArenaForAllocation() == nullptr && _impl_.skipinterface_ != nullptr) {
    delete _impl_.skipinterface_;
  }
  _impl_.skipinterface_ = nullptr;
}
void CSRspBody::clear_teamgame() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamgame_ != nullptr) {
    delete _impl_.teamgame_;
  }
  _impl_.teamgame_ = nullptr;
}
void CSRspBody::clear_setteammode() {
  if (GetArenaForAllocation() == nullptr && _impl_.setteammode_ != nullptr) {
    delete _impl_.setteammode_;
  }
  _impl_.setteammode_ = nullptr;
}
void CSRspBody::clear_historypvpshowpermission() {
  if (GetArenaForAllocation() == nullptr && _impl_.historypvpshowpermission_ != nullptr) {
    delete _impl_.historypvpshowpermission_;
  }
  _impl_.historypvpshowpermission_ = nullptr;
}
void CSRspBody::clear_searchteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.searchteam_ != nullptr) {
    delete _impl_.searchteam_;
  }
  _impl_.searchteam_ = nullptr;
}
void CSRspBody::clear_applychat() {
  if (GetArenaForAllocation() == nullptr && _impl_.applychat_ != nullptr) {
    delete _impl_.applychat_;
  }
  _impl_.applychat_ = nullptr;
}
void CSRspBody::clear_chatlogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.chatlogin_ != nullptr) {
    delete _impl_.chatlogin_;
  }
  _impl_.chatlogin_ = nullptr;
}
void CSRspBody::clear_probenetdelay() {
  if (GetArenaForAllocation() == nullptr && _impl_.probenetdelay_ != nullptr) {
    delete _impl_.probenetdelay_;
  }
  _impl_.probenetdelay_ = nullptr;
}
void CSRspBody::clear_geteggs() {
  if (GetArenaForAllocation() == nullptr && _impl_.geteggs_ != nullptr) {
    delete _impl_.geteggs_;
  }
  _impl_.geteggs_ = nullptr;
}
void CSRspBody::clear_buygoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.buygoods_ != nullptr) {
    delete _impl_.buygoods_;
  }
  _impl_.buygoods_ = nullptr;
}
void CSRspBody::clear_exchangepassportgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchangepassportgoods_ != nullptr) {
    delete _impl_.exchangepassportgoods_;
  }
  _impl_.exchangepassportgoods_ = nullptr;
}
void CSRspBody::clear_usepassporttaskcard() {
  if (GetArenaForAllocation() == nullptr && _impl_.usepassporttaskcard_ != nullptr) {
    delete _impl_.usepassporttaskcard_;
  }
  _impl_.usepassporttaskcard_ = nullptr;
}
void CSRspBody::clear_openrandchest() {
  if (GetArenaForAllocation() == nullptr && _impl_.openrandchest_ != nullptr) {
    delete _impl_.openrandchest_;
  }
  _impl_.openrandchest_ = nullptr;
}
void CSRspBody::clear_egglottery() {
  if (GetArenaForAllocation() == nullptr && _impl_.egglottery_ != nullptr) {
    delete _impl_.egglottery_;
  }
  _impl_.egglottery_ = nullptr;
}
void CSRspBody::clear_querydiamondbalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.querydiamondbalance_ != nullptr) {
    delete _impl_.querydiamondbalance_;
  }
  _impl_.querydiamondbalance_ = nullptr;
}
void CSRspBody::clear_useitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.useitem_ != nullptr) {
    delete _impl_.useitem_;
  }
  _impl_.useitem_ = nullptr;
}
void CSRspBody::clear_useexperiencecard() {
  if (GetArenaForAllocation() == nullptr && _impl_.useexperiencecard_ != nullptr) {
    delete _impl_.useexperiencecard_;
  }
  _impl_.useexperiencecard_ = nullptr;
}
void CSRspBody::clear_randtargetitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.randtargetitem_ != nullptr) {
    delete _impl_.randtargetitem_;
  }
  _impl_.randtargetitem_ = nullptr;
}
void CSRspBody::clear_addblacklist() {
  if (GetArenaForAllocation() == nullptr && _impl_.addblacklist_ != nullptr) {
    delete _impl_.addblacklist_;
  }
  _impl_.addblacklist_ = nullptr;
}
void CSRspBody::clear_removeblacklist() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeblacklist_ != nullptr) {
    delete _impl_.removeblacklist_;
  }
  _impl_.removeblacklist_ = nullptr;
}
void CSRspBody::clear_reportplayerbirth() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportplayerbirth_ != nullptr) {
    delete _impl_.reportplayerbirth_;
  }
  _impl_.reportplayerbirth_ = nullptr;
}
void CSRspBody::clear_reportinfoinput() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportinfoinput_ != nullptr) {
    delete _impl_.reportinfoinput_;
  }
  _impl_.reportinfoinput_ = nullptr;
}
void CSRspBody::clear_sendverificationcode() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcode_ != nullptr) {
    delete _impl_.sendverificationcode_;
  }
  _impl_.sendverificationcode_ = nullptr;
}
void CSRspBody::clear_bindphonenumber() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindphonenumber_ != nullptr) {
    delete _impl_.bindphonenumber_;
  }
  _impl_.bindphonenumber_ = nullptr;
}
void CSRspBody::clear_worldinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.worldinvite_ != nullptr) {
    delete _impl_.worldinvite_;
  }
  _impl_.worldinvite_ = nullptr;
}
void CSRspBody::clear_removeexpireitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeexpireitem_ != nullptr) {
    delete _impl_.removeexpireitem_;
  }
  _impl_.removeexpireitem_ = nullptr;
}
void CSRspBody::clear_getmallgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmallgoods_ != nullptr) {
    delete _impl_.getmallgoods_;
  }
  _impl_.getmallgoods_ = nullptr;
}
void CSRspBody::clear_buymallgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.buymallgoods_ != nullptr) {
    delete _impl_.buymallgoods_;
  }
  _impl_.buymallgoods_ = nullptr;
}
void CSRspBody::clear_bindsharingcode() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindsharingcode_ != nullptr) {
    delete _impl_.bindsharingcode_;
  }
  _impl_.bindsharingcode_ = nullptr;
}
void CSRspBody::clear_wxblessbag() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxblessbag_ != nullptr) {
    delete _impl_.wxblessbag_;
  }
  _impl_.wxblessbag_ = nullptr;
}
void CSRspBody::clear_updatefriendsingame() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatefriendsingame_ != nullptr) {
    delete _impl_.updatefriendsingame_;
  }
  _impl_.updatefriendsingame_ = nullptr;
}
void CSRspBody::clear_sharereward() {
  if (GetArenaForAllocation() == nullptr && _impl_.sharereward_ != nullptr) {
    delete _impl_.sharereward_;
  }
  _impl_.sharereward_ = nullptr;
}
void CSRspBody::clear_allfightinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.allfightinfo_ != nullptr) {
    delete _impl_.allfightinfo_;
  }
  _impl_.allfightinfo_ = nullptr;
}
void CSRspBody::clear_getoldplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.getoldplayer_ != nullptr) {
    delete _impl_.getoldplayer_;
  }
  _impl_.getoldplayer_ = nullptr;
}
void CSRspBody::clear_bindoldplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldplayer_ != nullptr) {
    delete _impl_.bindoldplayer_;
  }
  _impl_.bindoldplayer_ = nullptr;
}
void CSRspBody::clear_sendverificationcodewithcheckredis() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcodewithcheckredis_ != nullptr) {
    delete _impl_.sendverificationcodewithcheckredis_;
  }
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
}
void CSRspBody::clear_reportsetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportsetting_ != nullptr) {
    delete _impl_.reportsetting_;
  }
  _impl_.reportsetting_ = nullptr;
}
void CSRspBody::clear_antidata() {
  if (GetArenaForAllocation() == nullptr && _impl_.antidata_ != nullptr) {
    delete _impl_.antidata_;
  }
  _impl_.antidata_ = nullptr;
}
void CSRspBody::clear_tlogdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.tlogdata_ != nullptr) {
    delete _impl_.tlogdata_;
  }
  _impl_.tlogdata_ = nullptr;
}
void CSRspBody::clear_daysign() {
  if (GetArenaForAllocation() == nullptr && _impl_.daysign_ != nullptr) {
    delete _impl_.daysign_;
  }
  _impl_.daysign_ = nullptr;
}
void CSRspBody::clear_dayfitavoid() {
  if (GetArenaForAllocation() == nullptr && _impl_.dayfitavoid_ != nullptr) {
    delete _impl_.dayfitavoid_;
  }
  _impl_.dayfitavoid_ = nullptr;
}
void CSRspBody::clear_sharecountaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.sharecountaward_ != nullptr) {
    delete _impl_.sharecountaward_;
  }
  _impl_.sharecountaward_ = nullptr;
}
void CSRspBody::clear_realationstar() {
  if (GetArenaForAllocation() == nullptr && _impl_.realationstar_ != nullptr) {
    delete _impl_.realationstar_;
  }
  _impl_.realationstar_ = nullptr;
}
void CSRspBody::clear_getrealationstarinvitesucc() {
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstarinvitesucc_ != nullptr) {
    delete _impl_.getrealationstarinvitesucc_;
  }
  _impl_.getrealationstarinvitesucc_ = nullptr;
}
void CSRspBody::clear_getrealationstar() {
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstar_ != nullptr) {
    delete _impl_.getrealationstar_;
  }
  _impl_.getrealationstar_ = nullptr;
}
void CSRspBody::clear_rspactrecord() {
  if (GetArenaForAllocation() == nullptr && _impl_.rspactrecord_ != nullptr) {
    delete _impl_.rspactrecord_;
  }
  _impl_.rspactrecord_ = nullptr;
}
void CSRspBody::clear_joinvoiceteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoiceteam_ != nullptr) {
    delete _impl_.joinvoiceteam_;
  }
  _impl_.joinvoiceteam_ = nullptr;
}
void CSRspBody::clear_joinvoicepvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicepvp_ != nullptr) {
    delete _impl_.joinvoicepvp_;
  }
  _impl_.joinvoicepvp_ = nullptr;
}
void CSRspBody::clear_joinvoicecamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicecamp_ != nullptr) {
    delete _impl_.joinvoicecamp_;
  }
  _impl_.joinvoicecamp_ = nullptr;
}
void CSRspBody::clear_usercountryset() {
  if (GetArenaForAllocation() == nullptr && _impl_.usercountryset_ != nullptr) {
    delete _impl_.usercountryset_;
  }
  _impl_.usercountryset_ = nullptr;
}
void CSRspBody::clear_observe() {
  if (GetArenaForAllocation() == nullptr && _impl_.observe_ != nullptr) {
    delete _impl_.observe_;
  }
  _impl_.observe_ = nullptr;
}
void CSRspBody::clear_getrecommendpvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.getrecommendpvp_ != nullptr) {
    delete _impl_.getrecommendpvp_;
  }
  _impl_.getrecommendpvp_ = nullptr;
}
void CSRspBody::clear_observelogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.observelogin_ != nullptr) {
    delete _impl_.observelogin_;
  }
  _impl_.observelogin_ = nullptr;
}
void CSRspBody::clear_quitobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.quitobserve_ != nullptr) {
    delete _impl_.quitobserve_;
  }
  _impl_.quitobserve_ = nullptr;
}
void CSRspBody::clear_getobserveinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveinfo_ != nullptr) {
    delete _impl_.getobserveinfo_;
  }
  _impl_.getobserveinfo_ = nullptr;
}
void CSRspBody::clear_freeflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.freeflow_ != nullptr) {
    delete _impl_.freeflow_;
  }
  _impl_.freeflow_ = nullptr;
}
void CSRspBody::clear_setpushtoken() {
  if (GetArenaForAllocation() == nullptr && _impl_.setpushtoken_ != nullptr) {
    delete _impl_.setpushtoken_;
  }
  _impl_.setpushtoken_ = nullptr;
}
void CSRspBody::clear_tlogevent() {
  if (GetArenaForAllocation() == nullptr && _impl_.tlogevent_ != nullptr) {
    delete _impl_.tlogevent_;
  }
  _impl_.tlogevent_ = nullptr;
}
void CSRspBody::clear_wxvvipaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxvvipaward_ != nullptr) {
    delete _impl_.wxvvipaward_;
  }
  _impl_.wxvvipaward_ = nullptr;
}
void CSRspBody::clear_relationstarwx() {
  if (GetArenaForAllocation() == nullptr && _impl_.relationstarwx_ != nullptr) {
    delete _impl_.relationstarwx_;
  }
  _impl_.relationstarwx_ = nullptr;
}
void CSRspBody::clear_sendwxredpacket() {
  if (GetArenaForAllocation() == nullptr && _impl_.sendwxredpacket_ != nullptr) {
    delete _impl_.sendwxredpacket_;
  }
  _impl_.sendwxredpacket_ = nullptr;
}
void CSRspBody::clear_recvwxredpacket() {
  if (GetArenaForAllocation() == nullptr && _impl_.recvwxredpacket_ != nullptr) {
    delete _impl_.recvwxredpacket_;
  }
  _impl_.recvwxredpacket_ = nullptr;
}
void CSRspBody::clear_wxredpktlike() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktlike_ != nullptr) {
    delete _impl_.wxredpktlike_;
  }
  _impl_.wxredpktlike_ = nullptr;
}
void CSRspBody::clear_wxredpktrank() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktrank_ != nullptr) {
    delete _impl_.wxredpktrank_;
  }
  _impl_.wxredpktrank_ = nullptr;
}
void CSRspBody::clear_setobserveprivilege() {
  if (GetArenaForAllocation() == nullptr && _impl_.setobserveprivilege_ != nullptr) {
    delete _impl_.setobserveprivilege_;
  }
  _impl_.setobserveprivilege_ = nullptr;
}
void CSRspBody::clear_presetfastchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.presetfastchat_ != nullptr) {
    delete _impl_.presetfastchat_;
  }
  _impl_.presetfastchat_ = nullptr;
}
void CSRspBody::clear_changeslotteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.changeslotteam_ != nullptr) {
    delete _impl_.changeslotteam_;
  }
  _impl_.changeslotteam_ = nullptr;
}
void CSRspBody::clear_changesubmodeteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.changesubmodeteam_ != nullptr) {
    delete _impl_.changesubmodeteam_;
  }
  _impl_.changesubmodeteam_ = nullptr;
}
void CSRspBody::clear_confirmchangeslotteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.confirmchangeslotteam_ != nullptr) {
    delete _impl_.confirmchangeslotteam_;
  }
  _impl_.confirmchangeslotteam_ = nullptr;
}
void CSRspBody::clear_pvproundend() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvproundend_ != nullptr) {
    delete _impl_.pvproundend_;
  }
  _impl_.pvproundend_ = nullptr;
}
void CSRspBody::clear_pvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvp_ != nullptr) {
    delete _impl_.pvp_;
  }
  _impl_.pvp_ = nullptr;
}
void CSRspBody::clear_teamready() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamready_ != nullptr) {
    delete _impl_.teamready_;
  }
  _impl_.teamready_ = nullptr;
}
void CSRspBody::clear_bindoldbusinessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldbusinessplayer_ != nullptr) {
    delete _impl_.bindoldbusinessplayer_;
  }
  _impl_.bindoldbusinessplayer_ = nullptr;
}
void CSRspBody::clear_translate() {
  if (GetArenaForAllocation() == nullptr && _impl_.translate_ != nullptr) {
    delete _impl_.translate_;
  }
  _impl_.translate_ = nullptr;
}
void CSRspBody::clear_submitquestionnaire() {
  if (GetArenaForAllocation() == nullptr && _impl_.submitquestionnaire_ != nullptr) {
    delete _impl_.submitquestionnaire_;
  }
  _impl_.submitquestionnaire_ = nullptr;
}
void CSRspBody::clear_cancelchangeslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelchangeslot_ != nullptr) {
    delete _impl_.cancelchangeslot_;
  }
  _impl_.cancelchangeslot_ = nullptr;
}
void CSRspBody::clear_setchessskin() {
  if (GetArenaForAllocation() == nullptr && _impl_.setchessskin_ != nullptr) {
    delete _impl_.setchessskin_;
  }
  _impl_.setchessskin_ = nullptr;
}
void CSRspBody::clear_unsetchessskin() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessskin_ != nullptr) {
    delete _impl_.unsetchessskin_;
  }
  _impl_.unsetchessskin_ = nullptr;
}
void CSRspBody::clear_compose() {
  if (GetArenaForAllocation() == nullptr && _impl_.compose_ != nullptr) {
    delete _impl_.compose_;
  }
  _impl_.compose_ = nullptr;
}
void CSRspBody::clear_video() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
}
void CSRspBody::clear_offhelpreddot() {
  if (GetArenaForAllocation() == nullptr && _impl_.offhelpreddot_ != nullptr) {
    delete _impl_.offhelpreddot_;
  }
  _impl_.offhelpreddot_ = nullptr;
}
void CSRspBody::clear_changelanguage() {
  if (GetArenaForAllocation() == nullptr && _impl_.changelanguage_ != nullptr) {
    delete _impl_.changelanguage_;
  }
  _impl_.changelanguage_ = nullptr;
}
void CSRspBody::clear_setprovince() {
  if (GetArenaForAllocation() == nullptr && _impl_.setprovince_ != nullptr) {
    delete _impl_.setprovince_;
  }
  _impl_.setprovince_ = nullptr;
}
void CSRspBody::clear_longyuanvoice() {
  if (GetArenaForAllocation() == nullptr && _impl_.longyuanvoice_ != nullptr) {
    delete _impl_.longyuanvoice_;
  }
  _impl_.longyuanvoice_ = nullptr;
}
void CSRspBody::clear_enrolltournament() {
  if (GetArenaForAllocation() == nullptr && _impl_.enrolltournament_ != nullptr) {
    delete _impl_.enrolltournament_;
  }
  _impl_.enrolltournament_ = nullptr;
}
void CSRspBody::clear_jointournamentroom() {
  if (GetArenaForAllocation() == nullptr && _impl_.jointournamentroom_ != nullptr) {
    delete _impl_.jointournamentroom_;
  }
  _impl_.jointournamentroom_ = nullptr;
}
void CSRspBody::clear_tournamentpointaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentpointaward_ != nullptr) {
    delete _impl_.tournamentpointaward_;
  }
  _impl_.tournamentpointaward_ = nullptr;
}
void CSRspBody::clear_getenrollplayers() {
  if (GetArenaForAllocation() == nullptr && _impl_.getenrollplayers_ != nullptr) {
    delete _impl_.getenrollplayers_;
  }
  _impl_.getenrollplayers_ = nullptr;
}
void CSRspBody::clear_dealwebmail() {
  if (GetArenaForAllocation() == nullptr && _impl_.dealwebmail_ != nullptr) {
    delete _impl_.dealwebmail_;
  }
  _impl_.dealwebmail_ = nullptr;
}
void CSRspBody::clear_challengeagain() {
  if (GetArenaForAllocation() == nullptr && _impl_.challengeagain_ != nullptr) {
    delete _impl_.challengeagain_;
  }
  _impl_.challengeagain_ = nullptr;
}
void CSRspBody::clear_historychat() {
  if (GetArenaForAllocation() == nullptr && _impl_.historychat_ != nullptr) {
    delete _impl_.historychat_;
  }
  _impl_.historychat_ = nullptr;
}
void CSRspBody::clear_setfriendinvisible() {
  if (GetArenaForAllocation() == nullptr && _impl_.setfriendinvisible_ != nullptr) {
    delete _impl_.setfriendinvisible_;
  }
  _impl_.setfriendinvisible_ = nullptr;
}
void CSRspBody::clear_getobserveaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveaward_ != nullptr) {
    delete _impl_.getobserveaward_;
  }
  _impl_.getobserveaward_ = nullptr;
}
void CSRspBody::clear_inviteobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.inviteobserve_ != nullptr) {
    delete _impl_.inviteobserve_;
  }
  _impl_.inviteobserve_ = nullptr;
}
void CSRspBody::clear_rejectobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.rejectobserve_ != nullptr) {
    delete _impl_.rejectobserve_;
  }
  _impl_.rejectobserve_ = nullptr;
}
void CSRspBody::clear_gettxplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.gettxplayer_ != nullptr) {
    delete _impl_.gettxplayer_;
  }
  _impl_.gettxplayer_ = nullptr;
}
void CSRspBody::clear_getthirdpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.getthirdpvpinfo_ != nullptr) {
    delete _impl_.getthirdpvpinfo_;
  }
  _impl_.getthirdpvpinfo_ = nullptr;
}
void CSRspBody::clear_markplayerguide() {
  if (GetArenaForAllocation() == nullptr && _impl_.markplayerguide_ != nullptr) {
    delete _impl_.markplayerguide_;
  }
  _impl_.markplayerguide_ = nullptr;
}
void CSRspBody::clear_chessskinclicked() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessskinclicked_ != nullptr) {
    delete _impl_.chessskinclicked_;
  }
  _impl_.chessskinclicked_ = nullptr;
}
void CSRspBody::clear_queryps4entitlements() {
  if (GetArenaForAllocation() == nullptr && _impl_.queryps4entitlements_ != nullptr) {
    delete _impl_.queryps4entitlements_;
  }
  _impl_.queryps4entitlements_ = nullptr;
}
void CSRspBody::clear_actdaysign() {
  if (GetArenaForAllocation() == nullptr && _impl_.actdaysign_ != nullptr) {
    delete _impl_.actdaysign_;
  }
  _impl_.actdaysign_ = nullptr;
}
void CSRspBody::clear_havethirdpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.havethirdpvpinfo_ != nullptr) {
    delete _impl_.havethirdpvpinfo_;
  }
  _impl_.havethirdpvpinfo_ = nullptr;
}
void CSRspBody::clear_activitymall() {
  if (GetArenaForAllocation() == nullptr && _impl_.activitymall_ != nullptr) {
    delete _impl_.activitymall_;
  }
  _impl_.activitymall_ = nullptr;
}
void CSRspBody::clear_psonly() {
  if (GetArenaForAllocation() == nullptr && _impl_.psonly_ != nullptr) {
    delete _impl_.psonly_;
  }
  _impl_.psonly_ = nullptr;
}
void CSRspBody::clear_changechanneltype() {
  if (GetArenaForAllocation() == nullptr && _impl_.changechanneltype_ != nullptr) {
    delete _impl_.changechanneltype_;
  }
  _impl_.changechanneltype_ = nullptr;
}
void CSRspBody::clear_customcardopt() {
  if (GetArenaForAllocation() == nullptr && _impl_.customcardopt_ != nullptr) {
    delete _impl_.customcardopt_;
  }
  _impl_.customcardopt_ = nullptr;
}
void CSRspBody::clear_championhistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.championhistory_ != nullptr) {
    delete _impl_.championhistory_;
  }
  _impl_.championhistory_ = nullptr;
}
void CSRspBody::clear_tournamentlasttoprank() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentlasttoprank_ != nullptr) {
    delete _impl_.tournamentlasttoprank_;
  }
  _impl_.tournamentlasttoprank_ = nullptr;
}
void CSRspBody::clear_bigwinnerdailyaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerdailyaward_ != nullptr) {
    delete _impl_.bigwinnerdailyaward_;
  }
  _impl_.bigwinnerdailyaward_ = nullptr;
}
void CSRspBody::clear_bigwinnerscorehistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerscorehistory_ != nullptr) {
    delete _impl_.bigwinnerscorehistory_;
  }
  _impl_.bigwinnerscorehistory_ = nullptr;
}
void CSRspBody::clear_smeltitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.smeltitem_ != nullptr) {
    delete _impl_.smeltitem_;
  }
  _impl_.smeltitem_ = nullptr;
}
void CSRspBody::clear_pveuptalentlevel() {
  if (GetArenaForAllocation() == nullptr && _impl_.pveuptalentlevel_ != nullptr) {
    delete _impl_.pveuptalentlevel_;
  }
  _impl_.pveuptalentlevel_ = nullptr;
}
void CSRspBody::clear_luckyaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.luckyaward_ != nullptr) {
    delete _impl_.luckyaward_;
  }
  _impl_.luckyaward_ = nullptr;
}
void CSRspBody::clear_applychannel() {
  if (GetArenaForAllocation() == nullptr && _impl_.applychannel_ != nullptr) {
    delete _impl_.applychannel_;
  }
  _impl_.applychannel_ = nullptr;
}
void CSRspBody::clear_obteaminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.obteaminfo_ != nullptr) {
    delete _impl_.obteaminfo_;
  }
  _impl_.obteaminfo_ = nullptr;
}
void CSRspBody::clear_getpvpservergroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpvpservergroup_ != nullptr) {
    delete _impl_.getpvpservergroup_;
  }
  _impl_.getpvpservergroup_ = nullptr;
}
void CSRspBody::clear_reportpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportpvpinfo_ != nullptr) {
    delete _impl_.reportpvpinfo_;
  }
  _impl_.reportpvpinfo_ = nullptr;
}
void CSRspBody::clear_chooseplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.chooseplayer_ != nullptr) {
    delete _impl_.chooseplayer_;
  }
  _impl_.chooseplayer_ = nullptr;
}
void CSRspBody::clear_pingtest() {
  if (GetArenaForAllocation() == nullptr && _impl_.pingtest_ != nullptr) {
    delete _impl_.pingtest_;
  }
  _impl_.pingtest_ = nullptr;
}
void CSRspBody::clear_reportregioninfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportregioninfo_ != nullptr) {
    delete _impl_.reportregioninfo_;
  }
  _impl_.reportregioninfo_ = nullptr;
}
void CSRspBody::clear_recalledplaeyr() {
  if (GetArenaForAllocation() == nullptr && _impl_.recalledplaeyr_ != nullptr) {
    delete _impl_.recalledplaeyr_;
  }
  _impl_.recalledplaeyr_ = nullptr;
}
void CSRspBody::clear_weblogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.weblogin_ != nullptr) {
    delete _impl_.weblogin_;
  }
  _impl_.weblogin_ = nullptr;
}
void CSRspBody::clear_invitecodereset() {
  if (GetArenaForAllocation() == nullptr && _impl_.invitecodereset_ != nullptr) {
    delete _impl_.invitecodereset_;
  }
  _impl_.invitecodereset_ = nullptr;
}
void CSRspBody::clear_recallreward() {
  if (GetArenaForAllocation() == nullptr && _impl_.recallreward_ != nullptr) {
    delete _impl_.recallreward_;
  }
  _impl_.recallreward_ = nullptr;
}
void CSRspBody::clear_switchtocommonmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchtocommonmatch_ != nullptr) {
    delete _impl_.switchtocommonmatch_;
  }
  _impl_.switchtocommonmatch_ = nullptr;
}
void CSRspBody::clear_switchmodeinteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchmodeinteam_ != nullptr) {
    delete _impl_.switchmodeinteam_;
  }
  _impl_.switchmodeinteam_ = nullptr;
}
void CSRspBody::clear_gettnroomstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.gettnroomstate_ != nullptr) {
    delete _impl_.gettnroomstate_;
  }
  _impl_.gettnroomstate_ = nullptr;
}
void CSRspBody::clear_workshopmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.workshopmatch_ != nullptr) {
    delete _impl_.workshopmatch_;
  }
  _impl_.workshopmatch_ = nullptr;
}
void CSRspBody::clear_buyworkshopticket() {
  if (GetArenaForAllocation() == nullptr && _impl_.buyworkshopticket_ != nullptr) {
    delete _impl_.buyworkshopticket_;
  }
  _impl_.buyworkshopticket_ = nullptr;
}
void CSRspBody::clear_favouriteworkshopmap() {
  if (GetArenaForAllocation() == nullptr && _impl_.favouriteworkshopmap_ != nullptr) {
    delete _impl_.favouriteworkshopmap_;
  }
  _impl_.favouriteworkshopmap_ = nullptr;
}
void CSRspBody::clear_shortcutmapsop() {
  if (GetArenaForAllocation() == nullptr && _impl_.shortcutmapsop_ != nullptr) {
    delete _impl_.shortcutmapsop_;
  }
  _impl_.shortcutmapsop_ = nullptr;
}
void CSRspBody::clear_playerstournamentinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerstournamentinfo_ != nullptr) {
    delete _impl_.playerstournamentinfo_;
  }
  _impl_.playerstournamentinfo_ = nullptr;
}
void CSRspBody::clear_scoreworkshopmap() {
  if (GetArenaForAllocation() == nullptr && _impl_.scoreworkshopmap_ != nullptr) {
    delete _impl_.scoreworkshopmap_;
  }
  _impl_.scoreworkshopmap_ = nullptr;
}
void CSRspBody::clear_mapsvisitedbyfriends() {
  if (GetArenaForAllocation() == nullptr && _impl_.mapsvisitedbyfriends_ != nullptr) {
    delete _impl_.mapsvisitedbyfriends_;
  }
  _impl_.mapsvisitedbyfriends_ = nullptr;
}
void CSRspBody::clear_verifyrealname() {
  if (GetArenaForAllocation() == nullptr && _impl_.verifyrealname_ != nullptr) {
    delete _impl_.verifyrealname_;
  }
  _impl_.verifyrealname_ = nullptr;
}
void CSRspBody::clear_fakepay() {
  if (GetArenaForAllocation() == nullptr && _impl_.fakepay_ != nullptr) {
    delete _impl_.fakepay_;
  }
  _impl_.fakepay_ = nullptr;
}
void CSRspBody::clear_guildcreate() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildcreate_ != nullptr) {
    delete _impl_.guildcreate_;
  }
  _impl_.guildcreate_ = nullptr;
}
void CSRspBody::clear_guildapply() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildapply_ != nullptr) {
    delete _impl_.guildapply_;
  }
  _impl_.guildapply_ = nullptr;
}
void CSRspBody::clear_guildhome() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildhome_ != nullptr) {
    delete _impl_.guildhome_;
  }
  _impl_.guildhome_ = nullptr;
}
void CSRspBody::clear_guildinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
}
void CSRspBody::clear_guildapprove() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildapprove_ != nullptr) {
    delete _impl_.guildapprove_;
  }
  _impl_.guildapprove_ = nullptr;
}
void CSRspBody::clear_guildrole() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrole_ != nullptr) {
    delete _impl_.guildrole_;
  }
  _impl_.guildrole_ = nullptr;
}
void CSRspBody::clear_guildmodify() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildmodify_ != nullptr) {
    delete _impl_.guildmodify_;
  }
  _impl_.guildmodify_ = nullptr;
}
void CSRspBody::clear_guildkickoff() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildkickoff_ != nullptr) {
    delete _impl_.guildkickoff_;
  }
  _impl_.guildkickoff_ = nullptr;
}
void CSRspBody::clear_guilddismiss() {
  if (GetArenaForAllocation() == nullptr && _impl_.guilddismiss_ != nullptr) {
    delete _impl_.guilddismiss_;
  }
  _impl_.guilddismiss_ = nullptr;
}
void CSRspBody::clear_guildexit() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildexit_ != nullptr) {
    delete _impl_.guildexit_;
  }
  _impl_.guildexit_ = nullptr;
}
void CSRspBody::clear_guildchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildchat_ != nullptr) {
    delete _impl_.guildchat_;
  }
  _impl_.guildchat_ = nullptr;
}
void CSRspBody::clear_guildlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildlist_ != nullptr) {
    delete _impl_.guildlist_;
  }
  _impl_.guildlist_ = nullptr;
}
void CSRspBody::clear_guildrecommendplayers() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrecommendplayers_ != nullptr) {
    delete _impl_.guildrecommendplayers_;
  }
  _impl_.guildrecommendplayers_ = nullptr;
}
void CSRspBody::clear_guildinvitelist() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvitelist_ != nullptr) {
    delete _impl_.guildinvitelist_;
  }
  _impl_.guildinvitelist_ = nullptr;
}
void CSRspBody::clear_guildinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvite_ != nullptr) {
    delete _impl_.guildinvite_;
  }
  _impl_.guildinvite_ = nullptr;
}
void CSRspBody::clear_guildrejectinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrejectinvite_ != nullptr) {
    delete _impl_.guildrejectinvite_;
  }
  _impl_.guildrejectinvite_ = nullptr;
}
void CSRspBody::clear_getvngcommentaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getvngcommentaward_ != nullptr) {
    delete _impl_.getvngcommentaward_;
  }
  _impl_.getvngcommentaward_ = nullptr;
}
void CSRspBody::clear_levelupchest() {
  if (GetArenaForAllocation() == nullptr && _impl_.levelupchest_ != nullptr) {
    delete _impl_.levelupchest_;
  }
  _impl_.levelupchest_ = nullptr;
}
void CSRspBody::clear_watchad() {
  if (GetArenaForAllocation() == nullptr && _impl_.watchad_ != nullptr) {
    delete _impl_.watchad_;
  }
  _impl_.watchad_ = nullptr;
}
void CSRspBody::clear_pstournamentroom() {
  if (GetArenaForAllocation() == nullptr && _impl_.pstournamentroom_ != nullptr) {
    delete _impl_.pstournamentroom_;
  }
  _impl_.pstournamentroom_ = nullptr;
}
void CSRspBody::clear_getadcumulateaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getadcumulateaward_ != nullptr) {
    delete _impl_.getadcumulateaward_;
  }
  _impl_.getadcumulateaward_ = nullptr;
}
void CSRspBody::clear_setmessengerpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.setmessengerpos_ != nullptr) {
    delete _impl_.setmessengerpos_;
  }
  _impl_.setmessengerpos_ = nullptr;
}
void CSRspBody::clear_antiaddictiontime() {
  if (GetArenaForAllocation() == nullptr && _impl_.antiaddictiontime_ != nullptr) {
    delete _impl_.antiaddictiontime_;
  }
  _impl_.antiaddictiontime_ = nullptr;
}
void CSRspBody::clear_cancelreconnect() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelreconnect_ != nullptr) {
    delete _impl_.cancelreconnect_;
  }
  _impl_.cancelreconnect_ = nullptr;
}
void CSRspBody::clear_reconnect() {
  if (GetArenaForAllocation() == nullptr && _impl_.reconnect_ != nullptr) {
    delete _impl_.reconnect_;
  }
  _impl_.reconnect_ = nullptr;
}
void CSRspBody::clear_passthrough() {
  if (GetArenaForAllocation() == nullptr && _impl_.passthrough_ != nullptr) {
    delete _impl_.passthrough_;
  }
  _impl_.passthrough_ = nullptr;
}
void CSRspBody::clear_visitplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.visitplayer_ != nullptr) {
    delete _impl_.visitplayer_;
  }
  _impl_.visitplayer_ = nullptr;
}
void CSRspBody::clear_leavegameearly() {
  if (GetArenaForAllocation() == nullptr && _impl_.leavegameearly_ != nullptr) {
    delete _impl_.leavegameearly_;
  }
  _impl_.leavegameearly_ = nullptr;
}
void CSRspBody::clear_gdcommonbin() {
  if (GetArenaForAllocation() == nullptr && _impl_.gdcommonbin_ != nullptr) {
    delete _impl_.gdcommonbin_;
  }
  _impl_.gdcommonbin_ = nullptr;
}
void CSRspBody::clear_gdbindata() {
  if (GetArenaForAllocation() == nullptr && _impl_.gdbindata_ != nullptr) {
    delete _impl_.gdbindata_;
  }
  _impl_.gdbindata_ = nullptr;
}
void CSRspBody::clear_battlecampresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.battlecampresult_ != nullptr) {
    delete _impl_.battlecampresult_;
  }
  _impl_.battlecampresult_ = nullptr;
}
void CSRspBody::clear_autobattleop() {
  if (GetArenaForAllocation() == nullptr && _impl_.autobattleop_ != nullptr) {
    delete _impl_.autobattleop_;
  }
  _impl_.autobattleop_ = nullptr;
}
void CSRspBody::clear_restrictuser() {
  if (GetArenaForAllocation() == nullptr && _impl_.restrictuser_ != nullptr) {
    delete _impl_.restrictuser_;
  }
  _impl_.restrictuser_ = nullptr;
}
void CSRspBody::clear_equipselectrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.equipselectrate_ != nullptr) {
    delete _impl_.equipselectrate_;
  }
  _impl_.equipselectrate_ = nullptr;
}
void CSRspBody::clear_reportabsent() {
  if (GetArenaForAllocation() == nullptr && _impl_.reportabsent_ != nullptr) {
    delete _impl_.reportabsent_;
  }
  _impl_.reportabsent_ = nullptr;
}
void CSRspBody::clear_recommendweek() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendweek_ != nullptr) {
    delete _impl_.recommendweek_;
  }
  _impl_.recommendweek_ = nullptr;
}
void CSRspBody::clear_recommendofficial() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendofficial_ != nullptr) {
    delete _impl_.recommendofficial_;
  }
  _impl_.recommendofficial_ = nullptr;
}
void CSRspBody::clear_recommendlatest() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendlatest_ != nullptr) {
    delete _impl_.recommendlatest_;
  }
  _impl_.recommendlatest_ = nullptr;
}
void CSRspBody::clear_recommendhistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendhistory_ != nullptr) {
    delete _impl_.recommendhistory_;
  }
  _impl_.recommendhistory_ = nullptr;
}
void CSRspBody::clear_recommendcollect() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendcollect_ != nullptr) {
    delete _impl_.recommendcollect_;
  }
  _impl_.recommendcollect_ = nullptr;
}
void CSRspBody::clear_recommendset() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendset_ != nullptr) {
    delete _impl_.recommendset_;
  }
  _impl_.recommendset_ = nullptr;
}
void CSRspBody::clear_recommendgetcollection() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendgetcollection_ != nullptr) {
    delete _impl_.recommendgetcollection_;
  }
  _impl_.recommendgetcollection_ = nullptr;
}
void CSRspBody::clear_recommendequip() {
  if (GetArenaForAllocation() == nullptr && _impl_.recommendequip_ != nullptr) {
    delete _impl_.recommendequip_;
  }
  _impl_.recommendequip_ = nullptr;
}
void CSRspBody::clear_logincancel() {
  if (GetArenaForAllocation() == nullptr && _impl_.logincancel_ != nullptr) {
    delete _impl_.logincancel_;
  }
  _impl_.logincancel_ = nullptr;
}
void CSRspBody::clear_convertdebris() {
  if (GetArenaForAllocation() == nullptr && _impl_.convertdebris_ != nullptr) {
    delete _impl_.convertdebris_;
  }
  _impl_.convertdebris_ = nullptr;
}
void CSRspBody::clear_protectioncard() {
  if (GetArenaForAllocation() == nullptr && _impl_.protectioncard_ != nullptr) {
    delete _impl_.protectioncard_;
  }
  _impl_.protectioncard_ = nullptr;
}
void CSRspBody::clear_usepassportcard() {
  if (GetArenaForAllocation() == nullptr && _impl_.usepassportcard_ != nullptr) {
    delete _impl_.usepassportcard_;
  }
  _impl_.usepassportcard_ = nullptr;
}
void CSRspBody::clear_setmedal() {
  if (GetArenaForAllocation() == nullptr && _impl_.setmedal_ != nullptr) {
    delete _impl_.setmedal_;
  }
  _impl_.setmedal_ = nullptr;
}
void CSRspBody::clear_unsetmedal() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetmedal_ != nullptr) {
    delete _impl_.unsetmedal_;
  }
  _impl_.unsetmedal_ = nullptr;
}
void CSRspBody::clear_playermedals() {
  if (GetArenaForAllocation() == nullptr && _impl_.playermedals_ != nullptr) {
    delete _impl_.playermedals_;
  }
  _impl_.playermedals_ = nullptr;
}
void CSRspBody::clear_updatehotdot() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatehotdot_ != nullptr) {
    delete _impl_.updatehotdot_;
  }
  _impl_.updatehotdot_ = nullptr;
}
void CSRspBody::clear_queryhotdot() {
  if (GetArenaForAllocation() == nullptr && _impl_.queryhotdot_ != nullptr) {
    delete _impl_.queryhotdot_;
  }
  _impl_.queryhotdot_ = nullptr;
}
void CSRspBody::clear_setcache() {
  if (GetArenaForAllocation() == nullptr && _impl_.setcache_ != nullptr) {
    delete _impl_.setcache_;
  }
  _impl_.setcache_ = nullptr;
}
void CSRspBody::clear_getcache() {
  if (GetArenaForAllocation() == nullptr && _impl_.getcache_ != nullptr) {
    delete _impl_.getcache_;
  }
  _impl_.getcache_ = nullptr;
}
void CSRspBody::clear_buychallengecount() {
  if (GetArenaForAllocation() == nullptr && _impl_.buychallengecount_ != nullptr) {
    delete _impl_.buychallengecount_;
  }
  _impl_.buychallengecount_ = nullptr;
}
void CSRspBody::clear_getpverank() {
  if (GetArenaForAllocation() == nullptr && _impl_.getpverank_ != nullptr) {
    delete _impl_.getpverank_;
  }
  _impl_.getpverank_ = nullptr;
}
void CSRspBody::clear_authaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.authaccount_ != nullptr) {
    delete _impl_.authaccount_;
  }
  _impl_.authaccount_ = nullptr;
}
void CSRspBody::clear_unbindaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.unbindaccount_ != nullptr) {
    delete _impl_.unbindaccount_;
  }
  _impl_.unbindaccount_ = nullptr;
}
void CSRspBody::clear_bagtoitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.bagtoitem_ != nullptr) {
    delete _impl_.bagtoitem_;
  }
  _impl_.bagtoitem_ = nullptr;
}
void CSRspBody::clear_identifyitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.identifyitem_ != nullptr) {
    delete _impl_.identifyitem_;
  }
  _impl_.identifyitem_ = nullptr;
}
void CSRspBody::clear_insetitemaffix() {
  if (GetArenaForAllocation() == nullptr && _impl_.insetitemaffix_ != nullptr) {
    delete _impl_.insetitemaffix_;
  }
  _impl_.insetitemaffix_ = nullptr;
}
void CSRspBody::clear_unsetitemaffix() {
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitemaffix_ != nullptr) {
    delete _impl_.unsetitemaffix_;
  }
  _impl_.unsetitemaffix_ = nullptr;
}
void CSRspBody::clear_setdefaultattributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.setdefaultattributes_ != nullptr) {
    delete _impl_.setdefaultattributes_;
  }
  _impl_.setdefaultattributes_ = nullptr;
}
void CSRspBody::clear_checkcancel() {
  if (GetArenaForAllocation() == nullptr && _impl_.checkcancel_ != nullptr) {
    delete _impl_.checkcancel_;
  }
  _impl_.checkcancel_ = nullptr;
}
void CSRspBody::clear_cancelaccount() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelaccount_ != nullptr) {
    delete _impl_.cancelaccount_;
  }
  _impl_.cancelaccount_ = nullptr;
}
void CSRspBody::clear_oauthapp() {
  if (GetArenaForAllocation() == nullptr && _impl_.oauthapp_ != nullptr) {
    delete _impl_.oauthapp_;
  }
  _impl_.oauthapp_ = nullptr;
}
void CSRspBody::clear_selfnumrankdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.selfnumrankdata_ != nullptr) {
    delete _impl_.selfnumrankdata_;
  }
  _impl_.selfnumrankdata_ = nullptr;
}
void CSRspBody::clear_updatecardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroup_ != nullptr) {
    delete _impl_.updatecardgroup_;
  }
  _impl_.updatecardgroup_ = nullptr;
}
void CSRspBody::clear_updatecardgroupname() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupname_ != nullptr) {
    delete _impl_.updatecardgroupname_;
  }
  _impl_.updatecardgroupname_ = nullptr;
}
void CSRspBody::clear_buypvebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.buypvebuff_ != nullptr) {
    delete _impl_.buypvebuff_;
  }
  _impl_.buypvebuff_ = nullptr;
}
void CSRspBody::clear_setcardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.setcardgroup_ != nullptr) {
    delete _impl_.setcardgroup_;
  }
  _impl_.setcardgroup_ = nullptr;
}
void CSRspBody::clear_buypvechesstemplate() {
  if (GetArenaForAllocation() == nullptr && _impl_.buypvechesstemplate_ != nullptr) {
    delete _impl_.buypvechesstemplate_;
  }
  _impl_.buypvechesstemplate_ = nullptr;
}
void CSRspBody::clear_pveunlockchesstemplate() {
  if (GetArenaForAllocation() == nullptr && _impl_.pveunlockchesstemplate_ != nullptr) {
    delete _impl_.pveunlockchesstemplate_;
  }
  _impl_.pveunlockchesstemplate_ = nullptr;
}
void CSRspBody::clear_pvesetteamdebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvesetteamdebuff_ != nullptr) {
    delete _impl_.pvesetteamdebuff_;
  }
  _impl_.pvesetteamdebuff_ = nullptr;
}
void CSRspBody::clear_chosecardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.chosecardgroup_ != nullptr) {
    delete _impl_.chosecardgroup_;
  }
  _impl_.chosecardgroup_ = nullptr;
}
void CSRspBody::clear_removeovertimebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeovertimebuff_ != nullptr) {
    delete _impl_.removeovertimebuff_;
  }
  _impl_.removeovertimebuff_ = nullptr;
}
void CSRspBody::clear_updatenewcardgroupsign() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatenewcardgroupsign_ != nullptr) {
    delete _impl_.updatenewcardgroupsign_;
  }
  _impl_.updatenewcardgroupsign_ = nullptr;
}
void CSRspBody::clear_tdgetonhookaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdgetonhookaward_ != nullptr) {
    delete _impl_.tdgetonhookaward_;
  }
  _impl_.tdgetonhookaward_ = nullptr;
}
void CSRspBody::clear_tddraw() {
  if (GetArenaForAllocation() == nullptr && _impl_.tddraw_ != nullptr) {
    delete _impl_.tddraw_;
  }
  _impl_.tddraw_ = nullptr;
}
void CSRspBody::clear_tdbuycard() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdbuycard_ != nullptr) {
    delete _impl_.tdbuycard_;
  }
  _impl_.tdbuycard_ = nullptr;
}
void CSRspBody::clear_tdsetcardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdsetcardgroup_ != nullptr) {
    delete _impl_.tdsetcardgroup_;
  }
  _impl_.tdsetcardgroup_ = nullptr;
}
void CSRspBody::clear_tdlevelup() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdlevelup_ != nullptr) {
    delete _impl_.tdlevelup_;
  }
  _impl_.tdlevelup_ = nullptr;
}
void CSRspBody::clear_tdequip() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdequip_ != nullptr) {
    delete _impl_.tdequip_;
  }
  _impl_.tdequip_ = nullptr;
}
void CSRspBody::clear_mentorupdatesetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorupdatesetting_ != nullptr) {
    delete _impl_.mentorupdatesetting_;
  }
  _impl_.mentorupdatesetting_ = nullptr;
}
void CSRspBody::clear_mentorinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinvite_ != nullptr) {
    delete _impl_.mentorinvite_;
  }
  _impl_.mentorinvite_ = nullptr;
}
void CSRspBody::clear_mentorconfirminvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorconfirminvite_ != nullptr) {
    delete _impl_.mentorconfirminvite_;
  }
  _impl_.mentorconfirminvite_ = nullptr;
}
void CSRspBody::clear_mentorrecommendlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrecommendlist_ != nullptr) {
    delete _impl_.mentorrecommendlist_;
  }
  _impl_.mentorrecommendlist_ = nullptr;
}
void CSRspBody::clear_mentorgettaskaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgettaskaward_ != nullptr) {
    delete _impl_.mentorgettaskaward_;
  }
  _impl_.mentorgettaskaward_ = nullptr;
}
void CSRspBody::clear_mentorgraduate() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgraduate_ != nullptr) {
    delete _impl_.mentorgraduate_;
  }
  _impl_.mentorgraduate_ = nullptr;
}
void CSRspBody::clear_mentorrelieverelation() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrelieverelation_ != nullptr) {
    delete _impl_.mentorrelieverelation_;
  }
  _impl_.mentorrelieverelation_ = nullptr;
}
void CSRspBody::clear_getmentorinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmentorinfo_ != nullptr) {
    delete _impl_.getmentorinfo_;
  }
  _impl_.getmentorinfo_ = nullptr;
}
void CSRspBody::clear_mentorgetinvitemsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgetinvitemsg_ != nullptr) {
    delete _impl_.mentorgetinvitemsg_;
  }
  _impl_.mentorgetinvitemsg_ = nullptr;
}
void CSRspBody::clear_teammsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.teammsg_ != nullptr) {
    delete _impl_.teammsg_;
  }
  _impl_.teammsg_ = nullptr;
}
void CSRspBody::clear_chatmsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.chatmsg_ != nullptr) {
    delete _impl_.chatmsg_;
  }
  _impl_.chatmsg_ = nullptr;
}
void CSRspBody::clear_channelchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.channelchat_ != nullptr) {
    delete _impl_.channelchat_;
  }
  _impl_.channelchat_ = nullptr;
}
void CSRspBody::clear_updatecardgroupbetter() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupbetter_ != nullptr) {
    delete _impl_.updatecardgroupbetter_;
  }
  _impl_.updatecardgroupbetter_ = nullptr;
}
void CSRspBody::clear_updatecardgroupsetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupsetting_ != nullptr) {
    delete _impl_.updatecardgroupsetting_;
  }
  _impl_.updatecardgroupsetting_ = nullptr;
}
void CSRspBody::clear_setauctionname() {
  if (GetArenaForAllocation() == nullptr && _impl_.setauctionname_ != nullptr) {
    delete _impl_.setauctionname_;
  }
  _impl_.setauctionname_ = nullptr;
}
void CSRspBody::clear_setauctionremark() {
  if (GetArenaForAllocation() == nullptr && _impl_.setauctionremark_ != nullptr) {
    delete _impl_.setauctionremark_;
  }
  _impl_.setauctionremark_ = nullptr;
}
void CSRspBody::clear_getbalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.getbalance_ != nullptr) {
    delete _impl_.getbalance_;
  }
  _impl_.getbalance_ = nullptr;
}
void CSRspBody::clear_rechargebalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.rechargebalance_ != nullptr) {
    delete _impl_.rechargebalance_;
  }
  _impl_.rechargebalance_ = nullptr;
}
void CSRspBody::clear_withdrawbalance() {
  if (GetArenaForAllocation() == nullptr && _impl_.withdrawbalance_ != nullptr) {
    delete _impl_.withdrawbalance_;
  }
  _impl_.withdrawbalance_ = nullptr;
}
void CSRspBody::clear_personalrecommendmall() {
  if (GetArenaForAllocation() == nullptr && _impl_.personalrecommendmall_ != nullptr) {
    delete _impl_.personalrecommendmall_;
  }
  _impl_.personalrecommendmall_ = nullptr;
}
void CSRspBody::clear_getmedalchestaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.getmedalchestaward_ != nullptr) {
    delete _impl_.getmedalchestaward_;
  }
  _impl_.getmedalchestaward_ = nullptr;
}
void CSRspBody::clear_setitemautouse() {
  if (GetArenaForAllocation() == nullptr && _impl_.setitemautouse_ != nullptr) {
    delete _impl_.setitemautouse_;
  }
  _impl_.setitemautouse_ = nullptr;
}
CSRspBody::CSRspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspBody)
}
CSRspBody::CSRspBody(const CSRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errmsg_){}
    , decltype(_impl_.heart_){nullptr}
    , decltype(_impl_.login_){nullptr}
    , decltype(_impl_.versioncheck_){nullptr}
    , decltype(_impl_.resourceversioncheck_){nullptr}
    , decltype(_impl_.applyhallserver_){nullptr}
    , decltype(_impl_.getnumrank_){nullptr}
    , decltype(_impl_.worldchat_){nullptr}
    , decltype(_impl_.playersbaseinfo_){nullptr}
    , decltype(_impl_.playerdetailinfo_){nullptr}
    , decltype(_impl_.readmail_){nullptr}
    , decltype(_impl_.getmailaward_){nullptr}
    , decltype(_impl_.buyegg_){nullptr}
    , decltype(_impl_.usernameset_){nullptr}
    , decltype(_impl_.usernamerandom_){nullptr}
    , decltype(_impl_.headpicset_){nullptr}
    , decltype(_impl_.dresschessplayer_){nullptr}
    , decltype(_impl_.dressscene_){nullptr}
    , decltype(_impl_.pvplogin_){nullptr}
    , decltype(_impl_.pvpend_){nullptr}
    , decltype(_impl_.playerfinish_){nullptr}
    , decltype(_impl_.playerquit_){nullptr}
    , decltype(_impl_.sellitem_){nullptr}
    , decltype(_impl_.getevalaward_){nullptr}
    , decltype(_impl_.usechessplayer_){nullptr}
    , decltype(_impl_.guidreport_){nullptr}
    , decltype(_impl_.getcodeaward_){nullptr}
    , decltype(_impl_.roundreport_){nullptr}
    , decltype(_impl_.loadingprogress_){nullptr}
    , decltype(_impl_.pvpchat_){nullptr}
    , decltype(_impl_.chesscombine_){nullptr}
    , decltype(_impl_.expose_){nullptr}
    , decltype(_impl_.applyorderid_){nullptr}
    , decltype(_impl_.reportorderinfo_){nullptr}
    , decltype(_impl_.setitem_){nullptr}
    , decltype(_impl_.unsetitem_){nullptr}
    , decltype(_impl_.randomitem_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.setchessplayer_){nullptr}
    , decltype(_impl_.unsetchessplayer_){nullptr}
    , decltype(_impl_.getfanslist_){nullptr}
    , decltype(_impl_.followplayer_){nullptr}
    , decltype(_impl_.unfollowplayer_){nullptr}
    , decltype(_impl_.playersstatusinfo_){nullptr}
    , decltype(_impl_.invitejointeam_){nullptr}
    , decltype(_impl_.jointeam_){nullptr}
    , decltype(_impl_.reportpayresponse_){nullptr}
    , decltype(_impl_.rejectjointeam_){nullptr}
    , decltype(_impl_.shieldchat_){nullptr}
    , decltype(_impl_.buypassportlevel_){nullptr}
    , decltype(_impl_.upgradepassport_){nullptr}
    , decltype(_impl_.getpassportlevelaward_){nullptr}
    , decltype(_impl_.getpassporttaskaward_){nullptr}
    , decltype(_impl_.telbook_){nullptr}
    , decltype(_impl_.activatepassport_){nullptr}
    , decltype(_impl_.rankseasoneval_){nullptr}
    , decltype(_impl_.bindaccount_){nullptr}
    , decltype(_impl_.incadsshowcount_){nullptr}
    , decltype(_impl_.usebonuscard_){nullptr}
    , decltype(_impl_.getseasonaward_){nullptr}
    , decltype(_impl_.getalphaactivityaward_){nullptr}
    , decltype(_impl_.getlanguagedata_){nullptr}
    , decltype(_impl_.getactivityaward_){nullptr}
    , decltype(_impl_.getactivitydata_){nullptr}
    , decltype(_impl_.sendsms_){nullptr}
    , decltype(_impl_.getmeleeaward_){nullptr}
    , decltype(_impl_.addaitoteam_){nullptr}
    , decltype(_impl_.share_){nullptr}
    , decltype(_impl_.skipinterface_){nullptr}
    , decltype(_impl_.teamgame_){nullptr}
    , decltype(_impl_.setteammode_){nullptr}
    , decltype(_impl_.historypvpshowpermission_){nullptr}
    , decltype(_impl_.searchteam_){nullptr}
    , decltype(_impl_.applychat_){nullptr}
    , decltype(_impl_.chatlogin_){nullptr}
    , decltype(_impl_.probenetdelay_){nullptr}
    , decltype(_impl_.geteggs_){nullptr}
    , decltype(_impl_.buygoods_){nullptr}
    , decltype(_impl_.exchangepassportgoods_){nullptr}
    , decltype(_impl_.usepassporttaskcard_){nullptr}
    , decltype(_impl_.openrandchest_){nullptr}
    , decltype(_impl_.egglottery_){nullptr}
    , decltype(_impl_.querydiamondbalance_){nullptr}
    , decltype(_impl_.useitem_){nullptr}
    , decltype(_impl_.useexperiencecard_){nullptr}
    , decltype(_impl_.randtargetitem_){nullptr}
    , decltype(_impl_.addblacklist_){nullptr}
    , decltype(_impl_.removeblacklist_){nullptr}
    , decltype(_impl_.reportplayerbirth_){nullptr}
    , decltype(_impl_.reportinfoinput_){nullptr}
    , decltype(_impl_.sendverificationcode_){nullptr}
    , decltype(_impl_.bindphonenumber_){nullptr}
    , decltype(_impl_.worldinvite_){nullptr}
    , decltype(_impl_.removeexpireitem_){nullptr}
    , decltype(_impl_.getmallgoods_){nullptr}
    , decltype(_impl_.buymallgoods_){nullptr}
    , decltype(_impl_.bindsharingcode_){nullptr}
    , decltype(_impl_.wxblessbag_){nullptr}
    , decltype(_impl_.updatefriendsingame_){nullptr}
    , decltype(_impl_.sharereward_){nullptr}
    , decltype(_impl_.allfightinfo_){nullptr}
    , decltype(_impl_.getoldplayer_){nullptr}
    , decltype(_impl_.bindoldplayer_){nullptr}
    , decltype(_impl_.sendverificationcodewithcheckredis_){nullptr}
    , decltype(_impl_.reportsetting_){nullptr}
    , decltype(_impl_.antidata_){nullptr}
    , decltype(_impl_.tlogdata_){nullptr}
    , decltype(_impl_.daysign_){nullptr}
    , decltype(_impl_.dayfitavoid_){nullptr}
    , decltype(_impl_.sharecountaward_){nullptr}
    , decltype(_impl_.realationstar_){nullptr}
    , decltype(_impl_.getrealationstarinvitesucc_){nullptr}
    , decltype(_impl_.getrealationstar_){nullptr}
    , decltype(_impl_.rspactrecord_){nullptr}
    , decltype(_impl_.joinvoiceteam_){nullptr}
    , decltype(_impl_.joinvoicepvp_){nullptr}
    , decltype(_impl_.joinvoicecamp_){nullptr}
    , decltype(_impl_.usercountryset_){nullptr}
    , decltype(_impl_.observe_){nullptr}
    , decltype(_impl_.getrecommendpvp_){nullptr}
    , decltype(_impl_.observelogin_){nullptr}
    , decltype(_impl_.quitobserve_){nullptr}
    , decltype(_impl_.getobserveinfo_){nullptr}
    , decltype(_impl_.freeflow_){nullptr}
    , decltype(_impl_.setpushtoken_){nullptr}
    , decltype(_impl_.tlogevent_){nullptr}
    , decltype(_impl_.wxvvipaward_){nullptr}
    , decltype(_impl_.relationstarwx_){nullptr}
    , decltype(_impl_.sendwxredpacket_){nullptr}
    , decltype(_impl_.recvwxredpacket_){nullptr}
    , decltype(_impl_.wxredpktlike_){nullptr}
    , decltype(_impl_.wxredpktrank_){nullptr}
    , decltype(_impl_.setobserveprivilege_){nullptr}
    , decltype(_impl_.presetfastchat_){nullptr}
    , decltype(_impl_.changeslotteam_){nullptr}
    , decltype(_impl_.changesubmodeteam_){nullptr}
    , decltype(_impl_.confirmchangeslotteam_){nullptr}
    , decltype(_impl_.pvproundend_){nullptr}
    , decltype(_impl_.pvp_){nullptr}
    , decltype(_impl_.teamready_){nullptr}
    , decltype(_impl_.bindoldbusinessplayer_){nullptr}
    , decltype(_impl_.translate_){nullptr}
    , decltype(_impl_.submitquestionnaire_){nullptr}
    , decltype(_impl_.cancelchangeslot_){nullptr}
    , decltype(_impl_.setchessskin_){nullptr}
    , decltype(_impl_.unsetchessskin_){nullptr}
    , decltype(_impl_.compose_){nullptr}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.offhelpreddot_){nullptr}
    , decltype(_impl_.changelanguage_){nullptr}
    , decltype(_impl_.setprovince_){nullptr}
    , decltype(_impl_.longyuanvoice_){nullptr}
    , decltype(_impl_.enrolltournament_){nullptr}
    , decltype(_impl_.jointournamentroom_){nullptr}
    , decltype(_impl_.tournamentpointaward_){nullptr}
    , decltype(_impl_.getenrollplayers_){nullptr}
    , decltype(_impl_.dealwebmail_){nullptr}
    , decltype(_impl_.challengeagain_){nullptr}
    , decltype(_impl_.historychat_){nullptr}
    , decltype(_impl_.setfriendinvisible_){nullptr}
    , decltype(_impl_.getobserveaward_){nullptr}
    , decltype(_impl_.inviteobserve_){nullptr}
    , decltype(_impl_.rejectobserve_){nullptr}
    , decltype(_impl_.gettxplayer_){nullptr}
    , decltype(_impl_.getthirdpvpinfo_){nullptr}
    , decltype(_impl_.markplayerguide_){nullptr}
    , decltype(_impl_.chessskinclicked_){nullptr}
    , decltype(_impl_.queryps4entitlements_){nullptr}
    , decltype(_impl_.actdaysign_){nullptr}
    , decltype(_impl_.havethirdpvpinfo_){nullptr}
    , decltype(_impl_.activitymall_){nullptr}
    , decltype(_impl_.psonly_){nullptr}
    , decltype(_impl_.changechanneltype_){nullptr}
    , decltype(_impl_.customcardopt_){nullptr}
    , decltype(_impl_.championhistory_){nullptr}
    , decltype(_impl_.tournamentlasttoprank_){nullptr}
    , decltype(_impl_.bigwinnerdailyaward_){nullptr}
    , decltype(_impl_.bigwinnerscorehistory_){nullptr}
    , decltype(_impl_.smeltitem_){nullptr}
    , decltype(_impl_.pveuptalentlevel_){nullptr}
    , decltype(_impl_.luckyaward_){nullptr}
    , decltype(_impl_.applychannel_){nullptr}
    , decltype(_impl_.obteaminfo_){nullptr}
    , decltype(_impl_.getpvpservergroup_){nullptr}
    , decltype(_impl_.reportpvpinfo_){nullptr}
    , decltype(_impl_.chooseplayer_){nullptr}
    , decltype(_impl_.pingtest_){nullptr}
    , decltype(_impl_.reportregioninfo_){nullptr}
    , decltype(_impl_.recalledplaeyr_){nullptr}
    , decltype(_impl_.weblogin_){nullptr}
    , decltype(_impl_.invitecodereset_){nullptr}
    , decltype(_impl_.recallreward_){nullptr}
    , decltype(_impl_.switchtocommonmatch_){nullptr}
    , decltype(_impl_.switchmodeinteam_){nullptr}
    , decltype(_impl_.gettnroomstate_){nullptr}
    , decltype(_impl_.workshopmatch_){nullptr}
    , decltype(_impl_.buyworkshopticket_){nullptr}
    , decltype(_impl_.favouriteworkshopmap_){nullptr}
    , decltype(_impl_.shortcutmapsop_){nullptr}
    , decltype(_impl_.playerstournamentinfo_){nullptr}
    , decltype(_impl_.scoreworkshopmap_){nullptr}
    , decltype(_impl_.mapsvisitedbyfriends_){nullptr}
    , decltype(_impl_.verifyrealname_){nullptr}
    , decltype(_impl_.fakepay_){nullptr}
    , decltype(_impl_.guildcreate_){nullptr}
    , decltype(_impl_.guildapply_){nullptr}
    , decltype(_impl_.guildhome_){nullptr}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.guildapprove_){nullptr}
    , decltype(_impl_.guildrole_){nullptr}
    , decltype(_impl_.guildmodify_){nullptr}
    , decltype(_impl_.guildkickoff_){nullptr}
    , decltype(_impl_.guilddismiss_){nullptr}
    , decltype(_impl_.guildexit_){nullptr}
    , decltype(_impl_.guildchat_){nullptr}
    , decltype(_impl_.guildlist_){nullptr}
    , decltype(_impl_.guildrecommendplayers_){nullptr}
    , decltype(_impl_.guildinvitelist_){nullptr}
    , decltype(_impl_.guildinvite_){nullptr}
    , decltype(_impl_.guildrejectinvite_){nullptr}
    , decltype(_impl_.getvngcommentaward_){nullptr}
    , decltype(_impl_.levelupchest_){nullptr}
    , decltype(_impl_.watchad_){nullptr}
    , decltype(_impl_.pstournamentroom_){nullptr}
    , decltype(_impl_.getadcumulateaward_){nullptr}
    , decltype(_impl_.setmessengerpos_){nullptr}
    , decltype(_impl_.antiaddictiontime_){nullptr}
    , decltype(_impl_.cancelreconnect_){nullptr}
    , decltype(_impl_.reconnect_){nullptr}
    , decltype(_impl_.passthrough_){nullptr}
    , decltype(_impl_.visitplayer_){nullptr}
    , decltype(_impl_.leavegameearly_){nullptr}
    , decltype(_impl_.gdcommonbin_){nullptr}
    , decltype(_impl_.gdbindata_){nullptr}
    , decltype(_impl_.battlecampresult_){nullptr}
    , decltype(_impl_.autobattleop_){nullptr}
    , decltype(_impl_.restrictuser_){nullptr}
    , decltype(_impl_.equipselectrate_){nullptr}
    , decltype(_impl_.reportabsent_){nullptr}
    , decltype(_impl_.recommendweek_){nullptr}
    , decltype(_impl_.recommendofficial_){nullptr}
    , decltype(_impl_.recommendlatest_){nullptr}
    , decltype(_impl_.recommendhistory_){nullptr}
    , decltype(_impl_.recommendcollect_){nullptr}
    , decltype(_impl_.recommendset_){nullptr}
    , decltype(_impl_.recommendgetcollection_){nullptr}
    , decltype(_impl_.recommendequip_){nullptr}
    , decltype(_impl_.logincancel_){nullptr}
    , decltype(_impl_.convertdebris_){nullptr}
    , decltype(_impl_.protectioncard_){nullptr}
    , decltype(_impl_.usepassportcard_){nullptr}
    , decltype(_impl_.setmedal_){nullptr}
    , decltype(_impl_.unsetmedal_){nullptr}
    , decltype(_impl_.playermedals_){nullptr}
    , decltype(_impl_.updatehotdot_){nullptr}
    , decltype(_impl_.queryhotdot_){nullptr}
    , decltype(_impl_.setcache_){nullptr}
    , decltype(_impl_.getcache_){nullptr}
    , decltype(_impl_.buychallengecount_){nullptr}
    , decltype(_impl_.getpverank_){nullptr}
    , decltype(_impl_.authaccount_){nullptr}
    , decltype(_impl_.unbindaccount_){nullptr}
    , decltype(_impl_.bagtoitem_){nullptr}
    , decltype(_impl_.identifyitem_){nullptr}
    , decltype(_impl_.insetitemaffix_){nullptr}
    , decltype(_impl_.unsetitemaffix_){nullptr}
    , decltype(_impl_.setdefaultattributes_){nullptr}
    , decltype(_impl_.checkcancel_){nullptr}
    , decltype(_impl_.cancelaccount_){nullptr}
    , decltype(_impl_.oauthapp_){nullptr}
    , decltype(_impl_.selfnumrankdata_){nullptr}
    , decltype(_impl_.updatecardgroup_){nullptr}
    , decltype(_impl_.updatecardgroupname_){nullptr}
    , decltype(_impl_.buypvebuff_){nullptr}
    , decltype(_impl_.setcardgroup_){nullptr}
    , decltype(_impl_.buypvechesstemplate_){nullptr}
    , decltype(_impl_.pveunlockchesstemplate_){nullptr}
    , decltype(_impl_.pvesetteamdebuff_){nullptr}
    , decltype(_impl_.chosecardgroup_){nullptr}
    , decltype(_impl_.removeovertimebuff_){nullptr}
    , decltype(_impl_.updatenewcardgroupsign_){nullptr}
    , decltype(_impl_.tdgetonhookaward_){nullptr}
    , decltype(_impl_.tddraw_){nullptr}
    , decltype(_impl_.tdbuycard_){nullptr}
    , decltype(_impl_.tdsetcardgroup_){nullptr}
    , decltype(_impl_.tdlevelup_){nullptr}
    , decltype(_impl_.tdequip_){nullptr}
    , decltype(_impl_.mentorupdatesetting_){nullptr}
    , decltype(_impl_.mentorinvite_){nullptr}
    , decltype(_impl_.mentorconfirminvite_){nullptr}
    , decltype(_impl_.mentorrecommendlist_){nullptr}
    , decltype(_impl_.mentorgettaskaward_){nullptr}
    , decltype(_impl_.mentorgraduate_){nullptr}
    , decltype(_impl_.mentorrelieverelation_){nullptr}
    , decltype(_impl_.getmentorinfo_){nullptr}
    , decltype(_impl_.mentorgetinvitemsg_){nullptr}
    , decltype(_impl_.teammsg_){nullptr}
    , decltype(_impl_.chatmsg_){nullptr}
    , decltype(_impl_.channelchat_){nullptr}
    , decltype(_impl_.updatecardgroupbetter_){nullptr}
    , decltype(_impl_.updatecardgroupsetting_){nullptr}
    , decltype(_impl_.setauctionname_){nullptr}
    , decltype(_impl_.setauctionremark_){nullptr}
    , decltype(_impl_.getbalance_){nullptr}
    , decltype(_impl_.rechargebalance_){nullptr}
    , decltype(_impl_.withdrawbalance_){nullptr}
    , decltype(_impl_.personalrecommendmall_){nullptr}
    , decltype(_impl_.getmedalchestaward_){nullptr}
    , decltype(_impl_.setitemautouse_){nullptr}
    , decltype(_impl_.seq_){}
    , decltype(_impl_.errcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_heart()) {
    _this->_impl_.heart_ = new ::msg::CSRspHeart(*from._impl_.heart_);
  }
  if (from._internal_has_login()) {
    _this->_impl_.login_ = new ::msg::CSRspLogin(*from._impl_.login_);
  }
  if (from._internal_has_versioncheck()) {
    _this->_impl_.versioncheck_ = new ::msg::CSRspVersionCheck(*from._impl_.versioncheck_);
  }
  if (from._internal_has_resourceversioncheck()) {
    _this->_impl_.resourceversioncheck_ = new ::msg::CSRspResourceVersionCheck(*from._impl_.resourceversioncheck_);
  }
  if (from._internal_has_applyhallserver()) {
    _this->_impl_.applyhallserver_ = new ::msg::CSRspApplyHallServer(*from._impl_.applyhallserver_);
  }
  if (from._internal_has_getnumrank()) {
    _this->_impl_.getnumrank_ = new ::msg::CSRspGetNumRank(*from._impl_.getnumrank_);
  }
  if (from._internal_has_worldchat()) {
    _this->_impl_.worldchat_ = new ::msg::CSRspWorldChat(*from._impl_.worldchat_);
  }
  if (from._internal_has_playersbaseinfo()) {
    _this->_impl_.playersbaseinfo_ = new ::msg::CSRspPlayersBaseInfo(*from._impl_.playersbaseinfo_);
  }
  if (from._internal_has_playerdetailinfo()) {
    _this->_impl_.playerdetailinfo_ = new ::msg::CSRspPlayerDetailInfo(*from._impl_.playerdetailinfo_);
  }
  if (from._internal_has_readmail()) {
    _this->_impl_.readmail_ = new ::msg::CSRspReadMail(*from._impl_.readmail_);
  }
  if (from._internal_has_getmailaward()) {
    _this->_impl_.getmailaward_ = new ::msg::CSRspGetMailAward(*from._impl_.getmailaward_);
  }
  if (from._internal_has_buyegg()) {
    _this->_impl_.buyegg_ = new ::msg::CSRspBuyEgg(*from._impl_.buyegg_);
  }
  if (from._internal_has_usernameset()) {
    _this->_impl_.usernameset_ = new ::msg::CSRspUserNameSet(*from._impl_.usernameset_);
  }
  if (from._internal_has_usernamerandom()) {
    _this->_impl_.usernamerandom_ = new ::msg::CSRspUserNameRandom(*from._impl_.usernamerandom_);
  }
  if (from._internal_has_headpicset()) {
    _this->_impl_.headpicset_ = new ::msg::CSRspHeadPicSet(*from._impl_.headpicset_);
  }
  if (from._internal_has_dresschessplayer()) {
    _this->_impl_.dresschessplayer_ = new ::msg::CSRspDressChessPlayer(*from._impl_.dresschessplayer_);
  }
  if (from._internal_has_dressscene()) {
    _this->_impl_.dressscene_ = new ::msg::CSRspDressScene(*from._impl_.dressscene_);
  }
  if (from._internal_has_pvplogin()) {
    _this->_impl_.pvplogin_ = new ::msg::CSRspPvpLogin(*from._impl_.pvplogin_);
  }
  if (from._internal_has_pvpend()) {
    _this->_impl_.pvpend_ = new ::msg::CSRspPvpEnd(*from._impl_.pvpend_);
  }
  if (from._internal_has_playerfinish()) {
    _this->_impl_.playerfinish_ = new ::msg::CSRspPlayerFinish(*from._impl_.playerfinish_);
  }
  if (from._internal_has_playerquit()) {
    _this->_impl_.playerquit_ = new ::msg::CSRspPlayerQuit(*from._impl_.playerquit_);
  }
  if (from._internal_has_sellitem()) {
    _this->_impl_.sellitem_ = new ::msg::CSRspSellItem(*from._impl_.sellitem_);
  }
  if (from._internal_has_getevalaward()) {
    _this->_impl_.getevalaward_ = new ::msg::CSRspGetEvalAward(*from._impl_.getevalaward_);
  }
  if (from._internal_has_usechessplayer()) {
    _this->_impl_.usechessplayer_ = new ::msg::CSRspUseChessPlayer(*from._impl_.usechessplayer_);
  }
  if (from._internal_has_guidreport()) {
    _this->_impl_.guidreport_ = new ::msg::CSRspGuidReport(*from._impl_.guidreport_);
  }
  if (from._internal_has_getcodeaward()) {
    _this->_impl_.getcodeaward_ = new ::msg::CSRspGetCodeAward(*from._impl_.getcodeaward_);
  }
  if (from._internal_has_roundreport()) {
    _this->_impl_.roundreport_ = new ::msg::CSRspRoundReport(*from._impl_.roundreport_);
  }
  if (from._internal_has_loadingprogress()) {
    _this->_impl_.loadingprogress_ = new ::msg::CSRspLoadingProgress(*from._impl_.loadingprogress_);
  }
  if (from._internal_has_pvpchat()) {
    _this->_impl_.pvpchat_ = new ::msg::CSRspPvpChat(*from._impl_.pvpchat_);
  }
  if (from._internal_has_chesscombine()) {
    _this->_impl_.chesscombine_ = new ::msg::CSRspChessCombine(*from._impl_.chesscombine_);
  }
  if (from._internal_has_expose()) {
    _this->_impl_.expose_ = new ::msg::CSRspExpose(*from._impl_.expose_);
  }
  if (from._internal_has_applyorderid()) {
    _this->_impl_.applyorderid_ = new ::msg::CSRspApplyOrderId(*from._impl_.applyorderid_);
  }
  if (from._internal_has_reportorderinfo()) {
    _this->_impl_.reportorderinfo_ = new ::msg::CSRspReportOrderInfo(*from._impl_.reportorderinfo_);
  }
  if (from._internal_has_setitem()) {
    _this->_impl_.setitem_ = new ::msg::CSRspSetItem(*from._impl_.setitem_);
  }
  if (from._internal_has_unsetitem()) {
    _this->_impl_.unsetitem_ = new ::msg::CSRspUnsetItem(*from._impl_.unsetitem_);
  }
  if (from._internal_has_randomitem()) {
    _this->_impl_.randomitem_ = new ::msg::CSRspRandomItem(*from._impl_.randomitem_);
  }
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::msg::CSRspChat(*from._impl_.chat_);
  }
  if (from._internal_has_setchessplayer()) {
    _this->_impl_.setchessplayer_ = new ::msg::CSRspSetChessPlayer(*from._impl_.setchessplayer_);
  }
  if (from._internal_has_unsetchessplayer()) {
    _this->_impl_.unsetchessplayer_ = new ::msg::CSRspUnsetChessPlayer(*from._impl_.unsetchessplayer_);
  }
  if (from._internal_has_getfanslist()) {
    _this->_impl_.getfanslist_ = new ::msg::CSRspGetFansList(*from._impl_.getfanslist_);
  }
  if (from._internal_has_followplayer()) {
    _this->_impl_.followplayer_ = new ::msg::CSRspFollowPlayer(*from._impl_.followplayer_);
  }
  if (from._internal_has_unfollowplayer()) {
    _this->_impl_.unfollowplayer_ = new ::msg::CSRspUnfollowPlayer(*from._impl_.unfollowplayer_);
  }
  if (from._internal_has_playersstatusinfo()) {
    _this->_impl_.playersstatusinfo_ = new ::msg::CSRspPlayersStatusInfo(*from._impl_.playersstatusinfo_);
  }
  if (from._internal_has_invitejointeam()) {
    _this->_impl_.invitejointeam_ = new ::msg::CSRspInviteJoinTeam(*from._impl_.invitejointeam_);
  }
  if (from._internal_has_jointeam()) {
    _this->_impl_.jointeam_ = new ::msg::CSRspJoinTeam(*from._impl_.jointeam_);
  }
  if (from._internal_has_reportpayresponse()) {
    _this->_impl_.reportpayresponse_ = new ::msg::CSRspReportPayResponse(*from._impl_.reportpayresponse_);
  }
  if (from._internal_has_rejectjointeam()) {
    _this->_impl_.rejectjointeam_ = new ::msg::CSRspRejectJoinTeam(*from._impl_.rejectjointeam_);
  }
  if (from._internal_has_shieldchat()) {
    _this->_impl_.shieldchat_ = new ::msg::CSRspShieldChat(*from._impl_.shieldchat_);
  }
  if (from._internal_has_buypassportlevel()) {
    _this->_impl_.buypassportlevel_ = new ::msg::CSRspBuyPassportLevel(*from._impl_.buypassportlevel_);
  }
  if (from._internal_has_upgradepassport()) {
    _this->_impl_.upgradepassport_ = new ::msg::CSRspUpgradePassport(*from._impl_.upgradepassport_);
  }
  if (from._internal_has_getpassportlevelaward()) {
    _this->_impl_.getpassportlevelaward_ = new ::msg::CSRspGetPassportLevelAward(*from._impl_.getpassportlevelaward_);
  }
  if (from._internal_has_getpassporttaskaward()) {
    _this->_impl_.getpassporttaskaward_ = new ::msg::CSRspGetPassportTaskAward(*from._impl_.getpassporttaskaward_);
  }
  if (from._internal_has_telbook()) {
    _this->_impl_.telbook_ = new ::msg::CSRspTelBook(*from._impl_.telbook_);
  }
  if (from._internal_has_activatepassport()) {
    _this->_impl_.activatepassport_ = new ::msg::CSRspActivatePassport(*from._impl_.activatepassport_);
  }
  if (from._internal_has_rankseasoneval()) {
    _this->_impl_.rankseasoneval_ = new ::msg::CSRspRankSeasonEval(*from._impl_.rankseasoneval_);
  }
  if (from._internal_has_bindaccount()) {
    _this->_impl_.bindaccount_ = new ::msg::CSRspBindAccount(*from._impl_.bindaccount_);
  }
  if (from._internal_has_incadsshowcount()) {
    _this->_impl_.incadsshowcount_ = new ::msg::CSRspIncAdShowCount(*from._impl_.incadsshowcount_);
  }
  if (from._internal_has_usebonuscard()) {
    _this->_impl_.usebonuscard_ = new ::msg::CSRspUseBonusCard(*from._impl_.usebonuscard_);
  }
  if (from._internal_has_getseasonaward()) {
    _this->_impl_.getseasonaward_ = new ::msg::CSRspGetSeasonAward(*from._impl_.getseasonaward_);
  }
  if (from._internal_has_getalphaactivityaward()) {
    _this->_impl_.getalphaactivityaward_ = new ::msg::CSRspGetAlphaActivityAward(*from._impl_.getalphaactivityaward_);
  }
  if (from._internal_has_getlanguagedata()) {
    _this->_impl_.getlanguagedata_ = new ::msg::CSRspGetLanguageData(*from._impl_.getlanguagedata_);
  }
  if (from._internal_has_getactivityaward()) {
    _this->_impl_.getactivityaward_ = new ::msg::CSRspGetActivityAward(*from._impl_.getactivityaward_);
  }
  if (from._internal_has_getactivitydata()) {
    _this->_impl_.getactivitydata_ = new ::msg::CSRspGetActivityData(*from._impl_.getactivitydata_);
  }
  if (from._internal_has_sendsms()) {
    _this->_impl_.sendsms_ = new ::msg::CSRspSendSms(*from._impl_.sendsms_);
  }
  if (from._internal_has_getmeleeaward()) {
    _this->_impl_.getmeleeaward_ = new ::msg::CSRspGetMeleeAward(*from._impl_.getmeleeaward_);
  }
  if (from._internal_has_addaitoteam()) {
    _this->_impl_.addaitoteam_ = new ::msg::CSRspAddAiToTeam(*from._impl_.addaitoteam_);
  }
  if (from._internal_has_share()) {
    _this->_impl_.share_ = new ::msg::CSRspShare(*from._impl_.share_);
  }
  if (from._internal_has_skipinterface()) {
    _this->_impl_.skipinterface_ = new ::msg::CSRspSkipInterface(*from._impl_.skipinterface_);
  }
  if (from._internal_has_teamgame()) {
    _this->_impl_.teamgame_ = new ::msg::CSRspTeamGame(*from._impl_.teamgame_);
  }
  if (from._internal_has_setteammode()) {
    _this->_impl_.setteammode_ = new ::msg::CSRspSetTeamMode(*from._impl_.setteammode_);
  }
  if (from._internal_has_historypvpshowpermission()) {
    _this->_impl_.historypvpshowpermission_ = new ::msg::CSRspSetHistoryPvpShowPermission(*from._impl_.historypvpshowpermission_);
  }
  if (from._internal_has_searchteam()) {
    _this->_impl_.searchteam_ = new ::msg::CSRspSearchTeam(*from._impl_.searchteam_);
  }
  if (from._internal_has_applychat()) {
    _this->_impl_.applychat_ = new ::msg::CSRspApplyChat(*from._impl_.applychat_);
  }
  if (from._internal_has_chatlogin()) {
    _this->_impl_.chatlogin_ = new ::msg::CSRspChatLogin(*from._impl_.chatlogin_);
  }
  if (from._internal_has_probenetdelay()) {
    _this->_impl_.probenetdelay_ = new ::msg::CSRspProbeNetDelay(*from._impl_.probenetdelay_);
  }
  if (from._internal_has_geteggs()) {
    _this->_impl_.geteggs_ = new ::msg::CSRspGetEggs(*from._impl_.geteggs_);
  }
  if (from._internal_has_buygoods()) {
    _this->_impl_.buygoods_ = new ::msg::CSRspBuyGoods(*from._impl_.buygoods_);
  }
  if (from._internal_has_exchangepassportgoods()) {
    _this->_impl_.exchangepassportgoods_ = new ::msg::CSRspExchangePassportGoods(*from._impl_.exchangepassportgoods_);
  }
  if (from._internal_has_usepassporttaskcard()) {
    _this->_impl_.usepassporttaskcard_ = new ::msg::CSRspUsePassportTaskCard(*from._impl_.usepassporttaskcard_);
  }
  if (from._internal_has_openrandchest()) {
    _this->_impl_.openrandchest_ = new ::msg::CSRspOpenRandChest(*from._impl_.openrandchest_);
  }
  if (from._internal_has_egglottery()) {
    _this->_impl_.egglottery_ = new ::msg::CSRspEggLottery(*from._impl_.egglottery_);
  }
  if (from._internal_has_querydiamondbalance()) {
    _this->_impl_.querydiamondbalance_ = new ::msg::CSRspQueryDiamondBalance(*from._impl_.querydiamondbalance_);
  }
  if (from._internal_has_useitem()) {
    _this->_impl_.useitem_ = new ::msg::CSRspUseItem(*from._impl_.useitem_);
  }
  if (from._internal_has_useexperiencecard()) {
    _this->_impl_.useexperiencecard_ = new ::msg::CSRspUseExperienceCard(*from._impl_.useexperiencecard_);
  }
  if (from._internal_has_randtargetitem()) {
    _this->_impl_.randtargetitem_ = new ::msg::CSRspRandTargetItem(*from._impl_.randtargetitem_);
  }
  if (from._internal_has_addblacklist()) {
    _this->_impl_.addblacklist_ = new ::msg::CSRspAddBlacklist(*from._impl_.addblacklist_);
  }
  if (from._internal_has_removeblacklist()) {
    _this->_impl_.removeblacklist_ = new ::msg::CSRspRemoveBlacklist(*from._impl_.removeblacklist_);
  }
  if (from._internal_has_reportplayerbirth()) {
    _this->_impl_.reportplayerbirth_ = new ::msg::CSRspReportPlayerBirth(*from._impl_.reportplayerbirth_);
  }
  if (from._internal_has_reportinfoinput()) {
    _this->_impl_.reportinfoinput_ = new ::msg::CSRspReportInfoInput(*from._impl_.reportinfoinput_);
  }
  if (from._internal_has_sendverificationcode()) {
    _this->_impl_.sendverificationcode_ = new ::msg::CSRspSendVerificationCode(*from._impl_.sendverificationcode_);
  }
  if (from._internal_has_bindphonenumber()) {
    _this->_impl_.bindphonenumber_ = new ::msg::CSRspBindPhoneNumber(*from._impl_.bindphonenumber_);
  }
  if (from._internal_has_worldinvite()) {
    _this->_impl_.worldinvite_ = new ::msg::CSRspWorldInvite(*from._impl_.worldinvite_);
  }
  if (from._internal_has_removeexpireitem()) {
    _this->_impl_.removeexpireitem_ = new ::msg::CSRspRemoveExpireItem(*from._impl_.removeexpireitem_);
  }
  if (from._internal_has_getmallgoods()) {
    _this->_impl_.getmallgoods_ = new ::msg::CSRspGetMallGoods(*from._impl_.getmallgoods_);
  }
  if (from._internal_has_buymallgoods()) {
    _this->_impl_.buymallgoods_ = new ::msg::CSRspBuyMallGoods(*from._impl_.buymallgoods_);
  }
  if (from._internal_has_bindsharingcode()) {
    _this->_impl_.bindsharingcode_ = new ::msg::CSRspBindSharingCode(*from._impl_.bindsharingcode_);
  }
  if (from._internal_has_wxblessbag()) {
    _this->_impl_.wxblessbag_ = new ::msg::CSRspWXBlessBag(*from._impl_.wxblessbag_);
  }
  if (from._internal_has_updatefriendsingame()) {
    _this->_impl_.updatefriendsingame_ = new ::msg::CSRspUpdateFriendsInGame(*from._impl_.updatefriendsingame_);
  }
  if (from._internal_has_sharereward()) {
    _this->_impl_.sharereward_ = new ::msg::CSRspShareReward(*from._impl_.sharereward_);
  }
  if (from._internal_has_allfightinfo()) {
    _this->_impl_.allfightinfo_ = new ::msg::CSRspAllFightInfo(*from._impl_.allfightinfo_);
  }
  if (from._internal_has_getoldplayer()) {
    _this->_impl_.getoldplayer_ = new ::msg::CSRspGetOldPlayer(*from._impl_.getoldplayer_);
  }
  if (from._internal_has_bindoldplayer()) {
    _this->_impl_.bindoldplayer_ = new ::msg::CSRspBindOldPlayer(*from._impl_.bindoldplayer_);
  }
  if (from._internal_has_sendverificationcodewithcheckredis()) {
    _this->_impl_.sendverificationcodewithcheckredis_ = new ::msg::CSRspSendVerificationCodeWithCheckRedis(*from._impl_.sendverificationcodewithcheckredis_);
  }
  if (from._internal_has_reportsetting()) {
    _this->_impl_.reportsetting_ = new ::msg::CSRspReportSetting(*from._impl_.reportsetting_);
  }
  if (from._internal_has_antidata()) {
    _this->_impl_.antidata_ = new ::msg::CSRspAntiData(*from._impl_.antidata_);
  }
  if (from._internal_has_tlogdata()) {
    _this->_impl_.tlogdata_ = new ::msg::CSRspTlogData(*from._impl_.tlogdata_);
  }
  if (from._internal_has_daysign()) {
    _this->_impl_.daysign_ = new ::msg::CSRspDaySign(*from._impl_.daysign_);
  }
  if (from._internal_has_dayfitavoid()) {
    _this->_impl_.dayfitavoid_ = new ::msg::CSRspDayFitAvoid(*from._impl_.dayfitavoid_);
  }
  if (from._internal_has_sharecountaward()) {
    _this->_impl_.sharecountaward_ = new ::msg::CSRspShareCountAward(*from._impl_.sharecountaward_);
  }
  if (from._internal_has_realationstar()) {
    _this->_impl_.realationstar_ = new ::msg::CSRspRealationStar(*from._impl_.realationstar_);
  }
  if (from._internal_has_getrealationstarinvitesucc()) {
    _this->_impl_.getrealationstarinvitesucc_ = new ::msg::CSRspGetRealationStarInviteSucc(*from._impl_.getrealationstarinvitesucc_);
  }
  if (from._internal_has_getrealationstar()) {
    _this->_impl_.getrealationstar_ = new ::msg::CSRspGetRealationStar(*from._impl_.getrealationstar_);
  }
  if (from._internal_has_rspactrecord()) {
    _this->_impl_.rspactrecord_ = new ::msg::CSRspGetActRecord(*from._impl_.rspactrecord_);
  }
  if (from._internal_has_joinvoiceteam()) {
    _this->_impl_.joinvoiceteam_ = new ::msg::CSRspJoinVoiceTeam(*from._impl_.joinvoiceteam_);
  }
  if (from._internal_has_joinvoicepvp()) {
    _this->_impl_.joinvoicepvp_ = new ::msg::CSRspJoinVoicePvp(*from._impl_.joinvoicepvp_);
  }
  if (from._internal_has_joinvoicecamp()) {
    _this->_impl_.joinvoicecamp_ = new ::msg::CSRspJoinVoiceCamp(*from._impl_.joinvoicecamp_);
  }
  if (from._internal_has_usercountryset()) {
    _this->_impl_.usercountryset_ = new ::msg::CSRspUserCountrySet(*from._impl_.usercountryset_);
  }
  if (from._internal_has_observe()) {
    _this->_impl_.observe_ = new ::msg::CSRspObserve(*from._impl_.observe_);
  }
  if (from._internal_has_getrecommendpvp()) {
    _this->_impl_.getrecommendpvp_ = new ::msg::CSRspGetRecommendPvp(*from._impl_.getrecommendpvp_);
  }
  if (from._internal_has_observelogin()) {
    _this->_impl_.observelogin_ = new ::msg::CSRspObserveLogin(*from._impl_.observelogin_);
  }
  if (from._internal_has_quitobserve()) {
    _this->_impl_.quitobserve_ = new ::msg::CSRspQuitObserve(*from._impl_.quitobserve_);
  }
  if (from._internal_has_getobserveinfo()) {
    _this->_impl_.getobserveinfo_ = new ::msg::CSRspGetObserveInfo(*from._impl_.getobserveinfo_);
  }
  if (from._internal_has_freeflow()) {
    _this->_impl_.freeflow_ = new ::msg::CSRspFreeFlow(*from._impl_.freeflow_);
  }
  if (from._internal_has_setpushtoken()) {
    _this->_impl_.setpushtoken_ = new ::msg::CSRspSetPushToken(*from._impl_.setpushtoken_);
  }
  if (from._internal_has_tlogevent()) {
    _this->_impl_.tlogevent_ = new ::msg::CSRspTlogEvent(*from._impl_.tlogevent_);
  }
  if (from._internal_has_wxvvipaward()) {
    _this->_impl_.wxvvipaward_ = new ::msg::CSRspWxVVipAward(*from._impl_.wxvvipaward_);
  }
  if (from._internal_has_relationstarwx()) {
    _this->_impl_.relationstarwx_ = new ::msg::CSRspGetRelationStarWX(*from._impl_.relationstarwx_);
  }
  if (from._internal_has_sendwxredpacket()) {
    _this->_impl_.sendwxredpacket_ = new ::msg::CSRspSendWxRedPacket(*from._impl_.sendwxredpacket_);
  }
  if (from._internal_has_recvwxredpacket()) {
    _this->_impl_.recvwxredpacket_ = new ::msg::CSRspRecvWxRedPacket(*from._impl_.recvwxredpacket_);
  }
  if (from._internal_has_wxredpktlike()) {
    _this->_impl_.wxredpktlike_ = new ::msg::CSRspWxRedPktLike(*from._impl_.wxredpktlike_);
  }
  if (from._internal_has_wxredpktrank()) {
    _this->_impl_.wxredpktrank_ = new ::msg::CSRspWxRedPktRank(*from._impl_.wxredpktrank_);
  }
  if (from._internal_has_setobserveprivilege()) {
    _this->_impl_.setobserveprivilege_ = new ::msg::CSRspObservePrivilege(*from._impl_.setobserveprivilege_);
  }
  if (from._internal_has_presetfastchat()) {
    _this->_impl_.presetfastchat_ = new ::msg::CSRspPresetFastChat(*from._impl_.presetfastchat_);
  }
  if (from._internal_has_changeslotteam()) {
    _this->_impl_.changeslotteam_ = new ::msg::CSRspChangeSlotTeam(*from._impl_.changeslotteam_);
  }
  if (from._internal_has_changesubmodeteam()) {
    _this->_impl_.changesubmodeteam_ = new ::msg::CSRspChangeSubModeTeam(*from._impl_.changesubmodeteam_);
  }
  if (from._internal_has_confirmchangeslotteam()) {
    _this->_impl_.confirmchangeslotteam_ = new ::msg::CSRspConfirmChangeSlotTeam(*from._impl_.confirmchangeslotteam_);
  }
  if (from._internal_has_pvproundend()) {
    _this->_impl_.pvproundend_ = new ::msg::CSRspPvpRoundEnd(*from._impl_.pvproundend_);
  }
  if (from._internal_has_pvp()) {
    _this->_impl_.pvp_ = new ::msg::CSRspPvp(*from._impl_.pvp_);
  }
  if (from._internal_has_teamready()) {
    _this->_impl_.teamready_ = new ::msg::CSRspTeamReady(*from._impl_.teamready_);
  }
  if (from._internal_has_bindoldbusinessplayer()) {
    _this->_impl_.bindoldbusinessplayer_ = new ::msg::CSRspBindOldBusinessPlayer(*from._impl_.bindoldbusinessplayer_);
  }
  if (from._internal_has_translate()) {
    _this->_impl_.translate_ = new ::msg::CSRspTranslate(*from._impl_.translate_);
  }
  if (from._internal_has_submitquestionnaire()) {
    _this->_impl_.submitquestionnaire_ = new ::msg::CSRspSubmitQuestionnaire(*from._impl_.submitquestionnaire_);
  }
  if (from._internal_has_cancelchangeslot()) {
    _this->_impl_.cancelchangeslot_ = new ::msg::CSRspCancelChangeSlot(*from._impl_.cancelchangeslot_);
  }
  if (from._internal_has_setchessskin()) {
    _this->_impl_.setchessskin_ = new ::msg::CSRspSetChessSkin(*from._impl_.setchessskin_);
  }
  if (from._internal_has_unsetchessskin()) {
    _this->_impl_.unsetchessskin_ = new ::msg::CSRspUnsetChessSkin(*from._impl_.unsetchessskin_);
  }
  if (from._internal_has_compose()) {
    _this->_impl_.compose_ = new ::msg::CSRspCompose(*from._impl_.compose_);
  }
  if (from._internal_has_video()) {
    _this->_impl_.video_ = new ::msg::CSRspVideo(*from._impl_.video_);
  }
  if (from._internal_has_offhelpreddot()) {
    _this->_impl_.offhelpreddot_ = new ::msg::CSRspOffHelpReddot(*from._impl_.offhelpreddot_);
  }
  if (from._internal_has_changelanguage()) {
    _this->_impl_.changelanguage_ = new ::msg::CSRspChangeLanguage(*from._impl_.changelanguage_);
  }
  if (from._internal_has_setprovince()) {
    _this->_impl_.setprovince_ = new ::msg::CSRspSetProvince(*from._impl_.setprovince_);
  }
  if (from._internal_has_longyuanvoice()) {
    _this->_impl_.longyuanvoice_ = new ::msg::CSRspLongyuanVoice(*from._impl_.longyuanvoice_);
  }
  if (from._internal_has_enrolltournament()) {
    _this->_impl_.enrolltournament_ = new ::msg::CSRspEnrollTournament(*from._impl_.enrolltournament_);
  }
  if (from._internal_has_jointournamentroom()) {
    _this->_impl_.jointournamentroom_ = new ::msg::CSRspJoinTournamentRoom(*from._impl_.jointournamentroom_);
  }
  if (from._internal_has_tournamentpointaward()) {
    _this->_impl_.tournamentpointaward_ = new ::msg::CSRspTournamentPointAward(*from._impl_.tournamentpointaward_);
  }
  if (from._internal_has_getenrollplayers()) {
    _this->_impl_.getenrollplayers_ = new ::msg::CSRspGetEnrollPlayers(*from._impl_.getenrollplayers_);
  }
  if (from._internal_has_dealwebmail()) {
    _this->_impl_.dealwebmail_ = new ::msg::CSRspDealWebMail(*from._impl_.dealwebmail_);
  }
  if (from._internal_has_challengeagain()) {
    _this->_impl_.challengeagain_ = new ::msg::CSRspChallengeAgain(*from._impl_.challengeagain_);
  }
  if (from._internal_has_historychat()) {
    _this->_impl_.historychat_ = new ::msg::CSRspHistoryChatMsg(*from._impl_.historychat_);
  }
  if (from._internal_has_setfriendinvisible()) {
    _this->_impl_.setfriendinvisible_ = new ::msg::CSRspSetFriendInvisible(*from._impl_.setfriendinvisible_);
  }
  if (from._internal_has_getobserveaward()) {
    _this->_impl_.getobserveaward_ = new ::msg::CSRspGetObserveAward(*from._impl_.getobserveaward_);
  }
  if (from._internal_has_inviteobserve()) {
    _this->_impl_.inviteobserve_ = new ::msg::CSRspInviteObserve(*from._impl_.inviteobserve_);
  }
  if (from._internal_has_rejectobserve()) {
    _this->_impl_.rejectobserve_ = new ::msg::CSRspRejectObserve(*from._impl_.rejectobserve_);
  }
  if (from._internal_has_gettxplayer()) {
    _this->_impl_.gettxplayer_ = new ::msg::CSRspGetTxPlayer(*from._impl_.gettxplayer_);
  }
  if (from._internal_has_getthirdpvpinfo()) {
    _this->_impl_.getthirdpvpinfo_ = new ::msg::CSRspGetThirdPvpInfo(*from._impl_.getthirdpvpinfo_);
  }
  if (from._internal_has_markplayerguide()) {
    _this->_impl_.markplayerguide_ = new ::msg::CSRspMarkPlayerGuide(*from._impl_.markplayerguide_);
  }
  if (from._internal_has_chessskinclicked()) {
    _this->_impl_.chessskinclicked_ = new ::msg::CSRspMarkChessSkinClicked(*from._impl_.chessskinclicked_);
  }
  if (from._internal_has_queryps4entitlements()) {
    _this->_impl_.queryps4entitlements_ = new ::msg::CSRsqQueryPs4Entitlements(*from._impl_.queryps4entitlements_);
  }
  if (from._internal_has_actdaysign()) {
    _this->_impl_.actdaysign_ = new ::msg::CSRspActDaySign(*from._impl_.actdaysign_);
  }
  if (from._internal_has_havethirdpvpinfo()) {
    _this->_impl_.havethirdpvpinfo_ = new ::msg::CSRspHaveThirdPvp(*from._impl_.havethirdpvpinfo_);
  }
  if (from._internal_has_activitymall()) {
    _this->_impl_.activitymall_ = new ::msg::CSRspActivityMall(*from._impl_.activitymall_);
  }
  if (from._internal_has_psonly()) {
    _this->_impl_.psonly_ = new ::msg::CSRspPsOnly(*from._impl_.psonly_);
  }
  if (from._internal_has_changechanneltype()) {
    _this->_impl_.changechanneltype_ = new ::msg::CSRspChangeChannelType(*from._impl_.changechanneltype_);
  }
  if (from._internal_has_customcardopt()) {
    _this->_impl_.customcardopt_ = new ::msg::CSRspCustomCardOpt(*from._impl_.customcardopt_);
  }
  if (from._internal_has_championhistory()) {
    _this->_impl_.championhistory_ = new ::msg::CSRspChampionHistory(*from._impl_.championhistory_);
  }
  if (from._internal_has_tournamentlasttoprank()) {
    _this->_impl_.tournamentlasttoprank_ = new ::msg::CSRspTournamentLastTopRank(*from._impl_.tournamentlasttoprank_);
  }
  if (from._internal_has_bigwinnerdailyaward()) {
    _this->_impl_.bigwinnerdailyaward_ = new ::msg::CSRspBigWinnerDailyAward(*from._impl_.bigwinnerdailyaward_);
  }
  if (from._internal_has_bigwinnerscorehistory()) {
    _this->_impl_.bigwinnerscorehistory_ = new ::msg::CSRspBigWinnerScoreHistory(*from._impl_.bigwinnerscorehistory_);
  }
  if (from._internal_has_smeltitem()) {
    _this->_impl_.smeltitem_ = new ::msg::CSRspSmeltItem(*from._impl_.smeltitem_);
  }
  if (from._internal_has_pveuptalentlevel()) {
    _this->_impl_.pveuptalentlevel_ = new ::msg::CSRspPVEUpTalentLevel(*from._impl_.pveuptalentlevel_);
  }
  if (from._internal_has_luckyaward()) {
    _this->_impl_.luckyaward_ = new ::msg::CSRspPVELuckyAward(*from._impl_.luckyaward_);
  }
  if (from._internal_has_applychannel()) {
    _this->_impl_.applychannel_ = new ::msg::CSRspApplyChannel(*from._impl_.applychannel_);
  }
  if (from._internal_has_obteaminfo()) {
    _this->_impl_.obteaminfo_ = new ::msg::CSRspOBTeamInfo(*from._impl_.obteaminfo_);
  }
  if (from._internal_has_getpvpservergroup()) {
    _this->_impl_.getpvpservergroup_ = new ::msg::CSRspGetPvpServerGroup(*from._impl_.getpvpservergroup_);
  }
  if (from._internal_has_reportpvpinfo()) {
    _this->_impl_.reportpvpinfo_ = new ::msg::CSRspReportPvpInfo(*from._impl_.reportpvpinfo_);
  }
  if (from._internal_has_chooseplayer()) {
    _this->_impl_.chooseplayer_ = new ::msg::CSRspChoosePlayer(*from._impl_.chooseplayer_);
  }
  if (from._internal_has_pingtest()) {
    _this->_impl_.pingtest_ = new ::msg::CSRspPingTest(*from._impl_.pingtest_);
  }
  if (from._internal_has_reportregioninfo()) {
    _this->_impl_.reportregioninfo_ = new ::msg::CSRspReportRegionInfo(*from._impl_.reportregioninfo_);
  }
  if (from._internal_has_recalledplaeyr()) {
    _this->_impl_.recalledplaeyr_ = new ::msg::CSRspRecalledPlayer(*from._impl_.recalledplaeyr_);
  }
  if (from._internal_has_weblogin()) {
    _this->_impl_.weblogin_ = new ::msg::CSRspWebLogin(*from._impl_.weblogin_);
  }
  if (from._internal_has_invitecodereset()) {
    _this->_impl_.invitecodereset_ = new ::msg::CSRspInviteCodeReset(*from._impl_.invitecodereset_);
  }
  if (from._internal_has_recallreward()) {
    _this->_impl_.recallreward_ = new ::msg::CSRspRecallReward(*from._impl_.recallreward_);
  }
  if (from._internal_has_switchtocommonmatch()) {
    _this->_impl_.switchtocommonmatch_ = new ::msg::CSRspSwitchToCommonMatch(*from._impl_.switchtocommonmatch_);
  }
  if (from._internal_has_switchmodeinteam()) {
    _this->_impl_.switchmodeinteam_ = new ::msg::CSRspSwitchModeInTeam(*from._impl_.switchmodeinteam_);
  }
  if (from._internal_has_gettnroomstate()) {
    _this->_impl_.gettnroomstate_ = new ::msg::CSRspGetTNRoomState(*from._impl_.gettnroomstate_);
  }
  if (from._internal_has_workshopmatch()) {
    _this->_impl_.workshopmatch_ = new ::msg::CSRspWorkshopMatch(*from._impl_.workshopmatch_);
  }
  if (from._internal_has_buyworkshopticket()) {
    _this->_impl_.buyworkshopticket_ = new ::msg::CSRspBuyWorkshopTicket(*from._impl_.buyworkshopticket_);
  }
  if (from._internal_has_favouriteworkshopmap()) {
    _this->_impl_.favouriteworkshopmap_ = new ::msg::CSRspFavouriteWorkshopMap(*from._impl_.favouriteworkshopmap_);
  }
  if (from._internal_has_shortcutmapsop()) {
    _this->_impl_.shortcutmapsop_ = new ::msg::CSRspShortcutMapsOP(*from._impl_.shortcutmapsop_);
  }
  if (from._internal_has_playerstournamentinfo()) {
    _this->_impl_.playerstournamentinfo_ = new ::msg::CSRspPlayersTournamentInfo(*from._impl_.playerstournamentinfo_);
  }
  if (from._internal_has_scoreworkshopmap()) {
    _this->_impl_.scoreworkshopmap_ = new ::msg::CSRspScoreWorkshopMap(*from._impl_.scoreworkshopmap_);
  }
  if (from._internal_has_mapsvisitedbyfriends()) {
    _this->_impl_.mapsvisitedbyfriends_ = new ::msg::CSRspMapsVisitedByFriends(*from._impl_.mapsvisitedbyfriends_);
  }
  if (from._internal_has_verifyrealname()) {
    _this->_impl_.verifyrealname_ = new ::msg::CSRspVerifyRealName(*from._impl_.verifyrealname_);
  }
  if (from._internal_has_fakepay()) {
    _this->_impl_.fakepay_ = new ::msg::CSRspFakePay(*from._impl_.fakepay_);
  }
  if (from._internal_has_guildcreate()) {
    _this->_impl_.guildcreate_ = new ::msg::CSRspGuildCreate(*from._impl_.guildcreate_);
  }
  if (from._internal_has_guildapply()) {
    _this->_impl_.guildapply_ = new ::msg::CSRspGuildApply(*from._impl_.guildapply_);
  }
  if (from._internal_has_guildhome()) {
    _this->_impl_.guildhome_ = new ::msg::CSRspGuildHome(*from._impl_.guildhome_);
  }
  if (from._internal_has_guildinfo()) {
    _this->_impl_.guildinfo_ = new ::msg::CSRspGuildInfo(*from._impl_.guildinfo_);
  }
  if (from._internal_has_guildapprove()) {
    _this->_impl_.guildapprove_ = new ::msg::CSRspGuildApprove(*from._impl_.guildapprove_);
  }
  if (from._internal_has_guildrole()) {
    _this->_impl_.guildrole_ = new ::msg::CSRspGuildSetRole(*from._impl_.guildrole_);
  }
  if (from._internal_has_guildmodify()) {
    _this->_impl_.guildmodify_ = new ::msg::CSRspGuildModify(*from._impl_.guildmodify_);
  }
  if (from._internal_has_guildkickoff()) {
    _this->_impl_.guildkickoff_ = new ::msg::CSRspGuildKickoff(*from._impl_.guildkickoff_);
  }
  if (from._internal_has_guilddismiss()) {
    _this->_impl_.guilddismiss_ = new ::msg::CSRspGuildDismiss(*from._impl_.guilddismiss_);
  }
  if (from._internal_has_guildexit()) {
    _this->_impl_.guildexit_ = new ::msg::CSRspGuildExit(*from._impl_.guildexit_);
  }
  if (from._internal_has_guildchat()) {
    _this->_impl_.guildchat_ = new ::msg::CSRspGuildChat(*from._impl_.guildchat_);
  }
  if (from._internal_has_guildlist()) {
    _this->_impl_.guildlist_ = new ::msg::CSRspGuildList(*from._impl_.guildlist_);
  }
  if (from._internal_has_guildrecommendplayers()) {
    _this->_impl_.guildrecommendplayers_ = new ::msg::CSRspGuildRecommendPlayers(*from._impl_.guildrecommendplayers_);
  }
  if (from._internal_has_guildinvitelist()) {
    _this->_impl_.guildinvitelist_ = new ::msg::CSRspGuildInviteList(*from._impl_.guildinvitelist_);
  }
  if (from._internal_has_guildinvite()) {
    _this->_impl_.guildinvite_ = new ::msg::CSRspGuildInvite(*from._impl_.guildinvite_);
  }
  if (from._internal_has_guildrejectinvite()) {
    _this->_impl_.guildrejectinvite_ = new ::msg::CSRspGuildRejectInvite(*from._impl_.guildrejectinvite_);
  }
  if (from._internal_has_getvngcommentaward()) {
    _this->_impl_.getvngcommentaward_ = new ::msg::CSRspGetVngCommentAward(*from._impl_.getvngcommentaward_);
  }
  if (from._internal_has_levelupchest()) {
    _this->_impl_.levelupchest_ = new ::msg::CSRspLevelupChest(*from._impl_.levelupchest_);
  }
  if (from._internal_has_watchad()) {
    _this->_impl_.watchad_ = new ::msg::CSRspWatchAd(*from._impl_.watchad_);
  }
  if (from._internal_has_pstournamentroom()) {
    _this->_impl_.pstournamentroom_ = new ::msg::CSRspQueryPsTournamentRoom(*from._impl_.pstournamentroom_);
  }
  if (from._internal_has_getadcumulateaward()) {
    _this->_impl_.getadcumulateaward_ = new ::msg::CSRspGetAdCumulateAward(*from._impl_.getadcumulateaward_);
  }
  if (from._internal_has_setmessengerpos()) {
    _this->_impl_.setmessengerpos_ = new ::msg::CSRspSetMessengerPos(*from._impl_.setmessengerpos_);
  }
  if (from._internal_has_antiaddictiontime()) {
    _this->_impl_.antiaddictiontime_ = new ::msg::CSRspUpdateAntiAddictionTime(*from._impl_.antiaddictiontime_);
  }
  if (from._internal_has_cancelreconnect()) {
    _this->_impl_.cancelreconnect_ = new ::msg::CSRspCancelReconnect(*from._impl_.cancelreconnect_);
  }
  if (from._internal_has_reconnect()) {
    _this->_impl_.reconnect_ = new ::msg::CSRspReconnect(*from._impl_.reconnect_);
  }
  if (from._internal_has_passthrough()) {
    _this->_impl_.passthrough_ = new ::msg::CSRspPassThrough(*from._impl_.passthrough_);
  }
  if (from._internal_has_visitplayer()) {
    _this->_impl_.visitplayer_ = new ::msg::CSRspVisitPlayer(*from._impl_.visitplayer_);
  }
  if (from._internal_has_leavegameearly()) {
    _this->_impl_.leavegameearly_ = new ::msg::CSRspLeaveGameEarly(*from._impl_.leavegameearly_);
  }
  if (from._internal_has_gdcommonbin()) {
    _this->_impl_.gdcommonbin_ = new ::msg::CSRspGDCommonBin(*from._impl_.gdcommonbin_);
  }
  if (from._internal_has_gdbindata()) {
    _this->_impl_.gdbindata_ = new ::msg::CSRspGDCommonBinData(*from._impl_.gdbindata_);
  }
  if (from._internal_has_battlecampresult()) {
    _this->_impl_.battlecampresult_ = new ::msg::CSRspBattleCampResult(*from._impl_.battlecampresult_);
  }
  if (from._internal_has_autobattleop()) {
    _this->_impl_.autobattleop_ = new ::msg::CSRspAutoBattleOP(*from._impl_.autobattleop_);
  }
  if (from._internal_has_restrictuser()) {
    _this->_impl_.restrictuser_ = new ::msg::CSRspRestrictUser(*from._impl_.restrictuser_);
  }
  if (from._internal_has_equipselectrate()) {
    _this->_impl_.equipselectrate_ = new ::msg::CSRspEquipSelectRate(*from._impl_.equipselectrate_);
  }
  if (from._internal_has_reportabsent()) {
    _this->_impl_.reportabsent_ = new ::msg::CSRspReportAbsent(*from._impl_.reportabsent_);
  }
  if (from._internal_has_recommendweek()) {
    _this->_impl_.recommendweek_ = new ::msg::CSRspRecommendWeek(*from._impl_.recommendweek_);
  }
  if (from._internal_has_recommendofficial()) {
    _this->_impl_.recommendofficial_ = new ::msg::CSRspRecommendOfficial(*from._impl_.recommendofficial_);
  }
  if (from._internal_has_recommendlatest()) {
    _this->_impl_.recommendlatest_ = new ::msg::CSRspRecommendLatest(*from._impl_.recommendlatest_);
  }
  if (from._internal_has_recommendhistory()) {
    _this->_impl_.recommendhistory_ = new ::msg::CSRspRecommendHistory(*from._impl_.recommendhistory_);
  }
  if (from._internal_has_recommendcollect()) {
    _this->_impl_.recommendcollect_ = new ::msg::CSRspRecommendCollect(*from._impl_.recommendcollect_);
  }
  if (from._internal_has_recommendset()) {
    _this->_impl_.recommendset_ = new ::msg::CSRspRecommendSet(*from._impl_.recommendset_);
  }
  if (from._internal_has_recommendgetcollection()) {
    _this->_impl_.recommendgetcollection_ = new ::msg::CSRspRecommendGetCollection(*from._impl_.recommendgetcollection_);
  }
  if (from._internal_has_recommendequip()) {
    _this->_impl_.recommendequip_ = new ::msg::CSRspRecommendEquip(*from._impl_.recommendequip_);
  }
  if (from._internal_has_logincancel()) {
    _this->_impl_.logincancel_ = new ::msg::CSRspLoginCancel(*from._impl_.logincancel_);
  }
  if (from._internal_has_convertdebris()) {
    _this->_impl_.convertdebris_ = new ::msg::CSRspConvertDebris(*from._impl_.convertdebris_);
  }
  if (from._internal_has_protectioncard()) {
    _this->_impl_.protectioncard_ = new ::msg::CSRspUseProtectionCard(*from._impl_.protectioncard_);
  }
  if (from._internal_has_usepassportcard()) {
    _this->_impl_.usepassportcard_ = new ::msg::CSRspUsePassportCard(*from._impl_.usepassportcard_);
  }
  if (from._internal_has_setmedal()) {
    _this->_impl_.setmedal_ = new ::msg::CSRspSetMedal(*from._impl_.setmedal_);
  }
  if (from._internal_has_unsetmedal()) {
    _this->_impl_.unsetmedal_ = new ::msg::CSRspUnSetMedal(*from._impl_.unsetmedal_);
  }
  if (from._internal_has_playermedals()) {
    _this->_impl_.playermedals_ = new ::msg::CSRspPlayerMedals(*from._impl_.playermedals_);
  }
  if (from._internal_has_updatehotdot()) {
    _this->_impl_.updatehotdot_ = new ::msg::CSRspUpdateHotDot(*from._impl_.updatehotdot_);
  }
  if (from._internal_has_queryhotdot()) {
    _this->_impl_.queryhotdot_ = new ::msg::CSRspQueryHotDot(*from._impl_.queryhotdot_);
  }
  if (from._internal_has_setcache()) {
    _this->_impl_.setcache_ = new ::msg::CSRspSetCache(*from._impl_.setcache_);
  }
  if (from._internal_has_getcache()) {
    _this->_impl_.getcache_ = new ::msg::CSRspGetCache(*from._impl_.getcache_);
  }
  if (from._internal_has_buychallengecount()) {
    _this->_impl_.buychallengecount_ = new ::msg::CSRspBuyChallengeCount(*from._impl_.buychallengecount_);
  }
  if (from._internal_has_getpverank()) {
    _this->_impl_.getpverank_ = new ::msg::CSRspGetPveRank(*from._impl_.getpverank_);
  }
  if (from._internal_has_authaccount()) {
    _this->_impl_.authaccount_ = new ::msg::CSRspAuthAccount(*from._impl_.authaccount_);
  }
  if (from._internal_has_unbindaccount()) {
    _this->_impl_.unbindaccount_ = new ::msg::CSRspUnbindAccount(*from._impl_.unbindaccount_);
  }
  if (from._internal_has_bagtoitem()) {
    _this->_impl_.bagtoitem_ = new ::msg::CSRspBagToItem(*from._impl_.bagtoitem_);
  }
  if (from._internal_has_identifyitem()) {
    _this->_impl_.identifyitem_ = new ::msg::CSRspIdentifyItem(*from._impl_.identifyitem_);
  }
  if (from._internal_has_insetitemaffix()) {
    _this->_impl_.insetitemaffix_ = new ::msg::CSRspInsetItemAffix(*from._impl_.insetitemaffix_);
  }
  if (from._internal_has_unsetitemaffix()) {
    _this->_impl_.unsetitemaffix_ = new ::msg::CSRspUnsetItemAffix(*from._impl_.unsetitemaffix_);
  }
  if (from._internal_has_setdefaultattributes()) {
    _this->_impl_.setdefaultattributes_ = new ::msg::CSRspSetDefaultAttributes(*from._impl_.setdefaultattributes_);
  }
  if (from._internal_has_checkcancel()) {
    _this->_impl_.checkcancel_ = new ::msg::CSRspCheckCancel(*from._impl_.checkcancel_);
  }
  if (from._internal_has_cancelaccount()) {
    _this->_impl_.cancelaccount_ = new ::msg::CSRspCancelAccount(*from._impl_.cancelaccount_);
  }
  if (from._internal_has_oauthapp()) {
    _this->_impl_.oauthapp_ = new ::msg::CSRspOAuthApp(*from._impl_.oauthapp_);
  }
  if (from._internal_has_selfnumrankdata()) {
    _this->_impl_.selfnumrankdata_ = new ::msg::CSRspGetSelfNumRankData(*from._impl_.selfnumrankdata_);
  }
  if (from._internal_has_updatecardgroup()) {
    _this->_impl_.updatecardgroup_ = new ::msg::CSRspUpdateCardGroup(*from._impl_.updatecardgroup_);
  }
  if (from._internal_has_updatecardgroupname()) {
    _this->_impl_.updatecardgroupname_ = new ::msg::CSRspUpdateCardGroupName(*from._impl_.updatecardgroupname_);
  }
  if (from._internal_has_buypvebuff()) {
    _this->_impl_.buypvebuff_ = new ::msg::CSRspBuyPveBuff(*from._impl_.buypvebuff_);
  }
  if (from._internal_has_setcardgroup()) {
    _this->_impl_.setcardgroup_ = new ::msg::CSRspSetCardGroup(*from._impl_.setcardgroup_);
  }
  if (from._internal_has_buypvechesstemplate()) {
    _this->_impl_.buypvechesstemplate_ = new ::msg::CSRspBuyPveChessTemplate(*from._impl_.buypvechesstemplate_);
  }
  if (from._internal_has_pveunlockchesstemplate()) {
    _this->_impl_.pveunlockchesstemplate_ = new ::msg::CSRspPveUnlockChessTemplate(*from._impl_.pveunlockchesstemplate_);
  }
  if (from._internal_has_pvesetteamdebuff()) {
    _this->_impl_.pvesetteamdebuff_ = new ::msg::CSRspPveSetTeamDeBuff(*from._impl_.pvesetteamdebuff_);
  }
  if (from._internal_has_chosecardgroup()) {
    _this->_impl_.chosecardgroup_ = new ::msg::CSRspChoseCardGroup(*from._impl_.chosecardgroup_);
  }
  if (from._internal_has_removeovertimebuff()) {
    _this->_impl_.removeovertimebuff_ = new ::msg::CSRspRemoveOvertimeBuff(*from._impl_.removeovertimebuff_);
  }
  if (from._internal_has_updatenewcardgroupsign()) {
    _this->_impl_.updatenewcardgroupsign_ = new ::msg::CSRspUpdateNewCardGroupSign(*from._impl_.updatenewcardgroupsign_);
  }
  if (from._internal_has_tdgetonhookaward()) {
    _this->_impl_.tdgetonhookaward_ = new ::msg::CSRspTDGetOnHookAward(*from._impl_.tdgetonhookaward_);
  }
  if (from._internal_has_tddraw()) {
    _this->_impl_.tddraw_ = new ::msg::CsRspTDDraw(*from._impl_.tddraw_);
  }
  if (from._internal_has_tdbuycard()) {
    _this->_impl_.tdbuycard_ = new ::msg::CsRspTDBuyCard(*from._impl_.tdbuycard_);
  }
  if (from._internal_has_tdsetcardgroup()) {
    _this->_impl_.tdsetcardgroup_ = new ::msg::CSRspTDSetCardGroup(*from._impl_.tdsetcardgroup_);
  }
  if (from._internal_has_tdlevelup()) {
    _this->_impl_.tdlevelup_ = new ::msg::CSRspTDLevelUp(*from._impl_.tdlevelup_);
  }
  if (from._internal_has_tdequip()) {
    _this->_impl_.tdequip_ = new ::msg::CSRspTDEquip(*from._impl_.tdequip_);
  }
  if (from._internal_has_mentorupdatesetting()) {
    _this->_impl_.mentorupdatesetting_ = new ::msg::CSRspMentorUpdateSetting(*from._impl_.mentorupdatesetting_);
  }
  if (from._internal_has_mentorinvite()) {
    _this->_impl_.mentorinvite_ = new ::msg::CSRspMentorInvite(*from._impl_.mentorinvite_);
  }
  if (from._internal_has_mentorconfirminvite()) {
    _this->_impl_.mentorconfirminvite_ = new ::msg::CSRspMentorConfirmInvite(*from._impl_.mentorconfirminvite_);
  }
  if (from._internal_has_mentorrecommendlist()) {
    _this->_impl_.mentorrecommendlist_ = new ::msg::CSRspMentorRecommendList(*from._impl_.mentorrecommendlist_);
  }
  if (from._internal_has_mentorgettaskaward()) {
    _this->_impl_.mentorgettaskaward_ = new ::msg::CSRspMentorGetTaskAward(*from._impl_.mentorgettaskaward_);
  }
  if (from._internal_has_mentorgraduate()) {
    _this->_impl_.mentorgraduate_ = new ::msg::CSRspMentorGraduate(*from._impl_.mentorgraduate_);
  }
  if (from._internal_has_mentorrelieverelation()) {
    _this->_impl_.mentorrelieverelation_ = new ::msg::CSRspMentorRelieveRelation(*from._impl_.mentorrelieverelation_);
  }
  if (from._internal_has_getmentorinfo()) {
    _this->_impl_.getmentorinfo_ = new ::msg::CSRspGetMentorInfo(*from._impl_.getmentorinfo_);
  }
  if (from._internal_has_mentorgetinvitemsg()) {
    _this->_impl_.mentorgetinvitemsg_ = new ::msg::CSRspMentorGetInviteMsg(*from._impl_.mentorgetinvitemsg_);
  }
  if (from._internal_has_teammsg()) {
    _this->_impl_.teammsg_ = new ::msg::CSRspTeamMsg(*from._impl_.teammsg_);
  }
  if (from._internal_has_chatmsg()) {
    _this->_impl_.chatmsg_ = new ::msg::CSRspChatMsg(*from._impl_.chatmsg_);
  }
  if (from._internal_has_channelchat()) {
    _this->_impl_.channelchat_ = new ::msg::CSRspChannelChat(*from._impl_.channelchat_);
  }
  if (from._internal_has_updatecardgroupbetter()) {
    _this->_impl_.updatecardgroupbetter_ = new ::msg::CSRspUpdateCardGroupBetter(*from._impl_.updatecardgroupbetter_);
  }
  if (from._internal_has_updatecardgroupsetting()) {
    _this->_impl_.updatecardgroupsetting_ = new ::msg::CSRspUpdateCardGroupSetting(*from._impl_.updatecardgroupsetting_);
  }
  if (from._internal_has_setauctionname()) {
    _this->_impl_.setauctionname_ = new ::msg::CSRspSetAuctionName(*from._impl_.setauctionname_);
  }
  if (from._internal_has_setauctionremark()) {
    _this->_impl_.setauctionremark_ = new ::msg::CSRspSetAuctionRemark(*from._impl_.setauctionremark_);
  }
  if (from._internal_has_getbalance()) {
    _this->_impl_.getbalance_ = new ::msg::CSRspGetBalance(*from._impl_.getbalance_);
  }
  if (from._internal_has_rechargebalance()) {
    _this->_impl_.rechargebalance_ = new ::msg::CSRspRechargeBalance(*from._impl_.rechargebalance_);
  }
  if (from._internal_has_withdrawbalance()) {
    _this->_impl_.withdrawbalance_ = new ::msg::CSRspWithdrawBalance(*from._impl_.withdrawbalance_);
  }
  if (from._internal_has_personalrecommendmall()) {
    _this->_impl_.personalrecommendmall_ = new ::msg::CSRspPersonalRecommendMall(*from._impl_.personalrecommendmall_);
  }
  if (from._internal_has_getmedalchestaward()) {
    _this->_impl_.getmedalchestaward_ = new ::msg::CSRspGetMedalChestAward(*from._impl_.getmedalchestaward_);
  }
  if (from._internal_has_setitemautouse()) {
    _this->_impl_.setitemautouse_ = new ::msg::CSRspSetItemAutoUse(*from._impl_.setitemautouse_);
  }
  ::memcpy(&_impl_.seq_, &from._impl_.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errcode_) -
    reinterpret_cast<char*>(&_impl_.seq_)) + sizeof(_impl_.errcode_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspBody)
}

inline void CSRspBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errmsg_){}
    , decltype(_impl_.heart_){nullptr}
    , decltype(_impl_.login_){nullptr}
    , decltype(_impl_.versioncheck_){nullptr}
    , decltype(_impl_.resourceversioncheck_){nullptr}
    , decltype(_impl_.applyhallserver_){nullptr}
    , decltype(_impl_.getnumrank_){nullptr}
    , decltype(_impl_.worldchat_){nullptr}
    , decltype(_impl_.playersbaseinfo_){nullptr}
    , decltype(_impl_.playerdetailinfo_){nullptr}
    , decltype(_impl_.readmail_){nullptr}
    , decltype(_impl_.getmailaward_){nullptr}
    , decltype(_impl_.buyegg_){nullptr}
    , decltype(_impl_.usernameset_){nullptr}
    , decltype(_impl_.usernamerandom_){nullptr}
    , decltype(_impl_.headpicset_){nullptr}
    , decltype(_impl_.dresschessplayer_){nullptr}
    , decltype(_impl_.dressscene_){nullptr}
    , decltype(_impl_.pvplogin_){nullptr}
    , decltype(_impl_.pvpend_){nullptr}
    , decltype(_impl_.playerfinish_){nullptr}
    , decltype(_impl_.playerquit_){nullptr}
    , decltype(_impl_.sellitem_){nullptr}
    , decltype(_impl_.getevalaward_){nullptr}
    , decltype(_impl_.usechessplayer_){nullptr}
    , decltype(_impl_.guidreport_){nullptr}
    , decltype(_impl_.getcodeaward_){nullptr}
    , decltype(_impl_.roundreport_){nullptr}
    , decltype(_impl_.loadingprogress_){nullptr}
    , decltype(_impl_.pvpchat_){nullptr}
    , decltype(_impl_.chesscombine_){nullptr}
    , decltype(_impl_.expose_){nullptr}
    , decltype(_impl_.applyorderid_){nullptr}
    , decltype(_impl_.reportorderinfo_){nullptr}
    , decltype(_impl_.setitem_){nullptr}
    , decltype(_impl_.unsetitem_){nullptr}
    , decltype(_impl_.randomitem_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.setchessplayer_){nullptr}
    , decltype(_impl_.unsetchessplayer_){nullptr}
    , decltype(_impl_.getfanslist_){nullptr}
    , decltype(_impl_.followplayer_){nullptr}
    , decltype(_impl_.unfollowplayer_){nullptr}
    , decltype(_impl_.playersstatusinfo_){nullptr}
    , decltype(_impl_.invitejointeam_){nullptr}
    , decltype(_impl_.jointeam_){nullptr}
    , decltype(_impl_.reportpayresponse_){nullptr}
    , decltype(_impl_.rejectjointeam_){nullptr}
    , decltype(_impl_.shieldchat_){nullptr}
    , decltype(_impl_.buypassportlevel_){nullptr}
    , decltype(_impl_.upgradepassport_){nullptr}
    , decltype(_impl_.getpassportlevelaward_){nullptr}
    , decltype(_impl_.getpassporttaskaward_){nullptr}
    , decltype(_impl_.telbook_){nullptr}
    , decltype(_impl_.activatepassport_){nullptr}
    , decltype(_impl_.rankseasoneval_){nullptr}
    , decltype(_impl_.bindaccount_){nullptr}
    , decltype(_impl_.incadsshowcount_){nullptr}
    , decltype(_impl_.usebonuscard_){nullptr}
    , decltype(_impl_.getseasonaward_){nullptr}
    , decltype(_impl_.getalphaactivityaward_){nullptr}
    , decltype(_impl_.getlanguagedata_){nullptr}
    , decltype(_impl_.getactivityaward_){nullptr}
    , decltype(_impl_.getactivitydata_){nullptr}
    , decltype(_impl_.sendsms_){nullptr}
    , decltype(_impl_.getmeleeaward_){nullptr}
    , decltype(_impl_.addaitoteam_){nullptr}
    , decltype(_impl_.share_){nullptr}
    , decltype(_impl_.skipinterface_){nullptr}
    , decltype(_impl_.teamgame_){nullptr}
    , decltype(_impl_.setteammode_){nullptr}
    , decltype(_impl_.historypvpshowpermission_){nullptr}
    , decltype(_impl_.searchteam_){nullptr}
    , decltype(_impl_.applychat_){nullptr}
    , decltype(_impl_.chatlogin_){nullptr}
    , decltype(_impl_.probenetdelay_){nullptr}
    , decltype(_impl_.geteggs_){nullptr}
    , decltype(_impl_.buygoods_){nullptr}
    , decltype(_impl_.exchangepassportgoods_){nullptr}
    , decltype(_impl_.usepassporttaskcard_){nullptr}
    , decltype(_impl_.openrandchest_){nullptr}
    , decltype(_impl_.egglottery_){nullptr}
    , decltype(_impl_.querydiamondbalance_){nullptr}
    , decltype(_impl_.useitem_){nullptr}
    , decltype(_impl_.useexperiencecard_){nullptr}
    , decltype(_impl_.randtargetitem_){nullptr}
    , decltype(_impl_.addblacklist_){nullptr}
    , decltype(_impl_.removeblacklist_){nullptr}
    , decltype(_impl_.reportplayerbirth_){nullptr}
    , decltype(_impl_.reportinfoinput_){nullptr}
    , decltype(_impl_.sendverificationcode_){nullptr}
    , decltype(_impl_.bindphonenumber_){nullptr}
    , decltype(_impl_.worldinvite_){nullptr}
    , decltype(_impl_.removeexpireitem_){nullptr}
    , decltype(_impl_.getmallgoods_){nullptr}
    , decltype(_impl_.buymallgoods_){nullptr}
    , decltype(_impl_.bindsharingcode_){nullptr}
    , decltype(_impl_.wxblessbag_){nullptr}
    , decltype(_impl_.updatefriendsingame_){nullptr}
    , decltype(_impl_.sharereward_){nullptr}
    , decltype(_impl_.allfightinfo_){nullptr}
    , decltype(_impl_.getoldplayer_){nullptr}
    , decltype(_impl_.bindoldplayer_){nullptr}
    , decltype(_impl_.sendverificationcodewithcheckredis_){nullptr}
    , decltype(_impl_.reportsetting_){nullptr}
    , decltype(_impl_.antidata_){nullptr}
    , decltype(_impl_.tlogdata_){nullptr}
    , decltype(_impl_.daysign_){nullptr}
    , decltype(_impl_.dayfitavoid_){nullptr}
    , decltype(_impl_.sharecountaward_){nullptr}
    , decltype(_impl_.realationstar_){nullptr}
    , decltype(_impl_.getrealationstarinvitesucc_){nullptr}
    , decltype(_impl_.getrealationstar_){nullptr}
    , decltype(_impl_.rspactrecord_){nullptr}
    , decltype(_impl_.joinvoiceteam_){nullptr}
    , decltype(_impl_.joinvoicepvp_){nullptr}
    , decltype(_impl_.joinvoicecamp_){nullptr}
    , decltype(_impl_.usercountryset_){nullptr}
    , decltype(_impl_.observe_){nullptr}
    , decltype(_impl_.getrecommendpvp_){nullptr}
    , decltype(_impl_.observelogin_){nullptr}
    , decltype(_impl_.quitobserve_){nullptr}
    , decltype(_impl_.getobserveinfo_){nullptr}
    , decltype(_impl_.freeflow_){nullptr}
    , decltype(_impl_.setpushtoken_){nullptr}
    , decltype(_impl_.tlogevent_){nullptr}
    , decltype(_impl_.wxvvipaward_){nullptr}
    , decltype(_impl_.relationstarwx_){nullptr}
    , decltype(_impl_.sendwxredpacket_){nullptr}
    , decltype(_impl_.recvwxredpacket_){nullptr}
    , decltype(_impl_.wxredpktlike_){nullptr}
    , decltype(_impl_.wxredpktrank_){nullptr}
    , decltype(_impl_.setobserveprivilege_){nullptr}
    , decltype(_impl_.presetfastchat_){nullptr}
    , decltype(_impl_.changeslotteam_){nullptr}
    , decltype(_impl_.changesubmodeteam_){nullptr}
    , decltype(_impl_.confirmchangeslotteam_){nullptr}
    , decltype(_impl_.pvproundend_){nullptr}
    , decltype(_impl_.pvp_){nullptr}
    , decltype(_impl_.teamready_){nullptr}
    , decltype(_impl_.bindoldbusinessplayer_){nullptr}
    , decltype(_impl_.translate_){nullptr}
    , decltype(_impl_.submitquestionnaire_){nullptr}
    , decltype(_impl_.cancelchangeslot_){nullptr}
    , decltype(_impl_.setchessskin_){nullptr}
    , decltype(_impl_.unsetchessskin_){nullptr}
    , decltype(_impl_.compose_){nullptr}
    , decltype(_impl_.video_){nullptr}
    , decltype(_impl_.offhelpreddot_){nullptr}
    , decltype(_impl_.changelanguage_){nullptr}
    , decltype(_impl_.setprovince_){nullptr}
    , decltype(_impl_.longyuanvoice_){nullptr}
    , decltype(_impl_.enrolltournament_){nullptr}
    , decltype(_impl_.jointournamentroom_){nullptr}
    , decltype(_impl_.tournamentpointaward_){nullptr}
    , decltype(_impl_.getenrollplayers_){nullptr}
    , decltype(_impl_.dealwebmail_){nullptr}
    , decltype(_impl_.challengeagain_){nullptr}
    , decltype(_impl_.historychat_){nullptr}
    , decltype(_impl_.setfriendinvisible_){nullptr}
    , decltype(_impl_.getobserveaward_){nullptr}
    , decltype(_impl_.inviteobserve_){nullptr}
    , decltype(_impl_.rejectobserve_){nullptr}
    , decltype(_impl_.gettxplayer_){nullptr}
    , decltype(_impl_.getthirdpvpinfo_){nullptr}
    , decltype(_impl_.markplayerguide_){nullptr}
    , decltype(_impl_.chessskinclicked_){nullptr}
    , decltype(_impl_.queryps4entitlements_){nullptr}
    , decltype(_impl_.actdaysign_){nullptr}
    , decltype(_impl_.havethirdpvpinfo_){nullptr}
    , decltype(_impl_.activitymall_){nullptr}
    , decltype(_impl_.psonly_){nullptr}
    , decltype(_impl_.changechanneltype_){nullptr}
    , decltype(_impl_.customcardopt_){nullptr}
    , decltype(_impl_.championhistory_){nullptr}
    , decltype(_impl_.tournamentlasttoprank_){nullptr}
    , decltype(_impl_.bigwinnerdailyaward_){nullptr}
    , decltype(_impl_.bigwinnerscorehistory_){nullptr}
    , decltype(_impl_.smeltitem_){nullptr}
    , decltype(_impl_.pveuptalentlevel_){nullptr}
    , decltype(_impl_.luckyaward_){nullptr}
    , decltype(_impl_.applychannel_){nullptr}
    , decltype(_impl_.obteaminfo_){nullptr}
    , decltype(_impl_.getpvpservergroup_){nullptr}
    , decltype(_impl_.reportpvpinfo_){nullptr}
    , decltype(_impl_.chooseplayer_){nullptr}
    , decltype(_impl_.pingtest_){nullptr}
    , decltype(_impl_.reportregioninfo_){nullptr}
    , decltype(_impl_.recalledplaeyr_){nullptr}
    , decltype(_impl_.weblogin_){nullptr}
    , decltype(_impl_.invitecodereset_){nullptr}
    , decltype(_impl_.recallreward_){nullptr}
    , decltype(_impl_.switchtocommonmatch_){nullptr}
    , decltype(_impl_.switchmodeinteam_){nullptr}
    , decltype(_impl_.gettnroomstate_){nullptr}
    , decltype(_impl_.workshopmatch_){nullptr}
    , decltype(_impl_.buyworkshopticket_){nullptr}
    , decltype(_impl_.favouriteworkshopmap_){nullptr}
    , decltype(_impl_.shortcutmapsop_){nullptr}
    , decltype(_impl_.playerstournamentinfo_){nullptr}
    , decltype(_impl_.scoreworkshopmap_){nullptr}
    , decltype(_impl_.mapsvisitedbyfriends_){nullptr}
    , decltype(_impl_.verifyrealname_){nullptr}
    , decltype(_impl_.fakepay_){nullptr}
    , decltype(_impl_.guildcreate_){nullptr}
    , decltype(_impl_.guildapply_){nullptr}
    , decltype(_impl_.guildhome_){nullptr}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.guildapprove_){nullptr}
    , decltype(_impl_.guildrole_){nullptr}
    , decltype(_impl_.guildmodify_){nullptr}
    , decltype(_impl_.guildkickoff_){nullptr}
    , decltype(_impl_.guilddismiss_){nullptr}
    , decltype(_impl_.guildexit_){nullptr}
    , decltype(_impl_.guildchat_){nullptr}
    , decltype(_impl_.guildlist_){nullptr}
    , decltype(_impl_.guildrecommendplayers_){nullptr}
    , decltype(_impl_.guildinvitelist_){nullptr}
    , decltype(_impl_.guildinvite_){nullptr}
    , decltype(_impl_.guildrejectinvite_){nullptr}
    , decltype(_impl_.getvngcommentaward_){nullptr}
    , decltype(_impl_.levelupchest_){nullptr}
    , decltype(_impl_.watchad_){nullptr}
    , decltype(_impl_.pstournamentroom_){nullptr}
    , decltype(_impl_.getadcumulateaward_){nullptr}
    , decltype(_impl_.setmessengerpos_){nullptr}
    , decltype(_impl_.antiaddictiontime_){nullptr}
    , decltype(_impl_.cancelreconnect_){nullptr}
    , decltype(_impl_.reconnect_){nullptr}
    , decltype(_impl_.passthrough_){nullptr}
    , decltype(_impl_.visitplayer_){nullptr}
    , decltype(_impl_.leavegameearly_){nullptr}
    , decltype(_impl_.gdcommonbin_){nullptr}
    , decltype(_impl_.gdbindata_){nullptr}
    , decltype(_impl_.battlecampresult_){nullptr}
    , decltype(_impl_.autobattleop_){nullptr}
    , decltype(_impl_.restrictuser_){nullptr}
    , decltype(_impl_.equipselectrate_){nullptr}
    , decltype(_impl_.reportabsent_){nullptr}
    , decltype(_impl_.recommendweek_){nullptr}
    , decltype(_impl_.recommendofficial_){nullptr}
    , decltype(_impl_.recommendlatest_){nullptr}
    , decltype(_impl_.recommendhistory_){nullptr}
    , decltype(_impl_.recommendcollect_){nullptr}
    , decltype(_impl_.recommendset_){nullptr}
    , decltype(_impl_.recommendgetcollection_){nullptr}
    , decltype(_impl_.recommendequip_){nullptr}
    , decltype(_impl_.logincancel_){nullptr}
    , decltype(_impl_.convertdebris_){nullptr}
    , decltype(_impl_.protectioncard_){nullptr}
    , decltype(_impl_.usepassportcard_){nullptr}
    , decltype(_impl_.setmedal_){nullptr}
    , decltype(_impl_.unsetmedal_){nullptr}
    , decltype(_impl_.playermedals_){nullptr}
    , decltype(_impl_.updatehotdot_){nullptr}
    , decltype(_impl_.queryhotdot_){nullptr}
    , decltype(_impl_.setcache_){nullptr}
    , decltype(_impl_.getcache_){nullptr}
    , decltype(_impl_.buychallengecount_){nullptr}
    , decltype(_impl_.getpverank_){nullptr}
    , decltype(_impl_.authaccount_){nullptr}
    , decltype(_impl_.unbindaccount_){nullptr}
    , decltype(_impl_.bagtoitem_){nullptr}
    , decltype(_impl_.identifyitem_){nullptr}
    , decltype(_impl_.insetitemaffix_){nullptr}
    , decltype(_impl_.unsetitemaffix_){nullptr}
    , decltype(_impl_.setdefaultattributes_){nullptr}
    , decltype(_impl_.checkcancel_){nullptr}
    , decltype(_impl_.cancelaccount_){nullptr}
    , decltype(_impl_.oauthapp_){nullptr}
    , decltype(_impl_.selfnumrankdata_){nullptr}
    , decltype(_impl_.updatecardgroup_){nullptr}
    , decltype(_impl_.updatecardgroupname_){nullptr}
    , decltype(_impl_.buypvebuff_){nullptr}
    , decltype(_impl_.setcardgroup_){nullptr}
    , decltype(_impl_.buypvechesstemplate_){nullptr}
    , decltype(_impl_.pveunlockchesstemplate_){nullptr}
    , decltype(_impl_.pvesetteamdebuff_){nullptr}
    , decltype(_impl_.chosecardgroup_){nullptr}
    , decltype(_impl_.removeovertimebuff_){nullptr}
    , decltype(_impl_.updatenewcardgroupsign_){nullptr}
    , decltype(_impl_.tdgetonhookaward_){nullptr}
    , decltype(_impl_.tddraw_){nullptr}
    , decltype(_impl_.tdbuycard_){nullptr}
    , decltype(_impl_.tdsetcardgroup_){nullptr}
    , decltype(_impl_.tdlevelup_){nullptr}
    , decltype(_impl_.tdequip_){nullptr}
    , decltype(_impl_.mentorupdatesetting_){nullptr}
    , decltype(_impl_.mentorinvite_){nullptr}
    , decltype(_impl_.mentorconfirminvite_){nullptr}
    , decltype(_impl_.mentorrecommendlist_){nullptr}
    , decltype(_impl_.mentorgettaskaward_){nullptr}
    , decltype(_impl_.mentorgraduate_){nullptr}
    , decltype(_impl_.mentorrelieverelation_){nullptr}
    , decltype(_impl_.getmentorinfo_){nullptr}
    , decltype(_impl_.mentorgetinvitemsg_){nullptr}
    , decltype(_impl_.teammsg_){nullptr}
    , decltype(_impl_.chatmsg_){nullptr}
    , decltype(_impl_.channelchat_){nullptr}
    , decltype(_impl_.updatecardgroupbetter_){nullptr}
    , decltype(_impl_.updatecardgroupsetting_){nullptr}
    , decltype(_impl_.setauctionname_){nullptr}
    , decltype(_impl_.setauctionremark_){nullptr}
    , decltype(_impl_.getbalance_){nullptr}
    , decltype(_impl_.rechargebalance_){nullptr}
    , decltype(_impl_.withdrawbalance_){nullptr}
    , decltype(_impl_.personalrecommendmall_){nullptr}
    , decltype(_impl_.getmedalchestaward_){nullptr}
    , decltype(_impl_.setitemautouse_){nullptr}
    , decltype(_impl_.seq_){uint64_t{0u}}
    , decltype(_impl_.errcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSRspBody::~CSRspBody() {
  // @@protoc_insertion_point(destructor:msg.CSRspBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.heart_;
  if (this != internal_default_instance()) delete _impl_.login_;
  if (this != internal_default_instance()) delete _impl_.versioncheck_;
  if (this != internal_default_instance()) delete _impl_.resourceversioncheck_;
  if (this != internal_default_instance()) delete _impl_.applyhallserver_;
  if (this != internal_default_instance()) delete _impl_.getnumrank_;
  if (this != internal_default_instance()) delete _impl_.worldchat_;
  if (this != internal_default_instance()) delete _impl_.playersbaseinfo_;
  if (this != internal_default_instance()) delete _impl_.playerdetailinfo_;
  if (this != internal_default_instance()) delete _impl_.readmail_;
  if (this != internal_default_instance()) delete _impl_.getmailaward_;
  if (this != internal_default_instance()) delete _impl_.buyegg_;
  if (this != internal_default_instance()) delete _impl_.usernameset_;
  if (this != internal_default_instance()) delete _impl_.usernamerandom_;
  if (this != internal_default_instance()) delete _impl_.headpicset_;
  if (this != internal_default_instance()) delete _impl_.dresschessplayer_;
  if (this != internal_default_instance()) delete _impl_.dressscene_;
  if (this != internal_default_instance()) delete _impl_.pvplogin_;
  if (this != internal_default_instance()) delete _impl_.pvpend_;
  if (this != internal_default_instance()) delete _impl_.playerfinish_;
  if (this != internal_default_instance()) delete _impl_.playerquit_;
  if (this != internal_default_instance()) delete _impl_.sellitem_;
  if (this != internal_default_instance()) delete _impl_.getevalaward_;
  if (this != internal_default_instance()) delete _impl_.usechessplayer_;
  if (this != internal_default_instance()) delete _impl_.guidreport_;
  if (this != internal_default_instance()) delete _impl_.getcodeaward_;
  if (this != internal_default_instance()) delete _impl_.roundreport_;
  if (this != internal_default_instance()) delete _impl_.loadingprogress_;
  if (this != internal_default_instance()) delete _impl_.pvpchat_;
  if (this != internal_default_instance()) delete _impl_.chesscombine_;
  if (this != internal_default_instance()) delete _impl_.expose_;
  if (this != internal_default_instance()) delete _impl_.applyorderid_;
  if (this != internal_default_instance()) delete _impl_.reportorderinfo_;
  if (this != internal_default_instance()) delete _impl_.setitem_;
  if (this != internal_default_instance()) delete _impl_.unsetitem_;
  if (this != internal_default_instance()) delete _impl_.randomitem_;
  if (this != internal_default_instance()) delete _impl_.chat_;
  if (this != internal_default_instance()) delete _impl_.setchessplayer_;
  if (this != internal_default_instance()) delete _impl_.unsetchessplayer_;
  if (this != internal_default_instance()) delete _impl_.getfanslist_;
  if (this != internal_default_instance()) delete _impl_.followplayer_;
  if (this != internal_default_instance()) delete _impl_.unfollowplayer_;
  if (this != internal_default_instance()) delete _impl_.playersstatusinfo_;
  if (this != internal_default_instance()) delete _impl_.invitejointeam_;
  if (this != internal_default_instance()) delete _impl_.jointeam_;
  if (this != internal_default_instance()) delete _impl_.reportpayresponse_;
  if (this != internal_default_instance()) delete _impl_.rejectjointeam_;
  if (this != internal_default_instance()) delete _impl_.shieldchat_;
  if (this != internal_default_instance()) delete _impl_.buypassportlevel_;
  if (this != internal_default_instance()) delete _impl_.upgradepassport_;
  if (this != internal_default_instance()) delete _impl_.getpassportlevelaward_;
  if (this != internal_default_instance()) delete _impl_.getpassporttaskaward_;
  if (this != internal_default_instance()) delete _impl_.telbook_;
  if (this != internal_default_instance()) delete _impl_.activatepassport_;
  if (this != internal_default_instance()) delete _impl_.rankseasoneval_;
  if (this != internal_default_instance()) delete _impl_.bindaccount_;
  if (this != internal_default_instance()) delete _impl_.incadsshowcount_;
  if (this != internal_default_instance()) delete _impl_.usebonuscard_;
  if (this != internal_default_instance()) delete _impl_.getseasonaward_;
  if (this != internal_default_instance()) delete _impl_.getalphaactivityaward_;
  if (this != internal_default_instance()) delete _impl_.getlanguagedata_;
  if (this != internal_default_instance()) delete _impl_.getactivityaward_;
  if (this != internal_default_instance()) delete _impl_.getactivitydata_;
  if (this != internal_default_instance()) delete _impl_.sendsms_;
  if (this != internal_default_instance()) delete _impl_.getmeleeaward_;
  if (this != internal_default_instance()) delete _impl_.addaitoteam_;
  if (this != internal_default_instance()) delete _impl_.share_;
  if (this != internal_default_instance()) delete _impl_.skipinterface_;
  if (this != internal_default_instance()) delete _impl_.teamgame_;
  if (this != internal_default_instance()) delete _impl_.setteammode_;
  if (this != internal_default_instance()) delete _impl_.historypvpshowpermission_;
  if (this != internal_default_instance()) delete _impl_.searchteam_;
  if (this != internal_default_instance()) delete _impl_.applychat_;
  if (this != internal_default_instance()) delete _impl_.chatlogin_;
  if (this != internal_default_instance()) delete _impl_.probenetdelay_;
  if (this != internal_default_instance()) delete _impl_.geteggs_;
  if (this != internal_default_instance()) delete _impl_.buygoods_;
  if (this != internal_default_instance()) delete _impl_.exchangepassportgoods_;
  if (this != internal_default_instance()) delete _impl_.usepassporttaskcard_;
  if (this != internal_default_instance()) delete _impl_.openrandchest_;
  if (this != internal_default_instance()) delete _impl_.egglottery_;
  if (this != internal_default_instance()) delete _impl_.querydiamondbalance_;
  if (this != internal_default_instance()) delete _impl_.useitem_;
  if (this != internal_default_instance()) delete _impl_.useexperiencecard_;
  if (this != internal_default_instance()) delete _impl_.randtargetitem_;
  if (this != internal_default_instance()) delete _impl_.addblacklist_;
  if (this != internal_default_instance()) delete _impl_.removeblacklist_;
  if (this != internal_default_instance()) delete _impl_.reportplayerbirth_;
  if (this != internal_default_instance()) delete _impl_.reportinfoinput_;
  if (this != internal_default_instance()) delete _impl_.sendverificationcode_;
  if (this != internal_default_instance()) delete _impl_.bindphonenumber_;
  if (this != internal_default_instance()) delete _impl_.worldinvite_;
  if (this != internal_default_instance()) delete _impl_.removeexpireitem_;
  if (this != internal_default_instance()) delete _impl_.getmallgoods_;
  if (this != internal_default_instance()) delete _impl_.buymallgoods_;
  if (this != internal_default_instance()) delete _impl_.bindsharingcode_;
  if (this != internal_default_instance()) delete _impl_.wxblessbag_;
  if (this != internal_default_instance()) delete _impl_.updatefriendsingame_;
  if (this != internal_default_instance()) delete _impl_.sharereward_;
  if (this != internal_default_instance()) delete _impl_.allfightinfo_;
  if (this != internal_default_instance()) delete _impl_.getoldplayer_;
  if (this != internal_default_instance()) delete _impl_.bindoldplayer_;
  if (this != internal_default_instance()) delete _impl_.sendverificationcodewithcheckredis_;
  if (this != internal_default_instance()) delete _impl_.reportsetting_;
  if (this != internal_default_instance()) delete _impl_.antidata_;
  if (this != internal_default_instance()) delete _impl_.tlogdata_;
  if (this != internal_default_instance()) delete _impl_.daysign_;
  if (this != internal_default_instance()) delete _impl_.dayfitavoid_;
  if (this != internal_default_instance()) delete _impl_.sharecountaward_;
  if (this != internal_default_instance()) delete _impl_.realationstar_;
  if (this != internal_default_instance()) delete _impl_.getrealationstarinvitesucc_;
  if (this != internal_default_instance()) delete _impl_.getrealationstar_;
  if (this != internal_default_instance()) delete _impl_.rspactrecord_;
  if (this != internal_default_instance()) delete _impl_.joinvoiceteam_;
  if (this != internal_default_instance()) delete _impl_.joinvoicepvp_;
  if (this != internal_default_instance()) delete _impl_.joinvoicecamp_;
  if (this != internal_default_instance()) delete _impl_.usercountryset_;
  if (this != internal_default_instance()) delete _impl_.observe_;
  if (this != internal_default_instance()) delete _impl_.getrecommendpvp_;
  if (this != internal_default_instance()) delete _impl_.observelogin_;
  if (this != internal_default_instance()) delete _impl_.quitobserve_;
  if (this != internal_default_instance()) delete _impl_.getobserveinfo_;
  if (this != internal_default_instance()) delete _impl_.freeflow_;
  if (this != internal_default_instance()) delete _impl_.setpushtoken_;
  if (this != internal_default_instance()) delete _impl_.tlogevent_;
  if (this != internal_default_instance()) delete _impl_.wxvvipaward_;
  if (this != internal_default_instance()) delete _impl_.relationstarwx_;
  if (this != internal_default_instance()) delete _impl_.sendwxredpacket_;
  if (this != internal_default_instance()) delete _impl_.recvwxredpacket_;
  if (this != internal_default_instance()) delete _impl_.wxredpktlike_;
  if (this != internal_default_instance()) delete _impl_.wxredpktrank_;
  if (this != internal_default_instance()) delete _impl_.setobserveprivilege_;
  if (this != internal_default_instance()) delete _impl_.presetfastchat_;
  if (this != internal_default_instance()) delete _impl_.changeslotteam_;
  if (this != internal_default_instance()) delete _impl_.changesubmodeteam_;
  if (this != internal_default_instance()) delete _impl_.confirmchangeslotteam_;
  if (this != internal_default_instance()) delete _impl_.pvproundend_;
  if (this != internal_default_instance()) delete _impl_.pvp_;
  if (this != internal_default_instance()) delete _impl_.teamready_;
  if (this != internal_default_instance()) delete _impl_.bindoldbusinessplayer_;
  if (this != internal_default_instance()) delete _impl_.translate_;
  if (this != internal_default_instance()) delete _impl_.submitquestionnaire_;
  if (this != internal_default_instance()) delete _impl_.cancelchangeslot_;
  if (this != internal_default_instance()) delete _impl_.setchessskin_;
  if (this != internal_default_instance()) delete _impl_.unsetchessskin_;
  if (this != internal_default_instance()) delete _impl_.compose_;
  if (this != internal_default_instance()) delete _impl_.video_;
  if (this != internal_default_instance()) delete _impl_.offhelpreddot_;
  if (this != internal_default_instance()) delete _impl_.changelanguage_;
  if (this != internal_default_instance()) delete _impl_.setprovince_;
  if (this != internal_default_instance()) delete _impl_.longyuanvoice_;
  if (this != internal_default_instance()) delete _impl_.enrolltournament_;
  if (this != internal_default_instance()) delete _impl_.jointournamentroom_;
  if (this != internal_default_instance()) delete _impl_.tournamentpointaward_;
  if (this != internal_default_instance()) delete _impl_.getenrollplayers_;
  if (this != internal_default_instance()) delete _impl_.dealwebmail_;
  if (this != internal_default_instance()) delete _impl_.challengeagain_;
  if (this != internal_default_instance()) delete _impl_.historychat_;
  if (this != internal_default_instance()) delete _impl_.setfriendinvisible_;
  if (this != internal_default_instance()) delete _impl_.getobserveaward_;
  if (this != internal_default_instance()) delete _impl_.inviteobserve_;
  if (this != internal_default_instance()) delete _impl_.rejectobserve_;
  if (this != internal_default_instance()) delete _impl_.gettxplayer_;
  if (this != internal_default_instance()) delete _impl_.getthirdpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.markplayerguide_;
  if (this != internal_default_instance()) delete _impl_.chessskinclicked_;
  if (this != internal_default_instance()) delete _impl_.queryps4entitlements_;
  if (this != internal_default_instance()) delete _impl_.actdaysign_;
  if (this != internal_default_instance()) delete _impl_.havethirdpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.activitymall_;
  if (this != internal_default_instance()) delete _impl_.psonly_;
  if (this != internal_default_instance()) delete _impl_.changechanneltype_;
  if (this != internal_default_instance()) delete _impl_.customcardopt_;
  if (this != internal_default_instance()) delete _impl_.championhistory_;
  if (this != internal_default_instance()) delete _impl_.tournamentlasttoprank_;
  if (this != internal_default_instance()) delete _impl_.bigwinnerdailyaward_;
  if (this != internal_default_instance()) delete _impl_.bigwinnerscorehistory_;
  if (this != internal_default_instance()) delete _impl_.smeltitem_;
  if (this != internal_default_instance()) delete _impl_.pveuptalentlevel_;
  if (this != internal_default_instance()) delete _impl_.luckyaward_;
  if (this != internal_default_instance()) delete _impl_.applychannel_;
  if (this != internal_default_instance()) delete _impl_.obteaminfo_;
  if (this != internal_default_instance()) delete _impl_.getpvpservergroup_;
  if (this != internal_default_instance()) delete _impl_.reportpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.chooseplayer_;
  if (this != internal_default_instance()) delete _impl_.pingtest_;
  if (this != internal_default_instance()) delete _impl_.reportregioninfo_;
  if (this != internal_default_instance()) delete _impl_.recalledplaeyr_;
  if (this != internal_default_instance()) delete _impl_.weblogin_;
  if (this != internal_default_instance()) delete _impl_.invitecodereset_;
  if (this != internal_default_instance()) delete _impl_.recallreward_;
  if (this != internal_default_instance()) delete _impl_.switchtocommonmatch_;
  if (this != internal_default_instance()) delete _impl_.switchmodeinteam_;
  if (this != internal_default_instance()) delete _impl_.gettnroomstate_;
  if (this != internal_default_instance()) delete _impl_.workshopmatch_;
  if (this != internal_default_instance()) delete _impl_.buyworkshopticket_;
  if (this != internal_default_instance()) delete _impl_.favouriteworkshopmap_;
  if (this != internal_default_instance()) delete _impl_.shortcutmapsop_;
  if (this != internal_default_instance()) delete _impl_.playerstournamentinfo_;
  if (this != internal_default_instance()) delete _impl_.scoreworkshopmap_;
  if (this != internal_default_instance()) delete _impl_.mapsvisitedbyfriends_;
  if (this != internal_default_instance()) delete _impl_.verifyrealname_;
  if (this != internal_default_instance()) delete _impl_.fakepay_;
  if (this != internal_default_instance()) delete _impl_.guildcreate_;
  if (this != internal_default_instance()) delete _impl_.guildapply_;
  if (this != internal_default_instance()) delete _impl_.guildhome_;
  if (this != internal_default_instance()) delete _impl_.guildinfo_;
  if (this != internal_default_instance()) delete _impl_.guildapprove_;
  if (this != internal_default_instance()) delete _impl_.guildrole_;
  if (this != internal_default_instance()) delete _impl_.guildmodify_;
  if (this != internal_default_instance()) delete _impl_.guildkickoff_;
  if (this != internal_default_instance()) delete _impl_.guilddismiss_;
  if (this != internal_default_instance()) delete _impl_.guildexit_;
  if (this != internal_default_instance()) delete _impl_.guildchat_;
  if (this != internal_default_instance()) delete _impl_.guildlist_;
  if (this != internal_default_instance()) delete _impl_.guildrecommendplayers_;
  if (this != internal_default_instance()) delete _impl_.guildinvitelist_;
  if (this != internal_default_instance()) delete _impl_.guildinvite_;
  if (this != internal_default_instance()) delete _impl_.guildrejectinvite_;
  if (this != internal_default_instance()) delete _impl_.getvngcommentaward_;
  if (this != internal_default_instance()) delete _impl_.levelupchest_;
  if (this != internal_default_instance()) delete _impl_.watchad_;
  if (this != internal_default_instance()) delete _impl_.pstournamentroom_;
  if (this != internal_default_instance()) delete _impl_.getadcumulateaward_;
  if (this != internal_default_instance()) delete _impl_.setmessengerpos_;
  if (this != internal_default_instance()) delete _impl_.antiaddictiontime_;
  if (this != internal_default_instance()) delete _impl_.cancelreconnect_;
  if (this != internal_default_instance()) delete _impl_.reconnect_;
  if (this != internal_default_instance()) delete _impl_.passthrough_;
  if (this != internal_default_instance()) delete _impl_.visitplayer_;
  if (this != internal_default_instance()) delete _impl_.leavegameearly_;
  if (this != internal_default_instance()) delete _impl_.gdcommonbin_;
  if (this != internal_default_instance()) delete _impl_.gdbindata_;
  if (this != internal_default_instance()) delete _impl_.battlecampresult_;
  if (this != internal_default_instance()) delete _impl_.autobattleop_;
  if (this != internal_default_instance()) delete _impl_.restrictuser_;
  if (this != internal_default_instance()) delete _impl_.equipselectrate_;
  if (this != internal_default_instance()) delete _impl_.reportabsent_;
  if (this != internal_default_instance()) delete _impl_.recommendweek_;
  if (this != internal_default_instance()) delete _impl_.recommendofficial_;
  if (this != internal_default_instance()) delete _impl_.recommendlatest_;
  if (this != internal_default_instance()) delete _impl_.recommendhistory_;
  if (this != internal_default_instance()) delete _impl_.recommendcollect_;
  if (this != internal_default_instance()) delete _impl_.recommendset_;
  if (this != internal_default_instance()) delete _impl_.recommendgetcollection_;
  if (this != internal_default_instance()) delete _impl_.recommendequip_;
  if (this != internal_default_instance()) delete _impl_.logincancel_;
  if (this != internal_default_instance()) delete _impl_.convertdebris_;
  if (this != internal_default_instance()) delete _impl_.protectioncard_;
  if (this != internal_default_instance()) delete _impl_.usepassportcard_;
  if (this != internal_default_instance()) delete _impl_.setmedal_;
  if (this != internal_default_instance()) delete _impl_.unsetmedal_;
  if (this != internal_default_instance()) delete _impl_.playermedals_;
  if (this != internal_default_instance()) delete _impl_.updatehotdot_;
  if (this != internal_default_instance()) delete _impl_.queryhotdot_;
  if (this != internal_default_instance()) delete _impl_.setcache_;
  if (this != internal_default_instance()) delete _impl_.getcache_;
  if (this != internal_default_instance()) delete _impl_.buychallengecount_;
  if (this != internal_default_instance()) delete _impl_.getpverank_;
  if (this != internal_default_instance()) delete _impl_.authaccount_;
  if (this != internal_default_instance()) delete _impl_.unbindaccount_;
  if (this != internal_default_instance()) delete _impl_.bagtoitem_;
  if (this != internal_default_instance()) delete _impl_.identifyitem_;
  if (this != internal_default_instance()) delete _impl_.insetitemaffix_;
  if (this != internal_default_instance()) delete _impl_.unsetitemaffix_;
  if (this != internal_default_instance()) delete _impl_.setdefaultattributes_;
  if (this != internal_default_instance()) delete _impl_.checkcancel_;
  if (this != internal_default_instance()) delete _impl_.cancelaccount_;
  if (this != internal_default_instance()) delete _impl_.oauthapp_;
  if (this != internal_default_instance()) delete _impl_.selfnumrankdata_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroup_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroupname_;
  if (this != internal_default_instance()) delete _impl_.buypvebuff_;
  if (this != internal_default_instance()) delete _impl_.setcardgroup_;
  if (this != internal_default_instance()) delete _impl_.buypvechesstemplate_;
  if (this != internal_default_instance()) delete _impl_.pveunlockchesstemplate_;
  if (this != internal_default_instance()) delete _impl_.pvesetteamdebuff_;
  if (this != internal_default_instance()) delete _impl_.chosecardgroup_;
  if (this != internal_default_instance()) delete _impl_.removeovertimebuff_;
  if (this != internal_default_instance()) delete _impl_.updatenewcardgroupsign_;
  if (this != internal_default_instance()) delete _impl_.tdgetonhookaward_;
  if (this != internal_default_instance()) delete _impl_.tddraw_;
  if (this != internal_default_instance()) delete _impl_.tdbuycard_;
  if (this != internal_default_instance()) delete _impl_.tdsetcardgroup_;
  if (this != internal_default_instance()) delete _impl_.tdlevelup_;
  if (this != internal_default_instance()) delete _impl_.tdequip_;
  if (this != internal_default_instance()) delete _impl_.mentorupdatesetting_;
  if (this != internal_default_instance()) delete _impl_.mentorinvite_;
  if (this != internal_default_instance()) delete _impl_.mentorconfirminvite_;
  if (this != internal_default_instance()) delete _impl_.mentorrecommendlist_;
  if (this != internal_default_instance()) delete _impl_.mentorgettaskaward_;
  if (this != internal_default_instance()) delete _impl_.mentorgraduate_;
  if (this != internal_default_instance()) delete _impl_.mentorrelieverelation_;
  if (this != internal_default_instance()) delete _impl_.getmentorinfo_;
  if (this != internal_default_instance()) delete _impl_.mentorgetinvitemsg_;
  if (this != internal_default_instance()) delete _impl_.teammsg_;
  if (this != internal_default_instance()) delete _impl_.chatmsg_;
  if (this != internal_default_instance()) delete _impl_.channelchat_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroupbetter_;
  if (this != internal_default_instance()) delete _impl_.updatecardgroupsetting_;
  if (this != internal_default_instance()) delete _impl_.setauctionname_;
  if (this != internal_default_instance()) delete _impl_.setauctionremark_;
  if (this != internal_default_instance()) delete _impl_.getbalance_;
  if (this != internal_default_instance()) delete _impl_.rechargebalance_;
  if (this != internal_default_instance()) delete _impl_.withdrawbalance_;
  if (this != internal_default_instance()) delete _impl_.personalrecommendmall_;
  if (this != internal_default_instance()) delete _impl_.getmedalchestaward_;
  if (this != internal_default_instance()) delete _impl_.setitemautouse_;
}

void CSRspBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errmsg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.heart_ != nullptr) {
    delete _impl_.heart_;
  }
  _impl_.heart_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.login_ != nullptr) {
    delete _impl_.login_;
  }
  _impl_.login_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.versioncheck_ != nullptr) {
    delete _impl_.versioncheck_;
  }
  _impl_.versioncheck_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resourceversioncheck_ != nullptr) {
    delete _impl_.resourceversioncheck_;
  }
  _impl_.resourceversioncheck_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applyhallserver_ != nullptr) {
    delete _impl_.applyhallserver_;
  }
  _impl_.applyhallserver_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getnumrank_ != nullptr) {
    delete _impl_.getnumrank_;
  }
  _impl_.getnumrank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worldchat_ != nullptr) {
    delete _impl_.worldchat_;
  }
  _impl_.worldchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playersbaseinfo_ != nullptr) {
    delete _impl_.playersbaseinfo_;
  }
  _impl_.playersbaseinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerdetailinfo_ != nullptr) {
    delete _impl_.playerdetailinfo_;
  }
  _impl_.playerdetailinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.readmail_ != nullptr) {
    delete _impl_.readmail_;
  }
  _impl_.readmail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmailaward_ != nullptr) {
    delete _impl_.getmailaward_;
  }
  _impl_.getmailaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buyegg_ != nullptr) {
    delete _impl_.buyegg_;
  }
  _impl_.buyegg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usernameset_ != nullptr) {
    delete _impl_.usernameset_;
  }
  _impl_.usernameset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usernamerandom_ != nullptr) {
    delete _impl_.usernamerandom_;
  }
  _impl_.usernamerandom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.headpicset_ != nullptr) {
    delete _impl_.headpicset_;
  }
  _impl_.headpicset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dresschessplayer_ != nullptr) {
    delete _impl_.dresschessplayer_;
  }
  _impl_.dresschessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dressscene_ != nullptr) {
    delete _impl_.dressscene_;
  }
  _impl_.dressscene_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvplogin_ != nullptr) {
    delete _impl_.pvplogin_;
  }
  _impl_.pvplogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpend_ != nullptr) {
    delete _impl_.pvpend_;
  }
  _impl_.pvpend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerfinish_ != nullptr) {
    delete _impl_.playerfinish_;
  }
  _impl_.playerfinish_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerquit_ != nullptr) {
    delete _impl_.playerquit_;
  }
  _impl_.playerquit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sellitem_ != nullptr) {
    delete _impl_.sellitem_;
  }
  _impl_.sellitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getevalaward_ != nullptr) {
    delete _impl_.getevalaward_;
  }
  _impl_.getevalaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usechessplayer_ != nullptr) {
    delete _impl_.usechessplayer_;
  }
  _impl_.usechessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guidreport_ != nullptr) {
    delete _impl_.guidreport_;
  }
  _impl_.guidreport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getcodeaward_ != nullptr) {
    delete _impl_.getcodeaward_;
  }
  _impl_.getcodeaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.roundreport_ != nullptr) {
    delete _impl_.roundreport_;
  }
  _impl_.roundreport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.loadingprogress_ != nullptr) {
    delete _impl_.loadingprogress_;
  }
  _impl_.loadingprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpchat_ != nullptr) {
    delete _impl_.pvpchat_;
  }
  _impl_.pvpchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chesscombine_ != nullptr) {
    delete _impl_.chesscombine_;
  }
  _impl_.chesscombine_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expose_ != nullptr) {
    delete _impl_.expose_;
  }
  _impl_.expose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applyorderid_ != nullptr) {
    delete _impl_.applyorderid_;
  }
  _impl_.applyorderid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportorderinfo_ != nullptr) {
    delete _impl_.reportorderinfo_;
  }
  _impl_.reportorderinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setitem_ != nullptr) {
    delete _impl_.setitem_;
  }
  _impl_.setitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitem_ != nullptr) {
    delete _impl_.unsetitem_;
  }
  _impl_.unsetitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.randomitem_ != nullptr) {
    delete _impl_.randomitem_;
  }
  _impl_.randomitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setchessplayer_ != nullptr) {
    delete _impl_.setchessplayer_;
  }
  _impl_.setchessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessplayer_ != nullptr) {
    delete _impl_.unsetchessplayer_;
  }
  _impl_.unsetchessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getfanslist_ != nullptr) {
    delete _impl_.getfanslist_;
  }
  _impl_.getfanslist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.followplayer_ != nullptr) {
    delete _impl_.followplayer_;
  }
  _impl_.followplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unfollowplayer_ != nullptr) {
    delete _impl_.unfollowplayer_;
  }
  _impl_.unfollowplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playersstatusinfo_ != nullptr) {
    delete _impl_.playersstatusinfo_;
  }
  _impl_.playersstatusinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.invitejointeam_ != nullptr) {
    delete _impl_.invitejointeam_;
  }
  _impl_.invitejointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jointeam_ != nullptr) {
    delete _impl_.jointeam_;
  }
  _impl_.jointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportpayresponse_ != nullptr) {
    delete _impl_.reportpayresponse_;
  }
  _impl_.reportpayresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rejectjointeam_ != nullptr) {
    delete _impl_.rejectjointeam_;
  }
  _impl_.rejectjointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shieldchat_ != nullptr) {
    delete _impl_.shieldchat_;
  }
  _impl_.shieldchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buypassportlevel_ != nullptr) {
    delete _impl_.buypassportlevel_;
  }
  _impl_.buypassportlevel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.upgradepassport_ != nullptr) {
    delete _impl_.upgradepassport_;
  }
  _impl_.upgradepassport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpassportlevelaward_ != nullptr) {
    delete _impl_.getpassportlevelaward_;
  }
  _impl_.getpassportlevelaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpassporttaskaward_ != nullptr) {
    delete _impl_.getpassporttaskaward_;
  }
  _impl_.getpassporttaskaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.telbook_ != nullptr) {
    delete _impl_.telbook_;
  }
  _impl_.telbook_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activatepassport_ != nullptr) {
    delete _impl_.activatepassport_;
  }
  _impl_.activatepassport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rankseasoneval_ != nullptr) {
    delete _impl_.rankseasoneval_;
  }
  _impl_.rankseasoneval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindaccount_ != nullptr) {
    delete _impl_.bindaccount_;
  }
  _impl_.bindaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.incadsshowcount_ != nullptr) {
    delete _impl_.incadsshowcount_;
  }
  _impl_.incadsshowcount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usebonuscard_ != nullptr) {
    delete _impl_.usebonuscard_;
  }
  _impl_.usebonuscard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getseasonaward_ != nullptr) {
    delete _impl_.getseasonaward_;
  }
  _impl_.getseasonaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getalphaactivityaward_ != nullptr) {
    delete _impl_.getalphaactivityaward_;
  }
  _impl_.getalphaactivityaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getlanguagedata_ != nullptr) {
    delete _impl_.getlanguagedata_;
  }
  _impl_.getlanguagedata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getactivityaward_ != nullptr) {
    delete _impl_.getactivityaward_;
  }
  _impl_.getactivityaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getactivitydata_ != nullptr) {
    delete _impl_.getactivitydata_;
  }
  _impl_.getactivitydata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendsms_ != nullptr) {
    delete _impl_.sendsms_;
  }
  _impl_.sendsms_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmeleeaward_ != nullptr) {
    delete _impl_.getmeleeaward_;
  }
  _impl_.getmeleeaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addaitoteam_ != nullptr) {
    delete _impl_.addaitoteam_;
  }
  _impl_.addaitoteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.share_ != nullptr) {
    delete _impl_.share_;
  }
  _impl_.share_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.skipinterface_ != nullptr) {
    delete _impl_.skipinterface_;
  }
  _impl_.skipinterface_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamgame_ != nullptr) {
    delete _impl_.teamgame_;
  }
  _impl_.teamgame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setteammode_ != nullptr) {
    delete _impl_.setteammode_;
  }
  _impl_.setteammode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.historypvpshowpermission_ != nullptr) {
    delete _impl_.historypvpshowpermission_;
  }
  _impl_.historypvpshowpermission_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.searchteam_ != nullptr) {
    delete _impl_.searchteam_;
  }
  _impl_.searchteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applychat_ != nullptr) {
    delete _impl_.applychat_;
  }
  _impl_.applychat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chatlogin_ != nullptr) {
    delete _impl_.chatlogin_;
  }
  _impl_.chatlogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.probenetdelay_ != nullptr) {
    delete _impl_.probenetdelay_;
  }
  _impl_.probenetdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geteggs_ != nullptr) {
    delete _impl_.geteggs_;
  }
  _impl_.geteggs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buygoods_ != nullptr) {
    delete _impl_.buygoods_;
  }
  _impl_.buygoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchangepassportgoods_ != nullptr) {
    delete _impl_.exchangepassportgoods_;
  }
  _impl_.exchangepassportgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usepassporttaskcard_ != nullptr) {
    delete _impl_.usepassporttaskcard_;
  }
  _impl_.usepassporttaskcard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.openrandchest_ != nullptr) {
    delete _impl_.openrandchest_;
  }
  _impl_.openrandchest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.egglottery_ != nullptr) {
    delete _impl_.egglottery_;
  }
  _impl_.egglottery_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.querydiamondbalance_ != nullptr) {
    delete _impl_.querydiamondbalance_;
  }
  _impl_.querydiamondbalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.useitem_ != nullptr) {
    delete _impl_.useitem_;
  }
  _impl_.useitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.useexperiencecard_ != nullptr) {
    delete _impl_.useexperiencecard_;
  }
  _impl_.useexperiencecard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.randtargetitem_ != nullptr) {
    delete _impl_.randtargetitem_;
  }
  _impl_.randtargetitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addblacklist_ != nullptr) {
    delete _impl_.addblacklist_;
  }
  _impl_.addblacklist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeblacklist_ != nullptr) {
    delete _impl_.removeblacklist_;
  }
  _impl_.removeblacklist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportplayerbirth_ != nullptr) {
    delete _impl_.reportplayerbirth_;
  }
  _impl_.reportplayerbirth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportinfoinput_ != nullptr) {
    delete _impl_.reportinfoinput_;
  }
  _impl_.reportinfoinput_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcode_ != nullptr) {
    delete _impl_.sendverificationcode_;
  }
  _impl_.sendverificationcode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindphonenumber_ != nullptr) {
    delete _impl_.bindphonenumber_;
  }
  _impl_.bindphonenumber_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worldinvite_ != nullptr) {
    delete _impl_.worldinvite_;
  }
  _impl_.worldinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeexpireitem_ != nullptr) {
    delete _impl_.removeexpireitem_;
  }
  _impl_.removeexpireitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmallgoods_ != nullptr) {
    delete _impl_.getmallgoods_;
  }
  _impl_.getmallgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buymallgoods_ != nullptr) {
    delete _impl_.buymallgoods_;
  }
  _impl_.buymallgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindsharingcode_ != nullptr) {
    delete _impl_.bindsharingcode_;
  }
  _impl_.bindsharingcode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxblessbag_ != nullptr) {
    delete _impl_.wxblessbag_;
  }
  _impl_.wxblessbag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatefriendsingame_ != nullptr) {
    delete _impl_.updatefriendsingame_;
  }
  _impl_.updatefriendsingame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sharereward_ != nullptr) {
    delete _impl_.sharereward_;
  }
  _impl_.sharereward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allfightinfo_ != nullptr) {
    delete _impl_.allfightinfo_;
  }
  _impl_.allfightinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getoldplayer_ != nullptr) {
    delete _impl_.getoldplayer_;
  }
  _impl_.getoldplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldplayer_ != nullptr) {
    delete _impl_.bindoldplayer_;
  }
  _impl_.bindoldplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendverificationcodewithcheckredis_ != nullptr) {
    delete _impl_.sendverificationcodewithcheckredis_;
  }
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportsetting_ != nullptr) {
    delete _impl_.reportsetting_;
  }
  _impl_.reportsetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.antidata_ != nullptr) {
    delete _impl_.antidata_;
  }
  _impl_.antidata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tlogdata_ != nullptr) {
    delete _impl_.tlogdata_;
  }
  _impl_.tlogdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.daysign_ != nullptr) {
    delete _impl_.daysign_;
  }
  _impl_.daysign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dayfitavoid_ != nullptr) {
    delete _impl_.dayfitavoid_;
  }
  _impl_.dayfitavoid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sharecountaward_ != nullptr) {
    delete _impl_.sharecountaward_;
  }
  _impl_.sharecountaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.realationstar_ != nullptr) {
    delete _impl_.realationstar_;
  }
  _impl_.realationstar_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstarinvitesucc_ != nullptr) {
    delete _impl_.getrealationstarinvitesucc_;
  }
  _impl_.getrealationstarinvitesucc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getrealationstar_ != nullptr) {
    delete _impl_.getrealationstar_;
  }
  _impl_.getrealationstar_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rspactrecord_ != nullptr) {
    delete _impl_.rspactrecord_;
  }
  _impl_.rspactrecord_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoiceteam_ != nullptr) {
    delete _impl_.joinvoiceteam_;
  }
  _impl_.joinvoiceteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicepvp_ != nullptr) {
    delete _impl_.joinvoicepvp_;
  }
  _impl_.joinvoicepvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicecamp_ != nullptr) {
    delete _impl_.joinvoicecamp_;
  }
  _impl_.joinvoicecamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usercountryset_ != nullptr) {
    delete _impl_.usercountryset_;
  }
  _impl_.usercountryset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observe_ != nullptr) {
    delete _impl_.observe_;
  }
  _impl_.observe_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getrecommendpvp_ != nullptr) {
    delete _impl_.getrecommendpvp_;
  }
  _impl_.getrecommendpvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observelogin_ != nullptr) {
    delete _impl_.observelogin_;
  }
  _impl_.observelogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quitobserve_ != nullptr) {
    delete _impl_.quitobserve_;
  }
  _impl_.quitobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveinfo_ != nullptr) {
    delete _impl_.getobserveinfo_;
  }
  _impl_.getobserveinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.freeflow_ != nullptr) {
    delete _impl_.freeflow_;
  }
  _impl_.freeflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setpushtoken_ != nullptr) {
    delete _impl_.setpushtoken_;
  }
  _impl_.setpushtoken_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tlogevent_ != nullptr) {
    delete _impl_.tlogevent_;
  }
  _impl_.tlogevent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxvvipaward_ != nullptr) {
    delete _impl_.wxvvipaward_;
  }
  _impl_.wxvvipaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relationstarwx_ != nullptr) {
    delete _impl_.relationstarwx_;
  }
  _impl_.relationstarwx_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sendwxredpacket_ != nullptr) {
    delete _impl_.sendwxredpacket_;
  }
  _impl_.sendwxredpacket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recvwxredpacket_ != nullptr) {
    delete _impl_.recvwxredpacket_;
  }
  _impl_.recvwxredpacket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktlike_ != nullptr) {
    delete _impl_.wxredpktlike_;
  }
  _impl_.wxredpktlike_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpktrank_ != nullptr) {
    delete _impl_.wxredpktrank_;
  }
  _impl_.wxredpktrank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setobserveprivilege_ != nullptr) {
    delete _impl_.setobserveprivilege_;
  }
  _impl_.setobserveprivilege_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.presetfastchat_ != nullptr) {
    delete _impl_.presetfastchat_;
  }
  _impl_.presetfastchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changeslotteam_ != nullptr) {
    delete _impl_.changeslotteam_;
  }
  _impl_.changeslotteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changesubmodeteam_ != nullptr) {
    delete _impl_.changesubmodeteam_;
  }
  _impl_.changesubmodeteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.confirmchangeslotteam_ != nullptr) {
    delete _impl_.confirmchangeslotteam_;
  }
  _impl_.confirmchangeslotteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvproundend_ != nullptr) {
    delete _impl_.pvproundend_;
  }
  _impl_.pvproundend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvp_ != nullptr) {
    delete _impl_.pvp_;
  }
  _impl_.pvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamready_ != nullptr) {
    delete _impl_.teamready_;
  }
  _impl_.teamready_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindoldbusinessplayer_ != nullptr) {
    delete _impl_.bindoldbusinessplayer_;
  }
  _impl_.bindoldbusinessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.translate_ != nullptr) {
    delete _impl_.translate_;
  }
  _impl_.translate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.submitquestionnaire_ != nullptr) {
    delete _impl_.submitquestionnaire_;
  }
  _impl_.submitquestionnaire_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelchangeslot_ != nullptr) {
    delete _impl_.cancelchangeslot_;
  }
  _impl_.cancelchangeslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setchessskin_ != nullptr) {
    delete _impl_.setchessskin_;
  }
  _impl_.setchessskin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetchessskin_ != nullptr) {
    delete _impl_.unsetchessskin_;
  }
  _impl_.unsetchessskin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.compose_ != nullptr) {
    delete _impl_.compose_;
  }
  _impl_.compose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.video_ != nullptr) {
    delete _impl_.video_;
  }
  _impl_.video_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offhelpreddot_ != nullptr) {
    delete _impl_.offhelpreddot_;
  }
  _impl_.offhelpreddot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changelanguage_ != nullptr) {
    delete _impl_.changelanguage_;
  }
  _impl_.changelanguage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setprovince_ != nullptr) {
    delete _impl_.setprovince_;
  }
  _impl_.setprovince_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.longyuanvoice_ != nullptr) {
    delete _impl_.longyuanvoice_;
  }
  _impl_.longyuanvoice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enrolltournament_ != nullptr) {
    delete _impl_.enrolltournament_;
  }
  _impl_.enrolltournament_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jointournamentroom_ != nullptr) {
    delete _impl_.jointournamentroom_;
  }
  _impl_.jointournamentroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentpointaward_ != nullptr) {
    delete _impl_.tournamentpointaward_;
  }
  _impl_.tournamentpointaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getenrollplayers_ != nullptr) {
    delete _impl_.getenrollplayers_;
  }
  _impl_.getenrollplayers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dealwebmail_ != nullptr) {
    delete _impl_.dealwebmail_;
  }
  _impl_.dealwebmail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.challengeagain_ != nullptr) {
    delete _impl_.challengeagain_;
  }
  _impl_.challengeagain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.historychat_ != nullptr) {
    delete _impl_.historychat_;
  }
  _impl_.historychat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setfriendinvisible_ != nullptr) {
    delete _impl_.setfriendinvisible_;
  }
  _impl_.setfriendinvisible_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getobserveaward_ != nullptr) {
    delete _impl_.getobserveaward_;
  }
  _impl_.getobserveaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inviteobserve_ != nullptr) {
    delete _impl_.inviteobserve_;
  }
  _impl_.inviteobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rejectobserve_ != nullptr) {
    delete _impl_.rejectobserve_;
  }
  _impl_.rejectobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gettxplayer_ != nullptr) {
    delete _impl_.gettxplayer_;
  }
  _impl_.gettxplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getthirdpvpinfo_ != nullptr) {
    delete _impl_.getthirdpvpinfo_;
  }
  _impl_.getthirdpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.markplayerguide_ != nullptr) {
    delete _impl_.markplayerguide_;
  }
  _impl_.markplayerguide_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chessskinclicked_ != nullptr) {
    delete _impl_.chessskinclicked_;
  }
  _impl_.chessskinclicked_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.queryps4entitlements_ != nullptr) {
    delete _impl_.queryps4entitlements_;
  }
  _impl_.queryps4entitlements_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.actdaysign_ != nullptr) {
    delete _impl_.actdaysign_;
  }
  _impl_.actdaysign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.havethirdpvpinfo_ != nullptr) {
    delete _impl_.havethirdpvpinfo_;
  }
  _impl_.havethirdpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activitymall_ != nullptr) {
    delete _impl_.activitymall_;
  }
  _impl_.activitymall_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.psonly_ != nullptr) {
    delete _impl_.psonly_;
  }
  _impl_.psonly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changechanneltype_ != nullptr) {
    delete _impl_.changechanneltype_;
  }
  _impl_.changechanneltype_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.customcardopt_ != nullptr) {
    delete _impl_.customcardopt_;
  }
  _impl_.customcardopt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.championhistory_ != nullptr) {
    delete _impl_.championhistory_;
  }
  _impl_.championhistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentlasttoprank_ != nullptr) {
    delete _impl_.tournamentlasttoprank_;
  }
  _impl_.tournamentlasttoprank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerdailyaward_ != nullptr) {
    delete _impl_.bigwinnerdailyaward_;
  }
  _impl_.bigwinnerdailyaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerscorehistory_ != nullptr) {
    delete _impl_.bigwinnerscorehistory_;
  }
  _impl_.bigwinnerscorehistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.smeltitem_ != nullptr) {
    delete _impl_.smeltitem_;
  }
  _impl_.smeltitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pveuptalentlevel_ != nullptr) {
    delete _impl_.pveuptalentlevel_;
  }
  _impl_.pveuptalentlevel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.luckyaward_ != nullptr) {
    delete _impl_.luckyaward_;
  }
  _impl_.luckyaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applychannel_ != nullptr) {
    delete _impl_.applychannel_;
  }
  _impl_.applychannel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.obteaminfo_ != nullptr) {
    delete _impl_.obteaminfo_;
  }
  _impl_.obteaminfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpvpservergroup_ != nullptr) {
    delete _impl_.getpvpservergroup_;
  }
  _impl_.getpvpservergroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportpvpinfo_ != nullptr) {
    delete _impl_.reportpvpinfo_;
  }
  _impl_.reportpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chooseplayer_ != nullptr) {
    delete _impl_.chooseplayer_;
  }
  _impl_.chooseplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pingtest_ != nullptr) {
    delete _impl_.pingtest_;
  }
  _impl_.pingtest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportregioninfo_ != nullptr) {
    delete _impl_.reportregioninfo_;
  }
  _impl_.reportregioninfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recalledplaeyr_ != nullptr) {
    delete _impl_.recalledplaeyr_;
  }
  _impl_.recalledplaeyr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.weblogin_ != nullptr) {
    delete _impl_.weblogin_;
  }
  _impl_.weblogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.invitecodereset_ != nullptr) {
    delete _impl_.invitecodereset_;
  }
  _impl_.invitecodereset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recallreward_ != nullptr) {
    delete _impl_.recallreward_;
  }
  _impl_.recallreward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchtocommonmatch_ != nullptr) {
    delete _impl_.switchtocommonmatch_;
  }
  _impl_.switchtocommonmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchmodeinteam_ != nullptr) {
    delete _impl_.switchmodeinteam_;
  }
  _impl_.switchmodeinteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gettnroomstate_ != nullptr) {
    delete _impl_.gettnroomstate_;
  }
  _impl_.gettnroomstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workshopmatch_ != nullptr) {
    delete _impl_.workshopmatch_;
  }
  _impl_.workshopmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buyworkshopticket_ != nullptr) {
    delete _impl_.buyworkshopticket_;
  }
  _impl_.buyworkshopticket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.favouriteworkshopmap_ != nullptr) {
    delete _impl_.favouriteworkshopmap_;
  }
  _impl_.favouriteworkshopmap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shortcutmapsop_ != nullptr) {
    delete _impl_.shortcutmapsop_;
  }
  _impl_.shortcutmapsop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerstournamentinfo_ != nullptr) {
    delete _impl_.playerstournamentinfo_;
  }
  _impl_.playerstournamentinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scoreworkshopmap_ != nullptr) {
    delete _impl_.scoreworkshopmap_;
  }
  _impl_.scoreworkshopmap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mapsvisitedbyfriends_ != nullptr) {
    delete _impl_.mapsvisitedbyfriends_;
  }
  _impl_.mapsvisitedbyfriends_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.verifyrealname_ != nullptr) {
    delete _impl_.verifyrealname_;
  }
  _impl_.verifyrealname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fakepay_ != nullptr) {
    delete _impl_.fakepay_;
  }
  _impl_.fakepay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildcreate_ != nullptr) {
    delete _impl_.guildcreate_;
  }
  _impl_.guildcreate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildapply_ != nullptr) {
    delete _impl_.guildapply_;
  }
  _impl_.guildapply_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildhome_ != nullptr) {
    delete _impl_.guildhome_;
  }
  _impl_.guildhome_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildapprove_ != nullptr) {
    delete _impl_.guildapprove_;
  }
  _impl_.guildapprove_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrole_ != nullptr) {
    delete _impl_.guildrole_;
  }
  _impl_.guildrole_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildmodify_ != nullptr) {
    delete _impl_.guildmodify_;
  }
  _impl_.guildmodify_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildkickoff_ != nullptr) {
    delete _impl_.guildkickoff_;
  }
  _impl_.guildkickoff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guilddismiss_ != nullptr) {
    delete _impl_.guilddismiss_;
  }
  _impl_.guilddismiss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildexit_ != nullptr) {
    delete _impl_.guildexit_;
  }
  _impl_.guildexit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildchat_ != nullptr) {
    delete _impl_.guildchat_;
  }
  _impl_.guildchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildlist_ != nullptr) {
    delete _impl_.guildlist_;
  }
  _impl_.guildlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrecommendplayers_ != nullptr) {
    delete _impl_.guildrecommendplayers_;
  }
  _impl_.guildrecommendplayers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvitelist_ != nullptr) {
    delete _impl_.guildinvitelist_;
  }
  _impl_.guildinvitelist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinvite_ != nullptr) {
    delete _impl_.guildinvite_;
  }
  _impl_.guildinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrejectinvite_ != nullptr) {
    delete _impl_.guildrejectinvite_;
  }
  _impl_.guildrejectinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getvngcommentaward_ != nullptr) {
    delete _impl_.getvngcommentaward_;
  }
  _impl_.getvngcommentaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.levelupchest_ != nullptr) {
    delete _impl_.levelupchest_;
  }
  _impl_.levelupchest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.watchad_ != nullptr) {
    delete _impl_.watchad_;
  }
  _impl_.watchad_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pstournamentroom_ != nullptr) {
    delete _impl_.pstournamentroom_;
  }
  _impl_.pstournamentroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getadcumulateaward_ != nullptr) {
    delete _impl_.getadcumulateaward_;
  }
  _impl_.getadcumulateaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setmessengerpos_ != nullptr) {
    delete _impl_.setmessengerpos_;
  }
  _impl_.setmessengerpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.antiaddictiontime_ != nullptr) {
    delete _impl_.antiaddictiontime_;
  }
  _impl_.antiaddictiontime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelreconnect_ != nullptr) {
    delete _impl_.cancelreconnect_;
  }
  _impl_.cancelreconnect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reconnect_ != nullptr) {
    delete _impl_.reconnect_;
  }
  _impl_.reconnect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passthrough_ != nullptr) {
    delete _impl_.passthrough_;
  }
  _impl_.passthrough_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visitplayer_ != nullptr) {
    delete _impl_.visitplayer_;
  }
  _impl_.visitplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leavegameearly_ != nullptr) {
    delete _impl_.leavegameearly_;
  }
  _impl_.leavegameearly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gdcommonbin_ != nullptr) {
    delete _impl_.gdcommonbin_;
  }
  _impl_.gdcommonbin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gdbindata_ != nullptr) {
    delete _impl_.gdbindata_;
  }
  _impl_.gdbindata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.battlecampresult_ != nullptr) {
    delete _impl_.battlecampresult_;
  }
  _impl_.battlecampresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autobattleop_ != nullptr) {
    delete _impl_.autobattleop_;
  }
  _impl_.autobattleop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.restrictuser_ != nullptr) {
    delete _impl_.restrictuser_;
  }
  _impl_.restrictuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.equipselectrate_ != nullptr) {
    delete _impl_.equipselectrate_;
  }
  _impl_.equipselectrate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reportabsent_ != nullptr) {
    delete _impl_.reportabsent_;
  }
  _impl_.reportabsent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendweek_ != nullptr) {
    delete _impl_.recommendweek_;
  }
  _impl_.recommendweek_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendofficial_ != nullptr) {
    delete _impl_.recommendofficial_;
  }
  _impl_.recommendofficial_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendlatest_ != nullptr) {
    delete _impl_.recommendlatest_;
  }
  _impl_.recommendlatest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendhistory_ != nullptr) {
    delete _impl_.recommendhistory_;
  }
  _impl_.recommendhistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendcollect_ != nullptr) {
    delete _impl_.recommendcollect_;
  }
  _impl_.recommendcollect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendset_ != nullptr) {
    delete _impl_.recommendset_;
  }
  _impl_.recommendset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendgetcollection_ != nullptr) {
    delete _impl_.recommendgetcollection_;
  }
  _impl_.recommendgetcollection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recommendequip_ != nullptr) {
    delete _impl_.recommendequip_;
  }
  _impl_.recommendequip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logincancel_ != nullptr) {
    delete _impl_.logincancel_;
  }
  _impl_.logincancel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.convertdebris_ != nullptr) {
    delete _impl_.convertdebris_;
  }
  _impl_.convertdebris_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.protectioncard_ != nullptr) {
    delete _impl_.protectioncard_;
  }
  _impl_.protectioncard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.usepassportcard_ != nullptr) {
    delete _impl_.usepassportcard_;
  }
  _impl_.usepassportcard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setmedal_ != nullptr) {
    delete _impl_.setmedal_;
  }
  _impl_.setmedal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetmedal_ != nullptr) {
    delete _impl_.unsetmedal_;
  }
  _impl_.unsetmedal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playermedals_ != nullptr) {
    delete _impl_.playermedals_;
  }
  _impl_.playermedals_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatehotdot_ != nullptr) {
    delete _impl_.updatehotdot_;
  }
  _impl_.updatehotdot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.queryhotdot_ != nullptr) {
    delete _impl_.queryhotdot_;
  }
  _impl_.queryhotdot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setcache_ != nullptr) {
    delete _impl_.setcache_;
  }
  _impl_.setcache_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getcache_ != nullptr) {
    delete _impl_.getcache_;
  }
  _impl_.getcache_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buychallengecount_ != nullptr) {
    delete _impl_.buychallengecount_;
  }
  _impl_.buychallengecount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getpverank_ != nullptr) {
    delete _impl_.getpverank_;
  }
  _impl_.getpverank_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.authaccount_ != nullptr) {
    delete _impl_.authaccount_;
  }
  _impl_.authaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unbindaccount_ != nullptr) {
    delete _impl_.unbindaccount_;
  }
  _impl_.unbindaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bagtoitem_ != nullptr) {
    delete _impl_.bagtoitem_;
  }
  _impl_.bagtoitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.identifyitem_ != nullptr) {
    delete _impl_.identifyitem_;
  }
  _impl_.identifyitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insetitemaffix_ != nullptr) {
    delete _impl_.insetitemaffix_;
  }
  _impl_.insetitemaffix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unsetitemaffix_ != nullptr) {
    delete _impl_.unsetitemaffix_;
  }
  _impl_.unsetitemaffix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setdefaultattributes_ != nullptr) {
    delete _impl_.setdefaultattributes_;
  }
  _impl_.setdefaultattributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.checkcancel_ != nullptr) {
    delete _impl_.checkcancel_;
  }
  _impl_.checkcancel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelaccount_ != nullptr) {
    delete _impl_.cancelaccount_;
  }
  _impl_.cancelaccount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.oauthapp_ != nullptr) {
    delete _impl_.oauthapp_;
  }
  _impl_.oauthapp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.selfnumrankdata_ != nullptr) {
    delete _impl_.selfnumrankdata_;
  }
  _impl_.selfnumrankdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroup_ != nullptr) {
    delete _impl_.updatecardgroup_;
  }
  _impl_.updatecardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupname_ != nullptr) {
    delete _impl_.updatecardgroupname_;
  }
  _impl_.updatecardgroupname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buypvebuff_ != nullptr) {
    delete _impl_.buypvebuff_;
  }
  _impl_.buypvebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setcardgroup_ != nullptr) {
    delete _impl_.setcardgroup_;
  }
  _impl_.setcardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buypvechesstemplate_ != nullptr) {
    delete _impl_.buypvechesstemplate_;
  }
  _impl_.buypvechesstemplate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pveunlockchesstemplate_ != nullptr) {
    delete _impl_.pveunlockchesstemplate_;
  }
  _impl_.pveunlockchesstemplate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvesetteamdebuff_ != nullptr) {
    delete _impl_.pvesetteamdebuff_;
  }
  _impl_.pvesetteamdebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chosecardgroup_ != nullptr) {
    delete _impl_.chosecardgroup_;
  }
  _impl_.chosecardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeovertimebuff_ != nullptr) {
    delete _impl_.removeovertimebuff_;
  }
  _impl_.removeovertimebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatenewcardgroupsign_ != nullptr) {
    delete _impl_.updatenewcardgroupsign_;
  }
  _impl_.updatenewcardgroupsign_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdgetonhookaward_ != nullptr) {
    delete _impl_.tdgetonhookaward_;
  }
  _impl_.tdgetonhookaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tddraw_ != nullptr) {
    delete _impl_.tddraw_;
  }
  _impl_.tddraw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdbuycard_ != nullptr) {
    delete _impl_.tdbuycard_;
  }
  _impl_.tdbuycard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdsetcardgroup_ != nullptr) {
    delete _impl_.tdsetcardgroup_;
  }
  _impl_.tdsetcardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdlevelup_ != nullptr) {
    delete _impl_.tdlevelup_;
  }
  _impl_.tdlevelup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdequip_ != nullptr) {
    delete _impl_.tdequip_;
  }
  _impl_.tdequip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorupdatesetting_ != nullptr) {
    delete _impl_.mentorupdatesetting_;
  }
  _impl_.mentorupdatesetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinvite_ != nullptr) {
    delete _impl_.mentorinvite_;
  }
  _impl_.mentorinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorconfirminvite_ != nullptr) {
    delete _impl_.mentorconfirminvite_;
  }
  _impl_.mentorconfirminvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrecommendlist_ != nullptr) {
    delete _impl_.mentorrecommendlist_;
  }
  _impl_.mentorrecommendlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgettaskaward_ != nullptr) {
    delete _impl_.mentorgettaskaward_;
  }
  _impl_.mentorgettaskaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgraduate_ != nullptr) {
    delete _impl_.mentorgraduate_;
  }
  _impl_.mentorgraduate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrelieverelation_ != nullptr) {
    delete _impl_.mentorrelieverelation_;
  }
  _impl_.mentorrelieverelation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmentorinfo_ != nullptr) {
    delete _impl_.getmentorinfo_;
  }
  _impl_.getmentorinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorgetinvitemsg_ != nullptr) {
    delete _impl_.mentorgetinvitemsg_;
  }
  _impl_.mentorgetinvitemsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teammsg_ != nullptr) {
    delete _impl_.teammsg_;
  }
  _impl_.teammsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chatmsg_ != nullptr) {
    delete _impl_.chatmsg_;
  }
  _impl_.chatmsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.channelchat_ != nullptr) {
    delete _impl_.channelchat_;
  }
  _impl_.channelchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupbetter_ != nullptr) {
    delete _impl_.updatecardgroupbetter_;
  }
  _impl_.updatecardgroupbetter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatecardgroupsetting_ != nullptr) {
    delete _impl_.updatecardgroupsetting_;
  }
  _impl_.updatecardgroupsetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setauctionname_ != nullptr) {
    delete _impl_.setauctionname_;
  }
  _impl_.setauctionname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setauctionremark_ != nullptr) {
    delete _impl_.setauctionremark_;
  }
  _impl_.setauctionremark_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getbalance_ != nullptr) {
    delete _impl_.getbalance_;
  }
  _impl_.getbalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rechargebalance_ != nullptr) {
    delete _impl_.rechargebalance_;
  }
  _impl_.rechargebalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.withdrawbalance_ != nullptr) {
    delete _impl_.withdrawbalance_;
  }
  _impl_.withdrawbalance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.personalrecommendmall_ != nullptr) {
    delete _impl_.personalrecommendmall_;
  }
  _impl_.personalrecommendmall_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.getmedalchestaward_ != nullptr) {
    delete _impl_.getmedalchestaward_;
  }
  _impl_.getmedalchestaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setitemautouse_ != nullptr) {
    delete _impl_.setitemautouse_;
  }
  _impl_.setitemautouse_ = nullptr;
  ::memset(&_impl_.seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.errcode_) -
      reinterpret_cast<char*>(&_impl_.seq_)) + sizeof(_impl_.errcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.RESULT ErrCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errcode(static_cast<::msg::RESULT>(val));
        } else
          goto handle_unusual;
        continue;
      // string ErrMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSRspBody.ErrMsg"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspHeart Heart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspLogin Login = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspVersionCheck VersionCheck = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_versioncheck(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspResourceVersionCheck ResourceVersionCheck = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourceversioncheck(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspApplyHallServer ApplyHallServer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_applyhallserver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetNumRank GetNumRank = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getnumrank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWorldChat WorldChat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayersBaseInfo PlayersBaseInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersbaseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayerDetailInfo PlayerDetailInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerdetailinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReadMail ReadMail = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_readmail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetMailAward GetMailAward = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmailaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyEgg BuyEgg = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyegg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUserNameSet UserNameSet = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_usernameset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUserNameRandom UserNameRandom = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_usernamerandom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspHeadPicSet HeadPicSet = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_headpicset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspDressChessPlayer DressChessPlayer = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_dresschessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspDressScene DressScene = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dressscene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPvpLogin PvpLogin = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvplogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPvpEnd PvpEnd = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayerFinish PlayerFinish = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerfinish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayerQuit PlayerQuit = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerquit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSellItem SellItem = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_sellitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetEvalAward GetEvalAward = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_getevalaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUseChessPlayer UseChessPlayer = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_usechessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuidReport GuidReport = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_guidreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetCodeAward GetCodeAward = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcodeaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRoundReport RoundReport = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspLoadingProgress LoadingProgress = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadingprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPvpChat PvpChat = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChessCombine ChessCombine = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesscombine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspExpose Expose = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspApplyOrderId ApplyOrderId = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_applyorderid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportOrderInfo ReportOrderInfo = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportorderinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetItem SetItem = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_setitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnsetItem UnsetItem = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRandomItem RandomItem = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_randomitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChat Chat = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetChessPlayer SetChessPlayer = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_setchessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnsetChessPlayer UnsetChessPlayer = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetchessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetFansList GetFansList = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfanslist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspFollowPlayer FollowPlayer = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_followplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnfollowPlayer UnfollowPlayer = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_unfollowplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayersStatusInfo PlayersStatusInfo = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_playersstatusinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspInviteJoinTeam InviteJoinTeam = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitejointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspJoinTeam JoinTeam = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_jointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportPayResponse ReportPayResponse = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportpayresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRejectJoinTeam RejectJoinTeam = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectjointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspShieldChat ShieldChat = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_shieldchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyPassportLevel BuyPassportLevel = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypassportlevel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpgradePassport UpgradePassport = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradepassport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetPassportLevelAward GetPassportLevelAward = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpassportlevelaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetPassportTaskAward GetPassportTaskAward = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpassporttaskaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTelBook TelBook = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_telbook(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspActivatePassport ActivatePassport = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_activatepassport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRankSeasonEval RankSeasonEval = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_rankseasoneval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBindAccount BindAccount = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspIncAdShowCount IncAdsShowCount = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_incadsshowcount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUseBonusCard UseBonusCard = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_usebonuscard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetSeasonAward GetSeasonAward = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_getseasonaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetAlphaActivityAward GetAlphaActivityAward = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_getalphaactivityaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetLanguageData GetLanguageData = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlanguagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetActivityAward GetActivityAward = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getactivityaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetActivityData GetActivityData = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_getactivitydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSendSms SendSms = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendsms(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetMeleeAward GetMeleeAward = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmeleeaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspAddAiToTeam AddAiToTeam = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_addaitoteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspShare Share = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_share(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSkipInterface SkipInterface = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_skipinterface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTeamGame TeamGame = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamgame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetTeamMode SetTeamMode = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_setteammode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetHistoryPvpShowPermission HistoryPvpShowPermission = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_historypvpshowpermission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSearchTeam SearchTeam = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspApplyChat ApplyChat = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_applychat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChatLogin ChatLogin = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatlogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspProbeNetDelay ProbeNetDelay = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_probenetdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetEggs GetEggs = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_geteggs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyGoods BuyGoods = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_buygoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspExchangePassportGoods ExchangePassportGoods = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchangepassportgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUsePassportTaskCard UsePassportTaskCard = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_usepassporttaskcard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspOpenRandChest OpenRandChest = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_openrandchest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspEggLottery EggLottery = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_egglottery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspQueryDiamondBalance QueryDiamondBalance = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_querydiamondbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUseItem UseItem = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_useitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUseExperienceCard UseExperienceCard = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_useexperiencecard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRandTargetItem RandTargetItem = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_randtargetitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspAddBlacklist AddBlacklist = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_addblacklist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRemoveBlacklist RemoveBlacklist = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeblacklist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportPlayerBirth ReportPlayerBirth = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportplayerbirth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportInfoInput ReportInfoInput = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportinfoinput(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSendVerificationCode SendVerificationCode = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendverificationcode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBindPhoneNumber BindPhoneNumber = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindphonenumber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWorldInvite WorldInvite = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRemoveExpireItem RemoveExpireItem = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeexpireitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetMallGoods GetMallGoods = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmallgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyMallGoods BuyMallGoods = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_buymallgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBindSharingCode BindSharingCode = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindsharingcode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWXBlessBag WXBlessBag = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxblessbag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateFriendsInGame UpdateFriendsInGame = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatefriendsingame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspShareReward ShareReward = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharereward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspAllFightInfo AllFightInfo = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_allfightinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetOldPlayer GetOldPlayer = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getoldplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBindOldPlayer BindOldPlayer = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindoldplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendverificationcodewithcheckredis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportSetting ReportSetting = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportsetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspAntiData AntiData = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_antidata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTlogData TlogData = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tlogdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspDaySign DaySign = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_daysign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspDayFitAvoid DayFitAvoid = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_dayfitavoid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspShareCountAward ShareCountAward = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharecountaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRealationStar RealationStar = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_realationstar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetRealationStarInviteSucc GetRealationStarInviteSucc = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrealationstarinvitesucc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetRealationStar GetRealationStar = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrealationstar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetActRecord RspActRecord = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_rspactrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspJoinVoiceTeam JoinVoiceTeam = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoiceteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspJoinVoicePvp JoinVoicePvp = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoicepvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspJoinVoiceCamp JoinVoiceCamp = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoicecamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUserCountrySet UserCountrySet = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_usercountryset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspObserve Observe = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_observe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetRecommendPvp GetRecommendPvp = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrecommendpvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspObserveLogin ObserveLogin = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_observelogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspQuitObserve QuitObserve = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_quitobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetObserveInfo GetObserveInfo = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_getobserveinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspFreeFlow FreeFlow = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetPushToken SetPushToken = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpushtoken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTlogEvent TlogEvent = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tlogevent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWxVVipAward WxVVipAward = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxvvipaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetRelationStarWX RelationStarWX = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationstarwx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSendWxRedPacket SendWxRedPacket = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendwxredpacket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecvWxRedPacket RecvWxRedPacket = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recvwxredpacket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWxRedPktLike WxRedPktLike = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxredpktlike(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWxRedPktRank WxRedPktRank = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxredpktrank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspObservePrivilege SetObservePrivilege = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_setobserveprivilege(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPresetFastChat PresetFastChat = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_presetfastchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChangeSlotTeam ChangeSlotTeam = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_changeslotteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChangeSubModeTeam ChangeSubModeTeam = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_changesubmodeteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspConfirmChangeSlotTeam ConfirmChangeSlotTeam = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmchangeslotteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPvpRoundEnd PvpRoundEnd = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvproundend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPvp Pvp = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTeamReady TeamReady = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBindOldBusinessPlayer BindOldBusinessPlayer = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindoldbusinessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTranslate Translate = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSubmitQuestionnaire SubmitQuestionnaire = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_submitquestionnaire(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspCancelChangeSlot CancelChangeSlot = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelchangeslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetChessSkin SetChessSkin = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_setchessskin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnsetChessSkin UnsetChessSkin = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetchessskin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspCompose Compose = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_compose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspVideo Video = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspOffHelpReddot OffHelpReddot = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_offhelpreddot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChangeLanguage ChangeLanguage = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_changelanguage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetProvince SetProvince = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_setprovince(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspLongyuanVoice LongyuanVoice = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_longyuanvoice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspEnrollTournament EnrollTournament = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_enrolltournament(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspJoinTournamentRoom JoinTournamentRoom = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_jointournamentroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTournamentPointAward TournamentPointAward = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentpointaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetEnrollPlayers GetEnrollPlayers = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_getenrollplayers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspDealWebMail DealWebMail = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dealwebmail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChallengeAgain ChallengeAgain = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_challengeagain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspHistoryChatMsg HistoryChat = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_historychat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetFriendInvisible SetFriendInvisible = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_setfriendinvisible(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetObserveAward GetObserveAward = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getobserveaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspInviteObserve InviteObserve = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviteobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRejectObserve RejectObserve = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetTxPlayer GetTxPlayer = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettxplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetThirdPvpInfo GetThirdPvpInfo = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getthirdpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMarkPlayerGuide MarkPlayerGuide = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_markplayerguide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMarkChessSkinClicked ChessSkinClicked = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessskinclicked(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRsqQueryPs4Entitlements QueryPs4Entitlements = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryps4entitlements(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspActDaySign ActDaySign = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_actdaysign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspHaveThirdPvp HaveThirdPvpInfo = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_havethirdpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspActivityMall ActivityMall = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitymall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPsOnly PsOnly = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_psonly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChangeChannelType ChangeChannelType = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_changechanneltype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspCustomCardOpt CustomCardOpt = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_customcardopt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChampionHistory ChampionHistory = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_championhistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTournamentLastTopRank TournamentLastTopRank = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentlasttoprank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBigWinnerDailyAward BigWinnerDailyAward = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinnerdailyaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBigWinnerScoreHistory BigWinnerScoreHistory = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinnerscorehistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSmeltItem SmeltItem = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_smeltitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPVEUpTalentLevel PVEUpTalentLevel = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pveuptalentlevel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPVELuckyAward LuckyAward = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_luckyaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspApplyChannel ApplyChannel = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_applychannel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspOBTeamInfo OBTeamInfo = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_obteaminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetPvpServerGroup GetPvpServerGroup = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpvpservergroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportPvpInfo ReportPvpInfo = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChoosePlayer ChoosePlayer = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_chooseplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPingTest PingTest = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pingtest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportRegionInfo ReportRegionInfo = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportregioninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecalledPlayer RecalledPlaeyr = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_recalledplaeyr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWebLogin WebLogin = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_weblogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspInviteCodeReset InviteCodeReset = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitecodereset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecallReward RecallReward = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_recallreward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSwitchToCommonMatch SwitchToCommonMatch = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchtocommonmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSwitchModeInTeam SwitchModeInTeam = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchmodeinteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetTNRoomState GetTNRoomState = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettnroomstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWorkshopMatch WorkshopMatch = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_workshopmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyWorkshopTicket BuyWorkshopTicket = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyworkshopticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspFavouriteWorkshopMap FavouriteWorkshopMap = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_favouriteworkshopmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspShortcutMapsOP ShortcutMapsOP = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_shortcutmapsop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayersTournamentInfo PlayersTournamentInfo = 334;
      case 334:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerstournamentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspScoreWorkshopMap ScoreWorkshopMap = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoreworkshopmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMapsVisitedByFriends MapsVisitedByFriends = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapsvisitedbyfriends(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspVerifyRealName VerifyRealName = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_verifyrealname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspFakePay FakePay = 351;
      case 351:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_fakepay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildCreate GuildCreate = 360;
      case 360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildcreate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildApply GuildApply = 361;
      case 361:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildapply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildHome GuildHome = 362;
      case 362:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildhome(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildInfo GuildInfo = 364;
      case 364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildApprove GuildApprove = 365;
      case 365:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildapprove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildSetRole GuildRole = 366;
      case 366:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrole(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildModify GuildModify = 367;
      case 367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildmodify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildKickoff GuildKickoff = 368;
      case 368:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildkickoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildDismiss GuildDismiss = 369;
      case 369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_guilddismiss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildExit GuildExit = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildexit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildChat GuildChat = 371;
      case 371:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildList GuildList = 372;
      case 372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildRecommendPlayers GuildRecommendPlayers = 373;
      case 373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrecommendplayers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildInviteList GuildInviteList = 374;
      case 374:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinvitelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildInvite GuildInvite = 375;
      case 375:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGuildRejectInvite GuildRejectInvite = 377;
      case 377:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrejectinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetVngCommentAward GetVngCommentAward = 390;
      case 390:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getvngcommentaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspLevelupChest LevelupChest = 391;
      case 391:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_levelupchest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWatchAd WatchAd = 392;
      case 392:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspQueryPsTournamentRoom PsTournamentRoom = 393;
      case 393:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pstournamentroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetAdCumulateAward GetAdCumulateAward = 394;
      case 394:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getadcumulateaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetMessengerPos SetMessengerPos = 534;
      case 534:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_setmessengerpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateAntiAddictionTime AntiAddictionTime = 554;
      case 554:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_antiaddictiontime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspCancelReconnect CancelReconnect = 555;
      case 555:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelreconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReconnect Reconnect = 557;
      case 557:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPassThrough PassThrough = 563;
      case 563:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_passthrough(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspVisitPlayer VisitPlayer = 564;
      case 564:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_visitplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspLeaveGameEarly LeaveGameEarly = 565;
      case 565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_leavegameearly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGDCommonBin GDCommonBin = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_gdcommonbin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGDCommonBinData GDBinData = 567;
      case 567:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_gdbindata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBattleCampResult BattleCampResult = 568;
      case 568:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_battlecampresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspAutoBattleOP AutoBattleOP = 569;
      case 569:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_autobattleop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRestrictUser RestrictUser = 570;
      case 570:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_restrictuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspEquipSelectRate EquipSelectRate = 571;
      case 571:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipselectrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspReportAbsent ReportAbsent = 572;
      case 572:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_reportabsent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendWeek RecommendWeek = 600;
      case 600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendweek(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendOfficial RecommendOfficial = 601;
      case 601:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendofficial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendLatest RecommendLatest = 602;
      case 602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendlatest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendHistory RecommendHistory = 603;
      case 603:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendhistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendCollect RecommendCollect = 604;
      case 604:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendcollect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendSet RecommendSet = 605;
      case 605:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendGetCollection RecommendGetCollection = 606;
      case 606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendgetcollection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRecommendEquip RecommendEquip = 607;
      case 607:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommendequip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspLoginCancel LoginCancel = 608;
      case 608:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_logincancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspConvertDebris ConvertDebris = 609;
      case 609:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convertdebris(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUseProtectionCard ProtectionCard = 610;
      case 610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protectioncard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUsePassportCard UsePassportCard = 611;
      case 611:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_usepassportcard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetMedal SetMedal = 612;
      case 612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_setmedal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnSetMedal UnSetMedal = 613;
      case 613:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetmedal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPlayerMedals PlayerMedals = 614;
      case 614:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_playermedals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateHotDot UpdateHotDot = 615;
      case 615:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatehotdot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspQueryHotDot QueryHotDot = 616;
      case 616:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryhotdot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetCache SetCache = 617;
      case 617:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetCache GetCache = 618;
      case 618:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyChallengeCount BuyChallengeCount = 619;
      case 619:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_buychallengecount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetPveRank GetPveRank = 620;
      case 620:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpverank(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspAuthAccount AuthAccount = 621;
      case 621:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_authaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnbindAccount UnbindAccount = 622;
      case 622:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbindaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBagToItem BagToItem = 623;
      case 623:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_bagtoitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspIdentifyItem IdentifyItem = 624;
      case 624:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifyitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspInsetItemAffix InsetItemAffix = 625;
      case 625:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_insetitemaffix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUnsetItemAffix UnsetItemAffix = 626;
      case 626:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsetitemaffix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetDefaultAttributes SetDefaultAttributes = 627;
      case 627:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_setdefaultattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspCheckCancel CheckCancel = 628;
      case 628:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkcancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspCancelAccount CancelAccount = 629;
      case 629:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelaccount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspOAuthApp OAuthApp = 630;
      case 630:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_oauthapp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetSelfNumRankData SelfNumRankData = 631;
      case 631:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfnumrankdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateCardGroup UpdateCardGroup = 632;
      case 632:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateCardGroupName UpdateCardGroupName = 633;
      case 633:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroupname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyPveBuff BuyPveBuff = 634;
      case 634:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypvebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetCardGroup SetCardGroup = 635;
      case 635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspBuyPveChessTemplate BuyPveChessTemplate = 636;
      case 636:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypvechesstemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPveUnlockChessTemplate PveUnlockChessTemplate = 637;
      case 637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_pveunlockchesstemplate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPveSetTeamDeBuff PveSetTeamDeBuff = 638;
      case 638:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvesetteamdebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChoseCardGroup ChoseCardGroup = 639;
      case 639:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_chosecardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRemoveOvertimeBuff RemoveOvertimeBuff = 640;
      case 640:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeovertimebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 641;
      case 641:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatenewcardgroupsign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTDGetOnHookAward TDGetOnHookAward = 644;
      case 644:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdgetonhookaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CsRspTDDraw TDDraw = 645;
      case 645:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tddraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CsRspTDBuyCard TDBuyCard = 646;
      case 646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdbuycard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTDSetCardGroup TDSetCardGroup = 647;
      case 647:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdsetcardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTDLevelUp TDLevelUp = 648;
      case 648:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdlevelup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTDEquip TDEquip = 649;
      case 649:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdequip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorUpdateSetting MentorUpdateSetting = 650;
      case 650:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorupdatesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorInvite MentorInvite = 651;
      case 651:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorConfirmInvite MentorConfirmInvite = 652;
      case 652:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorconfirminvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorRecommendList MentorRecommendList = 653;
      case 653:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorrecommendlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorGetTaskAward MentorGetTaskAward = 654;
      case 654:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorgettaskaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorGraduate MentorGraduate = 655;
      case 655:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorgraduate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorRelieveRelation MentorRelieveRelation = 656;
      case 656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorrelieverelation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetMentorInfo GetMentorInfo = 657;
      case 657:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmentorinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspMentorGetInviteMsg MentorGetInviteMsg = 658;
      case 658:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorgetinvitemsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspTeamMsg TeamMsg = 659;
      case 659:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_teammsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChatMsg ChatMsg = 660;
      case 660:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspChannelChat ChannelChat = 661;
      case 661:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateCardGroupBetter UpdateCardGroupBetter = 662;
      case 662:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroupbetter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspUpdateCardGroupSetting UpdateCardGroupSetting = 663;
      case 663:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatecardgroupsetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetAuctionName SetAuctionName = 664;
      case 664:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_setauctionname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetAuctionRemark SetAuctionRemark = 665;
      case 665:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_setauctionremark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetBalance GetBalance = 666;
      case 666:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspRechargeBalance RechargeBalance = 667;
      case 667:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_rechargebalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspWithdrawBalance WithdrawBalance = 668;
      case 668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawbalance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspPersonalRecommendMall PersonalRecommendMall = 669;
      case 669:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_personalrecommendmall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspGetMedalChestAward GetMedalChestAward = 670;
      case 670:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmedalchestaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSRspSetItemAutoUse SetItemAutoUse = 671;
      case 671:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_setitemautouse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq(), target);
  }

  // .msg.RESULT ErrCode = 2;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_errcode(), target);
  }

  // string ErrMsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSRspBody.ErrMsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // .msg.CSRspHeart Heart = 4;
  if (this->_internal_has_heart()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::heart(this),
        _Internal::heart(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspLogin Login = 5;
  if (this->_internal_has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::login(this),
        _Internal::login(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspVersionCheck VersionCheck = 6;
  if (this->_internal_has_versioncheck()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::versioncheck(this),
        _Internal::versioncheck(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspResourceVersionCheck ResourceVersionCheck = 7;
  if (this->_internal_has_resourceversioncheck()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::resourceversioncheck(this),
        _Internal::resourceversioncheck(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspApplyHallServer ApplyHallServer = 8;
  if (this->_internal_has_applyhallserver()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::applyhallserver(this),
        _Internal::applyhallserver(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetNumRank GetNumRank = 9;
  if (this->_internal_has_getnumrank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::getnumrank(this),
        _Internal::getnumrank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWorldChat WorldChat = 10;
  if (this->_internal_has_worldchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::worldchat(this),
        _Internal::worldchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayersBaseInfo PlayersBaseInfo = 11;
  if (this->_internal_has_playersbaseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::playersbaseinfo(this),
        _Internal::playersbaseinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayerDetailInfo PlayerDetailInfo = 12;
  if (this->_internal_has_playerdetailinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::playerdetailinfo(this),
        _Internal::playerdetailinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReadMail ReadMail = 13;
  if (this->_internal_has_readmail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::readmail(this),
        _Internal::readmail(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetMailAward GetMailAward = 14;
  if (this->_internal_has_getmailaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::getmailaward(this),
        _Internal::getmailaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyEgg BuyEgg = 15;
  if (this->_internal_has_buyegg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::buyegg(this),
        _Internal::buyegg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUserNameSet UserNameSet = 16;
  if (this->_internal_has_usernameset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::usernameset(this),
        _Internal::usernameset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUserNameRandom UserNameRandom = 17;
  if (this->_internal_has_usernamerandom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::usernamerandom(this),
        _Internal::usernamerandom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspHeadPicSet HeadPicSet = 18;
  if (this->_internal_has_headpicset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::headpicset(this),
        _Internal::headpicset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspDressChessPlayer DressChessPlayer = 19;
  if (this->_internal_has_dresschessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::dresschessplayer(this),
        _Internal::dresschessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspDressScene DressScene = 20;
  if (this->_internal_has_dressscene()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::dressscene(this),
        _Internal::dressscene(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPvpLogin PvpLogin = 21;
  if (this->_internal_has_pvplogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::pvplogin(this),
        _Internal::pvplogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPvpEnd PvpEnd = 24;
  if (this->_internal_has_pvpend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::pvpend(this),
        _Internal::pvpend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayerFinish PlayerFinish = 25;
  if (this->_internal_has_playerfinish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::playerfinish(this),
        _Internal::playerfinish(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayerQuit PlayerQuit = 26;
  if (this->_internal_has_playerquit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::playerquit(this),
        _Internal::playerquit(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSellItem SellItem = 27;
  if (this->_internal_has_sellitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::sellitem(this),
        _Internal::sellitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetEvalAward GetEvalAward = 28;
  if (this->_internal_has_getevalaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::getevalaward(this),
        _Internal::getevalaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUseChessPlayer UseChessPlayer = 29;
  if (this->_internal_has_usechessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::usechessplayer(this),
        _Internal::usechessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuidReport GuidReport = 30;
  if (this->_internal_has_guidreport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::guidreport(this),
        _Internal::guidreport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetCodeAward GetCodeAward = 31;
  if (this->_internal_has_getcodeaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::getcodeaward(this),
        _Internal::getcodeaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRoundReport RoundReport = 32;
  if (this->_internal_has_roundreport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::roundreport(this),
        _Internal::roundreport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspLoadingProgress LoadingProgress = 33;
  if (this->_internal_has_loadingprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::loadingprogress(this),
        _Internal::loadingprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPvpChat PvpChat = 34;
  if (this->_internal_has_pvpchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::pvpchat(this),
        _Internal::pvpchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChessCombine ChessCombine = 35;
  if (this->_internal_has_chesscombine()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::chesscombine(this),
        _Internal::chesscombine(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspExpose Expose = 36;
  if (this->_internal_has_expose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::expose(this),
        _Internal::expose(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspApplyOrderId ApplyOrderId = 37;
  if (this->_internal_has_applyorderid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::applyorderid(this),
        _Internal::applyorderid(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportOrderInfo ReportOrderInfo = 38;
  if (this->_internal_has_reportorderinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::reportorderinfo(this),
        _Internal::reportorderinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetItem SetItem = 39;
  if (this->_internal_has_setitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::setitem(this),
        _Internal::setitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnsetItem UnsetItem = 40;
  if (this->_internal_has_unsetitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::unsetitem(this),
        _Internal::unsetitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRandomItem RandomItem = 41;
  if (this->_internal_has_randomitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::randomitem(this),
        _Internal::randomitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChat Chat = 42;
  if (this->_internal_has_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetChessPlayer SetChessPlayer = 43;
  if (this->_internal_has_setchessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::setchessplayer(this),
        _Internal::setchessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnsetChessPlayer UnsetChessPlayer = 44;
  if (this->_internal_has_unsetchessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::unsetchessplayer(this),
        _Internal::unsetchessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetFansList GetFansList = 45;
  if (this->_internal_has_getfanslist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::getfanslist(this),
        _Internal::getfanslist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspFollowPlayer FollowPlayer = 46;
  if (this->_internal_has_followplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::followplayer(this),
        _Internal::followplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnfollowPlayer UnfollowPlayer = 47;
  if (this->_internal_has_unfollowplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::unfollowplayer(this),
        _Internal::unfollowplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayersStatusInfo PlayersStatusInfo = 48;
  if (this->_internal_has_playersstatusinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::playersstatusinfo(this),
        _Internal::playersstatusinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspInviteJoinTeam InviteJoinTeam = 49;
  if (this->_internal_has_invitejointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::invitejointeam(this),
        _Internal::invitejointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspJoinTeam JoinTeam = 50;
  if (this->_internal_has_jointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::jointeam(this),
        _Internal::jointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportPayResponse ReportPayResponse = 51;
  if (this->_internal_has_reportpayresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::reportpayresponse(this),
        _Internal::reportpayresponse(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRejectJoinTeam RejectJoinTeam = 52;
  if (this->_internal_has_rejectjointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::rejectjointeam(this),
        _Internal::rejectjointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspShieldChat ShieldChat = 53;
  if (this->_internal_has_shieldchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::shieldchat(this),
        _Internal::shieldchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyPassportLevel BuyPassportLevel = 54;
  if (this->_internal_has_buypassportlevel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::buypassportlevel(this),
        _Internal::buypassportlevel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpgradePassport UpgradePassport = 55;
  if (this->_internal_has_upgradepassport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::upgradepassport(this),
        _Internal::upgradepassport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetPassportLevelAward GetPassportLevelAward = 56;
  if (this->_internal_has_getpassportlevelaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::getpassportlevelaward(this),
        _Internal::getpassportlevelaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetPassportTaskAward GetPassportTaskAward = 57;
  if (this->_internal_has_getpassporttaskaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::getpassporttaskaward(this),
        _Internal::getpassporttaskaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTelBook TelBook = 58;
  if (this->_internal_has_telbook()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::telbook(this),
        _Internal::telbook(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspActivatePassport ActivatePassport = 59;
  if (this->_internal_has_activatepassport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::activatepassport(this),
        _Internal::activatepassport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRankSeasonEval RankSeasonEval = 60;
  if (this->_internal_has_rankseasoneval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::rankseasoneval(this),
        _Internal::rankseasoneval(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBindAccount BindAccount = 61;
  if (this->_internal_has_bindaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::bindaccount(this),
        _Internal::bindaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspIncAdShowCount IncAdsShowCount = 62;
  if (this->_internal_has_incadsshowcount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::incadsshowcount(this),
        _Internal::incadsshowcount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUseBonusCard UseBonusCard = 63;
  if (this->_internal_has_usebonuscard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::usebonuscard(this),
        _Internal::usebonuscard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetSeasonAward GetSeasonAward = 64;
  if (this->_internal_has_getseasonaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::getseasonaward(this),
        _Internal::getseasonaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetAlphaActivityAward GetAlphaActivityAward = 65;
  if (this->_internal_has_getalphaactivityaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::getalphaactivityaward(this),
        _Internal::getalphaactivityaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetLanguageData GetLanguageData = 66;
  if (this->_internal_has_getlanguagedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::getlanguagedata(this),
        _Internal::getlanguagedata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetActivityAward GetActivityAward = 67;
  if (this->_internal_has_getactivityaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::getactivityaward(this),
        _Internal::getactivityaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetActivityData GetActivityData = 68;
  if (this->_internal_has_getactivitydata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::getactivitydata(this),
        _Internal::getactivitydata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSendSms SendSms = 69;
  if (this->_internal_has_sendsms()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::sendsms(this),
        _Internal::sendsms(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetMeleeAward GetMeleeAward = 70;
  if (this->_internal_has_getmeleeaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::getmeleeaward(this),
        _Internal::getmeleeaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspAddAiToTeam AddAiToTeam = 71;
  if (this->_internal_has_addaitoteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::addaitoteam(this),
        _Internal::addaitoteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspShare Share = 72;
  if (this->_internal_has_share()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, _Internal::share(this),
        _Internal::share(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSkipInterface SkipInterface = 73;
  if (this->_internal_has_skipinterface()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, _Internal::skipinterface(this),
        _Internal::skipinterface(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTeamGame TeamGame = 74;
  if (this->_internal_has_teamgame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::teamgame(this),
        _Internal::teamgame(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetTeamMode SetTeamMode = 75;
  if (this->_internal_has_setteammode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::setteammode(this),
        _Internal::setteammode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetHistoryPvpShowPermission HistoryPvpShowPermission = 76;
  if (this->_internal_has_historypvpshowpermission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::historypvpshowpermission(this),
        _Internal::historypvpshowpermission(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSearchTeam SearchTeam = 77;
  if (this->_internal_has_searchteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::searchteam(this),
        _Internal::searchteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspApplyChat ApplyChat = 78;
  if (this->_internal_has_applychat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::applychat(this),
        _Internal::applychat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChatLogin ChatLogin = 79;
  if (this->_internal_has_chatlogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::chatlogin(this),
        _Internal::chatlogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspProbeNetDelay ProbeNetDelay = 80;
  if (this->_internal_has_probenetdelay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::probenetdelay(this),
        _Internal::probenetdelay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetEggs GetEggs = 81;
  if (this->_internal_has_geteggs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::geteggs(this),
        _Internal::geteggs(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyGoods BuyGoods = 82;
  if (this->_internal_has_buygoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::buygoods(this),
        _Internal::buygoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspExchangePassportGoods ExchangePassportGoods = 83;
  if (this->_internal_has_exchangepassportgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(83, _Internal::exchangepassportgoods(this),
        _Internal::exchangepassportgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUsePassportTaskCard UsePassportTaskCard = 84;
  if (this->_internal_has_usepassporttaskcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::usepassporttaskcard(this),
        _Internal::usepassporttaskcard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspOpenRandChest OpenRandChest = 85;
  if (this->_internal_has_openrandchest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::openrandchest(this),
        _Internal::openrandchest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspEggLottery EggLottery = 86;
  if (this->_internal_has_egglottery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::egglottery(this),
        _Internal::egglottery(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspQueryDiamondBalance QueryDiamondBalance = 87;
  if (this->_internal_has_querydiamondbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::querydiamondbalance(this),
        _Internal::querydiamondbalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUseItem UseItem = 88;
  if (this->_internal_has_useitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::useitem(this),
        _Internal::useitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUseExperienceCard UseExperienceCard = 89;
  if (this->_internal_has_useexperiencecard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(89, _Internal::useexperiencecard(this),
        _Internal::useexperiencecard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRandTargetItem RandTargetItem = 90;
  if (this->_internal_has_randtargetitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, _Internal::randtargetitem(this),
        _Internal::randtargetitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspAddBlacklist AddBlacklist = 91;
  if (this->_internal_has_addblacklist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, _Internal::addblacklist(this),
        _Internal::addblacklist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRemoveBlacklist RemoveBlacklist = 92;
  if (this->_internal_has_removeblacklist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(92, _Internal::removeblacklist(this),
        _Internal::removeblacklist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportPlayerBirth ReportPlayerBirth = 93;
  if (this->_internal_has_reportplayerbirth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(93, _Internal::reportplayerbirth(this),
        _Internal::reportplayerbirth(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportInfoInput ReportInfoInput = 94;
  if (this->_internal_has_reportinfoinput()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(94, _Internal::reportinfoinput(this),
        _Internal::reportinfoinput(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSendVerificationCode SendVerificationCode = 95;
  if (this->_internal_has_sendverificationcode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(95, _Internal::sendverificationcode(this),
        _Internal::sendverificationcode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBindPhoneNumber BindPhoneNumber = 96;
  if (this->_internal_has_bindphonenumber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(96, _Internal::bindphonenumber(this),
        _Internal::bindphonenumber(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWorldInvite WorldInvite = 97;
  if (this->_internal_has_worldinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(97, _Internal::worldinvite(this),
        _Internal::worldinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRemoveExpireItem RemoveExpireItem = 98;
  if (this->_internal_has_removeexpireitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(98, _Internal::removeexpireitem(this),
        _Internal::removeexpireitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetMallGoods GetMallGoods = 99;
  if (this->_internal_has_getmallgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::getmallgoods(this),
        _Internal::getmallgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyMallGoods BuyMallGoods = 100;
  if (this->_internal_has_buymallgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::buymallgoods(this),
        _Internal::buymallgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBindSharingCode BindSharingCode = 101;
  if (this->_internal_has_bindsharingcode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::bindsharingcode(this),
        _Internal::bindsharingcode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWXBlessBag WXBlessBag = 102;
  if (this->_internal_has_wxblessbag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::wxblessbag(this),
        _Internal::wxblessbag(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateFriendsInGame UpdateFriendsInGame = 103;
  if (this->_internal_has_updatefriendsingame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::updatefriendsingame(this),
        _Internal::updatefriendsingame(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspShareReward ShareReward = 104;
  if (this->_internal_has_sharereward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::sharereward(this),
        _Internal::sharereward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspAllFightInfo AllFightInfo = 105;
  if (this->_internal_has_allfightinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::allfightinfo(this),
        _Internal::allfightinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetOldPlayer GetOldPlayer = 106;
  if (this->_internal_has_getoldplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::getoldplayer(this),
        _Internal::getoldplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBindOldPlayer BindOldPlayer = 107;
  if (this->_internal_has_bindoldplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::bindoldplayer(this),
        _Internal::bindoldplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 108;
  if (this->_internal_has_sendverificationcodewithcheckredis()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::sendverificationcodewithcheckredis(this),
        _Internal::sendverificationcodewithcheckredis(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportSetting ReportSetting = 109;
  if (this->_internal_has_reportsetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::reportsetting(this),
        _Internal::reportsetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspAntiData AntiData = 110;
  if (this->_internal_has_antidata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::antidata(this),
        _Internal::antidata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTlogData TlogData = 111;
  if (this->_internal_has_tlogdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(111, _Internal::tlogdata(this),
        _Internal::tlogdata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspDaySign DaySign = 112;
  if (this->_internal_has_daysign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(112, _Internal::daysign(this),
        _Internal::daysign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspDayFitAvoid DayFitAvoid = 113;
  if (this->_internal_has_dayfitavoid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, _Internal::dayfitavoid(this),
        _Internal::dayfitavoid(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspShareCountAward ShareCountAward = 114;
  if (this->_internal_has_sharecountaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(114, _Internal::sharecountaward(this),
        _Internal::sharecountaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRealationStar RealationStar = 115;
  if (this->_internal_has_realationstar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, _Internal::realationstar(this),
        _Internal::realationstar(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetRealationStarInviteSucc GetRealationStarInviteSucc = 116;
  if (this->_internal_has_getrealationstarinvitesucc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, _Internal::getrealationstarinvitesucc(this),
        _Internal::getrealationstarinvitesucc(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetRealationStar GetRealationStar = 117;
  if (this->_internal_has_getrealationstar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::getrealationstar(this),
        _Internal::getrealationstar(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetActRecord RspActRecord = 118;
  if (this->_internal_has_rspactrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, _Internal::rspactrecord(this),
        _Internal::rspactrecord(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspJoinVoiceTeam JoinVoiceTeam = 119;
  if (this->_internal_has_joinvoiceteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, _Internal::joinvoiceteam(this),
        _Internal::joinvoiceteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspJoinVoicePvp JoinVoicePvp = 120;
  if (this->_internal_has_joinvoicepvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, _Internal::joinvoicepvp(this),
        _Internal::joinvoicepvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspJoinVoiceCamp JoinVoiceCamp = 121;
  if (this->_internal_has_joinvoicecamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(121, _Internal::joinvoicecamp(this),
        _Internal::joinvoicecamp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUserCountrySet UserCountrySet = 122;
  if (this->_internal_has_usercountryset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(122, _Internal::usercountryset(this),
        _Internal::usercountryset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspObserve Observe = 123;
  if (this->_internal_has_observe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::observe(this),
        _Internal::observe(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetRecommendPvp GetRecommendPvp = 124;
  if (this->_internal_has_getrecommendpvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(124, _Internal::getrecommendpvp(this),
        _Internal::getrecommendpvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspObserveLogin ObserveLogin = 125;
  if (this->_internal_has_observelogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(125, _Internal::observelogin(this),
        _Internal::observelogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspQuitObserve QuitObserve = 126;
  if (this->_internal_has_quitobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(126, _Internal::quitobserve(this),
        _Internal::quitobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetObserveInfo GetObserveInfo = 127;
  if (this->_internal_has_getobserveinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(127, _Internal::getobserveinfo(this),
        _Internal::getobserveinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspFreeFlow FreeFlow = 128;
  if (this->_internal_has_freeflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, _Internal::freeflow(this),
        _Internal::freeflow(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetPushToken SetPushToken = 129;
  if (this->_internal_has_setpushtoken()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(129, _Internal::setpushtoken(this),
        _Internal::setpushtoken(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTlogEvent TlogEvent = 130;
  if (this->_internal_has_tlogevent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::tlogevent(this),
        _Internal::tlogevent(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWxVVipAward WxVVipAward = 131;
  if (this->_internal_has_wxvvipaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(131, _Internal::wxvvipaward(this),
        _Internal::wxvvipaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetRelationStarWX RelationStarWX = 132;
  if (this->_internal_has_relationstarwx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(132, _Internal::relationstarwx(this),
        _Internal::relationstarwx(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSendWxRedPacket SendWxRedPacket = 133;
  if (this->_internal_has_sendwxredpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, _Internal::sendwxredpacket(this),
        _Internal::sendwxredpacket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecvWxRedPacket RecvWxRedPacket = 134;
  if (this->_internal_has_recvwxredpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(134, _Internal::recvwxredpacket(this),
        _Internal::recvwxredpacket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWxRedPktLike WxRedPktLike = 135;
  if (this->_internal_has_wxredpktlike()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(135, _Internal::wxredpktlike(this),
        _Internal::wxredpktlike(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWxRedPktRank WxRedPktRank = 136;
  if (this->_internal_has_wxredpktrank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(136, _Internal::wxredpktrank(this),
        _Internal::wxredpktrank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspObservePrivilege SetObservePrivilege = 137;
  if (this->_internal_has_setobserveprivilege()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(137, _Internal::setobserveprivilege(this),
        _Internal::setobserveprivilege(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPresetFastChat PresetFastChat = 138;
  if (this->_internal_has_presetfastchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(138, _Internal::presetfastchat(this),
        _Internal::presetfastchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChangeSlotTeam ChangeSlotTeam = 139;
  if (this->_internal_has_changeslotteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(139, _Internal::changeslotteam(this),
        _Internal::changeslotteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChangeSubModeTeam ChangeSubModeTeam = 140;
  if (this->_internal_has_changesubmodeteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(140, _Internal::changesubmodeteam(this),
        _Internal::changesubmodeteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspConfirmChangeSlotTeam ConfirmChangeSlotTeam = 141;
  if (this->_internal_has_confirmchangeslotteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(141, _Internal::confirmchangeslotteam(this),
        _Internal::confirmchangeslotteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPvpRoundEnd PvpRoundEnd = 142;
  if (this->_internal_has_pvproundend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(142, _Internal::pvproundend(this),
        _Internal::pvproundend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPvp Pvp = 143;
  if (this->_internal_has_pvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(143, _Internal::pvp(this),
        _Internal::pvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTeamReady TeamReady = 144;
  if (this->_internal_has_teamready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(144, _Internal::teamready(this),
        _Internal::teamready(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBindOldBusinessPlayer BindOldBusinessPlayer = 145;
  if (this->_internal_has_bindoldbusinessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(145, _Internal::bindoldbusinessplayer(this),
        _Internal::bindoldbusinessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTranslate Translate = 146;
  if (this->_internal_has_translate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(146, _Internal::translate(this),
        _Internal::translate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSubmitQuestionnaire SubmitQuestionnaire = 147;
  if (this->_internal_has_submitquestionnaire()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(147, _Internal::submitquestionnaire(this),
        _Internal::submitquestionnaire(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspCancelChangeSlot CancelChangeSlot = 148;
  if (this->_internal_has_cancelchangeslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(148, _Internal::cancelchangeslot(this),
        _Internal::cancelchangeslot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetChessSkin SetChessSkin = 149;
  if (this->_internal_has_setchessskin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(149, _Internal::setchessskin(this),
        _Internal::setchessskin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnsetChessSkin UnsetChessSkin = 150;
  if (this->_internal_has_unsetchessskin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(150, _Internal::unsetchessskin(this),
        _Internal::unsetchessskin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspCompose Compose = 151;
  if (this->_internal_has_compose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(151, _Internal::compose(this),
        _Internal::compose(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspVideo Video = 152;
  if (this->_internal_has_video()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(152, _Internal::video(this),
        _Internal::video(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspOffHelpReddot OffHelpReddot = 153;
  if (this->_internal_has_offhelpreddot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(153, _Internal::offhelpreddot(this),
        _Internal::offhelpreddot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChangeLanguage ChangeLanguage = 154;
  if (this->_internal_has_changelanguage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(154, _Internal::changelanguage(this),
        _Internal::changelanguage(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetProvince SetProvince = 155;
  if (this->_internal_has_setprovince()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(155, _Internal::setprovince(this),
        _Internal::setprovince(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspLongyuanVoice LongyuanVoice = 156;
  if (this->_internal_has_longyuanvoice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(156, _Internal::longyuanvoice(this),
        _Internal::longyuanvoice(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspEnrollTournament EnrollTournament = 157;
  if (this->_internal_has_enrolltournament()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(157, _Internal::enrolltournament(this),
        _Internal::enrolltournament(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspJoinTournamentRoom JoinTournamentRoom = 158;
  if (this->_internal_has_jointournamentroom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(158, _Internal::jointournamentroom(this),
        _Internal::jointournamentroom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTournamentPointAward TournamentPointAward = 159;
  if (this->_internal_has_tournamentpointaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(159, _Internal::tournamentpointaward(this),
        _Internal::tournamentpointaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetEnrollPlayers GetEnrollPlayers = 160;
  if (this->_internal_has_getenrollplayers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(160, _Internal::getenrollplayers(this),
        _Internal::getenrollplayers(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspDealWebMail DealWebMail = 161;
  if (this->_internal_has_dealwebmail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(161, _Internal::dealwebmail(this),
        _Internal::dealwebmail(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChallengeAgain ChallengeAgain = 162;
  if (this->_internal_has_challengeagain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(162, _Internal::challengeagain(this),
        _Internal::challengeagain(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspHistoryChatMsg HistoryChat = 163;
  if (this->_internal_has_historychat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(163, _Internal::historychat(this),
        _Internal::historychat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetFriendInvisible SetFriendInvisible = 164;
  if (this->_internal_has_setfriendinvisible()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(164, _Internal::setfriendinvisible(this),
        _Internal::setfriendinvisible(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetObserveAward GetObserveAward = 165;
  if (this->_internal_has_getobserveaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(165, _Internal::getobserveaward(this),
        _Internal::getobserveaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspInviteObserve InviteObserve = 166;
  if (this->_internal_has_inviteobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(166, _Internal::inviteobserve(this),
        _Internal::inviteobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRejectObserve RejectObserve = 167;
  if (this->_internal_has_rejectobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(167, _Internal::rejectobserve(this),
        _Internal::rejectobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetTxPlayer GetTxPlayer = 168;
  if (this->_internal_has_gettxplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(168, _Internal::gettxplayer(this),
        _Internal::gettxplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetThirdPvpInfo GetThirdPvpInfo = 169;
  if (this->_internal_has_getthirdpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(169, _Internal::getthirdpvpinfo(this),
        _Internal::getthirdpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMarkPlayerGuide MarkPlayerGuide = 170;
  if (this->_internal_has_markplayerguide()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(170, _Internal::markplayerguide(this),
        _Internal::markplayerguide(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMarkChessSkinClicked ChessSkinClicked = 171;
  if (this->_internal_has_chessskinclicked()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(171, _Internal::chessskinclicked(this),
        _Internal::chessskinclicked(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRsqQueryPs4Entitlements QueryPs4Entitlements = 172;
  if (this->_internal_has_queryps4entitlements()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(172, _Internal::queryps4entitlements(this),
        _Internal::queryps4entitlements(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspActDaySign ActDaySign = 173;
  if (this->_internal_has_actdaysign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(173, _Internal::actdaysign(this),
        _Internal::actdaysign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspHaveThirdPvp HaveThirdPvpInfo = 174;
  if (this->_internal_has_havethirdpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(174, _Internal::havethirdpvpinfo(this),
        _Internal::havethirdpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspActivityMall ActivityMall = 175;
  if (this->_internal_has_activitymall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(175, _Internal::activitymall(this),
        _Internal::activitymall(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPsOnly PsOnly = 176;
  if (this->_internal_has_psonly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(176, _Internal::psonly(this),
        _Internal::psonly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChangeChannelType ChangeChannelType = 177;
  if (this->_internal_has_changechanneltype()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(177, _Internal::changechanneltype(this),
        _Internal::changechanneltype(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspCustomCardOpt CustomCardOpt = 178;
  if (this->_internal_has_customcardopt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(178, _Internal::customcardopt(this),
        _Internal::customcardopt(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChampionHistory ChampionHistory = 179;
  if (this->_internal_has_championhistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(179, _Internal::championhistory(this),
        _Internal::championhistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTournamentLastTopRank TournamentLastTopRank = 180;
  if (this->_internal_has_tournamentlasttoprank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(180, _Internal::tournamentlasttoprank(this),
        _Internal::tournamentlasttoprank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBigWinnerDailyAward BigWinnerDailyAward = 181;
  if (this->_internal_has_bigwinnerdailyaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(181, _Internal::bigwinnerdailyaward(this),
        _Internal::bigwinnerdailyaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBigWinnerScoreHistory BigWinnerScoreHistory = 182;
  if (this->_internal_has_bigwinnerscorehistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(182, _Internal::bigwinnerscorehistory(this),
        _Internal::bigwinnerscorehistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSmeltItem SmeltItem = 183;
  if (this->_internal_has_smeltitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(183, _Internal::smeltitem(this),
        _Internal::smeltitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPVEUpTalentLevel PVEUpTalentLevel = 184;
  if (this->_internal_has_pveuptalentlevel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(184, _Internal::pveuptalentlevel(this),
        _Internal::pveuptalentlevel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPVELuckyAward LuckyAward = 185;
  if (this->_internal_has_luckyaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(185, _Internal::luckyaward(this),
        _Internal::luckyaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspApplyChannel ApplyChannel = 186;
  if (this->_internal_has_applychannel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(186, _Internal::applychannel(this),
        _Internal::applychannel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspOBTeamInfo OBTeamInfo = 300;
  if (this->_internal_has_obteaminfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::obteaminfo(this),
        _Internal::obteaminfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetPvpServerGroup GetPvpServerGroup = 303;
  if (this->_internal_has_getpvpservergroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::getpvpservergroup(this),
        _Internal::getpvpservergroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportPvpInfo ReportPvpInfo = 304;
  if (this->_internal_has_reportpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::reportpvpinfo(this),
        _Internal::reportpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChoosePlayer ChoosePlayer = 305;
  if (this->_internal_has_chooseplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::chooseplayer(this),
        _Internal::chooseplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPingTest PingTest = 306;
  if (this->_internal_has_pingtest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(306, _Internal::pingtest(this),
        _Internal::pingtest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportRegionInfo ReportRegionInfo = 307;
  if (this->_internal_has_reportregioninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(307, _Internal::reportregioninfo(this),
        _Internal::reportregioninfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecalledPlayer RecalledPlaeyr = 308;
  if (this->_internal_has_recalledplaeyr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(308, _Internal::recalledplaeyr(this),
        _Internal::recalledplaeyr(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWebLogin WebLogin = 309;
  if (this->_internal_has_weblogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(309, _Internal::weblogin(this),
        _Internal::weblogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspInviteCodeReset InviteCodeReset = 310;
  if (this->_internal_has_invitecodereset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(310, _Internal::invitecodereset(this),
        _Internal::invitecodereset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecallReward RecallReward = 311;
  if (this->_internal_has_recallreward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(311, _Internal::recallreward(this),
        _Internal::recallreward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSwitchToCommonMatch SwitchToCommonMatch = 312;
  if (this->_internal_has_switchtocommonmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(312, _Internal::switchtocommonmatch(this),
        _Internal::switchtocommonmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSwitchModeInTeam SwitchModeInTeam = 320;
  if (this->_internal_has_switchmodeinteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(320, _Internal::switchmodeinteam(this),
        _Internal::switchmodeinteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetTNRoomState GetTNRoomState = 321;
  if (this->_internal_has_gettnroomstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(321, _Internal::gettnroomstate(this),
        _Internal::gettnroomstate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWorkshopMatch WorkshopMatch = 330;
  if (this->_internal_has_workshopmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(330, _Internal::workshopmatch(this),
        _Internal::workshopmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyWorkshopTicket BuyWorkshopTicket = 331;
  if (this->_internal_has_buyworkshopticket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(331, _Internal::buyworkshopticket(this),
        _Internal::buyworkshopticket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspFavouriteWorkshopMap FavouriteWorkshopMap = 332;
  if (this->_internal_has_favouriteworkshopmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(332, _Internal::favouriteworkshopmap(this),
        _Internal::favouriteworkshopmap(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspShortcutMapsOP ShortcutMapsOP = 333;
  if (this->_internal_has_shortcutmapsop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(333, _Internal::shortcutmapsop(this),
        _Internal::shortcutmapsop(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayersTournamentInfo PlayersTournamentInfo = 334;
  if (this->_internal_has_playerstournamentinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(334, _Internal::playerstournamentinfo(this),
        _Internal::playerstournamentinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspScoreWorkshopMap ScoreWorkshopMap = 335;
  if (this->_internal_has_scoreworkshopmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(335, _Internal::scoreworkshopmap(this),
        _Internal::scoreworkshopmap(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMapsVisitedByFriends MapsVisitedByFriends = 336;
  if (this->_internal_has_mapsvisitedbyfriends()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(336, _Internal::mapsvisitedbyfriends(this),
        _Internal::mapsvisitedbyfriends(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspVerifyRealName VerifyRealName = 350;
  if (this->_internal_has_verifyrealname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(350, _Internal::verifyrealname(this),
        _Internal::verifyrealname(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspFakePay FakePay = 351;
  if (this->_internal_has_fakepay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(351, _Internal::fakepay(this),
        _Internal::fakepay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildCreate GuildCreate = 360;
  if (this->_internal_has_guildcreate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(360, _Internal::guildcreate(this),
        _Internal::guildcreate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildApply GuildApply = 361;
  if (this->_internal_has_guildapply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(361, _Internal::guildapply(this),
        _Internal::guildapply(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildHome GuildHome = 362;
  if (this->_internal_has_guildhome()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(362, _Internal::guildhome(this),
        _Internal::guildhome(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildInfo GuildInfo = 364;
  if (this->_internal_has_guildinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(364, _Internal::guildinfo(this),
        _Internal::guildinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildApprove GuildApprove = 365;
  if (this->_internal_has_guildapprove()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(365, _Internal::guildapprove(this),
        _Internal::guildapprove(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildSetRole GuildRole = 366;
  if (this->_internal_has_guildrole()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(366, _Internal::guildrole(this),
        _Internal::guildrole(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildModify GuildModify = 367;
  if (this->_internal_has_guildmodify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(367, _Internal::guildmodify(this),
        _Internal::guildmodify(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildKickoff GuildKickoff = 368;
  if (this->_internal_has_guildkickoff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(368, _Internal::guildkickoff(this),
        _Internal::guildkickoff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildDismiss GuildDismiss = 369;
  if (this->_internal_has_guilddismiss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(369, _Internal::guilddismiss(this),
        _Internal::guilddismiss(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildExit GuildExit = 370;
  if (this->_internal_has_guildexit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(370, _Internal::guildexit(this),
        _Internal::guildexit(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildChat GuildChat = 371;
  if (this->_internal_has_guildchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(371, _Internal::guildchat(this),
        _Internal::guildchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildList GuildList = 372;
  if (this->_internal_has_guildlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(372, _Internal::guildlist(this),
        _Internal::guildlist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildRecommendPlayers GuildRecommendPlayers = 373;
  if (this->_internal_has_guildrecommendplayers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(373, _Internal::guildrecommendplayers(this),
        _Internal::guildrecommendplayers(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildInviteList GuildInviteList = 374;
  if (this->_internal_has_guildinvitelist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(374, _Internal::guildinvitelist(this),
        _Internal::guildinvitelist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildInvite GuildInvite = 375;
  if (this->_internal_has_guildinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(375, _Internal::guildinvite(this),
        _Internal::guildinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGuildRejectInvite GuildRejectInvite = 377;
  if (this->_internal_has_guildrejectinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(377, _Internal::guildrejectinvite(this),
        _Internal::guildrejectinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetVngCommentAward GetVngCommentAward = 390;
  if (this->_internal_has_getvngcommentaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(390, _Internal::getvngcommentaward(this),
        _Internal::getvngcommentaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspLevelupChest LevelupChest = 391;
  if (this->_internal_has_levelupchest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(391, _Internal::levelupchest(this),
        _Internal::levelupchest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWatchAd WatchAd = 392;
  if (this->_internal_has_watchad()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(392, _Internal::watchad(this),
        _Internal::watchad(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspQueryPsTournamentRoom PsTournamentRoom = 393;
  if (this->_internal_has_pstournamentroom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(393, _Internal::pstournamentroom(this),
        _Internal::pstournamentroom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetAdCumulateAward GetAdCumulateAward = 394;
  if (this->_internal_has_getadcumulateaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(394, _Internal::getadcumulateaward(this),
        _Internal::getadcumulateaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetMessengerPos SetMessengerPos = 534;
  if (this->_internal_has_setmessengerpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(534, _Internal::setmessengerpos(this),
        _Internal::setmessengerpos(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateAntiAddictionTime AntiAddictionTime = 554;
  if (this->_internal_has_antiaddictiontime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(554, _Internal::antiaddictiontime(this),
        _Internal::antiaddictiontime(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspCancelReconnect CancelReconnect = 555;
  if (this->_internal_has_cancelreconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(555, _Internal::cancelreconnect(this),
        _Internal::cancelreconnect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReconnect Reconnect = 557;
  if (this->_internal_has_reconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(557, _Internal::reconnect(this),
        _Internal::reconnect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPassThrough PassThrough = 563;
  if (this->_internal_has_passthrough()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(563, _Internal::passthrough(this),
        _Internal::passthrough(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspVisitPlayer VisitPlayer = 564;
  if (this->_internal_has_visitplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(564, _Internal::visitplayer(this),
        _Internal::visitplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspLeaveGameEarly LeaveGameEarly = 565;
  if (this->_internal_has_leavegameearly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(565, _Internal::leavegameearly(this),
        _Internal::leavegameearly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGDCommonBin GDCommonBin = 566;
  if (this->_internal_has_gdcommonbin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(566, _Internal::gdcommonbin(this),
        _Internal::gdcommonbin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGDCommonBinData GDBinData = 567;
  if (this->_internal_has_gdbindata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(567, _Internal::gdbindata(this),
        _Internal::gdbindata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBattleCampResult BattleCampResult = 568;
  if (this->_internal_has_battlecampresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(568, _Internal::battlecampresult(this),
        _Internal::battlecampresult(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspAutoBattleOP AutoBattleOP = 569;
  if (this->_internal_has_autobattleop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(569, _Internal::autobattleop(this),
        _Internal::autobattleop(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRestrictUser RestrictUser = 570;
  if (this->_internal_has_restrictuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(570, _Internal::restrictuser(this),
        _Internal::restrictuser(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspEquipSelectRate EquipSelectRate = 571;
  if (this->_internal_has_equipselectrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(571, _Internal::equipselectrate(this),
        _Internal::equipselectrate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspReportAbsent ReportAbsent = 572;
  if (this->_internal_has_reportabsent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(572, _Internal::reportabsent(this),
        _Internal::reportabsent(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendWeek RecommendWeek = 600;
  if (this->_internal_has_recommendweek()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(600, _Internal::recommendweek(this),
        _Internal::recommendweek(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendOfficial RecommendOfficial = 601;
  if (this->_internal_has_recommendofficial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(601, _Internal::recommendofficial(this),
        _Internal::recommendofficial(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendLatest RecommendLatest = 602;
  if (this->_internal_has_recommendlatest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(602, _Internal::recommendlatest(this),
        _Internal::recommendlatest(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendHistory RecommendHistory = 603;
  if (this->_internal_has_recommendhistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(603, _Internal::recommendhistory(this),
        _Internal::recommendhistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendCollect RecommendCollect = 604;
  if (this->_internal_has_recommendcollect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(604, _Internal::recommendcollect(this),
        _Internal::recommendcollect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendSet RecommendSet = 605;
  if (this->_internal_has_recommendset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(605, _Internal::recommendset(this),
        _Internal::recommendset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendGetCollection RecommendGetCollection = 606;
  if (this->_internal_has_recommendgetcollection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(606, _Internal::recommendgetcollection(this),
        _Internal::recommendgetcollection(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRecommendEquip RecommendEquip = 607;
  if (this->_internal_has_recommendequip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(607, _Internal::recommendequip(this),
        _Internal::recommendequip(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspLoginCancel LoginCancel = 608;
  if (this->_internal_has_logincancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(608, _Internal::logincancel(this),
        _Internal::logincancel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspConvertDebris ConvertDebris = 609;
  if (this->_internal_has_convertdebris()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(609, _Internal::convertdebris(this),
        _Internal::convertdebris(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUseProtectionCard ProtectionCard = 610;
  if (this->_internal_has_protectioncard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(610, _Internal::protectioncard(this),
        _Internal::protectioncard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUsePassportCard UsePassportCard = 611;
  if (this->_internal_has_usepassportcard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(611, _Internal::usepassportcard(this),
        _Internal::usepassportcard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetMedal SetMedal = 612;
  if (this->_internal_has_setmedal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(612, _Internal::setmedal(this),
        _Internal::setmedal(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnSetMedal UnSetMedal = 613;
  if (this->_internal_has_unsetmedal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(613, _Internal::unsetmedal(this),
        _Internal::unsetmedal(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPlayerMedals PlayerMedals = 614;
  if (this->_internal_has_playermedals()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(614, _Internal::playermedals(this),
        _Internal::playermedals(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateHotDot UpdateHotDot = 615;
  if (this->_internal_has_updatehotdot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(615, _Internal::updatehotdot(this),
        _Internal::updatehotdot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspQueryHotDot QueryHotDot = 616;
  if (this->_internal_has_queryhotdot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(616, _Internal::queryhotdot(this),
        _Internal::queryhotdot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetCache SetCache = 617;
  if (this->_internal_has_setcache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(617, _Internal::setcache(this),
        _Internal::setcache(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetCache GetCache = 618;
  if (this->_internal_has_getcache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(618, _Internal::getcache(this),
        _Internal::getcache(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyChallengeCount BuyChallengeCount = 619;
  if (this->_internal_has_buychallengecount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(619, _Internal::buychallengecount(this),
        _Internal::buychallengecount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetPveRank GetPveRank = 620;
  if (this->_internal_has_getpverank()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(620, _Internal::getpverank(this),
        _Internal::getpverank(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspAuthAccount AuthAccount = 621;
  if (this->_internal_has_authaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(621, _Internal::authaccount(this),
        _Internal::authaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnbindAccount UnbindAccount = 622;
  if (this->_internal_has_unbindaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(622, _Internal::unbindaccount(this),
        _Internal::unbindaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBagToItem BagToItem = 623;
  if (this->_internal_has_bagtoitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(623, _Internal::bagtoitem(this),
        _Internal::bagtoitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspIdentifyItem IdentifyItem = 624;
  if (this->_internal_has_identifyitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(624, _Internal::identifyitem(this),
        _Internal::identifyitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspInsetItemAffix InsetItemAffix = 625;
  if (this->_internal_has_insetitemaffix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(625, _Internal::insetitemaffix(this),
        _Internal::insetitemaffix(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUnsetItemAffix UnsetItemAffix = 626;
  if (this->_internal_has_unsetitemaffix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(626, _Internal::unsetitemaffix(this),
        _Internal::unsetitemaffix(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetDefaultAttributes SetDefaultAttributes = 627;
  if (this->_internal_has_setdefaultattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(627, _Internal::setdefaultattributes(this),
        _Internal::setdefaultattributes(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspCheckCancel CheckCancel = 628;
  if (this->_internal_has_checkcancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(628, _Internal::checkcancel(this),
        _Internal::checkcancel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspCancelAccount CancelAccount = 629;
  if (this->_internal_has_cancelaccount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(629, _Internal::cancelaccount(this),
        _Internal::cancelaccount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspOAuthApp OAuthApp = 630;
  if (this->_internal_has_oauthapp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(630, _Internal::oauthapp(this),
        _Internal::oauthapp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetSelfNumRankData SelfNumRankData = 631;
  if (this->_internal_has_selfnumrankdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(631, _Internal::selfnumrankdata(this),
        _Internal::selfnumrankdata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateCardGroup UpdateCardGroup = 632;
  if (this->_internal_has_updatecardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(632, _Internal::updatecardgroup(this),
        _Internal::updatecardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateCardGroupName UpdateCardGroupName = 633;
  if (this->_internal_has_updatecardgroupname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(633, _Internal::updatecardgroupname(this),
        _Internal::updatecardgroupname(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyPveBuff BuyPveBuff = 634;
  if (this->_internal_has_buypvebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(634, _Internal::buypvebuff(this),
        _Internal::buypvebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetCardGroup SetCardGroup = 635;
  if (this->_internal_has_setcardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(635, _Internal::setcardgroup(this),
        _Internal::setcardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspBuyPveChessTemplate BuyPveChessTemplate = 636;
  if (this->_internal_has_buypvechesstemplate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(636, _Internal::buypvechesstemplate(this),
        _Internal::buypvechesstemplate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPveUnlockChessTemplate PveUnlockChessTemplate = 637;
  if (this->_internal_has_pveunlockchesstemplate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(637, _Internal::pveunlockchesstemplate(this),
        _Internal::pveunlockchesstemplate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPveSetTeamDeBuff PveSetTeamDeBuff = 638;
  if (this->_internal_has_pvesetteamdebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(638, _Internal::pvesetteamdebuff(this),
        _Internal::pvesetteamdebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChoseCardGroup ChoseCardGroup = 639;
  if (this->_internal_has_chosecardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(639, _Internal::chosecardgroup(this),
        _Internal::chosecardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRemoveOvertimeBuff RemoveOvertimeBuff = 640;
  if (this->_internal_has_removeovertimebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(640, _Internal::removeovertimebuff(this),
        _Internal::removeovertimebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 641;
  if (this->_internal_has_updatenewcardgroupsign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(641, _Internal::updatenewcardgroupsign(this),
        _Internal::updatenewcardgroupsign(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTDGetOnHookAward TDGetOnHookAward = 644;
  if (this->_internal_has_tdgetonhookaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(644, _Internal::tdgetonhookaward(this),
        _Internal::tdgetonhookaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CsRspTDDraw TDDraw = 645;
  if (this->_internal_has_tddraw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(645, _Internal::tddraw(this),
        _Internal::tddraw(this).GetCachedSize(), target, stream);
  }

  // .msg.CsRspTDBuyCard TDBuyCard = 646;
  if (this->_internal_has_tdbuycard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(646, _Internal::tdbuycard(this),
        _Internal::tdbuycard(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTDSetCardGroup TDSetCardGroup = 647;
  if (this->_internal_has_tdsetcardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(647, _Internal::tdsetcardgroup(this),
        _Internal::tdsetcardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTDLevelUp TDLevelUp = 648;
  if (this->_internal_has_tdlevelup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(648, _Internal::tdlevelup(this),
        _Internal::tdlevelup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTDEquip TDEquip = 649;
  if (this->_internal_has_tdequip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(649, _Internal::tdequip(this),
        _Internal::tdequip(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorUpdateSetting MentorUpdateSetting = 650;
  if (this->_internal_has_mentorupdatesetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(650, _Internal::mentorupdatesetting(this),
        _Internal::mentorupdatesetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorInvite MentorInvite = 651;
  if (this->_internal_has_mentorinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(651, _Internal::mentorinvite(this),
        _Internal::mentorinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorConfirmInvite MentorConfirmInvite = 652;
  if (this->_internal_has_mentorconfirminvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(652, _Internal::mentorconfirminvite(this),
        _Internal::mentorconfirminvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorRecommendList MentorRecommendList = 653;
  if (this->_internal_has_mentorrecommendlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(653, _Internal::mentorrecommendlist(this),
        _Internal::mentorrecommendlist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorGetTaskAward MentorGetTaskAward = 654;
  if (this->_internal_has_mentorgettaskaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(654, _Internal::mentorgettaskaward(this),
        _Internal::mentorgettaskaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorGraduate MentorGraduate = 655;
  if (this->_internal_has_mentorgraduate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(655, _Internal::mentorgraduate(this),
        _Internal::mentorgraduate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorRelieveRelation MentorRelieveRelation = 656;
  if (this->_internal_has_mentorrelieverelation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(656, _Internal::mentorrelieverelation(this),
        _Internal::mentorrelieverelation(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetMentorInfo GetMentorInfo = 657;
  if (this->_internal_has_getmentorinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(657, _Internal::getmentorinfo(this),
        _Internal::getmentorinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspMentorGetInviteMsg MentorGetInviteMsg = 658;
  if (this->_internal_has_mentorgetinvitemsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(658, _Internal::mentorgetinvitemsg(this),
        _Internal::mentorgetinvitemsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspTeamMsg TeamMsg = 659;
  if (this->_internal_has_teammsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(659, _Internal::teammsg(this),
        _Internal::teammsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChatMsg ChatMsg = 660;
  if (this->_internal_has_chatmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(660, _Internal::chatmsg(this),
        _Internal::chatmsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspChannelChat ChannelChat = 661;
  if (this->_internal_has_channelchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(661, _Internal::channelchat(this),
        _Internal::channelchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateCardGroupBetter UpdateCardGroupBetter = 662;
  if (this->_internal_has_updatecardgroupbetter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(662, _Internal::updatecardgroupbetter(this),
        _Internal::updatecardgroupbetter(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspUpdateCardGroupSetting UpdateCardGroupSetting = 663;
  if (this->_internal_has_updatecardgroupsetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(663, _Internal::updatecardgroupsetting(this),
        _Internal::updatecardgroupsetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetAuctionName SetAuctionName = 664;
  if (this->_internal_has_setauctionname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(664, _Internal::setauctionname(this),
        _Internal::setauctionname(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetAuctionRemark SetAuctionRemark = 665;
  if (this->_internal_has_setauctionremark()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(665, _Internal::setauctionremark(this),
        _Internal::setauctionremark(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetBalance GetBalance = 666;
  if (this->_internal_has_getbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(666, _Internal::getbalance(this),
        _Internal::getbalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspRechargeBalance RechargeBalance = 667;
  if (this->_internal_has_rechargebalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(667, _Internal::rechargebalance(this),
        _Internal::rechargebalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspWithdrawBalance WithdrawBalance = 668;
  if (this->_internal_has_withdrawbalance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(668, _Internal::withdrawbalance(this),
        _Internal::withdrawbalance(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspPersonalRecommendMall PersonalRecommendMall = 669;
  if (this->_internal_has_personalrecommendmall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(669, _Internal::personalrecommendmall(this),
        _Internal::personalrecommendmall(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspGetMedalChestAward GetMedalChestAward = 670;
  if (this->_internal_has_getmedalchestaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(670, _Internal::getmedalchestaward(this),
        _Internal::getmedalchestaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSRspSetItemAutoUse SetItemAutoUse = 671;
  if (this->_internal_has_setitemautouse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(671, _Internal::setitemautouse(this),
        _Internal::setitemautouse(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspBody)
  return target;
}

size_t CSRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ErrMsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // .msg.CSRspHeart Heart = 4;
  if (this->_internal_has_heart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.heart_);
  }

  // .msg.CSRspLogin Login = 5;
  if (this->_internal_has_login()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.login_);
  }

  // .msg.CSRspVersionCheck VersionCheck = 6;
  if (this->_internal_has_versioncheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.versioncheck_);
  }

  // .msg.CSRspResourceVersionCheck ResourceVersionCheck = 7;
  if (this->_internal_has_resourceversioncheck()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resourceversioncheck_);
  }

  // .msg.CSRspApplyHallServer ApplyHallServer = 8;
  if (this->_internal_has_applyhallserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applyhallserver_);
  }

  // .msg.CSRspGetNumRank GetNumRank = 9;
  if (this->_internal_has_getnumrank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getnumrank_);
  }

  // .msg.CSRspWorldChat WorldChat = 10;
  if (this->_internal_has_worldchat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worldchat_);
  }

  // .msg.CSRspPlayersBaseInfo PlayersBaseInfo = 11;
  if (this->_internal_has_playersbaseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playersbaseinfo_);
  }

  // .msg.CSRspPlayerDetailInfo PlayerDetailInfo = 12;
  if (this->_internal_has_playerdetailinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerdetailinfo_);
  }

  // .msg.CSRspReadMail ReadMail = 13;
  if (this->_internal_has_readmail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.readmail_);
  }

  // .msg.CSRspGetMailAward GetMailAward = 14;
  if (this->_internal_has_getmailaward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmailaward_);
  }

  // .msg.CSRspBuyEgg BuyEgg = 15;
  if (this->_internal_has_buyegg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buyegg_);
  }

  // .msg.CSRspUserNameSet UserNameSet = 16;
  if (this->_internal_has_usernameset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usernameset_);
  }

  // .msg.CSRspUserNameRandom UserNameRandom = 17;
  if (this->_internal_has_usernamerandom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usernamerandom_);
  }

  // .msg.CSRspHeadPicSet HeadPicSet = 18;
  if (this->_internal_has_headpicset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.headpicset_);
  }

  // .msg.CSRspDressChessPlayer DressChessPlayer = 19;
  if (this->_internal_has_dresschessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dresschessplayer_);
  }

  // .msg.CSRspDressScene DressScene = 20;
  if (this->_internal_has_dressscene()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dressscene_);
  }

  // .msg.CSRspPvpLogin PvpLogin = 21;
  if (this->_internal_has_pvplogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvplogin_);
  }

  // .msg.CSRspPvpEnd PvpEnd = 24;
  if (this->_internal_has_pvpend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpend_);
  }

  // .msg.CSRspPlayerFinish PlayerFinish = 25;
  if (this->_internal_has_playerfinish()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerfinish_);
  }

  // .msg.CSRspPlayerQuit PlayerQuit = 26;
  if (this->_internal_has_playerquit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerquit_);
  }

  // .msg.CSRspSellItem SellItem = 27;
  if (this->_internal_has_sellitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sellitem_);
  }

  // .msg.CSRspGetEvalAward GetEvalAward = 28;
  if (this->_internal_has_getevalaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getevalaward_);
  }

  // .msg.CSRspUseChessPlayer UseChessPlayer = 29;
  if (this->_internal_has_usechessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usechessplayer_);
  }

  // .msg.CSRspGuidReport GuidReport = 30;
  if (this->_internal_has_guidreport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guidreport_);
  }

  // .msg.CSRspGetCodeAward GetCodeAward = 31;
  if (this->_internal_has_getcodeaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getcodeaward_);
  }

  // .msg.CSRspRoundReport RoundReport = 32;
  if (this->_internal_has_roundreport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roundreport_);
  }

  // .msg.CSRspLoadingProgress LoadingProgress = 33;
  if (this->_internal_has_loadingprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loadingprogress_);
  }

  // .msg.CSRspPvpChat PvpChat = 34;
  if (this->_internal_has_pvpchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpchat_);
  }

  // .msg.CSRspChessCombine ChessCombine = 35;
  if (this->_internal_has_chesscombine()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesscombine_);
  }

  // .msg.CSRspExpose Expose = 36;
  if (this->_internal_has_expose()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expose_);
  }

  // .msg.CSRspApplyOrderId ApplyOrderId = 37;
  if (this->_internal_has_applyorderid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applyorderid_);
  }

  // .msg.CSRspReportOrderInfo ReportOrderInfo = 38;
  if (this->_internal_has_reportorderinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportorderinfo_);
  }

  // .msg.CSRspSetItem SetItem = 39;
  if (this->_internal_has_setitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setitem_);
  }

  // .msg.CSRspUnsetItem UnsetItem = 40;
  if (this->_internal_has_unsetitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetitem_);
  }

  // .msg.CSRspRandomItem RandomItem = 41;
  if (this->_internal_has_randomitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.randomitem_);
  }

  // .msg.CSRspChat Chat = 42;
  if (this->_internal_has_chat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_);
  }

  // .msg.CSRspSetChessPlayer SetChessPlayer = 43;
  if (this->_internal_has_setchessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setchessplayer_);
  }

  // .msg.CSRspUnsetChessPlayer UnsetChessPlayer = 44;
  if (this->_internal_has_unsetchessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetchessplayer_);
  }

  // .msg.CSRspGetFansList GetFansList = 45;
  if (this->_internal_has_getfanslist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getfanslist_);
  }

  // .msg.CSRspFollowPlayer FollowPlayer = 46;
  if (this->_internal_has_followplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.followplayer_);
  }

  // .msg.CSRspUnfollowPlayer UnfollowPlayer = 47;
  if (this->_internal_has_unfollowplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unfollowplayer_);
  }

  // .msg.CSRspPlayersStatusInfo PlayersStatusInfo = 48;
  if (this->_internal_has_playersstatusinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playersstatusinfo_);
  }

  // .msg.CSRspInviteJoinTeam InviteJoinTeam = 49;
  if (this->_internal_has_invitejointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.invitejointeam_);
  }

  // .msg.CSRspJoinTeam JoinTeam = 50;
  if (this->_internal_has_jointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jointeam_);
  }

  // .msg.CSRspReportPayResponse ReportPayResponse = 51;
  if (this->_internal_has_reportpayresponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportpayresponse_);
  }

  // .msg.CSRspRejectJoinTeam RejectJoinTeam = 52;
  if (this->_internal_has_rejectjointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rejectjointeam_);
  }

  // .msg.CSRspShieldChat ShieldChat = 53;
  if (this->_internal_has_shieldchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shieldchat_);
  }

  // .msg.CSRspBuyPassportLevel BuyPassportLevel = 54;
  if (this->_internal_has_buypassportlevel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buypassportlevel_);
  }

  // .msg.CSRspUpgradePassport UpgradePassport = 55;
  if (this->_internal_has_upgradepassport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upgradepassport_);
  }

  // .msg.CSRspGetPassportLevelAward GetPassportLevelAward = 56;
  if (this->_internal_has_getpassportlevelaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpassportlevelaward_);
  }

  // .msg.CSRspGetPassportTaskAward GetPassportTaskAward = 57;
  if (this->_internal_has_getpassporttaskaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpassporttaskaward_);
  }

  // .msg.CSRspTelBook TelBook = 58;
  if (this->_internal_has_telbook()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.telbook_);
  }

  // .msg.CSRspActivatePassport ActivatePassport = 59;
  if (this->_internal_has_activatepassport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activatepassport_);
  }

  // .msg.CSRspRankSeasonEval RankSeasonEval = 60;
  if (this->_internal_has_rankseasoneval()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rankseasoneval_);
  }

  // .msg.CSRspBindAccount BindAccount = 61;
  if (this->_internal_has_bindaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindaccount_);
  }

  // .msg.CSRspIncAdShowCount IncAdsShowCount = 62;
  if (this->_internal_has_incadsshowcount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.incadsshowcount_);
  }

  // .msg.CSRspUseBonusCard UseBonusCard = 63;
  if (this->_internal_has_usebonuscard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usebonuscard_);
  }

  // .msg.CSRspGetSeasonAward GetSeasonAward = 64;
  if (this->_internal_has_getseasonaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getseasonaward_);
  }

  // .msg.CSRspGetAlphaActivityAward GetAlphaActivityAward = 65;
  if (this->_internal_has_getalphaactivityaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getalphaactivityaward_);
  }

  // .msg.CSRspGetLanguageData GetLanguageData = 66;
  if (this->_internal_has_getlanguagedata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getlanguagedata_);
  }

  // .msg.CSRspGetActivityAward GetActivityAward = 67;
  if (this->_internal_has_getactivityaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getactivityaward_);
  }

  // .msg.CSRspGetActivityData GetActivityData = 68;
  if (this->_internal_has_getactivitydata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getactivitydata_);
  }

  // .msg.CSRspSendSms SendSms = 69;
  if (this->_internal_has_sendsms()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendsms_);
  }

  // .msg.CSRspGetMeleeAward GetMeleeAward = 70;
  if (this->_internal_has_getmeleeaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmeleeaward_);
  }

  // .msg.CSRspAddAiToTeam AddAiToTeam = 71;
  if (this->_internal_has_addaitoteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addaitoteam_);
  }

  // .msg.CSRspShare Share = 72;
  if (this->_internal_has_share()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.share_);
  }

  // .msg.CSRspSkipInterface SkipInterface = 73;
  if (this->_internal_has_skipinterface()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skipinterface_);
  }

  // .msg.CSRspTeamGame TeamGame = 74;
  if (this->_internal_has_teamgame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamgame_);
  }

  // .msg.CSRspSetTeamMode SetTeamMode = 75;
  if (this->_internal_has_setteammode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setteammode_);
  }

  // .msg.CSRspSetHistoryPvpShowPermission HistoryPvpShowPermission = 76;
  if (this->_internal_has_historypvpshowpermission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.historypvpshowpermission_);
  }

  // .msg.CSRspSearchTeam SearchTeam = 77;
  if (this->_internal_has_searchteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.searchteam_);
  }

  // .msg.CSRspApplyChat ApplyChat = 78;
  if (this->_internal_has_applychat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applychat_);
  }

  // .msg.CSRspChatLogin ChatLogin = 79;
  if (this->_internal_has_chatlogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chatlogin_);
  }

  // .msg.CSRspProbeNetDelay ProbeNetDelay = 80;
  if (this->_internal_has_probenetdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.probenetdelay_);
  }

  // .msg.CSRspGetEggs GetEggs = 81;
  if (this->_internal_has_geteggs()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geteggs_);
  }

  // .msg.CSRspBuyGoods BuyGoods = 82;
  if (this->_internal_has_buygoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buygoods_);
  }

  // .msg.CSRspExchangePassportGoods ExchangePassportGoods = 83;
  if (this->_internal_has_exchangepassportgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchangepassportgoods_);
  }

  // .msg.CSRspUsePassportTaskCard UsePassportTaskCard = 84;
  if (this->_internal_has_usepassporttaskcard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usepassporttaskcard_);
  }

  // .msg.CSRspOpenRandChest OpenRandChest = 85;
  if (this->_internal_has_openrandchest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.openrandchest_);
  }

  // .msg.CSRspEggLottery EggLottery = 86;
  if (this->_internal_has_egglottery()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.egglottery_);
  }

  // .msg.CSRspQueryDiamondBalance QueryDiamondBalance = 87;
  if (this->_internal_has_querydiamondbalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.querydiamondbalance_);
  }

  // .msg.CSRspUseItem UseItem = 88;
  if (this->_internal_has_useitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.useitem_);
  }

  // .msg.CSRspUseExperienceCard UseExperienceCard = 89;
  if (this->_internal_has_useexperiencecard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.useexperiencecard_);
  }

  // .msg.CSRspRandTargetItem RandTargetItem = 90;
  if (this->_internal_has_randtargetitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.randtargetitem_);
  }

  // .msg.CSRspAddBlacklist AddBlacklist = 91;
  if (this->_internal_has_addblacklist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addblacklist_);
  }

  // .msg.CSRspRemoveBlacklist RemoveBlacklist = 92;
  if (this->_internal_has_removeblacklist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeblacklist_);
  }

  // .msg.CSRspReportPlayerBirth ReportPlayerBirth = 93;
  if (this->_internal_has_reportplayerbirth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportplayerbirth_);
  }

  // .msg.CSRspReportInfoInput ReportInfoInput = 94;
  if (this->_internal_has_reportinfoinput()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportinfoinput_);
  }

  // .msg.CSRspSendVerificationCode SendVerificationCode = 95;
  if (this->_internal_has_sendverificationcode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendverificationcode_);
  }

  // .msg.CSRspBindPhoneNumber BindPhoneNumber = 96;
  if (this->_internal_has_bindphonenumber()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindphonenumber_);
  }

  // .msg.CSRspWorldInvite WorldInvite = 97;
  if (this->_internal_has_worldinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worldinvite_);
  }

  // .msg.CSRspRemoveExpireItem RemoveExpireItem = 98;
  if (this->_internal_has_removeexpireitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeexpireitem_);
  }

  // .msg.CSRspGetMallGoods GetMallGoods = 99;
  if (this->_internal_has_getmallgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmallgoods_);
  }

  // .msg.CSRspBuyMallGoods BuyMallGoods = 100;
  if (this->_internal_has_buymallgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buymallgoods_);
  }

  // .msg.CSRspBindSharingCode BindSharingCode = 101;
  if (this->_internal_has_bindsharingcode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindsharingcode_);
  }

  // .msg.CSRspWXBlessBag WXBlessBag = 102;
  if (this->_internal_has_wxblessbag()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxblessbag_);
  }

  // .msg.CSRspUpdateFriendsInGame UpdateFriendsInGame = 103;
  if (this->_internal_has_updatefriendsingame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatefriendsingame_);
  }

  // .msg.CSRspShareReward ShareReward = 104;
  if (this->_internal_has_sharereward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sharereward_);
  }

  // .msg.CSRspAllFightInfo AllFightInfo = 105;
  if (this->_internal_has_allfightinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allfightinfo_);
  }

  // .msg.CSRspGetOldPlayer GetOldPlayer = 106;
  if (this->_internal_has_getoldplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getoldplayer_);
  }

  // .msg.CSRspBindOldPlayer BindOldPlayer = 107;
  if (this->_internal_has_bindoldplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindoldplayer_);
  }

  // .msg.CSRspSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 108;
  if (this->_internal_has_sendverificationcodewithcheckredis()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendverificationcodewithcheckredis_);
  }

  // .msg.CSRspReportSetting ReportSetting = 109;
  if (this->_internal_has_reportsetting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportsetting_);
  }

  // .msg.CSRspAntiData AntiData = 110;
  if (this->_internal_has_antidata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.antidata_);
  }

  // .msg.CSRspTlogData TlogData = 111;
  if (this->_internal_has_tlogdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tlogdata_);
  }

  // .msg.CSRspDaySign DaySign = 112;
  if (this->_internal_has_daysign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.daysign_);
  }

  // .msg.CSRspDayFitAvoid DayFitAvoid = 113;
  if (this->_internal_has_dayfitavoid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dayfitavoid_);
  }

  // .msg.CSRspShareCountAward ShareCountAward = 114;
  if (this->_internal_has_sharecountaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sharecountaward_);
  }

  // .msg.CSRspRealationStar RealationStar = 115;
  if (this->_internal_has_realationstar()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.realationstar_);
  }

  // .msg.CSRspGetRealationStarInviteSucc GetRealationStarInviteSucc = 116;
  if (this->_internal_has_getrealationstarinvitesucc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getrealationstarinvitesucc_);
  }

  // .msg.CSRspGetRealationStar GetRealationStar = 117;
  if (this->_internal_has_getrealationstar()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getrealationstar_);
  }

  // .msg.CSRspGetActRecord RspActRecord = 118;
  if (this->_internal_has_rspactrecord()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rspactrecord_);
  }

  // .msg.CSRspJoinVoiceTeam JoinVoiceTeam = 119;
  if (this->_internal_has_joinvoiceteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoiceteam_);
  }

  // .msg.CSRspJoinVoicePvp JoinVoicePvp = 120;
  if (this->_internal_has_joinvoicepvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoicepvp_);
  }

  // .msg.CSRspJoinVoiceCamp JoinVoiceCamp = 121;
  if (this->_internal_has_joinvoicecamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoicecamp_);
  }

  // .msg.CSRspUserCountrySet UserCountrySet = 122;
  if (this->_internal_has_usercountryset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usercountryset_);
  }

  // .msg.CSRspObserve Observe = 123;
  if (this->_internal_has_observe()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observe_);
  }

  // .msg.CSRspGetRecommendPvp GetRecommendPvp = 124;
  if (this->_internal_has_getrecommendpvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getrecommendpvp_);
  }

  // .msg.CSRspObserveLogin ObserveLogin = 125;
  if (this->_internal_has_observelogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observelogin_);
  }

  // .msg.CSRspQuitObserve QuitObserve = 126;
  if (this->_internal_has_quitobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quitobserve_);
  }

  // .msg.CSRspGetObserveInfo GetObserveInfo = 127;
  if (this->_internal_has_getobserveinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getobserveinfo_);
  }

  // .msg.CSRspFreeFlow FreeFlow = 128;
  if (this->_internal_has_freeflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.freeflow_);
  }

  // .msg.CSRspSetPushToken SetPushToken = 129;
  if (this->_internal_has_setpushtoken()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setpushtoken_);
  }

  // .msg.CSRspTlogEvent TlogEvent = 130;
  if (this->_internal_has_tlogevent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tlogevent_);
  }

  // .msg.CSRspWxVVipAward WxVVipAward = 131;
  if (this->_internal_has_wxvvipaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxvvipaward_);
  }

  // .msg.CSRspGetRelationStarWX RelationStarWX = 132;
  if (this->_internal_has_relationstarwx()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relationstarwx_);
  }

  // .msg.CSRspSendWxRedPacket SendWxRedPacket = 133;
  if (this->_internal_has_sendwxredpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sendwxredpacket_);
  }

  // .msg.CSRspRecvWxRedPacket RecvWxRedPacket = 134;
  if (this->_internal_has_recvwxredpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recvwxredpacket_);
  }

  // .msg.CSRspWxRedPktLike WxRedPktLike = 135;
  if (this->_internal_has_wxredpktlike()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxredpktlike_);
  }

  // .msg.CSRspWxRedPktRank WxRedPktRank = 136;
  if (this->_internal_has_wxredpktrank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxredpktrank_);
  }

  // .msg.CSRspObservePrivilege SetObservePrivilege = 137;
  if (this->_internal_has_setobserveprivilege()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setobserveprivilege_);
  }

  // .msg.CSRspPresetFastChat PresetFastChat = 138;
  if (this->_internal_has_presetfastchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.presetfastchat_);
  }

  // .msg.CSRspChangeSlotTeam ChangeSlotTeam = 139;
  if (this->_internal_has_changeslotteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changeslotteam_);
  }

  // .msg.CSRspChangeSubModeTeam ChangeSubModeTeam = 140;
  if (this->_internal_has_changesubmodeteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changesubmodeteam_);
  }

  // .msg.CSRspConfirmChangeSlotTeam ConfirmChangeSlotTeam = 141;
  if (this->_internal_has_confirmchangeslotteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.confirmchangeslotteam_);
  }

  // .msg.CSRspPvpRoundEnd PvpRoundEnd = 142;
  if (this->_internal_has_pvproundend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvproundend_);
  }

  // .msg.CSRspPvp Pvp = 143;
  if (this->_internal_has_pvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvp_);
  }

  // .msg.CSRspTeamReady TeamReady = 144;
  if (this->_internal_has_teamready()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamready_);
  }

  // .msg.CSRspBindOldBusinessPlayer BindOldBusinessPlayer = 145;
  if (this->_internal_has_bindoldbusinessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindoldbusinessplayer_);
  }

  // .msg.CSRspTranslate Translate = 146;
  if (this->_internal_has_translate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translate_);
  }

  // .msg.CSRspSubmitQuestionnaire SubmitQuestionnaire = 147;
  if (this->_internal_has_submitquestionnaire()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.submitquestionnaire_);
  }

  // .msg.CSRspCancelChangeSlot CancelChangeSlot = 148;
  if (this->_internal_has_cancelchangeslot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelchangeslot_);
  }

  // .msg.CSRspSetChessSkin SetChessSkin = 149;
  if (this->_internal_has_setchessskin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setchessskin_);
  }

  // .msg.CSRspUnsetChessSkin UnsetChessSkin = 150;
  if (this->_internal_has_unsetchessskin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetchessskin_);
  }

  // .msg.CSRspCompose Compose = 151;
  if (this->_internal_has_compose()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.compose_);
  }

  // .msg.CSRspVideo Video = 152;
  if (this->_internal_has_video()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.video_);
  }

  // .msg.CSRspOffHelpReddot OffHelpReddot = 153;
  if (this->_internal_has_offhelpreddot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offhelpreddot_);
  }

  // .msg.CSRspChangeLanguage ChangeLanguage = 154;
  if (this->_internal_has_changelanguage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changelanguage_);
  }

  // .msg.CSRspSetProvince SetProvince = 155;
  if (this->_internal_has_setprovince()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setprovince_);
  }

  // .msg.CSRspLongyuanVoice LongyuanVoice = 156;
  if (this->_internal_has_longyuanvoice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.longyuanvoice_);
  }

  // .msg.CSRspEnrollTournament EnrollTournament = 157;
  if (this->_internal_has_enrolltournament()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enrolltournament_);
  }

  // .msg.CSRspJoinTournamentRoom JoinTournamentRoom = 158;
  if (this->_internal_has_jointournamentroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jointournamentroom_);
  }

  // .msg.CSRspTournamentPointAward TournamentPointAward = 159;
  if (this->_internal_has_tournamentpointaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentpointaward_);
  }

  // .msg.CSRspGetEnrollPlayers GetEnrollPlayers = 160;
  if (this->_internal_has_getenrollplayers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getenrollplayers_);
  }

  // .msg.CSRspDealWebMail DealWebMail = 161;
  if (this->_internal_has_dealwebmail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dealwebmail_);
  }

  // .msg.CSRspChallengeAgain ChallengeAgain = 162;
  if (this->_internal_has_challengeagain()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.challengeagain_);
  }

  // .msg.CSRspHistoryChatMsg HistoryChat = 163;
  if (this->_internal_has_historychat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.historychat_);
  }

  // .msg.CSRspSetFriendInvisible SetFriendInvisible = 164;
  if (this->_internal_has_setfriendinvisible()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setfriendinvisible_);
  }

  // .msg.CSRspGetObserveAward GetObserveAward = 165;
  if (this->_internal_has_getobserveaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getobserveaward_);
  }

  // .msg.CSRspInviteObserve InviteObserve = 166;
  if (this->_internal_has_inviteobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inviteobserve_);
  }

  // .msg.CSRspRejectObserve RejectObserve = 167;
  if (this->_internal_has_rejectobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rejectobserve_);
  }

  // .msg.CSRspGetTxPlayer GetTxPlayer = 168;
  if (this->_internal_has_gettxplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gettxplayer_);
  }

  // .msg.CSRspGetThirdPvpInfo GetThirdPvpInfo = 169;
  if (this->_internal_has_getthirdpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getthirdpvpinfo_);
  }

  // .msg.CSRspMarkPlayerGuide MarkPlayerGuide = 170;
  if (this->_internal_has_markplayerguide()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.markplayerguide_);
  }

  // .msg.CSRspMarkChessSkinClicked ChessSkinClicked = 171;
  if (this->_internal_has_chessskinclicked()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessskinclicked_);
  }

  // .msg.CSRsqQueryPs4Entitlements QueryPs4Entitlements = 172;
  if (this->_internal_has_queryps4entitlements()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.queryps4entitlements_);
  }

  // .msg.CSRspActDaySign ActDaySign = 173;
  if (this->_internal_has_actdaysign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actdaysign_);
  }

  // .msg.CSRspHaveThirdPvp HaveThirdPvpInfo = 174;
  if (this->_internal_has_havethirdpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.havethirdpvpinfo_);
  }

  // .msg.CSRspActivityMall ActivityMall = 175;
  if (this->_internal_has_activitymall()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activitymall_);
  }

  // .msg.CSRspPsOnly PsOnly = 176;
  if (this->_internal_has_psonly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.psonly_);
  }

  // .msg.CSRspChangeChannelType ChangeChannelType = 177;
  if (this->_internal_has_changechanneltype()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changechanneltype_);
  }

  // .msg.CSRspCustomCardOpt CustomCardOpt = 178;
  if (this->_internal_has_customcardopt()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.customcardopt_);
  }

  // .msg.CSRspChampionHistory ChampionHistory = 179;
  if (this->_internal_has_championhistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.championhistory_);
  }

  // .msg.CSRspTournamentLastTopRank TournamentLastTopRank = 180;
  if (this->_internal_has_tournamentlasttoprank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentlasttoprank_);
  }

  // .msg.CSRspBigWinnerDailyAward BigWinnerDailyAward = 181;
  if (this->_internal_has_bigwinnerdailyaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinnerdailyaward_);
  }

  // .msg.CSRspBigWinnerScoreHistory BigWinnerScoreHistory = 182;
  if (this->_internal_has_bigwinnerscorehistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinnerscorehistory_);
  }

  // .msg.CSRspSmeltItem SmeltItem = 183;
  if (this->_internal_has_smeltitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.smeltitem_);
  }

  // .msg.CSRspPVEUpTalentLevel PVEUpTalentLevel = 184;
  if (this->_internal_has_pveuptalentlevel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pveuptalentlevel_);
  }

  // .msg.CSRspPVELuckyAward LuckyAward = 185;
  if (this->_internal_has_luckyaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.luckyaward_);
  }

  // .msg.CSRspApplyChannel ApplyChannel = 186;
  if (this->_internal_has_applychannel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applychannel_);
  }

  // .msg.CSRspOBTeamInfo OBTeamInfo = 300;
  if (this->_internal_has_obteaminfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obteaminfo_);
  }

  // .msg.CSRspGetPvpServerGroup GetPvpServerGroup = 303;
  if (this->_internal_has_getpvpservergroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpvpservergroup_);
  }

  // .msg.CSRspReportPvpInfo ReportPvpInfo = 304;
  if (this->_internal_has_reportpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportpvpinfo_);
  }

  // .msg.CSRspChoosePlayer ChoosePlayer = 305;
  if (this->_internal_has_chooseplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chooseplayer_);
  }

  // .msg.CSRspPingTest PingTest = 306;
  if (this->_internal_has_pingtest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pingtest_);
  }

  // .msg.CSRspReportRegionInfo ReportRegionInfo = 307;
  if (this->_internal_has_reportregioninfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportregioninfo_);
  }

  // .msg.CSRspRecalledPlayer RecalledPlaeyr = 308;
  if (this->_internal_has_recalledplaeyr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recalledplaeyr_);
  }

  // .msg.CSRspWebLogin WebLogin = 309;
  if (this->_internal_has_weblogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weblogin_);
  }

  // .msg.CSRspInviteCodeReset InviteCodeReset = 310;
  if (this->_internal_has_invitecodereset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.invitecodereset_);
  }

  // .msg.CSRspRecallReward RecallReward = 311;
  if (this->_internal_has_recallreward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recallreward_);
  }

  // .msg.CSRspSwitchToCommonMatch SwitchToCommonMatch = 312;
  if (this->_internal_has_switchtocommonmatch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchtocommonmatch_);
  }

  // .msg.CSRspSwitchModeInTeam SwitchModeInTeam = 320;
  if (this->_internal_has_switchmodeinteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchmodeinteam_);
  }

  // .msg.CSRspGetTNRoomState GetTNRoomState = 321;
  if (this->_internal_has_gettnroomstate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gettnroomstate_);
  }

  // .msg.CSRspWorkshopMatch WorkshopMatch = 330;
  if (this->_internal_has_workshopmatch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workshopmatch_);
  }

  // .msg.CSRspBuyWorkshopTicket BuyWorkshopTicket = 331;
  if (this->_internal_has_buyworkshopticket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buyworkshopticket_);
  }

  // .msg.CSRspFavouriteWorkshopMap FavouriteWorkshopMap = 332;
  if (this->_internal_has_favouriteworkshopmap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.favouriteworkshopmap_);
  }

  // .msg.CSRspShortcutMapsOP ShortcutMapsOP = 333;
  if (this->_internal_has_shortcutmapsop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shortcutmapsop_);
  }

  // .msg.CSRspPlayersTournamentInfo PlayersTournamentInfo = 334;
  if (this->_internal_has_playerstournamentinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerstournamentinfo_);
  }

  // .msg.CSRspScoreWorkshopMap ScoreWorkshopMap = 335;
  if (this->_internal_has_scoreworkshopmap()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scoreworkshopmap_);
  }

  // .msg.CSRspMapsVisitedByFriends MapsVisitedByFriends = 336;
  if (this->_internal_has_mapsvisitedbyfriends()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapsvisitedbyfriends_);
  }

  // .msg.CSRspVerifyRealName VerifyRealName = 350;
  if (this->_internal_has_verifyrealname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.verifyrealname_);
  }

  // .msg.CSRspFakePay FakePay = 351;
  if (this->_internal_has_fakepay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fakepay_);
  }

  // .msg.CSRspGuildCreate GuildCreate = 360;
  if (this->_internal_has_guildcreate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildcreate_);
  }

  // .msg.CSRspGuildApply GuildApply = 361;
  if (this->_internal_has_guildapply()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildapply_);
  }

  // .msg.CSRspGuildHome GuildHome = 362;
  if (this->_internal_has_guildhome()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildhome_);
  }

  // .msg.CSRspGuildInfo GuildInfo = 364;
  if (this->_internal_has_guildinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinfo_);
  }

  // .msg.CSRspGuildApprove GuildApprove = 365;
  if (this->_internal_has_guildapprove()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildapprove_);
  }

  // .msg.CSRspGuildSetRole GuildRole = 366;
  if (this->_internal_has_guildrole()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrole_);
  }

  // .msg.CSRspGuildModify GuildModify = 367;
  if (this->_internal_has_guildmodify()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildmodify_);
  }

  // .msg.CSRspGuildKickoff GuildKickoff = 368;
  if (this->_internal_has_guildkickoff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildkickoff_);
  }

  // .msg.CSRspGuildDismiss GuildDismiss = 369;
  if (this->_internal_has_guilddismiss()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guilddismiss_);
  }

  // .msg.CSRspGuildExit GuildExit = 370;
  if (this->_internal_has_guildexit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildexit_);
  }

  // .msg.CSRspGuildChat GuildChat = 371;
  if (this->_internal_has_guildchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildchat_);
  }

  // .msg.CSRspGuildList GuildList = 372;
  if (this->_internal_has_guildlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildlist_);
  }

  // .msg.CSRspGuildRecommendPlayers GuildRecommendPlayers = 373;
  if (this->_internal_has_guildrecommendplayers()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrecommendplayers_);
  }

  // .msg.CSRspGuildInviteList GuildInviteList = 374;
  if (this->_internal_has_guildinvitelist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinvitelist_);
  }

  // .msg.CSRspGuildInvite GuildInvite = 375;
  if (this->_internal_has_guildinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinvite_);
  }

  // .msg.CSRspGuildRejectInvite GuildRejectInvite = 377;
  if (this->_internal_has_guildrejectinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrejectinvite_);
  }

  // .msg.CSRspGetVngCommentAward GetVngCommentAward = 390;
  if (this->_internal_has_getvngcommentaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getvngcommentaward_);
  }

  // .msg.CSRspLevelupChest LevelupChest = 391;
  if (this->_internal_has_levelupchest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.levelupchest_);
  }

  // .msg.CSRspWatchAd WatchAd = 392;
  if (this->_internal_has_watchad()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.watchad_);
  }

  // .msg.CSRspQueryPsTournamentRoom PsTournamentRoom = 393;
  if (this->_internal_has_pstournamentroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pstournamentroom_);
  }

  // .msg.CSRspGetAdCumulateAward GetAdCumulateAward = 394;
  if (this->_internal_has_getadcumulateaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getadcumulateaward_);
  }

  // .msg.CSRspSetMessengerPos SetMessengerPos = 534;
  if (this->_internal_has_setmessengerpos()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setmessengerpos_);
  }

  // .msg.CSRspUpdateAntiAddictionTime AntiAddictionTime = 554;
  if (this->_internal_has_antiaddictiontime()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.antiaddictiontime_);
  }

  // .msg.CSRspCancelReconnect CancelReconnect = 555;
  if (this->_internal_has_cancelreconnect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelreconnect_);
  }

  // .msg.CSRspReconnect Reconnect = 557;
  if (this->_internal_has_reconnect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reconnect_);
  }

  // .msg.CSRspPassThrough PassThrough = 563;
  if (this->_internal_has_passthrough()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passthrough_);
  }

  // .msg.CSRspVisitPlayer VisitPlayer = 564;
  if (this->_internal_has_visitplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visitplayer_);
  }

  // .msg.CSRspLeaveGameEarly LeaveGameEarly = 565;
  if (this->_internal_has_leavegameearly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leavegameearly_);
  }

  // .msg.CSRspGDCommonBin GDCommonBin = 566;
  if (this->_internal_has_gdcommonbin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gdcommonbin_);
  }

  // .msg.CSRspGDCommonBinData GDBinData = 567;
  if (this->_internal_has_gdbindata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gdbindata_);
  }

  // .msg.CSRspBattleCampResult BattleCampResult = 568;
  if (this->_internal_has_battlecampresult()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.battlecampresult_);
  }

  // .msg.CSRspAutoBattleOP AutoBattleOP = 569;
  if (this->_internal_has_autobattleop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autobattleop_);
  }

  // .msg.CSRspRestrictUser RestrictUser = 570;
  if (this->_internal_has_restrictuser()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.restrictuser_);
  }

  // .msg.CSRspEquipSelectRate EquipSelectRate = 571;
  if (this->_internal_has_equipselectrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equipselectrate_);
  }

  // .msg.CSRspReportAbsent ReportAbsent = 572;
  if (this->_internal_has_reportabsent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reportabsent_);
  }

  // .msg.CSRspRecommendWeek RecommendWeek = 600;
  if (this->_internal_has_recommendweek()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendweek_);
  }

  // .msg.CSRspRecommendOfficial RecommendOfficial = 601;
  if (this->_internal_has_recommendofficial()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendofficial_);
  }

  // .msg.CSRspRecommendLatest RecommendLatest = 602;
  if (this->_internal_has_recommendlatest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendlatest_);
  }

  // .msg.CSRspRecommendHistory RecommendHistory = 603;
  if (this->_internal_has_recommendhistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendhistory_);
  }

  // .msg.CSRspRecommendCollect RecommendCollect = 604;
  if (this->_internal_has_recommendcollect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendcollect_);
  }

  // .msg.CSRspRecommendSet RecommendSet = 605;
  if (this->_internal_has_recommendset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendset_);
  }

  // .msg.CSRspRecommendGetCollection RecommendGetCollection = 606;
  if (this->_internal_has_recommendgetcollection()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendgetcollection_);
  }

  // .msg.CSRspRecommendEquip RecommendEquip = 607;
  if (this->_internal_has_recommendequip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recommendequip_);
  }

  // .msg.CSRspLoginCancel LoginCancel = 608;
  if (this->_internal_has_logincancel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logincancel_);
  }

  // .msg.CSRspConvertDebris ConvertDebris = 609;
  if (this->_internal_has_convertdebris()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convertdebris_);
  }

  // .msg.CSRspUseProtectionCard ProtectionCard = 610;
  if (this->_internal_has_protectioncard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protectioncard_);
  }

  // .msg.CSRspUsePassportCard UsePassportCard = 611;
  if (this->_internal_has_usepassportcard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.usepassportcard_);
  }

  // .msg.CSRspSetMedal SetMedal = 612;
  if (this->_internal_has_setmedal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setmedal_);
  }

  // .msg.CSRspUnSetMedal UnSetMedal = 613;
  if (this->_internal_has_unsetmedal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetmedal_);
  }

  // .msg.CSRspPlayerMedals PlayerMedals = 614;
  if (this->_internal_has_playermedals()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playermedals_);
  }

  // .msg.CSRspUpdateHotDot UpdateHotDot = 615;
  if (this->_internal_has_updatehotdot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatehotdot_);
  }

  // .msg.CSRspQueryHotDot QueryHotDot = 616;
  if (this->_internal_has_queryhotdot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.queryhotdot_);
  }

  // .msg.CSRspSetCache SetCache = 617;
  if (this->_internal_has_setcache()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setcache_);
  }

  // .msg.CSRspGetCache GetCache = 618;
  if (this->_internal_has_getcache()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getcache_);
  }

  // .msg.CSRspBuyChallengeCount BuyChallengeCount = 619;
  if (this->_internal_has_buychallengecount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buychallengecount_);
  }

  // .msg.CSRspGetPveRank GetPveRank = 620;
  if (this->_internal_has_getpverank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getpverank_);
  }

  // .msg.CSRspAuthAccount AuthAccount = 621;
  if (this->_internal_has_authaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authaccount_);
  }

  // .msg.CSRspUnbindAccount UnbindAccount = 622;
  if (this->_internal_has_unbindaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unbindaccount_);
  }

  // .msg.CSRspBagToItem BagToItem = 623;
  if (this->_internal_has_bagtoitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bagtoitem_);
  }

  // .msg.CSRspIdentifyItem IdentifyItem = 624;
  if (this->_internal_has_identifyitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifyitem_);
  }

  // .msg.CSRspInsetItemAffix InsetItemAffix = 625;
  if (this->_internal_has_insetitemaffix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insetitemaffix_);
  }

  // .msg.CSRspUnsetItemAffix UnsetItemAffix = 626;
  if (this->_internal_has_unsetitemaffix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unsetitemaffix_);
  }

  // .msg.CSRspSetDefaultAttributes SetDefaultAttributes = 627;
  if (this->_internal_has_setdefaultattributes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setdefaultattributes_);
  }

  // .msg.CSRspCheckCancel CheckCancel = 628;
  if (this->_internal_has_checkcancel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.checkcancel_);
  }

  // .msg.CSRspCancelAccount CancelAccount = 629;
  if (this->_internal_has_cancelaccount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelaccount_);
  }

  // .msg.CSRspOAuthApp OAuthApp = 630;
  if (this->_internal_has_oauthapp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oauthapp_);
  }

  // .msg.CSRspGetSelfNumRankData SelfNumRankData = 631;
  if (this->_internal_has_selfnumrankdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selfnumrankdata_);
  }

  // .msg.CSRspUpdateCardGroup UpdateCardGroup = 632;
  if (this->_internal_has_updatecardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroup_);
  }

  // .msg.CSRspUpdateCardGroupName UpdateCardGroupName = 633;
  if (this->_internal_has_updatecardgroupname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroupname_);
  }

  // .msg.CSRspBuyPveBuff BuyPveBuff = 634;
  if (this->_internal_has_buypvebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buypvebuff_);
  }

  // .msg.CSRspSetCardGroup SetCardGroup = 635;
  if (this->_internal_has_setcardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setcardgroup_);
  }

  // .msg.CSRspBuyPveChessTemplate BuyPveChessTemplate = 636;
  if (this->_internal_has_buypvechesstemplate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buypvechesstemplate_);
  }

  // .msg.CSRspPveUnlockChessTemplate PveUnlockChessTemplate = 637;
  if (this->_internal_has_pveunlockchesstemplate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pveunlockchesstemplate_);
  }

  // .msg.CSRspPveSetTeamDeBuff PveSetTeamDeBuff = 638;
  if (this->_internal_has_pvesetteamdebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvesetteamdebuff_);
  }

  // .msg.CSRspChoseCardGroup ChoseCardGroup = 639;
  if (this->_internal_has_chosecardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chosecardgroup_);
  }

  // .msg.CSRspRemoveOvertimeBuff RemoveOvertimeBuff = 640;
  if (this->_internal_has_removeovertimebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeovertimebuff_);
  }

  // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 641;
  if (this->_internal_has_updatenewcardgroupsign()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatenewcardgroupsign_);
  }

  // .msg.CSRspTDGetOnHookAward TDGetOnHookAward = 644;
  if (this->_internal_has_tdgetonhookaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdgetonhookaward_);
  }

  // .msg.CsRspTDDraw TDDraw = 645;
  if (this->_internal_has_tddraw()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tddraw_);
  }

  // .msg.CsRspTDBuyCard TDBuyCard = 646;
  if (this->_internal_has_tdbuycard()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdbuycard_);
  }

  // .msg.CSRspTDSetCardGroup TDSetCardGroup = 647;
  if (this->_internal_has_tdsetcardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdsetcardgroup_);
  }

  // .msg.CSRspTDLevelUp TDLevelUp = 648;
  if (this->_internal_has_tdlevelup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdlevelup_);
  }

  // .msg.CSRspTDEquip TDEquip = 649;
  if (this->_internal_has_tdequip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdequip_);
  }

  // .msg.CSRspMentorUpdateSetting MentorUpdateSetting = 650;
  if (this->_internal_has_mentorupdatesetting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorupdatesetting_);
  }

  // .msg.CSRspMentorInvite MentorInvite = 651;
  if (this->_internal_has_mentorinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorinvite_);
  }

  // .msg.CSRspMentorConfirmInvite MentorConfirmInvite = 652;
  if (this->_internal_has_mentorconfirminvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorconfirminvite_);
  }

  // .msg.CSRspMentorRecommendList MentorRecommendList = 653;
  if (this->_internal_has_mentorrecommendlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorrecommendlist_);
  }

  // .msg.CSRspMentorGetTaskAward MentorGetTaskAward = 654;
  if (this->_internal_has_mentorgettaskaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorgettaskaward_);
  }

  // .msg.CSRspMentorGraduate MentorGraduate = 655;
  if (this->_internal_has_mentorgraduate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorgraduate_);
  }

  // .msg.CSRspMentorRelieveRelation MentorRelieveRelation = 656;
  if (this->_internal_has_mentorrelieverelation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorrelieverelation_);
  }

  // .msg.CSRspGetMentorInfo GetMentorInfo = 657;
  if (this->_internal_has_getmentorinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmentorinfo_);
  }

  // .msg.CSRspMentorGetInviteMsg MentorGetInviteMsg = 658;
  if (this->_internal_has_mentorgetinvitemsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorgetinvitemsg_);
  }

  // .msg.CSRspTeamMsg TeamMsg = 659;
  if (this->_internal_has_teammsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teammsg_);
  }

  // .msg.CSRspChatMsg ChatMsg = 660;
  if (this->_internal_has_chatmsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chatmsg_);
  }

  // .msg.CSRspChannelChat ChannelChat = 661;
  if (this->_internal_has_channelchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.channelchat_);
  }

  // .msg.CSRspUpdateCardGroupBetter UpdateCardGroupBetter = 662;
  if (this->_internal_has_updatecardgroupbetter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroupbetter_);
  }

  // .msg.CSRspUpdateCardGroupSetting UpdateCardGroupSetting = 663;
  if (this->_internal_has_updatecardgroupsetting()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatecardgroupsetting_);
  }

  // .msg.CSRspSetAuctionName SetAuctionName = 664;
  if (this->_internal_has_setauctionname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setauctionname_);
  }

  // .msg.CSRspSetAuctionRemark SetAuctionRemark = 665;
  if (this->_internal_has_setauctionremark()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setauctionremark_);
  }

  // .msg.CSRspGetBalance GetBalance = 666;
  if (this->_internal_has_getbalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getbalance_);
  }

  // .msg.CSRspRechargeBalance RechargeBalance = 667;
  if (this->_internal_has_rechargebalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rechargebalance_);
  }

  // .msg.CSRspWithdrawBalance WithdrawBalance = 668;
  if (this->_internal_has_withdrawbalance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.withdrawbalance_);
  }

  // .msg.CSRspPersonalRecommendMall PersonalRecommendMall = 669;
  if (this->_internal_has_personalrecommendmall()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.personalrecommendmall_);
  }

  // .msg.CSRspGetMedalChestAward GetMedalChestAward = 670;
  if (this->_internal_has_getmedalchestaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getmedalchestaward_);
  }

  // .msg.CSRspSetItemAutoUse SetItemAutoUse = 671;
  if (this->_internal_has_setitemautouse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setitemautouse_);
  }

  // uint64 Seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq());
  }

  // .msg.RESULT ErrCode = 2;
  if (this->_internal_errcode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspBody::GetClassData() const { return &_class_data_; }


void CSRspBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspBody*>(&to_msg);
  auto& from = static_cast<const CSRspBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_has_heart()) {
    _this->_internal_mutable_heart()->::msg::CSRspHeart::MergeFrom(
        from._internal_heart());
  }
  if (from._internal_has_login()) {
    _this->_internal_mutable_login()->::msg::CSRspLogin::MergeFrom(
        from._internal_login());
  }
  if (from._internal_has_versioncheck()) {
    _this->_internal_mutable_versioncheck()->::msg::CSRspVersionCheck::MergeFrom(
        from._internal_versioncheck());
  }
  if (from._internal_has_resourceversioncheck()) {
    _this->_internal_mutable_resourceversioncheck()->::msg::CSRspResourceVersionCheck::MergeFrom(
        from._internal_resourceversioncheck());
  }
  if (from._internal_has_applyhallserver()) {
    _this->_internal_mutable_applyhallserver()->::msg::CSRspApplyHallServer::MergeFrom(
        from._internal_applyhallserver());
  }
  if (from._internal_has_getnumrank()) {
    _this->_internal_mutable_getnumrank()->::msg::CSRspGetNumRank::MergeFrom(
        from._internal_getnumrank());
  }
  if (from._internal_has_worldchat()) {
    _this->_internal_mutable_worldchat()->::msg::CSRspWorldChat::MergeFrom(
        from._internal_worldchat());
  }
  if (from._internal_has_playersbaseinfo()) {
    _this->_internal_mutable_playersbaseinfo()->::msg::CSRspPlayersBaseInfo::MergeFrom(
        from._internal_playersbaseinfo());
  }
  if (from._internal_has_playerdetailinfo()) {
    _this->_internal_mutable_playerdetailinfo()->::msg::CSRspPlayerDetailInfo::MergeFrom(
        from._internal_playerdetailinfo());
  }
  if (from._internal_has_readmail()) {
    _this->_internal_mutable_readmail()->::msg::CSRspReadMail::MergeFrom(
        from._internal_readmail());
  }
  if (from._internal_has_getmailaward()) {
    _this->_internal_mutable_getmailaward()->::msg::CSRspGetMailAward::MergeFrom(
        from._internal_getmailaward());
  }
  if (from._internal_has_buyegg()) {
    _this->_internal_mutable_buyegg()->::msg::CSRspBuyEgg::MergeFrom(
        from._internal_buyegg());
  }
  if (from._internal_has_usernameset()) {
    _this->_internal_mutable_usernameset()->::msg::CSRspUserNameSet::MergeFrom(
        from._internal_usernameset());
  }
  if (from._internal_has_usernamerandom()) {
    _this->_internal_mutable_usernamerandom()->::msg::CSRspUserNameRandom::MergeFrom(
        from._internal_usernamerandom());
  }
  if (from._internal_has_headpicset()) {
    _this->_internal_mutable_headpicset()->::msg::CSRspHeadPicSet::MergeFrom(
        from._internal_headpicset());
  }
  if (from._internal_has_dresschessplayer()) {
    _this->_internal_mutable_dresschessplayer()->::msg::CSRspDressChessPlayer::MergeFrom(
        from._internal_dresschessplayer());
  }
  if (from._internal_has_dressscene()) {
    _this->_internal_mutable_dressscene()->::msg::CSRspDressScene::MergeFrom(
        from._internal_dressscene());
  }
  if (from._internal_has_pvplogin()) {
    _this->_internal_mutable_pvplogin()->::msg::CSRspPvpLogin::MergeFrom(
        from._internal_pvplogin());
  }
  if (from._internal_has_pvpend()) {
    _this->_internal_mutable_pvpend()->::msg::CSRspPvpEnd::MergeFrom(
        from._internal_pvpend());
  }
  if (from._internal_has_playerfinish()) {
    _this->_internal_mutable_playerfinish()->::msg::CSRspPlayerFinish::MergeFrom(
        from._internal_playerfinish());
  }
  if (from._internal_has_playerquit()) {
    _this->_internal_mutable_playerquit()->::msg::CSRspPlayerQuit::MergeFrom(
        from._internal_playerquit());
  }
  if (from._internal_has_sellitem()) {
    _this->_internal_mutable_sellitem()->::msg::CSRspSellItem::MergeFrom(
        from._internal_sellitem());
  }
  if (from._internal_has_getevalaward()) {
    _this->_internal_mutable_getevalaward()->::msg::CSRspGetEvalAward::MergeFrom(
        from._internal_getevalaward());
  }
  if (from._internal_has_usechessplayer()) {
    _this->_internal_mutable_usechessplayer()->::msg::CSRspUseChessPlayer::MergeFrom(
        from._internal_usechessplayer());
  }
  if (from._internal_has_guidreport()) {
    _this->_internal_mutable_guidreport()->::msg::CSRspGuidReport::MergeFrom(
        from._internal_guidreport());
  }
  if (from._internal_has_getcodeaward()) {
    _this->_internal_mutable_getcodeaward()->::msg::CSRspGetCodeAward::MergeFrom(
        from._internal_getcodeaward());
  }
  if (from._internal_has_roundreport()) {
    _this->_internal_mutable_roundreport()->::msg::CSRspRoundReport::MergeFrom(
        from._internal_roundreport());
  }
  if (from._internal_has_loadingprogress()) {
    _this->_internal_mutable_loadingprogress()->::msg::CSRspLoadingProgress::MergeFrom(
        from._internal_loadingprogress());
  }
  if (from._internal_has_pvpchat()) {
    _this->_internal_mutable_pvpchat()->::msg::CSRspPvpChat::MergeFrom(
        from._internal_pvpchat());
  }
  if (from._internal_has_chesscombine()) {
    _this->_internal_mutable_chesscombine()->::msg::CSRspChessCombine::MergeFrom(
        from._internal_chesscombine());
  }
  if (from._internal_has_expose()) {
    _this->_internal_mutable_expose()->::msg::CSRspExpose::MergeFrom(
        from._internal_expose());
  }
  if (from._internal_has_applyorderid()) {
    _this->_internal_mutable_applyorderid()->::msg::CSRspApplyOrderId::MergeFrom(
        from._internal_applyorderid());
  }
  if (from._internal_has_reportorderinfo()) {
    _this->_internal_mutable_reportorderinfo()->::msg::CSRspReportOrderInfo::MergeFrom(
        from._internal_reportorderinfo());
  }
  if (from._internal_has_setitem()) {
    _this->_internal_mutable_setitem()->::msg::CSRspSetItem::MergeFrom(
        from._internal_setitem());
  }
  if (from._internal_has_unsetitem()) {
    _this->_internal_mutable_unsetitem()->::msg::CSRspUnsetItem::MergeFrom(
        from._internal_unsetitem());
  }
  if (from._internal_has_randomitem()) {
    _this->_internal_mutable_randomitem()->::msg::CSRspRandomItem::MergeFrom(
        from._internal_randomitem());
  }
  if (from._internal_has_chat()) {
    _this->_internal_mutable_chat()->::msg::CSRspChat::MergeFrom(
        from._internal_chat());
  }
  if (from._internal_has_setchessplayer()) {
    _this->_internal_mutable_setchessplayer()->::msg::CSRspSetChessPlayer::MergeFrom(
        from._internal_setchessplayer());
  }
  if (from._internal_has_unsetchessplayer()) {
    _this->_internal_mutable_unsetchessplayer()->::msg::CSRspUnsetChessPlayer::MergeFrom(
        from._internal_unsetchessplayer());
  }
  if (from._internal_has_getfanslist()) {
    _this->_internal_mutable_getfanslist()->::msg::CSRspGetFansList::MergeFrom(
        from._internal_getfanslist());
  }
  if (from._internal_has_followplayer()) {
    _this->_internal_mutable_followplayer()->::msg::CSRspFollowPlayer::MergeFrom(
        from._internal_followplayer());
  }
  if (from._internal_has_unfollowplayer()) {
    _this->_internal_mutable_unfollowplayer()->::msg::CSRspUnfollowPlayer::MergeFrom(
        from._internal_unfollowplayer());
  }
  if (from._internal_has_playersstatusinfo()) {
    _this->_internal_mutable_playersstatusinfo()->::msg::CSRspPlayersStatusInfo::MergeFrom(
        from._internal_playersstatusinfo());
  }
  if (from._internal_has_invitejointeam()) {
    _this->_internal_mutable_invitejointeam()->::msg::CSRspInviteJoinTeam::MergeFrom(
        from._internal_invitejointeam());
  }
  if (from._internal_has_jointeam()) {
    _this->_internal_mutable_jointeam()->::msg::CSRspJoinTeam::MergeFrom(
        from._internal_jointeam());
  }
  if (from._internal_has_reportpayresponse()) {
    _this->_internal_mutable_reportpayresponse()->::msg::CSRspReportPayResponse::MergeFrom(
        from._internal_reportpayresponse());
  }
  if (from._internal_has_rejectjointeam()) {
    _this->_internal_mutable_rejectjointeam()->::msg::CSRspRejectJoinTeam::MergeFrom(
        from._internal_rejectjointeam());
  }
  if (from._internal_has_shieldchat()) {
    _this->_internal_mutable_shieldchat()->::msg::CSRspShieldChat::MergeFrom(
        from._internal_shieldchat());
  }
  if (from._internal_has_buypassportlevel()) {
    _this->_internal_mutable_buypassportlevel()->::msg::CSRspBuyPassportLevel::MergeFrom(
        from._internal_buypassportlevel());
  }
  if (from._internal_has_upgradepassport()) {
    _this->_internal_mutable_upgradepassport()->::msg::CSRspUpgradePassport::MergeFrom(
        from._internal_upgradepassport());
  }
  if (from._internal_has_getpassportlevelaward()) {
    _this->_internal_mutable_getpassportlevelaward()->::msg::CSRspGetPassportLevelAward::MergeFrom(
        from._internal_getpassportlevelaward());
  }
  if (from._internal_has_getpassporttaskaward()) {
    _this->_internal_mutable_getpassporttaskaward()->::msg::CSRspGetPassportTaskAward::MergeFrom(
        from._internal_getpassporttaskaward());
  }
  if (from._internal_has_telbook()) {
    _this->_internal_mutable_telbook()->::msg::CSRspTelBook::MergeFrom(
        from._internal_telbook());
  }
  if (from._internal_has_activatepassport()) {
    _this->_internal_mutable_activatepassport()->::msg::CSRspActivatePassport::MergeFrom(
        from._internal_activatepassport());
  }
  if (from._internal_has_rankseasoneval()) {
    _this->_internal_mutable_rankseasoneval()->::msg::CSRspRankSeasonEval::MergeFrom(
        from._internal_rankseasoneval());
  }
  if (from._internal_has_bindaccount()) {
    _this->_internal_mutable_bindaccount()->::msg::CSRspBindAccount::MergeFrom(
        from._internal_bindaccount());
  }
  if (from._internal_has_incadsshowcount()) {
    _this->_internal_mutable_incadsshowcount()->::msg::CSRspIncAdShowCount::MergeFrom(
        from._internal_incadsshowcount());
  }
  if (from._internal_has_usebonuscard()) {
    _this->_internal_mutable_usebonuscard()->::msg::CSRspUseBonusCard::MergeFrom(
        from._internal_usebonuscard());
  }
  if (from._internal_has_getseasonaward()) {
    _this->_internal_mutable_getseasonaward()->::msg::CSRspGetSeasonAward::MergeFrom(
        from._internal_getseasonaward());
  }
  if (from._internal_has_getalphaactivityaward()) {
    _this->_internal_mutable_getalphaactivityaward()->::msg::CSRspGetAlphaActivityAward::MergeFrom(
        from._internal_getalphaactivityaward());
  }
  if (from._internal_has_getlanguagedata()) {
    _this->_internal_mutable_getlanguagedata()->::msg::CSRspGetLanguageData::MergeFrom(
        from._internal_getlanguagedata());
  }
  if (from._internal_has_getactivityaward()) {
    _this->_internal_mutable_getactivityaward()->::msg::CSRspGetActivityAward::MergeFrom(
        from._internal_getactivityaward());
  }
  if (from._internal_has_getactivitydata()) {
    _this->_internal_mutable_getactivitydata()->::msg::CSRspGetActivityData::MergeFrom(
        from._internal_getactivitydata());
  }
  if (from._internal_has_sendsms()) {
    _this->_internal_mutable_sendsms()->::msg::CSRspSendSms::MergeFrom(
        from._internal_sendsms());
  }
  if (from._internal_has_getmeleeaward()) {
    _this->_internal_mutable_getmeleeaward()->::msg::CSRspGetMeleeAward::MergeFrom(
        from._internal_getmeleeaward());
  }
  if (from._internal_has_addaitoteam()) {
    _this->_internal_mutable_addaitoteam()->::msg::CSRspAddAiToTeam::MergeFrom(
        from._internal_addaitoteam());
  }
  if (from._internal_has_share()) {
    _this->_internal_mutable_share()->::msg::CSRspShare::MergeFrom(
        from._internal_share());
  }
  if (from._internal_has_skipinterface()) {
    _this->_internal_mutable_skipinterface()->::msg::CSRspSkipInterface::MergeFrom(
        from._internal_skipinterface());
  }
  if (from._internal_has_teamgame()) {
    _this->_internal_mutable_teamgame()->::msg::CSRspTeamGame::MergeFrom(
        from._internal_teamgame());
  }
  if (from._internal_has_setteammode()) {
    _this->_internal_mutable_setteammode()->::msg::CSRspSetTeamMode::MergeFrom(
        from._internal_setteammode());
  }
  if (from._internal_has_historypvpshowpermission()) {
    _this->_internal_mutable_historypvpshowpermission()->::msg::CSRspSetHistoryPvpShowPermission::MergeFrom(
        from._internal_historypvpshowpermission());
  }
  if (from._internal_has_searchteam()) {
    _this->_internal_mutable_searchteam()->::msg::CSRspSearchTeam::MergeFrom(
        from._internal_searchteam());
  }
  if (from._internal_has_applychat()) {
    _this->_internal_mutable_applychat()->::msg::CSRspApplyChat::MergeFrom(
        from._internal_applychat());
  }
  if (from._internal_has_chatlogin()) {
    _this->_internal_mutable_chatlogin()->::msg::CSRspChatLogin::MergeFrom(
        from._internal_chatlogin());
  }
  if (from._internal_has_probenetdelay()) {
    _this->_internal_mutable_probenetdelay()->::msg::CSRspProbeNetDelay::MergeFrom(
        from._internal_probenetdelay());
  }
  if (from._internal_has_geteggs()) {
    _this->_internal_mutable_geteggs()->::msg::CSRspGetEggs::MergeFrom(
        from._internal_geteggs());
  }
  if (from._internal_has_buygoods()) {
    _this->_internal_mutable_buygoods()->::msg::CSRspBuyGoods::MergeFrom(
        from._internal_buygoods());
  }
  if (from._internal_has_exchangepassportgoods()) {
    _this->_internal_mutable_exchangepassportgoods()->::msg::CSRspExchangePassportGoods::MergeFrom(
        from._internal_exchangepassportgoods());
  }
  if (from._internal_has_usepassporttaskcard()) {
    _this->_internal_mutable_usepassporttaskcard()->::msg::CSRspUsePassportTaskCard::MergeFrom(
        from._internal_usepassporttaskcard());
  }
  if (from._internal_has_openrandchest()) {
    _this->_internal_mutable_openrandchest()->::msg::CSRspOpenRandChest::MergeFrom(
        from._internal_openrandchest());
  }
  if (from._internal_has_egglottery()) {
    _this->_internal_mutable_egglottery()->::msg::CSRspEggLottery::MergeFrom(
        from._internal_egglottery());
  }
  if (from._internal_has_querydiamondbalance()) {
    _this->_internal_mutable_querydiamondbalance()->::msg::CSRspQueryDiamondBalance::MergeFrom(
        from._internal_querydiamondbalance());
  }
  if (from._internal_has_useitem()) {
    _this->_internal_mutable_useitem()->::msg::CSRspUseItem::MergeFrom(
        from._internal_useitem());
  }
  if (from._internal_has_useexperiencecard()) {
    _this->_internal_mutable_useexperiencecard()->::msg::CSRspUseExperienceCard::MergeFrom(
        from._internal_useexperiencecard());
  }
  if (from._internal_has_randtargetitem()) {
    _this->_internal_mutable_randtargetitem()->::msg::CSRspRandTargetItem::MergeFrom(
        from._internal_randtargetitem());
  }
  if (from._internal_has_addblacklist()) {
    _this->_internal_mutable_addblacklist()->::msg::CSRspAddBlacklist::MergeFrom(
        from._internal_addblacklist());
  }
  if (from._internal_has_removeblacklist()) {
    _this->_internal_mutable_removeblacklist()->::msg::CSRspRemoveBlacklist::MergeFrom(
        from._internal_removeblacklist());
  }
  if (from._internal_has_reportplayerbirth()) {
    _this->_internal_mutable_reportplayerbirth()->::msg::CSRspReportPlayerBirth::MergeFrom(
        from._internal_reportplayerbirth());
  }
  if (from._internal_has_reportinfoinput()) {
    _this->_internal_mutable_reportinfoinput()->::msg::CSRspReportInfoInput::MergeFrom(
        from._internal_reportinfoinput());
  }
  if (from._internal_has_sendverificationcode()) {
    _this->_internal_mutable_sendverificationcode()->::msg::CSRspSendVerificationCode::MergeFrom(
        from._internal_sendverificationcode());
  }
  if (from._internal_has_bindphonenumber()) {
    _this->_internal_mutable_bindphonenumber()->::msg::CSRspBindPhoneNumber::MergeFrom(
        from._internal_bindphonenumber());
  }
  if (from._internal_has_worldinvite()) {
    _this->_internal_mutable_worldinvite()->::msg::CSRspWorldInvite::MergeFrom(
        from._internal_worldinvite());
  }
  if (from._internal_has_removeexpireitem()) {
    _this->_internal_mutable_removeexpireitem()->::msg::CSRspRemoveExpireItem::MergeFrom(
        from._internal_removeexpireitem());
  }
  if (from._internal_has_getmallgoods()) {
    _this->_internal_mutable_getmallgoods()->::msg::CSRspGetMallGoods::MergeFrom(
        from._internal_getmallgoods());
  }
  if (from._internal_has_buymallgoods()) {
    _this->_internal_mutable_buymallgoods()->::msg::CSRspBuyMallGoods::MergeFrom(
        from._internal_buymallgoods());
  }
  if (from._internal_has_bindsharingcode()) {
    _this->_internal_mutable_bindsharingcode()->::msg::CSRspBindSharingCode::MergeFrom(
        from._internal_bindsharingcode());
  }
  if (from._internal_has_wxblessbag()) {
    _this->_internal_mutable_wxblessbag()->::msg::CSRspWXBlessBag::MergeFrom(
        from._internal_wxblessbag());
  }
  if (from._internal_has_updatefriendsingame()) {
    _this->_internal_mutable_updatefriendsingame()->::msg::CSRspUpdateFriendsInGame::MergeFrom(
        from._internal_updatefriendsingame());
  }
  if (from._internal_has_sharereward()) {
    _this->_internal_mutable_sharereward()->::msg::CSRspShareReward::MergeFrom(
        from._internal_sharereward());
  }
  if (from._internal_has_allfightinfo()) {
    _this->_internal_mutable_allfightinfo()->::msg::CSRspAllFightInfo::MergeFrom(
        from._internal_allfightinfo());
  }
  if (from._internal_has_getoldplayer()) {
    _this->_internal_mutable_getoldplayer()->::msg::CSRspGetOldPlayer::MergeFrom(
        from._internal_getoldplayer());
  }
  if (from._internal_has_bindoldplayer()) {
    _this->_internal_mutable_bindoldplayer()->::msg::CSRspBindOldPlayer::MergeFrom(
        from._internal_bindoldplayer());
  }
  if (from._internal_has_sendverificationcodewithcheckredis()) {
    _this->_internal_mutable_sendverificationcodewithcheckredis()->::msg::CSRspSendVerificationCodeWithCheckRedis::MergeFrom(
        from._internal_sendverificationcodewithcheckredis());
  }
  if (from._internal_has_reportsetting()) {
    _this->_internal_mutable_reportsetting()->::msg::CSRspReportSetting::MergeFrom(
        from._internal_reportsetting());
  }
  if (from._internal_has_antidata()) {
    _this->_internal_mutable_antidata()->::msg::CSRspAntiData::MergeFrom(
        from._internal_antidata());
  }
  if (from._internal_has_tlogdata()) {
    _this->_internal_mutable_tlogdata()->::msg::CSRspTlogData::MergeFrom(
        from._internal_tlogdata());
  }
  if (from._internal_has_daysign()) {
    _this->_internal_mutable_daysign()->::msg::CSRspDaySign::MergeFrom(
        from._internal_daysign());
  }
  if (from._internal_has_dayfitavoid()) {
    _this->_internal_mutable_dayfitavoid()->::msg::CSRspDayFitAvoid::MergeFrom(
        from._internal_dayfitavoid());
  }
  if (from._internal_has_sharecountaward()) {
    _this->_internal_mutable_sharecountaward()->::msg::CSRspShareCountAward::MergeFrom(
        from._internal_sharecountaward());
  }
  if (from._internal_has_realationstar()) {
    _this->_internal_mutable_realationstar()->::msg::CSRspRealationStar::MergeFrom(
        from._internal_realationstar());
  }
  if (from._internal_has_getrealationstarinvitesucc()) {
    _this->_internal_mutable_getrealationstarinvitesucc()->::msg::CSRspGetRealationStarInviteSucc::MergeFrom(
        from._internal_getrealationstarinvitesucc());
  }
  if (from._internal_has_getrealationstar()) {
    _this->_internal_mutable_getrealationstar()->::msg::CSRspGetRealationStar::MergeFrom(
        from._internal_getrealationstar());
  }
  if (from._internal_has_rspactrecord()) {
    _this->_internal_mutable_rspactrecord()->::msg::CSRspGetActRecord::MergeFrom(
        from._internal_rspactrecord());
  }
  if (from._internal_has_joinvoiceteam()) {
    _this->_internal_mutable_joinvoiceteam()->::msg::CSRspJoinVoiceTeam::MergeFrom(
        from._internal_joinvoiceteam());
  }
  if (from._internal_has_joinvoicepvp()) {
    _this->_internal_mutable_joinvoicepvp()->::msg::CSRspJoinVoicePvp::MergeFrom(
        from._internal_joinvoicepvp());
  }
  if (from._internal_has_joinvoicecamp()) {
    _this->_internal_mutable_joinvoicecamp()->::msg::CSRspJoinVoiceCamp::MergeFrom(
        from._internal_joinvoicecamp());
  }
  if (from._internal_has_usercountryset()) {
    _this->_internal_mutable_usercountryset()->::msg::CSRspUserCountrySet::MergeFrom(
        from._internal_usercountryset());
  }
  if (from._internal_has_observe()) {
    _this->_internal_mutable_observe()->::msg::CSRspObserve::MergeFrom(
        from._internal_observe());
  }
  if (from._internal_has_getrecommendpvp()) {
    _this->_internal_mutable_getrecommendpvp()->::msg::CSRspGetRecommendPvp::MergeFrom(
        from._internal_getrecommendpvp());
  }
  if (from._internal_has_observelogin()) {
    _this->_internal_mutable_observelogin()->::msg::CSRspObserveLogin::MergeFrom(
        from._internal_observelogin());
  }
  if (from._internal_has_quitobserve()) {
    _this->_internal_mutable_quitobserve()->::msg::CSRspQuitObserve::MergeFrom(
        from._internal_quitobserve());
  }
  if (from._internal_has_getobserveinfo()) {
    _this->_internal_mutable_getobserveinfo()->::msg::CSRspGetObserveInfo::MergeFrom(
        from._internal_getobserveinfo());
  }
  if (from._internal_has_freeflow()) {
    _this->_internal_mutable_freeflow()->::msg::CSRspFreeFlow::MergeFrom(
        from._internal_freeflow());
  }
  if (from._internal_has_setpushtoken()) {
    _this->_internal_mutable_setpushtoken()->::msg::CSRspSetPushToken::MergeFrom(
        from._internal_setpushtoken());
  }
  if (from._internal_has_tlogevent()) {
    _this->_internal_mutable_tlogevent()->::msg::CSRspTlogEvent::MergeFrom(
        from._internal_tlogevent());
  }
  if (from._internal_has_wxvvipaward()) {
    _this->_internal_mutable_wxvvipaward()->::msg::CSRspWxVVipAward::MergeFrom(
        from._internal_wxvvipaward());
  }
  if (from._internal_has_relationstarwx()) {
    _this->_internal_mutable_relationstarwx()->::msg::CSRspGetRelationStarWX::MergeFrom(
        from._internal_relationstarwx());
  }
  if (from._internal_has_sendwxredpacket()) {
    _this->_internal_mutable_sendwxredpacket()->::msg::CSRspSendWxRedPacket::MergeFrom(
        from._internal_sendwxredpacket());
  }
  if (from._internal_has_recvwxredpacket()) {
    _this->_internal_mutable_recvwxredpacket()->::msg::CSRspRecvWxRedPacket::MergeFrom(
        from._internal_recvwxredpacket());
  }
  if (from._internal_has_wxredpktlike()) {
    _this->_internal_mutable_wxredpktlike()->::msg::CSRspWxRedPktLike::MergeFrom(
        from._internal_wxredpktlike());
  }
  if (from._internal_has_wxredpktrank()) {
    _this->_internal_mutable_wxredpktrank()->::msg::CSRspWxRedPktRank::MergeFrom(
        from._internal_wxredpktrank());
  }
  if (from._internal_has_setobserveprivilege()) {
    _this->_internal_mutable_setobserveprivilege()->::msg::CSRspObservePrivilege::MergeFrom(
        from._internal_setobserveprivilege());
  }
  if (from._internal_has_presetfastchat()) {
    _this->_internal_mutable_presetfastchat()->::msg::CSRspPresetFastChat::MergeFrom(
        from._internal_presetfastchat());
  }
  if (from._internal_has_changeslotteam()) {
    _this->_internal_mutable_changeslotteam()->::msg::CSRspChangeSlotTeam::MergeFrom(
        from._internal_changeslotteam());
  }
  if (from._internal_has_changesubmodeteam()) {
    _this->_internal_mutable_changesubmodeteam()->::msg::CSRspChangeSubModeTeam::MergeFrom(
        from._internal_changesubmodeteam());
  }
  if (from._internal_has_confirmchangeslotteam()) {
    _this->_internal_mutable_confirmchangeslotteam()->::msg::CSRspConfirmChangeSlotTeam::MergeFrom(
        from._internal_confirmchangeslotteam());
  }
  if (from._internal_has_pvproundend()) {
    _this->_internal_mutable_pvproundend()->::msg::CSRspPvpRoundEnd::MergeFrom(
        from._internal_pvproundend());
  }
  if (from._internal_has_pvp()) {
    _this->_internal_mutable_pvp()->::msg::CSRspPvp::MergeFrom(
        from._internal_pvp());
  }
  if (from._internal_has_teamready()) {
    _this->_internal_mutable_teamready()->::msg::CSRspTeamReady::MergeFrom(
        from._internal_teamready());
  }
  if (from._internal_has_bindoldbusinessplayer()) {
    _this->_internal_mutable_bindoldbusinessplayer()->::msg::CSRspBindOldBusinessPlayer::MergeFrom(
        from._internal_bindoldbusinessplayer());
  }
  if (from._internal_has_translate()) {
    _this->_internal_mutable_translate()->::msg::CSRspTranslate::MergeFrom(
        from._internal_translate());
  }
  if (from._internal_has_submitquestionnaire()) {
    _this->_internal_mutable_submitquestionnaire()->::msg::CSRspSubmitQuestionnaire::MergeFrom(
        from._internal_submitquestionnaire());
  }
  if (from._internal_has_cancelchangeslot()) {
    _this->_internal_mutable_cancelchangeslot()->::msg::CSRspCancelChangeSlot::MergeFrom(
        from._internal_cancelchangeslot());
  }
  if (from._internal_has_setchessskin()) {
    _this->_internal_mutable_setchessskin()->::msg::CSRspSetChessSkin::MergeFrom(
        from._internal_setchessskin());
  }
  if (from._internal_has_unsetchessskin()) {
    _this->_internal_mutable_unsetchessskin()->::msg::CSRspUnsetChessSkin::MergeFrom(
        from._internal_unsetchessskin());
  }
  if (from._internal_has_compose()) {
    _this->_internal_mutable_compose()->::msg::CSRspCompose::MergeFrom(
        from._internal_compose());
  }
  if (from._internal_has_video()) {
    _this->_internal_mutable_video()->::msg::CSRspVideo::MergeFrom(
        from._internal_video());
  }
  if (from._internal_has_offhelpreddot()) {
    _this->_internal_mutable_offhelpreddot()->::msg::CSRspOffHelpReddot::MergeFrom(
        from._internal_offhelpreddot());
  }
  if (from._internal_has_changelanguage()) {
    _this->_internal_mutable_changelanguage()->::msg::CSRspChangeLanguage::MergeFrom(
        from._internal_changelanguage());
  }
  if (from._internal_has_setprovince()) {
    _this->_internal_mutable_setprovince()->::msg::CSRspSetProvince::MergeFrom(
        from._internal_setprovince());
  }
  if (from._internal_has_longyuanvoice()) {
    _this->_internal_mutable_longyuanvoice()->::msg::CSRspLongyuanVoice::MergeFrom(
        from._internal_longyuanvoice());
  }
  if (from._internal_has_enrolltournament()) {
    _this->_internal_mutable_enrolltournament()->::msg::CSRspEnrollTournament::MergeFrom(
        from._internal_enrolltournament());
  }
  if (from._internal_has_jointournamentroom()) {
    _this->_internal_mutable_jointournamentroom()->::msg::CSRspJoinTournamentRoom::MergeFrom(
        from._internal_jointournamentroom());
  }
  if (from._internal_has_tournamentpointaward()) {
    _this->_internal_mutable_tournamentpointaward()->::msg::CSRspTournamentPointAward::MergeFrom(
        from._internal_tournamentpointaward());
  }
  if (from._internal_has_getenrollplayers()) {
    _this->_internal_mutable_getenrollplayers()->::msg::CSRspGetEnrollPlayers::MergeFrom(
        from._internal_getenrollplayers());
  }
  if (from._internal_has_dealwebmail()) {
    _this->_internal_mutable_dealwebmail()->::msg::CSRspDealWebMail::MergeFrom(
        from._internal_dealwebmail());
  }
  if (from._internal_has_challengeagain()) {
    _this->_internal_mutable_challengeagain()->::msg::CSRspChallengeAgain::MergeFrom(
        from._internal_challengeagain());
  }
  if (from._internal_has_historychat()) {
    _this->_internal_mutable_historychat()->::msg::CSRspHistoryChatMsg::MergeFrom(
        from._internal_historychat());
  }
  if (from._internal_has_setfriendinvisible()) {
    _this->_internal_mutable_setfriendinvisible()->::msg::CSRspSetFriendInvisible::MergeFrom(
        from._internal_setfriendinvisible());
  }
  if (from._internal_has_getobserveaward()) {
    _this->_internal_mutable_getobserveaward()->::msg::CSRspGetObserveAward::MergeFrom(
        from._internal_getobserveaward());
  }
  if (from._internal_has_inviteobserve()) {
    _this->_internal_mutable_inviteobserve()->::msg::CSRspInviteObserve::MergeFrom(
        from._internal_inviteobserve());
  }
  if (from._internal_has_rejectobserve()) {
    _this->_internal_mutable_rejectobserve()->::msg::CSRspRejectObserve::MergeFrom(
        from._internal_rejectobserve());
  }
  if (from._internal_has_gettxplayer()) {
    _this->_internal_mutable_gettxplayer()->::msg::CSRspGetTxPlayer::MergeFrom(
        from._internal_gettxplayer());
  }
  if (from._internal_has_getthirdpvpinfo()) {
    _this->_internal_mutable_getthirdpvpinfo()->::msg::CSRspGetThirdPvpInfo::MergeFrom(
        from._internal_getthirdpvpinfo());
  }
  if (from._internal_has_markplayerguide()) {
    _this->_internal_mutable_markplayerguide()->::msg::CSRspMarkPlayerGuide::MergeFrom(
        from._internal_markplayerguide());
  }
  if (from._internal_has_chessskinclicked()) {
    _this->_internal_mutable_chessskinclicked()->::msg::CSRspMarkChessSkinClicked::MergeFrom(
        from._internal_chessskinclicked());
  }
  if (from._internal_has_queryps4entitlements()) {
    _this->_internal_mutable_queryps4entitlements()->::msg::CSRsqQueryPs4Entitlements::MergeFrom(
        from._internal_queryps4entitlements());
  }
  if (from._internal_has_actdaysign()) {
    _this->_internal_mutable_actdaysign()->::msg::CSRspActDaySign::MergeFrom(
        from._internal_actdaysign());
  }
  if (from._internal_has_havethirdpvpinfo()) {
    _this->_internal_mutable_havethirdpvpinfo()->::msg::CSRspHaveThirdPvp::MergeFrom(
        from._internal_havethirdpvpinfo());
  }
  if (from._internal_has_activitymall()) {
    _this->_internal_mutable_activitymall()->::msg::CSRspActivityMall::MergeFrom(
        from._internal_activitymall());
  }
  if (from._internal_has_psonly()) {
    _this->_internal_mutable_psonly()->::msg::CSRspPsOnly::MergeFrom(
        from._internal_psonly());
  }
  if (from._internal_has_changechanneltype()) {
    _this->_internal_mutable_changechanneltype()->::msg::CSRspChangeChannelType::MergeFrom(
        from._internal_changechanneltype());
  }
  if (from._internal_has_customcardopt()) {
    _this->_internal_mutable_customcardopt()->::msg::CSRspCustomCardOpt::MergeFrom(
        from._internal_customcardopt());
  }
  if (from._internal_has_championhistory()) {
    _this->_internal_mutable_championhistory()->::msg::CSRspChampionHistory::MergeFrom(
        from._internal_championhistory());
  }
  if (from._internal_has_tournamentlasttoprank()) {
    _this->_internal_mutable_tournamentlasttoprank()->::msg::CSRspTournamentLastTopRank::MergeFrom(
        from._internal_tournamentlasttoprank());
  }
  if (from._internal_has_bigwinnerdailyaward()) {
    _this->_internal_mutable_bigwinnerdailyaward()->::msg::CSRspBigWinnerDailyAward::MergeFrom(
        from._internal_bigwinnerdailyaward());
  }
  if (from._internal_has_bigwinnerscorehistory()) {
    _this->_internal_mutable_bigwinnerscorehistory()->::msg::CSRspBigWinnerScoreHistory::MergeFrom(
        from._internal_bigwinnerscorehistory());
  }
  if (from._internal_has_smeltitem()) {
    _this->_internal_mutable_smeltitem()->::msg::CSRspSmeltItem::MergeFrom(
        from._internal_smeltitem());
  }
  if (from._internal_has_pveuptalentlevel()) {
    _this->_internal_mutable_pveuptalentlevel()->::msg::CSRspPVEUpTalentLevel::MergeFrom(
        from._internal_pveuptalentlevel());
  }
  if (from._internal_has_luckyaward()) {
    _this->_internal_mutable_luckyaward()->::msg::CSRspPVELuckyAward::MergeFrom(
        from._internal_luckyaward());
  }
  if (from._internal_has_applychannel()) {
    _this->_internal_mutable_applychannel()->::msg::CSRspApplyChannel::MergeFrom(
        from._internal_applychannel());
  }
  if (from._internal_has_obteaminfo()) {
    _this->_internal_mutable_obteaminfo()->::msg::CSRspOBTeamInfo::MergeFrom(
        from._internal_obteaminfo());
  }
  if (from._internal_has_getpvpservergroup()) {
    _this->_internal_mutable_getpvpservergroup()->::msg::CSRspGetPvpServerGroup::MergeFrom(
        from._internal_getpvpservergroup());
  }
  if (from._internal_has_reportpvpinfo()) {
    _this->_internal_mutable_reportpvpinfo()->::msg::CSRspReportPvpInfo::MergeFrom(
        from._internal_reportpvpinfo());
  }
  if (from._internal_has_chooseplayer()) {
    _this->_internal_mutable_chooseplayer()->::msg::CSRspChoosePlayer::MergeFrom(
        from._internal_chooseplayer());
  }
  if (from._internal_has_pingtest()) {
    _this->_internal_mutable_pingtest()->::msg::CSRspPingTest::MergeFrom(
        from._internal_pingtest());
  }
  if (from._internal_has_reportregioninfo()) {
    _this->_internal_mutable_reportregioninfo()->::msg::CSRspReportRegionInfo::MergeFrom(
        from._internal_reportregioninfo());
  }
  if (from._internal_has_recalledplaeyr()) {
    _this->_internal_mutable_recalledplaeyr()->::msg::CSRspRecalledPlayer::MergeFrom(
        from._internal_recalledplaeyr());
  }
  if (from._internal_has_weblogin()) {
    _this->_internal_mutable_weblogin()->::msg::CSRspWebLogin::MergeFrom(
        from._internal_weblogin());
  }
  if (from._internal_has_invitecodereset()) {
    _this->_internal_mutable_invitecodereset()->::msg::CSRspInviteCodeReset::MergeFrom(
        from._internal_invitecodereset());
  }
  if (from._internal_has_recallreward()) {
    _this->_internal_mutable_recallreward()->::msg::CSRspRecallReward::MergeFrom(
        from._internal_recallreward());
  }
  if (from._internal_has_switchtocommonmatch()) {
    _this->_internal_mutable_switchtocommonmatch()->::msg::CSRspSwitchToCommonMatch::MergeFrom(
        from._internal_switchtocommonmatch());
  }
  if (from._internal_has_switchmodeinteam()) {
    _this->_internal_mutable_switchmodeinteam()->::msg::CSRspSwitchModeInTeam::MergeFrom(
        from._internal_switchmodeinteam());
  }
  if (from._internal_has_gettnroomstate()) {
    _this->_internal_mutable_gettnroomstate()->::msg::CSRspGetTNRoomState::MergeFrom(
        from._internal_gettnroomstate());
  }
  if (from._internal_has_workshopmatch()) {
    _this->_internal_mutable_workshopmatch()->::msg::CSRspWorkshopMatch::MergeFrom(
        from._internal_workshopmatch());
  }
  if (from._internal_has_buyworkshopticket()) {
    _this->_internal_mutable_buyworkshopticket()->::msg::CSRspBuyWorkshopTicket::MergeFrom(
        from._internal_buyworkshopticket());
  }
  if (from._internal_has_favouriteworkshopmap()) {
    _this->_internal_mutable_favouriteworkshopmap()->::msg::CSRspFavouriteWorkshopMap::MergeFrom(
        from._internal_favouriteworkshopmap());
  }
  if (from._internal_has_shortcutmapsop()) {
    _this->_internal_mutable_shortcutmapsop()->::msg::CSRspShortcutMapsOP::MergeFrom(
        from._internal_shortcutmapsop());
  }
  if (from._internal_has_playerstournamentinfo()) {
    _this->_internal_mutable_playerstournamentinfo()->::msg::CSRspPlayersTournamentInfo::MergeFrom(
        from._internal_playerstournamentinfo());
  }
  if (from._internal_has_scoreworkshopmap()) {
    _this->_internal_mutable_scoreworkshopmap()->::msg::CSRspScoreWorkshopMap::MergeFrom(
        from._internal_scoreworkshopmap());
  }
  if (from._internal_has_mapsvisitedbyfriends()) {
    _this->_internal_mutable_mapsvisitedbyfriends()->::msg::CSRspMapsVisitedByFriends::MergeFrom(
        from._internal_mapsvisitedbyfriends());
  }
  if (from._internal_has_verifyrealname()) {
    _this->_internal_mutable_verifyrealname()->::msg::CSRspVerifyRealName::MergeFrom(
        from._internal_verifyrealname());
  }
  if (from._internal_has_fakepay()) {
    _this->_internal_mutable_fakepay()->::msg::CSRspFakePay::MergeFrom(
        from._internal_fakepay());
  }
  if (from._internal_has_guildcreate()) {
    _this->_internal_mutable_guildcreate()->::msg::CSRspGuildCreate::MergeFrom(
        from._internal_guildcreate());
  }
  if (from._internal_has_guildapply()) {
    _this->_internal_mutable_guildapply()->::msg::CSRspGuildApply::MergeFrom(
        from._internal_guildapply());
  }
  if (from._internal_has_guildhome()) {
    _this->_internal_mutable_guildhome()->::msg::CSRspGuildHome::MergeFrom(
        from._internal_guildhome());
  }
  if (from._internal_has_guildinfo()) {
    _this->_internal_mutable_guildinfo()->::msg::CSRspGuildInfo::MergeFrom(
        from._internal_guildinfo());
  }
  if (from._internal_has_guildapprove()) {
    _this->_internal_mutable_guildapprove()->::msg::CSRspGuildApprove::MergeFrom(
        from._internal_guildapprove());
  }
  if (from._internal_has_guildrole()) {
    _this->_internal_mutable_guildrole()->::msg::CSRspGuildSetRole::MergeFrom(
        from._internal_guildrole());
  }
  if (from._internal_has_guildmodify()) {
    _this->_internal_mutable_guildmodify()->::msg::CSRspGuildModify::MergeFrom(
        from._internal_guildmodify());
  }
  if (from._internal_has_guildkickoff()) {
    _this->_internal_mutable_guildkickoff()->::msg::CSRspGuildKickoff::MergeFrom(
        from._internal_guildkickoff());
  }
  if (from._internal_has_guilddismiss()) {
    _this->_internal_mutable_guilddismiss()->::msg::CSRspGuildDismiss::MergeFrom(
        from._internal_guilddismiss());
  }
  if (from._internal_has_guildexit()) {
    _this->_internal_mutable_guildexit()->::msg::CSRspGuildExit::MergeFrom(
        from._internal_guildexit());
  }
  if (from._internal_has_guildchat()) {
    _this->_internal_mutable_guildchat()->::msg::CSRspGuildChat::MergeFrom(
        from._internal_guildchat());
  }
  if (from._internal_has_guildlist()) {
    _this->_internal_mutable_guildlist()->::msg::CSRspGuildList::MergeFrom(
        from._internal_guildlist());
  }
  if (from._internal_has_guildrecommendplayers()) {
    _this->_internal_mutable_guildrecommendplayers()->::msg::CSRspGuildRecommendPlayers::MergeFrom(
        from._internal_guildrecommendplayers());
  }
  if (from._internal_has_guildinvitelist()) {
    _this->_internal_mutable_guildinvitelist()->::msg::CSRspGuildInviteList::MergeFrom(
        from._internal_guildinvitelist());
  }
  if (from._internal_has_guildinvite()) {
    _this->_internal_mutable_guildinvite()->::msg::CSRspGuildInvite::MergeFrom(
        from._internal_guildinvite());
  }
  if (from._internal_has_guildrejectinvite()) {
    _this->_internal_mutable_guildrejectinvite()->::msg::CSRspGuildRejectInvite::MergeFrom(
        from._internal_guildrejectinvite());
  }
  if (from._internal_has_getvngcommentaward()) {
    _this->_internal_mutable_getvngcommentaward()->::msg::CSRspGetVngCommentAward::MergeFrom(
        from._internal_getvngcommentaward());
  }
  if (from._internal_has_levelupchest()) {
    _this->_internal_mutable_levelupchest()->::msg::CSRspLevelupChest::MergeFrom(
        from._internal_levelupchest());
  }
  if (from._internal_has_watchad()) {
    _this->_internal_mutable_watchad()->::msg::CSRspWatchAd::MergeFrom(
        from._internal_watchad());
  }
  if (from._internal_has_pstournamentroom()) {
    _this->_internal_mutable_pstournamentroom()->::msg::CSRspQueryPsTournamentRoom::MergeFrom(
        from._internal_pstournamentroom());
  }
  if (from._internal_has_getadcumulateaward()) {
    _this->_internal_mutable_getadcumulateaward()->::msg::CSRspGetAdCumulateAward::MergeFrom(
        from._internal_getadcumulateaward());
  }
  if (from._internal_has_setmessengerpos()) {
    _this->_internal_mutable_setmessengerpos()->::msg::CSRspSetMessengerPos::MergeFrom(
        from._internal_setmessengerpos());
  }
  if (from._internal_has_antiaddictiontime()) {
    _this->_internal_mutable_antiaddictiontime()->::msg::CSRspUpdateAntiAddictionTime::MergeFrom(
        from._internal_antiaddictiontime());
  }
  if (from._internal_has_cancelreconnect()) {
    _this->_internal_mutable_cancelreconnect()->::msg::CSRspCancelReconnect::MergeFrom(
        from._internal_cancelreconnect());
  }
  if (from._internal_has_reconnect()) {
    _this->_internal_mutable_reconnect()->::msg::CSRspReconnect::MergeFrom(
        from._internal_reconnect());
  }
  if (from._internal_has_passthrough()) {
    _this->_internal_mutable_passthrough()->::msg::CSRspPassThrough::MergeFrom(
        from._internal_passthrough());
  }
  if (from._internal_has_visitplayer()) {
    _this->_internal_mutable_visitplayer()->::msg::CSRspVisitPlayer::MergeFrom(
        from._internal_visitplayer());
  }
  if (from._internal_has_leavegameearly()) {
    _this->_internal_mutable_leavegameearly()->::msg::CSRspLeaveGameEarly::MergeFrom(
        from._internal_leavegameearly());
  }
  if (from._internal_has_gdcommonbin()) {
    _this->_internal_mutable_gdcommonbin()->::msg::CSRspGDCommonBin::MergeFrom(
        from._internal_gdcommonbin());
  }
  if (from._internal_has_gdbindata()) {
    _this->_internal_mutable_gdbindata()->::msg::CSRspGDCommonBinData::MergeFrom(
        from._internal_gdbindata());
  }
  if (from._internal_has_battlecampresult()) {
    _this->_internal_mutable_battlecampresult()->::msg::CSRspBattleCampResult::MergeFrom(
        from._internal_battlecampresult());
  }
  if (from._internal_has_autobattleop()) {
    _this->_internal_mutable_autobattleop()->::msg::CSRspAutoBattleOP::MergeFrom(
        from._internal_autobattleop());
  }
  if (from._internal_has_restrictuser()) {
    _this->_internal_mutable_restrictuser()->::msg::CSRspRestrictUser::MergeFrom(
        from._internal_restrictuser());
  }
  if (from._internal_has_equipselectrate()) {
    _this->_internal_mutable_equipselectrate()->::msg::CSRspEquipSelectRate::MergeFrom(
        from._internal_equipselectrate());
  }
  if (from._internal_has_reportabsent()) {
    _this->_internal_mutable_reportabsent()->::msg::CSRspReportAbsent::MergeFrom(
        from._internal_reportabsent());
  }
  if (from._internal_has_recommendweek()) {
    _this->_internal_mutable_recommendweek()->::msg::CSRspRecommendWeek::MergeFrom(
        from._internal_recommendweek());
  }
  if (from._internal_has_recommendofficial()) {
    _this->_internal_mutable_recommendofficial()->::msg::CSRspRecommendOfficial::MergeFrom(
        from._internal_recommendofficial());
  }
  if (from._internal_has_recommendlatest()) {
    _this->_internal_mutable_recommendlatest()->::msg::CSRspRecommendLatest::MergeFrom(
        from._internal_recommendlatest());
  }
  if (from._internal_has_recommendhistory()) {
    _this->_internal_mutable_recommendhistory()->::msg::CSRspRecommendHistory::MergeFrom(
        from._internal_recommendhistory());
  }
  if (from._internal_has_recommendcollect()) {
    _this->_internal_mutable_recommendcollect()->::msg::CSRspRecommendCollect::MergeFrom(
        from._internal_recommendcollect());
  }
  if (from._internal_has_recommendset()) {
    _this->_internal_mutable_recommendset()->::msg::CSRspRecommendSet::MergeFrom(
        from._internal_recommendset());
  }
  if (from._internal_has_recommendgetcollection()) {
    _this->_internal_mutable_recommendgetcollection()->::msg::CSRspRecommendGetCollection::MergeFrom(
        from._internal_recommendgetcollection());
  }
  if (from._internal_has_recommendequip()) {
    _this->_internal_mutable_recommendequip()->::msg::CSRspRecommendEquip::MergeFrom(
        from._internal_recommendequip());
  }
  if (from._internal_has_logincancel()) {
    _this->_internal_mutable_logincancel()->::msg::CSRspLoginCancel::MergeFrom(
        from._internal_logincancel());
  }
  if (from._internal_has_convertdebris()) {
    _this->_internal_mutable_convertdebris()->::msg::CSRspConvertDebris::MergeFrom(
        from._internal_convertdebris());
  }
  if (from._internal_has_protectioncard()) {
    _this->_internal_mutable_protectioncard()->::msg::CSRspUseProtectionCard::MergeFrom(
        from._internal_protectioncard());
  }
  if (from._internal_has_usepassportcard()) {
    _this->_internal_mutable_usepassportcard()->::msg::CSRspUsePassportCard::MergeFrom(
        from._internal_usepassportcard());
  }
  if (from._internal_has_setmedal()) {
    _this->_internal_mutable_setmedal()->::msg::CSRspSetMedal::MergeFrom(
        from._internal_setmedal());
  }
  if (from._internal_has_unsetmedal()) {
    _this->_internal_mutable_unsetmedal()->::msg::CSRspUnSetMedal::MergeFrom(
        from._internal_unsetmedal());
  }
  if (from._internal_has_playermedals()) {
    _this->_internal_mutable_playermedals()->::msg::CSRspPlayerMedals::MergeFrom(
        from._internal_playermedals());
  }
  if (from._internal_has_updatehotdot()) {
    _this->_internal_mutable_updatehotdot()->::msg::CSRspUpdateHotDot::MergeFrom(
        from._internal_updatehotdot());
  }
  if (from._internal_has_queryhotdot()) {
    _this->_internal_mutable_queryhotdot()->::msg::CSRspQueryHotDot::MergeFrom(
        from._internal_queryhotdot());
  }
  if (from._internal_has_setcache()) {
    _this->_internal_mutable_setcache()->::msg::CSRspSetCache::MergeFrom(
        from._internal_setcache());
  }
  if (from._internal_has_getcache()) {
    _this->_internal_mutable_getcache()->::msg::CSRspGetCache::MergeFrom(
        from._internal_getcache());
  }
  if (from._internal_has_buychallengecount()) {
    _this->_internal_mutable_buychallengecount()->::msg::CSRspBuyChallengeCount::MergeFrom(
        from._internal_buychallengecount());
  }
  if (from._internal_has_getpverank()) {
    _this->_internal_mutable_getpverank()->::msg::CSRspGetPveRank::MergeFrom(
        from._internal_getpverank());
  }
  if (from._internal_has_authaccount()) {
    _this->_internal_mutable_authaccount()->::msg::CSRspAuthAccount::MergeFrom(
        from._internal_authaccount());
  }
  if (from._internal_has_unbindaccount()) {
    _this->_internal_mutable_unbindaccount()->::msg::CSRspUnbindAccount::MergeFrom(
        from._internal_unbindaccount());
  }
  if (from._internal_has_bagtoitem()) {
    _this->_internal_mutable_bagtoitem()->::msg::CSRspBagToItem::MergeFrom(
        from._internal_bagtoitem());
  }
  if (from._internal_has_identifyitem()) {
    _this->_internal_mutable_identifyitem()->::msg::CSRspIdentifyItem::MergeFrom(
        from._internal_identifyitem());
  }
  if (from._internal_has_insetitemaffix()) {
    _this->_internal_mutable_insetitemaffix()->::msg::CSRspInsetItemAffix::MergeFrom(
        from._internal_insetitemaffix());
  }
  if (from._internal_has_unsetitemaffix()) {
    _this->_internal_mutable_unsetitemaffix()->::msg::CSRspUnsetItemAffix::MergeFrom(
        from._internal_unsetitemaffix());
  }
  if (from._internal_has_setdefaultattributes()) {
    _this->_internal_mutable_setdefaultattributes()->::msg::CSRspSetDefaultAttributes::MergeFrom(
        from._internal_setdefaultattributes());
  }
  if (from._internal_has_checkcancel()) {
    _this->_internal_mutable_checkcancel()->::msg::CSRspCheckCancel::MergeFrom(
        from._internal_checkcancel());
  }
  if (from._internal_has_cancelaccount()) {
    _this->_internal_mutable_cancelaccount()->::msg::CSRspCancelAccount::MergeFrom(
        from._internal_cancelaccount());
  }
  if (from._internal_has_oauthapp()) {
    _this->_internal_mutable_oauthapp()->::msg::CSRspOAuthApp::MergeFrom(
        from._internal_oauthapp());
  }
  if (from._internal_has_selfnumrankdata()) {
    _this->_internal_mutable_selfnumrankdata()->::msg::CSRspGetSelfNumRankData::MergeFrom(
        from._internal_selfnumrankdata());
  }
  if (from._internal_has_updatecardgroup()) {
    _this->_internal_mutable_updatecardgroup()->::msg::CSRspUpdateCardGroup::MergeFrom(
        from._internal_updatecardgroup());
  }
  if (from._internal_has_updatecardgroupname()) {
    _this->_internal_mutable_updatecardgroupname()->::msg::CSRspUpdateCardGroupName::MergeFrom(
        from._internal_updatecardgroupname());
  }
  if (from._internal_has_buypvebuff()) {
    _this->_internal_mutable_buypvebuff()->::msg::CSRspBuyPveBuff::MergeFrom(
        from._internal_buypvebuff());
  }
  if (from._internal_has_setcardgroup()) {
    _this->_internal_mutable_setcardgroup()->::msg::CSRspSetCardGroup::MergeFrom(
        from._internal_setcardgroup());
  }
  if (from._internal_has_buypvechesstemplate()) {
    _this->_internal_mutable_buypvechesstemplate()->::msg::CSRspBuyPveChessTemplate::MergeFrom(
        from._internal_buypvechesstemplate());
  }
  if (from._internal_has_pveunlockchesstemplate()) {
    _this->_internal_mutable_pveunlockchesstemplate()->::msg::CSRspPveUnlockChessTemplate::MergeFrom(
        from._internal_pveunlockchesstemplate());
  }
  if (from._internal_has_pvesetteamdebuff()) {
    _this->_internal_mutable_pvesetteamdebuff()->::msg::CSRspPveSetTeamDeBuff::MergeFrom(
        from._internal_pvesetteamdebuff());
  }
  if (from._internal_has_chosecardgroup()) {
    _this->_internal_mutable_chosecardgroup()->::msg::CSRspChoseCardGroup::MergeFrom(
        from._internal_chosecardgroup());
  }
  if (from._internal_has_removeovertimebuff()) {
    _this->_internal_mutable_removeovertimebuff()->::msg::CSRspRemoveOvertimeBuff::MergeFrom(
        from._internal_removeovertimebuff());
  }
  if (from._internal_has_updatenewcardgroupsign()) {
    _this->_internal_mutable_updatenewcardgroupsign()->::msg::CSRspUpdateNewCardGroupSign::MergeFrom(
        from._internal_updatenewcardgroupsign());
  }
  if (from._internal_has_tdgetonhookaward()) {
    _this->_internal_mutable_tdgetonhookaward()->::msg::CSRspTDGetOnHookAward::MergeFrom(
        from._internal_tdgetonhookaward());
  }
  if (from._internal_has_tddraw()) {
    _this->_internal_mutable_tddraw()->::msg::CsRspTDDraw::MergeFrom(
        from._internal_tddraw());
  }
  if (from._internal_has_tdbuycard()) {
    _this->_internal_mutable_tdbuycard()->::msg::CsRspTDBuyCard::MergeFrom(
        from._internal_tdbuycard());
  }
  if (from._internal_has_tdsetcardgroup()) {
    _this->_internal_mutable_tdsetcardgroup()->::msg::CSRspTDSetCardGroup::MergeFrom(
        from._internal_tdsetcardgroup());
  }
  if (from._internal_has_tdlevelup()) {
    _this->_internal_mutable_tdlevelup()->::msg::CSRspTDLevelUp::MergeFrom(
        from._internal_tdlevelup());
  }
  if (from._internal_has_tdequip()) {
    _this->_internal_mutable_tdequip()->::msg::CSRspTDEquip::MergeFrom(
        from._internal_tdequip());
  }
  if (from._internal_has_mentorupdatesetting()) {
    _this->_internal_mutable_mentorupdatesetting()->::msg::CSRspMentorUpdateSetting::MergeFrom(
        from._internal_mentorupdatesetting());
  }
  if (from._internal_has_mentorinvite()) {
    _this->_internal_mutable_mentorinvite()->::msg::CSRspMentorInvite::MergeFrom(
        from._internal_mentorinvite());
  }
  if (from._internal_has_mentorconfirminvite()) {
    _this->_internal_mutable_mentorconfirminvite()->::msg::CSRspMentorConfirmInvite::MergeFrom(
        from._internal_mentorconfirminvite());
  }
  if (from._internal_has_mentorrecommendlist()) {
    _this->_internal_mutable_mentorrecommendlist()->::msg::CSRspMentorRecommendList::MergeFrom(
        from._internal_mentorrecommendlist());
  }
  if (from._internal_has_mentorgettaskaward()) {
    _this->_internal_mutable_mentorgettaskaward()->::msg::CSRspMentorGetTaskAward::MergeFrom(
        from._internal_mentorgettaskaward());
  }
  if (from._internal_has_mentorgraduate()) {
    _this->_internal_mutable_mentorgraduate()->::msg::CSRspMentorGraduate::MergeFrom(
        from._internal_mentorgraduate());
  }
  if (from._internal_has_mentorrelieverelation()) {
    _this->_internal_mutable_mentorrelieverelation()->::msg::CSRspMentorRelieveRelation::MergeFrom(
        from._internal_mentorrelieverelation());
  }
  if (from._internal_has_getmentorinfo()) {
    _this->_internal_mutable_getmentorinfo()->::msg::CSRspGetMentorInfo::MergeFrom(
        from._internal_getmentorinfo());
  }
  if (from._internal_has_mentorgetinvitemsg()) {
    _this->_internal_mutable_mentorgetinvitemsg()->::msg::CSRspMentorGetInviteMsg::MergeFrom(
        from._internal_mentorgetinvitemsg());
  }
  if (from._internal_has_teammsg()) {
    _this->_internal_mutable_teammsg()->::msg::CSRspTeamMsg::MergeFrom(
        from._internal_teammsg());
  }
  if (from._internal_has_chatmsg()) {
    _this->_internal_mutable_chatmsg()->::msg::CSRspChatMsg::MergeFrom(
        from._internal_chatmsg());
  }
  if (from._internal_has_channelchat()) {
    _this->_internal_mutable_channelchat()->::msg::CSRspChannelChat::MergeFrom(
        from._internal_channelchat());
  }
  if (from._internal_has_updatecardgroupbetter()) {
    _this->_internal_mutable_updatecardgroupbetter()->::msg::CSRspUpdateCardGroupBetter::MergeFrom(
        from._internal_updatecardgroupbetter());
  }
  if (from._internal_has_updatecardgroupsetting()) {
    _this->_internal_mutable_updatecardgroupsetting()->::msg::CSRspUpdateCardGroupSetting::MergeFrom(
        from._internal_updatecardgroupsetting());
  }
  if (from._internal_has_setauctionname()) {
    _this->_internal_mutable_setauctionname()->::msg::CSRspSetAuctionName::MergeFrom(
        from._internal_setauctionname());
  }
  if (from._internal_has_setauctionremark()) {
    _this->_internal_mutable_setauctionremark()->::msg::CSRspSetAuctionRemark::MergeFrom(
        from._internal_setauctionremark());
  }
  if (from._internal_has_getbalance()) {
    _this->_internal_mutable_getbalance()->::msg::CSRspGetBalance::MergeFrom(
        from._internal_getbalance());
  }
  if (from._internal_has_rechargebalance()) {
    _this->_internal_mutable_rechargebalance()->::msg::CSRspRechargeBalance::MergeFrom(
        from._internal_rechargebalance());
  }
  if (from._internal_has_withdrawbalance()) {
    _this->_internal_mutable_withdrawbalance()->::msg::CSRspWithdrawBalance::MergeFrom(
        from._internal_withdrawbalance());
  }
  if (from._internal_has_personalrecommendmall()) {
    _this->_internal_mutable_personalrecommendmall()->::msg::CSRspPersonalRecommendMall::MergeFrom(
        from._internal_personalrecommendmall());
  }
  if (from._internal_has_getmedalchestaward()) {
    _this->_internal_mutable_getmedalchestaward()->::msg::CSRspGetMedalChestAward::MergeFrom(
        from._internal_getmedalchestaward());
  }
  if (from._internal_has_setitemautouse()) {
    _this->_internal_mutable_setitemautouse()->::msg::CSRspSetItemAutoUse::MergeFrom(
        from._internal_setitemautouse());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  if (from._internal_errcode() != 0) {
    _this->_internal_set_errcode(from._internal_errcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspBody::CopyFrom(const CSRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspBody::IsInitialized() const {
  return true;
}

void CSRspBody::InternalSwap(CSRspBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspBody, _impl_.errcode_)
      + sizeof(CSRspBody::_impl_.errcode_)
      - PROTOBUF_FIELD_OFFSET(CSRspBody, _impl_.heart_)>(
          reinterpret_cast<char*>(&_impl_.heart_),
          reinterpret_cast<char*>(&other->_impl_.heart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csprotocol_2eproto_getter, &descriptor_table_csprotocol_2eproto_once,
      file_level_metadata_csprotocol_2eproto[2]);
}

// ===================================================================

class CSNtfBody::_Internal {
 public:
  static const ::msg::CSNtfKickOff& kickoff(const CSNtfBody* msg);
  static const ::msg::CSNtfWait& ntfwait(const CSNtfBody* msg);
  static const ::msg::CSNtfPassDayBody& passday(const CSNtfBody* msg);
  static const ::msg::CSNtfPassWeekBody& passweek(const CSNtfBody* msg);
  static const ::msg::CSNtfPassMonthBody& passmonth(const CSNtfBody* msg);
  static const ::msg::CSNtfWorldChat& worldchat(const CSNtfBody* msg);
  static const ::msg::CSNtfHeadPic& headpic(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpMatch& pvpmatch(const CSNtfBody* msg);
  static const ::msg::CSNtfPvp& pvp(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpMatchCancel& pvpmatchcancel(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpStatus& pvpstatus(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpPlayerReady& ntfpvpplayerready(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpBegin& pvpbegin(const CSNtfBody* msg);
  static const ::msg::CSNtfPlayerFinish& playerfinish(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpEnd& pvpend(const CSNtfBody* msg);
  static const ::msg::CSNtfMarquee& marquee(const CSNtfBody* msg);
  static const ::msg::CSNtfRemoveMarquee& removemarquee(const CSNtfBody* msg);
  static const ::msg::CSNtfLoadingProgress& loadingprogress(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpChat& pvpchat(const CSNtfBody* msg);
  static const ::msg::CSNtfReload& reload(const CSNtfBody* msg);
  static const ::msg::CSNtfPay& pay(const CSNtfBody* msg);
  static const ::msg::CSNtfChat& chat(const CSNtfBody* msg);
  static const ::msg::CSNtfFollowList& followlist(const CSNtfBody* msg);
  static const ::msg::CSNtfNewFollower& newfollower(const CSNtfBody* msg);
  static const ::msg::CSNtfLostFollower& lostfollower(const CSNtfBody* msg);
  static const ::msg::CSNtfInviteJoinTeam& invitejointeam(const CSNtfBody* msg);
  static const ::msg::CSNtfPlayerJoinTeam& playerjointeam(const CSNtfBody* msg);
  static const ::msg::CSNtfPlayerLeaveTeam& playerleaveteam(const CSNtfBody* msg);
  static const ::msg::CSNtfKickOffTeamPlayer& kickoffteamplayer(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamMsg& teammsg(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamReady& teamready(const CSNtfBody* msg);
  static const ::msg::CSNtfRejectJoinTeam& rejectjointeam(const CSNtfBody* msg);
  static const ::msg::CSNtfNotice& notice(const CSNtfBody* msg);
  static const ::msg::CSNtfRemoveNotice& removenotice(const CSNtfBody* msg);
  static const ::msg::CSNtfUpgradeBattleStage& upgradebattlestage(const CSNtfBody* msg);
  static const ::msg::CSNtfPassportTaskProgress& passporttaskprogress(const CSNtfBody* msg);
  static const ::msg::CSNtfRankSeasonEval& rankseasoneval(const CSNtfBody* msg);
  static const ::msg::CSNtfBindAccounts& bindaccounts(const CSNtfBody* msg);
  static const ::msg::CSNtfSeasonTaskProgress& seasontaskprogress(const CSNtfBody* msg);
  static const ::msg::CSNtfAlphaActivity& alphaactivity(const CSNtfBody* msg);
  static const ::msg::CSNtfOffSeasonToNewSeason& offseasontonewseason(const CSNtfBody* msg);
  static const ::msg::CSNtfLanguageMd5List& languagemd5list(const CSNtfBody* msg);
  static const ::msg::CSNtfActivityProgress& activityprogress(const CSNtfBody* msg);
  static const ::msg::CSNtfRemoveActivity& removeactivity(const CSNtfBody* msg);
  static const ::msg::CSNtfActivityConfig& activityconfig(const CSNtfBody* msg);
  static const ::msg::CSNtfMeleeTaskProgress& meleetaskprogress(const CSNtfBody* msg);
  static const ::msg::CSNtfSetTeamMode& setteammode(const CSNtfBody* msg);
  static const ::msg::CSNtfPassportOpen& passportopen(const CSNtfBody* msg);
  static const ::msg::CSNtfPassportClose& passportclose(const CSNtfBody* msg);
  static const ::msg::CSNtfWeekIndex& weekindex(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpHistory& pvphistory(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamPvpEnd& teampvpend(const CSNtfBody* msg);
  static const ::msg::CSNtfProbeNetDelay& probenetdelay(const CSNtfBody* msg);
  static const ::msg::CSNtfRefreshGoods& refreshgoods(const CSNtfBody* msg);
  static const ::msg::CSNtfRemoveEggs& removeeggs(const CSNtfBody* msg);
  static const ::msg::CSNtfSwitchSet& switchset(const CSNtfBody* msg);
  static const ::msg::CSNtfBlacklist& blacklist(const CSNtfBody* msg);
  static const ::msg::CSNtfBindPhoneNumberSwitch& bindphonenumberswitch(const CSNtfBody* msg);
  static const ::msg::CSNtfWorldInvite& worldinvite(const CSNtfBody* msg);
  static const ::msg::CSNtfMallNotice& mallnotice(const CSNtfBody* msg);
  static const ::msg::CSNtfPrivilege& privilege(const CSNtfBody* msg);
  static const ::msg::CSNtfAARemind& aaremind(const CSNtfBody* msg);
  static const ::msg::CSNtfAABan& aaban(const CSNtfBody* msg);
  static const ::msg::CSNtfAAVerify& aaverify(const CSNtfBody* msg);
  static const ::msg::CSNtfPhoneNumber& phonenumber(const CSNtfBody* msg);
  static const ::msg::CSNtfAntiCallBack& anticallback(const CSNtfBody* msg);
  static const ::msg::CSNtfFortuneBagTime& fortunebagtime(const CSNtfBody* msg);
  static const ::msg::CSNtfUpdateItem& updateitem(const CSNtfBody* msg);
  static const ::msg::CSNtfCreditScore& creditscore(const CSNtfBody* msg);
  static const ::msg::CSNtfBuffAct& buffact(const CSNtfBody* msg);
  static const ::msg::CSNtfActivityGroup& activitygroup(const CSNtfBody* msg);
  static const ::msg::CSNtfClearChat& clearchat(const CSNtfBody* msg);
  static const ::msg::CSNtfForbidInfo& forbidinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfMidasDiamond& midasdiamond(const CSNtfBody* msg);
  static const ::msg::CSNtfJoinVoiceTeam& joinvoiceteam(const CSNtfBody* msg);
  static const ::msg::CSNtfJoinVoicePvp& joinvoicepvp(const CSNtfBody* msg);
  static const ::msg::CSNtfJoinVoiceCamp& joinvoicecamp(const CSNtfBody* msg);
  static const ::msg::CSNtfWxVVip& wxvvip(const CSNtfBody* msg);
  static const ::msg::CSNtfFreeFlow& freeflow(const CSNtfBody* msg);
  static const ::msg::CSNtfObserveStatus& observestatus(const CSNtfBody* msg);
  static const ::msg::CSNtfGameMarquee& gamemarquee(const CSNtfBody* msg);
  static const ::msg::CSNtfWxRedPacket& wxredpacket(const CSNtfBody* msg);
  static const ::msg::CSNtfGmSysMsg& gmsysmsg(const CSNtfBody* msg);
  static const ::msg::CSNtfNewPunishment& newpunishment(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamSlot& teamslot(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamSubMode& teamsubmode(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamSlotStatus& teamslotstatus(const CSNtfBody* msg);
  static const ::msg::CSNtfPunishmentInfo& punishmentinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfRemovePunishment& removepunishment(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpConfirm& pvpconfirm(const CSNtfBody* msg);
  static const ::msg::CSNtfMatchSuccess& matchsuccess(const CSNtfBody* msg);
  static const ::msg::CSNtfOldBusinessPlayer& oldbusinessplayer(const CSNtfBody* msg);
  static const ::msg::CSNtfChangeTeamSlot& changeteamslot(const CSNtfBody* msg);
  static const ::msg::CSNtfRefuseChangeTeamSlot& refusechangeteamslot(const CSNtfBody* msg);
  static const ::msg::CSNtfCancelChangeSlot& cancelchangeslot(const CSNtfBody* msg);
  static const ::msg::CSNtfShowChessSkin& showchessskin(const CSNtfBody* msg);
  static const ::msg::CSNtfOnHelpReddot& onhelpreddot(const CSNtfBody* msg);
  static const ::msg::CSNtfBagUpdate& bagupdate(const CSNtfBody* msg);
  static const ::msg::CSNtfRefreshMelee& refreshmelee(const CSNtfBody* msg);
  static const ::msg::CSNtfWebLogin& weblogin(const CSNtfBody* msg);
  static const ::msg::CSNtfCurrentTournament& currenttournament(const CSNtfBody* msg);
  static const ::msg::CSNtfTournamentBegin& tournamentbegin(const CSNtfBody* msg);
  static const ::msg::CSNtfTournamentEnrollBegin& tournamentenrollbegin(const CSNtfBody* msg);
  static const ::msg::CSNtfTournamentEnrollEnd& tournamentenrollend(const CSNtfBody* msg);
  static const ::msg::CSNtfJoinTournamentRoom& jointournamentroom(const CSNtfBody* msg);
  static const ::msg::CSNtfTournamentEnd& tournamentend(const CSNtfBody* msg);
  static const ::msg::CSNtfTournamentOut& tournamentout(const CSNtfBody* msg);
  static const ::msg::CSNtfTournamentRoundEnd& tournamentroundend(const CSNtfBody* msg);
  static const ::msg::CSNtfLuckStarAward& luckstaraward(const CSNtfBody* msg);
  static const ::msg::CSNtfInviteObserve& inviteobserve(const CSNtfBody* msg);
  static const ::msg::CSNtfRejectObserve& rejectobserve(const CSNtfBody* msg);
  static const ::msg::CSNtfChestCount& chestcount(const CSNtfBody* msg);
  static const ::msg::CSNtfRecruitInfo& recruitinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfRecruitPlayer& recruitplayer(const CSNtfBody* msg);
  static const ::msg::CSNtfRecruitPlayerBattle& recruitplayerbattle(const CSNtfBody* msg);
  static const ::msg::CSNtfBetOnBounty& betonbounty(const CSNtfBody* msg);
  static const ::msg::CSNtfActivityTaskUnlock& activitytaskunlock(const CSNtfBody* msg);
  static const ::msg::CSNtfPsServerOnly& psserveronly(const CSNtfBody* msg);
  static const ::msg::CSNtfAddThirdPvpInfo& addthirdpvpinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfDelThirdPvpInfo& delthirdpvpinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfPs4ServerOnly& ps4serveronly(const CSNtfBody* msg);
  static const ::msg::CSNtfLuckMallGoods& luckmallgoods(const CSNtfBody* msg);
  static const ::msg::CSNtfChessListErr& chesslisterr(const CSNtfBody* msg);
  static const ::msg::CSNtfChestRecord& chestrecord(const CSNtfBody* msg);
  static const ::msg::CSNtfGOAInfo& goainfo(const CSNtfBody* msg);
  static const ::msg::CSNtfMedalInfos& medalinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfMedalId& medalid(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpReset& pvpreset(const CSNtfBody* msg);
  static const ::msg::CSNtfDelMail& delmail(const CSNtfBody* msg);
  static const ::msg::CSNtfItemInfo& iteminfo(const CSNtfBody* msg);
  static const ::msg::CSNtfPassportNum& passportnum(const CSNtfBody* msg);
  static const ::msg::CSNtfPassportYearCardNum& passportyearcardnum(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamOP& teamop(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamDismiss& teamdismiss(const CSNtfBody* msg);
  static const ::msg::CSNtfSwitchModeInTeam& switchmodeinteam(const CSNtfBody* msg);
  static const ::msg::CSNtfAddBanner& addbanner(const CSNtfBody* msg);
  static const ::msg::CSNtfRemoveBanner& removebanner(const CSNtfBody* msg);
  static const ::msg::CSNtfSingleRoundFlow& singleroundflow(const CSNtfBody* msg);
  static const ::msg::CSNtfTeamStatus& teamstatus(const CSNtfBody* msg);
  static const ::msg::CSNtfTNGameEnd& tngameend(const CSNtfBody* msg);
  static const ::msg::CSNtfPlayerLackResourceInTeam& playerlackresource(const CSNtfBody* msg);
  static const ::msg::CSNtfFavMapRemoved& favmapremoved(const CSNtfBody* msg);
  static const ::msg::CSNtfWorkshopMatchResult& workshopmatchresult(const CSNtfBody* msg);
  static const ::msg::CSNtfBigWinnerExpandMatch& bigwinnerexpandmatch(const CSNtfBody* msg);
  static const ::msg::CSNtfVerifyRealName& verifyrealname(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildJoin& guildjoin(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildMemberChange& memberchange(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildKickoff& guildkickoff(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildRoleChange& guildrolechange(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildAttrChange& guildattrchange(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildChat& guildchat(const CSNtfBody* msg);
  static const ::msg::CSNtfNewGuildLog& newguildlog(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildApplicantChange& applicantchange(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildInviteeChange& inviteechange(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildNewInvite& guildnewinvite(const CSNtfBody* msg);
  static const ::msg::CSNtfGuildInfo& guildinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfVngCommentAwardReset& vngawardreset(const CSNtfBody* msg);
  static const ::msg::CSNtfAdAward& adaward(const CSNtfBody* msg);
  static const ::msg::CSNtfAdCount& adcount(const CSNtfBody* msg);
  static const ::msg::CSNtfUIForbid& uiforbid(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpUpdateMessengerPos& pvpupdatemessengerpos(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpPlayerLoggedIn& pvpplayerloggedin(const CSNtfBody* msg);
  static const ::msg::CSNtfPassThrough& passthrough(const CSNtfBody* msg);
  static const ::msg::CSNtfAA& aa(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpReconnect& pvpreconnect(const CSNtfBody* msg);
  static const ::msg::CSNtfUpdateBattleResult& updatebattleresult(const CSNtfBody* msg);
  static const ::msg::CSNtfVisitPlayer& visitplayer(const CSNtfBody* msg);
  static const ::msg::CSNtfKrIdentityAuth& kridentityauth(const CSNtfBody* msg);
  static const ::msg::CSNtfKrAddictionTip& kraddictiontip(const CSNtfBody* msg);
  static const ::msg::CSNtfLeaveGameEarly& leavegameearly(const CSNtfBody* msg);
  static const ::msg::CSNtfKrAddictionCountdown& kraddictioncountdown(const CSNtfBody* msg);
  static const ::msg::CSNtfHistoryChatMsg& histroychatmsg(const CSNtfBody* msg);
  static const ::msg::CSNtfSystemGmTime& gmtime(const CSNtfBody* msg);
  static const ::msg::CSNtfChangeName& changename(const CSNtfBody* msg);
  static const ::msg::CSNtfFirstPay& firstpay(const CSNtfBody* msg);
  static const ::msg::CSNtfPlayerExpChanged& expchanged(const CSNtfBody* msg);
  static const ::msg::CSNtfTaskProgress& taskprogress(const CSNtfBody* msg);
  static const ::msg::CSNtfNewPlayerGuideEnded& newplayerguideended(const CSNtfBody* msg);
  static const ::msg::CSNtfTasksInfo& tasksinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpAwardsInfo& pvpawardsinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfAddAward& addaward(const CSNtfBody* msg);
  static const ::msg::CSNtfLimitRefresh& limitrefresh(const CSNtfBody* msg);
  static const ::msg::CSNtfUpdateNotice& updatenotice(const CSNtfBody* msg);
  static const ::msg::CSNtfUpdatePveChallengeCount& updatepvechallengecount(const CSNtfBody* msg);
  static const ::msg::CSNtfAdDiscount& addiscount(const CSNtfBody* msg);
  static const ::msg::CSNtfCalcMmr& calcmmr(const CSNtfBody* msg);
  static const ::msg::CSNtfBag& bag(const CSNtfBody* msg);
  static const ::msg::CSNtfItemAttributes& itemattributes(const CSNtfBody* msg);
  static const ::msg::CSNtfPvpAffixTrigger& pvpaffixtrigger(const CSNtfBody* msg);
  static const ::msg::CSNtfUpdatePvpData& updatepvpdata(const CSNtfBody* msg);
  static const ::msg::CSNtfUpgradePassport& upgradepassport(const CSNtfBody* msg);
  static const ::msg::CSNtfUpdateTeamDeBuff& updateteamdebuff(const CSNtfBody* msg);
  static const ::msg::CSNtfPveEval& pveeval(const CSNtfBody* msg);
  static const ::msg::CSNtfUnlockCardGroup& unlockcardgroup(const CSNtfBody* msg);
  static const ::msg::CSNtfCustomPveActivity& custompveactivity(const CSNtfBody* msg);
  static const ::msg::CSNtfGmBan& csntfgmban(const CSNtfBody* msg);
  static const ::msg::CSNtfTDPlayerInfo& tdplayerinfo(const CSNtfBody* msg);
  static const ::msg::CSNtfMentorInviteMsg& mentorinvitemsg(const CSNtfBody* msg);
  static const ::msg::CSNtfBecomeMentor& becomementor(const CSNtfBody* msg);
  static const ::msg::CSNtfMentorRelation& mentorrelation(const CSNtfBody* msg);
  static const ::msg::CSNtfPupilTaskUpdate& mentorshiptaskupdate(const CSNtfBody* msg);
  static const ::msg::CSNtfMentorLevel& mentorlevel(const CSNtfBody* msg);
  static const ::msg::CSNtfCurDressUpdate& curdressupdate(const CSNtfBody* msg);
  static const ::msg::CSNtfChangeExchangeMark& changeexchangemark(const CSNtfBody* msg);
  static const ::msg::CSNtfRefreshPassport& refreshpassport(const CSNtfBody* msg);
  static const ::msg::CSNtfGmRemoveMail& gmremovemail(const CSNtfBody* msg);
  static const ::msg::CSNtfAutoUseItem& autouseitem(const CSNtfBody* msg);
};

const ::msg::CSNtfKickOff&
CSNtfBody::_Internal::kickoff(const CSNtfBody* msg) {
  return *msg->_impl_.kickoff_;
}
const ::msg::CSNtfWait&
CSNtfBody::_Internal::ntfwait(const CSNtfBody* msg) {
  return *msg->_impl_.ntfwait_;
}
const ::msg::CSNtfPassDayBody&
CSNtfBody::_Internal::passday(const CSNtfBody* msg) {
  return *msg->_impl_.passday_;
}
const ::msg::CSNtfPassWeekBody&
CSNtfBody::_Internal::passweek(const CSNtfBody* msg) {
  return *msg->_impl_.passweek_;
}
const ::msg::CSNtfPassMonthBody&
CSNtfBody::_Internal::passmonth(const CSNtfBody* msg) {
  return *msg->_impl_.passmonth_;
}
const ::msg::CSNtfWorldChat&
CSNtfBody::_Internal::worldchat(const CSNtfBody* msg) {
  return *msg->_impl_.worldchat_;
}
const ::msg::CSNtfHeadPic&
CSNtfBody::_Internal::headpic(const CSNtfBody* msg) {
  return *msg->_impl_.headpic_;
}
const ::msg::CSNtfPvpMatch&
CSNtfBody::_Internal::pvpmatch(const CSNtfBody* msg) {
  return *msg->_impl_.pvpmatch_;
}
const ::msg::CSNtfPvp&
CSNtfBody::_Internal::pvp(const CSNtfBody* msg) {
  return *msg->_impl_.pvp_;
}
const ::msg::CSNtfPvpMatchCancel&
CSNtfBody::_Internal::pvpmatchcancel(const CSNtfBody* msg) {
  return *msg->_impl_.pvpmatchcancel_;
}
const ::msg::CSNtfPvpStatus&
CSNtfBody::_Internal::pvpstatus(const CSNtfBody* msg) {
  return *msg->_impl_.pvpstatus_;
}
const ::msg::CSNtfPvpPlayerReady&
CSNtfBody::_Internal::ntfpvpplayerready(const CSNtfBody* msg) {
  return *msg->_impl_.ntfpvpplayerready_;
}
const ::msg::CSNtfPvpBegin&
CSNtfBody::_Internal::pvpbegin(const CSNtfBody* msg) {
  return *msg->_impl_.pvpbegin_;
}
const ::msg::CSNtfPlayerFinish&
CSNtfBody::_Internal::playerfinish(const CSNtfBody* msg) {
  return *msg->_impl_.playerfinish_;
}
const ::msg::CSNtfPvpEnd&
CSNtfBody::_Internal::pvpend(const CSNtfBody* msg) {
  return *msg->_impl_.pvpend_;
}
const ::msg::CSNtfMarquee&
CSNtfBody::_Internal::marquee(const CSNtfBody* msg) {
  return *msg->_impl_.marquee_;
}
const ::msg::CSNtfRemoveMarquee&
CSNtfBody::_Internal::removemarquee(const CSNtfBody* msg) {
  return *msg->_impl_.removemarquee_;
}
const ::msg::CSNtfLoadingProgress&
CSNtfBody::_Internal::loadingprogress(const CSNtfBody* msg) {
  return *msg->_impl_.loadingprogress_;
}
const ::msg::CSNtfPvpChat&
CSNtfBody::_Internal::pvpchat(const CSNtfBody* msg) {
  return *msg->_impl_.pvpchat_;
}
const ::msg::CSNtfReload&
CSNtfBody::_Internal::reload(const CSNtfBody* msg) {
  return *msg->_impl_.reload_;
}
const ::msg::CSNtfPay&
CSNtfBody::_Internal::pay(const CSNtfBody* msg) {
  return *msg->_impl_.pay_;
}
const ::msg::CSNtfChat&
CSNtfBody::_Internal::chat(const CSNtfBody* msg) {
  return *msg->_impl_.chat_;
}
const ::msg::CSNtfFollowList&
CSNtfBody::_Internal::followlist(const CSNtfBody* msg) {
  return *msg->_impl_.followlist_;
}
const ::msg::CSNtfNewFollower&
CSNtfBody::_Internal::newfollower(const CSNtfBody* msg) {
  return *msg->_impl_.newfollower_;
}
const ::msg::CSNtfLostFollower&
CSNtfBody::_Internal::lostfollower(const CSNtfBody* msg) {
  return *msg->_impl_.lostfollower_;
}
const ::msg::CSNtfInviteJoinTeam&
CSNtfBody::_Internal::invitejointeam(const CSNtfBody* msg) {
  return *msg->_impl_.invitejointeam_;
}
const ::msg::CSNtfPlayerJoinTeam&
CSNtfBody::_Internal::playerjointeam(const CSNtfBody* msg) {
  return *msg->_impl_.playerjointeam_;
}
const ::msg::CSNtfPlayerLeaveTeam&
CSNtfBody::_Internal::playerleaveteam(const CSNtfBody* msg) {
  return *msg->_impl_.playerleaveteam_;
}
const ::msg::CSNtfKickOffTeamPlayer&
CSNtfBody::_Internal::kickoffteamplayer(const CSNtfBody* msg) {
  return *msg->_impl_.kickoffteamplayer_;
}
const ::msg::CSNtfTeamMsg&
CSNtfBody::_Internal::teammsg(const CSNtfBody* msg) {
  return *msg->_impl_.teammsg_;
}
const ::msg::CSNtfTeamReady&
CSNtfBody::_Internal::teamready(const CSNtfBody* msg) {
  return *msg->_impl_.teamready_;
}
const ::msg::CSNtfRejectJoinTeam&
CSNtfBody::_Internal::rejectjointeam(const CSNtfBody* msg) {
  return *msg->_impl_.rejectjointeam_;
}
const ::msg::CSNtfNotice&
CSNtfBody::_Internal::notice(const CSNtfBody* msg) {
  return *msg->_impl_.notice_;
}
const ::msg::CSNtfRemoveNotice&
CSNtfBody::_Internal::removenotice(const CSNtfBody* msg) {
  return *msg->_impl_.removenotice_;
}
const ::msg::CSNtfUpgradeBattleStage&
CSNtfBody::_Internal::upgradebattlestage(const CSNtfBody* msg) {
  return *msg->_impl_.upgradebattlestage_;
}
const ::msg::CSNtfPassportTaskProgress&
CSNtfBody::_Internal::passporttaskprogress(const CSNtfBody* msg) {
  return *msg->_impl_.passporttaskprogress_;
}
const ::msg::CSNtfRankSeasonEval&
CSNtfBody::_Internal::rankseasoneval(const CSNtfBody* msg) {
  return *msg->_impl_.rankseasoneval_;
}
const ::msg::CSNtfBindAccounts&
CSNtfBody::_Internal::bindaccounts(const CSNtfBody* msg) {
  return *msg->_impl_.bindaccounts_;
}
const ::msg::CSNtfSeasonTaskProgress&
CSNtfBody::_Internal::seasontaskprogress(const CSNtfBody* msg) {
  return *msg->_impl_.seasontaskprogress_;
}
const ::msg::CSNtfAlphaActivity&
CSNtfBody::_Internal::alphaactivity(const CSNtfBody* msg) {
  return *msg->_impl_.alphaactivity_;
}
const ::msg::CSNtfOffSeasonToNewSeason&
CSNtfBody::_Internal::offseasontonewseason(const CSNtfBody* msg) {
  return *msg->_impl_.offseasontonewseason_;
}
const ::msg::CSNtfLanguageMd5List&
CSNtfBody::_Internal::languagemd5list(const CSNtfBody* msg) {
  return *msg->_impl_.languagemd5list_;
}
const ::msg::CSNtfActivityProgress&
CSNtfBody::_Internal::activityprogress(const CSNtfBody* msg) {
  return *msg->_impl_.activityprogress_;
}
const ::msg::CSNtfRemoveActivity&
CSNtfBody::_Internal::removeactivity(const CSNtfBody* msg) {
  return *msg->_impl_.removeactivity_;
}
const ::msg::CSNtfActivityConfig&
CSNtfBody::_Internal::activityconfig(const CSNtfBody* msg) {
  return *msg->_impl_.activityconfig_;
}
const ::msg::CSNtfMeleeTaskProgress&
CSNtfBody::_Internal::meleetaskprogress(const CSNtfBody* msg) {
  return *msg->_impl_.meleetaskprogress_;
}
const ::msg::CSNtfSetTeamMode&
CSNtfBody::_Internal::setteammode(const CSNtfBody* msg) {
  return *msg->_impl_.setteammode_;
}
const ::msg::CSNtfPassportOpen&
CSNtfBody::_Internal::passportopen(const CSNtfBody* msg) {
  return *msg->_impl_.passportopen_;
}
const ::msg::CSNtfPassportClose&
CSNtfBody::_Internal::passportclose(const CSNtfBody* msg) {
  return *msg->_impl_.passportclose_;
}
const ::msg::CSNtfWeekIndex&
CSNtfBody::_Internal::weekindex(const CSNtfBody* msg) {
  return *msg->_impl_.weekindex_;
}
const ::msg::CSNtfPvpHistory&
CSNtfBody::_Internal::pvphistory(const CSNtfBody* msg) {
  return *msg->_impl_.pvphistory_;
}
const ::msg::CSNtfTeamPvpEnd&
CSNtfBody::_Internal::teampvpend(const CSNtfBody* msg) {
  return *msg->_impl_.teampvpend_;
}
const ::msg::CSNtfProbeNetDelay&
CSNtfBody::_Internal::probenetdelay(const CSNtfBody* msg) {
  return *msg->_impl_.probenetdelay_;
}
const ::msg::CSNtfRefreshGoods&
CSNtfBody::_Internal::refreshgoods(const CSNtfBody* msg) {
  return *msg->_impl_.refreshgoods_;
}
const ::msg::CSNtfRemoveEggs&
CSNtfBody::_Internal::removeeggs(const CSNtfBody* msg) {
  return *msg->_impl_.removeeggs_;
}
const ::msg::CSNtfSwitchSet&
CSNtfBody::_Internal::switchset(const CSNtfBody* msg) {
  return *msg->_impl_.switchset_;
}
const ::msg::CSNtfBlacklist&
CSNtfBody::_Internal::blacklist(const CSNtfBody* msg) {
  return *msg->_impl_.blacklist_;
}
const ::msg::CSNtfBindPhoneNumberSwitch&
CSNtfBody::_Internal::bindphonenumberswitch(const CSNtfBody* msg) {
  return *msg->_impl_.bindphonenumberswitch_;
}
const ::msg::CSNtfWorldInvite&
CSNtfBody::_Internal::worldinvite(const CSNtfBody* msg) {
  return *msg->_impl_.worldinvite_;
}
const ::msg::CSNtfMallNotice&
CSNtfBody::_Internal::mallnotice(const CSNtfBody* msg) {
  return *msg->_impl_.mallnotice_;
}
const ::msg::CSNtfPrivilege&
CSNtfBody::_Internal::privilege(const CSNtfBody* msg) {
  return *msg->_impl_.privilege_;
}
const ::msg::CSNtfAARemind&
CSNtfBody::_Internal::aaremind(const CSNtfBody* msg) {
  return *msg->_impl_.aaremind_;
}
const ::msg::CSNtfAABan&
CSNtfBody::_Internal::aaban(const CSNtfBody* msg) {
  return *msg->_impl_.aaban_;
}
const ::msg::CSNtfAAVerify&
CSNtfBody::_Internal::aaverify(const CSNtfBody* msg) {
  return *msg->_impl_.aaverify_;
}
const ::msg::CSNtfPhoneNumber&
CSNtfBody::_Internal::phonenumber(const CSNtfBody* msg) {
  return *msg->_impl_.phonenumber_;
}
const ::msg::CSNtfAntiCallBack&
CSNtfBody::_Internal::anticallback(const CSNtfBody* msg) {
  return *msg->_impl_.anticallback_;
}
const ::msg::CSNtfFortuneBagTime&
CSNtfBody::_Internal::fortunebagtime(const CSNtfBody* msg) {
  return *msg->_impl_.fortunebagtime_;
}
const ::msg::CSNtfUpdateItem&
CSNtfBody::_Internal::updateitem(const CSNtfBody* msg) {
  return *msg->_impl_.updateitem_;
}
const ::msg::CSNtfCreditScore&
CSNtfBody::_Internal::creditscore(const CSNtfBody* msg) {
  return *msg->_impl_.creditscore_;
}
const ::msg::CSNtfBuffAct&
CSNtfBody::_Internal::buffact(const CSNtfBody* msg) {
  return *msg->_impl_.buffact_;
}
const ::msg::CSNtfActivityGroup&
CSNtfBody::_Internal::activitygroup(const CSNtfBody* msg) {
  return *msg->_impl_.activitygroup_;
}
const ::msg::CSNtfClearChat&
CSNtfBody::_Internal::clearchat(const CSNtfBody* msg) {
  return *msg->_impl_.clearchat_;
}
const ::msg::CSNtfForbidInfo&
CSNtfBody::_Internal::forbidinfo(const CSNtfBody* msg) {
  return *msg->_impl_.forbidinfo_;
}
const ::msg::CSNtfMidasDiamond&
CSNtfBody::_Internal::midasdiamond(const CSNtfBody* msg) {
  return *msg->_impl_.midasdiamond_;
}
const ::msg::CSNtfJoinVoiceTeam&
CSNtfBody::_Internal::joinvoiceteam(const CSNtfBody* msg) {
  return *msg->_impl_.joinvoiceteam_;
}
const ::msg::CSNtfJoinVoicePvp&
CSNtfBody::_Internal::joinvoicepvp(const CSNtfBody* msg) {
  return *msg->_impl_.joinvoicepvp_;
}
const ::msg::CSNtfJoinVoiceCamp&
CSNtfBody::_Internal::joinvoicecamp(const CSNtfBody* msg) {
  return *msg->_impl_.joinvoicecamp_;
}
const ::msg::CSNtfWxVVip&
CSNtfBody::_Internal::wxvvip(const CSNtfBody* msg) {
  return *msg->_impl_.wxvvip_;
}
const ::msg::CSNtfFreeFlow&
CSNtfBody::_Internal::freeflow(const CSNtfBody* msg) {
  return *msg->_impl_.freeflow_;
}
const ::msg::CSNtfObserveStatus&
CSNtfBody::_Internal::observestatus(const CSNtfBody* msg) {
  return *msg->_impl_.observestatus_;
}
const ::msg::CSNtfGameMarquee&
CSNtfBody::_Internal::gamemarquee(const CSNtfBody* msg) {
  return *msg->_impl_.gamemarquee_;
}
const ::msg::CSNtfWxRedPacket&
CSNtfBody::_Internal::wxredpacket(const CSNtfBody* msg) {
  return *msg->_impl_.wxredpacket_;
}
const ::msg::CSNtfGmSysMsg&
CSNtfBody::_Internal::gmsysmsg(const CSNtfBody* msg) {
  return *msg->_impl_.gmsysmsg_;
}
const ::msg::CSNtfNewPunishment&
CSNtfBody::_Internal::newpunishment(const CSNtfBody* msg) {
  return *msg->_impl_.newpunishment_;
}
const ::msg::CSNtfTeamSlot&
CSNtfBody::_Internal::teamslot(const CSNtfBody* msg) {
  return *msg->_impl_.teamslot_;
}
const ::msg::CSNtfTeamSubMode&
CSNtfBody::_Internal::teamsubmode(const CSNtfBody* msg) {
  return *msg->_impl_.teamsubmode_;
}
const ::msg::CSNtfTeamSlotStatus&
CSNtfBody::_Internal::teamslotstatus(const CSNtfBody* msg) {
  return *msg->_impl_.teamslotstatus_;
}
const ::msg::CSNtfPunishmentInfo&
CSNtfBody::_Internal::punishmentinfo(const CSNtfBody* msg) {
  return *msg->_impl_.punishmentinfo_;
}
const ::msg::CSNtfRemovePunishment&
CSNtfBody::_Internal::removepunishment(const CSNtfBody* msg) {
  return *msg->_impl_.removepunishment_;
}
const ::msg::CSNtfPvpConfirm&
CSNtfBody::_Internal::pvpconfirm(const CSNtfBody* msg) {
  return *msg->_impl_.pvpconfirm_;
}
const ::msg::CSNtfMatchSuccess&
CSNtfBody::_Internal::matchsuccess(const CSNtfBody* msg) {
  return *msg->_impl_.matchsuccess_;
}
const ::msg::CSNtfOldBusinessPlayer&
CSNtfBody::_Internal::oldbusinessplayer(const CSNtfBody* msg) {
  return *msg->_impl_.oldbusinessplayer_;
}
const ::msg::CSNtfChangeTeamSlot&
CSNtfBody::_Internal::changeteamslot(const CSNtfBody* msg) {
  return *msg->_impl_.changeteamslot_;
}
const ::msg::CSNtfRefuseChangeTeamSlot&
CSNtfBody::_Internal::refusechangeteamslot(const CSNtfBody* msg) {
  return *msg->_impl_.refusechangeteamslot_;
}
const ::msg::CSNtfCancelChangeSlot&
CSNtfBody::_Internal::cancelchangeslot(const CSNtfBody* msg) {
  return *msg->_impl_.cancelchangeslot_;
}
const ::msg::CSNtfShowChessSkin&
CSNtfBody::_Internal::showchessskin(const CSNtfBody* msg) {
  return *msg->_impl_.showchessskin_;
}
const ::msg::CSNtfOnHelpReddot&
CSNtfBody::_Internal::onhelpreddot(const CSNtfBody* msg) {
  return *msg->_impl_.onhelpreddot_;
}
const ::msg::CSNtfBagUpdate&
CSNtfBody::_Internal::bagupdate(const CSNtfBody* msg) {
  return *msg->_impl_.bagupdate_;
}
const ::msg::CSNtfRefreshMelee&
CSNtfBody::_Internal::refreshmelee(const CSNtfBody* msg) {
  return *msg->_impl_.refreshmelee_;
}
const ::msg::CSNtfWebLogin&
CSNtfBody::_Internal::weblogin(const CSNtfBody* msg) {
  return *msg->_impl_.weblogin_;
}
const ::msg::CSNtfCurrentTournament&
CSNtfBody::_Internal::currenttournament(const CSNtfBody* msg) {
  return *msg->_impl_.currenttournament_;
}
const ::msg::CSNtfTournamentBegin&
CSNtfBody::_Internal::tournamentbegin(const CSNtfBody* msg) {
  return *msg->_impl_.tournamentbegin_;
}
const ::msg::CSNtfTournamentEnrollBegin&
CSNtfBody::_Internal::tournamentenrollbegin(const CSNtfBody* msg) {
  return *msg->_impl_.tournamentenrollbegin_;
}
const ::msg::CSNtfTournamentEnrollEnd&
CSNtfBody::_Internal::tournamentenrollend(const CSNtfBody* msg) {
  return *msg->_impl_.tournamentenrollend_;
}
const ::msg::CSNtfJoinTournamentRoom&
CSNtfBody::_Internal::jointournamentroom(const CSNtfBody* msg) {
  return *msg->_impl_.jointournamentroom_;
}
const ::msg::CSNtfTournamentEnd&
CSNtfBody::_Internal::tournamentend(const CSNtfBody* msg) {
  return *msg->_impl_.tournamentend_;
}
const ::msg::CSNtfTournamentOut&
CSNtfBody::_Internal::tournamentout(const CSNtfBody* msg) {
  return *msg->_impl_.tournamentout_;
}
const ::msg::CSNtfTournamentRoundEnd&
CSNtfBody::_Internal::tournamentroundend(const CSNtfBody* msg) {
  return *msg->_impl_.tournamentroundend_;
}
const ::msg::CSNtfLuckStarAward&
CSNtfBody::_Internal::luckstaraward(const CSNtfBody* msg) {
  return *msg->_impl_.luckstaraward_;
}
const ::msg::CSNtfInviteObserve&
CSNtfBody::_Internal::inviteobserve(const CSNtfBody* msg) {
  return *msg->_impl_.inviteobserve_;
}
const ::msg::CSNtfRejectObserve&
CSNtfBody::_Internal::rejectobserve(const CSNtfBody* msg) {
  return *msg->_impl_.rejectobserve_;
}
const ::msg::CSNtfChestCount&
CSNtfBody::_Internal::chestcount(const CSNtfBody* msg) {
  return *msg->_impl_.chestcount_;
}
const ::msg::CSNtfRecruitInfo&
CSNtfBody::_Internal::recruitinfo(const CSNtfBody* msg) {
  return *msg->_impl_.recruitinfo_;
}
const ::msg::CSNtfRecruitPlayer&
CSNtfBody::_Internal::recruitplayer(const CSNtfBody* msg) {
  return *msg->_impl_.recruitplayer_;
}
const ::msg::CSNtfRecruitPlayerBattle&
CSNtfBody::_Internal::recruitplayerbattle(const CSNtfBody* msg) {
  return *msg->_impl_.recruitplayerbattle_;
}
const ::msg::CSNtfBetOnBounty&
CSNtfBody::_Internal::betonbounty(const CSNtfBody* msg) {
  return *msg->_impl_.betonbounty_;
}
const ::msg::CSNtfActivityTaskUnlock&
CSNtfBody::_Internal::activitytaskunlock(const CSNtfBody* msg) {
  return *msg->_impl_.activitytaskunlock_;
}
const ::msg::CSNtfPsServerOnly&
CSNtfBody::_Internal::psserveronly(const CSNtfBody* msg) {
  return *msg->_impl_.psserveronly_;
}
const ::msg::CSNtfAddThirdPvpInfo&
CSNtfBody::_Internal::addthirdpvpinfo(const CSNtfBody* msg) {
  return *msg->_impl_.addthirdpvpinfo_;
}
const ::msg::CSNtfDelThirdPvpInfo&
CSNtfBody::_Internal::delthirdpvpinfo(const CSNtfBody* msg) {
  return *msg->_impl_.delthirdpvpinfo_;
}
const ::msg::CSNtfPs4ServerOnly&
CSNtfBody::_Internal::ps4serveronly(const CSNtfBody* msg) {
  return *msg->_impl_.ps4serveronly_;
}
const ::msg::CSNtfLuckMallGoods&
CSNtfBody::_Internal::luckmallgoods(const CSNtfBody* msg) {
  return *msg->_impl_.luckmallgoods_;
}
const ::msg::CSNtfChessListErr&
CSNtfBody::_Internal::chesslisterr(const CSNtfBody* msg) {
  return *msg->_impl_.chesslisterr_;
}
const ::msg::CSNtfChestRecord&
CSNtfBody::_Internal::chestrecord(const CSNtfBody* msg) {
  return *msg->_impl_.chestrecord_;
}
const ::msg::CSNtfGOAInfo&
CSNtfBody::_Internal::goainfo(const CSNtfBody* msg) {
  return *msg->_impl_.goainfo_;
}
const ::msg::CSNtfMedalInfos&
CSNtfBody::_Internal::medalinfo(const CSNtfBody* msg) {
  return *msg->_impl_.medalinfo_;
}
const ::msg::CSNtfMedalId&
CSNtfBody::_Internal::medalid(const CSNtfBody* msg) {
  return *msg->_impl_.medalid_;
}
const ::msg::CSNtfPvpReset&
CSNtfBody::_Internal::pvpreset(const CSNtfBody* msg) {
  return *msg->_impl_.pvpreset_;
}
const ::msg::CSNtfDelMail&
CSNtfBody::_Internal::delmail(const CSNtfBody* msg) {
  return *msg->_impl_.delmail_;
}
const ::msg::CSNtfItemInfo&
CSNtfBody::_Internal::iteminfo(const CSNtfBody* msg) {
  return *msg->_impl_.iteminfo_;
}
const ::msg::CSNtfPassportNum&
CSNtfBody::_Internal::passportnum(const CSNtfBody* msg) {
  return *msg->_impl_.passportnum_;
}
const ::msg::CSNtfPassportYearCardNum&
CSNtfBody::_Internal::passportyearcardnum(const CSNtfBody* msg) {
  return *msg->_impl_.passportyearcardnum_;
}
const ::msg::CSNtfTeamOP&
CSNtfBody::_Internal::teamop(const CSNtfBody* msg) {
  return *msg->_impl_.teamop_;
}
const ::msg::CSNtfTeamDismiss&
CSNtfBody::_Internal::teamdismiss(const CSNtfBody* msg) {
  return *msg->_impl_.teamdismiss_;
}
const ::msg::CSNtfSwitchModeInTeam&
CSNtfBody::_Internal::switchmodeinteam(const CSNtfBody* msg) {
  return *msg->_impl_.switchmodeinteam_;
}
const ::msg::CSNtfAddBanner&
CSNtfBody::_Internal::addbanner(const CSNtfBody* msg) {
  return *msg->_impl_.addbanner_;
}
const ::msg::CSNtfRemoveBanner&
CSNtfBody::_Internal::removebanner(const CSNtfBody* msg) {
  return *msg->_impl_.removebanner_;
}
const ::msg::CSNtfSingleRoundFlow&
CSNtfBody::_Internal::singleroundflow(const CSNtfBody* msg) {
  return *msg->_impl_.singleroundflow_;
}
const ::msg::CSNtfTeamStatus&
CSNtfBody::_Internal::teamstatus(const CSNtfBody* msg) {
  return *msg->_impl_.teamstatus_;
}
const ::msg::CSNtfTNGameEnd&
CSNtfBody::_Internal::tngameend(const CSNtfBody* msg) {
  return *msg->_impl_.tngameend_;
}
const ::msg::CSNtfPlayerLackResourceInTeam&
CSNtfBody::_Internal::playerlackresource(const CSNtfBody* msg) {
  return *msg->_impl_.playerlackresource_;
}
const ::msg::CSNtfFavMapRemoved&
CSNtfBody::_Internal::favmapremoved(const CSNtfBody* msg) {
  return *msg->_impl_.favmapremoved_;
}
const ::msg::CSNtfWorkshopMatchResult&
CSNtfBody::_Internal::workshopmatchresult(const CSNtfBody* msg) {
  return *msg->_impl_.workshopmatchresult_;
}
const ::msg::CSNtfBigWinnerExpandMatch&
CSNtfBody::_Internal::bigwinnerexpandmatch(const CSNtfBody* msg) {
  return *msg->_impl_.bigwinnerexpandmatch_;
}
const ::msg::CSNtfVerifyRealName&
CSNtfBody::_Internal::verifyrealname(const CSNtfBody* msg) {
  return *msg->_impl_.verifyrealname_;
}
const ::msg::CSNtfGuildJoin&
CSNtfBody::_Internal::guildjoin(const CSNtfBody* msg) {
  return *msg->_impl_.guildjoin_;
}
const ::msg::CSNtfGuildMemberChange&
CSNtfBody::_Internal::memberchange(const CSNtfBody* msg) {
  return *msg->_impl_.memberchange_;
}
const ::msg::CSNtfGuildKickoff&
CSNtfBody::_Internal::guildkickoff(const CSNtfBody* msg) {
  return *msg->_impl_.guildkickoff_;
}
const ::msg::CSNtfGuildRoleChange&
CSNtfBody::_Internal::guildrolechange(const CSNtfBody* msg) {
  return *msg->_impl_.guildrolechange_;
}
const ::msg::CSNtfGuildAttrChange&
CSNtfBody::_Internal::guildattrchange(const CSNtfBody* msg) {
  return *msg->_impl_.guildattrchange_;
}
const ::msg::CSNtfGuildChat&
CSNtfBody::_Internal::guildchat(const CSNtfBody* msg) {
  return *msg->_impl_.guildchat_;
}
const ::msg::CSNtfNewGuildLog&
CSNtfBody::_Internal::newguildlog(const CSNtfBody* msg) {
  return *msg->_impl_.newguildlog_;
}
const ::msg::CSNtfGuildApplicantChange&
CSNtfBody::_Internal::applicantchange(const CSNtfBody* msg) {
  return *msg->_impl_.applicantchange_;
}
const ::msg::CSNtfGuildInviteeChange&
CSNtfBody::_Internal::inviteechange(const CSNtfBody* msg) {
  return *msg->_impl_.inviteechange_;
}
const ::msg::CSNtfGuildNewInvite&
CSNtfBody::_Internal::guildnewinvite(const CSNtfBody* msg) {
  return *msg->_impl_.guildnewinvite_;
}
const ::msg::CSNtfGuildInfo&
CSNtfBody::_Internal::guildinfo(const CSNtfBody* msg) {
  return *msg->_impl_.guildinfo_;
}
const ::msg::CSNtfVngCommentAwardReset&
CSNtfBody::_Internal::vngawardreset(const CSNtfBody* msg) {
  return *msg->_impl_.vngawardreset_;
}
const ::msg::CSNtfAdAward&
CSNtfBody::_Internal::adaward(const CSNtfBody* msg) {
  return *msg->_impl_.adaward_;
}
const ::msg::CSNtfAdCount&
CSNtfBody::_Internal::adcount(const CSNtfBody* msg) {
  return *msg->_impl_.adcount_;
}
const ::msg::CSNtfUIForbid&
CSNtfBody::_Internal::uiforbid(const CSNtfBody* msg) {
  return *msg->_impl_.uiforbid_;
}
const ::msg::CSNtfPvpUpdateMessengerPos&
CSNtfBody::_Internal::pvpupdatemessengerpos(const CSNtfBody* msg) {
  return *msg->_impl_.pvpupdatemessengerpos_;
}
const ::msg::CSNtfPvpPlayerLoggedIn&
CSNtfBody::_Internal::pvpplayerloggedin(const CSNtfBody* msg) {
  return *msg->_impl_.pvpplayerloggedin_;
}
const ::msg::CSNtfPassThrough&
CSNtfBody::_Internal::passthrough(const CSNtfBody* msg) {
  return *msg->_impl_.passthrough_;
}
const ::msg::CSNtfAA&
CSNtfBody::_Internal::aa(const CSNtfBody* msg) {
  return *msg->_impl_.aa_;
}
const ::msg::CSNtfPvpReconnect&
CSNtfBody::_Internal::pvpreconnect(const CSNtfBody* msg) {
  return *msg->_impl_.pvpreconnect_;
}
const ::msg::CSNtfUpdateBattleResult&
CSNtfBody::_Internal::updatebattleresult(const CSNtfBody* msg) {
  return *msg->_impl_.updatebattleresult_;
}
const ::msg::CSNtfVisitPlayer&
CSNtfBody::_Internal::visitplayer(const CSNtfBody* msg) {
  return *msg->_impl_.visitplayer_;
}
const ::msg::CSNtfKrIdentityAuth&
CSNtfBody::_Internal::kridentityauth(const CSNtfBody* msg) {
  return *msg->_impl_.kridentityauth_;
}
const ::msg::CSNtfKrAddictionTip&
CSNtfBody::_Internal::kraddictiontip(const CSNtfBody* msg) {
  return *msg->_impl_.kraddictiontip_;
}
const ::msg::CSNtfLeaveGameEarly&
CSNtfBody::_Internal::leavegameearly(const CSNtfBody* msg) {
  return *msg->_impl_.leavegameearly_;
}
const ::msg::CSNtfKrAddictionCountdown&
CSNtfBody::_Internal::kraddictioncountdown(const CSNtfBody* msg) {
  return *msg->_impl_.kraddictioncountdown_;
}
const ::msg::CSNtfHistoryChatMsg&
CSNtfBody::_Internal::histroychatmsg(const CSNtfBody* msg) {
  return *msg->_impl_.histroychatmsg_;
}
const ::msg::CSNtfSystemGmTime&
CSNtfBody::_Internal::gmtime(const CSNtfBody* msg) {
  return *msg->_impl_.gmtime_;
}
const ::msg::CSNtfChangeName&
CSNtfBody::_Internal::changename(const CSNtfBody* msg) {
  return *msg->_impl_.changename_;
}
const ::msg::CSNtfFirstPay&
CSNtfBody::_Internal::firstpay(const CSNtfBody* msg) {
  return *msg->_impl_.firstpay_;
}
const ::msg::CSNtfPlayerExpChanged&
CSNtfBody::_Internal::expchanged(const CSNtfBody* msg) {
  return *msg->_impl_.expchanged_;
}
const ::msg::CSNtfTaskProgress&
CSNtfBody::_Internal::taskprogress(const CSNtfBody* msg) {
  return *msg->_impl_.taskprogress_;
}
const ::msg::CSNtfNewPlayerGuideEnded&
CSNtfBody::_Internal::newplayerguideended(const CSNtfBody* msg) {
  return *msg->_impl_.newplayerguideended_;
}
const ::msg::CSNtfTasksInfo&
CSNtfBody::_Internal::tasksinfo(const CSNtfBody* msg) {
  return *msg->_impl_.tasksinfo_;
}
const ::msg::CSNtfPvpAwardsInfo&
CSNtfBody::_Internal::pvpawardsinfo(const CSNtfBody* msg) {
  return *msg->_impl_.pvpawardsinfo_;
}
const ::msg::CSNtfAddAward&
CSNtfBody::_Internal::addaward(const CSNtfBody* msg) {
  return *msg->_impl_.addaward_;
}
const ::msg::CSNtfLimitRefresh&
CSNtfBody::_Internal::limitrefresh(const CSNtfBody* msg) {
  return *msg->_impl_.limitrefresh_;
}
const ::msg::CSNtfUpdateNotice&
CSNtfBody::_Internal::updatenotice(const CSNtfBody* msg) {
  return *msg->_impl_.updatenotice_;
}
const ::msg::CSNtfUpdatePveChallengeCount&
CSNtfBody::_Internal::updatepvechallengecount(const CSNtfBody* msg) {
  return *msg->_impl_.updatepvechallengecount_;
}
const ::msg::CSNtfAdDiscount&
CSNtfBody::_Internal::addiscount(const CSNtfBody* msg) {
  return *msg->_impl_.addiscount_;
}
const ::msg::CSNtfCalcMmr&
CSNtfBody::_Internal::calcmmr(const CSNtfBody* msg) {
  return *msg->_impl_.calcmmr_;
}
const ::msg::CSNtfBag&
CSNtfBody::_Internal::bag(const CSNtfBody* msg) {
  return *msg->_impl_.bag_;
}
const ::msg::CSNtfItemAttributes&
CSNtfBody::_Internal::itemattributes(const CSNtfBody* msg) {
  return *msg->_impl_.itemattributes_;
}
const ::msg::CSNtfPvpAffixTrigger&
CSNtfBody::_Internal::pvpaffixtrigger(const CSNtfBody* msg) {
  return *msg->_impl_.pvpaffixtrigger_;
}
const ::msg::CSNtfUpdatePvpData&
CSNtfBody::_Internal::updatepvpdata(const CSNtfBody* msg) {
  return *msg->_impl_.updatepvpdata_;
}
const ::msg::CSNtfUpgradePassport&
CSNtfBody::_Internal::upgradepassport(const CSNtfBody* msg) {
  return *msg->_impl_.upgradepassport_;
}
const ::msg::CSNtfUpdateTeamDeBuff&
CSNtfBody::_Internal::updateteamdebuff(const CSNtfBody* msg) {
  return *msg->_impl_.updateteamdebuff_;
}
const ::msg::CSNtfPveEval&
CSNtfBody::_Internal::pveeval(const CSNtfBody* msg) {
  return *msg->_impl_.pveeval_;
}
const ::msg::CSNtfUnlockCardGroup&
CSNtfBody::_Internal::unlockcardgroup(const CSNtfBody* msg) {
  return *msg->_impl_.unlockcardgroup_;
}
const ::msg::CSNtfCustomPveActivity&
CSNtfBody::_Internal::custompveactivity(const CSNtfBody* msg) {
  return *msg->_impl_.custompveactivity_;
}
const ::msg::CSNtfGmBan&
CSNtfBody::_Internal::csntfgmban(const CSNtfBody* msg) {
  return *msg->_impl_.csntfgmban_;
}
const ::msg::CSNtfTDPlayerInfo&
CSNtfBody::_Internal::tdplayerinfo(const CSNtfBody* msg) {
  return *msg->_impl_.tdplayerinfo_;
}
const ::msg::CSNtfMentorInviteMsg&
CSNtfBody::_Internal::mentorinvitemsg(const CSNtfBody* msg) {
  return *msg->_impl_.mentorinvitemsg_;
}
const ::msg::CSNtfBecomeMentor&
CSNtfBody::_Internal::becomementor(const CSNtfBody* msg) {
  return *msg->_impl_.becomementor_;
}
const ::msg::CSNtfMentorRelation&
CSNtfBody::_Internal::mentorrelation(const CSNtfBody* msg) {
  return *msg->_impl_.mentorrelation_;
}
const ::msg::CSNtfPupilTaskUpdate&
CSNtfBody::_Internal::mentorshiptaskupdate(const CSNtfBody* msg) {
  return *msg->_impl_.mentorshiptaskupdate_;
}
const ::msg::CSNtfMentorLevel&
CSNtfBody::_Internal::mentorlevel(const CSNtfBody* msg) {
  return *msg->_impl_.mentorlevel_;
}
const ::msg::CSNtfCurDressUpdate&
CSNtfBody::_Internal::curdressupdate(const CSNtfBody* msg) {
  return *msg->_impl_.curdressupdate_;
}
const ::msg::CSNtfChangeExchangeMark&
CSNtfBody::_Internal::changeexchangemark(const CSNtfBody* msg) {
  return *msg->_impl_.changeexchangemark_;
}
const ::msg::CSNtfRefreshPassport&
CSNtfBody::_Internal::refreshpassport(const CSNtfBody* msg) {
  return *msg->_impl_.refreshpassport_;
}
const ::msg::CSNtfGmRemoveMail&
CSNtfBody::_Internal::gmremovemail(const CSNtfBody* msg) {
  return *msg->_impl_.gmremovemail_;
}
const ::msg::CSNtfAutoUseItem&
CSNtfBody::_Internal::autouseitem(const CSNtfBody* msg) {
  return *msg->_impl_.autouseitem_;
}
void CSNtfBody::clear_kickoff() {
  if (GetArenaForAllocation() == nullptr && _impl_.kickoff_ != nullptr) {
    delete _impl_.kickoff_;
  }
  _impl_.kickoff_ = nullptr;
}
void CSNtfBody::clear_ntfwait() {
  if (GetArenaForAllocation() == nullptr && _impl_.ntfwait_ != nullptr) {
    delete _impl_.ntfwait_;
  }
  _impl_.ntfwait_ = nullptr;
}
void CSNtfBody::clear_passday() {
  if (GetArenaForAllocation() == nullptr && _impl_.passday_ != nullptr) {
    delete _impl_.passday_;
  }
  _impl_.passday_ = nullptr;
}
void CSNtfBody::clear_passweek() {
  if (GetArenaForAllocation() == nullptr && _impl_.passweek_ != nullptr) {
    delete _impl_.passweek_;
  }
  _impl_.passweek_ = nullptr;
}
void CSNtfBody::clear_passmonth() {
  if (GetArenaForAllocation() == nullptr && _impl_.passmonth_ != nullptr) {
    delete _impl_.passmonth_;
  }
  _impl_.passmonth_ = nullptr;
}
void CSNtfBody::clear_worldchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.worldchat_ != nullptr) {
    delete _impl_.worldchat_;
  }
  _impl_.worldchat_ = nullptr;
}
void CSNtfBody::clear_mails() {
  _impl_.mails_.Clear();
}
void CSNtfBody::clear_headpic() {
  if (GetArenaForAllocation() == nullptr && _impl_.headpic_ != nullptr) {
    delete _impl_.headpic_;
  }
  _impl_.headpic_ = nullptr;
}
void CSNtfBody::clear_pvpmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpmatch_ != nullptr) {
    delete _impl_.pvpmatch_;
  }
  _impl_.pvpmatch_ = nullptr;
}
void CSNtfBody::clear_pvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvp_ != nullptr) {
    delete _impl_.pvp_;
  }
  _impl_.pvp_ = nullptr;
}
void CSNtfBody::clear_pvpmatchcancel() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpmatchcancel_ != nullptr) {
    delete _impl_.pvpmatchcancel_;
  }
  _impl_.pvpmatchcancel_ = nullptr;
}
void CSNtfBody::clear_pvpstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpstatus_ != nullptr) {
    delete _impl_.pvpstatus_;
  }
  _impl_.pvpstatus_ = nullptr;
}
void CSNtfBody::clear_ntfpvpplayerready() {
  if (GetArenaForAllocation() == nullptr && _impl_.ntfpvpplayerready_ != nullptr) {
    delete _impl_.ntfpvpplayerready_;
  }
  _impl_.ntfpvpplayerready_ = nullptr;
}
void CSNtfBody::clear_pvpbegin() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpbegin_ != nullptr) {
    delete _impl_.pvpbegin_;
  }
  _impl_.pvpbegin_ = nullptr;
}
void CSNtfBody::clear_playerfinish() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerfinish_ != nullptr) {
    delete _impl_.playerfinish_;
  }
  _impl_.playerfinish_ = nullptr;
}
void CSNtfBody::clear_pvpend() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpend_ != nullptr) {
    delete _impl_.pvpend_;
  }
  _impl_.pvpend_ = nullptr;
}
void CSNtfBody::clear_marquee() {
  if (GetArenaForAllocation() == nullptr && _impl_.marquee_ != nullptr) {
    delete _impl_.marquee_;
  }
  _impl_.marquee_ = nullptr;
}
void CSNtfBody::clear_removemarquee() {
  if (GetArenaForAllocation() == nullptr && _impl_.removemarquee_ != nullptr) {
    delete _impl_.removemarquee_;
  }
  _impl_.removemarquee_ = nullptr;
}
void CSNtfBody::clear_loadingprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.loadingprogress_ != nullptr) {
    delete _impl_.loadingprogress_;
  }
  _impl_.loadingprogress_ = nullptr;
}
void CSNtfBody::clear_pvpchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpchat_ != nullptr) {
    delete _impl_.pvpchat_;
  }
  _impl_.pvpchat_ = nullptr;
}
void CSNtfBody::clear_reload() {
  if (GetArenaForAllocation() == nullptr && _impl_.reload_ != nullptr) {
    delete _impl_.reload_;
  }
  _impl_.reload_ = nullptr;
}
void CSNtfBody::clear_pay() {
  if (GetArenaForAllocation() == nullptr && _impl_.pay_ != nullptr) {
    delete _impl_.pay_;
  }
  _impl_.pay_ = nullptr;
}
void CSNtfBody::clear_chat() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
}
void CSNtfBody::clear_followlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.followlist_ != nullptr) {
    delete _impl_.followlist_;
  }
  _impl_.followlist_ = nullptr;
}
void CSNtfBody::clear_newfollower() {
  if (GetArenaForAllocation() == nullptr && _impl_.newfollower_ != nullptr) {
    delete _impl_.newfollower_;
  }
  _impl_.newfollower_ = nullptr;
}
void CSNtfBody::clear_lostfollower() {
  if (GetArenaForAllocation() == nullptr && _impl_.lostfollower_ != nullptr) {
    delete _impl_.lostfollower_;
  }
  _impl_.lostfollower_ = nullptr;
}
void CSNtfBody::clear_invitejointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.invitejointeam_ != nullptr) {
    delete _impl_.invitejointeam_;
  }
  _impl_.invitejointeam_ = nullptr;
}
void CSNtfBody::clear_playerjointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerjointeam_ != nullptr) {
    delete _impl_.playerjointeam_;
  }
  _impl_.playerjointeam_ = nullptr;
}
void CSNtfBody::clear_playerleaveteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerleaveteam_ != nullptr) {
    delete _impl_.playerleaveteam_;
  }
  _impl_.playerleaveteam_ = nullptr;
}
void CSNtfBody::clear_kickoffteamplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.kickoffteamplayer_ != nullptr) {
    delete _impl_.kickoffteamplayer_;
  }
  _impl_.kickoffteamplayer_ = nullptr;
}
void CSNtfBody::clear_teammsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.teammsg_ != nullptr) {
    delete _impl_.teammsg_;
  }
  _impl_.teammsg_ = nullptr;
}
void CSNtfBody::clear_teamready() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamready_ != nullptr) {
    delete _impl_.teamready_;
  }
  _impl_.teamready_ = nullptr;
}
void CSNtfBody::clear_rejectjointeam() {
  if (GetArenaForAllocation() == nullptr && _impl_.rejectjointeam_ != nullptr) {
    delete _impl_.rejectjointeam_;
  }
  _impl_.rejectjointeam_ = nullptr;
}
void CSNtfBody::clear_notice() {
  if (GetArenaForAllocation() == nullptr && _impl_.notice_ != nullptr) {
    delete _impl_.notice_;
  }
  _impl_.notice_ = nullptr;
}
void CSNtfBody::clear_removenotice() {
  if (GetArenaForAllocation() == nullptr && _impl_.removenotice_ != nullptr) {
    delete _impl_.removenotice_;
  }
  _impl_.removenotice_ = nullptr;
}
void CSNtfBody::clear_upgradebattlestage() {
  if (GetArenaForAllocation() == nullptr && _impl_.upgradebattlestage_ != nullptr) {
    delete _impl_.upgradebattlestage_;
  }
  _impl_.upgradebattlestage_ = nullptr;
}
void CSNtfBody::clear_passporttaskprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.passporttaskprogress_ != nullptr) {
    delete _impl_.passporttaskprogress_;
  }
  _impl_.passporttaskprogress_ = nullptr;
}
void CSNtfBody::clear_rankseasoneval() {
  if (GetArenaForAllocation() == nullptr && _impl_.rankseasoneval_ != nullptr) {
    delete _impl_.rankseasoneval_;
  }
  _impl_.rankseasoneval_ = nullptr;
}
void CSNtfBody::clear_bindaccounts() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindaccounts_ != nullptr) {
    delete _impl_.bindaccounts_;
  }
  _impl_.bindaccounts_ = nullptr;
}
void CSNtfBody::clear_seasontaskprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.seasontaskprogress_ != nullptr) {
    delete _impl_.seasontaskprogress_;
  }
  _impl_.seasontaskprogress_ = nullptr;
}
void CSNtfBody::clear_alphaactivity() {
  if (GetArenaForAllocation() == nullptr && _impl_.alphaactivity_ != nullptr) {
    delete _impl_.alphaactivity_;
  }
  _impl_.alphaactivity_ = nullptr;
}
void CSNtfBody::clear_offseasontonewseason() {
  if (GetArenaForAllocation() == nullptr && _impl_.offseasontonewseason_ != nullptr) {
    delete _impl_.offseasontonewseason_;
  }
  _impl_.offseasontonewseason_ = nullptr;
}
void CSNtfBody::clear_languagemd5list() {
  if (GetArenaForAllocation() == nullptr && _impl_.languagemd5list_ != nullptr) {
    delete _impl_.languagemd5list_;
  }
  _impl_.languagemd5list_ = nullptr;
}
void CSNtfBody::clear_activityprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.activityprogress_ != nullptr) {
    delete _impl_.activityprogress_;
  }
  _impl_.activityprogress_ = nullptr;
}
void CSNtfBody::clear_removeactivity() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeactivity_ != nullptr) {
    delete _impl_.removeactivity_;
  }
  _impl_.removeactivity_ = nullptr;
}
void CSNtfBody::clear_activityconfig() {
  if (GetArenaForAllocation() == nullptr && _impl_.activityconfig_ != nullptr) {
    delete _impl_.activityconfig_;
  }
  _impl_.activityconfig_ = nullptr;
}
void CSNtfBody::clear_meleetaskprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.meleetaskprogress_ != nullptr) {
    delete _impl_.meleetaskprogress_;
  }
  _impl_.meleetaskprogress_ = nullptr;
}
void CSNtfBody::clear_setteammode() {
  if (GetArenaForAllocation() == nullptr && _impl_.setteammode_ != nullptr) {
    delete _impl_.setteammode_;
  }
  _impl_.setteammode_ = nullptr;
}
void CSNtfBody::clear_passportopen() {
  if (GetArenaForAllocation() == nullptr && _impl_.passportopen_ != nullptr) {
    delete _impl_.passportopen_;
  }
  _impl_.passportopen_ = nullptr;
}
void CSNtfBody::clear_passportclose() {
  if (GetArenaForAllocation() == nullptr && _impl_.passportclose_ != nullptr) {
    delete _impl_.passportclose_;
  }
  _impl_.passportclose_ = nullptr;
}
void CSNtfBody::clear_weekindex() {
  if (GetArenaForAllocation() == nullptr && _impl_.weekindex_ != nullptr) {
    delete _impl_.weekindex_;
  }
  _impl_.weekindex_ = nullptr;
}
void CSNtfBody::clear_pvphistory() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvphistory_ != nullptr) {
    delete _impl_.pvphistory_;
  }
  _impl_.pvphistory_ = nullptr;
}
void CSNtfBody::clear_teampvpend() {
  if (GetArenaForAllocation() == nullptr && _impl_.teampvpend_ != nullptr) {
    delete _impl_.teampvpend_;
  }
  _impl_.teampvpend_ = nullptr;
}
void CSNtfBody::clear_probenetdelay() {
  if (GetArenaForAllocation() == nullptr && _impl_.probenetdelay_ != nullptr) {
    delete _impl_.probenetdelay_;
  }
  _impl_.probenetdelay_ = nullptr;
}
void CSNtfBody::clear_refreshgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.refreshgoods_ != nullptr) {
    delete _impl_.refreshgoods_;
  }
  _impl_.refreshgoods_ = nullptr;
}
void CSNtfBody::clear_removeeggs() {
  if (GetArenaForAllocation() == nullptr && _impl_.removeeggs_ != nullptr) {
    delete _impl_.removeeggs_;
  }
  _impl_.removeeggs_ = nullptr;
}
void CSNtfBody::clear_switchset() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchset_ != nullptr) {
    delete _impl_.switchset_;
  }
  _impl_.switchset_ = nullptr;
}
void CSNtfBody::clear_blacklist() {
  if (GetArenaForAllocation() == nullptr && _impl_.blacklist_ != nullptr) {
    delete _impl_.blacklist_;
  }
  _impl_.blacklist_ = nullptr;
}
void CSNtfBody::clear_bindphonenumberswitch() {
  if (GetArenaForAllocation() == nullptr && _impl_.bindphonenumberswitch_ != nullptr) {
    delete _impl_.bindphonenumberswitch_;
  }
  _impl_.bindphonenumberswitch_ = nullptr;
}
void CSNtfBody::clear_worldinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.worldinvite_ != nullptr) {
    delete _impl_.worldinvite_;
  }
  _impl_.worldinvite_ = nullptr;
}
void CSNtfBody::clear_mallnotice() {
  if (GetArenaForAllocation() == nullptr && _impl_.mallnotice_ != nullptr) {
    delete _impl_.mallnotice_;
  }
  _impl_.mallnotice_ = nullptr;
}
void CSNtfBody::clear_privilege() {
  if (GetArenaForAllocation() == nullptr && _impl_.privilege_ != nullptr) {
    delete _impl_.privilege_;
  }
  _impl_.privilege_ = nullptr;
}
void CSNtfBody::clear_aaremind() {
  if (GetArenaForAllocation() == nullptr && _impl_.aaremind_ != nullptr) {
    delete _impl_.aaremind_;
  }
  _impl_.aaremind_ = nullptr;
}
void CSNtfBody::clear_aaban() {
  if (GetArenaForAllocation() == nullptr && _impl_.aaban_ != nullptr) {
    delete _impl_.aaban_;
  }
  _impl_.aaban_ = nullptr;
}
void CSNtfBody::clear_aaverify() {
  if (GetArenaForAllocation() == nullptr && _impl_.aaverify_ != nullptr) {
    delete _impl_.aaverify_;
  }
  _impl_.aaverify_ = nullptr;
}
void CSNtfBody::clear_phonenumber() {
  if (GetArenaForAllocation() == nullptr && _impl_.phonenumber_ != nullptr) {
    delete _impl_.phonenumber_;
  }
  _impl_.phonenumber_ = nullptr;
}
void CSNtfBody::clear_anticallback() {
  if (GetArenaForAllocation() == nullptr && _impl_.anticallback_ != nullptr) {
    delete _impl_.anticallback_;
  }
  _impl_.anticallback_ = nullptr;
}
void CSNtfBody::clear_fortunebagtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.fortunebagtime_ != nullptr) {
    delete _impl_.fortunebagtime_;
  }
  _impl_.fortunebagtime_ = nullptr;
}
void CSNtfBody::clear_updateitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.updateitem_ != nullptr) {
    delete _impl_.updateitem_;
  }
  _impl_.updateitem_ = nullptr;
}
void CSNtfBody::clear_creditscore() {
  if (GetArenaForAllocation() == nullptr && _impl_.creditscore_ != nullptr) {
    delete _impl_.creditscore_;
  }
  _impl_.creditscore_ = nullptr;
}
void CSNtfBody::clear_buffact() {
  if (GetArenaForAllocation() == nullptr && _impl_.buffact_ != nullptr) {
    delete _impl_.buffact_;
  }
  _impl_.buffact_ = nullptr;
}
void CSNtfBody::clear_activitygroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.activitygroup_ != nullptr) {
    delete _impl_.activitygroup_;
  }
  _impl_.activitygroup_ = nullptr;
}
void CSNtfBody::clear_clearchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.clearchat_ != nullptr) {
    delete _impl_.clearchat_;
  }
  _impl_.clearchat_ = nullptr;
}
void CSNtfBody::clear_forbidinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.forbidinfo_ != nullptr) {
    delete _impl_.forbidinfo_;
  }
  _impl_.forbidinfo_ = nullptr;
}
void CSNtfBody::clear_midasdiamond() {
  if (GetArenaForAllocation() == nullptr && _impl_.midasdiamond_ != nullptr) {
    delete _impl_.midasdiamond_;
  }
  _impl_.midasdiamond_ = nullptr;
}
void CSNtfBody::clear_joinvoiceteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoiceteam_ != nullptr) {
    delete _impl_.joinvoiceteam_;
  }
  _impl_.joinvoiceteam_ = nullptr;
}
void CSNtfBody::clear_joinvoicepvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicepvp_ != nullptr) {
    delete _impl_.joinvoicepvp_;
  }
  _impl_.joinvoicepvp_ = nullptr;
}
void CSNtfBody::clear_joinvoicecamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicecamp_ != nullptr) {
    delete _impl_.joinvoicecamp_;
  }
  _impl_.joinvoicecamp_ = nullptr;
}
void CSNtfBody::clear_wxvvip() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxvvip_ != nullptr) {
    delete _impl_.wxvvip_;
  }
  _impl_.wxvvip_ = nullptr;
}
void CSNtfBody::clear_freeflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.freeflow_ != nullptr) {
    delete _impl_.freeflow_;
  }
  _impl_.freeflow_ = nullptr;
}
void CSNtfBody::clear_observestatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.observestatus_ != nullptr) {
    delete _impl_.observestatus_;
  }
  _impl_.observestatus_ = nullptr;
}
void CSNtfBody::clear_gamemarquee() {
  if (GetArenaForAllocation() == nullptr && _impl_.gamemarquee_ != nullptr) {
    delete _impl_.gamemarquee_;
  }
  _impl_.gamemarquee_ = nullptr;
}
void CSNtfBody::clear_wxredpacket() {
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpacket_ != nullptr) {
    delete _impl_.wxredpacket_;
  }
  _impl_.wxredpacket_ = nullptr;
}
void CSNtfBody::clear_gmsysmsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.gmsysmsg_ != nullptr) {
    delete _impl_.gmsysmsg_;
  }
  _impl_.gmsysmsg_ = nullptr;
}
void CSNtfBody::clear_newpunishment() {
  if (GetArenaForAllocation() == nullptr && _impl_.newpunishment_ != nullptr) {
    delete _impl_.newpunishment_;
  }
  _impl_.newpunishment_ = nullptr;
}
void CSNtfBody::clear_teamslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamslot_ != nullptr) {
    delete _impl_.teamslot_;
  }
  _impl_.teamslot_ = nullptr;
}
void CSNtfBody::clear_teamsubmode() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamsubmode_ != nullptr) {
    delete _impl_.teamsubmode_;
  }
  _impl_.teamsubmode_ = nullptr;
}
void CSNtfBody::clear_teamslotstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamslotstatus_ != nullptr) {
    delete _impl_.teamslotstatus_;
  }
  _impl_.teamslotstatus_ = nullptr;
}
void CSNtfBody::clear_punishmentinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.punishmentinfo_ != nullptr) {
    delete _impl_.punishmentinfo_;
  }
  _impl_.punishmentinfo_ = nullptr;
}
void CSNtfBody::clear_removepunishment() {
  if (GetArenaForAllocation() == nullptr && _impl_.removepunishment_ != nullptr) {
    delete _impl_.removepunishment_;
  }
  _impl_.removepunishment_ = nullptr;
}
void CSNtfBody::clear_pvpconfirm() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpconfirm_ != nullptr) {
    delete _impl_.pvpconfirm_;
  }
  _impl_.pvpconfirm_ = nullptr;
}
void CSNtfBody::clear_matchsuccess() {
  if (GetArenaForAllocation() == nullptr && _impl_.matchsuccess_ != nullptr) {
    delete _impl_.matchsuccess_;
  }
  _impl_.matchsuccess_ = nullptr;
}
void CSNtfBody::clear_oldbusinessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.oldbusinessplayer_ != nullptr) {
    delete _impl_.oldbusinessplayer_;
  }
  _impl_.oldbusinessplayer_ = nullptr;
}
void CSNtfBody::clear_changeteamslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.changeteamslot_ != nullptr) {
    delete _impl_.changeteamslot_;
  }
  _impl_.changeteamslot_ = nullptr;
}
void CSNtfBody::clear_refusechangeteamslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.refusechangeteamslot_ != nullptr) {
    delete _impl_.refusechangeteamslot_;
  }
  _impl_.refusechangeteamslot_ = nullptr;
}
void CSNtfBody::clear_cancelchangeslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.cancelchangeslot_ != nullptr) {
    delete _impl_.cancelchangeslot_;
  }
  _impl_.cancelchangeslot_ = nullptr;
}
void CSNtfBody::clear_showchessskin() {
  if (GetArenaForAllocation() == nullptr && _impl_.showchessskin_ != nullptr) {
    delete _impl_.showchessskin_;
  }
  _impl_.showchessskin_ = nullptr;
}
void CSNtfBody::clear_onhelpreddot() {
  if (GetArenaForAllocation() == nullptr && _impl_.onhelpreddot_ != nullptr) {
    delete _impl_.onhelpreddot_;
  }
  _impl_.onhelpreddot_ = nullptr;
}
void CSNtfBody::clear_bagupdate() {
  if (GetArenaForAllocation() == nullptr && _impl_.bagupdate_ != nullptr) {
    delete _impl_.bagupdate_;
  }
  _impl_.bagupdate_ = nullptr;
}
void CSNtfBody::clear_refreshmelee() {
  if (GetArenaForAllocation() == nullptr && _impl_.refreshmelee_ != nullptr) {
    delete _impl_.refreshmelee_;
  }
  _impl_.refreshmelee_ = nullptr;
}
void CSNtfBody::clear_weblogin() {
  if (GetArenaForAllocation() == nullptr && _impl_.weblogin_ != nullptr) {
    delete _impl_.weblogin_;
  }
  _impl_.weblogin_ = nullptr;
}
void CSNtfBody::clear_currenttournament() {
  if (GetArenaForAllocation() == nullptr && _impl_.currenttournament_ != nullptr) {
    delete _impl_.currenttournament_;
  }
  _impl_.currenttournament_ = nullptr;
}
void CSNtfBody::clear_tournamentbegin() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentbegin_ != nullptr) {
    delete _impl_.tournamentbegin_;
  }
  _impl_.tournamentbegin_ = nullptr;
}
void CSNtfBody::clear_tournamentenrollbegin() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentenrollbegin_ != nullptr) {
    delete _impl_.tournamentenrollbegin_;
  }
  _impl_.tournamentenrollbegin_ = nullptr;
}
void CSNtfBody::clear_tournamentenrollend() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentenrollend_ != nullptr) {
    delete _impl_.tournamentenrollend_;
  }
  _impl_.tournamentenrollend_ = nullptr;
}
void CSNtfBody::clear_jointournamentroom() {
  if (GetArenaForAllocation() == nullptr && _impl_.jointournamentroom_ != nullptr) {
    delete _impl_.jointournamentroom_;
  }
  _impl_.jointournamentroom_ = nullptr;
}
void CSNtfBody::clear_tournamentend() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentend_ != nullptr) {
    delete _impl_.tournamentend_;
  }
  _impl_.tournamentend_ = nullptr;
}
void CSNtfBody::clear_tournamentout() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentout_ != nullptr) {
    delete _impl_.tournamentout_;
  }
  _impl_.tournamentout_ = nullptr;
}
void CSNtfBody::clear_tournamentroundend() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentroundend_ != nullptr) {
    delete _impl_.tournamentroundend_;
  }
  _impl_.tournamentroundend_ = nullptr;
}
void CSNtfBody::clear_luckstaraward() {
  if (GetArenaForAllocation() == nullptr && _impl_.luckstaraward_ != nullptr) {
    delete _impl_.luckstaraward_;
  }
  _impl_.luckstaraward_ = nullptr;
}
void CSNtfBody::clear_inviteobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.inviteobserve_ != nullptr) {
    delete _impl_.inviteobserve_;
  }
  _impl_.inviteobserve_ = nullptr;
}
void CSNtfBody::clear_rejectobserve() {
  if (GetArenaForAllocation() == nullptr && _impl_.rejectobserve_ != nullptr) {
    delete _impl_.rejectobserve_;
  }
  _impl_.rejectobserve_ = nullptr;
}
void CSNtfBody::clear_chestcount() {
  if (GetArenaForAllocation() == nullptr && _impl_.chestcount_ != nullptr) {
    delete _impl_.chestcount_;
  }
  _impl_.chestcount_ = nullptr;
}
void CSNtfBody::clear_recruitinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.recruitinfo_ != nullptr) {
    delete _impl_.recruitinfo_;
  }
  _impl_.recruitinfo_ = nullptr;
}
void CSNtfBody::clear_recruitplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.recruitplayer_ != nullptr) {
    delete _impl_.recruitplayer_;
  }
  _impl_.recruitplayer_ = nullptr;
}
void CSNtfBody::clear_recruitplayerbattle() {
  if (GetArenaForAllocation() == nullptr && _impl_.recruitplayerbattle_ != nullptr) {
    delete _impl_.recruitplayerbattle_;
  }
  _impl_.recruitplayerbattle_ = nullptr;
}
void CSNtfBody::clear_betonbounty() {
  if (GetArenaForAllocation() == nullptr && _impl_.betonbounty_ != nullptr) {
    delete _impl_.betonbounty_;
  }
  _impl_.betonbounty_ = nullptr;
}
void CSNtfBody::clear_activitytaskunlock() {
  if (GetArenaForAllocation() == nullptr && _impl_.activitytaskunlock_ != nullptr) {
    delete _impl_.activitytaskunlock_;
  }
  _impl_.activitytaskunlock_ = nullptr;
}
void CSNtfBody::clear_psserveronly() {
  if (GetArenaForAllocation() == nullptr && _impl_.psserveronly_ != nullptr) {
    delete _impl_.psserveronly_;
  }
  _impl_.psserveronly_ = nullptr;
}
void CSNtfBody::clear_addthirdpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.addthirdpvpinfo_ != nullptr) {
    delete _impl_.addthirdpvpinfo_;
  }
  _impl_.addthirdpvpinfo_ = nullptr;
}
void CSNtfBody::clear_delthirdpvpinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.delthirdpvpinfo_ != nullptr) {
    delete _impl_.delthirdpvpinfo_;
  }
  _impl_.delthirdpvpinfo_ = nullptr;
}
void CSNtfBody::clear_ps4serveronly() {
  if (GetArenaForAllocation() == nullptr && _impl_.ps4serveronly_ != nullptr) {
    delete _impl_.ps4serveronly_;
  }
  _impl_.ps4serveronly_ = nullptr;
}
void CSNtfBody::clear_luckmallgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.luckmallgoods_ != nullptr) {
    delete _impl_.luckmallgoods_;
  }
  _impl_.luckmallgoods_ = nullptr;
}
void CSNtfBody::clear_chesslisterr() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesslisterr_ != nullptr) {
    delete _impl_.chesslisterr_;
  }
  _impl_.chesslisterr_ = nullptr;
}
void CSNtfBody::clear_chestrecord() {
  if (GetArenaForAllocation() == nullptr && _impl_.chestrecord_ != nullptr) {
    delete _impl_.chestrecord_;
  }
  _impl_.chestrecord_ = nullptr;
}
void CSNtfBody::clear_goainfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.goainfo_ != nullptr) {
    delete _impl_.goainfo_;
  }
  _impl_.goainfo_ = nullptr;
}
void CSNtfBody::clear_medalinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.medalinfo_ != nullptr) {
    delete _impl_.medalinfo_;
  }
  _impl_.medalinfo_ = nullptr;
}
void CSNtfBody::clear_medalid() {
  if (GetArenaForAllocation() == nullptr && _impl_.medalid_ != nullptr) {
    delete _impl_.medalid_;
  }
  _impl_.medalid_ = nullptr;
}
void CSNtfBody::clear_pvpreset() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpreset_ != nullptr) {
    delete _impl_.pvpreset_;
  }
  _impl_.pvpreset_ = nullptr;
}
void CSNtfBody::clear_delmail() {
  if (GetArenaForAllocation() == nullptr && _impl_.delmail_ != nullptr) {
    delete _impl_.delmail_;
  }
  _impl_.delmail_ = nullptr;
}
void CSNtfBody::clear_iteminfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
}
void CSNtfBody::clear_passportnum() {
  if (GetArenaForAllocation() == nullptr && _impl_.passportnum_ != nullptr) {
    delete _impl_.passportnum_;
  }
  _impl_.passportnum_ = nullptr;
}
void CSNtfBody::clear_passportyearcardnum() {
  if (GetArenaForAllocation() == nullptr && _impl_.passportyearcardnum_ != nullptr) {
    delete _impl_.passportyearcardnum_;
  }
  _impl_.passportyearcardnum_ = nullptr;
}
void CSNtfBody::clear_teamop() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamop_ != nullptr) {
    delete _impl_.teamop_;
  }
  _impl_.teamop_ = nullptr;
}
void CSNtfBody::clear_teamdismiss() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamdismiss_ != nullptr) {
    delete _impl_.teamdismiss_;
  }
  _impl_.teamdismiss_ = nullptr;
}
void CSNtfBody::clear_switchmodeinteam() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchmodeinteam_ != nullptr) {
    delete _impl_.switchmodeinteam_;
  }
  _impl_.switchmodeinteam_ = nullptr;
}
void CSNtfBody::clear_addbanner() {
  if (GetArenaForAllocation() == nullptr && _impl_.addbanner_ != nullptr) {
    delete _impl_.addbanner_;
  }
  _impl_.addbanner_ = nullptr;
}
void CSNtfBody::clear_removebanner() {
  if (GetArenaForAllocation() == nullptr && _impl_.removebanner_ != nullptr) {
    delete _impl_.removebanner_;
  }
  _impl_.removebanner_ = nullptr;
}
void CSNtfBody::clear_singleroundflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.singleroundflow_ != nullptr) {
    delete _impl_.singleroundflow_;
  }
  _impl_.singleroundflow_ = nullptr;
}
void CSNtfBody::clear_teamstatus() {
  if (GetArenaForAllocation() == nullptr && _impl_.teamstatus_ != nullptr) {
    delete _impl_.teamstatus_;
  }
  _impl_.teamstatus_ = nullptr;
}
void CSNtfBody::clear_tngameend() {
  if (GetArenaForAllocation() == nullptr && _impl_.tngameend_ != nullptr) {
    delete _impl_.tngameend_;
  }
  _impl_.tngameend_ = nullptr;
}
void CSNtfBody::clear_playerlackresource() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerlackresource_ != nullptr) {
    delete _impl_.playerlackresource_;
  }
  _impl_.playerlackresource_ = nullptr;
}
void CSNtfBody::clear_favmapremoved() {
  if (GetArenaForAllocation() == nullptr && _impl_.favmapremoved_ != nullptr) {
    delete _impl_.favmapremoved_;
  }
  _impl_.favmapremoved_ = nullptr;
}
void CSNtfBody::clear_workshopmatchresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.workshopmatchresult_ != nullptr) {
    delete _impl_.workshopmatchresult_;
  }
  _impl_.workshopmatchresult_ = nullptr;
}
void CSNtfBody::clear_bigwinnerexpandmatch() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerexpandmatch_ != nullptr) {
    delete _impl_.bigwinnerexpandmatch_;
  }
  _impl_.bigwinnerexpandmatch_ = nullptr;
}
void CSNtfBody::clear_verifyrealname() {
  if (GetArenaForAllocation() == nullptr && _impl_.verifyrealname_ != nullptr) {
    delete _impl_.verifyrealname_;
  }
  _impl_.verifyrealname_ = nullptr;
}
void CSNtfBody::clear_guildjoin() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildjoin_ != nullptr) {
    delete _impl_.guildjoin_;
  }
  _impl_.guildjoin_ = nullptr;
}
void CSNtfBody::clear_memberchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.memberchange_ != nullptr) {
    delete _impl_.memberchange_;
  }
  _impl_.memberchange_ = nullptr;
}
void CSNtfBody::clear_guildkickoff() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildkickoff_ != nullptr) {
    delete _impl_.guildkickoff_;
  }
  _impl_.guildkickoff_ = nullptr;
}
void CSNtfBody::clear_guildrolechange() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildrolechange_ != nullptr) {
    delete _impl_.guildrolechange_;
  }
  _impl_.guildrolechange_ = nullptr;
}
void CSNtfBody::clear_guildattrchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildattrchange_ != nullptr) {
    delete _impl_.guildattrchange_;
  }
  _impl_.guildattrchange_ = nullptr;
}
void CSNtfBody::clear_guildchat() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildchat_ != nullptr) {
    delete _impl_.guildchat_;
  }
  _impl_.guildchat_ = nullptr;
}
void CSNtfBody::clear_newguildlog() {
  if (GetArenaForAllocation() == nullptr && _impl_.newguildlog_ != nullptr) {
    delete _impl_.newguildlog_;
  }
  _impl_.newguildlog_ = nullptr;
}
void CSNtfBody::clear_applicantchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.applicantchange_ != nullptr) {
    delete _impl_.applicantchange_;
  }
  _impl_.applicantchange_ = nullptr;
}
void CSNtfBody::clear_inviteechange() {
  if (GetArenaForAllocation() == nullptr && _impl_.inviteechange_ != nullptr) {
    delete _impl_.inviteechange_;
  }
  _impl_.inviteechange_ = nullptr;
}
void CSNtfBody::clear_guildnewinvite() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildnewinvite_ != nullptr) {
    delete _impl_.guildnewinvite_;
  }
  _impl_.guildnewinvite_ = nullptr;
}
void CSNtfBody::clear_guildinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
}
void CSNtfBody::clear_vngawardreset() {
  if (GetArenaForAllocation() == nullptr && _impl_.vngawardreset_ != nullptr) {
    delete _impl_.vngawardreset_;
  }
  _impl_.vngawardreset_ = nullptr;
}
void CSNtfBody::clear_adaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.adaward_ != nullptr) {
    delete _impl_.adaward_;
  }
  _impl_.adaward_ = nullptr;
}
void CSNtfBody::clear_adcount() {
  if (GetArenaForAllocation() == nullptr && _impl_.adcount_ != nullptr) {
    delete _impl_.adcount_;
  }
  _impl_.adcount_ = nullptr;
}
void CSNtfBody::clear_uiforbid() {
  if (GetArenaForAllocation() == nullptr && _impl_.uiforbid_ != nullptr) {
    delete _impl_.uiforbid_;
  }
  _impl_.uiforbid_ = nullptr;
}
void CSNtfBody::clear_pvpupdatemessengerpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpupdatemessengerpos_ != nullptr) {
    delete _impl_.pvpupdatemessengerpos_;
  }
  _impl_.pvpupdatemessengerpos_ = nullptr;
}
void CSNtfBody::clear_pvpplayerloggedin() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpplayerloggedin_ != nullptr) {
    delete _impl_.pvpplayerloggedin_;
  }
  _impl_.pvpplayerloggedin_ = nullptr;
}
void CSNtfBody::clear_passthrough() {
  if (GetArenaForAllocation() == nullptr && _impl_.passthrough_ != nullptr) {
    delete _impl_.passthrough_;
  }
  _impl_.passthrough_ = nullptr;
}
void CSNtfBody::clear_aa() {
  if (GetArenaForAllocation() == nullptr && _impl_.aa_ != nullptr) {
    delete _impl_.aa_;
  }
  _impl_.aa_ = nullptr;
}
void CSNtfBody::clear_pvpreconnect() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpreconnect_ != nullptr) {
    delete _impl_.pvpreconnect_;
  }
  _impl_.pvpreconnect_ = nullptr;
}
void CSNtfBody::clear_updatebattleresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatebattleresult_ != nullptr) {
    delete _impl_.updatebattleresult_;
  }
  _impl_.updatebattleresult_ = nullptr;
}
void CSNtfBody::clear_visitplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.visitplayer_ != nullptr) {
    delete _impl_.visitplayer_;
  }
  _impl_.visitplayer_ = nullptr;
}
void CSNtfBody::clear_kridentityauth() {
  if (GetArenaForAllocation() == nullptr && _impl_.kridentityauth_ != nullptr) {
    delete _impl_.kridentityauth_;
  }
  _impl_.kridentityauth_ = nullptr;
}
void CSNtfBody::clear_kraddictiontip() {
  if (GetArenaForAllocation() == nullptr && _impl_.kraddictiontip_ != nullptr) {
    delete _impl_.kraddictiontip_;
  }
  _impl_.kraddictiontip_ = nullptr;
}
void CSNtfBody::clear_leavegameearly() {
  if (GetArenaForAllocation() == nullptr && _impl_.leavegameearly_ != nullptr) {
    delete _impl_.leavegameearly_;
  }
  _impl_.leavegameearly_ = nullptr;
}
void CSNtfBody::clear_kraddictioncountdown() {
  if (GetArenaForAllocation() == nullptr && _impl_.kraddictioncountdown_ != nullptr) {
    delete _impl_.kraddictioncountdown_;
  }
  _impl_.kraddictioncountdown_ = nullptr;
}
void CSNtfBody::clear_histroychatmsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.histroychatmsg_ != nullptr) {
    delete _impl_.histroychatmsg_;
  }
  _impl_.histroychatmsg_ = nullptr;
}
void CSNtfBody::clear_gmtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.gmtime_ != nullptr) {
    delete _impl_.gmtime_;
  }
  _impl_.gmtime_ = nullptr;
}
void CSNtfBody::clear_changename() {
  if (GetArenaForAllocation() == nullptr && _impl_.changename_ != nullptr) {
    delete _impl_.changename_;
  }
  _impl_.changename_ = nullptr;
}
void CSNtfBody::clear_firstpay() {
  if (GetArenaForAllocation() == nullptr && _impl_.firstpay_ != nullptr) {
    delete _impl_.firstpay_;
  }
  _impl_.firstpay_ = nullptr;
}
void CSNtfBody::clear_expchanged() {
  if (GetArenaForAllocation() == nullptr && _impl_.expchanged_ != nullptr) {
    delete _impl_.expchanged_;
  }
  _impl_.expchanged_ = nullptr;
}
void CSNtfBody::clear_taskprogress() {
  if (GetArenaForAllocation() == nullptr && _impl_.taskprogress_ != nullptr) {
    delete _impl_.taskprogress_;
  }
  _impl_.taskprogress_ = nullptr;
}
void CSNtfBody::clear_newplayerguideended() {
  if (GetArenaForAllocation() == nullptr && _impl_.newplayerguideended_ != nullptr) {
    delete _impl_.newplayerguideended_;
  }
  _impl_.newplayerguideended_ = nullptr;
}
void CSNtfBody::clear_tasksinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.tasksinfo_ != nullptr) {
    delete _impl_.tasksinfo_;
  }
  _impl_.tasksinfo_ = nullptr;
}
void CSNtfBody::clear_pvpawardsinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpawardsinfo_ != nullptr) {
    delete _impl_.pvpawardsinfo_;
  }
  _impl_.pvpawardsinfo_ = nullptr;
}
void CSNtfBody::clear_addaward() {
  if (GetArenaForAllocation() == nullptr && _impl_.addaward_ != nullptr) {
    delete _impl_.addaward_;
  }
  _impl_.addaward_ = nullptr;
}
void CSNtfBody::clear_limitrefresh() {
  if (GetArenaForAllocation() == nullptr && _impl_.limitrefresh_ != nullptr) {
    delete _impl_.limitrefresh_;
  }
  _impl_.limitrefresh_ = nullptr;
}
void CSNtfBody::clear_updatenotice() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatenotice_ != nullptr) {
    delete _impl_.updatenotice_;
  }
  _impl_.updatenotice_ = nullptr;
}
void CSNtfBody::clear_updatepvechallengecount() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatepvechallengecount_ != nullptr) {
    delete _impl_.updatepvechallengecount_;
  }
  _impl_.updatepvechallengecount_ = nullptr;
}
void CSNtfBody::clear_addiscount() {
  if (GetArenaForAllocation() == nullptr && _impl_.addiscount_ != nullptr) {
    delete _impl_.addiscount_;
  }
  _impl_.addiscount_ = nullptr;
}
void CSNtfBody::clear_calcmmr() {
  if (GetArenaForAllocation() == nullptr && _impl_.calcmmr_ != nullptr) {
    delete _impl_.calcmmr_;
  }
  _impl_.calcmmr_ = nullptr;
}
void CSNtfBody::clear_bag() {
  if (GetArenaForAllocation() == nullptr && _impl_.bag_ != nullptr) {
    delete _impl_.bag_;
  }
  _impl_.bag_ = nullptr;
}
void CSNtfBody::clear_itemattributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.itemattributes_ != nullptr) {
    delete _impl_.itemattributes_;
  }
  _impl_.itemattributes_ = nullptr;
}
void CSNtfBody::clear_pvpaffixtrigger() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpaffixtrigger_ != nullptr) {
    delete _impl_.pvpaffixtrigger_;
  }
  _impl_.pvpaffixtrigger_ = nullptr;
}
void CSNtfBody::clear_updatepvpdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.updatepvpdata_ != nullptr) {
    delete _impl_.updatepvpdata_;
  }
  _impl_.updatepvpdata_ = nullptr;
}
void CSNtfBody::clear_upgradepassport() {
  if (GetArenaForAllocation() == nullptr && _impl_.upgradepassport_ != nullptr) {
    delete _impl_.upgradepassport_;
  }
  _impl_.upgradepassport_ = nullptr;
}
void CSNtfBody::clear_updateteamdebuff() {
  if (GetArenaForAllocation() == nullptr && _impl_.updateteamdebuff_ != nullptr) {
    delete _impl_.updateteamdebuff_;
  }
  _impl_.updateteamdebuff_ = nullptr;
}
void CSNtfBody::clear_pveeval() {
  if (GetArenaForAllocation() == nullptr && _impl_.pveeval_ != nullptr) {
    delete _impl_.pveeval_;
  }
  _impl_.pveeval_ = nullptr;
}
void CSNtfBody::clear_unlockcardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.unlockcardgroup_ != nullptr) {
    delete _impl_.unlockcardgroup_;
  }
  _impl_.unlockcardgroup_ = nullptr;
}
void CSNtfBody::clear_custompveactivity() {
  if (GetArenaForAllocation() == nullptr && _impl_.custompveactivity_ != nullptr) {
    delete _impl_.custompveactivity_;
  }
  _impl_.custompveactivity_ = nullptr;
}
void CSNtfBody::clear_csntfgmban() {
  if (GetArenaForAllocation() == nullptr && _impl_.csntfgmban_ != nullptr) {
    delete _impl_.csntfgmban_;
  }
  _impl_.csntfgmban_ = nullptr;
}
void CSNtfBody::clear_tdplayerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.tdplayerinfo_ != nullptr) {
    delete _impl_.tdplayerinfo_;
  }
  _impl_.tdplayerinfo_ = nullptr;
}
void CSNtfBody::clear_mentorinvitemsg() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinvitemsg_ != nullptr) {
    delete _impl_.mentorinvitemsg_;
  }
  _impl_.mentorinvitemsg_ = nullptr;
}
void CSNtfBody::clear_becomementor() {
  if (GetArenaForAllocation() == nullptr && _impl_.becomementor_ != nullptr) {
    delete _impl_.becomementor_;
  }
  _impl_.becomementor_ = nullptr;
}
void CSNtfBody::clear_mentorrelation() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrelation_ != nullptr) {
    delete _impl_.mentorrelation_;
  }
  _impl_.mentorrelation_ = nullptr;
}
void CSNtfBody::clear_mentorshiptaskupdate() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorshiptaskupdate_ != nullptr) {
    delete _impl_.mentorshiptaskupdate_;
  }
  _impl_.mentorshiptaskupdate_ = nullptr;
}
void CSNtfBody::clear_mentorlevel() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorlevel_ != nullptr) {
    delete _impl_.mentorlevel_;
  }
  _impl_.mentorlevel_ = nullptr;
}
void CSNtfBody::clear_curdressupdate() {
  if (GetArenaForAllocation() == nullptr && _impl_.curdressupdate_ != nullptr) {
    delete _impl_.curdressupdate_;
  }
  _impl_.curdressupdate_ = nullptr;
}
void CSNtfBody::clear_changeexchangemark() {
  if (GetArenaForAllocation() == nullptr && _impl_.changeexchangemark_ != nullptr) {
    delete _impl_.changeexchangemark_;
  }
  _impl_.changeexchangemark_ = nullptr;
}
void CSNtfBody::clear_refreshpassport() {
  if (GetArenaForAllocation() == nullptr && _impl_.refreshpassport_ != nullptr) {
    delete _impl_.refreshpassport_;
  }
  _impl_.refreshpassport_ = nullptr;
}
void CSNtfBody::clear_gmremovemail() {
  if (GetArenaForAllocation() == nullptr && _impl_.gmremovemail_ != nullptr) {
    delete _impl_.gmremovemail_;
  }
  _impl_.gmremovemail_ = nullptr;
}
void CSNtfBody::clear_autouseitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.autouseitem_ != nullptr) {
    delete _impl_.autouseitem_;
  }
  _impl_.autouseitem_ = nullptr;
}
CSNtfBody::CSNtfBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfBody)
}
CSNtfBody::CSNtfBody(const CSNtfBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mails_){from._impl_.mails_}
    , decltype(_impl_.kickoff_){nullptr}
    , decltype(_impl_.ntfwait_){nullptr}
    , decltype(_impl_.passday_){nullptr}
    , decltype(_impl_.passweek_){nullptr}
    , decltype(_impl_.passmonth_){nullptr}
    , decltype(_impl_.worldchat_){nullptr}
    , decltype(_impl_.headpic_){nullptr}
    , decltype(_impl_.pvpmatch_){nullptr}
    , decltype(_impl_.pvp_){nullptr}
    , decltype(_impl_.pvpmatchcancel_){nullptr}
    , decltype(_impl_.pvpstatus_){nullptr}
    , decltype(_impl_.ntfpvpplayerready_){nullptr}
    , decltype(_impl_.pvpbegin_){nullptr}
    , decltype(_impl_.playerfinish_){nullptr}
    , decltype(_impl_.pvpend_){nullptr}
    , decltype(_impl_.marquee_){nullptr}
    , decltype(_impl_.removemarquee_){nullptr}
    , decltype(_impl_.loadingprogress_){nullptr}
    , decltype(_impl_.pvpchat_){nullptr}
    , decltype(_impl_.reload_){nullptr}
    , decltype(_impl_.pay_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.followlist_){nullptr}
    , decltype(_impl_.newfollower_){nullptr}
    , decltype(_impl_.lostfollower_){nullptr}
    , decltype(_impl_.invitejointeam_){nullptr}
    , decltype(_impl_.playerjointeam_){nullptr}
    , decltype(_impl_.playerleaveteam_){nullptr}
    , decltype(_impl_.kickoffteamplayer_){nullptr}
    , decltype(_impl_.teammsg_){nullptr}
    , decltype(_impl_.teamready_){nullptr}
    , decltype(_impl_.rejectjointeam_){nullptr}
    , decltype(_impl_.notice_){nullptr}
    , decltype(_impl_.removenotice_){nullptr}
    , decltype(_impl_.upgradebattlestage_){nullptr}
    , decltype(_impl_.passporttaskprogress_){nullptr}
    , decltype(_impl_.rankseasoneval_){nullptr}
    , decltype(_impl_.bindaccounts_){nullptr}
    , decltype(_impl_.seasontaskprogress_){nullptr}
    , decltype(_impl_.alphaactivity_){nullptr}
    , decltype(_impl_.offseasontonewseason_){nullptr}
    , decltype(_impl_.languagemd5list_){nullptr}
    , decltype(_impl_.activityprogress_){nullptr}
    , decltype(_impl_.removeactivity_){nullptr}
    , decltype(_impl_.activityconfig_){nullptr}
    , decltype(_impl_.meleetaskprogress_){nullptr}
    , decltype(_impl_.setteammode_){nullptr}
    , decltype(_impl_.passportopen_){nullptr}
    , decltype(_impl_.passportclose_){nullptr}
    , decltype(_impl_.weekindex_){nullptr}
    , decltype(_impl_.pvphistory_){nullptr}
    , decltype(_impl_.teampvpend_){nullptr}
    , decltype(_impl_.probenetdelay_){nullptr}
    , decltype(_impl_.refreshgoods_){nullptr}
    , decltype(_impl_.removeeggs_){nullptr}
    , decltype(_impl_.switchset_){nullptr}
    , decltype(_impl_.blacklist_){nullptr}
    , decltype(_impl_.bindphonenumberswitch_){nullptr}
    , decltype(_impl_.worldinvite_){nullptr}
    , decltype(_impl_.mallnotice_){nullptr}
    , decltype(_impl_.privilege_){nullptr}
    , decltype(_impl_.aaremind_){nullptr}
    , decltype(_impl_.aaban_){nullptr}
    , decltype(_impl_.aaverify_){nullptr}
    , decltype(_impl_.phonenumber_){nullptr}
    , decltype(_impl_.anticallback_){nullptr}
    , decltype(_impl_.fortunebagtime_){nullptr}
    , decltype(_impl_.updateitem_){nullptr}
    , decltype(_impl_.creditscore_){nullptr}
    , decltype(_impl_.buffact_){nullptr}
    , decltype(_impl_.activitygroup_){nullptr}
    , decltype(_impl_.clearchat_){nullptr}
    , decltype(_impl_.forbidinfo_){nullptr}
    , decltype(_impl_.midasdiamond_){nullptr}
    , decltype(_impl_.joinvoiceteam_){nullptr}
    , decltype(_impl_.joinvoicepvp_){nullptr}
    , decltype(_impl_.joinvoicecamp_){nullptr}
    , decltype(_impl_.wxvvip_){nullptr}
    , decltype(_impl_.freeflow_){nullptr}
    , decltype(_impl_.observestatus_){nullptr}
    , decltype(_impl_.gamemarquee_){nullptr}
    , decltype(_impl_.wxredpacket_){nullptr}
    , decltype(_impl_.gmsysmsg_){nullptr}
    , decltype(_impl_.newpunishment_){nullptr}
    , decltype(_impl_.teamslot_){nullptr}
    , decltype(_impl_.teamsubmode_){nullptr}
    , decltype(_impl_.teamslotstatus_){nullptr}
    , decltype(_impl_.punishmentinfo_){nullptr}
    , decltype(_impl_.removepunishment_){nullptr}
    , decltype(_impl_.pvpconfirm_){nullptr}
    , decltype(_impl_.matchsuccess_){nullptr}
    , decltype(_impl_.oldbusinessplayer_){nullptr}
    , decltype(_impl_.changeteamslot_){nullptr}
    , decltype(_impl_.refusechangeteamslot_){nullptr}
    , decltype(_impl_.cancelchangeslot_){nullptr}
    , decltype(_impl_.showchessskin_){nullptr}
    , decltype(_impl_.onhelpreddot_){nullptr}
    , decltype(_impl_.bagupdate_){nullptr}
    , decltype(_impl_.refreshmelee_){nullptr}
    , decltype(_impl_.weblogin_){nullptr}
    , decltype(_impl_.currenttournament_){nullptr}
    , decltype(_impl_.tournamentbegin_){nullptr}
    , decltype(_impl_.tournamentenrollbegin_){nullptr}
    , decltype(_impl_.tournamentenrollend_){nullptr}
    , decltype(_impl_.jointournamentroom_){nullptr}
    , decltype(_impl_.tournamentend_){nullptr}
    , decltype(_impl_.tournamentout_){nullptr}
    , decltype(_impl_.tournamentroundend_){nullptr}
    , decltype(_impl_.luckstaraward_){nullptr}
    , decltype(_impl_.inviteobserve_){nullptr}
    , decltype(_impl_.rejectobserve_){nullptr}
    , decltype(_impl_.chestcount_){nullptr}
    , decltype(_impl_.recruitinfo_){nullptr}
    , decltype(_impl_.recruitplayer_){nullptr}
    , decltype(_impl_.recruitplayerbattle_){nullptr}
    , decltype(_impl_.betonbounty_){nullptr}
    , decltype(_impl_.activitytaskunlock_){nullptr}
    , decltype(_impl_.psserveronly_){nullptr}
    , decltype(_impl_.addthirdpvpinfo_){nullptr}
    , decltype(_impl_.delthirdpvpinfo_){nullptr}
    , decltype(_impl_.ps4serveronly_){nullptr}
    , decltype(_impl_.luckmallgoods_){nullptr}
    , decltype(_impl_.chesslisterr_){nullptr}
    , decltype(_impl_.chestrecord_){nullptr}
    , decltype(_impl_.goainfo_){nullptr}
    , decltype(_impl_.medalinfo_){nullptr}
    , decltype(_impl_.medalid_){nullptr}
    , decltype(_impl_.pvpreset_){nullptr}
    , decltype(_impl_.delmail_){nullptr}
    , decltype(_impl_.iteminfo_){nullptr}
    , decltype(_impl_.passportnum_){nullptr}
    , decltype(_impl_.passportyearcardnum_){nullptr}
    , decltype(_impl_.teamop_){nullptr}
    , decltype(_impl_.teamdismiss_){nullptr}
    , decltype(_impl_.switchmodeinteam_){nullptr}
    , decltype(_impl_.addbanner_){nullptr}
    , decltype(_impl_.removebanner_){nullptr}
    , decltype(_impl_.singleroundflow_){nullptr}
    , decltype(_impl_.teamstatus_){nullptr}
    , decltype(_impl_.tngameend_){nullptr}
    , decltype(_impl_.playerlackresource_){nullptr}
    , decltype(_impl_.favmapremoved_){nullptr}
    , decltype(_impl_.workshopmatchresult_){nullptr}
    , decltype(_impl_.bigwinnerexpandmatch_){nullptr}
    , decltype(_impl_.verifyrealname_){nullptr}
    , decltype(_impl_.guildjoin_){nullptr}
    , decltype(_impl_.memberchange_){nullptr}
    , decltype(_impl_.guildkickoff_){nullptr}
    , decltype(_impl_.guildrolechange_){nullptr}
    , decltype(_impl_.guildattrchange_){nullptr}
    , decltype(_impl_.guildchat_){nullptr}
    , decltype(_impl_.newguildlog_){nullptr}
    , decltype(_impl_.applicantchange_){nullptr}
    , decltype(_impl_.inviteechange_){nullptr}
    , decltype(_impl_.guildnewinvite_){nullptr}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.vngawardreset_){nullptr}
    , decltype(_impl_.adaward_){nullptr}
    , decltype(_impl_.adcount_){nullptr}
    , decltype(_impl_.uiforbid_){nullptr}
    , decltype(_impl_.pvpupdatemessengerpos_){nullptr}
    , decltype(_impl_.pvpplayerloggedin_){nullptr}
    , decltype(_impl_.passthrough_){nullptr}
    , decltype(_impl_.aa_){nullptr}
    , decltype(_impl_.pvpreconnect_){nullptr}
    , decltype(_impl_.updatebattleresult_){nullptr}
    , decltype(_impl_.visitplayer_){nullptr}
    , decltype(_impl_.kridentityauth_){nullptr}
    , decltype(_impl_.kraddictiontip_){nullptr}
    , decltype(_impl_.leavegameearly_){nullptr}
    , decltype(_impl_.kraddictioncountdown_){nullptr}
    , decltype(_impl_.histroychatmsg_){nullptr}
    , decltype(_impl_.gmtime_){nullptr}
    , decltype(_impl_.changename_){nullptr}
    , decltype(_impl_.firstpay_){nullptr}
    , decltype(_impl_.expchanged_){nullptr}
    , decltype(_impl_.taskprogress_){nullptr}
    , decltype(_impl_.newplayerguideended_){nullptr}
    , decltype(_impl_.tasksinfo_){nullptr}
    , decltype(_impl_.pvpawardsinfo_){nullptr}
    , decltype(_impl_.addaward_){nullptr}
    , decltype(_impl_.limitrefresh_){nullptr}
    , decltype(_impl_.updatenotice_){nullptr}
    , decltype(_impl_.updatepvechallengecount_){nullptr}
    , decltype(_impl_.addiscount_){nullptr}
    , decltype(_impl_.calcmmr_){nullptr}
    , decltype(_impl_.bag_){nullptr}
    , decltype(_impl_.itemattributes_){nullptr}
    , decltype(_impl_.pvpaffixtrigger_){nullptr}
    , decltype(_impl_.updatepvpdata_){nullptr}
    , decltype(_impl_.upgradepassport_){nullptr}
    , decltype(_impl_.updateteamdebuff_){nullptr}
    , decltype(_impl_.pveeval_){nullptr}
    , decltype(_impl_.unlockcardgroup_){nullptr}
    , decltype(_impl_.custompveactivity_){nullptr}
    , decltype(_impl_.csntfgmban_){nullptr}
    , decltype(_impl_.tdplayerinfo_){nullptr}
    , decltype(_impl_.mentorinvitemsg_){nullptr}
    , decltype(_impl_.becomementor_){nullptr}
    , decltype(_impl_.mentorrelation_){nullptr}
    , decltype(_impl_.mentorshiptaskupdate_){nullptr}
    , decltype(_impl_.mentorlevel_){nullptr}
    , decltype(_impl_.curdressupdate_){nullptr}
    , decltype(_impl_.changeexchangemark_){nullptr}
    , decltype(_impl_.refreshpassport_){nullptr}
    , decltype(_impl_.gmremovemail_){nullptr}
    , decltype(_impl_.autouseitem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kickoff()) {
    _this->_impl_.kickoff_ = new ::msg::CSNtfKickOff(*from._impl_.kickoff_);
  }
  if (from._internal_has_ntfwait()) {
    _this->_impl_.ntfwait_ = new ::msg::CSNtfWait(*from._impl_.ntfwait_);
  }
  if (from._internal_has_passday()) {
    _this->_impl_.passday_ = new ::msg::CSNtfPassDayBody(*from._impl_.passday_);
  }
  if (from._internal_has_passweek()) {
    _this->_impl_.passweek_ = new ::msg::CSNtfPassWeekBody(*from._impl_.passweek_);
  }
  if (from._internal_has_passmonth()) {
    _this->_impl_.passmonth_ = new ::msg::CSNtfPassMonthBody(*from._impl_.passmonth_);
  }
  if (from._internal_has_worldchat()) {
    _this->_impl_.worldchat_ = new ::msg::CSNtfWorldChat(*from._impl_.worldchat_);
  }
  if (from._internal_has_headpic()) {
    _this->_impl_.headpic_ = new ::msg::CSNtfHeadPic(*from._impl_.headpic_);
  }
  if (from._internal_has_pvpmatch()) {
    _this->_impl_.pvpmatch_ = new ::msg::CSNtfPvpMatch(*from._impl_.pvpmatch_);
  }
  if (from._internal_has_pvp()) {
    _this->_impl_.pvp_ = new ::msg::CSNtfPvp(*from._impl_.pvp_);
  }
  if (from._internal_has_pvpmatchcancel()) {
    _this->_impl_.pvpmatchcancel_ = new ::msg::CSNtfPvpMatchCancel(*from._impl_.pvpmatchcancel_);
  }
  if (from._internal_has_pvpstatus()) {
    _this->_impl_.pvpstatus_ = new ::msg::CSNtfPvpStatus(*from._impl_.pvpstatus_);
  }
  if (from._internal_has_ntfpvpplayerready()) {
    _this->_impl_.ntfpvpplayerready_ = new ::msg::CSNtfPvpPlayerReady(*from._impl_.ntfpvpplayerready_);
  }
  if (from._internal_has_pvpbegin()) {
    _this->_impl_.pvpbegin_ = new ::msg::CSNtfPvpBegin(*from._impl_.pvpbegin_);
  }
  if (from._internal_has_playerfinish()) {
    _this->_impl_.playerfinish_ = new ::msg::CSNtfPlayerFinish(*from._impl_.playerfinish_);
  }
  if (from._internal_has_pvpend()) {
    _this->_impl_.pvpend_ = new ::msg::CSNtfPvpEnd(*from._impl_.pvpend_);
  }
  if (from._internal_has_marquee()) {
    _this->_impl_.marquee_ = new ::msg::CSNtfMarquee(*from._impl_.marquee_);
  }
  if (from._internal_has_removemarquee()) {
    _this->_impl_.removemarquee_ = new ::msg::CSNtfRemoveMarquee(*from._impl_.removemarquee_);
  }
  if (from._internal_has_loadingprogress()) {
    _this->_impl_.loadingprogress_ = new ::msg::CSNtfLoadingProgress(*from._impl_.loadingprogress_);
  }
  if (from._internal_has_pvpchat()) {
    _this->_impl_.pvpchat_ = new ::msg::CSNtfPvpChat(*from._impl_.pvpchat_);
  }
  if (from._internal_has_reload()) {
    _this->_impl_.reload_ = new ::msg::CSNtfReload(*from._impl_.reload_);
  }
  if (from._internal_has_pay()) {
    _this->_impl_.pay_ = new ::msg::CSNtfPay(*from._impl_.pay_);
  }
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::msg::CSNtfChat(*from._impl_.chat_);
  }
  if (from._internal_has_followlist()) {
    _this->_impl_.followlist_ = new ::msg::CSNtfFollowList(*from._impl_.followlist_);
  }
  if (from._internal_has_newfollower()) {
    _this->_impl_.newfollower_ = new ::msg::CSNtfNewFollower(*from._impl_.newfollower_);
  }
  if (from._internal_has_lostfollower()) {
    _this->_impl_.lostfollower_ = new ::msg::CSNtfLostFollower(*from._impl_.lostfollower_);
  }
  if (from._internal_has_invitejointeam()) {
    _this->_impl_.invitejointeam_ = new ::msg::CSNtfInviteJoinTeam(*from._impl_.invitejointeam_);
  }
  if (from._internal_has_playerjointeam()) {
    _this->_impl_.playerjointeam_ = new ::msg::CSNtfPlayerJoinTeam(*from._impl_.playerjointeam_);
  }
  if (from._internal_has_playerleaveteam()) {
    _this->_impl_.playerleaveteam_ = new ::msg::CSNtfPlayerLeaveTeam(*from._impl_.playerleaveteam_);
  }
  if (from._internal_has_kickoffteamplayer()) {
    _this->_impl_.kickoffteamplayer_ = new ::msg::CSNtfKickOffTeamPlayer(*from._impl_.kickoffteamplayer_);
  }
  if (from._internal_has_teammsg()) {
    _this->_impl_.teammsg_ = new ::msg::CSNtfTeamMsg(*from._impl_.teammsg_);
  }
  if (from._internal_has_teamready()) {
    _this->_impl_.teamready_ = new ::msg::CSNtfTeamReady(*from._impl_.teamready_);
  }
  if (from._internal_has_rejectjointeam()) {
    _this->_impl_.rejectjointeam_ = new ::msg::CSNtfRejectJoinTeam(*from._impl_.rejectjointeam_);
  }
  if (from._internal_has_notice()) {
    _this->_impl_.notice_ = new ::msg::CSNtfNotice(*from._impl_.notice_);
  }
  if (from._internal_has_removenotice()) {
    _this->_impl_.removenotice_ = new ::msg::CSNtfRemoveNotice(*from._impl_.removenotice_);
  }
  if (from._internal_has_upgradebattlestage()) {
    _this->_impl_.upgradebattlestage_ = new ::msg::CSNtfUpgradeBattleStage(*from._impl_.upgradebattlestage_);
  }
  if (from._internal_has_passporttaskprogress()) {
    _this->_impl_.passporttaskprogress_ = new ::msg::CSNtfPassportTaskProgress(*from._impl_.passporttaskprogress_);
  }
  if (from._internal_has_rankseasoneval()) {
    _this->_impl_.rankseasoneval_ = new ::msg::CSNtfRankSeasonEval(*from._impl_.rankseasoneval_);
  }
  if (from._internal_has_bindaccounts()) {
    _this->_impl_.bindaccounts_ = new ::msg::CSNtfBindAccounts(*from._impl_.bindaccounts_);
  }
  if (from._internal_has_seasontaskprogress()) {
    _this->_impl_.seasontaskprogress_ = new ::msg::CSNtfSeasonTaskProgress(*from._impl_.seasontaskprogress_);
  }
  if (from._internal_has_alphaactivity()) {
    _this->_impl_.alphaactivity_ = new ::msg::CSNtfAlphaActivity(*from._impl_.alphaactivity_);
  }
  if (from._internal_has_offseasontonewseason()) {
    _this->_impl_.offseasontonewseason_ = new ::msg::CSNtfOffSeasonToNewSeason(*from._impl_.offseasontonewseason_);
  }
  if (from._internal_has_languagemd5list()) {
    _this->_impl_.languagemd5list_ = new ::msg::CSNtfLanguageMd5List(*from._impl_.languagemd5list_);
  }
  if (from._internal_has_activityprogress()) {
    _this->_impl_.activityprogress_ = new ::msg::CSNtfActivityProgress(*from._impl_.activityprogress_);
  }
  if (from._internal_has_removeactivity()) {
    _this->_impl_.removeactivity_ = new ::msg::CSNtfRemoveActivity(*from._impl_.removeactivity_);
  }
  if (from._internal_has_activityconfig()) {
    _this->_impl_.activityconfig_ = new ::msg::CSNtfActivityConfig(*from._impl_.activityconfig_);
  }
  if (from._internal_has_meleetaskprogress()) {
    _this->_impl_.meleetaskprogress_ = new ::msg::CSNtfMeleeTaskProgress(*from._impl_.meleetaskprogress_);
  }
  if (from._internal_has_setteammode()) {
    _this->_impl_.setteammode_ = new ::msg::CSNtfSetTeamMode(*from._impl_.setteammode_);
  }
  if (from._internal_has_passportopen()) {
    _this->_impl_.passportopen_ = new ::msg::CSNtfPassportOpen(*from._impl_.passportopen_);
  }
  if (from._internal_has_passportclose()) {
    _this->_impl_.passportclose_ = new ::msg::CSNtfPassportClose(*from._impl_.passportclose_);
  }
  if (from._internal_has_weekindex()) {
    _this->_impl_.weekindex_ = new ::msg::CSNtfWeekIndex(*from._impl_.weekindex_);
  }
  if (from._internal_has_pvphistory()) {
    _this->_impl_.pvphistory_ = new ::msg::CSNtfPvpHistory(*from._impl_.pvphistory_);
  }
  if (from._internal_has_teampvpend()) {
    _this->_impl_.teampvpend_ = new ::msg::CSNtfTeamPvpEnd(*from._impl_.teampvpend_);
  }
  if (from._internal_has_probenetdelay()) {
    _this->_impl_.probenetdelay_ = new ::msg::CSNtfProbeNetDelay(*from._impl_.probenetdelay_);
  }
  if (from._internal_has_refreshgoods()) {
    _this->_impl_.refreshgoods_ = new ::msg::CSNtfRefreshGoods(*from._impl_.refreshgoods_);
  }
  if (from._internal_has_removeeggs()) {
    _this->_impl_.removeeggs_ = new ::msg::CSNtfRemoveEggs(*from._impl_.removeeggs_);
  }
  if (from._internal_has_switchset()) {
    _this->_impl_.switchset_ = new ::msg::CSNtfSwitchSet(*from._impl_.switchset_);
  }
  if (from._internal_has_blacklist()) {
    _this->_impl_.blacklist_ = new ::msg::CSNtfBlacklist(*from._impl_.blacklist_);
  }
  if (from._internal_has_bindphonenumberswitch()) {
    _this->_impl_.bindphonenumberswitch_ = new ::msg::CSNtfBindPhoneNumberSwitch(*from._impl_.bindphonenumberswitch_);
  }
  if (from._internal_has_worldinvite()) {
    _this->_impl_.worldinvite_ = new ::msg::CSNtfWorldInvite(*from._impl_.worldinvite_);
  }
  if (from._internal_has_mallnotice()) {
    _this->_impl_.mallnotice_ = new ::msg::CSNtfMallNotice(*from._impl_.mallnotice_);
  }
  if (from._internal_has_privilege()) {
    _this->_impl_.privilege_ = new ::msg::CSNtfPrivilege(*from._impl_.privilege_);
  }
  if (from._internal_has_aaremind()) {
    _this->_impl_.aaremind_ = new ::msg::CSNtfAARemind(*from._impl_.aaremind_);
  }
  if (from._internal_has_aaban()) {
    _this->_impl_.aaban_ = new ::msg::CSNtfAABan(*from._impl_.aaban_);
  }
  if (from._internal_has_aaverify()) {
    _this->_impl_.aaverify_ = new ::msg::CSNtfAAVerify(*from._impl_.aaverify_);
  }
  if (from._internal_has_phonenumber()) {
    _this->_impl_.phonenumber_ = new ::msg::CSNtfPhoneNumber(*from._impl_.phonenumber_);
  }
  if (from._internal_has_anticallback()) {
    _this->_impl_.anticallback_ = new ::msg::CSNtfAntiCallBack(*from._impl_.anticallback_);
  }
  if (from._internal_has_fortunebagtime()) {
    _this->_impl_.fortunebagtime_ = new ::msg::CSNtfFortuneBagTime(*from._impl_.fortunebagtime_);
  }
  if (from._internal_has_updateitem()) {
    _this->_impl_.updateitem_ = new ::msg::CSNtfUpdateItem(*from._impl_.updateitem_);
  }
  if (from._internal_has_creditscore()) {
    _this->_impl_.creditscore_ = new ::msg::CSNtfCreditScore(*from._impl_.creditscore_);
  }
  if (from._internal_has_buffact()) {
    _this->_impl_.buffact_ = new ::msg::CSNtfBuffAct(*from._impl_.buffact_);
  }
  if (from._internal_has_activitygroup()) {
    _this->_impl_.activitygroup_ = new ::msg::CSNtfActivityGroup(*from._impl_.activitygroup_);
  }
  if (from._internal_has_clearchat()) {
    _this->_impl_.clearchat_ = new ::msg::CSNtfClearChat(*from._impl_.clearchat_);
  }
  if (from._internal_has_forbidinfo()) {
    _this->_impl_.forbidinfo_ = new ::msg::CSNtfForbidInfo(*from._impl_.forbidinfo_);
  }
  if (from._internal_has_midasdiamond()) {
    _this->_impl_.midasdiamond_ = new ::msg::CSNtfMidasDiamond(*from._impl_.midasdiamond_);
  }
  if (from._internal_has_joinvoiceteam()) {
    _this->_impl_.joinvoiceteam_ = new ::msg::CSNtfJoinVoiceTeam(*from._impl_.joinvoiceteam_);
  }
  if (from._internal_has_joinvoicepvp()) {
    _this->_impl_.joinvoicepvp_ = new ::msg::CSNtfJoinVoicePvp(*from._impl_.joinvoicepvp_);
  }
  if (from._internal_has_joinvoicecamp()) {
    _this->_impl_.joinvoicecamp_ = new ::msg::CSNtfJoinVoiceCamp(*from._impl_.joinvoicecamp_);
  }
  if (from._internal_has_wxvvip()) {
    _this->_impl_.wxvvip_ = new ::msg::CSNtfWxVVip(*from._impl_.wxvvip_);
  }
  if (from._internal_has_freeflow()) {
    _this->_impl_.freeflow_ = new ::msg::CSNtfFreeFlow(*from._impl_.freeflow_);
  }
  if (from._internal_has_observestatus()) {
    _this->_impl_.observestatus_ = new ::msg::CSNtfObserveStatus(*from._impl_.observestatus_);
  }
  if (from._internal_has_gamemarquee()) {
    _this->_impl_.gamemarquee_ = new ::msg::CSNtfGameMarquee(*from._impl_.gamemarquee_);
  }
  if (from._internal_has_wxredpacket()) {
    _this->_impl_.wxredpacket_ = new ::msg::CSNtfWxRedPacket(*from._impl_.wxredpacket_);
  }
  if (from._internal_has_gmsysmsg()) {
    _this->_impl_.gmsysmsg_ = new ::msg::CSNtfGmSysMsg(*from._impl_.gmsysmsg_);
  }
  if (from._internal_has_newpunishment()) {
    _this->_impl_.newpunishment_ = new ::msg::CSNtfNewPunishment(*from._impl_.newpunishment_);
  }
  if (from._internal_has_teamslot()) {
    _this->_impl_.teamslot_ = new ::msg::CSNtfTeamSlot(*from._impl_.teamslot_);
  }
  if (from._internal_has_teamsubmode()) {
    _this->_impl_.teamsubmode_ = new ::msg::CSNtfTeamSubMode(*from._impl_.teamsubmode_);
  }
  if (from._internal_has_teamslotstatus()) {
    _this->_impl_.teamslotstatus_ = new ::msg::CSNtfTeamSlotStatus(*from._impl_.teamslotstatus_);
  }
  if (from._internal_has_punishmentinfo()) {
    _this->_impl_.punishmentinfo_ = new ::msg::CSNtfPunishmentInfo(*from._impl_.punishmentinfo_);
  }
  if (from._internal_has_removepunishment()) {
    _this->_impl_.removepunishment_ = new ::msg::CSNtfRemovePunishment(*from._impl_.removepunishment_);
  }
  if (from._internal_has_pvpconfirm()) {
    _this->_impl_.pvpconfirm_ = new ::msg::CSNtfPvpConfirm(*from._impl_.pvpconfirm_);
  }
  if (from._internal_has_matchsuccess()) {
    _this->_impl_.matchsuccess_ = new ::msg::CSNtfMatchSuccess(*from._impl_.matchsuccess_);
  }
  if (from._internal_has_oldbusinessplayer()) {
    _this->_impl_.oldbusinessplayer_ = new ::msg::CSNtfOldBusinessPlayer(*from._impl_.oldbusinessplayer_);
  }
  if (from._internal_has_changeteamslot()) {
    _this->_impl_.changeteamslot_ = new ::msg::CSNtfChangeTeamSlot(*from._impl_.changeteamslot_);
  }
  if (from._internal_has_refusechangeteamslot()) {
    _this->_impl_.refusechangeteamslot_ = new ::msg::CSNtfRefuseChangeTeamSlot(*from._impl_.refusechangeteamslot_);
  }
  if (from._internal_has_cancelchangeslot()) {
    _this->_impl_.cancelchangeslot_ = new ::msg::CSNtfCancelChangeSlot(*from._impl_.cancelchangeslot_);
  }
  if (from._internal_has_showchessskin()) {
    _this->_impl_.showchessskin_ = new ::msg::CSNtfShowChessSkin(*from._impl_.showchessskin_);
  }
  if (from._internal_has_onhelpreddot()) {
    _this->_impl_.onhelpreddot_ = new ::msg::CSNtfOnHelpReddot(*from._impl_.onhelpreddot_);
  }
  if (from._internal_has_bagupdate()) {
    _this->_impl_.bagupdate_ = new ::msg::CSNtfBagUpdate(*from._impl_.bagupdate_);
  }
  if (from._internal_has_refreshmelee()) {
    _this->_impl_.refreshmelee_ = new ::msg::CSNtfRefreshMelee(*from._impl_.refreshmelee_);
  }
  if (from._internal_has_weblogin()) {
    _this->_impl_.weblogin_ = new ::msg::CSNtfWebLogin(*from._impl_.weblogin_);
  }
  if (from._internal_has_currenttournament()) {
    _this->_impl_.currenttournament_ = new ::msg::CSNtfCurrentTournament(*from._impl_.currenttournament_);
  }
  if (from._internal_has_tournamentbegin()) {
    _this->_impl_.tournamentbegin_ = new ::msg::CSNtfTournamentBegin(*from._impl_.tournamentbegin_);
  }
  if (from._internal_has_tournamentenrollbegin()) {
    _this->_impl_.tournamentenrollbegin_ = new ::msg::CSNtfTournamentEnrollBegin(*from._impl_.tournamentenrollbegin_);
  }
  if (from._internal_has_tournamentenrollend()) {
    _this->_impl_.tournamentenrollend_ = new ::msg::CSNtfTournamentEnrollEnd(*from._impl_.tournamentenrollend_);
  }
  if (from._internal_has_jointournamentroom()) {
    _this->_impl_.jointournamentroom_ = new ::msg::CSNtfJoinTournamentRoom(*from._impl_.jointournamentroom_);
  }
  if (from._internal_has_tournamentend()) {
    _this->_impl_.tournamentend_ = new ::msg::CSNtfTournamentEnd(*from._impl_.tournamentend_);
  }
  if (from._internal_has_tournamentout()) {
    _this->_impl_.tournamentout_ = new ::msg::CSNtfTournamentOut(*from._impl_.tournamentout_);
  }
  if (from._internal_has_tournamentroundend()) {
    _this->_impl_.tournamentroundend_ = new ::msg::CSNtfTournamentRoundEnd(*from._impl_.tournamentroundend_);
  }
  if (from._internal_has_luckstaraward()) {
    _this->_impl_.luckstaraward_ = new ::msg::CSNtfLuckStarAward(*from._impl_.luckstaraward_);
  }
  if (from._internal_has_inviteobserve()) {
    _this->_impl_.inviteobserve_ = new ::msg::CSNtfInviteObserve(*from._impl_.inviteobserve_);
  }
  if (from._internal_has_rejectobserve()) {
    _this->_impl_.rejectobserve_ = new ::msg::CSNtfRejectObserve(*from._impl_.rejectobserve_);
  }
  if (from._internal_has_chestcount()) {
    _this->_impl_.chestcount_ = new ::msg::CSNtfChestCount(*from._impl_.chestcount_);
  }
  if (from._internal_has_recruitinfo()) {
    _this->_impl_.recruitinfo_ = new ::msg::CSNtfRecruitInfo(*from._impl_.recruitinfo_);
  }
  if (from._internal_has_recruitplayer()) {
    _this->_impl_.recruitplayer_ = new ::msg::CSNtfRecruitPlayer(*from._impl_.recruitplayer_);
  }
  if (from._internal_has_recruitplayerbattle()) {
    _this->_impl_.recruitplayerbattle_ = new ::msg::CSNtfRecruitPlayerBattle(*from._impl_.recruitplayerbattle_);
  }
  if (from._internal_has_betonbounty()) {
    _this->_impl_.betonbounty_ = new ::msg::CSNtfBetOnBounty(*from._impl_.betonbounty_);
  }
  if (from._internal_has_activitytaskunlock()) {
    _this->_impl_.activitytaskunlock_ = new ::msg::CSNtfActivityTaskUnlock(*from._impl_.activitytaskunlock_);
  }
  if (from._internal_has_psserveronly()) {
    _this->_impl_.psserveronly_ = new ::msg::CSNtfPsServerOnly(*from._impl_.psserveronly_);
  }
  if (from._internal_has_addthirdpvpinfo()) {
    _this->_impl_.addthirdpvpinfo_ = new ::msg::CSNtfAddThirdPvpInfo(*from._impl_.addthirdpvpinfo_);
  }
  if (from._internal_has_delthirdpvpinfo()) {
    _this->_impl_.delthirdpvpinfo_ = new ::msg::CSNtfDelThirdPvpInfo(*from._impl_.delthirdpvpinfo_);
  }
  if (from._internal_has_ps4serveronly()) {
    _this->_impl_.ps4serveronly_ = new ::msg::CSNtfPs4ServerOnly(*from._impl_.ps4serveronly_);
  }
  if (from._internal_has_luckmallgoods()) {
    _this->_impl_.luckmallgoods_ = new ::msg::CSNtfLuckMallGoods(*from._impl_.luckmallgoods_);
  }
  if (from._internal_has_chesslisterr()) {
    _this->_impl_.chesslisterr_ = new ::msg::CSNtfChessListErr(*from._impl_.chesslisterr_);
  }
  if (from._internal_has_chestrecord()) {
    _this->_impl_.chestrecord_ = new ::msg::CSNtfChestRecord(*from._impl_.chestrecord_);
  }
  if (from._internal_has_goainfo()) {
    _this->_impl_.goainfo_ = new ::msg::CSNtfGOAInfo(*from._impl_.goainfo_);
  }
  if (from._internal_has_medalinfo()) {
    _this->_impl_.medalinfo_ = new ::msg::CSNtfMedalInfos(*from._impl_.medalinfo_);
  }
  if (from._internal_has_medalid()) {
    _this->_impl_.medalid_ = new ::msg::CSNtfMedalId(*from._impl_.medalid_);
  }
  if (from._internal_has_pvpreset()) {
    _this->_impl_.pvpreset_ = new ::msg::CSNtfPvpReset(*from._impl_.pvpreset_);
  }
  if (from._internal_has_delmail()) {
    _this->_impl_.delmail_ = new ::msg::CSNtfDelMail(*from._impl_.delmail_);
  }
  if (from._internal_has_iteminfo()) {
    _this->_impl_.iteminfo_ = new ::msg::CSNtfItemInfo(*from._impl_.iteminfo_);
  }
  if (from._internal_has_passportnum()) {
    _this->_impl_.passportnum_ = new ::msg::CSNtfPassportNum(*from._impl_.passportnum_);
  }
  if (from._internal_has_passportyearcardnum()) {
    _this->_impl_.passportyearcardnum_ = new ::msg::CSNtfPassportYearCardNum(*from._impl_.passportyearcardnum_);
  }
  if (from._internal_has_teamop()) {
    _this->_impl_.teamop_ = new ::msg::CSNtfTeamOP(*from._impl_.teamop_);
  }
  if (from._internal_has_teamdismiss()) {
    _this->_impl_.teamdismiss_ = new ::msg::CSNtfTeamDismiss(*from._impl_.teamdismiss_);
  }
  if (from._internal_has_switchmodeinteam()) {
    _this->_impl_.switchmodeinteam_ = new ::msg::CSNtfSwitchModeInTeam(*from._impl_.switchmodeinteam_);
  }
  if (from._internal_has_addbanner()) {
    _this->_impl_.addbanner_ = new ::msg::CSNtfAddBanner(*from._impl_.addbanner_);
  }
  if (from._internal_has_removebanner()) {
    _this->_impl_.removebanner_ = new ::msg::CSNtfRemoveBanner(*from._impl_.removebanner_);
  }
  if (from._internal_has_singleroundflow()) {
    _this->_impl_.singleroundflow_ = new ::msg::CSNtfSingleRoundFlow(*from._impl_.singleroundflow_);
  }
  if (from._internal_has_teamstatus()) {
    _this->_impl_.teamstatus_ = new ::msg::CSNtfTeamStatus(*from._impl_.teamstatus_);
  }
  if (from._internal_has_tngameend()) {
    _this->_impl_.tngameend_ = new ::msg::CSNtfTNGameEnd(*from._impl_.tngameend_);
  }
  if (from._internal_has_playerlackresource()) {
    _this->_impl_.playerlackresource_ = new ::msg::CSNtfPlayerLackResourceInTeam(*from._impl_.playerlackresource_);
  }
  if (from._internal_has_favmapremoved()) {
    _this->_impl_.favmapremoved_ = new ::msg::CSNtfFavMapRemoved(*from._impl_.favmapremoved_);
  }
  if (from._internal_has_workshopmatchresult()) {
    _this->_impl_.workshopmatchresult_ = new ::msg::CSNtfWorkshopMatchResult(*from._impl_.workshopmatchresult_);
  }
  if (from._internal_has_bigwinnerexpandmatch()) {
    _this->_impl_.bigwinnerexpandmatch_ = new ::msg::CSNtfBigWinnerExpandMatch(*from._impl_.bigwinnerexpandmatch_);
  }
  if (from._internal_has_verifyrealname()) {
    _this->_impl_.verifyrealname_ = new ::msg::CSNtfVerifyRealName(*from._impl_.verifyrealname_);
  }
  if (from._internal_has_guildjoin()) {
    _this->_impl_.guildjoin_ = new ::msg::CSNtfGuildJoin(*from._impl_.guildjoin_);
  }
  if (from._internal_has_memberchange()) {
    _this->_impl_.memberchange_ = new ::msg::CSNtfGuildMemberChange(*from._impl_.memberchange_);
  }
  if (from._internal_has_guildkickoff()) {
    _this->_impl_.guildkickoff_ = new ::msg::CSNtfGuildKickoff(*from._impl_.guildkickoff_);
  }
  if (from._internal_has_guildrolechange()) {
    _this->_impl_.guildrolechange_ = new ::msg::CSNtfGuildRoleChange(*from._impl_.guildrolechange_);
  }
  if (from._internal_has_guildattrchange()) {
    _this->_impl_.guildattrchange_ = new ::msg::CSNtfGuildAttrChange(*from._impl_.guildattrchange_);
  }
  if (from._internal_has_guildchat()) {
    _this->_impl_.guildchat_ = new ::msg::CSNtfGuildChat(*from._impl_.guildchat_);
  }
  if (from._internal_has_newguildlog()) {
    _this->_impl_.newguildlog_ = new ::msg::CSNtfNewGuildLog(*from._impl_.newguildlog_);
  }
  if (from._internal_has_applicantchange()) {
    _this->_impl_.applicantchange_ = new ::msg::CSNtfGuildApplicantChange(*from._impl_.applicantchange_);
  }
  if (from._internal_has_inviteechange()) {
    _this->_impl_.inviteechange_ = new ::msg::CSNtfGuildInviteeChange(*from._impl_.inviteechange_);
  }
  if (from._internal_has_guildnewinvite()) {
    _this->_impl_.guildnewinvite_ = new ::msg::CSNtfGuildNewInvite(*from._impl_.guildnewinvite_);
  }
  if (from._internal_has_guildinfo()) {
    _this->_impl_.guildinfo_ = new ::msg::CSNtfGuildInfo(*from._impl_.guildinfo_);
  }
  if (from._internal_has_vngawardreset()) {
    _this->_impl_.vngawardreset_ = new ::msg::CSNtfVngCommentAwardReset(*from._impl_.vngawardreset_);
  }
  if (from._internal_has_adaward()) {
    _this->_impl_.adaward_ = new ::msg::CSNtfAdAward(*from._impl_.adaward_);
  }
  if (from._internal_has_adcount()) {
    _this->_impl_.adcount_ = new ::msg::CSNtfAdCount(*from._impl_.adcount_);
  }
  if (from._internal_has_uiforbid()) {
    _this->_impl_.uiforbid_ = new ::msg::CSNtfUIForbid(*from._impl_.uiforbid_);
  }
  if (from._internal_has_pvpupdatemessengerpos()) {
    _this->_impl_.pvpupdatemessengerpos_ = new ::msg::CSNtfPvpUpdateMessengerPos(*from._impl_.pvpupdatemessengerpos_);
  }
  if (from._internal_has_pvpplayerloggedin()) {
    _this->_impl_.pvpplayerloggedin_ = new ::msg::CSNtfPvpPlayerLoggedIn(*from._impl_.pvpplayerloggedin_);
  }
  if (from._internal_has_passthrough()) {
    _this->_impl_.passthrough_ = new ::msg::CSNtfPassThrough(*from._impl_.passthrough_);
  }
  if (from._internal_has_aa()) {
    _this->_impl_.aa_ = new ::msg::CSNtfAA(*from._impl_.aa_);
  }
  if (from._internal_has_pvpreconnect()) {
    _this->_impl_.pvpreconnect_ = new ::msg::CSNtfPvpReconnect(*from._impl_.pvpreconnect_);
  }
  if (from._internal_has_updatebattleresult()) {
    _this->_impl_.updatebattleresult_ = new ::msg::CSNtfUpdateBattleResult(*from._impl_.updatebattleresult_);
  }
  if (from._internal_has_visitplayer()) {
    _this->_impl_.visitplayer_ = new ::msg::CSNtfVisitPlayer(*from._impl_.visitplayer_);
  }
  if (from._internal_has_kridentityauth()) {
    _this->_impl_.kridentityauth_ = new ::msg::CSNtfKrIdentityAuth(*from._impl_.kridentityauth_);
  }
  if (from._internal_has_kraddictiontip()) {
    _this->_impl_.kraddictiontip_ = new ::msg::CSNtfKrAddictionTip(*from._impl_.kraddictiontip_);
  }
  if (from._internal_has_leavegameearly()) {
    _this->_impl_.leavegameearly_ = new ::msg::CSNtfLeaveGameEarly(*from._impl_.leavegameearly_);
  }
  if (from._internal_has_kraddictioncountdown()) {
    _this->_impl_.kraddictioncountdown_ = new ::msg::CSNtfKrAddictionCountdown(*from._impl_.kraddictioncountdown_);
  }
  if (from._internal_has_histroychatmsg()) {
    _this->_impl_.histroychatmsg_ = new ::msg::CSNtfHistoryChatMsg(*from._impl_.histroychatmsg_);
  }
  if (from._internal_has_gmtime()) {
    _this->_impl_.gmtime_ = new ::msg::CSNtfSystemGmTime(*from._impl_.gmtime_);
  }
  if (from._internal_has_changename()) {
    _this->_impl_.changename_ = new ::msg::CSNtfChangeName(*from._impl_.changename_);
  }
  if (from._internal_has_firstpay()) {
    _this->_impl_.firstpay_ = new ::msg::CSNtfFirstPay(*from._impl_.firstpay_);
  }
  if (from._internal_has_expchanged()) {
    _this->_impl_.expchanged_ = new ::msg::CSNtfPlayerExpChanged(*from._impl_.expchanged_);
  }
  if (from._internal_has_taskprogress()) {
    _this->_impl_.taskprogress_ = new ::msg::CSNtfTaskProgress(*from._impl_.taskprogress_);
  }
  if (from._internal_has_newplayerguideended()) {
    _this->_impl_.newplayerguideended_ = new ::msg::CSNtfNewPlayerGuideEnded(*from._impl_.newplayerguideended_);
  }
  if (from._internal_has_tasksinfo()) {
    _this->_impl_.tasksinfo_ = new ::msg::CSNtfTasksInfo(*from._impl_.tasksinfo_);
  }
  if (from._internal_has_pvpawardsinfo()) {
    _this->_impl_.pvpawardsinfo_ = new ::msg::CSNtfPvpAwardsInfo(*from._impl_.pvpawardsinfo_);
  }
  if (from._internal_has_addaward()) {
    _this->_impl_.addaward_ = new ::msg::CSNtfAddAward(*from._impl_.addaward_);
  }
  if (from._internal_has_limitrefresh()) {
    _this->_impl_.limitrefresh_ = new ::msg::CSNtfLimitRefresh(*from._impl_.limitrefresh_);
  }
  if (from._internal_has_updatenotice()) {
    _this->_impl_.updatenotice_ = new ::msg::CSNtfUpdateNotice(*from._impl_.updatenotice_);
  }
  if (from._internal_has_updatepvechallengecount()) {
    _this->_impl_.updatepvechallengecount_ = new ::msg::CSNtfUpdatePveChallengeCount(*from._impl_.updatepvechallengecount_);
  }
  if (from._internal_has_addiscount()) {
    _this->_impl_.addiscount_ = new ::msg::CSNtfAdDiscount(*from._impl_.addiscount_);
  }
  if (from._internal_has_calcmmr()) {
    _this->_impl_.calcmmr_ = new ::msg::CSNtfCalcMmr(*from._impl_.calcmmr_);
  }
  if (from._internal_has_bag()) {
    _this->_impl_.bag_ = new ::msg::CSNtfBag(*from._impl_.bag_);
  }
  if (from._internal_has_itemattributes()) {
    _this->_impl_.itemattributes_ = new ::msg::CSNtfItemAttributes(*from._impl_.itemattributes_);
  }
  if (from._internal_has_pvpaffixtrigger()) {
    _this->_impl_.pvpaffixtrigger_ = new ::msg::CSNtfPvpAffixTrigger(*from._impl_.pvpaffixtrigger_);
  }
  if (from._internal_has_updatepvpdata()) {
    _this->_impl_.updatepvpdata_ = new ::msg::CSNtfUpdatePvpData(*from._impl_.updatepvpdata_);
  }
  if (from._internal_has_upgradepassport()) {
    _this->_impl_.upgradepassport_ = new ::msg::CSNtfUpgradePassport(*from._impl_.upgradepassport_);
  }
  if (from._internal_has_updateteamdebuff()) {
    _this->_impl_.updateteamdebuff_ = new ::msg::CSNtfUpdateTeamDeBuff(*from._impl_.updateteamdebuff_);
  }
  if (from._internal_has_pveeval()) {
    _this->_impl_.pveeval_ = new ::msg::CSNtfPveEval(*from._impl_.pveeval_);
  }
  if (from._internal_has_unlockcardgroup()) {
    _this->_impl_.unlockcardgroup_ = new ::msg::CSNtfUnlockCardGroup(*from._impl_.unlockcardgroup_);
  }
  if (from._internal_has_custompveactivity()) {
    _this->_impl_.custompveactivity_ = new ::msg::CSNtfCustomPveActivity(*from._impl_.custompveactivity_);
  }
  if (from._internal_has_csntfgmban()) {
    _this->_impl_.csntfgmban_ = new ::msg::CSNtfGmBan(*from._impl_.csntfgmban_);
  }
  if (from._internal_has_tdplayerinfo()) {
    _this->_impl_.tdplayerinfo_ = new ::msg::CSNtfTDPlayerInfo(*from._impl_.tdplayerinfo_);
  }
  if (from._internal_has_mentorinvitemsg()) {
    _this->_impl_.mentorinvitemsg_ = new ::msg::CSNtfMentorInviteMsg(*from._impl_.mentorinvitemsg_);
  }
  if (from._internal_has_becomementor()) {
    _this->_impl_.becomementor_ = new ::msg::CSNtfBecomeMentor(*from._impl_.becomementor_);
  }
  if (from._internal_has_mentorrelation()) {
    _this->_impl_.mentorrelation_ = new ::msg::CSNtfMentorRelation(*from._impl_.mentorrelation_);
  }
  if (from._internal_has_mentorshiptaskupdate()) {
    _this->_impl_.mentorshiptaskupdate_ = new ::msg::CSNtfPupilTaskUpdate(*from._impl_.mentorshiptaskupdate_);
  }
  if (from._internal_has_mentorlevel()) {
    _this->_impl_.mentorlevel_ = new ::msg::CSNtfMentorLevel(*from._impl_.mentorlevel_);
  }
  if (from._internal_has_curdressupdate()) {
    _this->_impl_.curdressupdate_ = new ::msg::CSNtfCurDressUpdate(*from._impl_.curdressupdate_);
  }
  if (from._internal_has_changeexchangemark()) {
    _this->_impl_.changeexchangemark_ = new ::msg::CSNtfChangeExchangeMark(*from._impl_.changeexchangemark_);
  }
  if (from._internal_has_refreshpassport()) {
    _this->_impl_.refreshpassport_ = new ::msg::CSNtfRefreshPassport(*from._impl_.refreshpassport_);
  }
  if (from._internal_has_gmremovemail()) {
    _this->_impl_.gmremovemail_ = new ::msg::CSNtfGmRemoveMail(*from._impl_.gmremovemail_);
  }
  if (from._internal_has_autouseitem()) {
    _this->_impl_.autouseitem_ = new ::msg::CSNtfAutoUseItem(*from._impl_.autouseitem_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfBody)
}

inline void CSNtfBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mails_){arena}
    , decltype(_impl_.kickoff_){nullptr}
    , decltype(_impl_.ntfwait_){nullptr}
    , decltype(_impl_.passday_){nullptr}
    , decltype(_impl_.passweek_){nullptr}
    , decltype(_impl_.passmonth_){nullptr}
    , decltype(_impl_.worldchat_){nullptr}
    , decltype(_impl_.headpic_){nullptr}
    , decltype(_impl_.pvpmatch_){nullptr}
    , decltype(_impl_.pvp_){nullptr}
    , decltype(_impl_.pvpmatchcancel_){nullptr}
    , decltype(_impl_.pvpstatus_){nullptr}
    , decltype(_impl_.ntfpvpplayerready_){nullptr}
    , decltype(_impl_.pvpbegin_){nullptr}
    , decltype(_impl_.playerfinish_){nullptr}
    , decltype(_impl_.pvpend_){nullptr}
    , decltype(_impl_.marquee_){nullptr}
    , decltype(_impl_.removemarquee_){nullptr}
    , decltype(_impl_.loadingprogress_){nullptr}
    , decltype(_impl_.pvpchat_){nullptr}
    , decltype(_impl_.reload_){nullptr}
    , decltype(_impl_.pay_){nullptr}
    , decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.followlist_){nullptr}
    , decltype(_impl_.newfollower_){nullptr}
    , decltype(_impl_.lostfollower_){nullptr}
    , decltype(_impl_.invitejointeam_){nullptr}
    , decltype(_impl_.playerjointeam_){nullptr}
    , decltype(_impl_.playerleaveteam_){nullptr}
    , decltype(_impl_.kickoffteamplayer_){nullptr}
    , decltype(_impl_.teammsg_){nullptr}
    , decltype(_impl_.teamready_){nullptr}
    , decltype(_impl_.rejectjointeam_){nullptr}
    , decltype(_impl_.notice_){nullptr}
    , decltype(_impl_.removenotice_){nullptr}
    , decltype(_impl_.upgradebattlestage_){nullptr}
    , decltype(_impl_.passporttaskprogress_){nullptr}
    , decltype(_impl_.rankseasoneval_){nullptr}
    , decltype(_impl_.bindaccounts_){nullptr}
    , decltype(_impl_.seasontaskprogress_){nullptr}
    , decltype(_impl_.alphaactivity_){nullptr}
    , decltype(_impl_.offseasontonewseason_){nullptr}
    , decltype(_impl_.languagemd5list_){nullptr}
    , decltype(_impl_.activityprogress_){nullptr}
    , decltype(_impl_.removeactivity_){nullptr}
    , decltype(_impl_.activityconfig_){nullptr}
    , decltype(_impl_.meleetaskprogress_){nullptr}
    , decltype(_impl_.setteammode_){nullptr}
    , decltype(_impl_.passportopen_){nullptr}
    , decltype(_impl_.passportclose_){nullptr}
    , decltype(_impl_.weekindex_){nullptr}
    , decltype(_impl_.pvphistory_){nullptr}
    , decltype(_impl_.teampvpend_){nullptr}
    , decltype(_impl_.probenetdelay_){nullptr}
    , decltype(_impl_.refreshgoods_){nullptr}
    , decltype(_impl_.removeeggs_){nullptr}
    , decltype(_impl_.switchset_){nullptr}
    , decltype(_impl_.blacklist_){nullptr}
    , decltype(_impl_.bindphonenumberswitch_){nullptr}
    , decltype(_impl_.worldinvite_){nullptr}
    , decltype(_impl_.mallnotice_){nullptr}
    , decltype(_impl_.privilege_){nullptr}
    , decltype(_impl_.aaremind_){nullptr}
    , decltype(_impl_.aaban_){nullptr}
    , decltype(_impl_.aaverify_){nullptr}
    , decltype(_impl_.phonenumber_){nullptr}
    , decltype(_impl_.anticallback_){nullptr}
    , decltype(_impl_.fortunebagtime_){nullptr}
    , decltype(_impl_.updateitem_){nullptr}
    , decltype(_impl_.creditscore_){nullptr}
    , decltype(_impl_.buffact_){nullptr}
    , decltype(_impl_.activitygroup_){nullptr}
    , decltype(_impl_.clearchat_){nullptr}
    , decltype(_impl_.forbidinfo_){nullptr}
    , decltype(_impl_.midasdiamond_){nullptr}
    , decltype(_impl_.joinvoiceteam_){nullptr}
    , decltype(_impl_.joinvoicepvp_){nullptr}
    , decltype(_impl_.joinvoicecamp_){nullptr}
    , decltype(_impl_.wxvvip_){nullptr}
    , decltype(_impl_.freeflow_){nullptr}
    , decltype(_impl_.observestatus_){nullptr}
    , decltype(_impl_.gamemarquee_){nullptr}
    , decltype(_impl_.wxredpacket_){nullptr}
    , decltype(_impl_.gmsysmsg_){nullptr}
    , decltype(_impl_.newpunishment_){nullptr}
    , decltype(_impl_.teamslot_){nullptr}
    , decltype(_impl_.teamsubmode_){nullptr}
    , decltype(_impl_.teamslotstatus_){nullptr}
    , decltype(_impl_.punishmentinfo_){nullptr}
    , decltype(_impl_.removepunishment_){nullptr}
    , decltype(_impl_.pvpconfirm_){nullptr}
    , decltype(_impl_.matchsuccess_){nullptr}
    , decltype(_impl_.oldbusinessplayer_){nullptr}
    , decltype(_impl_.changeteamslot_){nullptr}
    , decltype(_impl_.refusechangeteamslot_){nullptr}
    , decltype(_impl_.cancelchangeslot_){nullptr}
    , decltype(_impl_.showchessskin_){nullptr}
    , decltype(_impl_.onhelpreddot_){nullptr}
    , decltype(_impl_.bagupdate_){nullptr}
    , decltype(_impl_.refreshmelee_){nullptr}
    , decltype(_impl_.weblogin_){nullptr}
    , decltype(_impl_.currenttournament_){nullptr}
    , decltype(_impl_.tournamentbegin_){nullptr}
    , decltype(_impl_.tournamentenrollbegin_){nullptr}
    , decltype(_impl_.tournamentenrollend_){nullptr}
    , decltype(_impl_.jointournamentroom_){nullptr}
    , decltype(_impl_.tournamentend_){nullptr}
    , decltype(_impl_.tournamentout_){nullptr}
    , decltype(_impl_.tournamentroundend_){nullptr}
    , decltype(_impl_.luckstaraward_){nullptr}
    , decltype(_impl_.inviteobserve_){nullptr}
    , decltype(_impl_.rejectobserve_){nullptr}
    , decltype(_impl_.chestcount_){nullptr}
    , decltype(_impl_.recruitinfo_){nullptr}
    , decltype(_impl_.recruitplayer_){nullptr}
    , decltype(_impl_.recruitplayerbattle_){nullptr}
    , decltype(_impl_.betonbounty_){nullptr}
    , decltype(_impl_.activitytaskunlock_){nullptr}
    , decltype(_impl_.psserveronly_){nullptr}
    , decltype(_impl_.addthirdpvpinfo_){nullptr}
    , decltype(_impl_.delthirdpvpinfo_){nullptr}
    , decltype(_impl_.ps4serveronly_){nullptr}
    , decltype(_impl_.luckmallgoods_){nullptr}
    , decltype(_impl_.chesslisterr_){nullptr}
    , decltype(_impl_.chestrecord_){nullptr}
    , decltype(_impl_.goainfo_){nullptr}
    , decltype(_impl_.medalinfo_){nullptr}
    , decltype(_impl_.medalid_){nullptr}
    , decltype(_impl_.pvpreset_){nullptr}
    , decltype(_impl_.delmail_){nullptr}
    , decltype(_impl_.iteminfo_){nullptr}
    , decltype(_impl_.passportnum_){nullptr}
    , decltype(_impl_.passportyearcardnum_){nullptr}
    , decltype(_impl_.teamop_){nullptr}
    , decltype(_impl_.teamdismiss_){nullptr}
    , decltype(_impl_.switchmodeinteam_){nullptr}
    , decltype(_impl_.addbanner_){nullptr}
    , decltype(_impl_.removebanner_){nullptr}
    , decltype(_impl_.singleroundflow_){nullptr}
    , decltype(_impl_.teamstatus_){nullptr}
    , decltype(_impl_.tngameend_){nullptr}
    , decltype(_impl_.playerlackresource_){nullptr}
    , decltype(_impl_.favmapremoved_){nullptr}
    , decltype(_impl_.workshopmatchresult_){nullptr}
    , decltype(_impl_.bigwinnerexpandmatch_){nullptr}
    , decltype(_impl_.verifyrealname_){nullptr}
    , decltype(_impl_.guildjoin_){nullptr}
    , decltype(_impl_.memberchange_){nullptr}
    , decltype(_impl_.guildkickoff_){nullptr}
    , decltype(_impl_.guildrolechange_){nullptr}
    , decltype(_impl_.guildattrchange_){nullptr}
    , decltype(_impl_.guildchat_){nullptr}
    , decltype(_impl_.newguildlog_){nullptr}
    , decltype(_impl_.applicantchange_){nullptr}
    , decltype(_impl_.inviteechange_){nullptr}
    , decltype(_impl_.guildnewinvite_){nullptr}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.vngawardreset_){nullptr}
    , decltype(_impl_.adaward_){nullptr}
    , decltype(_impl_.adcount_){nullptr}
    , decltype(_impl_.uiforbid_){nullptr}
    , decltype(_impl_.pvpupdatemessengerpos_){nullptr}
    , decltype(_impl_.pvpplayerloggedin_){nullptr}
    , decltype(_impl_.passthrough_){nullptr}
    , decltype(_impl_.aa_){nullptr}
    , decltype(_impl_.pvpreconnect_){nullptr}
    , decltype(_impl_.updatebattleresult_){nullptr}
    , decltype(_impl_.visitplayer_){nullptr}
    , decltype(_impl_.kridentityauth_){nullptr}
    , decltype(_impl_.kraddictiontip_){nullptr}
    , decltype(_impl_.leavegameearly_){nullptr}
    , decltype(_impl_.kraddictioncountdown_){nullptr}
    , decltype(_impl_.histroychatmsg_){nullptr}
    , decltype(_impl_.gmtime_){nullptr}
    , decltype(_impl_.changename_){nullptr}
    , decltype(_impl_.firstpay_){nullptr}
    , decltype(_impl_.expchanged_){nullptr}
    , decltype(_impl_.taskprogress_){nullptr}
    , decltype(_impl_.newplayerguideended_){nullptr}
    , decltype(_impl_.tasksinfo_){nullptr}
    , decltype(_impl_.pvpawardsinfo_){nullptr}
    , decltype(_impl_.addaward_){nullptr}
    , decltype(_impl_.limitrefresh_){nullptr}
    , decltype(_impl_.updatenotice_){nullptr}
    , decltype(_impl_.updatepvechallengecount_){nullptr}
    , decltype(_impl_.addiscount_){nullptr}
    , decltype(_impl_.calcmmr_){nullptr}
    , decltype(_impl_.bag_){nullptr}
    , decltype(_impl_.itemattributes_){nullptr}
    , decltype(_impl_.pvpaffixtrigger_){nullptr}
    , decltype(_impl_.updatepvpdata_){nullptr}
    , decltype(_impl_.upgradepassport_){nullptr}
    , decltype(_impl_.updateteamdebuff_){nullptr}
    , decltype(_impl_.pveeval_){nullptr}
    , decltype(_impl_.unlockcardgroup_){nullptr}
    , decltype(_impl_.custompveactivity_){nullptr}
    , decltype(_impl_.csntfgmban_){nullptr}
    , decltype(_impl_.tdplayerinfo_){nullptr}
    , decltype(_impl_.mentorinvitemsg_){nullptr}
    , decltype(_impl_.becomementor_){nullptr}
    , decltype(_impl_.mentorrelation_){nullptr}
    , decltype(_impl_.mentorshiptaskupdate_){nullptr}
    , decltype(_impl_.mentorlevel_){nullptr}
    , decltype(_impl_.curdressupdate_){nullptr}
    , decltype(_impl_.changeexchangemark_){nullptr}
    , decltype(_impl_.refreshpassport_){nullptr}
    , decltype(_impl_.gmremovemail_){nullptr}
    , decltype(_impl_.autouseitem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfBody::~CSNtfBody() {
  // @@protoc_insertion_point(destructor:msg.CSNtfBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mails_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.kickoff_;
  if (this != internal_default_instance()) delete _impl_.ntfwait_;
  if (this != internal_default_instance()) delete _impl_.passday_;
  if (this != internal_default_instance()) delete _impl_.passweek_;
  if (this != internal_default_instance()) delete _impl_.passmonth_;
  if (this != internal_default_instance()) delete _impl_.worldchat_;
  if (this != internal_default_instance()) delete _impl_.headpic_;
  if (this != internal_default_instance()) delete _impl_.pvpmatch_;
  if (this != internal_default_instance()) delete _impl_.pvp_;
  if (this != internal_default_instance()) delete _impl_.pvpmatchcancel_;
  if (this != internal_default_instance()) delete _impl_.pvpstatus_;
  if (this != internal_default_instance()) delete _impl_.ntfpvpplayerready_;
  if (this != internal_default_instance()) delete _impl_.pvpbegin_;
  if (this != internal_default_instance()) delete _impl_.playerfinish_;
  if (this != internal_default_instance()) delete _impl_.pvpend_;
  if (this != internal_default_instance()) delete _impl_.marquee_;
  if (this != internal_default_instance()) delete _impl_.removemarquee_;
  if (this != internal_default_instance()) delete _impl_.loadingprogress_;
  if (this != internal_default_instance()) delete _impl_.pvpchat_;
  if (this != internal_default_instance()) delete _impl_.reload_;
  if (this != internal_default_instance()) delete _impl_.pay_;
  if (this != internal_default_instance()) delete _impl_.chat_;
  if (this != internal_default_instance()) delete _impl_.followlist_;
  if (this != internal_default_instance()) delete _impl_.newfollower_;
  if (this != internal_default_instance()) delete _impl_.lostfollower_;
  if (this != internal_default_instance()) delete _impl_.invitejointeam_;
  if (this != internal_default_instance()) delete _impl_.playerjointeam_;
  if (this != internal_default_instance()) delete _impl_.playerleaveteam_;
  if (this != internal_default_instance()) delete _impl_.kickoffteamplayer_;
  if (this != internal_default_instance()) delete _impl_.teammsg_;
  if (this != internal_default_instance()) delete _impl_.teamready_;
  if (this != internal_default_instance()) delete _impl_.rejectjointeam_;
  if (this != internal_default_instance()) delete _impl_.notice_;
  if (this != internal_default_instance()) delete _impl_.removenotice_;
  if (this != internal_default_instance()) delete _impl_.upgradebattlestage_;
  if (this != internal_default_instance()) delete _impl_.passporttaskprogress_;
  if (this != internal_default_instance()) delete _impl_.rankseasoneval_;
  if (this != internal_default_instance()) delete _impl_.bindaccounts_;
  if (this != internal_default_instance()) delete _impl_.seasontaskprogress_;
  if (this != internal_default_instance()) delete _impl_.alphaactivity_;
  if (this != internal_default_instance()) delete _impl_.offseasontonewseason_;
  if (this != internal_default_instance()) delete _impl_.languagemd5list_;
  if (this != internal_default_instance()) delete _impl_.activityprogress_;
  if (this != internal_default_instance()) delete _impl_.removeactivity_;
  if (this != internal_default_instance()) delete _impl_.activityconfig_;
  if (this != internal_default_instance()) delete _impl_.meleetaskprogress_;
  if (this != internal_default_instance()) delete _impl_.setteammode_;
  if (this != internal_default_instance()) delete _impl_.passportopen_;
  if (this != internal_default_instance()) delete _impl_.passportclose_;
  if (this != internal_default_instance()) delete _impl_.weekindex_;
  if (this != internal_default_instance()) delete _impl_.pvphistory_;
  if (this != internal_default_instance()) delete _impl_.teampvpend_;
  if (this != internal_default_instance()) delete _impl_.probenetdelay_;
  if (this != internal_default_instance()) delete _impl_.refreshgoods_;
  if (this != internal_default_instance()) delete _impl_.removeeggs_;
  if (this != internal_default_instance()) delete _impl_.switchset_;
  if (this != internal_default_instance()) delete _impl_.blacklist_;
  if (this != internal_default_instance()) delete _impl_.bindphonenumberswitch_;
  if (this != internal_default_instance()) delete _impl_.worldinvite_;
  if (this != internal_default_instance()) delete _impl_.mallnotice_;
  if (this != internal_default_instance()) delete _impl_.privilege_;
  if (this != internal_default_instance()) delete _impl_.aaremind_;
  if (this != internal_default_instance()) delete _impl_.aaban_;
  if (this != internal_default_instance()) delete _impl_.aaverify_;
  if (this != internal_default_instance()) delete _impl_.phonenumber_;
  if (this != internal_default_instance()) delete _impl_.anticallback_;
  if (this != internal_default_instance()) delete _impl_.fortunebagtime_;
  if (this != internal_default_instance()) delete _impl_.updateitem_;
  if (this != internal_default_instance()) delete _impl_.creditscore_;
  if (this != internal_default_instance()) delete _impl_.buffact_;
  if (this != internal_default_instance()) delete _impl_.activitygroup_;
  if (this != internal_default_instance()) delete _impl_.clearchat_;
  if (this != internal_default_instance()) delete _impl_.forbidinfo_;
  if (this != internal_default_instance()) delete _impl_.midasdiamond_;
  if (this != internal_default_instance()) delete _impl_.joinvoiceteam_;
  if (this != internal_default_instance()) delete _impl_.joinvoicepvp_;
  if (this != internal_default_instance()) delete _impl_.joinvoicecamp_;
  if (this != internal_default_instance()) delete _impl_.wxvvip_;
  if (this != internal_default_instance()) delete _impl_.freeflow_;
  if (this != internal_default_instance()) delete _impl_.observestatus_;
  if (this != internal_default_instance()) delete _impl_.gamemarquee_;
  if (this != internal_default_instance()) delete _impl_.wxredpacket_;
  if (this != internal_default_instance()) delete _impl_.gmsysmsg_;
  if (this != internal_default_instance()) delete _impl_.newpunishment_;
  if (this != internal_default_instance()) delete _impl_.teamslot_;
  if (this != internal_default_instance()) delete _impl_.teamsubmode_;
  if (this != internal_default_instance()) delete _impl_.teamslotstatus_;
  if (this != internal_default_instance()) delete _impl_.punishmentinfo_;
  if (this != internal_default_instance()) delete _impl_.removepunishment_;
  if (this != internal_default_instance()) delete _impl_.pvpconfirm_;
  if (this != internal_default_instance()) delete _impl_.matchsuccess_;
  if (this != internal_default_instance()) delete _impl_.oldbusinessplayer_;
  if (this != internal_default_instance()) delete _impl_.changeteamslot_;
  if (this != internal_default_instance()) delete _impl_.refusechangeteamslot_;
  if (this != internal_default_instance()) delete _impl_.cancelchangeslot_;
  if (this != internal_default_instance()) delete _impl_.showchessskin_;
  if (this != internal_default_instance()) delete _impl_.onhelpreddot_;
  if (this != internal_default_instance()) delete _impl_.bagupdate_;
  if (this != internal_default_instance()) delete _impl_.refreshmelee_;
  if (this != internal_default_instance()) delete _impl_.weblogin_;
  if (this != internal_default_instance()) delete _impl_.currenttournament_;
  if (this != internal_default_instance()) delete _impl_.tournamentbegin_;
  if (this != internal_default_instance()) delete _impl_.tournamentenrollbegin_;
  if (this != internal_default_instance()) delete _impl_.tournamentenrollend_;
  if (this != internal_default_instance()) delete _impl_.jointournamentroom_;
  if (this != internal_default_instance()) delete _impl_.tournamentend_;
  if (this != internal_default_instance()) delete _impl_.tournamentout_;
  if (this != internal_default_instance()) delete _impl_.tournamentroundend_;
  if (this != internal_default_instance()) delete _impl_.luckstaraward_;
  if (this != internal_default_instance()) delete _impl_.inviteobserve_;
  if (this != internal_default_instance()) delete _impl_.rejectobserve_;
  if (this != internal_default_instance()) delete _impl_.chestcount_;
  if (this != internal_default_instance()) delete _impl_.recruitinfo_;
  if (this != internal_default_instance()) delete _impl_.recruitplayer_;
  if (this != internal_default_instance()) delete _impl_.recruitplayerbattle_;
  if (this != internal_default_instance()) delete _impl_.betonbounty_;
  if (this != internal_default_instance()) delete _impl_.activitytaskunlock_;
  if (this != internal_default_instance()) delete _impl_.psserveronly_;
  if (this != internal_default_instance()) delete _impl_.addthirdpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.delthirdpvpinfo_;
  if (this != internal_default_instance()) delete _impl_.ps4serveronly_;
  if (this != internal_default_instance()) delete _impl_.luckmallgoods_;
  if (this != internal_default_instance()) delete _impl_.chesslisterr_;
  if (this != internal_default_instance()) delete _impl_.chestrecord_;
  if (this != internal_default_instance()) delete _impl_.goainfo_;
  if (this != internal_default_instance()) delete _impl_.medalinfo_;
  if (this != internal_default_instance()) delete _impl_.medalid_;
  if (this != internal_default_instance()) delete _impl_.pvpreset_;
  if (this != internal_default_instance()) delete _impl_.delmail_;
  if (this != internal_default_instance()) delete _impl_.iteminfo_;
  if (this != internal_default_instance()) delete _impl_.passportnum_;
  if (this != internal_default_instance()) delete _impl_.passportyearcardnum_;
  if (this != internal_default_instance()) delete _impl_.teamop_;
  if (this != internal_default_instance()) delete _impl_.teamdismiss_;
  if (this != internal_default_instance()) delete _impl_.switchmodeinteam_;
  if (this != internal_default_instance()) delete _impl_.addbanner_;
  if (this != internal_default_instance()) delete _impl_.removebanner_;
  if (this != internal_default_instance()) delete _impl_.singleroundflow_;
  if (this != internal_default_instance()) delete _impl_.teamstatus_;
  if (this != internal_default_instance()) delete _impl_.tngameend_;
  if (this != internal_default_instance()) delete _impl_.playerlackresource_;
  if (this != internal_default_instance()) delete _impl_.favmapremoved_;
  if (this != internal_default_instance()) delete _impl_.workshopmatchresult_;
  if (this != internal_default_instance()) delete _impl_.bigwinnerexpandmatch_;
  if (this != internal_default_instance()) delete _impl_.verifyrealname_;
  if (this != internal_default_instance()) delete _impl_.guildjoin_;
  if (this != internal_default_instance()) delete _impl_.memberchange_;
  if (this != internal_default_instance()) delete _impl_.guildkickoff_;
  if (this != internal_default_instance()) delete _impl_.guildrolechange_;
  if (this != internal_default_instance()) delete _impl_.guildattrchange_;
  if (this != internal_default_instance()) delete _impl_.guildchat_;
  if (this != internal_default_instance()) delete _impl_.newguildlog_;
  if (this != internal_default_instance()) delete _impl_.applicantchange_;
  if (this != internal_default_instance()) delete _impl_.inviteechange_;
  if (this != internal_default_instance()) delete _impl_.guildnewinvite_;
  if (this != internal_default_instance()) delete _impl_.guildinfo_;
  if (this != internal_default_instance()) delete _impl_.vngawardreset_;
  if (this != internal_default_instance()) delete _impl_.adaward_;
  if (this != internal_default_instance()) delete _impl_.adcount_;
  if (this != internal_default_instance()) delete _impl_.uiforbid_;
  if (this != internal_default_instance()) delete _impl_.pvpupdatemessengerpos_;
  if (this != internal_default_instance()) delete _impl_.pvpplayerloggedin_;
  if (this != internal_default_instance()) delete _impl_.passthrough_;
  if (this != internal_default_instance()) delete _impl_.aa_;
  if (this != internal_default_instance()) delete _impl_.pvpreconnect_;
  if (this != internal_default_instance()) delete _impl_.updatebattleresult_;
  if (this != internal_default_instance()) delete _impl_.visitplayer_;
  if (this != internal_default_instance()) delete _impl_.kridentityauth_;
  if (this != internal_default_instance()) delete _impl_.kraddictiontip_;
  if (this != internal_default_instance()) delete _impl_.leavegameearly_;
  if (this != internal_default_instance()) delete _impl_.kraddictioncountdown_;
  if (this != internal_default_instance()) delete _impl_.histroychatmsg_;
  if (this != internal_default_instance()) delete _impl_.gmtime_;
  if (this != internal_default_instance()) delete _impl_.changename_;
  if (this != internal_default_instance()) delete _impl_.firstpay_;
  if (this != internal_default_instance()) delete _impl_.expchanged_;
  if (this != internal_default_instance()) delete _impl_.taskprogress_;
  if (this != internal_default_instance()) delete _impl_.newplayerguideended_;
  if (this != internal_default_instance()) delete _impl_.tasksinfo_;
  if (this != internal_default_instance()) delete _impl_.pvpawardsinfo_;
  if (this != internal_default_instance()) delete _impl_.addaward_;
  if (this != internal_default_instance()) delete _impl_.limitrefresh_;
  if (this != internal_default_instance()) delete _impl_.updatenotice_;
  if (this != internal_default_instance()) delete _impl_.updatepvechallengecount_;
  if (this != internal_default_instance()) delete _impl_.addiscount_;
  if (this != internal_default_instance()) delete _impl_.calcmmr_;
  if (this != internal_default_instance()) delete _impl_.bag_;
  if (this != internal_default_instance()) delete _impl_.itemattributes_;
  if (this != internal_default_instance()) delete _impl_.pvpaffixtrigger_;
  if (this != internal_default_instance()) delete _impl_.updatepvpdata_;
  if (this != internal_default_instance()) delete _impl_.upgradepassport_;
  if (this != internal_default_instance()) delete _impl_.updateteamdebuff_;
  if (this != internal_default_instance()) delete _impl_.pveeval_;
  if (this != internal_default_instance()) delete _impl_.unlockcardgroup_;
  if (this != internal_default_instance()) delete _impl_.custompveactivity_;
  if (this != internal_default_instance()) delete _impl_.csntfgmban_;
  if (this != internal_default_instance()) delete _impl_.tdplayerinfo_;
  if (this != internal_default_instance()) delete _impl_.mentorinvitemsg_;
  if (this != internal_default_instance()) delete _impl_.becomementor_;
  if (this != internal_default_instance()) delete _impl_.mentorrelation_;
  if (this != internal_default_instance()) delete _impl_.mentorshiptaskupdate_;
  if (this != internal_default_instance()) delete _impl_.mentorlevel_;
  if (this != internal_default_instance()) delete _impl_.curdressupdate_;
  if (this != internal_default_instance()) delete _impl_.changeexchangemark_;
  if (this != internal_default_instance()) delete _impl_.refreshpassport_;
  if (this != internal_default_instance()) delete _impl_.gmremovemail_;
  if (this != internal_default_instance()) delete _impl_.autouseitem_;
}

void CSNtfBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfBody::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mails_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.kickoff_ != nullptr) {
    delete _impl_.kickoff_;
  }
  _impl_.kickoff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ntfwait_ != nullptr) {
    delete _impl_.ntfwait_;
  }
  _impl_.ntfwait_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passday_ != nullptr) {
    delete _impl_.passday_;
  }
  _impl_.passday_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passweek_ != nullptr) {
    delete _impl_.passweek_;
  }
  _impl_.passweek_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passmonth_ != nullptr) {
    delete _impl_.passmonth_;
  }
  _impl_.passmonth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worldchat_ != nullptr) {
    delete _impl_.worldchat_;
  }
  _impl_.worldchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.headpic_ != nullptr) {
    delete _impl_.headpic_;
  }
  _impl_.headpic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpmatch_ != nullptr) {
    delete _impl_.pvpmatch_;
  }
  _impl_.pvpmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvp_ != nullptr) {
    delete _impl_.pvp_;
  }
  _impl_.pvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpmatchcancel_ != nullptr) {
    delete _impl_.pvpmatchcancel_;
  }
  _impl_.pvpmatchcancel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpstatus_ != nullptr) {
    delete _impl_.pvpstatus_;
  }
  _impl_.pvpstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ntfpvpplayerready_ != nullptr) {
    delete _impl_.ntfpvpplayerready_;
  }
  _impl_.ntfpvpplayerready_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpbegin_ != nullptr) {
    delete _impl_.pvpbegin_;
  }
  _impl_.pvpbegin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerfinish_ != nullptr) {
    delete _impl_.playerfinish_;
  }
  _impl_.playerfinish_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpend_ != nullptr) {
    delete _impl_.pvpend_;
  }
  _impl_.pvpend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.marquee_ != nullptr) {
    delete _impl_.marquee_;
  }
  _impl_.marquee_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removemarquee_ != nullptr) {
    delete _impl_.removemarquee_;
  }
  _impl_.removemarquee_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.loadingprogress_ != nullptr) {
    delete _impl_.loadingprogress_;
  }
  _impl_.loadingprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpchat_ != nullptr) {
    delete _impl_.pvpchat_;
  }
  _impl_.pvpchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.reload_ != nullptr) {
    delete _impl_.reload_;
  }
  _impl_.reload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pay_ != nullptr) {
    delete _impl_.pay_;
  }
  _impl_.pay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.followlist_ != nullptr) {
    delete _impl_.followlist_;
  }
  _impl_.followlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newfollower_ != nullptr) {
    delete _impl_.newfollower_;
  }
  _impl_.newfollower_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.lostfollower_ != nullptr) {
    delete _impl_.lostfollower_;
  }
  _impl_.lostfollower_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.invitejointeam_ != nullptr) {
    delete _impl_.invitejointeam_;
  }
  _impl_.invitejointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerjointeam_ != nullptr) {
    delete _impl_.playerjointeam_;
  }
  _impl_.playerjointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerleaveteam_ != nullptr) {
    delete _impl_.playerleaveteam_;
  }
  _impl_.playerleaveteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kickoffteamplayer_ != nullptr) {
    delete _impl_.kickoffteamplayer_;
  }
  _impl_.kickoffteamplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teammsg_ != nullptr) {
    delete _impl_.teammsg_;
  }
  _impl_.teammsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamready_ != nullptr) {
    delete _impl_.teamready_;
  }
  _impl_.teamready_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rejectjointeam_ != nullptr) {
    delete _impl_.rejectjointeam_;
  }
  _impl_.rejectjointeam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.notice_ != nullptr) {
    delete _impl_.notice_;
  }
  _impl_.notice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removenotice_ != nullptr) {
    delete _impl_.removenotice_;
  }
  _impl_.removenotice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.upgradebattlestage_ != nullptr) {
    delete _impl_.upgradebattlestage_;
  }
  _impl_.upgradebattlestage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passporttaskprogress_ != nullptr) {
    delete _impl_.passporttaskprogress_;
  }
  _impl_.passporttaskprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rankseasoneval_ != nullptr) {
    delete _impl_.rankseasoneval_;
  }
  _impl_.rankseasoneval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindaccounts_ != nullptr) {
    delete _impl_.bindaccounts_;
  }
  _impl_.bindaccounts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.seasontaskprogress_ != nullptr) {
    delete _impl_.seasontaskprogress_;
  }
  _impl_.seasontaskprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.alphaactivity_ != nullptr) {
    delete _impl_.alphaactivity_;
  }
  _impl_.alphaactivity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offseasontonewseason_ != nullptr) {
    delete _impl_.offseasontonewseason_;
  }
  _impl_.offseasontonewseason_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.languagemd5list_ != nullptr) {
    delete _impl_.languagemd5list_;
  }
  _impl_.languagemd5list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activityprogress_ != nullptr) {
    delete _impl_.activityprogress_;
  }
  _impl_.activityprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeactivity_ != nullptr) {
    delete _impl_.removeactivity_;
  }
  _impl_.removeactivity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activityconfig_ != nullptr) {
    delete _impl_.activityconfig_;
  }
  _impl_.activityconfig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.meleetaskprogress_ != nullptr) {
    delete _impl_.meleetaskprogress_;
  }
  _impl_.meleetaskprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.setteammode_ != nullptr) {
    delete _impl_.setteammode_;
  }
  _impl_.setteammode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passportopen_ != nullptr) {
    delete _impl_.passportopen_;
  }
  _impl_.passportopen_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passportclose_ != nullptr) {
    delete _impl_.passportclose_;
  }
  _impl_.passportclose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.weekindex_ != nullptr) {
    delete _impl_.weekindex_;
  }
  _impl_.weekindex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvphistory_ != nullptr) {
    delete _impl_.pvphistory_;
  }
  _impl_.pvphistory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teampvpend_ != nullptr) {
    delete _impl_.teampvpend_;
  }
  _impl_.teampvpend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.probenetdelay_ != nullptr) {
    delete _impl_.probenetdelay_;
  }
  _impl_.probenetdelay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refreshgoods_ != nullptr) {
    delete _impl_.refreshgoods_;
  }
  _impl_.refreshgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removeeggs_ != nullptr) {
    delete _impl_.removeeggs_;
  }
  _impl_.removeeggs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchset_ != nullptr) {
    delete _impl_.switchset_;
  }
  _impl_.switchset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blacklist_ != nullptr) {
    delete _impl_.blacklist_;
  }
  _impl_.blacklist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bindphonenumberswitch_ != nullptr) {
    delete _impl_.bindphonenumberswitch_;
  }
  _impl_.bindphonenumberswitch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.worldinvite_ != nullptr) {
    delete _impl_.worldinvite_;
  }
  _impl_.worldinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mallnotice_ != nullptr) {
    delete _impl_.mallnotice_;
  }
  _impl_.mallnotice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.privilege_ != nullptr) {
    delete _impl_.privilege_;
  }
  _impl_.privilege_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aaremind_ != nullptr) {
    delete _impl_.aaremind_;
  }
  _impl_.aaremind_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aaban_ != nullptr) {
    delete _impl_.aaban_;
  }
  _impl_.aaban_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aaverify_ != nullptr) {
    delete _impl_.aaverify_;
  }
  _impl_.aaverify_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phonenumber_ != nullptr) {
    delete _impl_.phonenumber_;
  }
  _impl_.phonenumber_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anticallback_ != nullptr) {
    delete _impl_.anticallback_;
  }
  _impl_.anticallback_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fortunebagtime_ != nullptr) {
    delete _impl_.fortunebagtime_;
  }
  _impl_.fortunebagtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updateitem_ != nullptr) {
    delete _impl_.updateitem_;
  }
  _impl_.updateitem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.creditscore_ != nullptr) {
    delete _impl_.creditscore_;
  }
  _impl_.creditscore_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buffact_ != nullptr) {
    delete _impl_.buffact_;
  }
  _impl_.buffact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activitygroup_ != nullptr) {
    delete _impl_.activitygroup_;
  }
  _impl_.activitygroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clearchat_ != nullptr) {
    delete _impl_.clearchat_;
  }
  _impl_.clearchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.forbidinfo_ != nullptr) {
    delete _impl_.forbidinfo_;
  }
  _impl_.forbidinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.midasdiamond_ != nullptr) {
    delete _impl_.midasdiamond_;
  }
  _impl_.midasdiamond_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoiceteam_ != nullptr) {
    delete _impl_.joinvoiceteam_;
  }
  _impl_.joinvoiceteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicepvp_ != nullptr) {
    delete _impl_.joinvoicepvp_;
  }
  _impl_.joinvoicepvp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joinvoicecamp_ != nullptr) {
    delete _impl_.joinvoicecamp_;
  }
  _impl_.joinvoicecamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxvvip_ != nullptr) {
    delete _impl_.wxvvip_;
  }
  _impl_.wxvvip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.freeflow_ != nullptr) {
    delete _impl_.freeflow_;
  }
  _impl_.freeflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.observestatus_ != nullptr) {
    delete _impl_.observestatus_;
  }
  _impl_.observestatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gamemarquee_ != nullptr) {
    delete _impl_.gamemarquee_;
  }
  _impl_.gamemarquee_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wxredpacket_ != nullptr) {
    delete _impl_.wxredpacket_;
  }
  _impl_.wxredpacket_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gmsysmsg_ != nullptr) {
    delete _impl_.gmsysmsg_;
  }
  _impl_.gmsysmsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newpunishment_ != nullptr) {
    delete _impl_.newpunishment_;
  }
  _impl_.newpunishment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamslot_ != nullptr) {
    delete _impl_.teamslot_;
  }
  _impl_.teamslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamsubmode_ != nullptr) {
    delete _impl_.teamsubmode_;
  }
  _impl_.teamsubmode_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamslotstatus_ != nullptr) {
    delete _impl_.teamslotstatus_;
  }
  _impl_.teamslotstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.punishmentinfo_ != nullptr) {
    delete _impl_.punishmentinfo_;
  }
  _impl_.punishmentinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removepunishment_ != nullptr) {
    delete _impl_.removepunishment_;
  }
  _impl_.removepunishment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpconfirm_ != nullptr) {
    delete _impl_.pvpconfirm_;
  }
  _impl_.pvpconfirm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.matchsuccess_ != nullptr) {
    delete _impl_.matchsuccess_;
  }
  _impl_.matchsuccess_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.oldbusinessplayer_ != nullptr) {
    delete _impl_.oldbusinessplayer_;
  }
  _impl_.oldbusinessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changeteamslot_ != nullptr) {
    delete _impl_.changeteamslot_;
  }
  _impl_.changeteamslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refusechangeteamslot_ != nullptr) {
    delete _impl_.refusechangeteamslot_;
  }
  _impl_.refusechangeteamslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cancelchangeslot_ != nullptr) {
    delete _impl_.cancelchangeslot_;
  }
  _impl_.cancelchangeslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.showchessskin_ != nullptr) {
    delete _impl_.showchessskin_;
  }
  _impl_.showchessskin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.onhelpreddot_ != nullptr) {
    delete _impl_.onhelpreddot_;
  }
  _impl_.onhelpreddot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bagupdate_ != nullptr) {
    delete _impl_.bagupdate_;
  }
  _impl_.bagupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refreshmelee_ != nullptr) {
    delete _impl_.refreshmelee_;
  }
  _impl_.refreshmelee_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.weblogin_ != nullptr) {
    delete _impl_.weblogin_;
  }
  _impl_.weblogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.currenttournament_ != nullptr) {
    delete _impl_.currenttournament_;
  }
  _impl_.currenttournament_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentbegin_ != nullptr) {
    delete _impl_.tournamentbegin_;
  }
  _impl_.tournamentbegin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentenrollbegin_ != nullptr) {
    delete _impl_.tournamentenrollbegin_;
  }
  _impl_.tournamentenrollbegin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentenrollend_ != nullptr) {
    delete _impl_.tournamentenrollend_;
  }
  _impl_.tournamentenrollend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.jointournamentroom_ != nullptr) {
    delete _impl_.jointournamentroom_;
  }
  _impl_.jointournamentroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentend_ != nullptr) {
    delete _impl_.tournamentend_;
  }
  _impl_.tournamentend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentout_ != nullptr) {
    delete _impl_.tournamentout_;
  }
  _impl_.tournamentout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournamentroundend_ != nullptr) {
    delete _impl_.tournamentroundend_;
  }
  _impl_.tournamentroundend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.luckstaraward_ != nullptr) {
    delete _impl_.luckstaraward_;
  }
  _impl_.luckstaraward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inviteobserve_ != nullptr) {
    delete _impl_.inviteobserve_;
  }
  _impl_.inviteobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rejectobserve_ != nullptr) {
    delete _impl_.rejectobserve_;
  }
  _impl_.rejectobserve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chestcount_ != nullptr) {
    delete _impl_.chestcount_;
  }
  _impl_.chestcount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recruitinfo_ != nullptr) {
    delete _impl_.recruitinfo_;
  }
  _impl_.recruitinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recruitplayer_ != nullptr) {
    delete _impl_.recruitplayer_;
  }
  _impl_.recruitplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recruitplayerbattle_ != nullptr) {
    delete _impl_.recruitplayerbattle_;
  }
  _impl_.recruitplayerbattle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.betonbounty_ != nullptr) {
    delete _impl_.betonbounty_;
  }
  _impl_.betonbounty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activitytaskunlock_ != nullptr) {
    delete _impl_.activitytaskunlock_;
  }
  _impl_.activitytaskunlock_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.psserveronly_ != nullptr) {
    delete _impl_.psserveronly_;
  }
  _impl_.psserveronly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addthirdpvpinfo_ != nullptr) {
    delete _impl_.addthirdpvpinfo_;
  }
  _impl_.addthirdpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delthirdpvpinfo_ != nullptr) {
    delete _impl_.delthirdpvpinfo_;
  }
  _impl_.delthirdpvpinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ps4serveronly_ != nullptr) {
    delete _impl_.ps4serveronly_;
  }
  _impl_.ps4serveronly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.luckmallgoods_ != nullptr) {
    delete _impl_.luckmallgoods_;
  }
  _impl_.luckmallgoods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chesslisterr_ != nullptr) {
    delete _impl_.chesslisterr_;
  }
  _impl_.chesslisterr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chestrecord_ != nullptr) {
    delete _impl_.chestrecord_;
  }
  _impl_.chestrecord_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.goainfo_ != nullptr) {
    delete _impl_.goainfo_;
  }
  _impl_.goainfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.medalinfo_ != nullptr) {
    delete _impl_.medalinfo_;
  }
  _impl_.medalinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.medalid_ != nullptr) {
    delete _impl_.medalid_;
  }
  _impl_.medalid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpreset_ != nullptr) {
    delete _impl_.pvpreset_;
  }
  _impl_.pvpreset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delmail_ != nullptr) {
    delete _impl_.delmail_;
  }
  _impl_.delmail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.iteminfo_ != nullptr) {
    delete _impl_.iteminfo_;
  }
  _impl_.iteminfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passportnum_ != nullptr) {
    delete _impl_.passportnum_;
  }
  _impl_.passportnum_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passportyearcardnum_ != nullptr) {
    delete _impl_.passportyearcardnum_;
  }
  _impl_.passportyearcardnum_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamop_ != nullptr) {
    delete _impl_.teamop_;
  }
  _impl_.teamop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamdismiss_ != nullptr) {
    delete _impl_.teamdismiss_;
  }
  _impl_.teamdismiss_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchmodeinteam_ != nullptr) {
    delete _impl_.switchmodeinteam_;
  }
  _impl_.switchmodeinteam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addbanner_ != nullptr) {
    delete _impl_.addbanner_;
  }
  _impl_.addbanner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.removebanner_ != nullptr) {
    delete _impl_.removebanner_;
  }
  _impl_.removebanner_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.singleroundflow_ != nullptr) {
    delete _impl_.singleroundflow_;
  }
  _impl_.singleroundflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teamstatus_ != nullptr) {
    delete _impl_.teamstatus_;
  }
  _impl_.teamstatus_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tngameend_ != nullptr) {
    delete _impl_.tngameend_;
  }
  _impl_.tngameend_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerlackresource_ != nullptr) {
    delete _impl_.playerlackresource_;
  }
  _impl_.playerlackresource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.favmapremoved_ != nullptr) {
    delete _impl_.favmapremoved_;
  }
  _impl_.favmapremoved_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workshopmatchresult_ != nullptr) {
    delete _impl_.workshopmatchresult_;
  }
  _impl_.workshopmatchresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinnerexpandmatch_ != nullptr) {
    delete _impl_.bigwinnerexpandmatch_;
  }
  _impl_.bigwinnerexpandmatch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.verifyrealname_ != nullptr) {
    delete _impl_.verifyrealname_;
  }
  _impl_.verifyrealname_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildjoin_ != nullptr) {
    delete _impl_.guildjoin_;
  }
  _impl_.guildjoin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.memberchange_ != nullptr) {
    delete _impl_.memberchange_;
  }
  _impl_.memberchange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildkickoff_ != nullptr) {
    delete _impl_.guildkickoff_;
  }
  _impl_.guildkickoff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildrolechange_ != nullptr) {
    delete _impl_.guildrolechange_;
  }
  _impl_.guildrolechange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildattrchange_ != nullptr) {
    delete _impl_.guildattrchange_;
  }
  _impl_.guildattrchange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildchat_ != nullptr) {
    delete _impl_.guildchat_;
  }
  _impl_.guildchat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newguildlog_ != nullptr) {
    delete _impl_.newguildlog_;
  }
  _impl_.newguildlog_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.applicantchange_ != nullptr) {
    delete _impl_.applicantchange_;
  }
  _impl_.applicantchange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inviteechange_ != nullptr) {
    delete _impl_.inviteechange_;
  }
  _impl_.inviteechange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildnewinvite_ != nullptr) {
    delete _impl_.guildnewinvite_;
  }
  _impl_.guildnewinvite_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vngawardreset_ != nullptr) {
    delete _impl_.vngawardreset_;
  }
  _impl_.vngawardreset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adaward_ != nullptr) {
    delete _impl_.adaward_;
  }
  _impl_.adaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.adcount_ != nullptr) {
    delete _impl_.adcount_;
  }
  _impl_.adcount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uiforbid_ != nullptr) {
    delete _impl_.uiforbid_;
  }
  _impl_.uiforbid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpupdatemessengerpos_ != nullptr) {
    delete _impl_.pvpupdatemessengerpos_;
  }
  _impl_.pvpupdatemessengerpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpplayerloggedin_ != nullptr) {
    delete _impl_.pvpplayerloggedin_;
  }
  _impl_.pvpplayerloggedin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.passthrough_ != nullptr) {
    delete _impl_.passthrough_;
  }
  _impl_.passthrough_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aa_ != nullptr) {
    delete _impl_.aa_;
  }
  _impl_.aa_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpreconnect_ != nullptr) {
    delete _impl_.pvpreconnect_;
  }
  _impl_.pvpreconnect_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatebattleresult_ != nullptr) {
    delete _impl_.updatebattleresult_;
  }
  _impl_.updatebattleresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visitplayer_ != nullptr) {
    delete _impl_.visitplayer_;
  }
  _impl_.visitplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kridentityauth_ != nullptr) {
    delete _impl_.kridentityauth_;
  }
  _impl_.kridentityauth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kraddictiontip_ != nullptr) {
    delete _impl_.kraddictiontip_;
  }
  _impl_.kraddictiontip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leavegameearly_ != nullptr) {
    delete _impl_.leavegameearly_;
  }
  _impl_.leavegameearly_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.kraddictioncountdown_ != nullptr) {
    delete _impl_.kraddictioncountdown_;
  }
  _impl_.kraddictioncountdown_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.histroychatmsg_ != nullptr) {
    delete _impl_.histroychatmsg_;
  }
  _impl_.histroychatmsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gmtime_ != nullptr) {
    delete _impl_.gmtime_;
  }
  _impl_.gmtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changename_ != nullptr) {
    delete _impl_.changename_;
  }
  _impl_.changename_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.firstpay_ != nullptr) {
    delete _impl_.firstpay_;
  }
  _impl_.firstpay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expchanged_ != nullptr) {
    delete _impl_.expchanged_;
  }
  _impl_.expchanged_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.taskprogress_ != nullptr) {
    delete _impl_.taskprogress_;
  }
  _impl_.taskprogress_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.newplayerguideended_ != nullptr) {
    delete _impl_.newplayerguideended_;
  }
  _impl_.newplayerguideended_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tasksinfo_ != nullptr) {
    delete _impl_.tasksinfo_;
  }
  _impl_.tasksinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpawardsinfo_ != nullptr) {
    delete _impl_.pvpawardsinfo_;
  }
  _impl_.pvpawardsinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addaward_ != nullptr) {
    delete _impl_.addaward_;
  }
  _impl_.addaward_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.limitrefresh_ != nullptr) {
    delete _impl_.limitrefresh_;
  }
  _impl_.limitrefresh_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatenotice_ != nullptr) {
    delete _impl_.updatenotice_;
  }
  _impl_.updatenotice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatepvechallengecount_ != nullptr) {
    delete _impl_.updatepvechallengecount_;
  }
  _impl_.updatepvechallengecount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addiscount_ != nullptr) {
    delete _impl_.addiscount_;
  }
  _impl_.addiscount_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.calcmmr_ != nullptr) {
    delete _impl_.calcmmr_;
  }
  _impl_.calcmmr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bag_ != nullptr) {
    delete _impl_.bag_;
  }
  _impl_.bag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.itemattributes_ != nullptr) {
    delete _impl_.itemattributes_;
  }
  _impl_.itemattributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpaffixtrigger_ != nullptr) {
    delete _impl_.pvpaffixtrigger_;
  }
  _impl_.pvpaffixtrigger_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updatepvpdata_ != nullptr) {
    delete _impl_.updatepvpdata_;
  }
  _impl_.updatepvpdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.upgradepassport_ != nullptr) {
    delete _impl_.upgradepassport_;
  }
  _impl_.upgradepassport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updateteamdebuff_ != nullptr) {
    delete _impl_.updateteamdebuff_;
  }
  _impl_.updateteamdebuff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pveeval_ != nullptr) {
    delete _impl_.pveeval_;
  }
  _impl_.pveeval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.unlockcardgroup_ != nullptr) {
    delete _impl_.unlockcardgroup_;
  }
  _impl_.unlockcardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.custompveactivity_ != nullptr) {
    delete _impl_.custompveactivity_;
  }
  _impl_.custompveactivity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.csntfgmban_ != nullptr) {
    delete _impl_.csntfgmban_;
  }
  _impl_.csntfgmban_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tdplayerinfo_ != nullptr) {
    delete _impl_.tdplayerinfo_;
  }
  _impl_.tdplayerinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinvitemsg_ != nullptr) {
    delete _impl_.mentorinvitemsg_;
  }
  _impl_.mentorinvitemsg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.becomementor_ != nullptr) {
    delete _impl_.becomementor_;
  }
  _impl_.becomementor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorrelation_ != nullptr) {
    delete _impl_.mentorrelation_;
  }
  _impl_.mentorrelation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorshiptaskupdate_ != nullptr) {
    delete _impl_.mentorshiptaskupdate_;
  }
  _impl_.mentorshiptaskupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorlevel_ != nullptr) {
    delete _impl_.mentorlevel_;
  }
  _impl_.mentorlevel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.curdressupdate_ != nullptr) {
    delete _impl_.curdressupdate_;
  }
  _impl_.curdressupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changeexchangemark_ != nullptr) {
    delete _impl_.changeexchangemark_;
  }
  _impl_.changeexchangemark_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.refreshpassport_ != nullptr) {
    delete _impl_.refreshpassport_;
  }
  _impl_.refreshpassport_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gmremovemail_ != nullptr) {
    delete _impl_.gmremovemail_;
  }
  _impl_.gmremovemail_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.autouseitem_ != nullptr) {
    delete _impl_.autouseitem_;
  }
  _impl_.autouseitem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSNtfKickOff KickOff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWait NtfWait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntfwait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassDayBody PassDay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_passday(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassWeekBody PassWeek = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_passweek(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassMonthBody PassMonth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_passmonth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWorldChat WorldChat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTMail Mails = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfHeadPic HeadPic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_headpic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpMatch PvpMatch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvp Pvp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpMatchCancel PvpMatchCancel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpmatchcancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpStatus PvpStatus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpPlayerReady NtfPvpPlayerReady = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntfpvpplayerready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpBegin PvpBegin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpbegin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPlayerFinish PlayerFinish = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerfinish(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpEnd PvpEnd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMarquee Marquee = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_marquee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRemoveMarquee RemoveMarquee = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_removemarquee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLoadingProgress LoadingProgress = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_loadingprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpChat PvpChat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfReload Reload = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_reload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPay Pay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChat Chat = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfFollowList FollowList = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_followlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfNewFollower NewFollower = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_newfollower(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLostFollower LostFollower = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_lostfollower(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfInviteJoinTeam InviteJoinTeam = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_invitejointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPlayerJoinTeam PlayerJoinTeam = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerjointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPlayerLeaveTeam PlayerLeaveTeam = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerleaveteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfKickOffTeamPlayer KickOffTeamPlayer = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_kickoffteamplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamMsg TeamMsg = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_teammsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamReady TeamReady = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRejectJoinTeam RejectJoinTeam = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectjointeam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfNotice Notice = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_notice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRemoveNotice RemoveNotice = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_removenotice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpgradeBattleStage UpgradeBattleStage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradebattlestage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassportTaskProgress PassportTaskProgress = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_passporttaskprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRankSeasonEval RankSeasonEval = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rankseasoneval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBindAccounts BindAccounts = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindaccounts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfSeasonTaskProgress SeasonTaskProgress = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_seasontaskprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAlphaActivity AlphaActivity = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_alphaactivity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfOffSeasonToNewSeason OffSeasonToNewSeason = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_offseasontonewseason(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLanguageMd5List LanguageMd5List = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_languagemd5list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfActivityProgress ActivityProgress = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_activityprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRemoveActivity RemoveActivity = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeactivity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfActivityConfig ActivityConfig = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_activityconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMeleeTaskProgress MeleeTaskProgress = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_meleetaskprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfSetTeamMode SetTeamMode = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_setteammode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassportOpen PassportOpen = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_passportopen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassportClose PassportClose = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_passportclose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWeekIndex WeekIndex = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_weekindex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpHistory PvpHistory = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvphistory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamPvpEnd TeamPvpEnd = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_teampvpend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfProbeNetDelay ProbeNetDelay = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_probenetdelay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRefreshGoods RefreshGoods = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_refreshgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRemoveEggs RemoveEggs = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeeggs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfSwitchSet SwitchSet = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBlacklist Blacklist = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_blacklist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBindPhoneNumberSwitch BindPhoneNumberSwitch = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_bindphonenumberswitch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWorldInvite WorldInvite = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMallNotice MallNotice = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_mallnotice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPrivilege Privilege = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_privilege(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAARemind AARemind = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_aaremind(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAABan AABan = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aaban(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAAVerify AAVerify = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aaverify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPhoneNumber PhoneNumber = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phonenumber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAntiCallBack AntiCallBack = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_anticallback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfFortuneBagTime FortuneBagTime = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fortunebagtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpdateItem UpdateItem = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfCreditScore CreditScore = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_creditscore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBuffAct BuffAct = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfActivityGroup ActivityGroup = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitygroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfClearChat ClearChat = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfForbidInfo ForbidInfo = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_forbidinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMidasDiamond MidasDiamond = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_midasdiamond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfJoinVoiceTeam JoinVoiceTeam = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoiceteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfJoinVoicePvp JoinVoicePvp = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoicepvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfJoinVoiceCamp JoinVoiceCamp = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinvoicecamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWxVVip WxVVip = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxvvip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfFreeFlow FreeFlow = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_freeflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfObserveStatus ObserveStatus = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_observestatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGameMarquee GameMarquee = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamemarquee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWxRedPacket WxRedPacket = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_wxredpacket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGmSysMsg GmSysMsg = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_gmsysmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfNewPunishment NewPunishment = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_newpunishment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamSlot TeamSlot = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamSubMode TeamSubMode = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamsubmode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamSlotStatus TeamSlotStatus = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamslotstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPunishmentInfo PunishmentInfo = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_punishmentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRemovePunishment RemovePunishment = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_removepunishment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpConfirm PvpConfirm = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpconfirm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMatchSuccess MatchSuccess = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchsuccess(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfOldBusinessPlayer OldBusinessPlayer = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldbusinessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChangeTeamSlot ChangeTeamSlot = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_changeteamslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRefuseChangeTeamSlot RefuseChangeTeamSlot = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_refusechangeteamslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfCancelChangeSlot CancelChangeSlot = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelchangeslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfShowChessSkin ShowChessSkin = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_showchessskin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfOnHelpReddot OnHelpReddot = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onhelpreddot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBagUpdate BagUpdate = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bagupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRefreshMelee RefreshMelee = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_refreshmelee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWebLogin WebLogin = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_weblogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfCurrentTournament CurrentTournament = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_currenttournament(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTournamentBegin TournamentBegin = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentbegin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTournamentEnrollBegin TournamentEnrollBegin = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentenrollbegin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTournamentEnrollEnd TournamentEnrollEnd = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentenrollend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfJoinTournamentRoom JoinTournamentRoom = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_jointournamentroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTournamentEnd TournamentEnd = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTournamentOut TournamentOut = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTournamentRoundEnd TournamentRoundEnd = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentroundend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLuckStarAward LuckStarAward = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_luckstaraward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfInviteObserve InviteObserve = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviteobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRejectObserve RejectObserve = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rejectobserve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChestCount ChestCount = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_chestcount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRecruitInfo RecruitInfo = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_recruitinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRecruitPlayer RecruitPlayer = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_recruitplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRecruitPlayerBattle RecruitPlayerBattle = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_recruitplayerbattle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBetOnBounty BetOnBounty = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_betonbounty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfActivityTaskUnlock ActivityTaskUnlock = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitytaskunlock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPsServerOnly PsServerOnly = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_psserveronly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAddThirdPvpInfo AddThirdPvpInfo = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_addthirdpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfDelThirdPvpInfo DelThirdPvpInfo = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_delthirdpvpinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPs4ServerOnly Ps4ServerOnly = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ps4serveronly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLuckMallGoods LuckMallGoods = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_luckmallgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChessListErr ChessListErr = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesslisterr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChestRecord ChestRecord = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_chestrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGOAInfo GOAInfo = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_goainfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMedalInfos MedalInfo = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_medalinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMedalId MedalId = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_medalid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpReset PvpReset = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpreset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfDelMail DelMail = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delmail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfItemInfo ItemInfo = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassportNum PassportNum = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_passportnum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassportYearCardNum PassportYearCardNum = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_passportyearcardnum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamOP TeamOP = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamDismiss TeamDismiss = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamdismiss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfSwitchModeInTeam SwitchModeInTeam = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchmodeinteam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAddBanner AddBanner = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_addbanner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRemoveBanner RemoveBanner = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_removebanner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfSingleRoundFlow SingleRoundFlow = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_singleroundflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTeamStatus TeamStatus = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_teamstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTNGameEnd TNGameEnd = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tngameend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPlayerLackResourceInTeam PlayerLackResource = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerlackresource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfFavMapRemoved FavMapRemoved = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_favmapremoved(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfWorkshopMatchResult WorkshopMatchResult = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_workshopmatchresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBigWinnerExpandMatch BigWinnerExpandMatch = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinnerexpandmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfVerifyRealName VerifyRealName = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_verifyrealname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildJoin GuildJoin = 360;
      case 360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildjoin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildMemberChange MemberChange = 361;
      case 361:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_memberchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildKickoff GuildKickoff = 362;
      case 362:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildkickoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildRoleChange GuildRoleChange = 363;
      case 363:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildrolechange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildAttrChange GuildAttrChange = 364;
      case 364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildattrchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildChat GuildChat = 365;
      case 365:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildchat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfNewGuildLog NewGuildLog = 366;
      case 366:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_newguildlog(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildApplicantChange ApplicantChange = 367;
      case 367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicantchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildInviteeChange InviteeChange = 368;
      case 368:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviteechange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildNewInvite GuildNewInvite = 379;
      case 379:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildnewinvite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGuildInfo GuildInfo = 380;
      case 380:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfVngCommentAwardReset VngAwardReset = 400;
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_vngawardreset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAdAward AdAward = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAdCount AdCount = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_adcount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUIForbid UIForbid = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_uiforbid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpUpdateMessengerPos PvpUpdateMessengerPos = 522;
      case 522:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpupdatemessengerpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpPlayerLoggedIn PvpPlayerLoggedIn = 523;
      case 523:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpplayerloggedin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPassThrough PassThrough = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_passthrough(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAA AA = 570;
      case 570:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_aa(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpReconnect PvpReconnect = 571;
      case 571:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpreconnect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpdateBattleResult UpdateBattleResult = 572;
      case 572:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatebattleresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfVisitPlayer VisitPlayer = 573;
      case 573:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_visitplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfKrIdentityAuth KrIdentityAuth = 574;
      case 574:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_kridentityauth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfKrAddictionTip KrAddictionTip = 575;
      case 575:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_kraddictiontip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLeaveGameEarly LeaveGameEarly = 576;
      case 576:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_leavegameearly(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfKrAddictionCountdown KrAddictionCountdown = 577;
      case 577:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kraddictioncountdown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfHistoryChatMsg HistroyChatMsg = 578;
      case 578:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_histroychatmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfSystemGmTime GMTime = 579;
      case 579:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gmtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChangeName ChangeName = 580;
      case 580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_changename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfFirstPay FirstPay = 581;
      case 581:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstpay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPlayerExpChanged ExpChanged = 582;
      case 582:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expchanged(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTaskProgress TaskProgress = 583;
      case 583:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskprogress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfNewPlayerGuideEnded NewPlayerGuideEnded = 584;
      case 584:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_newplayerguideended(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTasksInfo TasksInfo = 585;
      case 585:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tasksinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpAwardsInfo PvpAwardsInfo = 586;
      case 586:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpawardsinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAddAward AddAward = 587;
      case 587:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_addaward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfLimitRefresh LimitRefresh = 588;
      case 588:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_limitrefresh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpdateNotice UpdateNotice = 589;
      case 589:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatenotice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpdatePveChallengeCount UpdatePveChallengeCount = 590;
      case 590:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatepvechallengecount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAdDiscount AdDiscount = 591;
      case 591:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_addiscount(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfCalcMmr CalcMmr = 592;
      case 592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_calcmmr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBag Bag = 593;
      case 593:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfItemAttributes ItemAttributes = 594;
      case 594:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_itemattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPvpAffixTrigger PVPAffixTrigger = 595;
      case 595:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpaffixtrigger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpdatePvpData UpdatePvpData = 596;
      case 596:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_updatepvpdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpgradePassport UpgradePassport = 597;
      case 597:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradepassport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUpdateTeamDeBuff UpdateTeamDeBuff = 598;
      case 598:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_updateteamdebuff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPveEval PveEval = 599;
      case 599:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pveeval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfUnlockCardGroup UnlockCardGroup = 600;
      case 600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_unlockcardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfCustomPveActivity CustomPveActivity = 601;
      case 601:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_custompveactivity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGmBan CSNtfGmBan = 602;
      case 602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_csntfgmban(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfTDPlayerInfo TDPlayerInfo = 603;
      case 603:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tdplayerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMentorInviteMsg MentorInviteMsg = 604;
      case 604:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorinvitemsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfBecomeMentor BecomeMentor = 605;
      case 605:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_becomementor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMentorRelation MentorRelation = 606;
      case 606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorrelation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfPupilTaskUpdate MentorShipTaskUpdate = 607;
      case 607:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorshiptaskupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfMentorLevel MentorLevel = 608;
      case 608:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorlevel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfCurDressUpdate CurDressUpdate = 609;
      case 609:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_curdressupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfChangeExchangeMark ChangeExchangeMark = 610;
      case 610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_changeexchangemark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfRefreshPassport RefreshPassport = 611;
      case 611:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_refreshpassport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfGmRemoveMail GmRemoveMail = 612;
      case 612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gmremovemail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSNtfAutoUseItem AutoUseItem = 613;
      case 613:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_autouseitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSNtfKickOff KickOff = 1;
  if (this->_internal_has_kickoff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::kickoff(this),
        _Internal::kickoff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWait NtfWait = 2;
  if (this->_internal_has_ntfwait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ntfwait(this),
        _Internal::ntfwait(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassDayBody PassDay = 3;
  if (this->_internal_has_passday()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::passday(this),
        _Internal::passday(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassWeekBody PassWeek = 4;
  if (this->_internal_has_passweek()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::passweek(this),
        _Internal::passweek(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassMonthBody PassMonth = 5;
  if (this->_internal_has_passmonth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::passmonth(this),
        _Internal::passmonth(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWorldChat WorldChat = 6;
  if (this->_internal_has_worldchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::worldchat(this),
        _Internal::worldchat(this).GetCachedSize(), target, stream);
  }

  // repeated .msg.CSDTMail Mails = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mails_size()); i < n; i++) {
    const auto& repfield = this->_internal_mails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .msg.CSNtfHeadPic HeadPic = 8;
  if (this->_internal_has_headpic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::headpic(this),
        _Internal::headpic(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpMatch PvpMatch = 9;
  if (this->_internal_has_pvpmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pvpmatch(this),
        _Internal::pvpmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvp Pvp = 10;
  if (this->_internal_has_pvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::pvp(this),
        _Internal::pvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpMatchCancel PvpMatchCancel = 11;
  if (this->_internal_has_pvpmatchcancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pvpmatchcancel(this),
        _Internal::pvpmatchcancel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpStatus PvpStatus = 12;
  if (this->_internal_has_pvpstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::pvpstatus(this),
        _Internal::pvpstatus(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpPlayerReady NtfPvpPlayerReady = 13;
  if (this->_internal_has_ntfpvpplayerready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::ntfpvpplayerready(this),
        _Internal::ntfpvpplayerready(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpBegin PvpBegin = 14;
  if (this->_internal_has_pvpbegin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::pvpbegin(this),
        _Internal::pvpbegin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPlayerFinish PlayerFinish = 16;
  if (this->_internal_has_playerfinish()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::playerfinish(this),
        _Internal::playerfinish(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpEnd PvpEnd = 17;
  if (this->_internal_has_pvpend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::pvpend(this),
        _Internal::pvpend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMarquee Marquee = 18;
  if (this->_internal_has_marquee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::marquee(this),
        _Internal::marquee(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRemoveMarquee RemoveMarquee = 19;
  if (this->_internal_has_removemarquee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::removemarquee(this),
        _Internal::removemarquee(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLoadingProgress LoadingProgress = 20;
  if (this->_internal_has_loadingprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::loadingprogress(this),
        _Internal::loadingprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpChat PvpChat = 21;
  if (this->_internal_has_pvpchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::pvpchat(this),
        _Internal::pvpchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfReload Reload = 22;
  if (this->_internal_has_reload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::reload(this),
        _Internal::reload(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPay Pay = 23;
  if (this->_internal_has_pay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::pay(this),
        _Internal::pay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChat Chat = 24;
  if (this->_internal_has_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfFollowList FollowList = 25;
  if (this->_internal_has_followlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::followlist(this),
        _Internal::followlist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfNewFollower NewFollower = 26;
  if (this->_internal_has_newfollower()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::newfollower(this),
        _Internal::newfollower(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLostFollower LostFollower = 27;
  if (this->_internal_has_lostfollower()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::lostfollower(this),
        _Internal::lostfollower(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfInviteJoinTeam InviteJoinTeam = 28;
  if (this->_internal_has_invitejointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::invitejointeam(this),
        _Internal::invitejointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPlayerJoinTeam PlayerJoinTeam = 29;
  if (this->_internal_has_playerjointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::playerjointeam(this),
        _Internal::playerjointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPlayerLeaveTeam PlayerLeaveTeam = 30;
  if (this->_internal_has_playerleaveteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::playerleaveteam(this),
        _Internal::playerleaveteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfKickOffTeamPlayer KickOffTeamPlayer = 31;
  if (this->_internal_has_kickoffteamplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::kickoffteamplayer(this),
        _Internal::kickoffteamplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamMsg TeamMsg = 32;
  if (this->_internal_has_teammsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::teammsg(this),
        _Internal::teammsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamReady TeamReady = 33;
  if (this->_internal_has_teamready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::teamready(this),
        _Internal::teamready(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRejectJoinTeam RejectJoinTeam = 34;
  if (this->_internal_has_rejectjointeam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::rejectjointeam(this),
        _Internal::rejectjointeam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfNotice Notice = 35;
  if (this->_internal_has_notice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::notice(this),
        _Internal::notice(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRemoveNotice RemoveNotice = 36;
  if (this->_internal_has_removenotice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::removenotice(this),
        _Internal::removenotice(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpgradeBattleStage UpgradeBattleStage = 37;
  if (this->_internal_has_upgradebattlestage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::upgradebattlestage(this),
        _Internal::upgradebattlestage(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassportTaskProgress PassportTaskProgress = 38;
  if (this->_internal_has_passporttaskprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::passporttaskprogress(this),
        _Internal::passporttaskprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRankSeasonEval RankSeasonEval = 39;
  if (this->_internal_has_rankseasoneval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::rankseasoneval(this),
        _Internal::rankseasoneval(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBindAccounts BindAccounts = 40;
  if (this->_internal_has_bindaccounts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::bindaccounts(this),
        _Internal::bindaccounts(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfSeasonTaskProgress SeasonTaskProgress = 41;
  if (this->_internal_has_seasontaskprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::seasontaskprogress(this),
        _Internal::seasontaskprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAlphaActivity AlphaActivity = 42;
  if (this->_internal_has_alphaactivity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::alphaactivity(this),
        _Internal::alphaactivity(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfOffSeasonToNewSeason OffSeasonToNewSeason = 43;
  if (this->_internal_has_offseasontonewseason()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::offseasontonewseason(this),
        _Internal::offseasontonewseason(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLanguageMd5List LanguageMd5List = 44;
  if (this->_internal_has_languagemd5list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::languagemd5list(this),
        _Internal::languagemd5list(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfActivityProgress ActivityProgress = 45;
  if (this->_internal_has_activityprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::activityprogress(this),
        _Internal::activityprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRemoveActivity RemoveActivity = 46;
  if (this->_internal_has_removeactivity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::removeactivity(this),
        _Internal::removeactivity(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfActivityConfig ActivityConfig = 47;
  if (this->_internal_has_activityconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::activityconfig(this),
        _Internal::activityconfig(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMeleeTaskProgress MeleeTaskProgress = 48;
  if (this->_internal_has_meleetaskprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::meleetaskprogress(this),
        _Internal::meleetaskprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfSetTeamMode SetTeamMode = 49;
  if (this->_internal_has_setteammode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::setteammode(this),
        _Internal::setteammode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassportOpen PassportOpen = 50;
  if (this->_internal_has_passportopen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::passportopen(this),
        _Internal::passportopen(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassportClose PassportClose = 51;
  if (this->_internal_has_passportclose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::passportclose(this),
        _Internal::passportclose(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWeekIndex WeekIndex = 52;
  if (this->_internal_has_weekindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::weekindex(this),
        _Internal::weekindex(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpHistory PvpHistory = 53;
  if (this->_internal_has_pvphistory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::pvphistory(this),
        _Internal::pvphistory(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamPvpEnd TeamPvpEnd = 54;
  if (this->_internal_has_teampvpend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::teampvpend(this),
        _Internal::teampvpend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfProbeNetDelay ProbeNetDelay = 55;
  if (this->_internal_has_probenetdelay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::probenetdelay(this),
        _Internal::probenetdelay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRefreshGoods RefreshGoods = 56;
  if (this->_internal_has_refreshgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::refreshgoods(this),
        _Internal::refreshgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRemoveEggs RemoveEggs = 57;
  if (this->_internal_has_removeeggs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::removeeggs(this),
        _Internal::removeeggs(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfSwitchSet SwitchSet = 58;
  if (this->_internal_has_switchset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::switchset(this),
        _Internal::switchset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBlacklist Blacklist = 59;
  if (this->_internal_has_blacklist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::blacklist(this),
        _Internal::blacklist(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBindPhoneNumberSwitch BindPhoneNumberSwitch = 60;
  if (this->_internal_has_bindphonenumberswitch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::bindphonenumberswitch(this),
        _Internal::bindphonenumberswitch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWorldInvite WorldInvite = 61;
  if (this->_internal_has_worldinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::worldinvite(this),
        _Internal::worldinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMallNotice MallNotice = 62;
  if (this->_internal_has_mallnotice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::mallnotice(this),
        _Internal::mallnotice(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPrivilege Privilege = 63;
  if (this->_internal_has_privilege()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::privilege(this),
        _Internal::privilege(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAARemind AARemind = 64;
  if (this->_internal_has_aaremind()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::aaremind(this),
        _Internal::aaremind(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAABan AABan = 65;
  if (this->_internal_has_aaban()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::aaban(this),
        _Internal::aaban(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAAVerify AAVerify = 66;
  if (this->_internal_has_aaverify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::aaverify(this),
        _Internal::aaverify(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPhoneNumber PhoneNumber = 67;
  if (this->_internal_has_phonenumber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::phonenumber(this),
        _Internal::phonenumber(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAntiCallBack AntiCallBack = 68;
  if (this->_internal_has_anticallback()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::anticallback(this),
        _Internal::anticallback(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfFortuneBagTime FortuneBagTime = 69;
  if (this->_internal_has_fortunebagtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::fortunebagtime(this),
        _Internal::fortunebagtime(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpdateItem UpdateItem = 70;
  if (this->_internal_has_updateitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::updateitem(this),
        _Internal::updateitem(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfCreditScore CreditScore = 71;
  if (this->_internal_has_creditscore()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::creditscore(this),
        _Internal::creditscore(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBuffAct BuffAct = 72;
  if (this->_internal_has_buffact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, _Internal::buffact(this),
        _Internal::buffact(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfActivityGroup ActivityGroup = 73;
  if (this->_internal_has_activitygroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, _Internal::activitygroup(this),
        _Internal::activitygroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfClearChat ClearChat = 74;
  if (this->_internal_has_clearchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::clearchat(this),
        _Internal::clearchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfForbidInfo ForbidInfo = 75;
  if (this->_internal_has_forbidinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::forbidinfo(this),
        _Internal::forbidinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMidasDiamond MidasDiamond = 76;
  if (this->_internal_has_midasdiamond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::midasdiamond(this),
        _Internal::midasdiamond(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfJoinVoiceTeam JoinVoiceTeam = 77;
  if (this->_internal_has_joinvoiceteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::joinvoiceteam(this),
        _Internal::joinvoiceteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfJoinVoicePvp JoinVoicePvp = 78;
  if (this->_internal_has_joinvoicepvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::joinvoicepvp(this),
        _Internal::joinvoicepvp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfJoinVoiceCamp JoinVoiceCamp = 79;
  if (this->_internal_has_joinvoicecamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::joinvoicecamp(this),
        _Internal::joinvoicecamp(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWxVVip WxVVip = 80;
  if (this->_internal_has_wxvvip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::wxvvip(this),
        _Internal::wxvvip(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfFreeFlow FreeFlow = 81;
  if (this->_internal_has_freeflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::freeflow(this),
        _Internal::freeflow(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfObserveStatus ObserveStatus = 82;
  if (this->_internal_has_observestatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::observestatus(this),
        _Internal::observestatus(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGameMarquee GameMarquee = 83;
  if (this->_internal_has_gamemarquee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(83, _Internal::gamemarquee(this),
        _Internal::gamemarquee(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWxRedPacket WxRedPacket = 84;
  if (this->_internal_has_wxredpacket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::wxredpacket(this),
        _Internal::wxredpacket(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGmSysMsg GmSysMsg = 85;
  if (this->_internal_has_gmsysmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::gmsysmsg(this),
        _Internal::gmsysmsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfNewPunishment NewPunishment = 86;
  if (this->_internal_has_newpunishment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::newpunishment(this),
        _Internal::newpunishment(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamSlot TeamSlot = 87;
  if (this->_internal_has_teamslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::teamslot(this),
        _Internal::teamslot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamSubMode TeamSubMode = 88;
  if (this->_internal_has_teamsubmode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::teamsubmode(this),
        _Internal::teamsubmode(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamSlotStatus TeamSlotStatus = 89;
  if (this->_internal_has_teamslotstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(89, _Internal::teamslotstatus(this),
        _Internal::teamslotstatus(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPunishmentInfo PunishmentInfo = 90;
  if (this->_internal_has_punishmentinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, _Internal::punishmentinfo(this),
        _Internal::punishmentinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRemovePunishment RemovePunishment = 91;
  if (this->_internal_has_removepunishment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, _Internal::removepunishment(this),
        _Internal::removepunishment(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpConfirm PvpConfirm = 92;
  if (this->_internal_has_pvpconfirm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(92, _Internal::pvpconfirm(this),
        _Internal::pvpconfirm(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMatchSuccess MatchSuccess = 93;
  if (this->_internal_has_matchsuccess()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(93, _Internal::matchsuccess(this),
        _Internal::matchsuccess(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfOldBusinessPlayer OldBusinessPlayer = 94;
  if (this->_internal_has_oldbusinessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(94, _Internal::oldbusinessplayer(this),
        _Internal::oldbusinessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChangeTeamSlot ChangeTeamSlot = 95;
  if (this->_internal_has_changeteamslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(95, _Internal::changeteamslot(this),
        _Internal::changeteamslot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRefuseChangeTeamSlot RefuseChangeTeamSlot = 96;
  if (this->_internal_has_refusechangeteamslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(96, _Internal::refusechangeteamslot(this),
        _Internal::refusechangeteamslot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfCancelChangeSlot CancelChangeSlot = 97;
  if (this->_internal_has_cancelchangeslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(97, _Internal::cancelchangeslot(this),
        _Internal::cancelchangeslot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfShowChessSkin ShowChessSkin = 98;
  if (this->_internal_has_showchessskin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(98, _Internal::showchessskin(this),
        _Internal::showchessskin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfOnHelpReddot OnHelpReddot = 99;
  if (this->_internal_has_onhelpreddot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::onhelpreddot(this),
        _Internal::onhelpreddot(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBagUpdate BagUpdate = 100;
  if (this->_internal_has_bagupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::bagupdate(this),
        _Internal::bagupdate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRefreshMelee RefreshMelee = 101;
  if (this->_internal_has_refreshmelee()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::refreshmelee(this),
        _Internal::refreshmelee(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWebLogin WebLogin = 102;
  if (this->_internal_has_weblogin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::weblogin(this),
        _Internal::weblogin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfCurrentTournament CurrentTournament = 103;
  if (this->_internal_has_currenttournament()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::currenttournament(this),
        _Internal::currenttournament(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTournamentBegin TournamentBegin = 104;
  if (this->_internal_has_tournamentbegin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::tournamentbegin(this),
        _Internal::tournamentbegin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTournamentEnrollBegin TournamentEnrollBegin = 105;
  if (this->_internal_has_tournamentenrollbegin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::tournamentenrollbegin(this),
        _Internal::tournamentenrollbegin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTournamentEnrollEnd TournamentEnrollEnd = 106;
  if (this->_internal_has_tournamentenrollend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::tournamentenrollend(this),
        _Internal::tournamentenrollend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfJoinTournamentRoom JoinTournamentRoom = 107;
  if (this->_internal_has_jointournamentroom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::jointournamentroom(this),
        _Internal::jointournamentroom(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTournamentEnd TournamentEnd = 108;
  if (this->_internal_has_tournamentend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::tournamentend(this),
        _Internal::tournamentend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTournamentOut TournamentOut = 109;
  if (this->_internal_has_tournamentout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::tournamentout(this),
        _Internal::tournamentout(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTournamentRoundEnd TournamentRoundEnd = 110;
  if (this->_internal_has_tournamentroundend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::tournamentroundend(this),
        _Internal::tournamentroundend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLuckStarAward LuckStarAward = 111;
  if (this->_internal_has_luckstaraward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(111, _Internal::luckstaraward(this),
        _Internal::luckstaraward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfInviteObserve InviteObserve = 112;
  if (this->_internal_has_inviteobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(112, _Internal::inviteobserve(this),
        _Internal::inviteobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRejectObserve RejectObserve = 113;
  if (this->_internal_has_rejectobserve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, _Internal::rejectobserve(this),
        _Internal::rejectobserve(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChestCount ChestCount = 114;
  if (this->_internal_has_chestcount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(114, _Internal::chestcount(this),
        _Internal::chestcount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRecruitInfo RecruitInfo = 115;
  if (this->_internal_has_recruitinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, _Internal::recruitinfo(this),
        _Internal::recruitinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRecruitPlayer RecruitPlayer = 116;
  if (this->_internal_has_recruitplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(116, _Internal::recruitplayer(this),
        _Internal::recruitplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRecruitPlayerBattle RecruitPlayerBattle = 117;
  if (this->_internal_has_recruitplayerbattle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::recruitplayerbattle(this),
        _Internal::recruitplayerbattle(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBetOnBounty BetOnBounty = 118;
  if (this->_internal_has_betonbounty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, _Internal::betonbounty(this),
        _Internal::betonbounty(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfActivityTaskUnlock ActivityTaskUnlock = 119;
  if (this->_internal_has_activitytaskunlock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, _Internal::activitytaskunlock(this),
        _Internal::activitytaskunlock(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPsServerOnly PsServerOnly = 120;
  if (this->_internal_has_psserveronly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, _Internal::psserveronly(this),
        _Internal::psserveronly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAddThirdPvpInfo AddThirdPvpInfo = 121;
  if (this->_internal_has_addthirdpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(121, _Internal::addthirdpvpinfo(this),
        _Internal::addthirdpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfDelThirdPvpInfo DelThirdPvpInfo = 122;
  if (this->_internal_has_delthirdpvpinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(122, _Internal::delthirdpvpinfo(this),
        _Internal::delthirdpvpinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPs4ServerOnly Ps4ServerOnly = 123;
  if (this->_internal_has_ps4serveronly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(123, _Internal::ps4serveronly(this),
        _Internal::ps4serveronly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLuckMallGoods LuckMallGoods = 124;
  if (this->_internal_has_luckmallgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(124, _Internal::luckmallgoods(this),
        _Internal::luckmallgoods(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChessListErr ChessListErr = 125;
  if (this->_internal_has_chesslisterr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(125, _Internal::chesslisterr(this),
        _Internal::chesslisterr(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChestRecord ChestRecord = 126;
  if (this->_internal_has_chestrecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(126, _Internal::chestrecord(this),
        _Internal::chestrecord(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGOAInfo GOAInfo = 127;
  if (this->_internal_has_goainfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(127, _Internal::goainfo(this),
        _Internal::goainfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMedalInfos MedalInfo = 128;
  if (this->_internal_has_medalinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, _Internal::medalinfo(this),
        _Internal::medalinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMedalId MedalId = 129;
  if (this->_internal_has_medalid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(129, _Internal::medalid(this),
        _Internal::medalid(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpReset PvpReset = 130;
  if (this->_internal_has_pvpreset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::pvpreset(this),
        _Internal::pvpreset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfDelMail DelMail = 131;
  if (this->_internal_has_delmail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(131, _Internal::delmail(this),
        _Internal::delmail(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfItemInfo ItemInfo = 132;
  if (this->_internal_has_iteminfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(132, _Internal::iteminfo(this),
        _Internal::iteminfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassportNum PassportNum = 133;
  if (this->_internal_has_passportnum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, _Internal::passportnum(this),
        _Internal::passportnum(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassportYearCardNum PassportYearCardNum = 134;
  if (this->_internal_has_passportyearcardnum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(134, _Internal::passportyearcardnum(this),
        _Internal::passportyearcardnum(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamOP TeamOP = 300;
  if (this->_internal_has_teamop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::teamop(this),
        _Internal::teamop(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamDismiss TeamDismiss = 301;
  if (this->_internal_has_teamdismiss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::teamdismiss(this),
        _Internal::teamdismiss(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfSwitchModeInTeam SwitchModeInTeam = 302;
  if (this->_internal_has_switchmodeinteam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::switchmodeinteam(this),
        _Internal::switchmodeinteam(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAddBanner AddBanner = 303;
  if (this->_internal_has_addbanner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::addbanner(this),
        _Internal::addbanner(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRemoveBanner RemoveBanner = 304;
  if (this->_internal_has_removebanner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::removebanner(this),
        _Internal::removebanner(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfSingleRoundFlow SingleRoundFlow = 305;
  if (this->_internal_has_singleroundflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::singleroundflow(this),
        _Internal::singleroundflow(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTeamStatus TeamStatus = 306;
  if (this->_internal_has_teamstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(306, _Internal::teamstatus(this),
        _Internal::teamstatus(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTNGameEnd TNGameEnd = 320;
  if (this->_internal_has_tngameend()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(320, _Internal::tngameend(this),
        _Internal::tngameend(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPlayerLackResourceInTeam PlayerLackResource = 330;
  if (this->_internal_has_playerlackresource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(330, _Internal::playerlackresource(this),
        _Internal::playerlackresource(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfFavMapRemoved FavMapRemoved = 331;
  if (this->_internal_has_favmapremoved()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(331, _Internal::favmapremoved(this),
        _Internal::favmapremoved(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfWorkshopMatchResult WorkshopMatchResult = 332;
  if (this->_internal_has_workshopmatchresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(332, _Internal::workshopmatchresult(this),
        _Internal::workshopmatchresult(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBigWinnerExpandMatch BigWinnerExpandMatch = 333;
  if (this->_internal_has_bigwinnerexpandmatch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(333, _Internal::bigwinnerexpandmatch(this),
        _Internal::bigwinnerexpandmatch(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfVerifyRealName VerifyRealName = 350;
  if (this->_internal_has_verifyrealname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(350, _Internal::verifyrealname(this),
        _Internal::verifyrealname(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildJoin GuildJoin = 360;
  if (this->_internal_has_guildjoin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(360, _Internal::guildjoin(this),
        _Internal::guildjoin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildMemberChange MemberChange = 361;
  if (this->_internal_has_memberchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(361, _Internal::memberchange(this),
        _Internal::memberchange(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildKickoff GuildKickoff = 362;
  if (this->_internal_has_guildkickoff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(362, _Internal::guildkickoff(this),
        _Internal::guildkickoff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildRoleChange GuildRoleChange = 363;
  if (this->_internal_has_guildrolechange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(363, _Internal::guildrolechange(this),
        _Internal::guildrolechange(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildAttrChange GuildAttrChange = 364;
  if (this->_internal_has_guildattrchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(364, _Internal::guildattrchange(this),
        _Internal::guildattrchange(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildChat GuildChat = 365;
  if (this->_internal_has_guildchat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(365, _Internal::guildchat(this),
        _Internal::guildchat(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfNewGuildLog NewGuildLog = 366;
  if (this->_internal_has_newguildlog()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(366, _Internal::newguildlog(this),
        _Internal::newguildlog(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildApplicantChange ApplicantChange = 367;
  if (this->_internal_has_applicantchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(367, _Internal::applicantchange(this),
        _Internal::applicantchange(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildInviteeChange InviteeChange = 368;
  if (this->_internal_has_inviteechange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(368, _Internal::inviteechange(this),
        _Internal::inviteechange(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildNewInvite GuildNewInvite = 379;
  if (this->_internal_has_guildnewinvite()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(379, _Internal::guildnewinvite(this),
        _Internal::guildnewinvite(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGuildInfo GuildInfo = 380;
  if (this->_internal_has_guildinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(380, _Internal::guildinfo(this),
        _Internal::guildinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfVngCommentAwardReset VngAwardReset = 400;
  if (this->_internal_has_vngawardreset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(400, _Internal::vngawardreset(this),
        _Internal::vngawardreset(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAdAward AdAward = 401;
  if (this->_internal_has_adaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(401, _Internal::adaward(this),
        _Internal::adaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAdCount AdCount = 402;
  if (this->_internal_has_adcount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(402, _Internal::adcount(this),
        _Internal::adcount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUIForbid UIForbid = 403;
  if (this->_internal_has_uiforbid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(403, _Internal::uiforbid(this),
        _Internal::uiforbid(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpUpdateMessengerPos PvpUpdateMessengerPos = 522;
  if (this->_internal_has_pvpupdatemessengerpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(522, _Internal::pvpupdatemessengerpos(this),
        _Internal::pvpupdatemessengerpos(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpPlayerLoggedIn PvpPlayerLoggedIn = 523;
  if (this->_internal_has_pvpplayerloggedin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(523, _Internal::pvpplayerloggedin(this),
        _Internal::pvpplayerloggedin(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPassThrough PassThrough = 566;
  if (this->_internal_has_passthrough()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(566, _Internal::passthrough(this),
        _Internal::passthrough(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAA AA = 570;
  if (this->_internal_has_aa()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(570, _Internal::aa(this),
        _Internal::aa(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpReconnect PvpReconnect = 571;
  if (this->_internal_has_pvpreconnect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(571, _Internal::pvpreconnect(this),
        _Internal::pvpreconnect(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpdateBattleResult UpdateBattleResult = 572;
  if (this->_internal_has_updatebattleresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(572, _Internal::updatebattleresult(this),
        _Internal::updatebattleresult(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfVisitPlayer VisitPlayer = 573;
  if (this->_internal_has_visitplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(573, _Internal::visitplayer(this),
        _Internal::visitplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfKrIdentityAuth KrIdentityAuth = 574;
  if (this->_internal_has_kridentityauth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(574, _Internal::kridentityauth(this),
        _Internal::kridentityauth(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfKrAddictionTip KrAddictionTip = 575;
  if (this->_internal_has_kraddictiontip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(575, _Internal::kraddictiontip(this),
        _Internal::kraddictiontip(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLeaveGameEarly LeaveGameEarly = 576;
  if (this->_internal_has_leavegameearly()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(576, _Internal::leavegameearly(this),
        _Internal::leavegameearly(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfKrAddictionCountdown KrAddictionCountdown = 577;
  if (this->_internal_has_kraddictioncountdown()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(577, _Internal::kraddictioncountdown(this),
        _Internal::kraddictioncountdown(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfHistoryChatMsg HistroyChatMsg = 578;
  if (this->_internal_has_histroychatmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(578, _Internal::histroychatmsg(this),
        _Internal::histroychatmsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfSystemGmTime GMTime = 579;
  if (this->_internal_has_gmtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(579, _Internal::gmtime(this),
        _Internal::gmtime(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChangeName ChangeName = 580;
  if (this->_internal_has_changename()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(580, _Internal::changename(this),
        _Internal::changename(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfFirstPay FirstPay = 581;
  if (this->_internal_has_firstpay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(581, _Internal::firstpay(this),
        _Internal::firstpay(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPlayerExpChanged ExpChanged = 582;
  if (this->_internal_has_expchanged()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(582, _Internal::expchanged(this),
        _Internal::expchanged(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTaskProgress TaskProgress = 583;
  if (this->_internal_has_taskprogress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(583, _Internal::taskprogress(this),
        _Internal::taskprogress(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfNewPlayerGuideEnded NewPlayerGuideEnded = 584;
  if (this->_internal_has_newplayerguideended()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(584, _Internal::newplayerguideended(this),
        _Internal::newplayerguideended(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTasksInfo TasksInfo = 585;
  if (this->_internal_has_tasksinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(585, _Internal::tasksinfo(this),
        _Internal::tasksinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpAwardsInfo PvpAwardsInfo = 586;
  if (this->_internal_has_pvpawardsinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(586, _Internal::pvpawardsinfo(this),
        _Internal::pvpawardsinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAddAward AddAward = 587;
  if (this->_internal_has_addaward()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(587, _Internal::addaward(this),
        _Internal::addaward(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfLimitRefresh LimitRefresh = 588;
  if (this->_internal_has_limitrefresh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(588, _Internal::limitrefresh(this),
        _Internal::limitrefresh(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpdateNotice UpdateNotice = 589;
  if (this->_internal_has_updatenotice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(589, _Internal::updatenotice(this),
        _Internal::updatenotice(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpdatePveChallengeCount UpdatePveChallengeCount = 590;
  if (this->_internal_has_updatepvechallengecount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(590, _Internal::updatepvechallengecount(this),
        _Internal::updatepvechallengecount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAdDiscount AdDiscount = 591;
  if (this->_internal_has_addiscount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(591, _Internal::addiscount(this),
        _Internal::addiscount(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfCalcMmr CalcMmr = 592;
  if (this->_internal_has_calcmmr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(592, _Internal::calcmmr(this),
        _Internal::calcmmr(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBag Bag = 593;
  if (this->_internal_has_bag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(593, _Internal::bag(this),
        _Internal::bag(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfItemAttributes ItemAttributes = 594;
  if (this->_internal_has_itemattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(594, _Internal::itemattributes(this),
        _Internal::itemattributes(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPvpAffixTrigger PVPAffixTrigger = 595;
  if (this->_internal_has_pvpaffixtrigger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(595, _Internal::pvpaffixtrigger(this),
        _Internal::pvpaffixtrigger(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpdatePvpData UpdatePvpData = 596;
  if (this->_internal_has_updatepvpdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(596, _Internal::updatepvpdata(this),
        _Internal::updatepvpdata(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpgradePassport UpgradePassport = 597;
  if (this->_internal_has_upgradepassport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(597, _Internal::upgradepassport(this),
        _Internal::upgradepassport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUpdateTeamDeBuff UpdateTeamDeBuff = 598;
  if (this->_internal_has_updateteamdebuff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(598, _Internal::updateteamdebuff(this),
        _Internal::updateteamdebuff(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPveEval PveEval = 599;
  if (this->_internal_has_pveeval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(599, _Internal::pveeval(this),
        _Internal::pveeval(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfUnlockCardGroup UnlockCardGroup = 600;
  if (this->_internal_has_unlockcardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(600, _Internal::unlockcardgroup(this),
        _Internal::unlockcardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfCustomPveActivity CustomPveActivity = 601;
  if (this->_internal_has_custompveactivity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(601, _Internal::custompveactivity(this),
        _Internal::custompveactivity(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGmBan CSNtfGmBan = 602;
  if (this->_internal_has_csntfgmban()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(602, _Internal::csntfgmban(this),
        _Internal::csntfgmban(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfTDPlayerInfo TDPlayerInfo = 603;
  if (this->_internal_has_tdplayerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(603, _Internal::tdplayerinfo(this),
        _Internal::tdplayerinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMentorInviteMsg MentorInviteMsg = 604;
  if (this->_internal_has_mentorinvitemsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(604, _Internal::mentorinvitemsg(this),
        _Internal::mentorinvitemsg(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfBecomeMentor BecomeMentor = 605;
  if (this->_internal_has_becomementor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(605, _Internal::becomementor(this),
        _Internal::becomementor(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMentorRelation MentorRelation = 606;
  if (this->_internal_has_mentorrelation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(606, _Internal::mentorrelation(this),
        _Internal::mentorrelation(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfPupilTaskUpdate MentorShipTaskUpdate = 607;
  if (this->_internal_has_mentorshiptaskupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(607, _Internal::mentorshiptaskupdate(this),
        _Internal::mentorshiptaskupdate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfMentorLevel MentorLevel = 608;
  if (this->_internal_has_mentorlevel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(608, _Internal::mentorlevel(this),
        _Internal::mentorlevel(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfCurDressUpdate CurDressUpdate = 609;
  if (this->_internal_has_curdressupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(609, _Internal::curdressupdate(this),
        _Internal::curdressupdate(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfChangeExchangeMark ChangeExchangeMark = 610;
  if (this->_internal_has_changeexchangemark()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(610, _Internal::changeexchangemark(this),
        _Internal::changeexchangemark(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfRefreshPassport RefreshPassport = 611;
  if (this->_internal_has_refreshpassport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(611, _Internal::refreshpassport(this),
        _Internal::refreshpassport(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfGmRemoveMail GmRemoveMail = 612;
  if (this->_internal_has_gmremovemail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(612, _Internal::gmremovemail(this),
        _Internal::gmremovemail(this).GetCachedSize(), target, stream);
  }

  // .msg.CSNtfAutoUseItem AutoUseItem = 613;
  if (this->_internal_has_autouseitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(613, _Internal::autouseitem(this),
        _Internal::autouseitem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfBody)
  return target;
}

size_t CSNtfBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTMail Mails = 7;
  total_size += 1UL * this->_internal_mails_size();
  for (const auto& msg : this->_impl_.mails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msg.CSNtfKickOff KickOff = 1;
  if (this->_internal_has_kickoff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kickoff_);
  }

  // .msg.CSNtfWait NtfWait = 2;
  if (this->_internal_has_ntfwait()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ntfwait_);
  }

  // .msg.CSNtfPassDayBody PassDay = 3;
  if (this->_internal_has_passday()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passday_);
  }

  // .msg.CSNtfPassWeekBody PassWeek = 4;
  if (this->_internal_has_passweek()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passweek_);
  }

  // .msg.CSNtfPassMonthBody PassMonth = 5;
  if (this->_internal_has_passmonth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passmonth_);
  }

  // .msg.CSNtfWorldChat WorldChat = 6;
  if (this->_internal_has_worldchat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worldchat_);
  }

  // .msg.CSNtfHeadPic HeadPic = 8;
  if (this->_internal_has_headpic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.headpic_);
  }

  // .msg.CSNtfPvpMatch PvpMatch = 9;
  if (this->_internal_has_pvpmatch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpmatch_);
  }

  // .msg.CSNtfPvp Pvp = 10;
  if (this->_internal_has_pvp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvp_);
  }

  // .msg.CSNtfPvpMatchCancel PvpMatchCancel = 11;
  if (this->_internal_has_pvpmatchcancel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpmatchcancel_);
  }

  // .msg.CSNtfPvpStatus PvpStatus = 12;
  if (this->_internal_has_pvpstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpstatus_);
  }

  // .msg.CSNtfPvpPlayerReady NtfPvpPlayerReady = 13;
  if (this->_internal_has_ntfpvpplayerready()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ntfpvpplayerready_);
  }

  // .msg.CSNtfPvpBegin PvpBegin = 14;
  if (this->_internal_has_pvpbegin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpbegin_);
  }

  // .msg.CSNtfPlayerFinish PlayerFinish = 16;
  if (this->_internal_has_playerfinish()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerfinish_);
  }

  // .msg.CSNtfPvpEnd PvpEnd = 17;
  if (this->_internal_has_pvpend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpend_);
  }

  // .msg.CSNtfMarquee Marquee = 18;
  if (this->_internal_has_marquee()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.marquee_);
  }

  // .msg.CSNtfRemoveMarquee RemoveMarquee = 19;
  if (this->_internal_has_removemarquee()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removemarquee_);
  }

  // .msg.CSNtfLoadingProgress LoadingProgress = 20;
  if (this->_internal_has_loadingprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.loadingprogress_);
  }

  // .msg.CSNtfPvpChat PvpChat = 21;
  if (this->_internal_has_pvpchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpchat_);
  }

  // .msg.CSNtfReload Reload = 22;
  if (this->_internal_has_reload()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reload_);
  }

  // .msg.CSNtfPay Pay = 23;
  if (this->_internal_has_pay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pay_);
  }

  // .msg.CSNtfChat Chat = 24;
  if (this->_internal_has_chat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_);
  }

  // .msg.CSNtfFollowList FollowList = 25;
  if (this->_internal_has_followlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.followlist_);
  }

  // .msg.CSNtfNewFollower NewFollower = 26;
  if (this->_internal_has_newfollower()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newfollower_);
  }

  // .msg.CSNtfLostFollower LostFollower = 27;
  if (this->_internal_has_lostfollower()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lostfollower_);
  }

  // .msg.CSNtfInviteJoinTeam InviteJoinTeam = 28;
  if (this->_internal_has_invitejointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.invitejointeam_);
  }

  // .msg.CSNtfPlayerJoinTeam PlayerJoinTeam = 29;
  if (this->_internal_has_playerjointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerjointeam_);
  }

  // .msg.CSNtfPlayerLeaveTeam PlayerLeaveTeam = 30;
  if (this->_internal_has_playerleaveteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerleaveteam_);
  }

  // .msg.CSNtfKickOffTeamPlayer KickOffTeamPlayer = 31;
  if (this->_internal_has_kickoffteamplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kickoffteamplayer_);
  }

  // .msg.CSNtfTeamMsg TeamMsg = 32;
  if (this->_internal_has_teammsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teammsg_);
  }

  // .msg.CSNtfTeamReady TeamReady = 33;
  if (this->_internal_has_teamready()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamready_);
  }

  // .msg.CSNtfRejectJoinTeam RejectJoinTeam = 34;
  if (this->_internal_has_rejectjointeam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rejectjointeam_);
  }

  // .msg.CSNtfNotice Notice = 35;
  if (this->_internal_has_notice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.notice_);
  }

  // .msg.CSNtfRemoveNotice RemoveNotice = 36;
  if (this->_internal_has_removenotice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removenotice_);
  }

  // .msg.CSNtfUpgradeBattleStage UpgradeBattleStage = 37;
  if (this->_internal_has_upgradebattlestage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upgradebattlestage_);
  }

  // .msg.CSNtfPassportTaskProgress PassportTaskProgress = 38;
  if (this->_internal_has_passporttaskprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passporttaskprogress_);
  }

  // .msg.CSNtfRankSeasonEval RankSeasonEval = 39;
  if (this->_internal_has_rankseasoneval()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rankseasoneval_);
  }

  // .msg.CSNtfBindAccounts BindAccounts = 40;
  if (this->_internal_has_bindaccounts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindaccounts_);
  }

  // .msg.CSNtfSeasonTaskProgress SeasonTaskProgress = 41;
  if (this->_internal_has_seasontaskprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.seasontaskprogress_);
  }

  // .msg.CSNtfAlphaActivity AlphaActivity = 42;
  if (this->_internal_has_alphaactivity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alphaactivity_);
  }

  // .msg.CSNtfOffSeasonToNewSeason OffSeasonToNewSeason = 43;
  if (this->_internal_has_offseasontonewseason()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offseasontonewseason_);
  }

  // .msg.CSNtfLanguageMd5List LanguageMd5List = 44;
  if (this->_internal_has_languagemd5list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.languagemd5list_);
  }

  // .msg.CSNtfActivityProgress ActivityProgress = 45;
  if (this->_internal_has_activityprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activityprogress_);
  }

  // .msg.CSNtfRemoveActivity RemoveActivity = 46;
  if (this->_internal_has_removeactivity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeactivity_);
  }

  // .msg.CSNtfActivityConfig ActivityConfig = 47;
  if (this->_internal_has_activityconfig()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activityconfig_);
  }

  // .msg.CSNtfMeleeTaskProgress MeleeTaskProgress = 48;
  if (this->_internal_has_meleetaskprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meleetaskprogress_);
  }

  // .msg.CSNtfSetTeamMode SetTeamMode = 49;
  if (this->_internal_has_setteammode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setteammode_);
  }

  // .msg.CSNtfPassportOpen PassportOpen = 50;
  if (this->_internal_has_passportopen()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passportopen_);
  }

  // .msg.CSNtfPassportClose PassportClose = 51;
  if (this->_internal_has_passportclose()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passportclose_);
  }

  // .msg.CSNtfWeekIndex WeekIndex = 52;
  if (this->_internal_has_weekindex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weekindex_);
  }

  // .msg.CSNtfPvpHistory PvpHistory = 53;
  if (this->_internal_has_pvphistory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvphistory_);
  }

  // .msg.CSNtfTeamPvpEnd TeamPvpEnd = 54;
  if (this->_internal_has_teampvpend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teampvpend_);
  }

  // .msg.CSNtfProbeNetDelay ProbeNetDelay = 55;
  if (this->_internal_has_probenetdelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.probenetdelay_);
  }

  // .msg.CSNtfRefreshGoods RefreshGoods = 56;
  if (this->_internal_has_refreshgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refreshgoods_);
  }

  // .msg.CSNtfRemoveEggs RemoveEggs = 57;
  if (this->_internal_has_removeeggs()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removeeggs_);
  }

  // .msg.CSNtfSwitchSet SwitchSet = 58;
  if (this->_internal_has_switchset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchset_);
  }

  // .msg.CSNtfBlacklist Blacklist = 59;
  if (this->_internal_has_blacklist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blacklist_);
  }

  // .msg.CSNtfBindPhoneNumberSwitch BindPhoneNumberSwitch = 60;
  if (this->_internal_has_bindphonenumberswitch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bindphonenumberswitch_);
  }

  // .msg.CSNtfWorldInvite WorldInvite = 61;
  if (this->_internal_has_worldinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worldinvite_);
  }

  // .msg.CSNtfMallNotice MallNotice = 62;
  if (this->_internal_has_mallnotice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mallnotice_);
  }

  // .msg.CSNtfPrivilege Privilege = 63;
  if (this->_internal_has_privilege()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.privilege_);
  }

  // .msg.CSNtfAARemind AARemind = 64;
  if (this->_internal_has_aaremind()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aaremind_);
  }

  // .msg.CSNtfAABan AABan = 65;
  if (this->_internal_has_aaban()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aaban_);
  }

  // .msg.CSNtfAAVerify AAVerify = 66;
  if (this->_internal_has_aaverify()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aaverify_);
  }

  // .msg.CSNtfPhoneNumber PhoneNumber = 67;
  if (this->_internal_has_phonenumber()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phonenumber_);
  }

  // .msg.CSNtfAntiCallBack AntiCallBack = 68;
  if (this->_internal_has_anticallback()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anticallback_);
  }

  // .msg.CSNtfFortuneBagTime FortuneBagTime = 69;
  if (this->_internal_has_fortunebagtime()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fortunebagtime_);
  }

  // .msg.CSNtfUpdateItem UpdateItem = 70;
  if (this->_internal_has_updateitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updateitem_);
  }

  // .msg.CSNtfCreditScore CreditScore = 71;
  if (this->_internal_has_creditscore()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.creditscore_);
  }

  // .msg.CSNtfBuffAct BuffAct = 72;
  if (this->_internal_has_buffact()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buffact_);
  }

  // .msg.CSNtfActivityGroup ActivityGroup = 73;
  if (this->_internal_has_activitygroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activitygroup_);
  }

  // .msg.CSNtfClearChat ClearChat = 74;
  if (this->_internal_has_clearchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clearchat_);
  }

  // .msg.CSNtfForbidInfo ForbidInfo = 75;
  if (this->_internal_has_forbidinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.forbidinfo_);
  }

  // .msg.CSNtfMidasDiamond MidasDiamond = 76;
  if (this->_internal_has_midasdiamond()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.midasdiamond_);
  }

  // .msg.CSNtfJoinVoiceTeam JoinVoiceTeam = 77;
  if (this->_internal_has_joinvoiceteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoiceteam_);
  }

  // .msg.CSNtfJoinVoicePvp JoinVoicePvp = 78;
  if (this->_internal_has_joinvoicepvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoicepvp_);
  }

  // .msg.CSNtfJoinVoiceCamp JoinVoiceCamp = 79;
  if (this->_internal_has_joinvoicecamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joinvoicecamp_);
  }

  // .msg.CSNtfWxVVip WxVVip = 80;
  if (this->_internal_has_wxvvip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxvvip_);
  }

  // .msg.CSNtfFreeFlow FreeFlow = 81;
  if (this->_internal_has_freeflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.freeflow_);
  }

  // .msg.CSNtfObserveStatus ObserveStatus = 82;
  if (this->_internal_has_observestatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observestatus_);
  }

  // .msg.CSNtfGameMarquee GameMarquee = 83;
  if (this->_internal_has_gamemarquee()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gamemarquee_);
  }

  // .msg.CSNtfWxRedPacket WxRedPacket = 84;
  if (this->_internal_has_wxredpacket()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wxredpacket_);
  }

  // .msg.CSNtfGmSysMsg GmSysMsg = 85;
  if (this->_internal_has_gmsysmsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gmsysmsg_);
  }

  // .msg.CSNtfNewPunishment NewPunishment = 86;
  if (this->_internal_has_newpunishment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newpunishment_);
  }

  // .msg.CSNtfTeamSlot TeamSlot = 87;
  if (this->_internal_has_teamslot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamslot_);
  }

  // .msg.CSNtfTeamSubMode TeamSubMode = 88;
  if (this->_internal_has_teamsubmode()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamsubmode_);
  }

  // .msg.CSNtfTeamSlotStatus TeamSlotStatus = 89;
  if (this->_internal_has_teamslotstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamslotstatus_);
  }

  // .msg.CSNtfPunishmentInfo PunishmentInfo = 90;
  if (this->_internal_has_punishmentinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.punishmentinfo_);
  }

  // .msg.CSNtfRemovePunishment RemovePunishment = 91;
  if (this->_internal_has_removepunishment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removepunishment_);
  }

  // .msg.CSNtfPvpConfirm PvpConfirm = 92;
  if (this->_internal_has_pvpconfirm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpconfirm_);
  }

  // .msg.CSNtfMatchSuccess MatchSuccess = 93;
  if (this->_internal_has_matchsuccess()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matchsuccess_);
  }

  // .msg.CSNtfOldBusinessPlayer OldBusinessPlayer = 94;
  if (this->_internal_has_oldbusinessplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldbusinessplayer_);
  }

  // .msg.CSNtfChangeTeamSlot ChangeTeamSlot = 95;
  if (this->_internal_has_changeteamslot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changeteamslot_);
  }

  // .msg.CSNtfRefuseChangeTeamSlot RefuseChangeTeamSlot = 96;
  if (this->_internal_has_refusechangeteamslot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refusechangeteamslot_);
  }

  // .msg.CSNtfCancelChangeSlot CancelChangeSlot = 97;
  if (this->_internal_has_cancelchangeslot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cancelchangeslot_);
  }

  // .msg.CSNtfShowChessSkin ShowChessSkin = 98;
  if (this->_internal_has_showchessskin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.showchessskin_);
  }

  // .msg.CSNtfOnHelpReddot OnHelpReddot = 99;
  if (this->_internal_has_onhelpreddot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.onhelpreddot_);
  }

  // .msg.CSNtfBagUpdate BagUpdate = 100;
  if (this->_internal_has_bagupdate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bagupdate_);
  }

  // .msg.CSNtfRefreshMelee RefreshMelee = 101;
  if (this->_internal_has_refreshmelee()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refreshmelee_);
  }

  // .msg.CSNtfWebLogin WebLogin = 102;
  if (this->_internal_has_weblogin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weblogin_);
  }

  // .msg.CSNtfCurrentTournament CurrentTournament = 103;
  if (this->_internal_has_currenttournament()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.currenttournament_);
  }

  // .msg.CSNtfTournamentBegin TournamentBegin = 104;
  if (this->_internal_has_tournamentbegin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentbegin_);
  }

  // .msg.CSNtfTournamentEnrollBegin TournamentEnrollBegin = 105;
  if (this->_internal_has_tournamentenrollbegin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentenrollbegin_);
  }

  // .msg.CSNtfTournamentEnrollEnd TournamentEnrollEnd = 106;
  if (this->_internal_has_tournamentenrollend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentenrollend_);
  }

  // .msg.CSNtfJoinTournamentRoom JoinTournamentRoom = 107;
  if (this->_internal_has_jointournamentroom()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jointournamentroom_);
  }

  // .msg.CSNtfTournamentEnd TournamentEnd = 108;
  if (this->_internal_has_tournamentend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentend_);
  }

  // .msg.CSNtfTournamentOut TournamentOut = 109;
  if (this->_internal_has_tournamentout()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentout_);
  }

  // .msg.CSNtfTournamentRoundEnd TournamentRoundEnd = 110;
  if (this->_internal_has_tournamentroundend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournamentroundend_);
  }

  // .msg.CSNtfLuckStarAward LuckStarAward = 111;
  if (this->_internal_has_luckstaraward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.luckstaraward_);
  }

  // .msg.CSNtfInviteObserve InviteObserve = 112;
  if (this->_internal_has_inviteobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inviteobserve_);
  }

  // .msg.CSNtfRejectObserve RejectObserve = 113;
  if (this->_internal_has_rejectobserve()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rejectobserve_);
  }

  // .msg.CSNtfChestCount ChestCount = 114;
  if (this->_internal_has_chestcount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chestcount_);
  }

  // .msg.CSNtfRecruitInfo RecruitInfo = 115;
  if (this->_internal_has_recruitinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recruitinfo_);
  }

  // .msg.CSNtfRecruitPlayer RecruitPlayer = 116;
  if (this->_internal_has_recruitplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recruitplayer_);
  }

  // .msg.CSNtfRecruitPlayerBattle RecruitPlayerBattle = 117;
  if (this->_internal_has_recruitplayerbattle()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recruitplayerbattle_);
  }

  // .msg.CSNtfBetOnBounty BetOnBounty = 118;
  if (this->_internal_has_betonbounty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.betonbounty_);
  }

  // .msg.CSNtfActivityTaskUnlock ActivityTaskUnlock = 119;
  if (this->_internal_has_activitytaskunlock()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activitytaskunlock_);
  }

  // .msg.CSNtfPsServerOnly PsServerOnly = 120;
  if (this->_internal_has_psserveronly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.psserveronly_);
  }

  // .msg.CSNtfAddThirdPvpInfo AddThirdPvpInfo = 121;
  if (this->_internal_has_addthirdpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addthirdpvpinfo_);
  }

  // .msg.CSNtfDelThirdPvpInfo DelThirdPvpInfo = 122;
  if (this->_internal_has_delthirdpvpinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delthirdpvpinfo_);
  }

  // .msg.CSNtfPs4ServerOnly Ps4ServerOnly = 123;
  if (this->_internal_has_ps4serveronly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ps4serveronly_);
  }

  // .msg.CSNtfLuckMallGoods LuckMallGoods = 124;
  if (this->_internal_has_luckmallgoods()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.luckmallgoods_);
  }

  // .msg.CSNtfChessListErr ChessListErr = 125;
  if (this->_internal_has_chesslisterr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesslisterr_);
  }

  // .msg.CSNtfChestRecord ChestRecord = 126;
  if (this->_internal_has_chestrecord()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chestrecord_);
  }

  // .msg.CSNtfGOAInfo GOAInfo = 127;
  if (this->_internal_has_goainfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.goainfo_);
  }

  // .msg.CSNtfMedalInfos MedalInfo = 128;
  if (this->_internal_has_medalinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medalinfo_);
  }

  // .msg.CSNtfMedalId MedalId = 129;
  if (this->_internal_has_medalid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medalid_);
  }

  // .msg.CSNtfPvpReset PvpReset = 130;
  if (this->_internal_has_pvpreset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpreset_);
  }

  // .msg.CSNtfDelMail DelMail = 131;
  if (this->_internal_has_delmail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delmail_);
  }

  // .msg.CSNtfItemInfo ItemInfo = 132;
  if (this->_internal_has_iteminfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.iteminfo_);
  }

  // .msg.CSNtfPassportNum PassportNum = 133;
  if (this->_internal_has_passportnum()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passportnum_);
  }

  // .msg.CSNtfPassportYearCardNum PassportYearCardNum = 134;
  if (this->_internal_has_passportyearcardnum()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passportyearcardnum_);
  }

  // .msg.CSNtfTeamOP TeamOP = 300;
  if (this->_internal_has_teamop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamop_);
  }

  // .msg.CSNtfTeamDismiss TeamDismiss = 301;
  if (this->_internal_has_teamdismiss()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamdismiss_);
  }

  // .msg.CSNtfSwitchModeInTeam SwitchModeInTeam = 302;
  if (this->_internal_has_switchmodeinteam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchmodeinteam_);
  }

  // .msg.CSNtfAddBanner AddBanner = 303;
  if (this->_internal_has_addbanner()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addbanner_);
  }

  // .msg.CSNtfRemoveBanner RemoveBanner = 304;
  if (this->_internal_has_removebanner()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removebanner_);
  }

  // .msg.CSNtfSingleRoundFlow SingleRoundFlow = 305;
  if (this->_internal_has_singleroundflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.singleroundflow_);
  }

  // .msg.CSNtfTeamStatus TeamStatus = 306;
  if (this->_internal_has_teamstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teamstatus_);
  }

  // .msg.CSNtfTNGameEnd TNGameEnd = 320;
  if (this->_internal_has_tngameend()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tngameend_);
  }

  // .msg.CSNtfPlayerLackResourceInTeam PlayerLackResource = 330;
  if (this->_internal_has_playerlackresource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerlackresource_);
  }

  // .msg.CSNtfFavMapRemoved FavMapRemoved = 331;
  if (this->_internal_has_favmapremoved()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.favmapremoved_);
  }

  // .msg.CSNtfWorkshopMatchResult WorkshopMatchResult = 332;
  if (this->_internal_has_workshopmatchresult()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workshopmatchresult_);
  }

  // .msg.CSNtfBigWinnerExpandMatch BigWinnerExpandMatch = 333;
  if (this->_internal_has_bigwinnerexpandmatch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinnerexpandmatch_);
  }

  // .msg.CSNtfVerifyRealName VerifyRealName = 350;
  if (this->_internal_has_verifyrealname()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.verifyrealname_);
  }

  // .msg.CSNtfGuildJoin GuildJoin = 360;
  if (this->_internal_has_guildjoin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildjoin_);
  }

  // .msg.CSNtfGuildMemberChange MemberChange = 361;
  if (this->_internal_has_memberchange()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.memberchange_);
  }

  // .msg.CSNtfGuildKickoff GuildKickoff = 362;
  if (this->_internal_has_guildkickoff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildkickoff_);
  }

  // .msg.CSNtfGuildRoleChange GuildRoleChange = 363;
  if (this->_internal_has_guildrolechange()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildrolechange_);
  }

  // .msg.CSNtfGuildAttrChange GuildAttrChange = 364;
  if (this->_internal_has_guildattrchange()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildattrchange_);
  }

  // .msg.CSNtfGuildChat GuildChat = 365;
  if (this->_internal_has_guildchat()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildchat_);
  }

  // .msg.CSNtfNewGuildLog NewGuildLog = 366;
  if (this->_internal_has_newguildlog()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newguildlog_);
  }

  // .msg.CSNtfGuildApplicantChange ApplicantChange = 367;
  if (this->_internal_has_applicantchange()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.applicantchange_);
  }

  // .msg.CSNtfGuildInviteeChange InviteeChange = 368;
  if (this->_internal_has_inviteechange()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inviteechange_);
  }

  // .msg.CSNtfGuildNewInvite GuildNewInvite = 379;
  if (this->_internal_has_guildnewinvite()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildnewinvite_);
  }

  // .msg.CSNtfGuildInfo GuildInfo = 380;
  if (this->_internal_has_guildinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinfo_);
  }

  // .msg.CSNtfVngCommentAwardReset VngAwardReset = 400;
  if (this->_internal_has_vngawardreset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vngawardreset_);
  }

  // .msg.CSNtfAdAward AdAward = 401;
  if (this->_internal_has_adaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adaward_);
  }

  // .msg.CSNtfAdCount AdCount = 402;
  if (this->_internal_has_adcount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.adcount_);
  }

  // .msg.CSNtfUIForbid UIForbid = 403;
  if (this->_internal_has_uiforbid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uiforbid_);
  }

  // .msg.CSNtfPvpUpdateMessengerPos PvpUpdateMessengerPos = 522;
  if (this->_internal_has_pvpupdatemessengerpos()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpupdatemessengerpos_);
  }

  // .msg.CSNtfPvpPlayerLoggedIn PvpPlayerLoggedIn = 523;
  if (this->_internal_has_pvpplayerloggedin()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpplayerloggedin_);
  }

  // .msg.CSNtfPassThrough PassThrough = 566;
  if (this->_internal_has_passthrough()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.passthrough_);
  }

  // .msg.CSNtfAA AA = 570;
  if (this->_internal_has_aa()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aa_);
  }

  // .msg.CSNtfPvpReconnect PvpReconnect = 571;
  if (this->_internal_has_pvpreconnect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpreconnect_);
  }

  // .msg.CSNtfUpdateBattleResult UpdateBattleResult = 572;
  if (this->_internal_has_updatebattleresult()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatebattleresult_);
  }

  // .msg.CSNtfVisitPlayer VisitPlayer = 573;
  if (this->_internal_has_visitplayer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visitplayer_);
  }

  // .msg.CSNtfKrIdentityAuth KrIdentityAuth = 574;
  if (this->_internal_has_kridentityauth()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kridentityauth_);
  }

  // .msg.CSNtfKrAddictionTip KrAddictionTip = 575;
  if (this->_internal_has_kraddictiontip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kraddictiontip_);
  }

  // .msg.CSNtfLeaveGameEarly LeaveGameEarly = 576;
  if (this->_internal_has_leavegameearly()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leavegameearly_);
  }

  // .msg.CSNtfKrAddictionCountdown KrAddictionCountdown = 577;
  if (this->_internal_has_kraddictioncountdown()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kraddictioncountdown_);
  }

  // .msg.CSNtfHistoryChatMsg HistroyChatMsg = 578;
  if (this->_internal_has_histroychatmsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.histroychatmsg_);
  }

  // .msg.CSNtfSystemGmTime GMTime = 579;
  if (this->_internal_has_gmtime()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gmtime_);
  }

  // .msg.CSNtfChangeName ChangeName = 580;
  if (this->_internal_has_changename()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changename_);
  }

  // .msg.CSNtfFirstPay FirstPay = 581;
  if (this->_internal_has_firstpay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.firstpay_);
  }

  // .msg.CSNtfPlayerExpChanged ExpChanged = 582;
  if (this->_internal_has_expchanged()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expchanged_);
  }

  // .msg.CSNtfTaskProgress TaskProgress = 583;
  if (this->_internal_has_taskprogress()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.taskprogress_);
  }

  // .msg.CSNtfNewPlayerGuideEnded NewPlayerGuideEnded = 584;
  if (this->_internal_has_newplayerguideended()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newplayerguideended_);
  }

  // .msg.CSNtfTasksInfo TasksInfo = 585;
  if (this->_internal_has_tasksinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tasksinfo_);
  }

  // .msg.CSNtfPvpAwardsInfo PvpAwardsInfo = 586;
  if (this->_internal_has_pvpawardsinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpawardsinfo_);
  }

  // .msg.CSNtfAddAward AddAward = 587;
  if (this->_internal_has_addaward()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addaward_);
  }

  // .msg.CSNtfLimitRefresh LimitRefresh = 588;
  if (this->_internal_has_limitrefresh()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.limitrefresh_);
  }

  // .msg.CSNtfUpdateNotice UpdateNotice = 589;
  if (this->_internal_has_updatenotice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatenotice_);
  }

  // .msg.CSNtfUpdatePveChallengeCount UpdatePveChallengeCount = 590;
  if (this->_internal_has_updatepvechallengecount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatepvechallengecount_);
  }

  // .msg.CSNtfAdDiscount AdDiscount = 591;
  if (this->_internal_has_addiscount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addiscount_);
  }

  // .msg.CSNtfCalcMmr CalcMmr = 592;
  if (this->_internal_has_calcmmr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.calcmmr_);
  }

  // .msg.CSNtfBag Bag = 593;
  if (this->_internal_has_bag()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bag_);
  }

  // .msg.CSNtfItemAttributes ItemAttributes = 594;
  if (this->_internal_has_itemattributes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.itemattributes_);
  }

  // .msg.CSNtfPvpAffixTrigger PVPAffixTrigger = 595;
  if (this->_internal_has_pvpaffixtrigger()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpaffixtrigger_);
  }

  // .msg.CSNtfUpdatePvpData UpdatePvpData = 596;
  if (this->_internal_has_updatepvpdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updatepvpdata_);
  }

  // .msg.CSNtfUpgradePassport UpgradePassport = 597;
  if (this->_internal_has_upgradepassport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upgradepassport_);
  }

  // .msg.CSNtfUpdateTeamDeBuff UpdateTeamDeBuff = 598;
  if (this->_internal_has_updateteamdebuff()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updateteamdebuff_);
  }

  // .msg.CSNtfPveEval PveEval = 599;
  if (this->_internal_has_pveeval()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pveeval_);
  }

  // .msg.CSNtfUnlockCardGroup UnlockCardGroup = 600;
  if (this->_internal_has_unlockcardgroup()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unlockcardgroup_);
  }

  // .msg.CSNtfCustomPveActivity CustomPveActivity = 601;
  if (this->_internal_has_custompveactivity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.custompveactivity_);
  }

  // .msg.CSNtfGmBan CSNtfGmBan = 602;
  if (this->_internal_has_csntfgmban()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.csntfgmban_);
  }

  // .msg.CSNtfTDPlayerInfo TDPlayerInfo = 603;
  if (this->_internal_has_tdplayerinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tdplayerinfo_);
  }

  // .msg.CSNtfMentorInviteMsg MentorInviteMsg = 604;
  if (this->_internal_has_mentorinvitemsg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorinvitemsg_);
  }

  // .msg.CSNtfBecomeMentor BecomeMentor = 605;
  if (this->_internal_has_becomementor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.becomementor_);
  }

  // .msg.CSNtfMentorRelation MentorRelation = 606;
  if (this->_internal_has_mentorrelation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorrelation_);
  }

  // .msg.CSNtfPupilTaskUpdate MentorShipTaskUpdate = 607;
  if (this->_internal_has_mentorshiptaskupdate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorshiptaskupdate_);
  }

  // .msg.CSNtfMentorLevel MentorLevel = 608;
  if (this->_internal_has_mentorlevel()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorlevel_);
  }

  // .msg.CSNtfCurDressUpdate CurDressUpdate = 609;
  if (this->_internal_has_curdressupdate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curdressupdate_);
  }

  // .msg.CSNtfChangeExchangeMark ChangeExchangeMark = 610;
  if (this->_internal_has_changeexchangemark()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changeexchangemark_);
  }

  // .msg.CSNtfRefreshPassport RefreshPassport = 611;
  if (this->_internal_has_refreshpassport()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refreshpassport_);
  }

  // .msg.CSNtfGmRemoveMail GmRemoveMail = 612;
  if (this->_internal_has_gmremovemail()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gmremovemail_);
  }

  // .msg.CSNtfAutoUseItem AutoUseItem = 613;
  if (this->_internal_has_autouseitem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.autouseitem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfBody::GetClassData() const { return &_class_data_; }


void CSNtfBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfBody*>(&to_msg);
  auto& from = static_cast<const CSNtfBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mails_.MergeFrom(from._impl_.mails_);
  if (from._internal_has_kickoff()) {
    _this->_internal_mutable_kickoff()->::msg::CSNtfKickOff::MergeFrom(
        from._internal_kickoff());
  }
  if (from._internal_has_ntfwait()) {
    _this->_internal_mutable_ntfwait()->::msg::CSNtfWait::MergeFrom(
        from._internal_ntfwait());
  }
  if (from._internal_has_passday()) {
    _this->_internal_mutable_passday()->::msg::CSNtfPassDayBody::MergeFrom(
        from._internal_passday());
  }
  if (from._internal_has_passweek()) {
    _this->_internal_mutable_passweek()->::msg::CSNtfPassWeekBody::MergeFrom(
        from._internal_passweek());
  }
  if (from._internal_has_passmonth()) {
    _this->_internal_mutable_passmonth()->::msg::CSNtfPassMonthBody::MergeFrom(
        from._internal_passmonth());
  }
  if (from._internal_has_worldchat()) {
    _this->_internal_mutable_worldchat()->::msg::CSNtfWorldChat::MergeFrom(
        from._internal_worldchat());
  }
  if (from._internal_has_headpic()) {
    _this->_internal_mutable_headpic()->::msg::CSNtfHeadPic::MergeFrom(
        from._internal_headpic());
  }
  if (from._internal_has_pvpmatch()) {
    _this->_internal_mutable_pvpmatch()->::msg::CSNtfPvpMatch::MergeFrom(
        from._internal_pvpmatch());
  }
  if (from._internal_has_pvp()) {
    _this->_internal_mutable_pvp()->::msg::CSNtfPvp::MergeFrom(
        from._internal_pvp());
  }
  if (from._internal_has_pvpmatchcancel()) {
    _this->_internal_mutable_pvpmatchcancel()->::msg::CSNtfPvpMatchCancel::MergeFrom(
        from._internal_pvpmatchcancel());
  }
  if (from._internal_has_pvpstatus()) {
    _this->_internal_mutable_pvpstatus()->::msg::CSNtfPvpStatus::MergeFrom(
        from._internal_pvpstatus());
  }
  if (from._internal_has_ntfpvpplayerready()) {
    _this->_internal_mutable_ntfpvpplayerready()->::msg::CSNtfPvpPlayerReady::MergeFrom(
        from._internal_ntfpvpplayerready());
  }
  if (from._internal_has_pvpbegin()) {
    _this->_internal_mutable_pvpbegin()->::msg::CSNtfPvpBegin::MergeFrom(
        from._internal_pvpbegin());
  }
  if (from._internal_has_playerfinish()) {
    _this->_internal_mutable_playerfinish()->::msg::CSNtfPlayerFinish::MergeFrom(
        from._internal_playerfinish());
  }
  if (from._internal_has_pvpend()) {
    _this->_internal_mutable_pvpend()->::msg::CSNtfPvpEnd::MergeFrom(
        from._internal_pvpend());
  }
  if (from._internal_has_marquee()) {
    _this->_internal_mutable_marquee()->::msg::CSNtfMarquee::MergeFrom(
        from._internal_marquee());
  }
  if (from._internal_has_removemarquee()) {
    _this->_internal_mutable_removemarquee()->::msg::CSNtfRemoveMarquee::MergeFrom(
        from._internal_removemarquee());
  }
  if (from._internal_has_loadingprogress()) {
    _this->_internal_mutable_loadingprogress()->::msg::CSNtfLoadingProgress::MergeFrom(
        from._internal_loadingprogress());
  }
  if (from._internal_has_pvpchat()) {
    _this->_internal_mutable_pvpchat()->::msg::CSNtfPvpChat::MergeFrom(
        from._internal_pvpchat());
  }
  if (from._internal_has_reload()) {
    _this->_internal_mutable_reload()->::msg::CSNtfReload::MergeFrom(
        from._internal_reload());
  }
  if (from._internal_has_pay()) {
    _this->_internal_mutable_pay()->::msg::CSNtfPay::MergeFrom(
        from._internal_pay());
  }
  if (from._internal_has_chat()) {
    _this->_internal_mutable_chat()->::msg::CSNtfChat::MergeFrom(
        from._internal_chat());
  }
  if (from._internal_has_followlist()) {
    _this->_internal_mutable_followlist()->::msg::CSNtfFollowList::MergeFrom(
        from._internal_followlist());
  }
  if (from._internal_has_newfollower()) {
    _this->_internal_mutable_newfollower()->::msg::CSNtfNewFollower::MergeFrom(
        from._internal_newfollower());
  }
  if (from._internal_has_lostfollower()) {
    _this->_internal_mutable_lostfollower()->::msg::CSNtfLostFollower::MergeFrom(
        from._internal_lostfollower());
  }
  if (from._internal_has_invitejointeam()) {
    _this->_internal_mutable_invitejointeam()->::msg::CSNtfInviteJoinTeam::MergeFrom(
        from._internal_invitejointeam());
  }
  if (from._internal_has_playerjointeam()) {
    _this->_internal_mutable_playerjointeam()->::msg::CSNtfPlayerJoinTeam::MergeFrom(
        from._internal_playerjointeam());
  }
  if (from._internal_has_playerleaveteam()) {
    _this->_internal_mutable_playerleaveteam()->::msg::CSNtfPlayerLeaveTeam::MergeFrom(
        from._internal_playerleaveteam());
  }
  if (from._internal_has_kickoffteamplayer()) {
    _this->_internal_mutable_kickoffteamplayer()->::msg::CSNtfKickOffTeamPlayer::MergeFrom(
        from._internal_kickoffteamplayer());
  }
  if (from._internal_has_teammsg()) {
    _this->_internal_mutable_teammsg()->::msg::CSNtfTeamMsg::MergeFrom(
        from._internal_teammsg());
  }
  if (from._internal_has_teamready()) {
    _this->_internal_mutable_teamready()->::msg::CSNtfTeamReady::MergeFrom(
        from._internal_teamready());
  }
  if (from._internal_has_rejectjointeam()) {
    _this->_internal_mutable_rejectjointeam()->::msg::CSNtfRejectJoinTeam::MergeFrom(
        from._internal_rejectjointeam());
  }
  if (from._internal_has_notice()) {
    _this->_internal_mutable_notice()->::msg::CSNtfNotice::MergeFrom(
        from._internal_notice());
  }
  if (from._internal_has_removenotice()) {
    _this->_internal_mutable_removenotice()->::msg::CSNtfRemoveNotice::MergeFrom(
        from._internal_removenotice());
  }
  if (from._internal_has_upgradebattlestage()) {
    _this->_internal_mutable_upgradebattlestage()->::msg::CSNtfUpgradeBattleStage::MergeFrom(
        from._internal_upgradebattlestage());
  }
  if (from._internal_has_passporttaskprogress()) {
    _this->_internal_mutable_passporttaskprogress()->::msg::CSNtfPassportTaskProgress::MergeFrom(
        from._internal_passporttaskprogress());
  }
  if (from._internal_has_rankseasoneval()) {
    _this->_internal_mutable_rankseasoneval()->::msg::CSNtfRankSeasonEval::MergeFrom(
        from._internal_rankseasoneval());
  }
  if (from._internal_has_bindaccounts()) {
    _this->_internal_mutable_bindaccounts()->::msg::CSNtfBindAccounts::MergeFrom(
        from._internal_bindaccounts());
  }
  if (from._internal_has_seasontaskprogress()) {
    _this->_internal_mutable_seasontaskprogress()->::msg::CSNtfSeasonTaskProgress::MergeFrom(
        from._internal_seasontaskprogress());
  }
  if (from._internal_has_alphaactivity()) {
    _this->_internal_mutable_alphaactivity()->::msg::CSNtfAlphaActivity::MergeFrom(
        from._internal_alphaactivity());
  }
  if (from._internal_has_offseasontonewseason()) {
    _this->_internal_mutable_offseasontonewseason()->::msg::CSNtfOffSeasonToNewSeason::MergeFrom(
        from._internal_offseasontonewseason());
  }
  if (from._internal_has_languagemd5list()) {
    _this->_internal_mutable_languagemd5list()->::msg::CSNtfLanguageMd5List::MergeFrom(
        from._internal_languagemd5list());
  }
  if (from._internal_has_activityprogress()) {
    _this->_internal_mutable_activityprogress()->::msg::CSNtfActivityProgress::MergeFrom(
        from._internal_activityprogress());
  }
  if (from._internal_has_removeactivity()) {
    _this->_internal_mutable_removeactivity()->::msg::CSNtfRemoveActivity::MergeFrom(
        from._internal_removeactivity());
  }
  if (from._internal_has_activityconfig()) {
    _this->_internal_mutable_activityconfig()->::msg::CSNtfActivityConfig::MergeFrom(
        from._internal_activityconfig());
  }
  if (from._internal_has_meleetaskprogress()) {
    _this->_internal_mutable_meleetaskprogress()->::msg::CSNtfMeleeTaskProgress::MergeFrom(
        from._internal_meleetaskprogress());
  }
  if (from._internal_has_setteammode()) {
    _this->_internal_mutable_setteammode()->::msg::CSNtfSetTeamMode::MergeFrom(
        from._internal_setteammode());
  }
  if (from._internal_has_passportopen()) {
    _this->_internal_mutable_passportopen()->::msg::CSNtfPassportOpen::MergeFrom(
        from._internal_passportopen());
  }
  if (from._internal_has_passportclose()) {
    _this->_internal_mutable_passportclose()->::msg::CSNtfPassportClose::MergeFrom(
        from._internal_passportclose());
  }
  if (from._internal_has_weekindex()) {
    _this->_internal_mutable_weekindex()->::msg::CSNtfWeekIndex::MergeFrom(
        from._internal_weekindex());
  }
  if (from._internal_has_pvphistory()) {
    _this->_internal_mutable_pvphistory()->::msg::CSNtfPvpHistory::MergeFrom(
        from._internal_pvphistory());
  }
  if (from._internal_has_teampvpend()) {
    _this->_internal_mutable_teampvpend()->::msg::CSNtfTeamPvpEnd::MergeFrom(
        from._internal_teampvpend());
  }
  if (from._internal_has_probenetdelay()) {
    _this->_internal_mutable_probenetdelay()->::msg::CSNtfProbeNetDelay::MergeFrom(
        from._internal_probenetdelay());
  }
  if (from._internal_has_refreshgoods()) {
    _this->_internal_mutable_refreshgoods()->::msg::CSNtfRefreshGoods::MergeFrom(
        from._internal_refreshgoods());
  }
  if (from._internal_has_removeeggs()) {
    _this->_internal_mutable_removeeggs()->::msg::CSNtfRemoveEggs::MergeFrom(
        from._internal_removeeggs());
  }
  if (from._internal_has_switchset()) {
    _this->_internal_mutable_switchset()->::msg::CSNtfSwitchSet::MergeFrom(
        from._internal_switchset());
  }
  if (from._internal_has_blacklist()) {
    _this->_internal_mutable_blacklist()->::msg::CSNtfBlacklist::MergeFrom(
        from._internal_blacklist());
  }
  if (from._internal_has_bindphonenumberswitch()) {
    _this->_internal_mutable_bindphonenumberswitch()->::msg::CSNtfBindPhoneNumberSwitch::MergeFrom(
        from._internal_bindphonenumberswitch());
  }
  if (from._internal_has_worldinvite()) {
    _this->_internal_mutable_worldinvite()->::msg::CSNtfWorldInvite::MergeFrom(
        from._internal_worldinvite());
  }
  if (from._internal_has_mallnotice()) {
    _this->_internal_mutable_mallnotice()->::msg::CSNtfMallNotice::MergeFrom(
        from._internal_mallnotice());
  }
  if (from._internal_has_privilege()) {
    _this->_internal_mutable_privilege()->::msg::CSNtfPrivilege::MergeFrom(
        from._internal_privilege());
  }
  if (from._internal_has_aaremind()) {
    _this->_internal_mutable_aaremind()->::msg::CSNtfAARemind::MergeFrom(
        from._internal_aaremind());
  }
  if (from._internal_has_aaban()) {
    _this->_internal_mutable_aaban()->::msg::CSNtfAABan::MergeFrom(
        from._internal_aaban());
  }
  if (from._internal_has_aaverify()) {
    _this->_internal_mutable_aaverify()->::msg::CSNtfAAVerify::MergeFrom(
        from._internal_aaverify());
  }
  if (from._internal_has_phonenumber()) {
    _this->_internal_mutable_phonenumber()->::msg::CSNtfPhoneNumber::MergeFrom(
        from._internal_phonenumber());
  }
  if (from._internal_has_anticallback()) {
    _this->_internal_mutable_anticallback()->::msg::CSNtfAntiCallBack::MergeFrom(
        from._internal_anticallback());
  }
  if (from._internal_has_fortunebagtime()) {
    _this->_internal_mutable_fortunebagtime()->::msg::CSNtfFortuneBagTime::MergeFrom(
        from._internal_fortunebagtime());
  }
  if (from._internal_has_updateitem()) {
    _this->_internal_mutable_updateitem()->::msg::CSNtfUpdateItem::MergeFrom(
        from._internal_updateitem());
  }
  if (from._internal_has_creditscore()) {
    _this->_internal_mutable_creditscore()->::msg::CSNtfCreditScore::MergeFrom(
        from._internal_creditscore());
  }
  if (from._internal_has_buffact()) {
    _this->_internal_mutable_buffact()->::msg::CSNtfBuffAct::MergeFrom(
        from._internal_buffact());
  }
  if (from._internal_has_activitygroup()) {
    _this->_internal_mutable_activitygroup()->::msg::CSNtfActivityGroup::MergeFrom(
        from._internal_activitygroup());
  }
  if (from._internal_has_clearchat()) {
    _this->_internal_mutable_clearchat()->::msg::CSNtfClearChat::MergeFrom(
        from._internal_clearchat());
  }
  if (from._internal_has_forbidinfo()) {
    _this->_internal_mutable_forbidinfo()->::msg::CSNtfForbidInfo::MergeFrom(
        from._internal_forbidinfo());
  }
  if (from._internal_has_midasdiamond()) {
    _this->_internal_mutable_midasdiamond()->::msg::CSNtfMidasDiamond::MergeFrom(
        from._internal_midasdiamond());
  }
  if (from._internal_has_joinvoiceteam()) {
    _this->_internal_mutable_joinvoiceteam()->::msg::CSNtfJoinVoiceTeam::MergeFrom(
        from._internal_joinvoiceteam());
  }
  if (from._internal_has_joinvoicepvp()) {
    _this->_internal_mutable_joinvoicepvp()->::msg::CSNtfJoinVoicePvp::MergeFrom(
        from._internal_joinvoicepvp());
  }
  if (from._internal_has_joinvoicecamp()) {
    _this->_internal_mutable_joinvoicecamp()->::msg::CSNtfJoinVoiceCamp::MergeFrom(
        from._internal_joinvoicecamp());
  }
  if (from._internal_has_wxvvip()) {
    _this->_internal_mutable_wxvvip()->::msg::CSNtfWxVVip::MergeFrom(
        from._internal_wxvvip());
  }
  if (from._internal_has_freeflow()) {
    _this->_internal_mutable_freeflow()->::msg::CSNtfFreeFlow::MergeFrom(
        from._internal_freeflow());
  }
  if (from._internal_has_observestatus()) {
    _this->_internal_mutable_observestatus()->::msg::CSNtfObserveStatus::MergeFrom(
        from._internal_observestatus());
  }
  if (from._internal_has_gamemarquee()) {
    _this->_internal_mutable_gamemarquee()->::msg::CSNtfGameMarquee::MergeFrom(
        from._internal_gamemarquee());
  }
  if (from._internal_has_wxredpacket()) {
    _this->_internal_mutable_wxredpacket()->::msg::CSNtfWxRedPacket::MergeFrom(
        from._internal_wxredpacket());
  }
  if (from._internal_has_gmsysmsg()) {
    _this->_internal_mutable_gmsysmsg()->::msg::CSNtfGmSysMsg::MergeFrom(
        from._internal_gmsysmsg());
  }
  if (from._internal_has_newpunishment()) {
    _this->_internal_mutable_newpunishment()->::msg::CSNtfNewPunishment::MergeFrom(
        from._internal_newpunishment());
  }
  if (from._internal_has_teamslot()) {
    _this->_internal_mutable_teamslot()->::msg::CSNtfTeamSlot::MergeFrom(
        from._internal_teamslot());
  }
  if (from._internal_has_teamsubmode()) {
    _this->_internal_mutable_teamsubmode()->::msg::CSNtfTeamSubMode::MergeFrom(
        from._internal_teamsubmode());
  }
  if (from._internal_has_teamslotstatus()) {
    _this->_internal_mutable_teamslotstatus()->::msg::CSNtfTeamSlotStatus::MergeFrom(
        from._internal_teamslotstatus());
  }
  if (from._internal_has_punishmentinfo()) {
    _this->_internal_mutable_punishmentinfo()->::msg::CSNtfPunishmentInfo::MergeFrom(
        from._internal_punishmentinfo());
  }
  if (from._internal_has_removepunishment()) {
    _this->_internal_mutable_removepunishment()->::msg::CSNtfRemovePunishment::MergeFrom(
        from._internal_removepunishment());
  }
  if (from._internal_has_pvpconfirm()) {
    _this->_internal_mutable_pvpconfirm()->::msg::CSNtfPvpConfirm::MergeFrom(
        from._internal_pvpconfirm());
  }
  if (from._internal_has_matchsuccess()) {
    _this->_internal_mutable_matchsuccess()->::msg::CSNtfMatchSuccess::MergeFrom(
        from._internal_matchsuccess());
  }
  if (from._internal_has_oldbusinessplayer()) {
    _this->_internal_mutable_oldbusinessplayer()->::msg::CSNtfOldBusinessPlayer::MergeFrom(
        from._internal_oldbusinessplayer());
  }
  if (from._internal_has_changeteamslot()) {
    _this->_internal_mutable_changeteamslot()->::msg::CSNtfChangeTeamSlot::MergeFrom(
        from._internal_changeteamslot());
  }
  if (from._internal_has_refusechangeteamslot()) {
    _this->_internal_mutable_refusechangeteamslot()->::msg::CSNtfRefuseChangeTeamSlot::MergeFrom(
        from._internal_refusechangeteamslot());
  }
  if (from._internal_has_cancelchangeslot()) {
    _this->_internal_mutable_cancelchangeslot()->::msg::CSNtfCancelChangeSlot::MergeFrom(
        from._internal_cancelchangeslot());
  }
  if (from._internal_has_showchessskin()) {
    _this->_internal_mutable_showchessskin()->::msg::CSNtfShowChessSkin::MergeFrom(
        from._internal_showchessskin());
  }
  if (from._internal_has_onhelpreddot()) {
    _this->_internal_mutable_onhelpreddot()->::msg::CSNtfOnHelpReddot::MergeFrom(
        from._internal_onhelpreddot());
  }
  if (from._internal_has_bagupdate()) {
    _this->_internal_mutable_bagupdate()->::msg::CSNtfBagUpdate::MergeFrom(
        from._internal_bagupdate());
  }
  if (from._internal_has_refreshmelee()) {
    _this->_internal_mutable_refreshmelee()->::msg::CSNtfRefreshMelee::MergeFrom(
        from._internal_refreshmelee());
  }
  if (from._internal_has_weblogin()) {
    _this->_internal_mutable_weblogin()->::msg::CSNtfWebLogin::MergeFrom(
        from._internal_weblogin());
  }
  if (from._internal_has_currenttournament()) {
    _this->_internal_mutable_currenttournament()->::msg::CSNtfCurrentTournament::MergeFrom(
        from._internal_currenttournament());
  }
  if (from._internal_has_tournamentbegin()) {
    _this->_internal_mutable_tournamentbegin()->::msg::CSNtfTournamentBegin::MergeFrom(
        from._internal_tournamentbegin());
  }
  if (from._internal_has_tournamentenrollbegin()) {
    _this->_internal_mutable_tournamentenrollbegin()->::msg::CSNtfTournamentEnrollBegin::MergeFrom(
        from._internal_tournamentenrollbegin());
  }
  if (from._internal_has_tournamentenrollend()) {
    _this->_internal_mutable_tournamentenrollend()->::msg::CSNtfTournamentEnrollEnd::MergeFrom(
        from._internal_tournamentenrollend());
  }
  if (from._internal_has_jointournamentroom()) {
    _this->_internal_mutable_jointournamentroom()->::msg::CSNtfJoinTournamentRoom::MergeFrom(
        from._internal_jointournamentroom());
  }
  if (from._internal_has_tournamentend()) {
    _this->_internal_mutable_tournamentend()->::msg::CSNtfTournamentEnd::MergeFrom(
        from._internal_tournamentend());
  }
  if (from._internal_has_tournamentout()) {
    _this->_internal_mutable_tournamentout()->::msg::CSNtfTournamentOut::MergeFrom(
        from._internal_tournamentout());
  }
  if (from._internal_has_tournamentroundend()) {
    _this->_internal_mutable_tournamentroundend()->::msg::CSNtfTournamentRoundEnd::MergeFrom(
        from._internal_tournamentroundend());
  }
  if (from._internal_has_luckstaraward()) {
    _this->_internal_mutable_luckstaraward()->::msg::CSNtfLuckStarAward::MergeFrom(
        from._internal_luckstaraward());
  }
  if (from._internal_has_inviteobserve()) {
    _this->_internal_mutable_inviteobserve()->::msg::CSNtfInviteObserve::MergeFrom(
        from._internal_inviteobserve());
  }
  if (from._internal_has_rejectobserve()) {
    _this->_internal_mutable_rejectobserve()->::msg::CSNtfRejectObserve::MergeFrom(
        from._internal_rejectobserve());
  }
  if (from._internal_has_chestcount()) {
    _this->_internal_mutable_chestcount()->::msg::CSNtfChestCount::MergeFrom(
        from._internal_chestcount());
  }
  if (from._internal_has_recruitinfo()) {
    _this->_internal_mutable_recruitinfo()->::msg::CSNtfRecruitInfo::MergeFrom(
        from._internal_recruitinfo());
  }
  if (from._internal_has_recruitplayer()) {
    _this->_internal_mutable_recruitplayer()->::msg::CSNtfRecruitPlayer::MergeFrom(
        from._internal_recruitplayer());
  }
  if (from._internal_has_recruitplayerbattle()) {
    _this->_internal_mutable_recruitplayerbattle()->::msg::CSNtfRecruitPlayerBattle::MergeFrom(
        from._internal_recruitplayerbattle());
  }
  if (from._internal_has_betonbounty()) {
    _this->_internal_mutable_betonbounty()->::msg::CSNtfBetOnBounty::MergeFrom(
        from._internal_betonbounty());
  }
  if (from._internal_has_activitytaskunlock()) {
    _this->_internal_mutable_activitytaskunlock()->::msg::CSNtfActivityTaskUnlock::MergeFrom(
        from._internal_activitytaskunlock());
  }
  if (from._internal_has_psserveronly()) {
    _this->_internal_mutable_psserveronly()->::msg::CSNtfPsServerOnly::MergeFrom(
        from._internal_psserveronly());
  }
  if (from._internal_has_addthirdpvpinfo()) {
    _this->_internal_mutable_addthirdpvpinfo()->::msg::CSNtfAddThirdPvpInfo::MergeFrom(
        from._internal_addthirdpvpinfo());
  }
  if (from._internal_has_delthirdpvpinfo()) {
    _this->_internal_mutable_delthirdpvpinfo()->::msg::CSNtfDelThirdPvpInfo::MergeFrom(
        from._internal_delthirdpvpinfo());
  }
  if (from._internal_has_ps4serveronly()) {
    _this->_internal_mutable_ps4serveronly()->::msg::CSNtfPs4ServerOnly::MergeFrom(
        from._internal_ps4serveronly());
  }
  if (from._internal_has_luckmallgoods()) {
    _this->_internal_mutable_luckmallgoods()->::msg::CSNtfLuckMallGoods::MergeFrom(
        from._internal_luckmallgoods());
  }
  if (from._internal_has_chesslisterr()) {
    _this->_internal_mutable_chesslisterr()->::msg::CSNtfChessListErr::MergeFrom(
        from._internal_chesslisterr());
  }
  if (from._internal_has_chestrecord()) {
    _this->_internal_mutable_chestrecord()->::msg::CSNtfChestRecord::MergeFrom(
        from._internal_chestrecord());
  }
  if (from._internal_has_goainfo()) {
    _this->_internal_mutable_goainfo()->::msg::CSNtfGOAInfo::MergeFrom(
        from._internal_goainfo());
  }
  if (from._internal_has_medalinfo()) {
    _this->_internal_mutable_medalinfo()->::msg::CSNtfMedalInfos::MergeFrom(
        from._internal_medalinfo());
  }
  if (from._internal_has_medalid()) {
    _this->_internal_mutable_medalid()->::msg::CSNtfMedalId::MergeFrom(
        from._internal_medalid());
  }
  if (from._internal_has_pvpreset()) {
    _this->_internal_mutable_pvpreset()->::msg::CSNtfPvpReset::MergeFrom(
        from._internal_pvpreset());
  }
  if (from._internal_has_delmail()) {
    _this->_internal_mutable_delmail()->::msg::CSNtfDelMail::MergeFrom(
        from._internal_delmail());
  }
  if (from._internal_has_iteminfo()) {
    _this->_internal_mutable_iteminfo()->::msg::CSNtfItemInfo::MergeFrom(
        from._internal_iteminfo());
  }
  if (from._internal_has_passportnum()) {
    _this->_internal_mutable_passportnum()->::msg::CSNtfPassportNum::MergeFrom(
        from._internal_passportnum());
  }
  if (from._internal_has_passportyearcardnum()) {
    _this->_internal_mutable_passportyearcardnum()->::msg::CSNtfPassportYearCardNum::MergeFrom(
        from._internal_passportyearcardnum());
  }
  if (from._internal_has_teamop()) {
    _this->_internal_mutable_teamop()->::msg::CSNtfTeamOP::MergeFrom(
        from._internal_teamop());
  }
  if (from._internal_has_teamdismiss()) {
    _this->_internal_mutable_teamdismiss()->::msg::CSNtfTeamDismiss::MergeFrom(
        from._internal_teamdismiss());
  }
  if (from._internal_has_switchmodeinteam()) {
    _this->_internal_mutable_switchmodeinteam()->::msg::CSNtfSwitchModeInTeam::MergeFrom(
        from._internal_switchmodeinteam());
  }
  if (from._internal_has_addbanner()) {
    _this->_internal_mutable_addbanner()->::msg::CSNtfAddBanner::MergeFrom(
        from._internal_addbanner());
  }
  if (from._internal_has_removebanner()) {
    _this->_internal_mutable_removebanner()->::msg::CSNtfRemoveBanner::MergeFrom(
        from._internal_removebanner());
  }
  if (from._internal_has_singleroundflow()) {
    _this->_internal_mutable_singleroundflow()->::msg::CSNtfSingleRoundFlow::MergeFrom(
        from._internal_singleroundflow());
  }
  if (from._internal_has_teamstatus()) {
    _this->_internal_mutable_teamstatus()->::msg::CSNtfTeamStatus::MergeFrom(
        from._internal_teamstatus());
  }
  if (from._internal_has_tngameend()) {
    _this->_internal_mutable_tngameend()->::msg::CSNtfTNGameEnd::MergeFrom(
        from._internal_tngameend());
  }
  if (from._internal_has_playerlackresource()) {
    _this->_internal_mutable_playerlackresource()->::msg::CSNtfPlayerLackResourceInTeam::MergeFrom(
        from._internal_playerlackresource());
  }
  if (from._internal_has_favmapremoved()) {
    _this->_internal_mutable_favmapremoved()->::msg::CSNtfFavMapRemoved::MergeFrom(
        from._internal_favmapremoved());
  }
  if (from._internal_has_workshopmatchresult()) {
    _this->_internal_mutable_workshopmatchresult()->::msg::CSNtfWorkshopMatchResult::MergeFrom(
        from._internal_workshopmatchresult());
  }
  if (from._internal_has_bigwinnerexpandmatch()) {
    _this->_internal_mutable_bigwinnerexpandmatch()->::msg::CSNtfBigWinnerExpandMatch::MergeFrom(
        from._internal_bigwinnerexpandmatch());
  }
  if (from._internal_has_verifyrealname()) {
    _this->_internal_mutable_verifyrealname()->::msg::CSNtfVerifyRealName::MergeFrom(
        from._internal_verifyrealname());
  }
  if (from._internal_has_guildjoin()) {
    _this->_internal_mutable_guildjoin()->::msg::CSNtfGuildJoin::MergeFrom(
        from._internal_guildjoin());
  }
  if (from._internal_has_memberchange()) {
    _this->_internal_mutable_memberchange()->::msg::CSNtfGuildMemberChange::MergeFrom(
        from._internal_memberchange());
  }
  if (from._internal_has_guildkickoff()) {
    _this->_internal_mutable_guildkickoff()->::msg::CSNtfGuildKickoff::MergeFrom(
        from._internal_guildkickoff());
  }
  if (from._internal_has_guildrolechange()) {
    _this->_internal_mutable_guildrolechange()->::msg::CSNtfGuildRoleChange::MergeFrom(
        from._internal_guildrolechange());
  }
  if (from._internal_has_guildattrchange()) {
    _this->_internal_mutable_guildattrchange()->::msg::CSNtfGuildAttrChange::MergeFrom(
        from._internal_guildattrchange());
  }
  if (from._internal_has_guildchat()) {
    _this->_internal_mutable_guildchat()->::msg::CSNtfGuildChat::MergeFrom(
        from._internal_guildchat());
  }
  if (from._internal_has_newguildlog()) {
    _this->_internal_mutable_newguildlog()->::msg::CSNtfNewGuildLog::MergeFrom(
        from._internal_newguildlog());
  }
  if (from._internal_has_applicantchange()) {
    _this->_internal_mutable_applicantchange()->::msg::CSNtfGuildApplicantChange::MergeFrom(
        from._internal_applicantchange());
  }
  if (from._internal_has_inviteechange()) {
    _this->_internal_mutable_inviteechange()->::msg::CSNtfGuildInviteeChange::MergeFrom(
        from._internal_inviteechange());
  }
  if (from._internal_has_guildnewinvite()) {
    _this->_internal_mutable_guildnewinvite()->::msg::CSNtfGuildNewInvite::MergeFrom(
        from._internal_guildnewinvite());
  }
  if (from._internal_has_guildinfo()) {
    _this->_internal_mutable_guildinfo()->::msg::CSNtfGuildInfo::MergeFrom(
        from._internal_guildinfo());
  }
  if (from._internal_has_vngawardreset()) {
    _this->_internal_mutable_vngawardreset()->::msg::CSNtfVngCommentAwardReset::MergeFrom(
        from._internal_vngawardreset());
  }
  if (from._internal_has_adaward()) {
    _this->_internal_mutable_adaward()->::msg::CSNtfAdAward::MergeFrom(
        from._internal_adaward());
  }
  if (from._internal_has_adcount()) {
    _this->_internal_mutable_adcount()->::msg::CSNtfAdCount::MergeFrom(
        from._internal_adcount());
  }
  if (from._internal_has_uiforbid()) {
    _this->_internal_mutable_uiforbid()->::msg::CSNtfUIForbid::MergeFrom(
        from._internal_uiforbid());
  }
  if (from._internal_has_pvpupdatemessengerpos()) {
    _this->_internal_mutable_pvpupdatemessengerpos()->::msg::CSNtfPvpUpdateMessengerPos::MergeFrom(
        from._internal_pvpupdatemessengerpos());
  }
  if (from._internal_has_pvpplayerloggedin()) {
    _this->_internal_mutable_pvpplayerloggedin()->::msg::CSNtfPvpPlayerLoggedIn::MergeFrom(
        from._internal_pvpplayerloggedin());
  }
  if (from._internal_has_passthrough()) {
    _this->_internal_mutable_passthrough()->::msg::CSNtfPassThrough::MergeFrom(
        from._internal_passthrough());
  }
  if (from._internal_has_aa()) {
    _this->_internal_mutable_aa()->::msg::CSNtfAA::MergeFrom(
        from._internal_aa());
  }
  if (from._internal_has_pvpreconnect()) {
    _this->_internal_mutable_pvpreconnect()->::msg::CSNtfPvpReconnect::MergeFrom(
        from._internal_pvpreconnect());
  }
  if (from._internal_has_updatebattleresult()) {
    _this->_internal_mutable_updatebattleresult()->::msg::CSNtfUpdateBattleResult::MergeFrom(
        from._internal_updatebattleresult());
  }
  if (from._internal_has_visitplayer()) {
    _this->_internal_mutable_visitplayer()->::msg::CSNtfVisitPlayer::MergeFrom(
        from._internal_visitplayer());
  }
  if (from._internal_has_kridentityauth()) {
    _this->_internal_mutable_kridentityauth()->::msg::CSNtfKrIdentityAuth::MergeFrom(
        from._internal_kridentityauth());
  }
  if (from._internal_has_kraddictiontip()) {
    _this->_internal_mutable_kraddictiontip()->::msg::CSNtfKrAddictionTip::MergeFrom(
        from._internal_kraddictiontip());
  }
  if (from._internal_has_leavegameearly()) {
    _this->_internal_mutable_leavegameearly()->::msg::CSNtfLeaveGameEarly::MergeFrom(
        from._internal_leavegameearly());
  }
  if (from._internal_has_kraddictioncountdown()) {
    _this->_internal_mutable_kraddictioncountdown()->::msg::CSNtfKrAddictionCountdown::MergeFrom(
        from._internal_kraddictioncountdown());
  }
  if (from._internal_has_histroychatmsg()) {
    _this->_internal_mutable_histroychatmsg()->::msg::CSNtfHistoryChatMsg::MergeFrom(
        from._internal_histroychatmsg());
  }
  if (from._internal_has_gmtime()) {
    _this->_internal_mutable_gmtime()->::msg::CSNtfSystemGmTime::MergeFrom(
        from._internal_gmtime());
  }
  if (from._internal_has_changename()) {
    _this->_internal_mutable_changename()->::msg::CSNtfChangeName::MergeFrom(
        from._internal_changename());
  }
  if (from._internal_has_firstpay()) {
    _this->_internal_mutable_firstpay()->::msg::CSNtfFirstPay::MergeFrom(
        from._internal_firstpay());
  }
  if (from._internal_has_expchanged()) {
    _this->_internal_mutable_expchanged()->::msg::CSNtfPlayerExpChanged::MergeFrom(
        from._internal_expchanged());
  }
  if (from._internal_has_taskprogress()) {
    _this->_internal_mutable_taskprogress()->::msg::CSNtfTaskProgress::MergeFrom(
        from._internal_taskprogress());
  }
  if (from._internal_has_newplayerguideended()) {
    _this->_internal_mutable_newplayerguideended()->::msg::CSNtfNewPlayerGuideEnded::MergeFrom(
        from._internal_newplayerguideended());
  }
  if (from._internal_has_tasksinfo()) {
    _this->_internal_mutable_tasksinfo()->::msg::CSNtfTasksInfo::MergeFrom(
        from._internal_tasksinfo());
  }
  if (from._internal_has_pvpawardsinfo()) {
    _this->_internal_mutable_pvpawardsinfo()->::msg::CSNtfPvpAwardsInfo::MergeFrom(
        from._internal_pvpawardsinfo());
  }
  if (from._internal_has_addaward()) {
    _this->_internal_mutable_addaward()->::msg::CSNtfAddAward::MergeFrom(
        from._internal_addaward());
  }
  if (from._internal_has_limitrefresh()) {
    _this->_internal_mutable_limitrefresh()->::msg::CSNtfLimitRefresh::MergeFrom(
        from._internal_limitrefresh());
  }
  if (from._internal_has_updatenotice()) {
    _this->_internal_mutable_updatenotice()->::msg::CSNtfUpdateNotice::MergeFrom(
        from._internal_updatenotice());
  }
  if (from._internal_has_updatepvechallengecount()) {
    _this->_internal_mutable_updatepvechallengecount()->::msg::CSNtfUpdatePveChallengeCount::MergeFrom(
        from._internal_updatepvechallengecount());
  }
  if (from._internal_has_addiscount()) {
    _this->_internal_mutable_addiscount()->::msg::CSNtfAdDiscount::MergeFrom(
        from._internal_addiscount());
  }
  if (from._internal_has_calcmmr()) {
    _this->_internal_mutable_calcmmr()->::msg::CSNtfCalcMmr::MergeFrom(
        from._internal_calcmmr());
  }
  if (from._internal_has_bag()) {
    _this->_internal_mutable_bag()->::msg::CSNtfBag::MergeFrom(
        from._internal_bag());
  }
  if (from._internal_has_itemattributes()) {
    _this->_internal_mutable_itemattributes()->::msg::CSNtfItemAttributes::MergeFrom(
        from._internal_itemattributes());
  }
  if (from._internal_has_pvpaffixtrigger()) {
    _this->_internal_mutable_pvpaffixtrigger()->::msg::CSNtfPvpAffixTrigger::MergeFrom(
        from._internal_pvpaffixtrigger());
  }
  if (from._internal_has_updatepvpdata()) {
    _this->_internal_mutable_updatepvpdata()->::msg::CSNtfUpdatePvpData::MergeFrom(
        from._internal_updatepvpdata());
  }
  if (from._internal_has_upgradepassport()) {
    _this->_internal_mutable_upgradepassport()->::msg::CSNtfUpgradePassport::MergeFrom(
        from._internal_upgradepassport());
  }
  if (from._internal_has_updateteamdebuff()) {
    _this->_internal_mutable_updateteamdebuff()->::msg::CSNtfUpdateTeamDeBuff::MergeFrom(
        from._internal_updateteamdebuff());
  }
  if (from._internal_has_pveeval()) {
    _this->_internal_mutable_pveeval()->::msg::CSNtfPveEval::MergeFrom(
        from._internal_pveeval());
  }
  if (from._internal_has_unlockcardgroup()) {
    _this->_internal_mutable_unlockcardgroup()->::msg::CSNtfUnlockCardGroup::MergeFrom(
        from._internal_unlockcardgroup());
  }
  if (from._internal_has_custompveactivity()) {
    _this->_internal_mutable_custompveactivity()->::msg::CSNtfCustomPveActivity::MergeFrom(
        from._internal_custompveactivity());
  }
  if (from._internal_has_csntfgmban()) {
    _this->_internal_mutable_csntfgmban()->::msg::CSNtfGmBan::MergeFrom(
        from._internal_csntfgmban());
  }
  if (from._internal_has_tdplayerinfo()) {
    _this->_internal_mutable_tdplayerinfo()->::msg::CSNtfTDPlayerInfo::MergeFrom(
        from._internal_tdplayerinfo());
  }
  if (from._internal_has_mentorinvitemsg()) {
    _this->_internal_mutable_mentorinvitemsg()->::msg::CSNtfMentorInviteMsg::MergeFrom(
        from._internal_mentorinvitemsg());
  }
  if (from._internal_has_becomementor()) {
    _this->_internal_mutable_becomementor()->::msg::CSNtfBecomeMentor::MergeFrom(
        from._internal_becomementor());
  }
  if (from._internal_has_mentorrelation()) {
    _this->_internal_mutable_mentorrelation()->::msg::CSNtfMentorRelation::MergeFrom(
        from._internal_mentorrelation());
  }
  if (from._internal_has_mentorshiptaskupdate()) {
    _this->_internal_mutable_mentorshiptaskupdate()->::msg::CSNtfPupilTaskUpdate::MergeFrom(
        from._internal_mentorshiptaskupdate());
  }
  if (from._internal_has_mentorlevel()) {
    _this->_internal_mutable_mentorlevel()->::msg::CSNtfMentorLevel::MergeFrom(
        from._internal_mentorlevel());
  }
  if (from._internal_has_curdressupdate()) {
    _this->_internal_mutable_curdressupdate()->::msg::CSNtfCurDressUpdate::MergeFrom(
        from._internal_curdressupdate());
  }
  if (from._internal_has_changeexchangemark()) {
    _this->_internal_mutable_changeexchangemark()->::msg::CSNtfChangeExchangeMark::MergeFrom(
        from._internal_changeexchangemark());
  }
  if (from._internal_has_refreshpassport()) {
    _this->_internal_mutable_refreshpassport()->::msg::CSNtfRefreshPassport::MergeFrom(
        from._internal_refreshpassport());
  }
  if (from._internal_has_gmremovemail()) {
    _this->_internal_mutable_gmremovemail()->::msg::CSNtfGmRemoveMail::MergeFrom(
        from._internal_gmremovemail());
  }
  if (from._internal_has_autouseitem()) {
    _this->_internal_mutable_autouseitem()->::msg::CSNtfAutoUseItem::MergeFrom(
        from._internal_autouseitem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfBody::CopyFrom(const CSNtfBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfBody::IsInitialized() const {
  return true;
}

void CSNtfBody::InternalSwap(CSNtfBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mails_.InternalSwap(&other->_impl_.mails_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfBody, _impl_.autouseitem_)
      + sizeof(CSNtfBody::_impl_.autouseitem_)
      - PROTOBUF_FIELD_OFFSET(CSNtfBody, _impl_.kickoff_)>(
          reinterpret_cast<char*>(&_impl_.kickoff_),
          reinterpret_cast<char*>(&other->_impl_.kickoff_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_csprotocol_2eproto_getter, &descriptor_table_csprotocol_2eproto_once,
      file_level_metadata_csprotocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::CSHead*
Arena::CreateMaybeMessage< ::msg::CSHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSHead >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqBody*
Arena::CreateMaybeMessage< ::msg::CSReqBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspBody*
Arena::CreateMaybeMessage< ::msg::CSRspBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfBody*
Arena::CreateMaybeMessage< ::msg::CSNtfBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
