// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR PositionInt2D::PositionInt2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionInt2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionInt2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionInt2DDefaultTypeInternal() {}
  union {
    PositionInt2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionInt2DDefaultTypeInternal _PositionInt2D_default_instance_;
PROTOBUF_CONSTEXPR PositionFloat2D::PositionFloat2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionFloat2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionFloat2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionFloat2DDefaultTypeInternal() {}
  union {
    PositionFloat2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionFloat2DDefaultTypeInternal _PositionFloat2D_default_instance_;
PROTOBUF_CONSTEXPR PlayerBasicInfo::PlayerBasicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvpplayer_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerBasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerBasicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerBasicInfoDefaultTypeInternal() {}
  union {
    PlayerBasicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerBasicInfoDefaultTypeInternal _PlayerBasicInfo_default_instance_;
PROTOBUF_CONSTEXPR EquipmentInfo::EquipmentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tilepos_)*/nullptr
  , /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.equipid_)*/0
  , /*decltype(_impl_.equipbagidx_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.ownerhandle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipmentInfoDefaultTypeInternal() {}
  union {
    EquipmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipmentInfoDefaultTypeInternal _EquipmentInfo_default_instance_;
PROTOBUF_CONSTEXPR ChessPiecesData::ChessPiecesData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.extractprob_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessPiecesDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessPiecesDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessPiecesDataDefaultTypeInternal() {}
  union {
    ChessPiecesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessPiecesDataDefaultTypeInternal _ChessPiecesData_default_instance_;
PROTOBUF_CONSTEXPR ChessPiecesMapLevData::ChessPiecesMapLevData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesspieces_)*/{}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessPiecesMapLevDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessPiecesMapLevDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessPiecesMapLevDataDefaultTypeInternal() {}
  union {
    ChessPiecesMapLevData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessPiecesMapLevDataDefaultTypeInternal _ChessPiecesMapLevData_default_instance_;
PROTOBUF_CONSTEXPR ChessNumber::ChessNumber(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessNumberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessNumberDefaultTypeInternal() {}
  union {
    ChessNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessNumberDefaultTypeInternal _ChessNumber_default_instance_;
PROTOBUF_CONSTEXPR PlayerChessNumber::PlayerChessNumber(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chess_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerChessNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerChessNumberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerChessNumberDefaultTypeInternal() {}
  union {
    PlayerChessNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerChessNumberDefaultTypeInternal _PlayerChessNumber_default_instance_;
PROTOBUF_CONSTEXPR ReflushChessData::ReflushChessData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessids_)*/{}
  , /*decltype(_impl_._chessids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sellchessidx_)*/{}
  , /*decltype(_impl_._sellchessidx_cached_byte_size_)*/{0}
  , /*decltype(_impl_.isauto_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReflushChessDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReflushChessDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReflushChessDataDefaultTypeInternal() {}
  union {
    ReflushChessData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReflushChessDataDefaultTypeInternal _ReflushChessData_default_instance_;
PROTOBUF_CONSTEXPR BattleRoundData::BattleRoundData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refreshchess_)*/{}
  , /*decltype(_impl_.intobattlechess_)*/{}
  , /*decltype(_impl_._intobattlechess_cached_byte_size_)*/{0}
  , /*decltype(_impl_.roundnum_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.moneygained_)*/0
  , /*decltype(_impl_.moneycostbybuyexp_)*/0
  , /*decltype(_impl_.moneycostbyrefreshshop_)*/0
  , /*decltype(_impl_.moneycostbybuychess_)*/0
  , /*decltype(_impl_.ismonster_)*/false
  , /*decltype(_impl_.enemyidx_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.wintype_)*/0
  , /*decltype(_impl_.moneygainedbysellchess_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleRoundDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleRoundDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleRoundDataDefaultTypeInternal() {}
  union {
    BattleRoundData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleRoundDataDefaultTypeInternal _BattleRoundData_default_instance_;
PROTOBUF_CONSTEXPR PlayerStatisticsInfo::PlayerStatisticsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rounddata_)*/{}
  , /*decltype(_impl_.pidx_)*/0
  , /*decltype(_impl_.winstreak_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerStatisticsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerStatisticsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerStatisticsInfoDefaultTypeInternal() {}
  union {
    PlayerStatisticsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerStatisticsInfoDefaultTypeInternal _PlayerStatisticsInfo_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipmentid_)*/0
  , /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR ItemOnTheGround::ItemOnTheGround(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.baseinfo_)*/nullptr
  , /*decltype(_impl_.mapx_)*/0
  , /*decltype(_impl_.mapy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemOnTheGroundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemOnTheGroundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemOnTheGroundDefaultTypeInternal() {}
  union {
    ItemOnTheGround _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemOnTheGroundDefaultTypeInternal _ItemOnTheGround_default_instance_;
PROTOBUF_CONSTEXPR ItemInTheBag::ItemInTheBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.baseinfo_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemInTheBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemInTheBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemInTheBagDefaultTypeInternal() {}
  union {
    ItemInTheBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemInTheBagDefaultTypeInternal _ItemInTheBag_default_instance_;
PROTOBUF_CONSTEXPR Character::Character(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.characterequips_)*/{}
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.characterid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterDefaultTypeInternal() {}
  union {
    Character _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterDefaultTypeInternal _Character_default_instance_;
PROTOBUF_CONSTEXPR CharacterInTheBag::CharacterInTheBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.baseinfo_)*/nullptr
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterInTheBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterInTheBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterInTheBagDefaultTypeInternal() {}
  union {
    CharacterInTheBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterInTheBagDefaultTypeInternal _CharacterInTheBag_default_instance_;
PROTOBUF_CONSTEXPR CharacterOnTheMap::CharacterOnTheMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.baseinfo_)*/nullptr
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterOnTheMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterOnTheMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterOnTheMapDefaultTypeInternal() {}
  union {
    CharacterOnTheMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterOnTheMapDefaultTypeInternal _CharacterOnTheMap_default_instance_;
PROTOBUF_CONSTEXPR ReconnectPlayer::ReconnectPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shopcontents_)*/{}
  , /*decltype(_impl_._shopcontents_cached_byte_size_)*/{0}
  , /*decltype(_impl_.bagcharacters_)*/{}
  , /*decltype(_impl_.mapcharacters_)*/{}
  , /*decltype(_impl_.bagitems_)*/{}
  , /*decltype(_impl_.grounditems_)*/{}
  , /*decltype(_impl_.playerdata_)*/nullptr
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.currenthp_)*/0
  , /*decltype(_impl_.currentgold_)*/0
  , /*decltype(_impl_.currentlevel_)*/0
  , /*decltype(_impl_.currentexp_)*/0
  , /*decltype(_impl_.messengerposx_)*/0
  , /*decltype(_impl_.messengerposy_)*/0
  , /*decltype(_impl_.enemyplayerindex_)*/0
  , /*decltype(_impl_.winstreak_)*/0
  , /*decltype(_impl_.winroundcount_)*/0
  , /*decltype(_impl_.loseroundcount_)*/0
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReconnectPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectPlayerDefaultTypeInternal() {}
  union {
    ReconnectPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectPlayerDefaultTypeInternal _ReconnectPlayer_default_instance_;
PROTOBUF_CONSTEXPR RoundInfo::RoundInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seed_)*/0
  , /*decltype(_impl_.round_)*/0
  , /*decltype(_impl_.gameframe_)*/0
  , /*decltype(_impl_.currentphase_)*/0
  , /*decltype(_impl_.remaintime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoundInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoundInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoundInfoDefaultTypeInternal() {}
  union {
    RoundInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoundInfoDefaultTypeInternal _RoundInfo_default_instance_;
PROTOBUF_CONSTEXPR CorrectFormation::CorrectFormation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bagcharacters_)*/{}
  , /*decltype(_impl_.mapcharacters_)*/{}
  , /*decltype(_impl_.bagitems_)*/{}
  , /*decltype(_impl_.grounditems_)*/{}
  , /*decltype(_impl_.playerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CorrectFormationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CorrectFormationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CorrectFormationDefaultTypeInternal() {}
  union {
    CorrectFormation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CorrectFormationDefaultTypeInternal _CorrectFormation_default_instance_;
PROTOBUF_CONSTEXPR CSReqSetMessengerPos::CSReqSetMessengerPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqSetMessengerPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqSetMessengerPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqSetMessengerPosDefaultTypeInternal() {}
  union {
    CSReqSetMessengerPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqSetMessengerPosDefaultTypeInternal _CSReqSetMessengerPos_default_instance_;
PROTOBUF_CONSTEXPR CSReqPvpSetReadyState::CSReqPvpSetReadyState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqPvpSetReadyStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqPvpSetReadyStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqPvpSetReadyStateDefaultTypeInternal() {}
  union {
    CSReqPvpSetReadyState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqPvpSetReadyStateDefaultTypeInternal _CSReqPvpSetReadyState_default_instance_;
PROTOBUF_CONSTEXPR CSReqSetRefreshShopLock::CSReqSetRefreshShopLock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.islock_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqSetRefreshShopLockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqSetRefreshShopLockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqSetRefreshShopLockDefaultTypeInternal() {}
  union {
    CSReqSetRefreshShopLock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqSetRefreshShopLockDefaultTypeInternal _CSReqSetRefreshShopLock_default_instance_;
PROTOBUF_CONSTEXPR CSReqRetrieveChess::CSReqRetrieveChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesspos_)*/nullptr
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqRetrieveChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqRetrieveChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqRetrieveChessDefaultTypeInternal() {}
  union {
    CSReqRetrieveChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqRetrieveChessDefaultTypeInternal _CSReqRetrieveChess_default_instance_;
PROTOBUF_CONSTEXPR CSReqBuyChess::CSReqBuyChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shopindex_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.istobag_)*/false
  , /*decltype(_impl_.isdrag_)*/false
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqBuyChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqBuyChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqBuyChessDefaultTypeInternal() {}
  union {
    CSReqBuyChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqBuyChessDefaultTypeInternal _CSReqBuyChess_default_instance_;
PROTOBUF_CONSTEXPR CSReqSellChessInBag::CSReqSellChessInBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqSellChessInBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqSellChessInBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqSellChessInBagDefaultTypeInternal() {}
  union {
    CSReqSellChessInBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqSellChessInBagDefaultTypeInternal _CSReqSellChessInBag_default_instance_;
PROTOBUF_CONSTEXPR CSReqSellChessOnBoard::CSReqSellChessOnBoard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesspos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqSellChessOnBoardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqSellChessOnBoardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqSellChessOnBoardDefaultTypeInternal() {}
  union {
    CSReqSellChessOnBoard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqSellChessOnBoardDefaultTypeInternal _CSReqSellChessOnBoard_default_instance_;
PROTOBUF_CONSTEXPR CSReqMoveChess::CSReqMoveChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcchesspos_)*/nullptr
  , /*decltype(_impl_.destchesspos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqMoveChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqMoveChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqMoveChessDefaultTypeInternal() {}
  union {
    CSReqMoveChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqMoveChessDefaultTypeInternal _CSReqMoveChess_default_instance_;
PROTOBUF_CONSTEXPR CSReqBuyExp::CSReqBuyExp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqBuyExpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqBuyExpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqBuyExpDefaultTypeInternal() {}
  union {
    CSReqBuyExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqBuyExpDefaultTypeInternal _CSReqBuyExp_default_instance_;
PROTOBUF_CONSTEXPR CSReqRefreshShop::CSReqRefreshShop(
    ::_pbi::ConstantInitialized) {}
struct CSReqRefreshShopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqRefreshShopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqRefreshShopDefaultTypeInternal() {}
  union {
    CSReqRefreshShop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqRefreshShopDefaultTypeInternal _CSReqRefreshShop_default_instance_;
PROTOBUF_CONSTEXPR CSReqMoveChessInBagToMap::CSReqMoveChessInBagToMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destpos_)*/nullptr
  , /*decltype(_impl_.bagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqMoveChessInBagToMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqMoveChessInBagToMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqMoveChessInBagToMapDefaultTypeInternal() {}
  union {
    CSReqMoveChessInBagToMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqMoveChessInBagToMapDefaultTypeInternal _CSReqMoveChessInBagToMap_default_instance_;
PROTOBUF_CONSTEXPR CSReqMoveChessWithinBag::CSReqMoveChessWithinBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcbagidx_)*/0
  , /*decltype(_impl_.destbagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqMoveChessWithinBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqMoveChessWithinBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqMoveChessWithinBagDefaultTypeInternal() {}
  union {
    CSReqMoveChessWithinBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqMoveChessWithinBagDefaultTypeInternal _CSReqMoveChessWithinBag_default_instance_;
PROTOBUF_CONSTEXPR CSReqPlayerLoaded::CSReqPlayerLoaded(
    ::_pbi::ConstantInitialized) {}
struct CSReqPlayerLoadedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqPlayerLoadedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqPlayerLoadedDefaultTypeInternal() {}
  union {
    CSReqPlayerLoaded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqPlayerLoadedDefaultTypeInternal _CSReqPlayerLoaded_default_instance_;
PROTOBUF_CONSTEXPR CSReqPlayerRoundEnd::CSReqPlayerRoundEnd(
    ::_pbi::ConstantInitialized) {}
struct CSReqPlayerRoundEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqPlayerRoundEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqPlayerRoundEndDefaultTypeInternal() {}
  union {
    CSReqPlayerRoundEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqPlayerRoundEndDefaultTypeInternal _CSReqPlayerRoundEnd_default_instance_;
PROTOBUF_CONSTEXPR CSReqPickupEquipment::CSReqPickupEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqPickupEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqPickupEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqPickupEquipmentDefaultTypeInternal() {}
  union {
    CSReqPickupEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqPickupEquipmentDefaultTypeInternal _CSReqPickupEquipment_default_instance_;
PROTOBUF_CONSTEXPR CSReqCraftEquip::CSReqCraftEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipnetids_)*/{}
  , /*decltype(_impl_._equipnetids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.istochess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqCraftEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqCraftEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqCraftEquipDefaultTypeInternal() {}
  union {
    CSReqCraftEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqCraftEquipDefaultTypeInternal _CSReqCraftEquip_default_instance_;
PROTOBUF_CONSTEXPR CSReqUseEquipment::CSReqUseEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.ischessinbag_)*/false
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqUseEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqUseEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqUseEquipmentDefaultTypeInternal() {}
  union {
    CSReqUseEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqUseEquipmentDefaultTypeInternal _CSReqUseEquipment_default_instance_;
PROTOBUF_CONSTEXPR CSReqUpdateAntiAddictionTime::CSReqUpdateAntiAddictionTime(
    ::_pbi::ConstantInitialized) {}
struct CSReqUpdateAntiAddictionTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqUpdateAntiAddictionTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqUpdateAntiAddictionTimeDefaultTypeInternal() {}
  union {
    CSReqUpdateAntiAddictionTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqUpdateAntiAddictionTimeDefaultTypeInternal _CSReqUpdateAntiAddictionTime_default_instance_;
PROTOBUF_CONSTEXPR CSReqCancelReconnect::CSReqCancelReconnect(
    ::_pbi::ConstantInitialized) {}
struct CSReqCancelReconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqCancelReconnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqCancelReconnectDefaultTypeInternal() {}
  union {
    CSReqCancelReconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqCancelReconnectDefaultTypeInternal _CSReqCancelReconnect_default_instance_;
PROTOBUF_CONSTEXPR CSReqSetAutoUpgradeCharacter::CSReqSetAutoUpgradeCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.switchon_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqSetAutoUpgradeCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqSetAutoUpgradeCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqSetAutoUpgradeCharacterDefaultTypeInternal() {}
  union {
    CSReqSetAutoUpgradeCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqSetAutoUpgradeCharacterDefaultTypeInternal _CSReqSetAutoUpgradeCharacter_default_instance_;
PROTOBUF_CONSTEXPR CSReqReconnect::CSReqReconnect(
    ::_pbi::ConstantInitialized) {}
struct CSReqReconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqReconnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqReconnectDefaultTypeInternal() {}
  union {
    CSReqReconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqReconnectDefaultTypeInternal _CSReqReconnect_default_instance_;
PROTOBUF_CONSTEXPR CSReqManuallyUpgradeCharacter::CSReqManuallyUpgradeCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_.isinbag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqManuallyUpgradeCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqManuallyUpgradeCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqManuallyUpgradeCharacterDefaultTypeInternal() {}
  union {
    CSReqManuallyUpgradeCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqManuallyUpgradeCharacterDefaultTypeInternal _CSReqManuallyUpgradeCharacter_default_instance_;
PROTOBUF_CONSTEXPR CSReqQuitBattle::CSReqQuitBattle(
    ::_pbi::ConstantInitialized) {}
struct CSReqQuitBattleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqQuitBattleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqQuitBattleDefaultTypeInternal() {}
  union {
    CSReqQuitBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqQuitBattleDefaultTypeInternal _CSReqQuitBattle_default_instance_;
PROTOBUF_CONSTEXPR CSReqSusPendGame::CSReqSusPendGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.suspend_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqSusPendGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqSusPendGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqSusPendGameDefaultTypeInternal() {}
  union {
    CSReqSusPendGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqSusPendGameDefaultTypeInternal _CSReqSusPendGame_default_instance_;
PROTOBUF_CONSTEXPR CSReqChessDB::CSReqChessDB(
    ::_pbi::ConstantInitialized) {}
struct CSReqChessDBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqChessDBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqChessDBDefaultTypeInternal() {}
  union {
    CSReqChessDB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqChessDBDefaultTypeInternal _CSReqChessDB_default_instance_;
PROTOBUF_CONSTEXPR CSReqStatisticsInfo::CSReqStatisticsInfo(
    ::_pbi::ConstantInitialized) {}
struct CSReqStatisticsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqStatisticsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqStatisticsInfoDefaultTypeInternal() {}
  union {
    CSReqStatisticsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqStatisticsInfoDefaultTypeInternal _CSReqStatisticsInfo_default_instance_;
PROTOBUF_CONSTEXPR CSReqPassThrough::CSReqPassThrough(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqPassThroughDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqPassThroughDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqPassThroughDefaultTypeInternal() {}
  union {
    CSReqPassThrough _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqPassThroughDefaultTypeInternal _CSReqPassThrough_default_instance_;
PROTOBUF_CONSTEXPR CSReqUpdateBattleResult::CSReqUpdateBattleResult(
    ::_pbi::ConstantInitialized) {}
struct CSReqUpdateBattleResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqUpdateBattleResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqUpdateBattleResultDefaultTypeInternal() {}
  union {
    CSReqUpdateBattleResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqUpdateBattleResultDefaultTypeInternal _CSReqUpdateBattleResult_default_instance_;
PROTOBUF_CONSTEXPR CSReqVisitPlayer::CSReqVisitPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcplayerindex_)*/0
  , /*decltype(_impl_.destplayerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqVisitPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqVisitPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqVisitPlayerDefaultTypeInternal() {}
  union {
    CSReqVisitPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqVisitPlayerDefaultTypeInternal _CSReqVisitPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSReqLeaveGameEarly::CSReqLeaveGameEarly(
    ::_pbi::ConstantInitialized) {}
struct CSReqLeaveGameEarlyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqLeaveGameEarlyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqLeaveGameEarlyDefaultTypeInternal() {}
  union {
    CSReqLeaveGameEarly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqLeaveGameEarlyDefaultTypeInternal _CSReqLeaveGameEarly_default_instance_;
PROTOBUF_CONSTEXPR CSReqReportAbsent::CSReqReportAbsent(
    ::_pbi::ConstantInitialized) {}
struct CSReqReportAbsentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqReportAbsentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqReportAbsentDefaultTypeInternal() {}
  union {
    CSReqReportAbsent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqReportAbsentDefaultTypeInternal _CSReqReportAbsent_default_instance_;
PROTOBUF_CONSTEXPR CSRspSetMessengerPos::CSRspSetMessengerPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspSetMessengerPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspSetMessengerPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspSetMessengerPosDefaultTypeInternal() {}
  union {
    CSRspSetMessengerPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspSetMessengerPosDefaultTypeInternal _CSRspSetMessengerPos_default_instance_;
PROTOBUF_CONSTEXPR CSRspPvpSetReadyState::CSRspPvpSetReadyState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspPvpSetReadyStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspPvpSetReadyStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspPvpSetReadyStateDefaultTypeInternal() {}
  union {
    CSRspPvpSetReadyState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspPvpSetReadyStateDefaultTypeInternal _CSRspPvpSetReadyState_default_instance_;
PROTOBUF_CONSTEXPR CSRspSetRefreshShopLock::CSRspSetRefreshShopLock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.islock_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspSetRefreshShopLockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspSetRefreshShopLockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspSetRefreshShopLockDefaultTypeInternal() {}
  union {
    CSRspSetRefreshShopLock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspSetRefreshShopLockDefaultTypeInternal _CSRspSetRefreshShopLock_default_instance_;
PROTOBUF_CONSTEXPR CSRspRetrieveChess::CSRspRetrieveChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcchesspos_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspRetrieveChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspRetrieveChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspRetrieveChessDefaultTypeInternal() {}
  union {
    CSRspRetrieveChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspRetrieveChessDefaultTypeInternal _CSRspRetrieveChess_default_instance_;
PROTOBUF_CONSTEXPR CSRspBuyChess::CSRspBuyChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.shopindex_)*/0
  , /*decltype(_impl_.configid_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.istobag_)*/false
  , /*decltype(_impl_.isdrag_)*/false
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspBuyChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspBuyChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspBuyChessDefaultTypeInternal() {}
  union {
    CSRspBuyChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspBuyChessDefaultTypeInternal _CSRspBuyChess_default_instance_;
PROTOBUF_CONSTEXPR CSRspSellChessInBag::CSRspSellChessInBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.leftmoney_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspSellChessInBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspSellChessInBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspSellChessInBagDefaultTypeInternal() {}
  union {
    CSRspSellChessInBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspSellChessInBagDefaultTypeInternal _CSRspSellChessInBag_default_instance_;
PROTOBUF_CONSTEXPR CSRspSellChessOnBoard::CSRspSellChessOnBoard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesspos_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.leftmoney_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspSellChessOnBoardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspSellChessOnBoardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspSellChessOnBoardDefaultTypeInternal() {}
  union {
    CSRspSellChessOnBoard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspSellChessOnBoardDefaultTypeInternal _CSRspSellChessOnBoard_default_instance_;
PROTOBUF_CONSTEXPR CSRspMoveChess::CSRspMoveChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcchesspos_)*/nullptr
  , /*decltype(_impl_.destchesspos_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspMoveChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspMoveChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspMoveChessDefaultTypeInternal() {}
  union {
    CSRspMoveChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspMoveChessDefaultTypeInternal _CSRspMoveChess_default_instance_;
PROTOBUF_CONSTEXPR CSRspBuyExp::CSRspBuyExp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.addedexp_)*/0
  , /*decltype(_impl_.currentexp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspBuyExpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspBuyExpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspBuyExpDefaultTypeInternal() {}
  union {
    CSRspBuyExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspBuyExpDefaultTypeInternal _CSRspBuyExp_default_instance_;
PROTOBUF_CONSTEXPR CSRspRefreshShop::CSRspRefreshShop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspRefreshShopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspRefreshShopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspRefreshShopDefaultTypeInternal() {}
  union {
    CSRspRefreshShop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspRefreshShopDefaultTypeInternal _CSRspRefreshShop_default_instance_;
PROTOBUF_CONSTEXPR CSRspMoveChessInBagToMap::CSRspMoveChessInBagToMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destpos_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.bagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspMoveChessInBagToMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspMoveChessInBagToMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspMoveChessInBagToMapDefaultTypeInternal() {}
  union {
    CSRspMoveChessInBagToMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspMoveChessInBagToMapDefaultTypeInternal _CSRspMoveChessInBagToMap_default_instance_;
PROTOBUF_CONSTEXPR CSRspMoveChessWithinBag::CSRspMoveChessWithinBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcbagidx_)*/0
  , /*decltype(_impl_.destbagidx_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspMoveChessWithinBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspMoveChessWithinBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspMoveChessWithinBagDefaultTypeInternal() {}
  union {
    CSRspMoveChessWithinBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspMoveChessWithinBagDefaultTypeInternal _CSRspMoveChessWithinBag_default_instance_;
PROTOBUF_CONSTEXPR CSRspPlayerLoaded::CSRspPlayerLoaded(
    ::_pbi::ConstantInitialized) {}
struct CSRspPlayerLoadedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspPlayerLoadedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspPlayerLoadedDefaultTypeInternal() {}
  union {
    CSRspPlayerLoaded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspPlayerLoadedDefaultTypeInternal _CSRspPlayerLoaded_default_instance_;
PROTOBUF_CONSTEXPR CSRspPlayerRoundEnd::CSRspPlayerRoundEnd(
    ::_pbi::ConstantInitialized) {}
struct CSRspPlayerRoundEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspPlayerRoundEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspPlayerRoundEndDefaultTypeInternal() {}
  union {
    CSRspPlayerRoundEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspPlayerRoundEndDefaultTypeInternal _CSRspPlayerRoundEnd_default_instance_;
PROTOBUF_CONSTEXPR CSRspPickupEquipment::CSRspPickupEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.bagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspPickupEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspPickupEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspPickupEquipmentDefaultTypeInternal() {}
  union {
    CSRspPickupEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspPickupEquipmentDefaultTypeInternal _CSRspPickupEquipment_default_instance_;
PROTOBUF_CONSTEXPR CSRspCraftEquip::CSRspCraftEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
  , /*decltype(_impl_.newequip_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.istochess_)*/false
  , /*decltype(_impl_.isonbattle_)*/false
  , /*decltype(_impl_.chessbagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspCraftEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspCraftEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspCraftEquipDefaultTypeInternal() {}
  union {
    CSRspCraftEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspCraftEquipDefaultTypeInternal _CSRspCraftEquip_default_instance_;
PROTOBUF_CONSTEXPR CSRspUseEquipment::CSRspUseEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.chessbagindex_)*/0
  , /*decltype(_impl_.equipbagindex_)*/0
  , /*decltype(_impl_.ischessinbag_)*/false
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.isonbattle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspUseEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspUseEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspUseEquipmentDefaultTypeInternal() {}
  union {
    CSRspUseEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspUseEquipmentDefaultTypeInternal _CSRspUseEquipment_default_instance_;
PROTOBUF_CONSTEXPR CSRspUpdateAntiAddictionTime::CSRspUpdateAntiAddictionTime(
    ::_pbi::ConstantInitialized) {}
struct CSRspUpdateAntiAddictionTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspUpdateAntiAddictionTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspUpdateAntiAddictionTimeDefaultTypeInternal() {}
  union {
    CSRspUpdateAntiAddictionTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspUpdateAntiAddictionTimeDefaultTypeInternal _CSRspUpdateAntiAddictionTime_default_instance_;
PROTOBUF_CONSTEXPR CSRspCancelReconnect::CSRspCancelReconnect(
    ::_pbi::ConstantInitialized) {}
struct CSRspCancelReconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspCancelReconnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspCancelReconnectDefaultTypeInternal() {}
  union {
    CSRspCancelReconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspCancelReconnectDefaultTypeInternal _CSRspCancelReconnect_default_instance_;
PROTOBUF_CONSTEXPR CSRspSetAutoUpgradeCharacter::CSRspSetAutoUpgradeCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.switchon_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspSetAutoUpgradeCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspSetAutoUpgradeCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspSetAutoUpgradeCharacterDefaultTypeInternal() {}
  union {
    CSRspSetAutoUpgradeCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspSetAutoUpgradeCharacterDefaultTypeInternal _CSRspSetAutoUpgradeCharacter_default_instance_;
PROTOBUF_CONSTEXPR CSRspReconnect::CSRspReconnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isvalid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspReconnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspReconnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspReconnectDefaultTypeInternal() {}
  union {
    CSRspReconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspReconnectDefaultTypeInternal _CSRspReconnect_default_instance_;
PROTOBUF_CONSTEXPR CSRspUpdateRank::CSRspUpdateRank(
    ::_pbi::ConstantInitialized) {}
struct CSRspUpdateRankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspUpdateRankDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspUpdateRankDefaultTypeInternal() {}
  union {
    CSRspUpdateRank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspUpdateRankDefaultTypeInternal _CSRspUpdateRank_default_instance_;
PROTOBUF_CONSTEXPR CSRspManuallyUpgradeCharacter::CSRspManuallyUpgradeCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.isinbag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspManuallyUpgradeCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspManuallyUpgradeCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspManuallyUpgradeCharacterDefaultTypeInternal() {}
  union {
    CSRspManuallyUpgradeCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspManuallyUpgradeCharacterDefaultTypeInternal _CSRspManuallyUpgradeCharacter_default_instance_;
PROTOBUF_CONSTEXPR CSRspQuitBattle::CSRspQuitBattle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspQuitBattleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspQuitBattleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspQuitBattleDefaultTypeInternal() {}
  union {
    CSRspQuitBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspQuitBattleDefaultTypeInternal _CSRspQuitBattle_default_instance_;
PROTOBUF_CONSTEXPR CSRspSusPendGame::CSRspSusPendGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.suspend_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspSusPendGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspSusPendGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspSusPendGameDefaultTypeInternal() {}
  union {
    CSRspSusPendGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspSusPendGameDefaultTypeInternal _CSRspSusPendGame_default_instance_;
PROTOBUF_CONSTEXPR CSRspChessDB::CSRspChessDB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesspiecesmaplev_)*/{}
  , /*decltype(_impl_.playerchess_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspChessDBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspChessDBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspChessDBDefaultTypeInternal() {}
  union {
    CSRspChessDB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspChessDBDefaultTypeInternal _CSRspChessDB_default_instance_;
PROTOBUF_CONSTEXPR CSRspStatisticsInfo::CSRspStatisticsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerstatistics_)*/{}
  , /*decltype(_impl_.initmoney_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspStatisticsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspStatisticsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspStatisticsInfoDefaultTypeInternal() {}
  union {
    CSRspStatisticsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspStatisticsInfoDefaultTypeInternal _CSRspStatisticsInfo_default_instance_;
PROTOBUF_CONSTEXPR CSRspPassThrough::CSRspPassThrough(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspPassThroughDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspPassThroughDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspPassThroughDefaultTypeInternal() {}
  union {
    CSRspPassThrough _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspPassThroughDefaultTypeInternal _CSRspPassThrough_default_instance_;
PROTOBUF_CONSTEXPR CSRspUpdateBattleResult::CSRspUpdateBattleResult(
    ::_pbi::ConstantInitialized) {}
struct CSRspUpdateBattleResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspUpdateBattleResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspUpdateBattleResultDefaultTypeInternal() {}
  union {
    CSRspUpdateBattleResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspUpdateBattleResultDefaultTypeInternal _CSRspUpdateBattleResult_default_instance_;
PROTOBUF_CONSTEXPR CSRspVisitPlayer::CSRspVisitPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcplayerindex_)*/0
  , /*decltype(_impl_.destplayerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspVisitPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspVisitPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspVisitPlayerDefaultTypeInternal() {}
  union {
    CSRspVisitPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspVisitPlayerDefaultTypeInternal _CSRspVisitPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSRspLeaveGameEarly::CSRspLeaveGameEarly(
    ::_pbi::ConstantInitialized) {}
struct CSRspLeaveGameEarlyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspLeaveGameEarlyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspLeaveGameEarlyDefaultTypeInternal() {}
  union {
    CSRspLeaveGameEarly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspLeaveGameEarlyDefaultTypeInternal _CSRspLeaveGameEarly_default_instance_;
PROTOBUF_CONSTEXPR CSRspReportAbsent::CSRspReportAbsent(
    ::_pbi::ConstantInitialized) {}
struct CSRspReportAbsentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspReportAbsentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspReportAbsentDefaultTypeInternal() {}
  union {
    CSRspReportAbsent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspReportAbsentDefaultTypeInternal _CSRspReportAbsent_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpChangeStage::CSNtfPvpChangeStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.correction_)*/{}
  , /*decltype(_impl_.roundcnt_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.stage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpChangeStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpChangeStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpChangeStageDefaultTypeInternal() {}
  union {
    CSNtfPvpChangeStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpChangeStageDefaultTypeInternal _CSNtfPvpChangeStage_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpUpdateMoney::CSNtfPvpUpdateMoney(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.money_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.srctag_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpUpdateMoneyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpUpdateMoneyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpUpdateMoneyDefaultTypeInternal() {}
  union {
    CSNtfPvpUpdateMoney _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpUpdateMoneyDefaultTypeInternal _CSNtfPvpUpdateMoney_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpUpdateMessengerPos::CSNtfPvpUpdateMessengerPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.playerindex_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpUpdateMessengerPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpUpdateMessengerPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpUpdateMessengerPosDefaultTypeInternal() {}
  union {
    CSNtfPvpUpdateMessengerPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpUpdateMessengerPosDefaultTypeInternal _CSNtfPvpUpdateMessengerPos_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpPlayerLoggedIn::CSNtfPvpPlayerLoggedIn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpPlayerLoggedInDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpPlayerLoggedInDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpPlayerLoggedInDefaultTypeInternal() {}
  union {
    CSNtfPvpPlayerLoggedIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpPlayerLoggedInDefaultTypeInternal _CSNtfPvpPlayerLoggedIn_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpSetReadyState::CSNtfPvpSetReadyState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.state_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpSetReadyStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpSetReadyStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpSetReadyStateDefaultTypeInternal() {}
  union {
    CSNtfPvpSetReadyState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpSetReadyStateDefaultTypeInternal _CSNtfPvpSetReadyState_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpPlayerAllReady::CSNtfPvpPlayerAllReady(
    ::_pbi::ConstantInitialized) {}
struct CSNtfPvpPlayerAllReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpPlayerAllReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpPlayerAllReadyDefaultTypeInternal() {}
  union {
    CSNtfPvpPlayerAllReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpPlayerAllReadyDefaultTypeInternal _CSNtfPvpPlayerAllReady_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpPlayerDead::CSNtfPvpPlayerDead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpPlayerDeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpPlayerDeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpPlayerDeadDefaultTypeInternal() {}
  union {
    CSNtfPvpPlayerDead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpPlayerDeadDefaultTypeInternal _CSNtfPvpPlayerDead_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpPlayerOffline::CSNtfPvpPlayerOffline(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpPlayerOfflineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpPlayerOfflineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpPlayerOfflineDefaultTypeInternal() {}
  union {
    CSNtfPvpPlayerOffline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpPlayerOfflineDefaultTypeInternal _CSNtfPvpPlayerOffline_default_instance_;
PROTOBUF_CONSTEXPR CSNtfChessOnBoardSold::CSNtfChessOnBoardSold(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcpos_)*/nullptr
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfChessOnBoardSoldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfChessOnBoardSoldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfChessOnBoardSoldDefaultTypeInternal() {}
  union {
    CSNtfChessOnBoardSold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfChessOnBoardSoldDefaultTypeInternal _CSNtfChessOnBoardSold_default_instance_;
PROTOBUF_CONSTEXPR CSNtfChessRemovedFromBag::CSNtfChessRemovedFromBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfChessRemovedFromBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfChessRemovedFromBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfChessRemovedFromBagDefaultTypeInternal() {}
  union {
    CSNtfChessRemovedFromBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfChessRemovedFromBagDefaultTypeInternal _CSNtfChessRemovedFromBag_default_instance_;
PROTOBUF_CONSTEXPR CSNtfBuyChess::CSNtfBuyChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.chessconfigid_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.istobag_)*/false
  , /*decltype(_impl_.isdrag_)*/false
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfBuyChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfBuyChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfBuyChessDefaultTypeInternal() {}
  union {
    CSNtfBuyChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfBuyChessDefaultTypeInternal _CSNtfBuyChess_default_instance_;
PROTOBUF_CONSTEXPR CSNtfChessRetrievedToBag::CSNtfChessRetrievedToBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcpos_)*/nullptr
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfChessRetrievedToBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfChessRetrievedToBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfChessRetrievedToBagDefaultTypeInternal() {}
  union {
    CSNtfChessRetrievedToBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfChessRetrievedToBagDefaultTypeInternal _CSNtfChessRetrievedToBag_default_instance_;
PROTOBUF_CONSTEXPR CSNtfChessMoved::CSNtfChessMoved(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcpos_)*/nullptr
  , /*decltype(_impl_.destpos_)*/nullptr
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfChessMovedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfChessMovedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfChessMovedDefaultTypeInternal() {}
  union {
    CSNtfChessMoved _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfChessMovedDefaultTypeInternal _CSNtfChessMoved_default_instance_;
PROTOBUF_CONSTEXPR CSNtfChessFromBagToMap::CSNtfChessFromBagToMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.destpos_)*/nullptr
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.bagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfChessFromBagToMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfChessFromBagToMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfChessFromBagToMapDefaultTypeInternal() {}
  union {
    CSNtfChessFromBagToMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfChessFromBagToMapDefaultTypeInternal _CSNtfChessFromBagToMap_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPlayerLvUpgraded::CSNtfPlayerLvUpgraded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.newplayerlv_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPlayerLvUpgradedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPlayerLvUpgradedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPlayerLvUpgradedDefaultTypeInternal() {}
  union {
    CSNtfPlayerLvUpgraded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPlayerLvUpgradedDefaultTypeInternal _CSNtfPlayerLvUpgraded_default_instance_;
PROTOBUF_CONSTEXPR CSNtfUpdateExp::CSNtfUpdateExp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currentexp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfUpdateExpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfUpdateExpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfUpdateExpDefaultTypeInternal() {}
  union {
    CSNtfUpdateExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfUpdateExpDefaultTypeInternal _CSNtfUpdateExp_default_instance_;
PROTOBUF_CONSTEXPR CSNtfSetEnemy::CSNtfSetEnemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.enemyidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfSetEnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfSetEnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfSetEnemyDefaultTypeInternal() {}
  union {
    CSNtfSetEnemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfSetEnemyDefaultTypeInternal _CSNtfSetEnemy_default_instance_;
PROTOBUF_CONSTEXPR CSNtfSetSeed::CSNtfSetSeed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfSetSeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfSetSeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfSetSeedDefaultTypeInternal() {}
  union {
    CSNtfSetSeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfSetSeedDefaultTypeInternal _CSNtfSetSeed_default_instance_;
PROTOBUF_CONSTEXPR CSNtfBattleTerminated::CSNtfBattleTerminated(
    ::_pbi::ConstantInitialized) {}
struct CSNtfBattleTerminatedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfBattleTerminatedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfBattleTerminatedDefaultTypeInternal() {}
  union {
    CSNtfBattleTerminated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfBattleTerminatedDefaultTypeInternal _CSNtfBattleTerminated_default_instance_;
PROTOBUF_CONSTEXPR CSNtfShopRefreshed::CSNtfShopRefreshed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesses_)*/{}
  , /*decltype(_impl_._chesses_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfShopRefreshedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfShopRefreshedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfShopRefreshedDefaultTypeInternal() {}
  union {
    CSNtfShopRefreshed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfShopRefreshedDefaultTypeInternal _CSNtfShopRefreshed_default_instance_;
PROTOBUF_CONSTEXPR CSNtfChessMovedWithinBag::CSNtfChessMovedWithinBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.srcbagidx_)*/0
  , /*decltype(_impl_.destbagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfChessMovedWithinBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfChessMovedWithinBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfChessMovedWithinBagDefaultTypeInternal() {}
  union {
    CSNtfChessMovedWithinBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfChessMovedWithinBagDefaultTypeInternal _CSNtfChessMovedWithinBag_default_instance_;
PROTOBUF_CONSTEXPR CSNtfCreepDied::CSNtfCreepDied(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creeppos_)*/nullptr
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.creepid_)*/0
  , /*decltype(_impl_.equipnetid_)*/0
  , /*decltype(_impl_.equipid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfCreepDiedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfCreepDiedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfCreepDiedDefaultTypeInternal() {}
  union {
    CSNtfCreepDied _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfCreepDiedDefaultTypeInternal _CSNtfCreepDied_default_instance_;
PROTOBUF_CONSTEXPR CSNtfUpdateHp::CSNtfUpdateHp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfUpdateHpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfUpdateHpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfUpdateHpDefaultTypeInternal() {}
  union {
    CSNtfUpdateHp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfUpdateHpDefaultTypeInternal _CSNtfUpdateHp_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPickupEquipment::CSNtfPickupEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.equipnetid_)*/0
  , /*decltype(_impl_.bagidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPickupEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPickupEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPickupEquipmentDefaultTypeInternal() {}
  union {
    CSNtfPickupEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPickupEquipmentDefaultTypeInternal _CSNtfPickupEquipment_default_instance_;
PROTOBUF_CONSTEXPR CSNtfUseEquipment::CSNtfUseEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.ischessinbag_)*/false
  , /*decltype(_impl_.isonbattle_)*/false
  , /*decltype(_impl_.equipbagindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfUseEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfUseEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfUseEquipmentDefaultTypeInternal() {}
  union {
    CSNtfUseEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfUseEquipmentDefaultTypeInternal _CSNtfUseEquipment_default_instance_;
PROTOBUF_CONSTEXPR CSNtfOperateEquipInBag::CSNtfOperateEquipInBag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.equipmentid_)*/0
  , /*decltype(_impl_.bagidx_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.isremoved_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfOperateEquipInBagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfOperateEquipInBagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfOperateEquipInBagDefaultTypeInternal() {}
  union {
    CSNtfOperateEquipInBag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfOperateEquipInBagDefaultTypeInternal _CSNtfOperateEquipInBag_default_instance_;
PROTOBUF_CONSTEXPR CSNtfOperateEquipOnChess::CSNtfOperateEquipOnChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesstilepos_)*/nullptr
  , /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.chessbagindex_)*/0
  , /*decltype(_impl_.isremoved_)*/false
  , /*decltype(_impl_.ischessonboard_)*/false
  , /*decltype(_impl_.isonbattle_)*/false
  , /*decltype(_impl_.equipmentid_)*/0
  , /*decltype(_impl_.chessslotindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfOperateEquipOnChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfOperateEquipOnChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfOperateEquipOnChessDefaultTypeInternal() {}
  union {
    CSNtfOperateEquipOnChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfOperateEquipOnChessDefaultTypeInternal _CSNtfOperateEquipOnChess_default_instance_;
PROTOBUF_CONSTEXPR CSNtfAntiAddictionTime::CSNtfAntiAddictionTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.totalonlineduration_)*/0
  , /*decltype(_impl_.totalofflineduration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfAntiAddictionTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfAntiAddictionTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfAntiAddictionTimeDefaultTypeInternal() {}
  union {
    CSNtfAntiAddictionTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfAntiAddictionTimeDefaultTypeInternal _CSNtfAntiAddictionTime_default_instance_;
PROTOBUF_CONSTEXPR CSNtfAntiAddictionTriggered::CSNtfAntiAddictionTriggered(
    ::_pbi::ConstantInitialized) {}
struct CSNtfAntiAddictionTriggeredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfAntiAddictionTriggeredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfAntiAddictionTriggeredDefaultTypeInternal() {}
  union {
    CSNtfAntiAddictionTriggered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfAntiAddictionTriggeredDefaultTypeInternal _CSNtfAntiAddictionTriggered_default_instance_;
PROTOBUF_CONSTEXPR CSNtfAntiAddictionRemoved::CSNtfAntiAddictionRemoved(
    ::_pbi::ConstantInitialized) {}
struct CSNtfAntiAddictionRemovedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfAntiAddictionRemovedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfAntiAddictionRemovedDefaultTypeInternal() {}
  union {
    CSNtfAntiAddictionRemoved _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfAntiAddictionRemovedDefaultTypeInternal _CSNtfAntiAddictionRemoved_default_instance_;
PROTOBUF_CONSTEXPR CSNtfUnsuggestedPhase::CSNtfUnsuggestedPhase(
    ::_pbi::ConstantInitialized) {}
struct CSNtfUnsuggestedPhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfUnsuggestedPhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfUnsuggestedPhaseDefaultTypeInternal() {}
  union {
    CSNtfUnsuggestedPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfUnsuggestedPhaseDefaultTypeInternal _CSNtfUnsuggestedPhase_default_instance_;
PROTOBUF_CONSTEXPR CSNtfGameEnd::CSNtfGameEnd(
    ::_pbi::ConstantInitialized) {}
struct CSNtfGameEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfGameEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfGameEndDefaultTypeInternal() {}
  union {
    CSNtfGameEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfGameEndDefaultTypeInternal _CSNtfGameEnd_default_instance_;
PROTOBUF_CONSTEXPR CSNtfCandyReward::CSNtfCandyReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candycnt_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfCandyRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfCandyRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfCandyRewardDefaultTypeInternal() {}
  union {
    CSNtfCandyReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfCandyRewardDefaultTypeInternal _CSNtfCandyReward_default_instance_;
PROTOBUF_CONSTEXPR CSNtfWinStreak::CSNtfWinStreak(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winstreak_)*/0
  , /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfWinStreakDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfWinStreakDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfWinStreakDefaultTypeInternal() {}
  union {
    CSNtfWinStreak _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfWinStreakDefaultTypeInternal _CSNtfWinStreak_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpState::CSNtfPvpState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvptcpaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpid_)*/0
  , /*decltype(_impl_.gameid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpStateDefaultTypeInternal() {}
  union {
    CSNtfPvpState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpStateDefaultTypeInternal _CSNtfPvpState_default_instance_;
PROTOBUF_CONSTEXPR CSNtfSetAutoUpgradeCharacter::CSNtfSetAutoUpgradeCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.switchon_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfSetAutoUpgradeCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfSetAutoUpgradeCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfSetAutoUpgradeCharacterDefaultTypeInternal() {}
  union {
    CSNtfSetAutoUpgradeCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfSetAutoUpgradeCharacterDefaultTypeInternal _CSNtfSetAutoUpgradeCharacter_default_instance_;
PROTOBUF_CONSTEXPR CSNtfManuallyUpgradeCharacter::CSNtfManuallyUpgradeCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridx_)*/0
  , /*decltype(_impl_.bagindex_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_.isinbag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfManuallyUpgradeCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfManuallyUpgradeCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfManuallyUpgradeCharacterDefaultTypeInternal() {}
  union {
    CSNtfManuallyUpgradeCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfManuallyUpgradeCharacterDefaultTypeInternal _CSNtfManuallyUpgradeCharacter_default_instance_;
PROTOBUF_CONSTEXPR CSNtfQuitBattle::CSNtfQuitBattle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfQuitBattleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfQuitBattleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfQuitBattleDefaultTypeInternal() {}
  union {
    CSNtfQuitBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfQuitBattleDefaultTypeInternal _CSNtfQuitBattle_default_instance_;
PROTOBUF_CONSTEXPR CSNtfRoundResult::CSNtfRoundResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.leftfriendcount_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfRoundResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfRoundResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfRoundResultDefaultTypeInternal() {}
  union {
    CSNtfRoundResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfRoundResultDefaultTypeInternal _CSNtfRoundResult_default_instance_;
PROTOBUF_CONSTEXPR CSNtfSuspendGame::CSNtfSuspendGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suspend_)*/false
  , /*decltype(_impl_.resumetime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfSuspendGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfSuspendGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfSuspendGameDefaultTypeInternal() {}
  union {
    CSNtfSuspendGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfSuspendGameDefaultTypeInternal _CSNtfSuspendGame_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPassThrough::CSNtfPassThrough(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPassThroughDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPassThroughDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPassThroughDefaultTypeInternal() {}
  union {
    CSNtfPassThrough _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPassThroughDefaultTypeInternal _CSNtfPassThrough_default_instance_;
PROTOBUF_CONSTEXPR CSNtfUpdateBattleResult::CSNtfUpdateBattleResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camp_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfUpdateBattleResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfUpdateBattleResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfUpdateBattleResultDefaultTypeInternal() {}
  union {
    CSNtfUpdateBattleResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfUpdateBattleResultDefaultTypeInternal _CSNtfUpdateBattleResult_default_instance_;
PROTOBUF_CONSTEXPR CSNtfAA::CSNtfAA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.totalonlineduration_)*/int64_t{0}
  , /*decltype(_impl_.totalofflineduration_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfAADefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfAADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfAADefaultTypeInternal() {}
  union {
    CSNtfAA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfAADefaultTypeInternal _CSNtfAA_default_instance_;
PROTOBUF_CONSTEXPR Division::Division(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netid_)*/0
  , /*decltype(_impl_.equipid_)*/0
  , /*decltype(_impl_.destplayerindex_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DivisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DivisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DivisionDefaultTypeInternal() {}
  union {
    Division _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DivisionDefaultTypeInternal _Division_default_instance_;
PROTOBUF_CONSTEXPR CSNtfEquipDivision::CSNtfEquipDivision(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.divisions_)*/{}
  , /*decltype(_impl_.srcplayerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfEquipDivisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfEquipDivisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfEquipDivisionDefaultTypeInternal() {}
  union {
    CSNtfEquipDivision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfEquipDivisionDefaultTypeInternal _CSNtfEquipDivision_default_instance_;
PROTOBUF_CONSTEXPR CSNtfVisitPlayer::CSNtfVisitPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcplayerindex_)*/0
  , /*decltype(_impl_.destplayerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfVisitPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfVisitPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfVisitPlayerDefaultTypeInternal() {}
  union {
    CSNtfVisitPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfVisitPlayerDefaultTypeInternal _CSNtfVisitPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSNtfLeaveGameEarly::CSNtfLeaveGameEarly(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfLeaveGameEarlyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfLeaveGameEarlyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfLeaveGameEarlyDefaultTypeInternal() {}
  union {
    CSNtfLeaveGameEarly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfLeaveGameEarlyDefaultTypeInternal _CSNtfLeaveGameEarly_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpAffixTrigger::CSNtfPvpAffixTrigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affix_)*/{}
  , /*decltype(_impl_.playerindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpAffixTriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpAffixTriggerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpAffixTriggerDefaultTypeInternal() {}
  union {
    CSNtfPvpAffixTrigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpAffixTriggerDefaultTypeInternal _CSNtfPvpAffixTrigger_default_instance_;
PROTOBUF_CONSTEXPR AffixTriggerInfo::AffixTriggerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.affixid_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.chesshandle_)*/0u
  , /*decltype(_impl_.chessid_)*/0u
  , /*decltype(_impl_.frameidx_)*/0u
  , /*decltype(_impl_.isonlytrigger_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AffixTriggerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AffixTriggerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AffixTriggerInfoDefaultTypeInternal() {}
  union {
    AffixTriggerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AffixTriggerInfoDefaultTypeInternal _AffixTriggerInfo_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_battle_2eproto[132];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_battle_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_battle_2eproto = nullptr;

const uint32_t TableStruct_battle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PositionInt2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PositionInt2D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionInt2D, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PositionFloat2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PositionFloat2D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::msg::PositionFloat2D, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerBasicInfo, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerBasicInfo, _impl_.pvpplayer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _impl_.equipid_),
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _impl_.equipbagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _impl_.tilepos_),
  PROTOBUF_FIELD_OFFSET(::msg::EquipmentInfo, _impl_.ownerhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessPiecesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessPiecesData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessPiecesData, _impl_.extractprob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessPiecesMapLevData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessPiecesMapLevData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessPiecesMapLevData, _impl_.chesspieces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessNumber, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessNumber, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerChessNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerChessNumber, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerChessNumber, _impl_.chess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ReflushChessData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ReflushChessData, _impl_.isauto_),
  PROTOBUF_FIELD_OFFSET(::msg::ReflushChessData, _impl_.chessids_),
  PROTOBUF_FIELD_OFFSET(::msg::ReflushChessData, _impl_.sellchessidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.roundnum_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.moneygained_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.moneycostbybuyexp_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.moneycostbyrefreshshop_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.moneycostbybuychess_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.ismonster_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.enemyidx_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.wintype_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.refreshchess_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.intobattlechess_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleRoundData, _impl_.moneygainedbysellchess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerStatisticsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerStatisticsInfo, _impl_.pidx_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerStatisticsInfo, _impl_.winstreak_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerStatisticsInfo, _impl_.rounddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Item, _impl_.equipmentid_),
  PROTOBUF_FIELD_OFFSET(::msg::Item, _impl_.netid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ItemOnTheGround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ItemOnTheGround, _impl_.baseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemOnTheGround, _impl_.mapx_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemOnTheGround, _impl_.mapy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ItemInTheBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ItemInTheBag, _impl_.baseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemInTheBag, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Character, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::Character, _impl_.characterid_),
  PROTOBUF_FIELD_OFFSET(::msg::Character, _impl_.characterequips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterInTheBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterInTheBag, _impl_.baseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterInTheBag, _impl_.bagindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterOnTheMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterOnTheMap, _impl_.baseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterOnTheMap, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterOnTheMap, _impl_.ty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.currenthp_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.currentgold_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.currentlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.currentexp_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.shopcontents_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.playerdata_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.messengerposx_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.messengerposy_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.bagcharacters_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.mapcharacters_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.bagitems_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.grounditems_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.enemyplayerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.winstreak_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.winroundcount_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.loseroundcount_),
  PROTOBUF_FIELD_OFFSET(::msg::ReconnectPlayer, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::RoundInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::RoundInfo, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundInfo, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundInfo, _impl_.gameframe_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundInfo, _impl_.currentphase_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundInfo, _impl_.remaintime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CorrectFormation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CorrectFormation, _impl_.bagcharacters_),
  PROTOBUF_FIELD_OFFSET(::msg::CorrectFormation, _impl_.mapcharacters_),
  PROTOBUF_FIELD_OFFSET(::msg::CorrectFormation, _impl_.bagitems_),
  PROTOBUF_FIELD_OFFSET(::msg::CorrectFormation, _impl_.grounditems_),
  PROTOBUF_FIELD_OFFSET(::msg::CorrectFormation, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetMessengerPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetMessengerPos, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetMessengerPos, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPvpSetReadyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPvpSetReadyState, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetRefreshShopLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetRefreshShopLock, _impl_.islock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqRetrieveChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqRetrieveChess, _impl_.chesspos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqRetrieveChess, _impl_.bagindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _impl_.shopindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _impl_.istobag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyChess, _impl_.isdrag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSellChessInBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSellChessInBag, _impl_.bagindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSellChessOnBoard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSellChessOnBoard, _impl_.chesspos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChess, _impl_.srcchesspos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChess, _impl_.destchesspos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqBuyExp, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqRefreshShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChessInBagToMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChessInBagToMap, _impl_.bagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChessInBagToMap, _impl_.destpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChessWithinBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChessWithinBag, _impl_.srcbagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqMoveChessWithinBag, _impl_.destbagidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPlayerLoaded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPlayerRoundEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPickupEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPickupEquipment, _impl_.netid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqCraftEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqCraftEquip, _impl_.equipnetids_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqCraftEquip, _impl_.istochess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUseEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUseEquipment, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUseEquipment, _impl_.ischessinbag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUseEquipment, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUseEquipment, _impl_.pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUpdateAntiAddictionTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqCancelReconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetAutoUpgradeCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSetAutoUpgradeCharacter, _impl_.switchon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqReconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqManuallyUpgradeCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqManuallyUpgradeCharacter, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqManuallyUpgradeCharacter, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqManuallyUpgradeCharacter, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqManuallyUpgradeCharacter, _impl_.isinbag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqQuitBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSusPendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqSusPendGame, _impl_.suspend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqChessDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqStatisticsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPassThrough, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqPassThrough, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqUpdateBattleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqVisitPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqVisitPlayer, _impl_.srcplayerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqVisitPlayer, _impl_.destplayerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLeaveGameEarly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqReportAbsent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetMessengerPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetMessengerPos, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetMessengerPos, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPvpSetReadyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPvpSetReadyState, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetRefreshShopLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetRefreshShopLock, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetRefreshShopLock, _impl_.islock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspRetrieveChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspRetrieveChess, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspRetrieveChess, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspRetrieveChess, _impl_.srcchesspos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.shopindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.configid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.istobag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyChess, _impl_.isdrag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessInBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessInBag, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessInBag, _impl_.leftmoney_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessInBag, _impl_.bagindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessOnBoard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessOnBoard, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessOnBoard, _impl_.leftmoney_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSellChessOnBoard, _impl_.chesspos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChess, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChess, _impl_.srcchesspos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChess, _impl_.destchesspos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyExp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyExp, _impl_.addedexp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspBuyExp, _impl_.currentexp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspRefreshShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspRefreshShop, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessInBagToMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessInBagToMap, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessInBagToMap, _impl_.bagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessInBagToMap, _impl_.destpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessWithinBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessWithinBag, _impl_.srcbagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessWithinBag, _impl_.destbagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspMoveChessWithinBag, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPlayerLoaded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPlayerRoundEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPickupEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPickupEquipment, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPickupEquipment, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPickupEquipment, _impl_.bagidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _impl_.istochess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _impl_.newequip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _impl_.chessbagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCraftEquip, _impl_.isonbattle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.ischessinbag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.chessbagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.equipbagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUseEquipment, _impl_.isonbattle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUpdateAntiAddictionTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspCancelReconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetAutoUpgradeCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSetAutoUpgradeCharacter, _impl_.switchon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspReconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspReconnect, _impl_.isvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUpdateRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspManuallyUpgradeCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspManuallyUpgradeCharacter, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspManuallyUpgradeCharacter, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspManuallyUpgradeCharacter, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspManuallyUpgradeCharacter, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspManuallyUpgradeCharacter, _impl_.isinbag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspQuitBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspQuitBattle, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSusPendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspSusPendGame, _impl_.suspend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspChessDB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspChessDB, _impl_.chesspiecesmaplev_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspChessDB, _impl_.playerchess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspStatisticsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspStatisticsInfo, _impl_.initmoney_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspStatisticsInfo, _impl_.playerstatistics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPassThrough, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspPassThrough, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspUpdateBattleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspVisitPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspVisitPlayer, _impl_.srcplayerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspVisitPlayer, _impl_.destplayerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspLeaveGameEarly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspReportAbsent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChangeStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChangeStage, _impl_.roundcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChangeStage, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChangeStage, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChangeStage, _impl_.correction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMoney, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMoney, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMoney, _impl_.srctag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMessengerPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMessengerPos, _impl_.playerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMessengerPos, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpUpdateMessengerPos, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerLoggedIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerLoggedIn, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpSetReadyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpSetReadyState, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpSetReadyState, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerAllReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerDead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerDead, _impl_.playeridx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpPlayerOffline, _impl_.playeridx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessOnBoardSold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessOnBoardSold, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessOnBoardSold, _impl_.srcpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRemovedFromBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRemovedFromBag, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRemovedFromBag, _impl_.bagindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.chessconfigid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.istobag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBuyChess, _impl_.isdrag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRetrievedToBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRetrievedToBag, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRetrievedToBag, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessRetrievedToBag, _impl_.srcpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMoved, _impl_.srcpos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMoved, _impl_.destpos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMoved, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMoved, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessFromBagToMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessFromBagToMap, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessFromBagToMap, _impl_.bagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessFromBagToMap, _impl_.destpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPlayerLvUpgraded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPlayerLvUpgraded, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPlayerLvUpgraded, _impl_.newplayerlv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateExp, _impl_.currentexp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetEnemy, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetEnemy, _impl_.enemyidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetSeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetSeed, _impl_.seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfBattleTerminated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfShopRefreshed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfShopRefreshed, _impl_.chesses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMovedWithinBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMovedWithinBag, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMovedWithinBag, _impl_.srcbagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfChessMovedWithinBag, _impl_.destbagidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCreepDied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCreepDied, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCreepDied, _impl_.creepid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCreepDied, _impl_.equipnetid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCreepDied, _impl_.equipid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCreepDied, _impl_.creeppos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateHp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateHp, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateHp, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPickupEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPickupEquipment, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPickupEquipment, _impl_.equipnetid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPickupEquipment, _impl_.bagidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.ischessinbag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.equipbagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUseEquipment, _impl_.isonbattle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipInBag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipInBag, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipInBag, _impl_.equipmentid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipInBag, _impl_.bagidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipInBag, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipInBag, _impl_.isremoved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.isremoved_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.ischessonboard_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.chessbagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.chesstilepos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.equipmentid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.chessslotindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfOperateEquipOnChess, _impl_.isonbattle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAntiAddictionTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAntiAddictionTime, _impl_.totalonlineduration_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAntiAddictionTime, _impl_.totalofflineduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAntiAddictionTriggered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAntiAddictionRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUnsuggestedPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfGameEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCandyReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCandyReward, _impl_.candycnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfCandyReward, _impl_.playeridx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfWinStreak, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfWinStreak, _impl_.winstreak_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfWinStreak, _impl_.playeridx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpState, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpState, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpState, _impl_.pvptcpaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetAutoUpgradeCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetAutoUpgradeCharacter, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSetAutoUpgradeCharacter, _impl_.switchon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfManuallyUpgradeCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfManuallyUpgradeCharacter, _impl_.playeridx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfManuallyUpgradeCharacter, _impl_.bagindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfManuallyUpgradeCharacter, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfManuallyUpgradeCharacter, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfManuallyUpgradeCharacter, _impl_.isinbag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfQuitBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfQuitBattle, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfRoundResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfRoundResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfRoundResult, _impl_.leftfriendcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfRoundResult, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSuspendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSuspendGame, _impl_.suspend_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSuspendGame, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfSuspendGame, _impl_.resumetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPassThrough, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPassThrough, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateBattleResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfUpdateBattleResult, _impl_.camp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAA, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAA, _impl_.totalonlineduration_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfAA, _impl_.totalofflineduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Division, _impl_.netid_),
  PROTOBUF_FIELD_OFFSET(::msg::Division, _impl_.equipid_),
  PROTOBUF_FIELD_OFFSET(::msg::Division, _impl_.destplayerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::Division, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::msg::Division, _impl_.ty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfEquipDivision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfEquipDivision, _impl_.srcplayerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfEquipDivision, _impl_.divisions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfVisitPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfVisitPlayer, _impl_.srcplayerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfVisitPlayer, _impl_.destplayerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfLeaveGameEarly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfLeaveGameEarly, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpAffixTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpAffixTrigger, _impl_.playerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpAffixTrigger, _impl_.affix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _impl_.affixid_),
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _impl_.chesshandle_),
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _impl_.chessid_),
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _impl_.frameidx_),
  PROTOBUF_FIELD_OFFSET(::msg::AffixTriggerInfo, _impl_.isonlytrigger_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::PositionInt2D)},
  { 8, -1, -1, sizeof(::msg::PositionFloat2D)},
  { 16, -1, -1, sizeof(::msg::PlayerBasicInfo)},
  { 24, -1, -1, sizeof(::msg::EquipmentInfo)},
  { 36, -1, -1, sizeof(::msg::ChessPiecesData)},
  { 44, -1, -1, sizeof(::msg::ChessPiecesMapLevData)},
  { 52, -1, -1, sizeof(::msg::ChessNumber)},
  { 60, -1, -1, sizeof(::msg::PlayerChessNumber)},
  { 68, -1, -1, sizeof(::msg::ReflushChessData)},
  { 77, -1, -1, sizeof(::msg::BattleRoundData)},
  { 96, -1, -1, sizeof(::msg::PlayerStatisticsInfo)},
  { 105, -1, -1, sizeof(::msg::Item)},
  { 113, -1, -1, sizeof(::msg::ItemOnTheGround)},
  { 122, -1, -1, sizeof(::msg::ItemInTheBag)},
  { 130, -1, -1, sizeof(::msg::Character)},
  { 139, -1, -1, sizeof(::msg::CharacterInTheBag)},
  { 147, -1, -1, sizeof(::msg::CharacterOnTheMap)},
  { 156, -1, -1, sizeof(::msg::ReconnectPlayer)},
  { 180, -1, -1, sizeof(::msg::RoundInfo)},
  { 191, -1, -1, sizeof(::msg::CorrectFormation)},
  { 202, -1, -1, sizeof(::msg::CSReqSetMessengerPos)},
  { 210, -1, -1, sizeof(::msg::CSReqPvpSetReadyState)},
  { 217, -1, -1, sizeof(::msg::CSReqSetRefreshShopLock)},
  { 224, -1, -1, sizeof(::msg::CSReqRetrieveChess)},
  { 232, -1, -1, sizeof(::msg::CSReqBuyChess)},
  { 244, -1, -1, sizeof(::msg::CSReqSellChessInBag)},
  { 251, -1, -1, sizeof(::msg::CSReqSellChessOnBoard)},
  { 258, -1, -1, sizeof(::msg::CSReqMoveChess)},
  { 266, -1, -1, sizeof(::msg::CSReqBuyExp)},
  { 273, -1, -1, sizeof(::msg::CSReqRefreshShop)},
  { 279, -1, -1, sizeof(::msg::CSReqMoveChessInBagToMap)},
  { 287, -1, -1, sizeof(::msg::CSReqMoveChessWithinBag)},
  { 295, -1, -1, sizeof(::msg::CSReqPlayerLoaded)},
  { 301, -1, -1, sizeof(::msg::CSReqPlayerRoundEnd)},
  { 307, -1, -1, sizeof(::msg::CSReqPickupEquipment)},
  { 314, -1, -1, sizeof(::msg::CSReqCraftEquip)},
  { 322, -1, -1, sizeof(::msg::CSReqUseEquipment)},
  { 332, -1, -1, sizeof(::msg::CSReqUpdateAntiAddictionTime)},
  { 338, -1, -1, sizeof(::msg::CSReqCancelReconnect)},
  { 344, -1, -1, sizeof(::msg::CSReqSetAutoUpgradeCharacter)},
  { 351, -1, -1, sizeof(::msg::CSReqReconnect)},
  { 357, -1, -1, sizeof(::msg::CSReqManuallyUpgradeCharacter)},
  { 367, -1, -1, sizeof(::msg::CSReqQuitBattle)},
  { 373, -1, -1, sizeof(::msg::CSReqSusPendGame)},
  { 380, -1, -1, sizeof(::msg::CSReqChessDB)},
  { 386, -1, -1, sizeof(::msg::CSReqStatisticsInfo)},
  { 392, -1, -1, sizeof(::msg::CSReqPassThrough)},
  { 399, -1, -1, sizeof(::msg::CSReqUpdateBattleResult)},
  { 405, -1, -1, sizeof(::msg::CSReqVisitPlayer)},
  { 413, -1, -1, sizeof(::msg::CSReqLeaveGameEarly)},
  { 419, -1, -1, sizeof(::msg::CSReqReportAbsent)},
  { 425, -1, -1, sizeof(::msg::CSRspSetMessengerPos)},
  { 433, -1, -1, sizeof(::msg::CSRspPvpSetReadyState)},
  { 440, -1, -1, sizeof(::msg::CSRspSetRefreshShopLock)},
  { 448, -1, -1, sizeof(::msg::CSRspRetrieveChess)},
  { 457, -1, -1, sizeof(::msg::CSRspBuyChess)},
  { 471, -1, -1, sizeof(::msg::CSRspSellChessInBag)},
  { 480, -1, -1, sizeof(::msg::CSRspSellChessOnBoard)},
  { 489, -1, -1, sizeof(::msg::CSRspMoveChess)},
  { 498, -1, -1, sizeof(::msg::CSRspBuyExp)},
  { 507, -1, -1, sizeof(::msg::CSRspRefreshShop)},
  { 514, -1, -1, sizeof(::msg::CSRspMoveChessInBagToMap)},
  { 523, -1, -1, sizeof(::msg::CSRspMoveChessWithinBag)},
  { 532, -1, -1, sizeof(::msg::CSRspPlayerLoaded)},
  { 538, -1, -1, sizeof(::msg::CSRspPlayerRoundEnd)},
  { 544, -1, -1, sizeof(::msg::CSRspPickupEquipment)},
  { 553, -1, -1, sizeof(::msg::CSRspCraftEquip)},
  { 565, -1, -1, sizeof(::msg::CSRspUseEquipment)},
  { 578, -1, -1, sizeof(::msg::CSRspUpdateAntiAddictionTime)},
  { 584, -1, -1, sizeof(::msg::CSRspCancelReconnect)},
  { 590, -1, -1, sizeof(::msg::CSRspSetAutoUpgradeCharacter)},
  { 597, -1, -1, sizeof(::msg::CSRspReconnect)},
  { 604, -1, -1, sizeof(::msg::CSRspUpdateRank)},
  { 610, -1, -1, sizeof(::msg::CSRspManuallyUpgradeCharacter)},
  { 621, -1, -1, sizeof(::msg::CSRspQuitBattle)},
  { 628, -1, -1, sizeof(::msg::CSRspSusPendGame)},
  { 635, -1, -1, sizeof(::msg::CSRspChessDB)},
  { 643, -1, -1, sizeof(::msg::CSRspStatisticsInfo)},
  { 651, -1, -1, sizeof(::msg::CSRspPassThrough)},
  { 658, -1, -1, sizeof(::msg::CSRspUpdateBattleResult)},
  { 664, -1, -1, sizeof(::msg::CSRspVisitPlayer)},
  { 672, -1, -1, sizeof(::msg::CSRspLeaveGameEarly)},
  { 678, -1, -1, sizeof(::msg::CSRspReportAbsent)},
  { 684, -1, -1, sizeof(::msg::CSNtfPvpChangeStage)},
  { 694, -1, -1, sizeof(::msg::CSNtfPvpUpdateMoney)},
  { 703, -1, -1, sizeof(::msg::CSNtfPvpUpdateMessengerPos)},
  { 712, -1, -1, sizeof(::msg::CSNtfPvpPlayerLoggedIn)},
  { 719, -1, -1, sizeof(::msg::CSNtfPvpSetReadyState)},
  { 727, -1, -1, sizeof(::msg::CSNtfPvpPlayerAllReady)},
  { 733, -1, -1, sizeof(::msg::CSNtfPvpPlayerDead)},
  { 740, -1, -1, sizeof(::msg::CSNtfPvpPlayerOffline)},
  { 747, -1, -1, sizeof(::msg::CSNtfChessOnBoardSold)},
  { 755, -1, -1, sizeof(::msg::CSNtfChessRemovedFromBag)},
  { 763, -1, -1, sizeof(::msg::CSNtfBuyChess)},
  { 776, -1, -1, sizeof(::msg::CSNtfChessRetrievedToBag)},
  { 785, -1, -1, sizeof(::msg::CSNtfChessMoved)},
  { 795, -1, -1, sizeof(::msg::CSNtfChessFromBagToMap)},
  { 804, -1, -1, sizeof(::msg::CSNtfPlayerLvUpgraded)},
  { 812, -1, -1, sizeof(::msg::CSNtfUpdateExp)},
  { 819, -1, -1, sizeof(::msg::CSNtfSetEnemy)},
  { 827, -1, -1, sizeof(::msg::CSNtfSetSeed)},
  { 834, -1, -1, sizeof(::msg::CSNtfBattleTerminated)},
  { 840, -1, -1, sizeof(::msg::CSNtfShopRefreshed)},
  { 847, -1, -1, sizeof(::msg::CSNtfChessMovedWithinBag)},
  { 856, -1, -1, sizeof(::msg::CSNtfCreepDied)},
  { 867, -1, -1, sizeof(::msg::CSNtfUpdateHp)},
  { 875, -1, -1, sizeof(::msg::CSNtfPickupEquipment)},
  { 884, -1, -1, sizeof(::msg::CSNtfUseEquipment)},
  { 897, -1, -1, sizeof(::msg::CSNtfOperateEquipInBag)},
  { 908, -1, -1, sizeof(::msg::CSNtfOperateEquipOnChess)},
  { 923, -1, -1, sizeof(::msg::CSNtfAntiAddictionTime)},
  { 931, -1, -1, sizeof(::msg::CSNtfAntiAddictionTriggered)},
  { 937, -1, -1, sizeof(::msg::CSNtfAntiAddictionRemoved)},
  { 943, -1, -1, sizeof(::msg::CSNtfUnsuggestedPhase)},
  { 949, -1, -1, sizeof(::msg::CSNtfGameEnd)},
  { 955, -1, -1, sizeof(::msg::CSNtfCandyReward)},
  { 963, -1, -1, sizeof(::msg::CSNtfWinStreak)},
  { 971, -1, -1, sizeof(::msg::CSNtfPvpState)},
  { 980, -1, -1, sizeof(::msg::CSNtfSetAutoUpgradeCharacter)},
  { 988, -1, -1, sizeof(::msg::CSNtfManuallyUpgradeCharacter)},
  { 999, -1, -1, sizeof(::msg::CSNtfQuitBattle)},
  { 1006, -1, -1, sizeof(::msg::CSNtfRoundResult)},
  { 1015, -1, -1, sizeof(::msg::CSNtfSuspendGame)},
  { 1024, -1, -1, sizeof(::msg::CSNtfPassThrough)},
  { 1031, -1, -1, sizeof(::msg::CSNtfUpdateBattleResult)},
  { 1038, -1, -1, sizeof(::msg::CSNtfAA)},
  { 1047, -1, -1, sizeof(::msg::Division)},
  { 1058, -1, -1, sizeof(::msg::CSNtfEquipDivision)},
  { 1066, -1, -1, sizeof(::msg::CSNtfVisitPlayer)},
  { 1074, -1, -1, sizeof(::msg::CSNtfLeaveGameEarly)},
  { 1081, -1, -1, sizeof(::msg::CSNtfPvpAffixTrigger)},
  { 1089, -1, -1, sizeof(::msg::AffixTriggerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_PositionInt2D_default_instance_._instance,
  &::msg::_PositionFloat2D_default_instance_._instance,
  &::msg::_PlayerBasicInfo_default_instance_._instance,
  &::msg::_EquipmentInfo_default_instance_._instance,
  &::msg::_ChessPiecesData_default_instance_._instance,
  &::msg::_ChessPiecesMapLevData_default_instance_._instance,
  &::msg::_ChessNumber_default_instance_._instance,
  &::msg::_PlayerChessNumber_default_instance_._instance,
  &::msg::_ReflushChessData_default_instance_._instance,
  &::msg::_BattleRoundData_default_instance_._instance,
  &::msg::_PlayerStatisticsInfo_default_instance_._instance,
  &::msg::_Item_default_instance_._instance,
  &::msg::_ItemOnTheGround_default_instance_._instance,
  &::msg::_ItemInTheBag_default_instance_._instance,
  &::msg::_Character_default_instance_._instance,
  &::msg::_CharacterInTheBag_default_instance_._instance,
  &::msg::_CharacterOnTheMap_default_instance_._instance,
  &::msg::_ReconnectPlayer_default_instance_._instance,
  &::msg::_RoundInfo_default_instance_._instance,
  &::msg::_CorrectFormation_default_instance_._instance,
  &::msg::_CSReqSetMessengerPos_default_instance_._instance,
  &::msg::_CSReqPvpSetReadyState_default_instance_._instance,
  &::msg::_CSReqSetRefreshShopLock_default_instance_._instance,
  &::msg::_CSReqRetrieveChess_default_instance_._instance,
  &::msg::_CSReqBuyChess_default_instance_._instance,
  &::msg::_CSReqSellChessInBag_default_instance_._instance,
  &::msg::_CSReqSellChessOnBoard_default_instance_._instance,
  &::msg::_CSReqMoveChess_default_instance_._instance,
  &::msg::_CSReqBuyExp_default_instance_._instance,
  &::msg::_CSReqRefreshShop_default_instance_._instance,
  &::msg::_CSReqMoveChessInBagToMap_default_instance_._instance,
  &::msg::_CSReqMoveChessWithinBag_default_instance_._instance,
  &::msg::_CSReqPlayerLoaded_default_instance_._instance,
  &::msg::_CSReqPlayerRoundEnd_default_instance_._instance,
  &::msg::_CSReqPickupEquipment_default_instance_._instance,
  &::msg::_CSReqCraftEquip_default_instance_._instance,
  &::msg::_CSReqUseEquipment_default_instance_._instance,
  &::msg::_CSReqUpdateAntiAddictionTime_default_instance_._instance,
  &::msg::_CSReqCancelReconnect_default_instance_._instance,
  &::msg::_CSReqSetAutoUpgradeCharacter_default_instance_._instance,
  &::msg::_CSReqReconnect_default_instance_._instance,
  &::msg::_CSReqManuallyUpgradeCharacter_default_instance_._instance,
  &::msg::_CSReqQuitBattle_default_instance_._instance,
  &::msg::_CSReqSusPendGame_default_instance_._instance,
  &::msg::_CSReqChessDB_default_instance_._instance,
  &::msg::_CSReqStatisticsInfo_default_instance_._instance,
  &::msg::_CSReqPassThrough_default_instance_._instance,
  &::msg::_CSReqUpdateBattleResult_default_instance_._instance,
  &::msg::_CSReqVisitPlayer_default_instance_._instance,
  &::msg::_CSReqLeaveGameEarly_default_instance_._instance,
  &::msg::_CSReqReportAbsent_default_instance_._instance,
  &::msg::_CSRspSetMessengerPos_default_instance_._instance,
  &::msg::_CSRspPvpSetReadyState_default_instance_._instance,
  &::msg::_CSRspSetRefreshShopLock_default_instance_._instance,
  &::msg::_CSRspRetrieveChess_default_instance_._instance,
  &::msg::_CSRspBuyChess_default_instance_._instance,
  &::msg::_CSRspSellChessInBag_default_instance_._instance,
  &::msg::_CSRspSellChessOnBoard_default_instance_._instance,
  &::msg::_CSRspMoveChess_default_instance_._instance,
  &::msg::_CSRspBuyExp_default_instance_._instance,
  &::msg::_CSRspRefreshShop_default_instance_._instance,
  &::msg::_CSRspMoveChessInBagToMap_default_instance_._instance,
  &::msg::_CSRspMoveChessWithinBag_default_instance_._instance,
  &::msg::_CSRspPlayerLoaded_default_instance_._instance,
  &::msg::_CSRspPlayerRoundEnd_default_instance_._instance,
  &::msg::_CSRspPickupEquipment_default_instance_._instance,
  &::msg::_CSRspCraftEquip_default_instance_._instance,
  &::msg::_CSRspUseEquipment_default_instance_._instance,
  &::msg::_CSRspUpdateAntiAddictionTime_default_instance_._instance,
  &::msg::_CSRspCancelReconnect_default_instance_._instance,
  &::msg::_CSRspSetAutoUpgradeCharacter_default_instance_._instance,
  &::msg::_CSRspReconnect_default_instance_._instance,
  &::msg::_CSRspUpdateRank_default_instance_._instance,
  &::msg::_CSRspManuallyUpgradeCharacter_default_instance_._instance,
  &::msg::_CSRspQuitBattle_default_instance_._instance,
  &::msg::_CSRspSusPendGame_default_instance_._instance,
  &::msg::_CSRspChessDB_default_instance_._instance,
  &::msg::_CSRspStatisticsInfo_default_instance_._instance,
  &::msg::_CSRspPassThrough_default_instance_._instance,
  &::msg::_CSRspUpdateBattleResult_default_instance_._instance,
  &::msg::_CSRspVisitPlayer_default_instance_._instance,
  &::msg::_CSRspLeaveGameEarly_default_instance_._instance,
  &::msg::_CSRspReportAbsent_default_instance_._instance,
  &::msg::_CSNtfPvpChangeStage_default_instance_._instance,
  &::msg::_CSNtfPvpUpdateMoney_default_instance_._instance,
  &::msg::_CSNtfPvpUpdateMessengerPos_default_instance_._instance,
  &::msg::_CSNtfPvpPlayerLoggedIn_default_instance_._instance,
  &::msg::_CSNtfPvpSetReadyState_default_instance_._instance,
  &::msg::_CSNtfPvpPlayerAllReady_default_instance_._instance,
  &::msg::_CSNtfPvpPlayerDead_default_instance_._instance,
  &::msg::_CSNtfPvpPlayerOffline_default_instance_._instance,
  &::msg::_CSNtfChessOnBoardSold_default_instance_._instance,
  &::msg::_CSNtfChessRemovedFromBag_default_instance_._instance,
  &::msg::_CSNtfBuyChess_default_instance_._instance,
  &::msg::_CSNtfChessRetrievedToBag_default_instance_._instance,
  &::msg::_CSNtfChessMoved_default_instance_._instance,
  &::msg::_CSNtfChessFromBagToMap_default_instance_._instance,
  &::msg::_CSNtfPlayerLvUpgraded_default_instance_._instance,
  &::msg::_CSNtfUpdateExp_default_instance_._instance,
  &::msg::_CSNtfSetEnemy_default_instance_._instance,
  &::msg::_CSNtfSetSeed_default_instance_._instance,
  &::msg::_CSNtfBattleTerminated_default_instance_._instance,
  &::msg::_CSNtfShopRefreshed_default_instance_._instance,
  &::msg::_CSNtfChessMovedWithinBag_default_instance_._instance,
  &::msg::_CSNtfCreepDied_default_instance_._instance,
  &::msg::_CSNtfUpdateHp_default_instance_._instance,
  &::msg::_CSNtfPickupEquipment_default_instance_._instance,
  &::msg::_CSNtfUseEquipment_default_instance_._instance,
  &::msg::_CSNtfOperateEquipInBag_default_instance_._instance,
  &::msg::_CSNtfOperateEquipOnChess_default_instance_._instance,
  &::msg::_CSNtfAntiAddictionTime_default_instance_._instance,
  &::msg::_CSNtfAntiAddictionTriggered_default_instance_._instance,
  &::msg::_CSNtfAntiAddictionRemoved_default_instance_._instance,
  &::msg::_CSNtfUnsuggestedPhase_default_instance_._instance,
  &::msg::_CSNtfGameEnd_default_instance_._instance,
  &::msg::_CSNtfCandyReward_default_instance_._instance,
  &::msg::_CSNtfWinStreak_default_instance_._instance,
  &::msg::_CSNtfPvpState_default_instance_._instance,
  &::msg::_CSNtfSetAutoUpgradeCharacter_default_instance_._instance,
  &::msg::_CSNtfManuallyUpgradeCharacter_default_instance_._instance,
  &::msg::_CSNtfQuitBattle_default_instance_._instance,
  &::msg::_CSNtfRoundResult_default_instance_._instance,
  &::msg::_CSNtfSuspendGame_default_instance_._instance,
  &::msg::_CSNtfPassThrough_default_instance_._instance,
  &::msg::_CSNtfUpdateBattleResult_default_instance_._instance,
  &::msg::_CSNtfAA_default_instance_._instance,
  &::msg::_Division_default_instance_._instance,
  &::msg::_CSNtfEquipDivision_default_instance_._instance,
  &::msg::_CSNtfVisitPlayer_default_instance_._instance,
  &::msg::_CSNtfLeaveGameEarly_default_instance_._instance,
  &::msg::_CSNtfPvpAffixTrigger_default_instance_._instance,
  &::msg::_AffixTriggerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_battle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014battle.proto\022\003msg\032\014common.proto\"%\n\rPos"
  "itionInt2D\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\"\'\n\017Posi"
  "tionFloat2D\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\"G\n\017Pla"
  "yerBasicInfo\022\r\n\005Index\030\001 \001(\005\022%\n\tPvpPlayer"
  "\030\002 \001(\0132\022.msg.PvpPlayerData\"\221\001\n\rEquipment"
  "Info\022\r\n\005NetId\030\001 \001(\005\022\017\n\007EquipId\030\002 \001(\005\022\023\n\013"
  "EquipBagIdx\030\003 \001(\005\022\021\n\tPlayerIdx\030\004 \001(\005\022#\n\007"
  "TilePos\030\005 \001(\0132\022.msg.PositionInt2D\022\023\n\013Own"
  "erHandle\030\006 \001(\005\"2\n\017ChessPiecesData\022\n\n\002Id\030"
  "\001 \001(\005\022\023\n\013extractProb\030\002 \001(\005\"Q\n\025ChessPiece"
  "sMapLevData\022\r\n\005level\030\001 \001(\005\022)\n\013chessPiece"
  "s\030\002 \003(\0132\024.msg.ChessPiecesData\")\n\013ChessNu"
  "mber\022\n\n\002Id\030\001 \001(\005\022\016\n\006Number\030\002 \001(\005\"@\n\021Play"
  "erChessNumber\022\n\n\002Id\030\001 \001(\t\022\037\n\005chess\030\002 \003(\013"
  "2\020.msg.ChessNumber\"J\n\020ReflushChessData\022\016"
  "\n\006isAuto\030\001 \001(\010\022\020\n\010chessIds\030\002 \003(\005\022\024\n\014sell"
  "ChessIdx\030\003 \003(\005\"\327\002\n\017BattleRoundData\022\020\n\010Ro"
  "undNum\030\001 \001(\005\022\016\n\006Damage\030\002 \001(\005\022\023\n\013MoneyGai"
  "ned\030\003 \001(\005\022\031\n\021MoneyCostByBuyExp\030\004 \001(\005\022\036\n\026"
  "MoneyCostByRefreshShop\030\005 \001(\005\022\033\n\023MoneyCos"
  "tByBuyChess\030\006 \001(\005\022\021\n\tIsMonster\030\007 \001(\010\022\020\n\010"
  "EnemyIdx\030\010 \001(\005\022\013\n\003Exp\030\t \001(\005\022\035\n\007winType\030\n"
  " \001(\0162\014.msg.WINTYPE\022+\n\014refreshChess\030\013 \003(\013"
  "2\025.msg.ReflushChessData\022\027\n\017intoBattleChe"
  "ss\030\014 \003(\005\022\036\n\026MoneyGainedBySellChess\030\r \001(\005"
  "\"`\n\024PlayerStatisticsInfo\022\014\n\004pidx\030\001 \001(\005\022\021"
  "\n\twinStreak\030\002 \001(\005\022\'\n\troundData\030\003 \003(\0132\024.m"
  "sg.BattleRoundData\"*\n\004Item\022\023\n\013EquipmentI"
  "d\030\001 \001(\005\022\r\n\005NetId\030\002 \001(\005\"J\n\017ItemOnTheGroun"
  "d\022\033\n\010BaseInfo\030\001 \001(\0132\t.msg.Item\022\014\n\004MapX\030\002"
  " \001(\005\022\014\n\004MapY\030\003 \001(\005\":\n\014ItemInTheBag\022\033\n\010Ba"
  "seInfo\030\001 \001(\0132\t.msg.Item\022\r\n\005Index\030\002 \001(\005\"_"
  "\n\tCharacter\022\021\n\tPlayerIdx\030\001 \001(\005\022\023\n\013Charac"
  "terId\030\002 \001(\005\022*\n\017CharacterEquips\030\006 \003(\0132\021.m"
  "sg.ItemInTheBag\"G\n\021CharacterInTheBag\022 \n\010"
  "BaseInfo\030\001 \001(\0132\016.msg.Character\022\020\n\010BagInd"
  "ex\030\002 \001(\005\"M\n\021CharacterOnTheMap\022 \n\010BaseInf"
  "o\030\001 \001(\0132\016.msg.Character\022\n\n\002Tx\030\002 \001(\005\022\n\n\002T"
  "y\030\003 \001(\005\"\372\003\n\017ReconnectPlayer\022\021\n\tPlayerIdx"
  "\030\001 \001(\005\022\021\n\tCurrentHp\030\002 \001(\005\022\023\n\013CurrentGold"
  "\030\003 \001(\005\022\024\n\014CurrentLevel\030\004 \001(\005\022\022\n\nCurrentE"
  "xp\030\005 \001(\005\022\024\n\014ShopContents\030\006 \003(\005\022&\n\nPlayer"
  "Data\030\007 \001(\0132\022.msg.PvpPlayerData\022\025\n\rMessen"
  "gerPosX\030\010 \001(\002\022\025\n\rMessengerPosY\030\t \001(\002\022-\n\r"
  "BagCharacters\030\n \003(\0132\026.msg.CharacterInThe"
  "Bag\022-\n\rMapCharacters\030\013 \003(\0132\026.msg.Charact"
  "erOnTheMap\022#\n\010BagItems\030\014 \003(\0132\021.msg.ItemI"
  "nTheBag\022)\n\013GroundItems\030\r \003(\0132\024.msg.ItemO"
  "nTheGround\022\030\n\020EnemyPlayerIndex\030\016 \001(\005\022\021\n\t"
  "WinStreak\030\017 \001(\005\022\025\n\rWinRoundCount\030\020 \001(\005\022\026"
  "\n\016LoseRoundCount\030\021 \001(\005\022\014\n\004Rank\030\022 \001(\005\"u\n\t"
  "RoundInfo\022\014\n\004Seed\030\001 \001(\005\022\r\n\005Round\030\002 \001(\005\022\021"
  "\n\tGameFrame\030\003 \001(\005\022$\n\014CurrentPhase\030\004 \001(\0162"
  "\016.msg.GameStage\022\022\n\nRemainTime\030\005 \001(\005\"\325\001\n\020"
  "CorrectFormation\022-\n\rBagCharacters\030\001 \003(\0132"
  "\026.msg.CharacterInTheBag\022-\n\rMapCharacters"
  "\030\002 \003(\0132\026.msg.CharacterOnTheMap\022#\n\010BagIte"
  "ms\030\003 \003(\0132\021.msg.ItemInTheBag\022)\n\013GroundIte"
  "ms\030\004 \003(\0132\024.msg.ItemOnTheGround\022\023\n\013Player"
  "Index\030\005 \001(\005\"_\n\024CSReqSetMessengerPos\022!\n\003P"
  "os\030\001 \001(\0132\024.msg.PositionFloat2D\022$\n\004Type\030\002"
  " \001(\0162\026.msg.MessengerMoveType\"&\n\025CSReqPvp"
  "SetReadyState\022\r\n\005State\030\001 \001(\010\")\n\027CSReqSet"
  "RefreshShopLock\022\016\n\006IsLock\030\001 \001(\010\"L\n\022CSReq"
  "RetrieveChess\022$\n\010ChessPos\030\001 \001(\0132\022.msg.Po"
  "sitionInt2D\022\020\n\010BagIndex\030\002 \001(\005\"m\n\rCSReqBu"
  "yChess\022\021\n\tShopIndex\030\001 \001(\005\022\017\n\007IsToBag\030\002 \001"
  "(\010\022\020\n\010BagIndex\030\003 \001(\005\022\n\n\002Tx\030\004 \001(\005\022\n\n\002Ty\030\005"
  " \001(\005\022\016\n\006IsDrag\030\006 \001(\010\"\'\n\023CSReqSellChessIn"
  "Bag\022\020\n\010BagIndex\030\001 \001(\005\"=\n\025CSReqSellChessO"
  "nBoard\022$\n\010ChessPos\030\001 \001(\0132\022.msg.PositionI"
  "nt2D\"c\n\016CSReqMoveChess\022\'\n\013SrcChessPos\030\001 "
  "\001(\0132\022.msg.PositionInt2D\022(\n\014DestChessPos\030"
  "\002 \001(\0132\022.msg.PositionInt2D\"\032\n\013CSReqBuyExp"
  "\022\013\n\003Exp\030\001 \001(\005\"\022\n\020CSReqRefreshShop\"O\n\030CSR"
  "eqMoveChessInBagToMap\022\016\n\006BagIdx\030\001 \001(\005\022#\n"
  "\007DestPos\030\002 \001(\0132\022.msg.PositionInt2D\"@\n\027CS"
  "ReqMoveChessWithinBag\022\021\n\tSrcBagIdx\030\001 \001(\005"
  "\022\022\n\nDestBagIdx\030\002 \001(\005\"\023\n\021CSReqPlayerLoade"
  "d\"\025\n\023CSReqPlayerRoundEnd\"%\n\024CSReqPickupE"
  "quipment\022\r\n\005NetId\030\001 \001(\005\"9\n\017CSReqCraftEqu"
  "ip\022\023\n\013EquipNetIds\030\001 \003(\005\022\021\n\tIsToChess\030\002 \001"
  "(\010\"k\n\021CSReqUseEquipment\022\r\n\005NetId\030\001 \001(\005\022\024"
  "\n\014IsChessInBag\030\002 \001(\010\022\020\n\010BagIndex\030\003 \001(\005\022\037"
  "\n\003Pos\030\004 \001(\0132\022.msg.PositionInt2D\"\036\n\034CSReq"
  "UpdateAntiAddictionTime\"\026\n\024CSReqCancelRe"
  "connect\"0\n\034CSReqSetAutoUpgradeCharacter\022"
  "\020\n\010SwitchOn\030\001 \001(\010\"\020\n\016CSReqReconnect\"Z\n\035C"
  "SReqManuallyUpgradeCharacter\022\020\n\010BagIndex"
  "\030\001 \001(\005\022\n\n\002Tx\030\002 \001(\005\022\n\n\002Ty\030\003 \001(\005\022\017\n\007IsInBa"
  "g\030\004 \001(\010\"\021\n\017CSReqQuitBattle\"#\n\020CSReqSusPe"
  "ndGame\022\017\n\007susPend\030\001 \001(\010\"\016\n\014CSReqChessDB\""
  "\025\n\023CSReqStatisticsInfo\" \n\020CSReqPassThrou"
  "gh\022\014\n\004data\030\001 \001(\014\"\031\n\027CSReqUpdateBattleRes"
  "ult\"C\n\020CSReqVisitPlayer\022\026\n\016SrcPlayerInde"
  "x\030\001 \001(\005\022\027\n\017DestPlayerIndex\030\002 \001(\005\"\025\n\023CSRe"
  "qLeaveGameEarly\"\023\n\021CSReqReportAbsent\"M\n\024"
  "CSRspSetMessengerPos\022\017\n\007Success\030\001 \001(\010\022$\n"
  "\004Type\030\002 \001(\0162\026.msg.MessengerMoveType\"(\n\025C"
  "SRspPvpSetReadyState\022\017\n\007Success\030\001 \001(\010\":\n"
  "\027CSRspSetRefreshShopLock\022\017\n\007Success\030\001 \001("
  "\010\022\016\n\006IsLock\030\002 \001(\010\"`\n\022CSRspRetrieveChess\022"
  "\017\n\007Success\030\001 \001(\010\022\020\n\010BagIndex\030\002 \001(\005\022\'\n\013Sr"
  "cChessPos\030\003 \001(\0132\022.msg.PositionInt2D\"\220\001\n\r"
  "CSRspBuyChess\022\017\n\007Success\030\001 \001(\010\022\020\n\010BagInd"
  "ex\030\002 \001(\005\022\021\n\tShopIndex\030\003 \001(\005\022\020\n\010ConfigId\030"
  "\004 \001(\005\022\017\n\007IsToBag\030\005 \001(\010\022\n\n\002Tx\030\006 \001(\005\022\n\n\002Ty"
  "\030\007 \001(\005\022\016\n\006IsDrag\030\010 \001(\010\"K\n\023CSRspSellChess"
  "InBag\022\017\n\007Success\030\001 \001(\010\022\021\n\tLeftMoney\030\002 \001("
  "\005\022\020\n\010BagIndex\030\003 \001(\005\"a\n\025CSRspSellChessOnB"
  "oard\022\017\n\007Success\030\001 \001(\010\022\021\n\tLeftMoney\030\002 \001(\005"
  "\022$\n\010ChessPos\030\003 \001(\0132\022.msg.PositionInt2D\"t"
  "\n\016CSRspMoveChess\022\017\n\007Success\030\001 \001(\010\022\'\n\013Src"
  "ChessPos\030\002 \001(\0132\022.msg.PositionInt2D\022(\n\014De"
  "stChessPos\030\003 \001(\0132\022.msg.PositionInt2D\"D\n\013"
  "CSRspBuyExp\022\017\n\007Success\030\001 \001(\010\022\020\n\010AddedExp"
  "\030\002 \001(\005\022\022\n\nCurrentExp\030\003 \001(\005\"#\n\020CSRspRefre"
  "shShop\022\017\n\007Success\030\001 \001(\010\"`\n\030CSRspMoveChes"
  "sInBagToMap\022\017\n\007Success\030\001 \001(\010\022\016\n\006BagIdx\030\002"
  " \001(\005\022#\n\007DestPos\030\003 \001(\0132\022.msg.PositionInt2"
  "D\"Q\n\027CSRspMoveChessWithinBag\022\021\n\tSrcBagId"
  "x\030\001 \001(\005\022\022\n\nDestBagIdx\030\002 \001(\005\022\017\n\007Success\030\003"
  " \001(\010\"\023\n\021CSRspPlayerLoaded\"\025\n\023CSRspPlayer"
  "RoundEnd\"F\n\024CSRspPickupEquipment\022\r\n\005NetI"
  "d\030\001 \001(\005\022\017\n\007Success\030\002 \001(\010\022\016\n\006BagIdx\030\003 \001(\005"
  "\"\224\001\n\017CSRspCraftEquip\022\017\n\007Success\030\001 \001(\010\022\021\n"
  "\tIsToChess\030\002 \001(\010\022\016\n\006Equips\030\003 \003(\005\022$\n\010NewE"
  "quip\030\004 \001(\0132\022.msg.EquipmentInfo\022\023\n\013ChessB"
  "agIdx\030\005 \001(\005\022\022\n\nIsOnBattle\030\006 \001(\010\"\254\001\n\021CSRs"
  "pUseEquipment\022\r\n\005NetId\030\001 \001(\005\022\024\n\014IsChessI"
  "nBag\030\002 \001(\010\022\025\n\rChessBagIndex\030\003 \001(\005\022\025\n\rEqu"
  "ipBagIndex\030\004 \001(\005\022\037\n\003Pos\030\005 \001(\0132\022.msg.Posi"
  "tionInt2D\022\017\n\007Success\030\006 \001(\010\022\022\n\nIsOnBattle"
  "\030\007 \001(\010\"\036\n\034CSRspUpdateAntiAddictionTime\"\026"
  "\n\024CSRspCancelReconnect\"0\n\034CSRspSetAutoUp"
  "gradeCharacter\022\020\n\010SwitchOn\030\001 \001(\010\"!\n\016CSRs"
  "pReconnect\022\017\n\007IsValid\030\001 \001(\010\"\021\n\017CSRspUpda"
  "teRank\"k\n\035CSRspManuallyUpgradeCharacter\022"
  "\020\n\010BagIndex\030\001 \001(\005\022\n\n\002Tx\030\002 \001(\005\022\n\n\002Ty\030\003 \001("
  "\005\022\017\n\007Success\030\004 \001(\010\022\017\n\007IsInBag\030\005 \001(\010\"\"\n\017C"
  "SRspQuitBattle\022\017\n\007Success\030\001 \001(\010\"#\n\020CSRsp"
  "SusPendGame\022\017\n\007susPend\030\001 \001(\010\"r\n\014CSRspChe"
  "ssDB\0225\n\021chessPiecesMapLev\030\001 \003(\0132\032.msg.Ch"
  "essPiecesMapLevData\022+\n\013playerChess\030\002 \003(\013"
  "2\026.msg.PlayerChessNumber\"]\n\023CSRspStatist"
  "icsInfo\022\021\n\tinitMoney\030\001 \001(\005\0223\n\020playerStat"
  "istics\030\002 \003(\0132\031.msg.PlayerStatisticsInfo\""
  " \n\020CSRspPassThrough\022\014\n\004data\030\001 \003(\014\"\031\n\027CSR"
  "spUpdateBattleResult\"C\n\020CSRspVisitPlayer"
  "\022\026\n\016SrcPlayerIndex\030\001 \001(\005\022\027\n\017DestPlayerIn"
  "dex\030\002 \001(\005\"\025\n\023CSRspLeaveGameEarly\"\023\n\021CSRs"
  "pReportAbsent\"\203\001\n\023CSNtfPvpChangeStage\022\020\n"
  "\010RoundCnt\030\001 \001(\005\022\020\n\010Duration\030\002 \001(\005\022\035\n\005Sta"
  "ge\030\003 \001(\0162\016.msg.GameStage\022)\n\nCorrection\030\004"
  " \003(\0132\025.msg.CorrectFormation\"G\n\023CSNtfPvpU"
  "pdateMoney\022\r\n\005Money\030\001 \001(\005\022\021\n\tPlayerIdx\030\002"
  " \001(\005\022\016\n\006SrcTag\030\003 \001(\005\"z\n\032CSNtfPvpUpdateMe"
  "ssengerPos\022\023\n\013PlayerIndex\030\001 \001(\005\022!\n\003Pos\030\002"
  " \001(\0132\024.msg.PositionFloat2D\022$\n\004Type\030\003 \001(\016"
  "2\026.msg.MessengerMoveType\"B\n\026CSNtfPvpPlay"
  "erLoggedIn\022(\n\nPlayerInfo\030\001 \001(\0132\024.msg.Pla"
  "yerBasicInfo\"9\n\025CSNtfPvpSetReadyState\022\021\n"
  "\tPlayerIdx\030\001 \001(\005\022\r\n\005State\030\002 \001(\010\"\030\n\026CSNtf"
  "PvpPlayerAllReady\"\'\n\022CSNtfPvpPlayerDead\022"
  "\021\n\tPlayerIdx\030\001 \001(\005\"*\n\025CSNtfPvpPlayerOffl"
  "ine\022\021\n\tPlayerIdx\030\001 \001(\005\"N\n\025CSNtfChessOnBo"
  "ardSold\022\021\n\tPlayerIdx\030\001 \001(\005\022\"\n\006SrcPos\030\002 \001"
  "(\0132\022.msg.PositionInt2D\"\?\n\030CSNtfChessRemo"
  "vedFromBag\022\021\n\tPlayerIdx\030\001 \001(\005\022\020\n\010BagInde"
  "x\030\002 \001(\005\"\204\001\n\rCSNtfBuyChess\022\021\n\tPlayerIdx\030\001"
  " \001(\005\022\025\n\rChessConfigId\030\002 \001(\005\022\017\n\007IsToBag\030\003"
  " \001(\010\022\020\n\010BagIndex\030\004 \001(\005\022\n\n\002Tx\030\005 \001(\005\022\n\n\002Ty"
  "\030\006 \001(\005\022\016\n\006IsDrag\030\007 \001(\010\"c\n\030CSNtfChessRetr"
  "ievedToBag\022\021\n\tPlayerIdx\030\001 \001(\005\022\020\n\010BagInde"
  "x\030\002 \001(\005\022\"\n\006SrcPos\030\003 \001(\0132\022.msg.PositionIn"
  "t2D\"~\n\017CSNtfChessMoved\022\"\n\006SrcPos\030\001 \001(\0132\022"
  ".msg.PositionInt2D\022#\n\007DestPos\030\002 \001(\0132\022.ms"
  "g.PositionInt2D\022\021\n\tPlayerIdx\030\003 \001(\005\022\017\n\007Su"
  "ccess\030\004 \001(\010\"`\n\026CSNtfChessFromBagToMap\022\021\n"
  "\tPlayerIdx\030\001 \001(\005\022\016\n\006BagIdx\030\002 \001(\005\022#\n\007Dest"
  "Pos\030\003 \001(\0132\022.msg.PositionInt2D\"\?\n\025CSNtfPl"
  "ayerLvUpgraded\022\021\n\tPlayerIdx\030\001 \001(\005\022\023\n\013New"
  "PlayerLv\030\002 \001(\005\"$\n\016CSNtfUpdateExp\022\022\n\nCurr"
  "entExp\030\001 \001(\005\"4\n\rCSNtfSetEnemy\022\021\n\tPlayerI"
  "dx\030\001 \001(\005\022\020\n\010EnemyIdx\030\002 \001(\005\"\034\n\014CSNtfSetSe"
  "ed\022\014\n\004Seed\030\001 \001(\005\"\027\n\025CSNtfBattleTerminate"
  "d\"%\n\022CSNtfShopRefreshed\022\017\n\007Chesses\030\001 \003(\005"
  "\"T\n\030CSNtfChessMovedWithinBag\022\021\n\tPlayerId"
  "x\030\001 \001(\005\022\021\n\tSrcBagIdx\030\002 \001(\005\022\022\n\nDestBagIdx"
  "\030\003 \001(\005\"\177\n\016CSNtfCreepDied\022\021\n\tPlayerIdx\030\001 "
  "\001(\005\022\017\n\007CreepId\030\002 \001(\005\022\022\n\nEquipNetId\030\003 \001(\005"
  "\022\017\n\007EquipId\030\004 \001(\005\022$\n\010CreepPos\030\005 \001(\0132\022.ms"
  "g.PositionInt2D\".\n\rCSNtfUpdateHp\022\021\n\tPlay"
  "erIdx\030\001 \001(\005\022\n\n\002Hp\030\002 \001(\005\"M\n\024CSNtfPickupEq"
  "uipment\022\021\n\tPlayerIdx\030\001 \001(\005\022\022\n\nEquipNetId"
  "\030\002 \001(\005\022\016\n\006BagIdx\030\003 \001(\005\"\251\001\n\021CSNtfUseEquip"
  "ment\022\r\n\005NetId\030\001 \001(\005\022\024\n\014IsChessInBag\030\002 \001("
  "\010\022\020\n\010BagIndex\030\003 \001(\005\022\021\n\tPlayerIdx\030\004 \001(\005\022\037"
  "\n\003Pos\030\005 \001(\0132\022.msg.PositionInt2D\022\025\n\rEquip"
  "BagIndex\030\006 \001(\005\022\022\n\nIsOnBattle\030\007 \001(\010\"r\n\026CS"
  "NtfOperateEquipInBag\022\r\n\005NetId\030\001 \001(\005\022\023\n\013E"
  "quipmentId\030\002 \001(\005\022\016\n\006BagIdx\030\003 \001(\005\022\021\n\tPlay"
  "erIdx\030\004 \001(\005\022\021\n\tIsRemoved\030\005 \001(\010\"\351\001\n\030CSNtf"
  "OperateEquipOnChess\022\r\n\005NetId\030\001 \001(\005\022\021\n\tPl"
  "ayerIdx\030\002 \001(\005\022\021\n\tIsRemoved\030\003 \001(\010\022\026\n\016IsCh"
  "essOnBoard\030\004 \001(\010\022\025\n\rChessBagIndex\030\005 \001(\005\022"
  "(\n\014ChessTilePos\030\006 \001(\0132\022.msg.PositionInt2"
  "D\022\023\n\013EquipmentId\030\007 \001(\005\022\026\n\016ChessSlotIndex"
  "\030\010 \001(\005\022\022\n\nIsOnBattle\030\t \001(\010\"S\n\026CSNtfAntiA"
  "ddictionTime\022\033\n\023TotalOnlineDuration\030\001 \001("
  "\005\022\034\n\024TotalOfflineDuration\030\002 \001(\005\"\035\n\033CSNtf"
  "AntiAddictionTriggered\"\033\n\031CSNtfAntiAddic"
  "tionRemoved\"\027\n\025CSNtfUnsuggestedPhase\"\016\n\014"
  "CSNtfGameEnd\"7\n\020CSNtfCandyReward\022\020\n\010Cand"
  "yCnt\030\001 \001(\005\022\021\n\tPlayerIdx\030\002 \001(\005\"6\n\016CSNtfWi"
  "nStreak\022\021\n\tWinStreak\030\001 \001(\005\022\021\n\tPlayerIdx\030"
  "\002 \001(\005\"B\n\rCSNtfPvpState\022\r\n\005PvpID\030\001 \001(\005\022\016\n"
  "\006GameID\030\002 \001(\005\022\022\n\nPvpTCPAddr\030\003 \001(\t\"C\n\034CSN"
  "tfSetAutoUpgradeCharacter\022\021\n\tPlayerIdx\030\001"
  " \001(\005\022\020\n\010SwitchOn\030\002 \001(\010\"m\n\035CSNtfManuallyU"
  "pgradeCharacter\022\021\n\tPlayerIdx\030\001 \001(\005\022\020\n\010Ba"
  "gIndex\030\002 \001(\005\022\n\n\002Tx\030\003 \001(\005\022\n\n\002Ty\030\004 \001(\005\022\017\n\007"
  "IsInBag\030\005 \001(\010\"&\n\017CSNtfQuitBattle\022\023\n\013Play"
  "erIndex\030\001 \001(\005\"Y\n\020CSNtfRoundResult\022\034\n\006Res"
  "ult\030\001 \001(\0162\014.msg.WINTYPE\022\027\n\017LeftFriendCou"
  "nt\030\002 \001(\005\022\016\n\006Damage\030\003 \001(\005\"D\n\020CSNtfSuspend"
  "Game\022\017\n\007susPend\030\001 \001(\010\022\013\n\003pid\030\002 \001(\t\022\022\n\nre"
  "sumeTime\030\003 \001(\005\" \n\020CSNtfPassThrough\022\014\n\004da"
  "ta\030\001 \001(\014\":\n\027CSNtfUpdateBattleResult\022\037\n\004C"
  "amp\030\001 \003(\0132\021.msg.CSDTCampData\"h\n\007CSNtfAA\022"
  "\"\n\005State\030\001 \001(\0162\023.msg.AddictionState\022\033\n\023T"
  "otalOnlineDuration\030\002 \001(\003\022\034\n\024TotalOffline"
  "Duration\030\003 \001(\003\"[\n\010Division\022\r\n\005NetID\030\001 \001("
  "\005\022\017\n\007EquipID\030\002 \001(\005\022\027\n\017DestPlayerIndex\030\003 "
  "\001(\005\022\n\n\002TX\030\004 \001(\005\022\n\n\002TY\030\005 \001(\005\"N\n\022CSNtfEqui"
  "pDivision\022\026\n\016SrcPlayerIndex\030\001 \001(\005\022 \n\tDiv"
  "isions\030\002 \003(\0132\r.msg.Division\"C\n\020CSNtfVisi"
  "tPlayer\022\026\n\016SrcPlayerIndex\030\001 \001(\005\022\027\n\017DestP"
  "layerIndex\030\002 \001(\005\"*\n\023CSNtfLeaveGameEarly\022"
  "\023\n\013PlayerIndex\030\001 \001(\r\"Q\n\024CSNtfPvpAffixTri"
  "gger\022\023\n\013PlayerIndex\030\001 \001(\r\022$\n\005Affix\030\003 \003(\013"
  "2\025.msg.AffixTriggerInfo\"\201\001\n\020AffixTrigger"
  "Info\022\017\n\007AffixId\030\001 \001(\r\022\r\n\005Value\030\002 \001(\002\022\023\n\013"
  "ChessHandle\030\003 \001(\r\022\017\n\007ChessId\030\004 \001(\r\022\020\n\010Fr"
  "ameIdx\030\005 \001(\r\022\025\n\rIsOnlyTrigger\030\006 \001(\010*Z\n\tG"
  "ameStage\022\016\n\nRoundStart\020\000\022\014\n\010GetReady\020\001\022\n"
  "\n\006Freeze\020\002\022\n\n\006Battle\020\003\022\007\n\003End\020\004\022\016\n\nStage"
  "Count\020\005* \n\tGamePhase\022\t\n\005Early\020\000\022\010\n\004Late\020"
  "\001*7\n\016AddictionState\022\013\n\007Healthy\020\000\022\t\n\005Tire"
  "d\020\001\022\r\n\tUnhealthy\020\002*1\n\021MessengerMoveType\022"
  "\005\n\001_\020\000\022\n\n\006Normal\020\001\022\t\n\005Flash\020\002*.\n\016PvpOffl"
  "ineType\022\014\n\010Normally\020\000\022\016\n\nLeaveEarly\020\001b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_battle_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_battle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_battle_2eproto = {
    false, false, 10085, descriptor_table_protodef_battle_2eproto,
    "battle.proto",
    &descriptor_table_battle_2eproto_once, descriptor_table_battle_2eproto_deps, 1, 132,
    schemas, file_default_instances, TableStruct_battle_2eproto::offsets,
    file_level_metadata_battle_2eproto, file_level_enum_descriptors_battle_2eproto,
    file_level_service_descriptors_battle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_battle_2eproto_getter() {
  return &descriptor_table_battle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_battle_2eproto(&descriptor_table_battle_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[0];
}
bool GameStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GamePhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[1];
}
bool GamePhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddictionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[2];
}
bool AddictionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessengerMoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[3];
}
bool MessengerMoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PvpOfflineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battle_2eproto);
  return file_level_enum_descriptors_battle_2eproto[4];
}
bool PvpOfflineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PositionInt2D::_Internal {
 public:
};

PositionInt2D::PositionInt2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PositionInt2D)
}
PositionInt2D::PositionInt2D(const PositionInt2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionInt2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:msg.PositionInt2D)
}

inline void PositionInt2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionInt2D::~PositionInt2D() {
  // @@protoc_insertion_point(destructor:msg.PositionInt2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionInt2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionInt2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionInt2D::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PositionInt2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionInt2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionInt2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PositionInt2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 X = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 Y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PositionInt2D)
  return target;
}

size_t PositionInt2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PositionInt2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 X = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 Y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionInt2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionInt2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionInt2D::GetClassData() const { return &_class_data_; }


void PositionInt2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionInt2D*>(&to_msg);
  auto& from = static_cast<const PositionInt2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PositionInt2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionInt2D::CopyFrom(const PositionInt2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PositionInt2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInt2D::IsInitialized() const {
  return true;
}

void PositionInt2D::InternalSwap(PositionInt2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionInt2D, _impl_.y_)
      + sizeof(PositionInt2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PositionInt2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionInt2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[0]);
}

// ===================================================================

class PositionFloat2D::_Internal {
 public:
};

PositionFloat2D::PositionFloat2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PositionFloat2D)
}
PositionFloat2D::PositionFloat2D(const PositionFloat2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionFloat2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:msg.PositionFloat2D)
}

inline void PositionFloat2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionFloat2D::~PositionFloat2D() {
  // @@protoc_insertion_point(destructor:msg.PositionFloat2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionFloat2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionFloat2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionFloat2D::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PositionFloat2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionFloat2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionFloat2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PositionFloat2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PositionFloat2D)
  return target;
}

size_t PositionFloat2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PositionFloat2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionFloat2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionFloat2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionFloat2D::GetClassData() const { return &_class_data_; }


void PositionFloat2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionFloat2D*>(&to_msg);
  auto& from = static_cast<const PositionFloat2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PositionFloat2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionFloat2D::CopyFrom(const PositionFloat2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PositionFloat2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionFloat2D::IsInitialized() const {
  return true;
}

void PositionFloat2D::InternalSwap(PositionFloat2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionFloat2D, _impl_.y_)
      + sizeof(PositionFloat2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PositionFloat2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionFloat2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[1]);
}

// ===================================================================

class PlayerBasicInfo::_Internal {
 public:
  static const ::msg::PvpPlayerData& pvpplayer(const PlayerBasicInfo* msg);
};

const ::msg::PvpPlayerData&
PlayerBasicInfo::_Internal::pvpplayer(const PlayerBasicInfo* msg) {
  return *msg->_impl_.pvpplayer_;
}
void PlayerBasicInfo::clear_pvpplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpplayer_ != nullptr) {
    delete _impl_.pvpplayer_;
  }
  _impl_.pvpplayer_ = nullptr;
}
PlayerBasicInfo::PlayerBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerBasicInfo)
}
PlayerBasicInfo::PlayerBasicInfo(const PlayerBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerBasicInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pvpplayer_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pvpplayer()) {
    _this->_impl_.pvpplayer_ = new ::msg::PvpPlayerData(*from._impl_.pvpplayer_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:msg.PlayerBasicInfo)
}

inline void PlayerBasicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pvpplayer_){nullptr}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerBasicInfo::~PlayerBasicInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerBasicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerBasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pvpplayer_;
}

void PlayerBasicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerBasicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pvpplayer_ != nullptr) {
    delete _impl_.pvpplayer_;
  }
  _impl_.pvpplayer_ = nullptr;
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBasicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PvpPlayerData PvpPlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerBasicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerBasicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .msg.PvpPlayerData PvpPlayer = 2;
  if (this->_internal_has_pvpplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pvpplayer(this),
        _Internal::pvpplayer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerBasicInfo)
  return target;
}

size_t PlayerBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerBasicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PvpPlayerData PvpPlayer = 2;
  if (this->_internal_has_pvpplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpplayer_);
  }

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerBasicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerBasicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerBasicInfo::GetClassData() const { return &_class_data_; }


void PlayerBasicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerBasicInfo*>(&to_msg);
  auto& from = static_cast<const PlayerBasicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerBasicInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pvpplayer()) {
    _this->_internal_mutable_pvpplayer()->::msg::PvpPlayerData::MergeFrom(
        from._internal_pvpplayer());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerBasicInfo::CopyFrom(const PlayerBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBasicInfo::IsInitialized() const {
  return true;
}

void PlayerBasicInfo::InternalSwap(PlayerBasicInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerBasicInfo, _impl_.index_)
      + sizeof(PlayerBasicInfo::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(PlayerBasicInfo, _impl_.pvpplayer_)>(
          reinterpret_cast<char*>(&_impl_.pvpplayer_),
          reinterpret_cast<char*>(&other->_impl_.pvpplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[2]);
}

// ===================================================================

class EquipmentInfo::_Internal {
 public:
  static const ::msg::PositionInt2D& tilepos(const EquipmentInfo* msg);
};

const ::msg::PositionInt2D&
EquipmentInfo::_Internal::tilepos(const EquipmentInfo* msg) {
  return *msg->_impl_.tilepos_;
}
EquipmentInfo::EquipmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.EquipmentInfo)
}
EquipmentInfo::EquipmentInfo(const EquipmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquipmentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tilepos_){nullptr}
    , decltype(_impl_.netid_){}
    , decltype(_impl_.equipid_){}
    , decltype(_impl_.equipbagidx_){}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.ownerhandle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tilepos()) {
    _this->_impl_.tilepos_ = new ::msg::PositionInt2D(*from._impl_.tilepos_);
  }
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ownerhandle_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.ownerhandle_));
  // @@protoc_insertion_point(copy_constructor:msg.EquipmentInfo)
}

inline void EquipmentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tilepos_){nullptr}
    , decltype(_impl_.netid_){0}
    , decltype(_impl_.equipid_){0}
    , decltype(_impl_.equipbagidx_){0}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.ownerhandle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EquipmentInfo::~EquipmentInfo() {
  // @@protoc_insertion_point(destructor:msg.EquipmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquipmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tilepos_;
}

void EquipmentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquipmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.EquipmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tilepos_ != nullptr) {
    delete _impl_.tilepos_;
  }
  _impl_.tilepos_ = nullptr;
  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ownerhandle_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.ownerhandle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipBagIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.equipbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D TilePos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tilepos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OwnerHandle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ownerhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquipmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.EquipmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // int32 EquipId = 2;
  if (this->_internal_equipid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_equipid(), target);
  }

  // int32 EquipBagIdx = 3;
  if (this->_internal_equipbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_equipbagidx(), target);
  }

  // int32 PlayerIdx = 4;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_playeridx(), target);
  }

  // .msg.PositionInt2D TilePos = 5;
  if (this->_internal_has_tilepos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tilepos(this),
        _Internal::tilepos(this).GetCachedSize(), target, stream);
  }

  // int32 OwnerHandle = 6;
  if (this->_internal_ownerhandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ownerhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.EquipmentInfo)
  return target;
}

size_t EquipmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.EquipmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D TilePos = 5;
  if (this->_internal_has_tilepos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tilepos_);
  }

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // int32 EquipId = 2;
  if (this->_internal_equipid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipid());
  }

  // int32 EquipBagIdx = 3;
  if (this->_internal_equipbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipbagidx());
  }

  // int32 PlayerIdx = 4;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 OwnerHandle = 6;
  if (this->_internal_ownerhandle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ownerhandle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquipmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquipmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquipmentInfo::GetClassData() const { return &_class_data_; }


void EquipmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquipmentInfo*>(&to_msg);
  auto& from = static_cast<const EquipmentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.EquipmentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tilepos()) {
    _this->_internal_mutable_tilepos()->::msg::PositionInt2D::MergeFrom(
        from._internal_tilepos());
  }
  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_equipid() != 0) {
    _this->_internal_set_equipid(from._internal_equipid());
  }
  if (from._internal_equipbagidx() != 0) {
    _this->_internal_set_equipbagidx(from._internal_equipbagidx());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_ownerhandle() != 0) {
    _this->_internal_set_ownerhandle(from._internal_ownerhandle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquipmentInfo::CopyFrom(const EquipmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.EquipmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInfo::IsInitialized() const {
  return true;
}

void EquipmentInfo::InternalSwap(EquipmentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipmentInfo, _impl_.ownerhandle_)
      + sizeof(EquipmentInfo::_impl_.ownerhandle_)
      - PROTOBUF_FIELD_OFFSET(EquipmentInfo, _impl_.tilepos_)>(
          reinterpret_cast<char*>(&_impl_.tilepos_),
          reinterpret_cast<char*>(&other->_impl_.tilepos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipmentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[3]);
}

// ===================================================================

class ChessPiecesData::_Internal {
 public:
};

ChessPiecesData::ChessPiecesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChessPiecesData)
}
ChessPiecesData::ChessPiecesData(const ChessPiecesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessPiecesData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.extractprob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extractprob_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.extractprob_));
  // @@protoc_insertion_point(copy_constructor:msg.ChessPiecesData)
}

inline void ChessPiecesData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.extractprob_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessPiecesData::~ChessPiecesData() {
  // @@protoc_insertion_point(destructor:msg.ChessPiecesData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessPiecesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChessPiecesData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessPiecesData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessPiecesData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.extractprob_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.extractprob_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessPiecesData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 extractProb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.extractprob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessPiecesData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessPiecesData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 extractProb = 2;
  if (this->_internal_extractprob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_extractprob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessPiecesData)
  return target;
}

size_t ChessPiecesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessPiecesData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 extractProb = 2;
  if (this->_internal_extractprob() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extractprob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessPiecesData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessPiecesData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessPiecesData::GetClassData() const { return &_class_data_; }


void ChessPiecesData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessPiecesData*>(&to_msg);
  auto& from = static_cast<const ChessPiecesData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessPiecesData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_extractprob() != 0) {
    _this->_internal_set_extractprob(from._internal_extractprob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessPiecesData::CopyFrom(const ChessPiecesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessPiecesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPiecesData::IsInitialized() const {
  return true;
}

void ChessPiecesData::InternalSwap(ChessPiecesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChessPiecesData, _impl_.extractprob_)
      + sizeof(ChessPiecesData::_impl_.extractprob_)
      - PROTOBUF_FIELD_OFFSET(ChessPiecesData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessPiecesData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[4]);
}

// ===================================================================

class ChessPiecesMapLevData::_Internal {
 public:
};

ChessPiecesMapLevData::ChessPiecesMapLevData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChessPiecesMapLevData)
}
ChessPiecesMapLevData::ChessPiecesMapLevData(const ChessPiecesMapLevData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessPiecesMapLevData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspieces_){from._impl_.chesspieces_}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:msg.ChessPiecesMapLevData)
}

inline void ChessPiecesMapLevData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspieces_){arena}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessPiecesMapLevData::~ChessPiecesMapLevData() {
  // @@protoc_insertion_point(destructor:msg.ChessPiecesMapLevData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessPiecesMapLevData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chesspieces_.~RepeatedPtrField();
}

void ChessPiecesMapLevData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessPiecesMapLevData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessPiecesMapLevData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chesspieces_.Clear();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessPiecesMapLevData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ChessPiecesData chessPieces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chesspieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessPiecesMapLevData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessPiecesMapLevData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // repeated .msg.ChessPiecesData chessPieces = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chesspieces_size()); i < n; i++) {
    const auto& repfield = this->_internal_chesspieces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessPiecesMapLevData)
  return target;
}

size_t ChessPiecesMapLevData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessPiecesMapLevData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ChessPiecesData chessPieces = 2;
  total_size += 1UL * this->_internal_chesspieces_size();
  for (const auto& msg : this->_impl_.chesspieces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessPiecesMapLevData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessPiecesMapLevData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessPiecesMapLevData::GetClassData() const { return &_class_data_; }


void ChessPiecesMapLevData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessPiecesMapLevData*>(&to_msg);
  auto& from = static_cast<const ChessPiecesMapLevData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessPiecesMapLevData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chesspieces_.MergeFrom(from._impl_.chesspieces_);
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessPiecesMapLevData::CopyFrom(const ChessPiecesMapLevData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessPiecesMapLevData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPiecesMapLevData::IsInitialized() const {
  return true;
}

void ChessPiecesMapLevData::InternalSwap(ChessPiecesMapLevData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chesspieces_.InternalSwap(&other->_impl_.chesspieces_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessPiecesMapLevData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[5]);
}

// ===================================================================

class ChessNumber::_Internal {
 public:
};

ChessNumber::ChessNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChessNumber)
}
ChessNumber::ChessNumber(const ChessNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessNumber* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.number_));
  // @@protoc_insertion_point(copy_constructor:msg.ChessNumber)
}

inline void ChessNumber::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessNumber::~ChessNumber() {
  // @@protoc_insertion_point(destructor:msg.ChessNumber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChessNumber::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessNumber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessNumber)
  return target;
}

size_t ChessNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Number = 2;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessNumber::GetClassData() const { return &_class_data_; }


void ChessNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessNumber*>(&to_msg);
  auto& from = static_cast<const ChessNumber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessNumber)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessNumber::CopyFrom(const ChessNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessNumber::IsInitialized() const {
  return true;
}

void ChessNumber::InternalSwap(ChessNumber* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChessNumber, _impl_.number_)
      + sizeof(ChessNumber::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(ChessNumber, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[6]);
}

// ===================================================================

class PlayerChessNumber::_Internal {
 public:
};

PlayerChessNumber::PlayerChessNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerChessNumber)
}
PlayerChessNumber::PlayerChessNumber(const PlayerChessNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerChessNumber* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chess_){from._impl_.chess_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.PlayerChessNumber)
}

inline void PlayerChessNumber::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chess_){arena}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerChessNumber::~PlayerChessNumber() {
  // @@protoc_insertion_point(destructor:msg.PlayerChessNumber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerChessNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chess_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void PlayerChessNumber::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerChessNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerChessNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chess_.Clear();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerChessNumber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerChessNumber.Id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ChessNumber chess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chess(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerChessNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerChessNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerChessNumber.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .msg.ChessNumber chess = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chess_size()); i < n; i++) {
    const auto& repfield = this->_internal_chess(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerChessNumber)
  return target;
}

size_t PlayerChessNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerChessNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ChessNumber chess = 2;
  total_size += 1UL * this->_internal_chess_size();
  for (const auto& msg : this->_impl_.chess_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerChessNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerChessNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerChessNumber::GetClassData() const { return &_class_data_; }


void PlayerChessNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerChessNumber*>(&to_msg);
  auto& from = static_cast<const PlayerChessNumber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerChessNumber)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chess_.MergeFrom(from._impl_.chess_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerChessNumber::CopyFrom(const PlayerChessNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerChessNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChessNumber::IsInitialized() const {
  return true;
}

void PlayerChessNumber::InternalSwap(PlayerChessNumber* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chess_.InternalSwap(&other->_impl_.chess_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerChessNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[7]);
}

// ===================================================================

class ReflushChessData::_Internal {
 public:
};

ReflushChessData::ReflushChessData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ReflushChessData)
}
ReflushChessData::ReflushChessData(const ReflushChessData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReflushChessData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chessids_){from._impl_.chessids_}
    , /*decltype(_impl_._chessids_cached_byte_size_)*/{0}
    , decltype(_impl_.sellchessidx_){from._impl_.sellchessidx_}
    , /*decltype(_impl_._sellchessidx_cached_byte_size_)*/{0}
    , decltype(_impl_.isauto_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isauto_ = from._impl_.isauto_;
  // @@protoc_insertion_point(copy_constructor:msg.ReflushChessData)
}

inline void ReflushChessData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chessids_){arena}
    , /*decltype(_impl_._chessids_cached_byte_size_)*/{0}
    , decltype(_impl_.sellchessidx_){arena}
    , /*decltype(_impl_._sellchessidx_cached_byte_size_)*/{0}
    , decltype(_impl_.isauto_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReflushChessData::~ReflushChessData() {
  // @@protoc_insertion_point(destructor:msg.ReflushChessData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReflushChessData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chessids_.~RepeatedField();
  _impl_.sellchessidx_.~RepeatedField();
}

void ReflushChessData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReflushChessData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ReflushChessData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chessids_.Clear();
  _impl_.sellchessidx_.Clear();
  _impl_.isauto_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReflushChessData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAuto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isauto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 chessIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chessids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_chessids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 sellChessIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sellchessidx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_sellchessidx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReflushChessData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ReflushChessData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAuto = 1;
  if (this->_internal_isauto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isauto(), target);
  }

  // repeated int32 chessIds = 2;
  {
    int byte_size = _impl_._chessids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_chessids(), byte_size, target);
    }
  }

  // repeated int32 sellChessIdx = 3;
  {
    int byte_size = _impl_._sellchessidx_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_sellchessidx(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ReflushChessData)
  return target;
}

size_t ReflushChessData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ReflushChessData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 chessIds = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chessids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 sellChessIdx = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.sellchessidx_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sellchessidx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool isAuto = 1;
  if (this->_internal_isauto() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReflushChessData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReflushChessData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReflushChessData::GetClassData() const { return &_class_data_; }


void ReflushChessData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReflushChessData*>(&to_msg);
  auto& from = static_cast<const ReflushChessData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ReflushChessData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chessids_.MergeFrom(from._impl_.chessids_);
  _this->_impl_.sellchessidx_.MergeFrom(from._impl_.sellchessidx_);
  if (from._internal_isauto() != 0) {
    _this->_internal_set_isauto(from._internal_isauto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReflushChessData::CopyFrom(const ReflushChessData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ReflushChessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReflushChessData::IsInitialized() const {
  return true;
}

void ReflushChessData::InternalSwap(ReflushChessData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chessids_.InternalSwap(&other->_impl_.chessids_);
  _impl_.sellchessidx_.InternalSwap(&other->_impl_.sellchessidx_);
  swap(_impl_.isauto_, other->_impl_.isauto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReflushChessData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[8]);
}

// ===================================================================

class BattleRoundData::_Internal {
 public:
};

BattleRoundData::BattleRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.BattleRoundData)
}
BattleRoundData::BattleRoundData(const BattleRoundData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleRoundData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refreshchess_){from._impl_.refreshchess_}
    , decltype(_impl_.intobattlechess_){from._impl_.intobattlechess_}
    , /*decltype(_impl_._intobattlechess_cached_byte_size_)*/{0}
    , decltype(_impl_.roundnum_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.moneygained_){}
    , decltype(_impl_.moneycostbybuyexp_){}
    , decltype(_impl_.moneycostbyrefreshshop_){}
    , decltype(_impl_.moneycostbybuychess_){}
    , decltype(_impl_.ismonster_){}
    , decltype(_impl_.enemyidx_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.wintype_){}
    , decltype(_impl_.moneygainedbysellchess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roundnum_, &from._impl_.roundnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.moneygainedbysellchess_) -
    reinterpret_cast<char*>(&_impl_.roundnum_)) + sizeof(_impl_.moneygainedbysellchess_));
  // @@protoc_insertion_point(copy_constructor:msg.BattleRoundData)
}

inline void BattleRoundData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refreshchess_){arena}
    , decltype(_impl_.intobattlechess_){arena}
    , /*decltype(_impl_._intobattlechess_cached_byte_size_)*/{0}
    , decltype(_impl_.roundnum_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.moneygained_){0}
    , decltype(_impl_.moneycostbybuyexp_){0}
    , decltype(_impl_.moneycostbyrefreshshop_){0}
    , decltype(_impl_.moneycostbybuychess_){0}
    , decltype(_impl_.ismonster_){false}
    , decltype(_impl_.enemyidx_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.wintype_){0}
    , decltype(_impl_.moneygainedbysellchess_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BattleRoundData::~BattleRoundData() {
  // @@protoc_insertion_point(destructor:msg.BattleRoundData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BattleRoundData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refreshchess_.~RepeatedPtrField();
  _impl_.intobattlechess_.~RepeatedField();
}

void BattleRoundData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleRoundData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BattleRoundData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refreshchess_.Clear();
  _impl_.intobattlechess_.Clear();
  ::memset(&_impl_.roundnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.moneygainedbysellchess_) -
      reinterpret_cast<char*>(&_impl_.roundnum_)) + sizeof(_impl_.moneygainedbysellchess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleRoundData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 RoundNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roundnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyGained = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.moneygained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyCostByBuyExp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.moneycostbybuyexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyCostByRefreshShop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.moneycostbyrefreshshop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyCostByBuyChess = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.moneycostbybuychess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsMonster = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ismonster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EnemyIdx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.enemyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Exp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.WINTYPE winType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wintype(static_cast<::msg::WINTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ReflushChessData refreshChess = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refreshchess(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 intoBattleChess = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intobattlechess(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_intobattlechess(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyGainedBySellChess = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.moneygainedbysellchess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleRoundData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BattleRoundData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RoundNum = 1;
  if (this->_internal_roundnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roundnum(), target);
  }

  // int32 Damage = 2;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  // int32 MoneyGained = 3;
  if (this->_internal_moneygained() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_moneygained(), target);
  }

  // int32 MoneyCostByBuyExp = 4;
  if (this->_internal_moneycostbybuyexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_moneycostbybuyexp(), target);
  }

  // int32 MoneyCostByRefreshShop = 5;
  if (this->_internal_moneycostbyrefreshshop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_moneycostbyrefreshshop(), target);
  }

  // int32 MoneyCostByBuyChess = 6;
  if (this->_internal_moneycostbybuychess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_moneycostbybuychess(), target);
  }

  // bool IsMonster = 7;
  if (this->_internal_ismonster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_ismonster(), target);
  }

  // int32 EnemyIdx = 8;
  if (this->_internal_enemyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_enemyidx(), target);
  }

  // int32 Exp = 9;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_exp(), target);
  }

  // .msg.WINTYPE winType = 10;
  if (this->_internal_wintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_wintype(), target);
  }

  // repeated .msg.ReflushChessData refreshChess = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refreshchess_size()); i < n; i++) {
    const auto& repfield = this->_internal_refreshchess(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 intoBattleChess = 12;
  {
    int byte_size = _impl_._intobattlechess_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_intobattlechess(), byte_size, target);
    }
  }

  // int32 MoneyGainedBySellChess = 13;
  if (this->_internal_moneygainedbysellchess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_moneygainedbysellchess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BattleRoundData)
  return target;
}

size_t BattleRoundData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BattleRoundData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ReflushChessData refreshChess = 11;
  total_size += 1UL * this->_internal_refreshchess_size();
  for (const auto& msg : this->_impl_.refreshchess_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 intoBattleChess = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.intobattlechess_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._intobattlechess_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 RoundNum = 1;
  if (this->_internal_roundnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roundnum());
  }

  // int32 Damage = 2;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // int32 MoneyGained = 3;
  if (this->_internal_moneygained() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moneygained());
  }

  // int32 MoneyCostByBuyExp = 4;
  if (this->_internal_moneycostbybuyexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moneycostbybuyexp());
  }

  // int32 MoneyCostByRefreshShop = 5;
  if (this->_internal_moneycostbyrefreshshop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moneycostbyrefreshshop());
  }

  // int32 MoneyCostByBuyChess = 6;
  if (this->_internal_moneycostbybuychess() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moneycostbybuychess());
  }

  // bool IsMonster = 7;
  if (this->_internal_ismonster() != 0) {
    total_size += 1 + 1;
  }

  // int32 EnemyIdx = 8;
  if (this->_internal_enemyidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemyidx());
  }

  // int32 Exp = 9;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // .msg.WINTYPE winType = 10;
  if (this->_internal_wintype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wintype());
  }

  // int32 MoneyGainedBySellChess = 13;
  if (this->_internal_moneygainedbysellchess() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_moneygainedbysellchess());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleRoundData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleRoundData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleRoundData::GetClassData() const { return &_class_data_; }


void BattleRoundData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleRoundData*>(&to_msg);
  auto& from = static_cast<const BattleRoundData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.BattleRoundData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refreshchess_.MergeFrom(from._impl_.refreshchess_);
  _this->_impl_.intobattlechess_.MergeFrom(from._impl_.intobattlechess_);
  if (from._internal_roundnum() != 0) {
    _this->_internal_set_roundnum(from._internal_roundnum());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_moneygained() != 0) {
    _this->_internal_set_moneygained(from._internal_moneygained());
  }
  if (from._internal_moneycostbybuyexp() != 0) {
    _this->_internal_set_moneycostbybuyexp(from._internal_moneycostbybuyexp());
  }
  if (from._internal_moneycostbyrefreshshop() != 0) {
    _this->_internal_set_moneycostbyrefreshshop(from._internal_moneycostbyrefreshshop());
  }
  if (from._internal_moneycostbybuychess() != 0) {
    _this->_internal_set_moneycostbybuychess(from._internal_moneycostbybuychess());
  }
  if (from._internal_ismonster() != 0) {
    _this->_internal_set_ismonster(from._internal_ismonster());
  }
  if (from._internal_enemyidx() != 0) {
    _this->_internal_set_enemyidx(from._internal_enemyidx());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_wintype() != 0) {
    _this->_internal_set_wintype(from._internal_wintype());
  }
  if (from._internal_moneygainedbysellchess() != 0) {
    _this->_internal_set_moneygainedbysellchess(from._internal_moneygainedbysellchess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleRoundData::CopyFrom(const BattleRoundData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BattleRoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRoundData::IsInitialized() const {
  return true;
}

void BattleRoundData::InternalSwap(BattleRoundData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refreshchess_.InternalSwap(&other->_impl_.refreshchess_);
  _impl_.intobattlechess_.InternalSwap(&other->_impl_.intobattlechess_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleRoundData, _impl_.moneygainedbysellchess_)
      + sizeof(BattleRoundData::_impl_.moneygainedbysellchess_)
      - PROTOBUF_FIELD_OFFSET(BattleRoundData, _impl_.roundnum_)>(
          reinterpret_cast<char*>(&_impl_.roundnum_),
          reinterpret_cast<char*>(&other->_impl_.roundnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleRoundData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[9]);
}

// ===================================================================

class PlayerStatisticsInfo::_Internal {
 public:
};

PlayerStatisticsInfo::PlayerStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerStatisticsInfo)
}
PlayerStatisticsInfo::PlayerStatisticsInfo(const PlayerStatisticsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerStatisticsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rounddata_){from._impl_.rounddata_}
    , decltype(_impl_.pidx_){}
    , decltype(_impl_.winstreak_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pidx_, &from._impl_.pidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.winstreak_) -
    reinterpret_cast<char*>(&_impl_.pidx_)) + sizeof(_impl_.winstreak_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerStatisticsInfo)
}

inline void PlayerStatisticsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rounddata_){arena}
    , decltype(_impl_.pidx_){0}
    , decltype(_impl_.winstreak_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerStatisticsInfo::~PlayerStatisticsInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerStatisticsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerStatisticsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rounddata_.~RepeatedPtrField();
}

void PlayerStatisticsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerStatisticsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerStatisticsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rounddata_.Clear();
  ::memset(&_impl_.pidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.winstreak_) -
      reinterpret_cast<char*>(&_impl_.pidx_)) + sizeof(_impl_.winstreak_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerStatisticsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 winStreak = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.winstreak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.BattleRoundData roundData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rounddata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerStatisticsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerStatisticsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pidx = 1;
  if (this->_internal_pidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pidx(), target);
  }

  // int32 winStreak = 2;
  if (this->_internal_winstreak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_winstreak(), target);
  }

  // repeated .msg.BattleRoundData roundData = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rounddata_size()); i < n; i++) {
    const auto& repfield = this->_internal_rounddata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerStatisticsInfo)
  return target;
}

size_t PlayerStatisticsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerStatisticsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.BattleRoundData roundData = 3;
  total_size += 1UL * this->_internal_rounddata_size();
  for (const auto& msg : this->_impl_.rounddata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 pidx = 1;
  if (this->_internal_pidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pidx());
  }

  // int32 winStreak = 2;
  if (this->_internal_winstreak() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_winstreak());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerStatisticsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerStatisticsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerStatisticsInfo::GetClassData() const { return &_class_data_; }


void PlayerStatisticsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerStatisticsInfo*>(&to_msg);
  auto& from = static_cast<const PlayerStatisticsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerStatisticsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rounddata_.MergeFrom(from._impl_.rounddata_);
  if (from._internal_pidx() != 0) {
    _this->_internal_set_pidx(from._internal_pidx());
  }
  if (from._internal_winstreak() != 0) {
    _this->_internal_set_winstreak(from._internal_winstreak());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerStatisticsInfo::CopyFrom(const PlayerStatisticsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerStatisticsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatisticsInfo::IsInitialized() const {
  return true;
}

void PlayerStatisticsInfo::InternalSwap(PlayerStatisticsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rounddata_.InternalSwap(&other->_impl_.rounddata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerStatisticsInfo, _impl_.winstreak_)
      + sizeof(PlayerStatisticsInfo::_impl_.winstreak_)
      - PROTOBUF_FIELD_OFFSET(PlayerStatisticsInfo, _impl_.pidx_)>(
          reinterpret_cast<char*>(&_impl_.pidx_),
          reinterpret_cast<char*>(&other->_impl_.pidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerStatisticsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[10]);
}

// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equipmentid_){}
    , decltype(_impl_.netid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.equipmentid_, &from._impl_.equipmentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.netid_) -
    reinterpret_cast<char*>(&_impl_.equipmentid_)) + sizeof(_impl_.netid_));
  // @@protoc_insertion_point(copy_constructor:msg.Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equipmentid_){0}
    , decltype(_impl_.netid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:msg.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.equipmentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.netid_) -
      reinterpret_cast<char*>(&_impl_.equipmentid_)) + sizeof(_impl_.netid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 EquipmentId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.equipmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 EquipmentId = 1;
  if (this->_internal_equipmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_equipmentid(), target);
  }

  // int32 NetId = 2;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_netid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 EquipmentId = 1;
  if (this->_internal_equipmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipmentid());
  }

  // int32 NetId = 2;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_equipmentid() != 0) {
    _this->_internal_set_equipmentid(from._internal_equipmentid());
  }
  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, _impl_.netid_)
      + sizeof(Item::_impl_.netid_)
      - PROTOBUF_FIELD_OFFSET(Item, _impl_.equipmentid_)>(
          reinterpret_cast<char*>(&_impl_.equipmentid_),
          reinterpret_cast<char*>(&other->_impl_.equipmentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[11]);
}

// ===================================================================

class ItemOnTheGround::_Internal {
 public:
  static const ::msg::Item& baseinfo(const ItemOnTheGround* msg);
};

const ::msg::Item&
ItemOnTheGround::_Internal::baseinfo(const ItemOnTheGround* msg) {
  return *msg->_impl_.baseinfo_;
}
ItemOnTheGround::ItemOnTheGround(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ItemOnTheGround)
}
ItemOnTheGround::ItemOnTheGround(const ItemOnTheGround& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemOnTheGround* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.mapx_){}
    , decltype(_impl_.mapy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseinfo()) {
    _this->_impl_.baseinfo_ = new ::msg::Item(*from._impl_.baseinfo_);
  }
  ::memcpy(&_impl_.mapx_, &from._impl_.mapx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mapy_) -
    reinterpret_cast<char*>(&_impl_.mapx_)) + sizeof(_impl_.mapy_));
  // @@protoc_insertion_point(copy_constructor:msg.ItemOnTheGround)
}

inline void ItemOnTheGround::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.mapx_){0}
    , decltype(_impl_.mapy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemOnTheGround::~ItemOnTheGround() {
  // @@protoc_insertion_point(destructor:msg.ItemOnTheGround)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemOnTheGround::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.baseinfo_;
}

void ItemOnTheGround::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemOnTheGround::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ItemOnTheGround)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
  ::memset(&_impl_.mapx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mapy_) -
      reinterpret_cast<char*>(&_impl_.mapx_)) + sizeof(_impl_.mapy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemOnTheGround::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.Item BaseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MapX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MapY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mapy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemOnTheGround::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ItemOnTheGround)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Item BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  // int32 MapX = 2;
  if (this->_internal_mapx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mapx(), target);
  }

  // int32 MapY = 3;
  if (this->_internal_mapy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mapy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ItemOnTheGround)
  return target;
}

size_t ItemOnTheGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ItemOnTheGround)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Item BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseinfo_);
  }

  // int32 MapX = 2;
  if (this->_internal_mapx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapx());
  }

  // int32 MapY = 3;
  if (this->_internal_mapy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemOnTheGround::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemOnTheGround::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemOnTheGround::GetClassData() const { return &_class_data_; }


void ItemOnTheGround::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemOnTheGround*>(&to_msg);
  auto& from = static_cast<const ItemOnTheGround&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ItemOnTheGround)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_baseinfo()) {
    _this->_internal_mutable_baseinfo()->::msg::Item::MergeFrom(
        from._internal_baseinfo());
  }
  if (from._internal_mapx() != 0) {
    _this->_internal_set_mapx(from._internal_mapx());
  }
  if (from._internal_mapy() != 0) {
    _this->_internal_set_mapy(from._internal_mapy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemOnTheGround::CopyFrom(const ItemOnTheGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ItemOnTheGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemOnTheGround::IsInitialized() const {
  return true;
}

void ItemOnTheGround::InternalSwap(ItemOnTheGround* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemOnTheGround, _impl_.mapy_)
      + sizeof(ItemOnTheGround::_impl_.mapy_)
      - PROTOBUF_FIELD_OFFSET(ItemOnTheGround, _impl_.baseinfo_)>(
          reinterpret_cast<char*>(&_impl_.baseinfo_),
          reinterpret_cast<char*>(&other->_impl_.baseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemOnTheGround::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[12]);
}

// ===================================================================

class ItemInTheBag::_Internal {
 public:
  static const ::msg::Item& baseinfo(const ItemInTheBag* msg);
};

const ::msg::Item&
ItemInTheBag::_Internal::baseinfo(const ItemInTheBag* msg) {
  return *msg->_impl_.baseinfo_;
}
ItemInTheBag::ItemInTheBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ItemInTheBag)
}
ItemInTheBag::ItemInTheBag(const ItemInTheBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemInTheBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseinfo()) {
    _this->_impl_.baseinfo_ = new ::msg::Item(*from._impl_.baseinfo_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:msg.ItemInTheBag)
}

inline void ItemInTheBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemInTheBag::~ItemInTheBag() {
  // @@protoc_insertion_point(destructor:msg.ItemInTheBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemInTheBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.baseinfo_;
}

void ItemInTheBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemInTheBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ItemInTheBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemInTheBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.Item BaseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemInTheBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ItemInTheBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Item BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  // int32 Index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ItemInTheBag)
  return target;
}

size_t ItemInTheBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ItemInTheBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Item BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseinfo_);
  }

  // int32 Index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemInTheBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemInTheBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemInTheBag::GetClassData() const { return &_class_data_; }


void ItemInTheBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemInTheBag*>(&to_msg);
  auto& from = static_cast<const ItemInTheBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ItemInTheBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_baseinfo()) {
    _this->_internal_mutable_baseinfo()->::msg::Item::MergeFrom(
        from._internal_baseinfo());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemInTheBag::CopyFrom(const ItemInTheBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ItemInTheBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInTheBag::IsInitialized() const {
  return true;
}

void ItemInTheBag::InternalSwap(ItemInTheBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemInTheBag, _impl_.index_)
      + sizeof(ItemInTheBag::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ItemInTheBag, _impl_.baseinfo_)>(
          reinterpret_cast<char*>(&_impl_.baseinfo_),
          reinterpret_cast<char*>(&other->_impl_.baseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemInTheBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[13]);
}

// ===================================================================

class Character::_Internal {
 public:
};

Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Character* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.characterequips_){from._impl_.characterequips_}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.characterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.characterid_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.characterid_));
  // @@protoc_insertion_point(copy_constructor:msg.Character)
}

inline void Character::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.characterequips_){arena}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.characterid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:msg.Character)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Character::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.characterequips_.~RepeatedPtrField();
}

void Character::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Character)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.characterequips_.Clear();
  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.characterid_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.characterid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CharacterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ItemInTheBag CharacterEquips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characterequips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Character)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 CharacterId = 2;
  if (this->_internal_characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_characterid(), target);
  }

  // repeated .msg.ItemInTheBag CharacterEquips = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_characterequips_size()); i < n; i++) {
    const auto& repfield = this->_internal_characterequips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Character)
  return target;
}

size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Character)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ItemInTheBag CharacterEquips = 6;
  total_size += 1UL * this->_internal_characterequips_size();
  for (const auto& msg : this->_impl_.characterequips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 CharacterId = 2;
  if (this->_internal_characterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_characterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Character::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character::GetClassData() const { return &_class_data_; }


void Character::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Character*>(&to_msg);
  auto& from = static_cast<const Character&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Character)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.characterequips_.MergeFrom(from._impl_.characterequips_);
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_characterid() != 0) {
    _this->_internal_set_characterid(from._internal_characterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.characterequips_.InternalSwap(&other->_impl_.characterequips_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, _impl_.characterid_)
      + sizeof(Character::_impl_.characterid_)
      - PROTOBUF_FIELD_OFFSET(Character, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[14]);
}

// ===================================================================

class CharacterInTheBag::_Internal {
 public:
  static const ::msg::Character& baseinfo(const CharacterInTheBag* msg);
};

const ::msg::Character&
CharacterInTheBag::_Internal::baseinfo(const CharacterInTheBag* msg) {
  return *msg->_impl_.baseinfo_;
}
CharacterInTheBag::CharacterInTheBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CharacterInTheBag)
}
CharacterInTheBag::CharacterInTheBag(const CharacterInTheBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterInTheBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseinfo()) {
    _this->_impl_.baseinfo_ = new ::msg::Character(*from._impl_.baseinfo_);
  }
  _this->_impl_.bagindex_ = from._impl_.bagindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CharacterInTheBag)
}

inline void CharacterInTheBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CharacterInTheBag::~CharacterInTheBag() {
  // @@protoc_insertion_point(destructor:msg.CharacterInTheBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterInTheBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.baseinfo_;
}

void CharacterInTheBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterInTheBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterInTheBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
  _impl_.bagindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterInTheBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.Character BaseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterInTheBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterInTheBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Character BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterInTheBag)
  return target;
}

size_t CharacterInTheBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterInTheBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Character BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseinfo_);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterInTheBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterInTheBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterInTheBag::GetClassData() const { return &_class_data_; }


void CharacterInTheBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterInTheBag*>(&to_msg);
  auto& from = static_cast<const CharacterInTheBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterInTheBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_baseinfo()) {
    _this->_internal_mutable_baseinfo()->::msg::Character::MergeFrom(
        from._internal_baseinfo());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterInTheBag::CopyFrom(const CharacterInTheBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterInTheBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInTheBag::IsInitialized() const {
  return true;
}

void CharacterInTheBag::InternalSwap(CharacterInTheBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterInTheBag, _impl_.bagindex_)
      + sizeof(CharacterInTheBag::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CharacterInTheBag, _impl_.baseinfo_)>(
          reinterpret_cast<char*>(&_impl_.baseinfo_),
          reinterpret_cast<char*>(&other->_impl_.baseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterInTheBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[15]);
}

// ===================================================================

class CharacterOnTheMap::_Internal {
 public:
  static const ::msg::Character& baseinfo(const CharacterOnTheMap* msg);
};

const ::msg::Character&
CharacterOnTheMap::_Internal::baseinfo(const CharacterOnTheMap* msg) {
  return *msg->_impl_.baseinfo_;
}
CharacterOnTheMap::CharacterOnTheMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CharacterOnTheMap)
}
CharacterOnTheMap::CharacterOnTheMap(const CharacterOnTheMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterOnTheMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseinfo()) {
    _this->_impl_.baseinfo_ = new ::msg::Character(*from._impl_.baseinfo_);
  }
  ::memcpy(&_impl_.tx_, &from._impl_.tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ty_) -
    reinterpret_cast<char*>(&_impl_.tx_)) + sizeof(_impl_.ty_));
  // @@protoc_insertion_point(copy_constructor:msg.CharacterOnTheMap)
}

inline void CharacterOnTheMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CharacterOnTheMap::~CharacterOnTheMap() {
  // @@protoc_insertion_point(destructor:msg.CharacterOnTheMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterOnTheMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.baseinfo_;
}

void CharacterOnTheMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterOnTheMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterOnTheMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
  ::memset(&_impl_.tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ty_) -
      reinterpret_cast<char*>(&_impl_.tx_)) + sizeof(_impl_.ty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterOnTheMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.Character BaseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterOnTheMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterOnTheMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Character BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  // int32 Tx = 2;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tx(), target);
  }

  // int32 Ty = 3;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterOnTheMap)
  return target;
}

size_t CharacterOnTheMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterOnTheMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Character BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseinfo_);
  }

  // int32 Tx = 2;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // int32 Ty = 3;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterOnTheMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterOnTheMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterOnTheMap::GetClassData() const { return &_class_data_; }


void CharacterOnTheMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterOnTheMap*>(&to_msg);
  auto& from = static_cast<const CharacterOnTheMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterOnTheMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_baseinfo()) {
    _this->_internal_mutable_baseinfo()->::msg::Character::MergeFrom(
        from._internal_baseinfo());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterOnTheMap::CopyFrom(const CharacterOnTheMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterOnTheMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterOnTheMap::IsInitialized() const {
  return true;
}

void CharacterOnTheMap::InternalSwap(CharacterOnTheMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterOnTheMap, _impl_.ty_)
      + sizeof(CharacterOnTheMap::_impl_.ty_)
      - PROTOBUF_FIELD_OFFSET(CharacterOnTheMap, _impl_.baseinfo_)>(
          reinterpret_cast<char*>(&_impl_.baseinfo_),
          reinterpret_cast<char*>(&other->_impl_.baseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterOnTheMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[16]);
}

// ===================================================================

class ReconnectPlayer::_Internal {
 public:
  static const ::msg::PvpPlayerData& playerdata(const ReconnectPlayer* msg);
};

const ::msg::PvpPlayerData&
ReconnectPlayer::_Internal::playerdata(const ReconnectPlayer* msg) {
  return *msg->_impl_.playerdata_;
}
void ReconnectPlayer::clear_playerdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerdata_ != nullptr) {
    delete _impl_.playerdata_;
  }
  _impl_.playerdata_ = nullptr;
}
ReconnectPlayer::ReconnectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ReconnectPlayer)
}
ReconnectPlayer::ReconnectPlayer(const ReconnectPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReconnectPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shopcontents_){from._impl_.shopcontents_}
    , /*decltype(_impl_._shopcontents_cached_byte_size_)*/{0}
    , decltype(_impl_.bagcharacters_){from._impl_.bagcharacters_}
    , decltype(_impl_.mapcharacters_){from._impl_.mapcharacters_}
    , decltype(_impl_.bagitems_){from._impl_.bagitems_}
    , decltype(_impl_.grounditems_){from._impl_.grounditems_}
    , decltype(_impl_.playerdata_){nullptr}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.currenthp_){}
    , decltype(_impl_.currentgold_){}
    , decltype(_impl_.currentlevel_){}
    , decltype(_impl_.currentexp_){}
    , decltype(_impl_.messengerposx_){}
    , decltype(_impl_.messengerposy_){}
    , decltype(_impl_.enemyplayerindex_){}
    , decltype(_impl_.winstreak_){}
    , decltype(_impl_.winroundcount_){}
    , decltype(_impl_.loseroundcount_){}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerdata()) {
    _this->_impl_.playerdata_ = new ::msg::PvpPlayerData(*from._impl_.playerdata_);
  }
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:msg.ReconnectPlayer)
}

inline void ReconnectPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shopcontents_){arena}
    , /*decltype(_impl_._shopcontents_cached_byte_size_)*/{0}
    , decltype(_impl_.bagcharacters_){arena}
    , decltype(_impl_.mapcharacters_){arena}
    , decltype(_impl_.bagitems_){arena}
    , decltype(_impl_.grounditems_){arena}
    , decltype(_impl_.playerdata_){nullptr}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.currenthp_){0}
    , decltype(_impl_.currentgold_){0}
    , decltype(_impl_.currentlevel_){0}
    , decltype(_impl_.currentexp_){0}
    , decltype(_impl_.messengerposx_){0}
    , decltype(_impl_.messengerposy_){0}
    , decltype(_impl_.enemyplayerindex_){0}
    , decltype(_impl_.winstreak_){0}
    , decltype(_impl_.winroundcount_){0}
    , decltype(_impl_.loseroundcount_){0}
    , decltype(_impl_.rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReconnectPlayer::~ReconnectPlayer() {
  // @@protoc_insertion_point(destructor:msg.ReconnectPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReconnectPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shopcontents_.~RepeatedField();
  _impl_.bagcharacters_.~RepeatedPtrField();
  _impl_.mapcharacters_.~RepeatedPtrField();
  _impl_.bagitems_.~RepeatedPtrField();
  _impl_.grounditems_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.playerdata_;
}

void ReconnectPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReconnectPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ReconnectPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shopcontents_.Clear();
  _impl_.bagcharacters_.Clear();
  _impl_.mapcharacters_.Clear();
  _impl_.bagitems_.Clear();
  _impl_.grounditems_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.playerdata_ != nullptr) {
    delete _impl_.playerdata_;
  }
  _impl_.playerdata_ = nullptr;
  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rank_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconnectPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrentHp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.currenthp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrentGold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.currentgold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrentLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.currentlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrentExp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.currentexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ShopContents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shopcontents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_shopcontents(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PvpPlayerData PlayerData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float MessengerPosX = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.messengerposx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float MessengerPosY = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.messengerposy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CharacterInTheBag BagCharacters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bagcharacters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CharacterOnTheMap MapCharacters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapcharacters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ItemInTheBag BagItems = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bagitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ItemOnTheGround GroundItems = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grounditems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 EnemyPlayerIndex = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.enemyplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 WinStreak = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.winstreak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 WinRoundCount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.winroundcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LoseRoundCount = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.loseroundcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Rank = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReconnectPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ReconnectPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 CurrentHp = 2;
  if (this->_internal_currenthp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_currenthp(), target);
  }

  // int32 CurrentGold = 3;
  if (this->_internal_currentgold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_currentgold(), target);
  }

  // int32 CurrentLevel = 4;
  if (this->_internal_currentlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentlevel(), target);
  }

  // int32 CurrentExp = 5;
  if (this->_internal_currentexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_currentexp(), target);
  }

  // repeated int32 ShopContents = 6;
  {
    int byte_size = _impl_._shopcontents_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_shopcontents(), byte_size, target);
    }
  }

  // .msg.PvpPlayerData PlayerData = 7;
  if (this->_internal_has_playerdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::playerdata(this),
        _Internal::playerdata(this).GetCachedSize(), target, stream);
  }

  // float MessengerPosX = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_messengerposx = this->_internal_messengerposx();
  uint32_t raw_messengerposx;
  memcpy(&raw_messengerposx, &tmp_messengerposx, sizeof(tmp_messengerposx));
  if (raw_messengerposx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_messengerposx(), target);
  }

  // float MessengerPosY = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_messengerposy = this->_internal_messengerposy();
  uint32_t raw_messengerposy;
  memcpy(&raw_messengerposy, &tmp_messengerposy, sizeof(tmp_messengerposy));
  if (raw_messengerposy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_messengerposy(), target);
  }

  // repeated .msg.CharacterInTheBag BagCharacters = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bagcharacters_size()); i < n; i++) {
    const auto& repfield = this->_internal_bagcharacters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.CharacterOnTheMap MapCharacters = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapcharacters_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapcharacters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.ItemInTheBag BagItems = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bagitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_bagitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.ItemOnTheGround GroundItems = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grounditems_size()); i < n; i++) {
    const auto& repfield = this->_internal_grounditems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 EnemyPlayerIndex = 14;
  if (this->_internal_enemyplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_enemyplayerindex(), target);
  }

  // int32 WinStreak = 15;
  if (this->_internal_winstreak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_winstreak(), target);
  }

  // int32 WinRoundCount = 16;
  if (this->_internal_winroundcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_winroundcount(), target);
  }

  // int32 LoseRoundCount = 17;
  if (this->_internal_loseroundcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_loseroundcount(), target);
  }

  // int32 Rank = 18;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ReconnectPlayer)
  return target;
}

size_t ReconnectPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ReconnectPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ShopContents = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shopcontents_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shopcontents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.CharacterInTheBag BagCharacters = 10;
  total_size += 1UL * this->_internal_bagcharacters_size();
  for (const auto& msg : this->_impl_.bagcharacters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.CharacterOnTheMap MapCharacters = 11;
  total_size += 1UL * this->_internal_mapcharacters_size();
  for (const auto& msg : this->_impl_.mapcharacters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.ItemInTheBag BagItems = 12;
  total_size += 1UL * this->_internal_bagitems_size();
  for (const auto& msg : this->_impl_.bagitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.ItemOnTheGround GroundItems = 13;
  total_size += 1UL * this->_internal_grounditems_size();
  for (const auto& msg : this->_impl_.grounditems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msg.PvpPlayerData PlayerData = 7;
  if (this->_internal_has_playerdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerdata_);
  }

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 CurrentHp = 2;
  if (this->_internal_currenthp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currenthp());
  }

  // int32 CurrentGold = 3;
  if (this->_internal_currentgold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentgold());
  }

  // int32 CurrentLevel = 4;
  if (this->_internal_currentlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentlevel());
  }

  // int32 CurrentExp = 5;
  if (this->_internal_currentexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentexp());
  }

  // float MessengerPosX = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_messengerposx = this->_internal_messengerposx();
  uint32_t raw_messengerposx;
  memcpy(&raw_messengerposx, &tmp_messengerposx, sizeof(tmp_messengerposx));
  if (raw_messengerposx != 0) {
    total_size += 1 + 4;
  }

  // float MessengerPosY = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_messengerposy = this->_internal_messengerposy();
  uint32_t raw_messengerposy;
  memcpy(&raw_messengerposy, &tmp_messengerposy, sizeof(tmp_messengerposy));
  if (raw_messengerposy != 0) {
    total_size += 1 + 4;
  }

  // int32 EnemyPlayerIndex = 14;
  if (this->_internal_enemyplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemyplayerindex());
  }

  // int32 WinStreak = 15;
  if (this->_internal_winstreak() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_winstreak());
  }

  // int32 WinRoundCount = 16;
  if (this->_internal_winroundcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_winroundcount());
  }

  // int32 LoseRoundCount = 17;
  if (this->_internal_loseroundcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_loseroundcount());
  }

  // int32 Rank = 18;
  if (this->_internal_rank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReconnectPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReconnectPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReconnectPlayer::GetClassData() const { return &_class_data_; }


void ReconnectPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReconnectPlayer*>(&to_msg);
  auto& from = static_cast<const ReconnectPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ReconnectPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shopcontents_.MergeFrom(from._impl_.shopcontents_);
  _this->_impl_.bagcharacters_.MergeFrom(from._impl_.bagcharacters_);
  _this->_impl_.mapcharacters_.MergeFrom(from._impl_.mapcharacters_);
  _this->_impl_.bagitems_.MergeFrom(from._impl_.bagitems_);
  _this->_impl_.grounditems_.MergeFrom(from._impl_.grounditems_);
  if (from._internal_has_playerdata()) {
    _this->_internal_mutable_playerdata()->::msg::PvpPlayerData::MergeFrom(
        from._internal_playerdata());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_currenthp() != 0) {
    _this->_internal_set_currenthp(from._internal_currenthp());
  }
  if (from._internal_currentgold() != 0) {
    _this->_internal_set_currentgold(from._internal_currentgold());
  }
  if (from._internal_currentlevel() != 0) {
    _this->_internal_set_currentlevel(from._internal_currentlevel());
  }
  if (from._internal_currentexp() != 0) {
    _this->_internal_set_currentexp(from._internal_currentexp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_messengerposx = from._internal_messengerposx();
  uint32_t raw_messengerposx;
  memcpy(&raw_messengerposx, &tmp_messengerposx, sizeof(tmp_messengerposx));
  if (raw_messengerposx != 0) {
    _this->_internal_set_messengerposx(from._internal_messengerposx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_messengerposy = from._internal_messengerposy();
  uint32_t raw_messengerposy;
  memcpy(&raw_messengerposy, &tmp_messengerposy, sizeof(tmp_messengerposy));
  if (raw_messengerposy != 0) {
    _this->_internal_set_messengerposy(from._internal_messengerposy());
  }
  if (from._internal_enemyplayerindex() != 0) {
    _this->_internal_set_enemyplayerindex(from._internal_enemyplayerindex());
  }
  if (from._internal_winstreak() != 0) {
    _this->_internal_set_winstreak(from._internal_winstreak());
  }
  if (from._internal_winroundcount() != 0) {
    _this->_internal_set_winroundcount(from._internal_winroundcount());
  }
  if (from._internal_loseroundcount() != 0) {
    _this->_internal_set_loseroundcount(from._internal_loseroundcount());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReconnectPlayer::CopyFrom(const ReconnectPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ReconnectPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectPlayer::IsInitialized() const {
  return true;
}

void ReconnectPlayer::InternalSwap(ReconnectPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shopcontents_.InternalSwap(&other->_impl_.shopcontents_);
  _impl_.bagcharacters_.InternalSwap(&other->_impl_.bagcharacters_);
  _impl_.mapcharacters_.InternalSwap(&other->_impl_.mapcharacters_);
  _impl_.bagitems_.InternalSwap(&other->_impl_.bagitems_);
  _impl_.grounditems_.InternalSwap(&other->_impl_.grounditems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconnectPlayer, _impl_.rank_)
      + sizeof(ReconnectPlayer::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(ReconnectPlayer, _impl_.playerdata_)>(
          reinterpret_cast<char*>(&_impl_.playerdata_),
          reinterpret_cast<char*>(&other->_impl_.playerdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconnectPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[17]);
}

// ===================================================================

class RoundInfo::_Internal {
 public:
};

RoundInfo::RoundInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.RoundInfo)
}
RoundInfo::RoundInfo(const RoundInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoundInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){}
    , decltype(_impl_.round_){}
    , decltype(_impl_.gameframe_){}
    , decltype(_impl_.currentphase_){}
    , decltype(_impl_.remaintime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seed_, &from._impl_.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remaintime_) -
    reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.remaintime_));
  // @@protoc_insertion_point(copy_constructor:msg.RoundInfo)
}

inline void RoundInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){0}
    , decltype(_impl_.round_){0}
    , decltype(_impl_.gameframe_){0}
    , decltype(_impl_.currentphase_){0}
    , decltype(_impl_.remaintime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoundInfo::~RoundInfo() {
  // @@protoc_insertion_point(destructor:msg.RoundInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoundInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoundInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoundInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RoundInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.remaintime_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.remaintime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoundInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GameFrame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gameframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.GameStage CurrentPhase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_currentphase(static_cast<::msg::GameStage>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 RemainTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.remaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoundInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoundInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Seed = 1;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seed(), target);
  }

  // int32 Round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_round(), target);
  }

  // int32 GameFrame = 3;
  if (this->_internal_gameframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gameframe(), target);
  }

  // .msg.GameStage CurrentPhase = 4;
  if (this->_internal_currentphase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_currentphase(), target);
  }

  // int32 RemainTime = 5;
  if (this->_internal_remaintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_remaintime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoundInfo)
  return target;
}

size_t RoundInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RoundInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Seed = 1;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seed());
  }

  // int32 Round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  // int32 GameFrame = 3;
  if (this->_internal_gameframe() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gameframe());
  }

  // .msg.GameStage CurrentPhase = 4;
  if (this->_internal_currentphase() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_currentphase());
  }

  // int32 RemainTime = 5;
  if (this->_internal_remaintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_remaintime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoundInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoundInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoundInfo::GetClassData() const { return &_class_data_; }


void RoundInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoundInfo*>(&to_msg);
  auto& from = static_cast<const RoundInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.RoundInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_gameframe() != 0) {
    _this->_internal_set_gameframe(from._internal_gameframe());
  }
  if (from._internal_currentphase() != 0) {
    _this->_internal_set_currentphase(from._internal_currentphase());
  }
  if (from._internal_remaintime() != 0) {
    _this->_internal_set_remaintime(from._internal_remaintime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoundInfo::CopyFrom(const RoundInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RoundInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundInfo::IsInitialized() const {
  return true;
}

void RoundInfo::InternalSwap(RoundInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoundInfo, _impl_.remaintime_)
      + sizeof(RoundInfo::_impl_.remaintime_)
      - PROTOBUF_FIELD_OFFSET(RoundInfo, _impl_.seed_)>(
          reinterpret_cast<char*>(&_impl_.seed_),
          reinterpret_cast<char*>(&other->_impl_.seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[18]);
}

// ===================================================================

class CorrectFormation::_Internal {
 public:
};

CorrectFormation::CorrectFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CorrectFormation)
}
CorrectFormation::CorrectFormation(const CorrectFormation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CorrectFormation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bagcharacters_){from._impl_.bagcharacters_}
    , decltype(_impl_.mapcharacters_){from._impl_.mapcharacters_}
    , decltype(_impl_.bagitems_){from._impl_.bagitems_}
    , decltype(_impl_.grounditems_){from._impl_.grounditems_}
    , decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CorrectFormation)
}

inline void CorrectFormation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bagcharacters_){arena}
    , decltype(_impl_.mapcharacters_){arena}
    , decltype(_impl_.bagitems_){arena}
    , decltype(_impl_.grounditems_){arena}
    , decltype(_impl_.playerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CorrectFormation::~CorrectFormation() {
  // @@protoc_insertion_point(destructor:msg.CorrectFormation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CorrectFormation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bagcharacters_.~RepeatedPtrField();
  _impl_.mapcharacters_.~RepeatedPtrField();
  _impl_.bagitems_.~RepeatedPtrField();
  _impl_.grounditems_.~RepeatedPtrField();
}

void CorrectFormation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CorrectFormation::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CorrectFormation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bagcharacters_.Clear();
  _impl_.mapcharacters_.Clear();
  _impl_.bagitems_.Clear();
  _impl_.grounditems_.Clear();
  _impl_.playerindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CorrectFormation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CharacterInTheBag BagCharacters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bagcharacters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CharacterOnTheMap MapCharacters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapcharacters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ItemInTheBag BagItems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bagitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ItemOnTheGround GroundItems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grounditems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CorrectFormation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CorrectFormation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CharacterInTheBag BagCharacters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bagcharacters_size()); i < n; i++) {
    const auto& repfield = this->_internal_bagcharacters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.CharacterOnTheMap MapCharacters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapcharacters_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapcharacters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.ItemInTheBag BagItems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bagitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_bagitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.ItemOnTheGround GroundItems = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grounditems_size()); i < n; i++) {
    const auto& repfield = this->_internal_grounditems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 PlayerIndex = 5;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CorrectFormation)
  return target;
}

size_t CorrectFormation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CorrectFormation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CharacterInTheBag BagCharacters = 1;
  total_size += 1UL * this->_internal_bagcharacters_size();
  for (const auto& msg : this->_impl_.bagcharacters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.CharacterOnTheMap MapCharacters = 2;
  total_size += 1UL * this->_internal_mapcharacters_size();
  for (const auto& msg : this->_impl_.mapcharacters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.ItemInTheBag BagItems = 3;
  total_size += 1UL * this->_internal_bagitems_size();
  for (const auto& msg : this->_impl_.bagitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.ItemOnTheGround GroundItems = 4;
  total_size += 1UL * this->_internal_grounditems_size();
  for (const auto& msg : this->_impl_.grounditems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 PlayerIndex = 5;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CorrectFormation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CorrectFormation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CorrectFormation::GetClassData() const { return &_class_data_; }


void CorrectFormation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CorrectFormation*>(&to_msg);
  auto& from = static_cast<const CorrectFormation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CorrectFormation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bagcharacters_.MergeFrom(from._impl_.bagcharacters_);
  _this->_impl_.mapcharacters_.MergeFrom(from._impl_.mapcharacters_);
  _this->_impl_.bagitems_.MergeFrom(from._impl_.bagitems_);
  _this->_impl_.grounditems_.MergeFrom(from._impl_.grounditems_);
  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CorrectFormation::CopyFrom(const CorrectFormation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CorrectFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrectFormation::IsInitialized() const {
  return true;
}

void CorrectFormation::InternalSwap(CorrectFormation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bagcharacters_.InternalSwap(&other->_impl_.bagcharacters_);
  _impl_.mapcharacters_.InternalSwap(&other->_impl_.mapcharacters_);
  _impl_.bagitems_.InternalSwap(&other->_impl_.bagitems_);
  _impl_.grounditems_.InternalSwap(&other->_impl_.grounditems_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CorrectFormation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[19]);
}

// ===================================================================

class CSReqSetMessengerPos::_Internal {
 public:
  static const ::msg::PositionFloat2D& pos(const CSReqSetMessengerPos* msg);
};

const ::msg::PositionFloat2D&
CSReqSetMessengerPos::_Internal::pos(const CSReqSetMessengerPos* msg) {
  return *msg->_impl_.pos_;
}
CSReqSetMessengerPos::CSReqSetMessengerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqSetMessengerPos)
}
CSReqSetMessengerPos::CSReqSetMessengerPos(const CSReqSetMessengerPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqSetMessengerPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::msg::PositionFloat2D(*from._impl_.pos_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqSetMessengerPos)
}

inline void CSReqSetMessengerPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqSetMessengerPos::~CSReqSetMessengerPos() {
  // @@protoc_insertion_point(destructor:msg.CSReqSetMessengerPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqSetMessengerPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void CSReqSetMessengerPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqSetMessengerPos::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqSetMessengerPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqSetMessengerPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PositionFloat2D Pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.MessengerMoveType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::MessengerMoveType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqSetMessengerPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqSetMessengerPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PositionFloat2D Pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .msg.MessengerMoveType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqSetMessengerPos)
  return target;
}

size_t CSReqSetMessengerPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqSetMessengerPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionFloat2D Pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .msg.MessengerMoveType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqSetMessengerPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqSetMessengerPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqSetMessengerPos::GetClassData() const { return &_class_data_; }


void CSReqSetMessengerPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqSetMessengerPos*>(&to_msg);
  auto& from = static_cast<const CSReqSetMessengerPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqSetMessengerPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::msg::PositionFloat2D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqSetMessengerPos::CopyFrom(const CSReqSetMessengerPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqSetMessengerPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqSetMessengerPos::IsInitialized() const {
  return true;
}

void CSReqSetMessengerPos::InternalSwap(CSReqSetMessengerPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqSetMessengerPos, _impl_.type_)
      + sizeof(CSReqSetMessengerPos::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CSReqSetMessengerPos, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqSetMessengerPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[20]);
}

// ===================================================================

class CSReqPvpSetReadyState::_Internal {
 public:
};

CSReqPvpSetReadyState::CSReqPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqPvpSetReadyState)
}
CSReqPvpSetReadyState::CSReqPvpSetReadyState(const CSReqPvpSetReadyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqPvpSetReadyState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqPvpSetReadyState)
}

inline void CSReqPvpSetReadyState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqPvpSetReadyState::~CSReqPvpSetReadyState() {
  // @@protoc_insertion_point(destructor:msg.CSReqPvpSetReadyState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqPvpSetReadyState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqPvpSetReadyState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqPvpSetReadyState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqPvpSetReadyState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqPvpSetReadyState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqPvpSetReadyState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqPvpSetReadyState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool State = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqPvpSetReadyState)
  return target;
}

size_t CSReqPvpSetReadyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqPvpSetReadyState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool State = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqPvpSetReadyState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqPvpSetReadyState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqPvpSetReadyState::GetClassData() const { return &_class_data_; }


void CSReqPvpSetReadyState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqPvpSetReadyState*>(&to_msg);
  auto& from = static_cast<const CSReqPvpSetReadyState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqPvpSetReadyState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqPvpSetReadyState::CopyFrom(const CSReqPvpSetReadyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqPvpSetReadyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqPvpSetReadyState::IsInitialized() const {
  return true;
}

void CSReqPvpSetReadyState::InternalSwap(CSReqPvpSetReadyState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqPvpSetReadyState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[21]);
}

// ===================================================================

class CSReqSetRefreshShopLock::_Internal {
 public:
};

CSReqSetRefreshShopLock::CSReqSetRefreshShopLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqSetRefreshShopLock)
}
CSReqSetRefreshShopLock::CSReqSetRefreshShopLock(const CSReqSetRefreshShopLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqSetRefreshShopLock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.islock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.islock_ = from._impl_.islock_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqSetRefreshShopLock)
}

inline void CSReqSetRefreshShopLock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.islock_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqSetRefreshShopLock::~CSReqSetRefreshShopLock() {
  // @@protoc_insertion_point(destructor:msg.CSReqSetRefreshShopLock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqSetRefreshShopLock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqSetRefreshShopLock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqSetRefreshShopLock::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqSetRefreshShopLock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.islock_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqSetRefreshShopLock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsLock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.islock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqSetRefreshShopLock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqSetRefreshShopLock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsLock = 1;
  if (this->_internal_islock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_islock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqSetRefreshShopLock)
  return target;
}

size_t CSReqSetRefreshShopLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqSetRefreshShopLock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsLock = 1;
  if (this->_internal_islock() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqSetRefreshShopLock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqSetRefreshShopLock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqSetRefreshShopLock::GetClassData() const { return &_class_data_; }


void CSReqSetRefreshShopLock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqSetRefreshShopLock*>(&to_msg);
  auto& from = static_cast<const CSReqSetRefreshShopLock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqSetRefreshShopLock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_islock() != 0) {
    _this->_internal_set_islock(from._internal_islock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqSetRefreshShopLock::CopyFrom(const CSReqSetRefreshShopLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqSetRefreshShopLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqSetRefreshShopLock::IsInitialized() const {
  return true;
}

void CSReqSetRefreshShopLock::InternalSwap(CSReqSetRefreshShopLock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.islock_, other->_impl_.islock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqSetRefreshShopLock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[22]);
}

// ===================================================================

class CSReqRetrieveChess::_Internal {
 public:
  static const ::msg::PositionInt2D& chesspos(const CSReqRetrieveChess* msg);
};

const ::msg::PositionInt2D&
CSReqRetrieveChess::_Internal::chesspos(const CSReqRetrieveChess* msg) {
  return *msg->_impl_.chesspos_;
}
CSReqRetrieveChess::CSReqRetrieveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqRetrieveChess)
}
CSReqRetrieveChess::CSReqRetrieveChess(const CSReqRetrieveChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqRetrieveChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspos_){nullptr}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chesspos()) {
    _this->_impl_.chesspos_ = new ::msg::PositionInt2D(*from._impl_.chesspos_);
  }
  _this->_impl_.bagindex_ = from._impl_.bagindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqRetrieveChess)
}

inline void CSReqRetrieveChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspos_){nullptr}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqRetrieveChess::~CSReqRetrieveChess() {
  // @@protoc_insertion_point(destructor:msg.CSReqRetrieveChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqRetrieveChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chesspos_;
}

void CSReqRetrieveChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqRetrieveChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqRetrieveChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chesspos_ != nullptr) {
    delete _impl_.chesspos_;
  }
  _impl_.chesspos_ = nullptr;
  _impl_.bagindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqRetrieveChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PositionInt2D ChessPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqRetrieveChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqRetrieveChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PositionInt2D ChessPos = 1;
  if (this->_internal_has_chesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chesspos(this),
        _Internal::chesspos(this).GetCachedSize(), target, stream);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqRetrieveChess)
  return target;
}

size_t CSReqRetrieveChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqRetrieveChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D ChessPos = 1;
  if (this->_internal_has_chesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesspos_);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqRetrieveChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqRetrieveChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqRetrieveChess::GetClassData() const { return &_class_data_; }


void CSReqRetrieveChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqRetrieveChess*>(&to_msg);
  auto& from = static_cast<const CSReqRetrieveChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqRetrieveChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chesspos()) {
    _this->_internal_mutable_chesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_chesspos());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqRetrieveChess::CopyFrom(const CSReqRetrieveChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqRetrieveChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqRetrieveChess::IsInitialized() const {
  return true;
}

void CSReqRetrieveChess::InternalSwap(CSReqRetrieveChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqRetrieveChess, _impl_.bagindex_)
      + sizeof(CSReqRetrieveChess::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CSReqRetrieveChess, _impl_.chesspos_)>(
          reinterpret_cast<char*>(&_impl_.chesspos_),
          reinterpret_cast<char*>(&other->_impl_.chesspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqRetrieveChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[23]);
}

// ===================================================================

class CSReqBuyChess::_Internal {
 public:
};

CSReqBuyChess::CSReqBuyChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqBuyChess)
}
CSReqBuyChess::CSReqBuyChess(const CSReqBuyChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqBuyChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shopindex_){}
    , decltype(_impl_.bagindex_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.istobag_){}
    , decltype(_impl_.isdrag_){}
    , decltype(_impl_.ty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shopindex_, &from._impl_.shopindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ty_) -
    reinterpret_cast<char*>(&_impl_.shopindex_)) + sizeof(_impl_.ty_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqBuyChess)
}

inline void CSReqBuyChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shopindex_){0}
    , decltype(_impl_.bagindex_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.istobag_){false}
    , decltype(_impl_.isdrag_){false}
    , decltype(_impl_.ty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqBuyChess::~CSReqBuyChess() {
  // @@protoc_insertion_point(destructor:msg.CSReqBuyChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqBuyChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqBuyChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqBuyChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqBuyChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shopindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ty_) -
      reinterpret_cast<char*>(&_impl_.shopindex_)) + sizeof(_impl_.ty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqBuyChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ShopIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shopindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsToBag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.istobag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsDrag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isdrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqBuyChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqBuyChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ShopIndex = 1;
  if (this->_internal_shopindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shopindex(), target);
  }

  // bool IsToBag = 2;
  if (this->_internal_istobag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_istobag(), target);
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagindex(), target);
  }

  // int32 Tx = 4;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tx(), target);
  }

  // int32 Ty = 5;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ty(), target);
  }

  // bool IsDrag = 6;
  if (this->_internal_isdrag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isdrag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqBuyChess)
  return target;
}

size_t CSReqBuyChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqBuyChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ShopIndex = 1;
  if (this->_internal_shopindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shopindex());
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 Tx = 4;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // bool IsToBag = 2;
  if (this->_internal_istobag() != 0) {
    total_size += 1 + 1;
  }

  // bool IsDrag = 6;
  if (this->_internal_isdrag() != 0) {
    total_size += 1 + 1;
  }

  // int32 Ty = 5;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqBuyChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqBuyChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqBuyChess::GetClassData() const { return &_class_data_; }


void CSReqBuyChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqBuyChess*>(&to_msg);
  auto& from = static_cast<const CSReqBuyChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqBuyChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shopindex() != 0) {
    _this->_internal_set_shopindex(from._internal_shopindex());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_istobag() != 0) {
    _this->_internal_set_istobag(from._internal_istobag());
  }
  if (from._internal_isdrag() != 0) {
    _this->_internal_set_isdrag(from._internal_isdrag());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqBuyChess::CopyFrom(const CSReqBuyChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqBuyChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqBuyChess::IsInitialized() const {
  return true;
}

void CSReqBuyChess::InternalSwap(CSReqBuyChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqBuyChess, _impl_.ty_)
      + sizeof(CSReqBuyChess::_impl_.ty_)
      - PROTOBUF_FIELD_OFFSET(CSReqBuyChess, _impl_.shopindex_)>(
          reinterpret_cast<char*>(&_impl_.shopindex_),
          reinterpret_cast<char*>(&other->_impl_.shopindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqBuyChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[24]);
}

// ===================================================================

class CSReqSellChessInBag::_Internal {
 public:
};

CSReqSellChessInBag::CSReqSellChessInBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqSellChessInBag)
}
CSReqSellChessInBag::CSReqSellChessInBag(const CSReqSellChessInBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqSellChessInBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bagindex_ = from._impl_.bagindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqSellChessInBag)
}

inline void CSReqSellChessInBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqSellChessInBag::~CSReqSellChessInBag() {
  // @@protoc_insertion_point(destructor:msg.CSReqSellChessInBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqSellChessInBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqSellChessInBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqSellChessInBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqSellChessInBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bagindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqSellChessInBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 BagIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqSellChessInBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqSellChessInBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BagIndex = 1;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bagindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqSellChessInBag)
  return target;
}

size_t CSReqSellChessInBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqSellChessInBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 BagIndex = 1;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqSellChessInBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqSellChessInBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqSellChessInBag::GetClassData() const { return &_class_data_; }


void CSReqSellChessInBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqSellChessInBag*>(&to_msg);
  auto& from = static_cast<const CSReqSellChessInBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqSellChessInBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqSellChessInBag::CopyFrom(const CSReqSellChessInBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqSellChessInBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqSellChessInBag::IsInitialized() const {
  return true;
}

void CSReqSellChessInBag::InternalSwap(CSReqSellChessInBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bagindex_, other->_impl_.bagindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqSellChessInBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[25]);
}

// ===================================================================

class CSReqSellChessOnBoard::_Internal {
 public:
  static const ::msg::PositionInt2D& chesspos(const CSReqSellChessOnBoard* msg);
};

const ::msg::PositionInt2D&
CSReqSellChessOnBoard::_Internal::chesspos(const CSReqSellChessOnBoard* msg) {
  return *msg->_impl_.chesspos_;
}
CSReqSellChessOnBoard::CSReqSellChessOnBoard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqSellChessOnBoard)
}
CSReqSellChessOnBoard::CSReqSellChessOnBoard(const CSReqSellChessOnBoard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqSellChessOnBoard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chesspos()) {
    _this->_impl_.chesspos_ = new ::msg::PositionInt2D(*from._impl_.chesspos_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSReqSellChessOnBoard)
}

inline void CSReqSellChessOnBoard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqSellChessOnBoard::~CSReqSellChessOnBoard() {
  // @@protoc_insertion_point(destructor:msg.CSReqSellChessOnBoard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqSellChessOnBoard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chesspos_;
}

void CSReqSellChessOnBoard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqSellChessOnBoard::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqSellChessOnBoard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chesspos_ != nullptr) {
    delete _impl_.chesspos_;
  }
  _impl_.chesspos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqSellChessOnBoard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PositionInt2D ChessPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqSellChessOnBoard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqSellChessOnBoard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PositionInt2D ChessPos = 1;
  if (this->_internal_has_chesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chesspos(this),
        _Internal::chesspos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqSellChessOnBoard)
  return target;
}

size_t CSReqSellChessOnBoard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqSellChessOnBoard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D ChessPos = 1;
  if (this->_internal_has_chesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesspos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqSellChessOnBoard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqSellChessOnBoard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqSellChessOnBoard::GetClassData() const { return &_class_data_; }


void CSReqSellChessOnBoard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqSellChessOnBoard*>(&to_msg);
  auto& from = static_cast<const CSReqSellChessOnBoard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqSellChessOnBoard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chesspos()) {
    _this->_internal_mutable_chesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_chesspos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqSellChessOnBoard::CopyFrom(const CSReqSellChessOnBoard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqSellChessOnBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqSellChessOnBoard::IsInitialized() const {
  return true;
}

void CSReqSellChessOnBoard::InternalSwap(CSReqSellChessOnBoard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.chesspos_, other->_impl_.chesspos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqSellChessOnBoard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[26]);
}

// ===================================================================

class CSReqMoveChess::_Internal {
 public:
  static const ::msg::PositionInt2D& srcchesspos(const CSReqMoveChess* msg);
  static const ::msg::PositionInt2D& destchesspos(const CSReqMoveChess* msg);
};

const ::msg::PositionInt2D&
CSReqMoveChess::_Internal::srcchesspos(const CSReqMoveChess* msg) {
  return *msg->_impl_.srcchesspos_;
}
const ::msg::PositionInt2D&
CSReqMoveChess::_Internal::destchesspos(const CSReqMoveChess* msg) {
  return *msg->_impl_.destchesspos_;
}
CSReqMoveChess::CSReqMoveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqMoveChess)
}
CSReqMoveChess::CSReqMoveChess(const CSReqMoveChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqMoveChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcchesspos_){nullptr}
    , decltype(_impl_.destchesspos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srcchesspos()) {
    _this->_impl_.srcchesspos_ = new ::msg::PositionInt2D(*from._impl_.srcchesspos_);
  }
  if (from._internal_has_destchesspos()) {
    _this->_impl_.destchesspos_ = new ::msg::PositionInt2D(*from._impl_.destchesspos_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSReqMoveChess)
}

inline void CSReqMoveChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcchesspos_){nullptr}
    , decltype(_impl_.destchesspos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqMoveChess::~CSReqMoveChess() {
  // @@protoc_insertion_point(destructor:msg.CSReqMoveChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqMoveChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.srcchesspos_;
  if (this != internal_default_instance()) delete _impl_.destchesspos_;
}

void CSReqMoveChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqMoveChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqMoveChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.srcchesspos_ != nullptr) {
    delete _impl_.srcchesspos_;
  }
  _impl_.srcchesspos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destchesspos_ != nullptr) {
    delete _impl_.destchesspos_;
  }
  _impl_.destchesspos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqMoveChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PositionInt2D SrcChessPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcchesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D DestChessPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destchesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqMoveChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqMoveChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcChessPos = 1;
  if (this->_internal_has_srcchesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::srcchesspos(this),
        _Internal::srcchesspos(this).GetCachedSize(), target, stream);
  }

  // .msg.PositionInt2D DestChessPos = 2;
  if (this->_internal_has_destchesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destchesspos(this),
        _Internal::destchesspos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqMoveChess)
  return target;
}

size_t CSReqMoveChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqMoveChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcChessPos = 1;
  if (this->_internal_has_srcchesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcchesspos_);
  }

  // .msg.PositionInt2D DestChessPos = 2;
  if (this->_internal_has_destchesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destchesspos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqMoveChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqMoveChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqMoveChess::GetClassData() const { return &_class_data_; }


void CSReqMoveChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqMoveChess*>(&to_msg);
  auto& from = static_cast<const CSReqMoveChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqMoveChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcchesspos()) {
    _this->_internal_mutable_srcchesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_srcchesspos());
  }
  if (from._internal_has_destchesspos()) {
    _this->_internal_mutable_destchesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_destchesspos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqMoveChess::CopyFrom(const CSReqMoveChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqMoveChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqMoveChess::IsInitialized() const {
  return true;
}

void CSReqMoveChess::InternalSwap(CSReqMoveChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqMoveChess, _impl_.destchesspos_)
      + sizeof(CSReqMoveChess::_impl_.destchesspos_)
      - PROTOBUF_FIELD_OFFSET(CSReqMoveChess, _impl_.srcchesspos_)>(
          reinterpret_cast<char*>(&_impl_.srcchesspos_),
          reinterpret_cast<char*>(&other->_impl_.srcchesspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqMoveChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[27]);
}

// ===================================================================

class CSReqBuyExp::_Internal {
 public:
};

CSReqBuyExp::CSReqBuyExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqBuyExp)
}
CSReqBuyExp::CSReqBuyExp(const CSReqBuyExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqBuyExp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.exp_ = from._impl_.exp_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqBuyExp)
}

inline void CSReqBuyExp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqBuyExp::~CSReqBuyExp() {
  // @@protoc_insertion_point(destructor:msg.CSReqBuyExp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqBuyExp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqBuyExp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqBuyExp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqBuyExp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqBuyExp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqBuyExp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqBuyExp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Exp = 1;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqBuyExp)
  return target;
}

size_t CSReqBuyExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqBuyExp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Exp = 1;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqBuyExp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqBuyExp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqBuyExp::GetClassData() const { return &_class_data_; }


void CSReqBuyExp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqBuyExp*>(&to_msg);
  auto& from = static_cast<const CSReqBuyExp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqBuyExp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqBuyExp::CopyFrom(const CSReqBuyExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqBuyExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqBuyExp::IsInitialized() const {
  return true;
}

void CSReqBuyExp::InternalSwap(CSReqBuyExp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.exp_, other->_impl_.exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqBuyExp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[28]);
}

// ===================================================================

class CSReqRefreshShop::_Internal {
 public:
};

CSReqRefreshShop::CSReqRefreshShop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqRefreshShop)
}
CSReqRefreshShop::CSReqRefreshShop(const CSReqRefreshShop& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqRefreshShop* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqRefreshShop)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqRefreshShop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqRefreshShop::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqRefreshShop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[29]);
}

// ===================================================================

class CSReqMoveChessInBagToMap::_Internal {
 public:
  static const ::msg::PositionInt2D& destpos(const CSReqMoveChessInBagToMap* msg);
};

const ::msg::PositionInt2D&
CSReqMoveChessInBagToMap::_Internal::destpos(const CSReqMoveChessInBagToMap* msg) {
  return *msg->_impl_.destpos_;
}
CSReqMoveChessInBagToMap::CSReqMoveChessInBagToMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqMoveChessInBagToMap)
}
CSReqMoveChessInBagToMap::CSReqMoveChessInBagToMap(const CSReqMoveChessInBagToMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqMoveChessInBagToMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.bagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destpos()) {
    _this->_impl_.destpos_ = new ::msg::PositionInt2D(*from._impl_.destpos_);
  }
  _this->_impl_.bagidx_ = from._impl_.bagidx_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqMoveChessInBagToMap)
}

inline void CSReqMoveChessInBagToMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.bagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqMoveChessInBagToMap::~CSReqMoveChessInBagToMap() {
  // @@protoc_insertion_point(destructor:msg.CSReqMoveChessInBagToMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqMoveChessInBagToMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.destpos_;
}

void CSReqMoveChessInBagToMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqMoveChessInBagToMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqMoveChessInBagToMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
  _impl_.bagidx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqMoveChessInBagToMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 BagIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D DestPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqMoveChessInBagToMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqMoveChessInBagToMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BagIdx = 1;
  if (this->_internal_bagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bagidx(), target);
  }

  // .msg.PositionInt2D DestPos = 2;
  if (this->_internal_has_destpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destpos(this),
        _Internal::destpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqMoveChessInBagToMap)
  return target;
}

size_t CSReqMoveChessInBagToMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqMoveChessInBagToMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D DestPos = 2;
  if (this->_internal_has_destpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destpos_);
  }

  // int32 BagIdx = 1;
  if (this->_internal_bagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqMoveChessInBagToMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqMoveChessInBagToMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqMoveChessInBagToMap::GetClassData() const { return &_class_data_; }


void CSReqMoveChessInBagToMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqMoveChessInBagToMap*>(&to_msg);
  auto& from = static_cast<const CSReqMoveChessInBagToMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqMoveChessInBagToMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destpos()) {
    _this->_internal_mutable_destpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_destpos());
  }
  if (from._internal_bagidx() != 0) {
    _this->_internal_set_bagidx(from._internal_bagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqMoveChessInBagToMap::CopyFrom(const CSReqMoveChessInBagToMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqMoveChessInBagToMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqMoveChessInBagToMap::IsInitialized() const {
  return true;
}

void CSReqMoveChessInBagToMap::InternalSwap(CSReqMoveChessInBagToMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqMoveChessInBagToMap, _impl_.bagidx_)
      + sizeof(CSReqMoveChessInBagToMap::_impl_.bagidx_)
      - PROTOBUF_FIELD_OFFSET(CSReqMoveChessInBagToMap, _impl_.destpos_)>(
          reinterpret_cast<char*>(&_impl_.destpos_),
          reinterpret_cast<char*>(&other->_impl_.destpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqMoveChessInBagToMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[30]);
}

// ===================================================================

class CSReqMoveChessWithinBag::_Internal {
 public:
};

CSReqMoveChessWithinBag::CSReqMoveChessWithinBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqMoveChessWithinBag)
}
CSReqMoveChessWithinBag::CSReqMoveChessWithinBag(const CSReqMoveChessWithinBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqMoveChessWithinBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcbagidx_){}
    , decltype(_impl_.destbagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcbagidx_, &from._impl_.srcbagidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destbagidx_) -
    reinterpret_cast<char*>(&_impl_.srcbagidx_)) + sizeof(_impl_.destbagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqMoveChessWithinBag)
}

inline void CSReqMoveChessWithinBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcbagidx_){0}
    , decltype(_impl_.destbagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqMoveChessWithinBag::~CSReqMoveChessWithinBag() {
  // @@protoc_insertion_point(destructor:msg.CSReqMoveChessWithinBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqMoveChessWithinBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqMoveChessWithinBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqMoveChessWithinBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqMoveChessWithinBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.srcbagidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destbagidx_) -
      reinterpret_cast<char*>(&_impl_.srcbagidx_)) + sizeof(_impl_.destbagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqMoveChessWithinBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SrcBagIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestBagIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.destbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqMoveChessWithinBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqMoveChessWithinBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SrcBagIdx = 1;
  if (this->_internal_srcbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcbagidx(), target);
  }

  // int32 DestBagIdx = 2;
  if (this->_internal_destbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destbagidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqMoveChessWithinBag)
  return target;
}

size_t CSReqMoveChessWithinBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqMoveChessWithinBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 SrcBagIdx = 1;
  if (this->_internal_srcbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcbagidx());
  }

  // int32 DestBagIdx = 2;
  if (this->_internal_destbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destbagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqMoveChessWithinBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqMoveChessWithinBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqMoveChessWithinBag::GetClassData() const { return &_class_data_; }


void CSReqMoveChessWithinBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqMoveChessWithinBag*>(&to_msg);
  auto& from = static_cast<const CSReqMoveChessWithinBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqMoveChessWithinBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srcbagidx() != 0) {
    _this->_internal_set_srcbagidx(from._internal_srcbagidx());
  }
  if (from._internal_destbagidx() != 0) {
    _this->_internal_set_destbagidx(from._internal_destbagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqMoveChessWithinBag::CopyFrom(const CSReqMoveChessWithinBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqMoveChessWithinBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqMoveChessWithinBag::IsInitialized() const {
  return true;
}

void CSReqMoveChessWithinBag::InternalSwap(CSReqMoveChessWithinBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqMoveChessWithinBag, _impl_.destbagidx_)
      + sizeof(CSReqMoveChessWithinBag::_impl_.destbagidx_)
      - PROTOBUF_FIELD_OFFSET(CSReqMoveChessWithinBag, _impl_.srcbagidx_)>(
          reinterpret_cast<char*>(&_impl_.srcbagidx_),
          reinterpret_cast<char*>(&other->_impl_.srcbagidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqMoveChessWithinBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[31]);
}

// ===================================================================

class CSReqPlayerLoaded::_Internal {
 public:
};

CSReqPlayerLoaded::CSReqPlayerLoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqPlayerLoaded)
}
CSReqPlayerLoaded::CSReqPlayerLoaded(const CSReqPlayerLoaded& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqPlayerLoaded* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqPlayerLoaded)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqPlayerLoaded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqPlayerLoaded::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqPlayerLoaded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[32]);
}

// ===================================================================

class CSReqPlayerRoundEnd::_Internal {
 public:
};

CSReqPlayerRoundEnd::CSReqPlayerRoundEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqPlayerRoundEnd)
}
CSReqPlayerRoundEnd::CSReqPlayerRoundEnd(const CSReqPlayerRoundEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqPlayerRoundEnd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqPlayerRoundEnd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqPlayerRoundEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqPlayerRoundEnd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqPlayerRoundEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[33]);
}

// ===================================================================

class CSReqPickupEquipment::_Internal {
 public:
};

CSReqPickupEquipment::CSReqPickupEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqPickupEquipment)
}
CSReqPickupEquipment::CSReqPickupEquipment(const CSReqPickupEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqPickupEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.netid_ = from._impl_.netid_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqPickupEquipment)
}

inline void CSReqPickupEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqPickupEquipment::~CSReqPickupEquipment() {
  // @@protoc_insertion_point(destructor:msg.CSReqPickupEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqPickupEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqPickupEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqPickupEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqPickupEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.netid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqPickupEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqPickupEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqPickupEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqPickupEquipment)
  return target;
}

size_t CSReqPickupEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqPickupEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqPickupEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqPickupEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqPickupEquipment::GetClassData() const { return &_class_data_; }


void CSReqPickupEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqPickupEquipment*>(&to_msg);
  auto& from = static_cast<const CSReqPickupEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqPickupEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqPickupEquipment::CopyFrom(const CSReqPickupEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqPickupEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqPickupEquipment::IsInitialized() const {
  return true;
}

void CSReqPickupEquipment::InternalSwap(CSReqPickupEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.netid_, other->_impl_.netid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqPickupEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[34]);
}

// ===================================================================

class CSReqCraftEquip::_Internal {
 public:
};

CSReqCraftEquip::CSReqCraftEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqCraftEquip)
}
CSReqCraftEquip::CSReqCraftEquip(const CSReqCraftEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqCraftEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equipnetids_){from._impl_.equipnetids_}
    , /*decltype(_impl_._equipnetids_cached_byte_size_)*/{0}
    , decltype(_impl_.istochess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.istochess_ = from._impl_.istochess_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqCraftEquip)
}

inline void CSReqCraftEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equipnetids_){arena}
    , /*decltype(_impl_._equipnetids_cached_byte_size_)*/{0}
    , decltype(_impl_.istochess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqCraftEquip::~CSReqCraftEquip() {
  // @@protoc_insertion_point(destructor:msg.CSReqCraftEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqCraftEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equipnetids_.~RepeatedField();
}

void CSReqCraftEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqCraftEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqCraftEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipnetids_.Clear();
  _impl_.istochess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqCraftEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 EquipNetIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equipnetids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_equipnetids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsToChess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.istochess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqCraftEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqCraftEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 EquipNetIds = 1;
  {
    int byte_size = _impl_._equipnetids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_equipnetids(), byte_size, target);
    }
  }

  // bool IsToChess = 2;
  if (this->_internal_istochess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_istochess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqCraftEquip)
  return target;
}

size_t CSReqCraftEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqCraftEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 EquipNetIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equipnetids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equipnetids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool IsToChess = 2;
  if (this->_internal_istochess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqCraftEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqCraftEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqCraftEquip::GetClassData() const { return &_class_data_; }


void CSReqCraftEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqCraftEquip*>(&to_msg);
  auto& from = static_cast<const CSReqCraftEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqCraftEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equipnetids_.MergeFrom(from._impl_.equipnetids_);
  if (from._internal_istochess() != 0) {
    _this->_internal_set_istochess(from._internal_istochess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqCraftEquip::CopyFrom(const CSReqCraftEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqCraftEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqCraftEquip::IsInitialized() const {
  return true;
}

void CSReqCraftEquip::InternalSwap(CSReqCraftEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equipnetids_.InternalSwap(&other->_impl_.equipnetids_);
  swap(_impl_.istochess_, other->_impl_.istochess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqCraftEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[35]);
}

// ===================================================================

class CSReqUseEquipment::_Internal {
 public:
  static const ::msg::PositionInt2D& pos(const CSReqUseEquipment* msg);
};

const ::msg::PositionInt2D&
CSReqUseEquipment::_Internal::pos(const CSReqUseEquipment* msg) {
  return *msg->_impl_.pos_;
}
CSReqUseEquipment::CSReqUseEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqUseEquipment)
}
CSReqUseEquipment::CSReqUseEquipment(const CSReqUseEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqUseEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.netid_){}
    , decltype(_impl_.ischessinbag_){}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::msg::PositionInt2D(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagindex_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.bagindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqUseEquipment)
}

inline void CSReqUseEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.netid_){0}
    , decltype(_impl_.ischessinbag_){false}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqUseEquipment::~CSReqUseEquipment() {
  // @@protoc_insertion_point(destructor:msg.CSReqUseEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqUseEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void CSReqUseEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqUseEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqUseEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagindex_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.bagindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqUseEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsChessInBag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ischessinbag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D Pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqUseEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqUseEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // bool IsChessInBag = 2;
  if (this->_internal_ischessinbag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ischessinbag(), target);
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagindex(), target);
  }

  // .msg.PositionInt2D Pos = 4;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqUseEquipment)
  return target;
}

size_t CSReqUseEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqUseEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D Pos = 4;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // bool IsChessInBag = 2;
  if (this->_internal_ischessinbag() != 0) {
    total_size += 1 + 1;
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqUseEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqUseEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqUseEquipment::GetClassData() const { return &_class_data_; }


void CSReqUseEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqUseEquipment*>(&to_msg);
  auto& from = static_cast<const CSReqUseEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqUseEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::msg::PositionInt2D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_ischessinbag() != 0) {
    _this->_internal_set_ischessinbag(from._internal_ischessinbag());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqUseEquipment::CopyFrom(const CSReqUseEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqUseEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqUseEquipment::IsInitialized() const {
  return true;
}

void CSReqUseEquipment::InternalSwap(CSReqUseEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqUseEquipment, _impl_.bagindex_)
      + sizeof(CSReqUseEquipment::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CSReqUseEquipment, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqUseEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[36]);
}

// ===================================================================

class CSReqUpdateAntiAddictionTime::_Internal {
 public:
};

CSReqUpdateAntiAddictionTime::CSReqUpdateAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqUpdateAntiAddictionTime)
}
CSReqUpdateAntiAddictionTime::CSReqUpdateAntiAddictionTime(const CSReqUpdateAntiAddictionTime& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqUpdateAntiAddictionTime* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqUpdateAntiAddictionTime)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqUpdateAntiAddictionTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqUpdateAntiAddictionTime::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqUpdateAntiAddictionTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[37]);
}

// ===================================================================

class CSReqCancelReconnect::_Internal {
 public:
};

CSReqCancelReconnect::CSReqCancelReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqCancelReconnect)
}
CSReqCancelReconnect::CSReqCancelReconnect(const CSReqCancelReconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqCancelReconnect* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqCancelReconnect)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqCancelReconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqCancelReconnect::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqCancelReconnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[38]);
}

// ===================================================================

class CSReqSetAutoUpgradeCharacter::_Internal {
 public:
};

CSReqSetAutoUpgradeCharacter::CSReqSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqSetAutoUpgradeCharacter)
}
CSReqSetAutoUpgradeCharacter::CSReqSetAutoUpgradeCharacter(const CSReqSetAutoUpgradeCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqSetAutoUpgradeCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.switchon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.switchon_ = from._impl_.switchon_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqSetAutoUpgradeCharacter)
}

inline void CSReqSetAutoUpgradeCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.switchon_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqSetAutoUpgradeCharacter::~CSReqSetAutoUpgradeCharacter() {
  // @@protoc_insertion_point(destructor:msg.CSReqSetAutoUpgradeCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqSetAutoUpgradeCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqSetAutoUpgradeCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqSetAutoUpgradeCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqSetAutoUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.switchon_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqSetAutoUpgradeCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool SwitchOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.switchon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqSetAutoUpgradeCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqSetAutoUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool SwitchOn = 1;
  if (this->_internal_switchon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_switchon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqSetAutoUpgradeCharacter)
  return target;
}

size_t CSReqSetAutoUpgradeCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqSetAutoUpgradeCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool SwitchOn = 1;
  if (this->_internal_switchon() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqSetAutoUpgradeCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqSetAutoUpgradeCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqSetAutoUpgradeCharacter::GetClassData() const { return &_class_data_; }


void CSReqSetAutoUpgradeCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqSetAutoUpgradeCharacter*>(&to_msg);
  auto& from = static_cast<const CSReqSetAutoUpgradeCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqSetAutoUpgradeCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switchon() != 0) {
    _this->_internal_set_switchon(from._internal_switchon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqSetAutoUpgradeCharacter::CopyFrom(const CSReqSetAutoUpgradeCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqSetAutoUpgradeCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqSetAutoUpgradeCharacter::IsInitialized() const {
  return true;
}

void CSReqSetAutoUpgradeCharacter::InternalSwap(CSReqSetAutoUpgradeCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.switchon_, other->_impl_.switchon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqSetAutoUpgradeCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[39]);
}

// ===================================================================

class CSReqReconnect::_Internal {
 public:
};

CSReqReconnect::CSReqReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqReconnect)
}
CSReqReconnect::CSReqReconnect(const CSReqReconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqReconnect* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqReconnect)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqReconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqReconnect::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqReconnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[40]);
}

// ===================================================================

class CSReqManuallyUpgradeCharacter::_Internal {
 public:
};

CSReqManuallyUpgradeCharacter::CSReqManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqManuallyUpgradeCharacter)
}
CSReqManuallyUpgradeCharacter::CSReqManuallyUpgradeCharacter(const CSReqManuallyUpgradeCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqManuallyUpgradeCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , decltype(_impl_.isinbag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bagindex_, &from._impl_.bagindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isinbag_) -
    reinterpret_cast<char*>(&_impl_.bagindex_)) + sizeof(_impl_.isinbag_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqManuallyUpgradeCharacter)
}

inline void CSReqManuallyUpgradeCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , decltype(_impl_.isinbag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqManuallyUpgradeCharacter::~CSReqManuallyUpgradeCharacter() {
  // @@protoc_insertion_point(destructor:msg.CSReqManuallyUpgradeCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqManuallyUpgradeCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqManuallyUpgradeCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqManuallyUpgradeCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqManuallyUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bagindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isinbag_) -
      reinterpret_cast<char*>(&_impl_.bagindex_)) + sizeof(_impl_.isinbag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqManuallyUpgradeCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 BagIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsInBag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isinbag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqManuallyUpgradeCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqManuallyUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BagIndex = 1;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bagindex(), target);
  }

  // int32 Tx = 2;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tx(), target);
  }

  // int32 Ty = 3;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ty(), target);
  }

  // bool IsInBag = 4;
  if (this->_internal_isinbag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isinbag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqManuallyUpgradeCharacter)
  return target;
}

size_t CSReqManuallyUpgradeCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqManuallyUpgradeCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 BagIndex = 1;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 Tx = 2;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // int32 Ty = 3;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  // bool IsInBag = 4;
  if (this->_internal_isinbag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqManuallyUpgradeCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqManuallyUpgradeCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqManuallyUpgradeCharacter::GetClassData() const { return &_class_data_; }


void CSReqManuallyUpgradeCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqManuallyUpgradeCharacter*>(&to_msg);
  auto& from = static_cast<const CSReqManuallyUpgradeCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqManuallyUpgradeCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  if (from._internal_isinbag() != 0) {
    _this->_internal_set_isinbag(from._internal_isinbag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqManuallyUpgradeCharacter::CopyFrom(const CSReqManuallyUpgradeCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqManuallyUpgradeCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqManuallyUpgradeCharacter::IsInitialized() const {
  return true;
}

void CSReqManuallyUpgradeCharacter::InternalSwap(CSReqManuallyUpgradeCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqManuallyUpgradeCharacter, _impl_.isinbag_)
      + sizeof(CSReqManuallyUpgradeCharacter::_impl_.isinbag_)
      - PROTOBUF_FIELD_OFFSET(CSReqManuallyUpgradeCharacter, _impl_.bagindex_)>(
          reinterpret_cast<char*>(&_impl_.bagindex_),
          reinterpret_cast<char*>(&other->_impl_.bagindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqManuallyUpgradeCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[41]);
}

// ===================================================================

class CSReqQuitBattle::_Internal {
 public:
};

CSReqQuitBattle::CSReqQuitBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqQuitBattle)
}
CSReqQuitBattle::CSReqQuitBattle(const CSReqQuitBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqQuitBattle* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqQuitBattle)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqQuitBattle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqQuitBattle::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqQuitBattle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[42]);
}

// ===================================================================

class CSReqSusPendGame::_Internal {
 public:
};

CSReqSusPendGame::CSReqSusPendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqSusPendGame)
}
CSReqSusPendGame::CSReqSusPendGame(const CSReqSusPendGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqSusPendGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.suspend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.suspend_ = from._impl_.suspend_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqSusPendGame)
}

inline void CSReqSusPendGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.suspend_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqSusPendGame::~CSReqSusPendGame() {
  // @@protoc_insertion_point(destructor:msg.CSReqSusPendGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqSusPendGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqSusPendGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqSusPendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqSusPendGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.suspend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqSusPendGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool susPend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.suspend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqSusPendGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqSusPendGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool susPend = 1;
  if (this->_internal_suspend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_suspend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqSusPendGame)
  return target;
}

size_t CSReqSusPendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqSusPendGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool susPend = 1;
  if (this->_internal_suspend() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqSusPendGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqSusPendGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqSusPendGame::GetClassData() const { return &_class_data_; }


void CSReqSusPendGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqSusPendGame*>(&to_msg);
  auto& from = static_cast<const CSReqSusPendGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqSusPendGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_suspend() != 0) {
    _this->_internal_set_suspend(from._internal_suspend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqSusPendGame::CopyFrom(const CSReqSusPendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqSusPendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqSusPendGame::IsInitialized() const {
  return true;
}

void CSReqSusPendGame::InternalSwap(CSReqSusPendGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.suspend_, other->_impl_.suspend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqSusPendGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[43]);
}

// ===================================================================

class CSReqChessDB::_Internal {
 public:
};

CSReqChessDB::CSReqChessDB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqChessDB)
}
CSReqChessDB::CSReqChessDB(const CSReqChessDB& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqChessDB* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqChessDB)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqChessDB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqChessDB::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqChessDB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[44]);
}

// ===================================================================

class CSReqStatisticsInfo::_Internal {
 public:
};

CSReqStatisticsInfo::CSReqStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqStatisticsInfo)
}
CSReqStatisticsInfo::CSReqStatisticsInfo(const CSReqStatisticsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqStatisticsInfo* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqStatisticsInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqStatisticsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqStatisticsInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqStatisticsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[45]);
}

// ===================================================================

class CSReqPassThrough::_Internal {
 public:
};

CSReqPassThrough::CSReqPassThrough(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqPassThrough)
}
CSReqPassThrough::CSReqPassThrough(const CSReqPassThrough& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqPassThrough* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSReqPassThrough)
}

inline void CSReqPassThrough::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSReqPassThrough::~CSReqPassThrough() {
  // @@protoc_insertion_point(destructor:msg.CSReqPassThrough)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqPassThrough::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CSReqPassThrough::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqPassThrough::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqPassThrough)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqPassThrough::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqPassThrough::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqPassThrough)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqPassThrough)
  return target;
}

size_t CSReqPassThrough::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqPassThrough)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqPassThrough::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqPassThrough::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqPassThrough::GetClassData() const { return &_class_data_; }


void CSReqPassThrough::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqPassThrough*>(&to_msg);
  auto& from = static_cast<const CSReqPassThrough&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqPassThrough)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqPassThrough::CopyFrom(const CSReqPassThrough& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqPassThrough)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqPassThrough::IsInitialized() const {
  return true;
}

void CSReqPassThrough::InternalSwap(CSReqPassThrough* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqPassThrough::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[46]);
}

// ===================================================================

class CSReqUpdateBattleResult::_Internal {
 public:
};

CSReqUpdateBattleResult::CSReqUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqUpdateBattleResult)
}
CSReqUpdateBattleResult::CSReqUpdateBattleResult(const CSReqUpdateBattleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqUpdateBattleResult* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqUpdateBattleResult)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqUpdateBattleResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqUpdateBattleResult::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqUpdateBattleResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[47]);
}

// ===================================================================

class CSReqVisitPlayer::_Internal {
 public:
};

CSReqVisitPlayer::CSReqVisitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqVisitPlayer)
}
CSReqVisitPlayer::CSReqVisitPlayer(const CSReqVisitPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqVisitPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcplayerindex_){}
    , decltype(_impl_.destplayerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcplayerindex_, &from._impl_.srcplayerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destplayerindex_) -
    reinterpret_cast<char*>(&_impl_.srcplayerindex_)) + sizeof(_impl_.destplayerindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqVisitPlayer)
}

inline void CSReqVisitPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcplayerindex_){0}
    , decltype(_impl_.destplayerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqVisitPlayer::~CSReqVisitPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSReqVisitPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqVisitPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSReqVisitPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqVisitPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqVisitPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.srcplayerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destplayerindex_) -
      reinterpret_cast<char*>(&_impl_.srcplayerindex_)) + sizeof(_impl_.destplayerindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqVisitPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SrcPlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestPlayerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.destplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqVisitPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqVisitPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcplayerindex(), target);
  }

  // int32 DestPlayerIndex = 2;
  if (this->_internal_destplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destplayerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqVisitPlayer)
  return target;
}

size_t CSReqVisitPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqVisitPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcplayerindex());
  }

  // int32 DestPlayerIndex = 2;
  if (this->_internal_destplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destplayerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqVisitPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqVisitPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqVisitPlayer::GetClassData() const { return &_class_data_; }


void CSReqVisitPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqVisitPlayer*>(&to_msg);
  auto& from = static_cast<const CSReqVisitPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqVisitPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srcplayerindex() != 0) {
    _this->_internal_set_srcplayerindex(from._internal_srcplayerindex());
  }
  if (from._internal_destplayerindex() != 0) {
    _this->_internal_set_destplayerindex(from._internal_destplayerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqVisitPlayer::CopyFrom(const CSReqVisitPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqVisitPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqVisitPlayer::IsInitialized() const {
  return true;
}

void CSReqVisitPlayer::InternalSwap(CSReqVisitPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqVisitPlayer, _impl_.destplayerindex_)
      + sizeof(CSReqVisitPlayer::_impl_.destplayerindex_)
      - PROTOBUF_FIELD_OFFSET(CSReqVisitPlayer, _impl_.srcplayerindex_)>(
          reinterpret_cast<char*>(&_impl_.srcplayerindex_),
          reinterpret_cast<char*>(&other->_impl_.srcplayerindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqVisitPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[48]);
}

// ===================================================================

class CSReqLeaveGameEarly::_Internal {
 public:
};

CSReqLeaveGameEarly::CSReqLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqLeaveGameEarly)
}
CSReqLeaveGameEarly::CSReqLeaveGameEarly(const CSReqLeaveGameEarly& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqLeaveGameEarly* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqLeaveGameEarly)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqLeaveGameEarly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqLeaveGameEarly::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqLeaveGameEarly::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[49]);
}

// ===================================================================

class CSReqReportAbsent::_Internal {
 public:
};

CSReqReportAbsent::CSReqReportAbsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqReportAbsent)
}
CSReqReportAbsent::CSReqReportAbsent(const CSReqReportAbsent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqReportAbsent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqReportAbsent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqReportAbsent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqReportAbsent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqReportAbsent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[50]);
}

// ===================================================================

class CSRspSetMessengerPos::_Internal {
 public:
};

CSRspSetMessengerPos::CSRspSetMessengerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspSetMessengerPos)
}
CSRspSetMessengerPos::CSRspSetMessengerPos(const CSRspSetMessengerPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspSetMessengerPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspSetMessengerPos)
}

inline void CSRspSetMessengerPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspSetMessengerPos::~CSRspSetMessengerPos() {
  // @@protoc_insertion_point(destructor:msg.CSRspSetMessengerPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspSetMessengerPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspSetMessengerPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspSetMessengerPos::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspSetMessengerPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspSetMessengerPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.MessengerMoveType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::MessengerMoveType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspSetMessengerPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspSetMessengerPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .msg.MessengerMoveType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspSetMessengerPos)
  return target;
}

size_t CSRspSetMessengerPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspSetMessengerPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .msg.MessengerMoveType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspSetMessengerPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspSetMessengerPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspSetMessengerPos::GetClassData() const { return &_class_data_; }


void CSRspSetMessengerPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspSetMessengerPos*>(&to_msg);
  auto& from = static_cast<const CSRspSetMessengerPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspSetMessengerPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspSetMessengerPos::CopyFrom(const CSRspSetMessengerPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspSetMessengerPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspSetMessengerPos::IsInitialized() const {
  return true;
}

void CSRspSetMessengerPos::InternalSwap(CSRspSetMessengerPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspSetMessengerPos, _impl_.type_)
      + sizeof(CSRspSetMessengerPos::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CSRspSetMessengerPos, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspSetMessengerPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[51]);
}

// ===================================================================

class CSRspPvpSetReadyState::_Internal {
 public:
};

CSRspPvpSetReadyState::CSRspPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspPvpSetReadyState)
}
CSRspPvpSetReadyState::CSRspPvpSetReadyState(const CSRspPvpSetReadyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspPvpSetReadyState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspPvpSetReadyState)
}

inline void CSRspPvpSetReadyState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspPvpSetReadyState::~CSRspPvpSetReadyState() {
  // @@protoc_insertion_point(destructor:msg.CSRspPvpSetReadyState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspPvpSetReadyState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspPvpSetReadyState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspPvpSetReadyState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspPvpSetReadyState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspPvpSetReadyState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspPvpSetReadyState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspPvpSetReadyState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspPvpSetReadyState)
  return target;
}

size_t CSRspPvpSetReadyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspPvpSetReadyState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspPvpSetReadyState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspPvpSetReadyState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspPvpSetReadyState::GetClassData() const { return &_class_data_; }


void CSRspPvpSetReadyState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspPvpSetReadyState*>(&to_msg);
  auto& from = static_cast<const CSRspPvpSetReadyState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspPvpSetReadyState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspPvpSetReadyState::CopyFrom(const CSRspPvpSetReadyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspPvpSetReadyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspPvpSetReadyState::IsInitialized() const {
  return true;
}

void CSRspPvpSetReadyState::InternalSwap(CSRspPvpSetReadyState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspPvpSetReadyState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[52]);
}

// ===================================================================

class CSRspSetRefreshShopLock::_Internal {
 public:
};

CSRspSetRefreshShopLock::CSRspSetRefreshShopLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspSetRefreshShopLock)
}
CSRspSetRefreshShopLock::CSRspSetRefreshShopLock(const CSRspSetRefreshShopLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspSetRefreshShopLock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.islock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.islock_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.islock_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspSetRefreshShopLock)
}

inline void CSRspSetRefreshShopLock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.islock_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspSetRefreshShopLock::~CSRspSetRefreshShopLock() {
  // @@protoc_insertion_point(destructor:msg.CSRspSetRefreshShopLock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspSetRefreshShopLock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspSetRefreshShopLock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspSetRefreshShopLock::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspSetRefreshShopLock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.islock_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.islock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspSetRefreshShopLock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsLock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.islock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspSetRefreshShopLock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspSetRefreshShopLock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bool IsLock = 2;
  if (this->_internal_islock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_islock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspSetRefreshShopLock)
  return target;
}

size_t CSRspSetRefreshShopLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspSetRefreshShopLock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool IsLock = 2;
  if (this->_internal_islock() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspSetRefreshShopLock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspSetRefreshShopLock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspSetRefreshShopLock::GetClassData() const { return &_class_data_; }


void CSRspSetRefreshShopLock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspSetRefreshShopLock*>(&to_msg);
  auto& from = static_cast<const CSRspSetRefreshShopLock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspSetRefreshShopLock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_islock() != 0) {
    _this->_internal_set_islock(from._internal_islock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspSetRefreshShopLock::CopyFrom(const CSRspSetRefreshShopLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspSetRefreshShopLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspSetRefreshShopLock::IsInitialized() const {
  return true;
}

void CSRspSetRefreshShopLock::InternalSwap(CSRspSetRefreshShopLock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspSetRefreshShopLock, _impl_.islock_)
      + sizeof(CSRspSetRefreshShopLock::_impl_.islock_)
      - PROTOBUF_FIELD_OFFSET(CSRspSetRefreshShopLock, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspSetRefreshShopLock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[53]);
}

// ===================================================================

class CSRspRetrieveChess::_Internal {
 public:
  static const ::msg::PositionInt2D& srcchesspos(const CSRspRetrieveChess* msg);
};

const ::msg::PositionInt2D&
CSRspRetrieveChess::_Internal::srcchesspos(const CSRspRetrieveChess* msg) {
  return *msg->_impl_.srcchesspos_;
}
CSRspRetrieveChess::CSRspRetrieveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspRetrieveChess)
}
CSRspRetrieveChess::CSRspRetrieveChess(const CSRspRetrieveChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspRetrieveChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcchesspos_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srcchesspos()) {
    _this->_impl_.srcchesspos_ = new ::msg::PositionInt2D(*from._impl_.srcchesspos_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagindex_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.bagindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspRetrieveChess)
}

inline void CSRspRetrieveChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcchesspos_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspRetrieveChess::~CSRspRetrieveChess() {
  // @@protoc_insertion_point(destructor:msg.CSRspRetrieveChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspRetrieveChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.srcchesspos_;
}

void CSRspRetrieveChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspRetrieveChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspRetrieveChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.srcchesspos_ != nullptr) {
    delete _impl_.srcchesspos_;
  }
  _impl_.srcchesspos_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagindex_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.bagindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspRetrieveChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D SrcChessPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcchesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspRetrieveChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspRetrieveChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  // .msg.PositionInt2D SrcChessPos = 3;
  if (this->_internal_has_srcchesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::srcchesspos(this),
        _Internal::srcchesspos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspRetrieveChess)
  return target;
}

size_t CSRspRetrieveChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspRetrieveChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcChessPos = 3;
  if (this->_internal_has_srcchesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcchesspos_);
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspRetrieveChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspRetrieveChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspRetrieveChess::GetClassData() const { return &_class_data_; }


void CSRspRetrieveChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspRetrieveChess*>(&to_msg);
  auto& from = static_cast<const CSRspRetrieveChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspRetrieveChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcchesspos()) {
    _this->_internal_mutable_srcchesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_srcchesspos());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspRetrieveChess::CopyFrom(const CSRspRetrieveChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspRetrieveChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspRetrieveChess::IsInitialized() const {
  return true;
}

void CSRspRetrieveChess::InternalSwap(CSRspRetrieveChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspRetrieveChess, _impl_.bagindex_)
      + sizeof(CSRspRetrieveChess::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CSRspRetrieveChess, _impl_.srcchesspos_)>(
          reinterpret_cast<char*>(&_impl_.srcchesspos_),
          reinterpret_cast<char*>(&other->_impl_.srcchesspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspRetrieveChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[54]);
}

// ===================================================================

class CSRspBuyChess::_Internal {
 public:
};

CSRspBuyChess::CSRspBuyChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspBuyChess)
}
CSRspBuyChess::CSRspBuyChess(const CSRspBuyChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspBuyChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){}
    , decltype(_impl_.shopindex_){}
    , decltype(_impl_.configid_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.istobag_){}
    , decltype(_impl_.isdrag_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bagindex_, &from._impl_.bagindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ty_) -
    reinterpret_cast<char*>(&_impl_.bagindex_)) + sizeof(_impl_.ty_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspBuyChess)
}

inline void CSRspBuyChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){0}
    , decltype(_impl_.shopindex_){0}
    , decltype(_impl_.configid_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.istobag_){false}
    , decltype(_impl_.isdrag_){false}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspBuyChess::~CSRspBuyChess() {
  // @@protoc_insertion_point(destructor:msg.CSRspBuyChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspBuyChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspBuyChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspBuyChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspBuyChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bagindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ty_) -
      reinterpret_cast<char*>(&_impl_.bagindex_)) + sizeof(_impl_.ty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspBuyChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ShopIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.shopindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ConfigId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.configid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsToBag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.istobag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsDrag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.isdrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspBuyChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspBuyChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  // int32 ShopIndex = 3;
  if (this->_internal_shopindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_shopindex(), target);
  }

  // int32 ConfigId = 4;
  if (this->_internal_configid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_configid(), target);
  }

  // bool IsToBag = 5;
  if (this->_internal_istobag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_istobag(), target);
  }

  // int32 Tx = 6;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tx(), target);
  }

  // int32 Ty = 7;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ty(), target);
  }

  // bool IsDrag = 8;
  if (this->_internal_isdrag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_isdrag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspBuyChess)
  return target;
}

size_t CSRspBuyChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspBuyChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 ShopIndex = 3;
  if (this->_internal_shopindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shopindex());
  }

  // int32 ConfigId = 4;
  if (this->_internal_configid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_configid());
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool IsToBag = 5;
  if (this->_internal_istobag() != 0) {
    total_size += 1 + 1;
  }

  // bool IsDrag = 8;
  if (this->_internal_isdrag() != 0) {
    total_size += 1 + 1;
  }

  // int32 Tx = 6;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // int32 Ty = 7;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspBuyChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspBuyChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspBuyChess::GetClassData() const { return &_class_data_; }


void CSRspBuyChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspBuyChess*>(&to_msg);
  auto& from = static_cast<const CSRspBuyChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspBuyChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_shopindex() != 0) {
    _this->_internal_set_shopindex(from._internal_shopindex());
  }
  if (from._internal_configid() != 0) {
    _this->_internal_set_configid(from._internal_configid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_istobag() != 0) {
    _this->_internal_set_istobag(from._internal_istobag());
  }
  if (from._internal_isdrag() != 0) {
    _this->_internal_set_isdrag(from._internal_isdrag());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspBuyChess::CopyFrom(const CSRspBuyChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspBuyChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspBuyChess::IsInitialized() const {
  return true;
}

void CSRspBuyChess::InternalSwap(CSRspBuyChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspBuyChess, _impl_.ty_)
      + sizeof(CSRspBuyChess::_impl_.ty_)
      - PROTOBUF_FIELD_OFFSET(CSRspBuyChess, _impl_.bagindex_)>(
          reinterpret_cast<char*>(&_impl_.bagindex_),
          reinterpret_cast<char*>(&other->_impl_.bagindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspBuyChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[55]);
}

// ===================================================================

class CSRspSellChessInBag::_Internal {
 public:
};

CSRspSellChessInBag::CSRspSellChessInBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspSellChessInBag)
}
CSRspSellChessInBag::CSRspSellChessInBag(const CSRspSellChessInBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspSellChessInBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.leftmoney_){}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagindex_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.bagindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspSellChessInBag)
}

inline void CSRspSellChessInBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.leftmoney_){0}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspSellChessInBag::~CSRspSellChessInBag() {
  // @@protoc_insertion_point(destructor:msg.CSRspSellChessInBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspSellChessInBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspSellChessInBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspSellChessInBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspSellChessInBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagindex_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.bagindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspSellChessInBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeftMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.leftmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspSellChessInBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspSellChessInBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 LeftMoney = 2;
  if (this->_internal_leftmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftmoney(), target);
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspSellChessInBag)
  return target;
}

size_t CSRspSellChessInBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspSellChessInBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 LeftMoney = 2;
  if (this->_internal_leftmoney() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leftmoney());
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspSellChessInBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspSellChessInBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspSellChessInBag::GetClassData() const { return &_class_data_; }


void CSRspSellChessInBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspSellChessInBag*>(&to_msg);
  auto& from = static_cast<const CSRspSellChessInBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspSellChessInBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_leftmoney() != 0) {
    _this->_internal_set_leftmoney(from._internal_leftmoney());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspSellChessInBag::CopyFrom(const CSRspSellChessInBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspSellChessInBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspSellChessInBag::IsInitialized() const {
  return true;
}

void CSRspSellChessInBag::InternalSwap(CSRspSellChessInBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspSellChessInBag, _impl_.bagindex_)
      + sizeof(CSRspSellChessInBag::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CSRspSellChessInBag, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspSellChessInBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[56]);
}

// ===================================================================

class CSRspSellChessOnBoard::_Internal {
 public:
  static const ::msg::PositionInt2D& chesspos(const CSRspSellChessOnBoard* msg);
};

const ::msg::PositionInt2D&
CSRspSellChessOnBoard::_Internal::chesspos(const CSRspSellChessOnBoard* msg) {
  return *msg->_impl_.chesspos_;
}
CSRspSellChessOnBoard::CSRspSellChessOnBoard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspSellChessOnBoard)
}
CSRspSellChessOnBoard::CSRspSellChessOnBoard(const CSRspSellChessOnBoard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspSellChessOnBoard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspos_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.leftmoney_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chesspos()) {
    _this->_impl_.chesspos_ = new ::msg::PositionInt2D(*from._impl_.chesspos_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leftmoney_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.leftmoney_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspSellChessOnBoard)
}

inline void CSRspSellChessOnBoard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspos_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.leftmoney_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspSellChessOnBoard::~CSRspSellChessOnBoard() {
  // @@protoc_insertion_point(destructor:msg.CSRspSellChessOnBoard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspSellChessOnBoard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chesspos_;
}

void CSRspSellChessOnBoard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspSellChessOnBoard::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspSellChessOnBoard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chesspos_ != nullptr) {
    delete _impl_.chesspos_;
  }
  _impl_.chesspos_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leftmoney_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.leftmoney_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspSellChessOnBoard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeftMoney = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.leftmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D ChessPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspSellChessOnBoard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspSellChessOnBoard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 LeftMoney = 2;
  if (this->_internal_leftmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftmoney(), target);
  }

  // .msg.PositionInt2D ChessPos = 3;
  if (this->_internal_has_chesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chesspos(this),
        _Internal::chesspos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspSellChessOnBoard)
  return target;
}

size_t CSRspSellChessOnBoard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspSellChessOnBoard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D ChessPos = 3;
  if (this->_internal_has_chesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesspos_);
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 LeftMoney = 2;
  if (this->_internal_leftmoney() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leftmoney());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspSellChessOnBoard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspSellChessOnBoard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspSellChessOnBoard::GetClassData() const { return &_class_data_; }


void CSRspSellChessOnBoard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspSellChessOnBoard*>(&to_msg);
  auto& from = static_cast<const CSRspSellChessOnBoard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspSellChessOnBoard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chesspos()) {
    _this->_internal_mutable_chesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_chesspos());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_leftmoney() != 0) {
    _this->_internal_set_leftmoney(from._internal_leftmoney());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspSellChessOnBoard::CopyFrom(const CSRspSellChessOnBoard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspSellChessOnBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspSellChessOnBoard::IsInitialized() const {
  return true;
}

void CSRspSellChessOnBoard::InternalSwap(CSRspSellChessOnBoard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspSellChessOnBoard, _impl_.leftmoney_)
      + sizeof(CSRspSellChessOnBoard::_impl_.leftmoney_)
      - PROTOBUF_FIELD_OFFSET(CSRspSellChessOnBoard, _impl_.chesspos_)>(
          reinterpret_cast<char*>(&_impl_.chesspos_),
          reinterpret_cast<char*>(&other->_impl_.chesspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspSellChessOnBoard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[57]);
}

// ===================================================================

class CSRspMoveChess::_Internal {
 public:
  static const ::msg::PositionInt2D& srcchesspos(const CSRspMoveChess* msg);
  static const ::msg::PositionInt2D& destchesspos(const CSRspMoveChess* msg);
};

const ::msg::PositionInt2D&
CSRspMoveChess::_Internal::srcchesspos(const CSRspMoveChess* msg) {
  return *msg->_impl_.srcchesspos_;
}
const ::msg::PositionInt2D&
CSRspMoveChess::_Internal::destchesspos(const CSRspMoveChess* msg) {
  return *msg->_impl_.destchesspos_;
}
CSRspMoveChess::CSRspMoveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspMoveChess)
}
CSRspMoveChess::CSRspMoveChess(const CSRspMoveChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspMoveChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcchesspos_){nullptr}
    , decltype(_impl_.destchesspos_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srcchesspos()) {
    _this->_impl_.srcchesspos_ = new ::msg::PositionInt2D(*from._impl_.srcchesspos_);
  }
  if (from._internal_has_destchesspos()) {
    _this->_impl_.destchesspos_ = new ::msg::PositionInt2D(*from._impl_.destchesspos_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspMoveChess)
}

inline void CSRspMoveChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcchesspos_){nullptr}
    , decltype(_impl_.destchesspos_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspMoveChess::~CSRspMoveChess() {
  // @@protoc_insertion_point(destructor:msg.CSRspMoveChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspMoveChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.srcchesspos_;
  if (this != internal_default_instance()) delete _impl_.destchesspos_;
}

void CSRspMoveChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspMoveChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspMoveChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.srcchesspos_ != nullptr) {
    delete _impl_.srcchesspos_;
  }
  _impl_.srcchesspos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destchesspos_ != nullptr) {
    delete _impl_.destchesspos_;
  }
  _impl_.destchesspos_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspMoveChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D SrcChessPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcchesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D DestChessPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_destchesspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspMoveChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspMoveChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .msg.PositionInt2D SrcChessPos = 2;
  if (this->_internal_has_srcchesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::srcchesspos(this),
        _Internal::srcchesspos(this).GetCachedSize(), target, stream);
  }

  // .msg.PositionInt2D DestChessPos = 3;
  if (this->_internal_has_destchesspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::destchesspos(this),
        _Internal::destchesspos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspMoveChess)
  return target;
}

size_t CSRspMoveChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspMoveChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcChessPos = 2;
  if (this->_internal_has_srcchesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcchesspos_);
  }

  // .msg.PositionInt2D DestChessPos = 3;
  if (this->_internal_has_destchesspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destchesspos_);
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspMoveChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspMoveChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspMoveChess::GetClassData() const { return &_class_data_; }


void CSRspMoveChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspMoveChess*>(&to_msg);
  auto& from = static_cast<const CSRspMoveChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspMoveChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcchesspos()) {
    _this->_internal_mutable_srcchesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_srcchesspos());
  }
  if (from._internal_has_destchesspos()) {
    _this->_internal_mutable_destchesspos()->::msg::PositionInt2D::MergeFrom(
        from._internal_destchesspos());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspMoveChess::CopyFrom(const CSRspMoveChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspMoveChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspMoveChess::IsInitialized() const {
  return true;
}

void CSRspMoveChess::InternalSwap(CSRspMoveChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspMoveChess, _impl_.success_)
      + sizeof(CSRspMoveChess::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(CSRspMoveChess, _impl_.srcchesspos_)>(
          reinterpret_cast<char*>(&_impl_.srcchesspos_),
          reinterpret_cast<char*>(&other->_impl_.srcchesspos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspMoveChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[58]);
}

// ===================================================================

class CSRspBuyExp::_Internal {
 public:
};

CSRspBuyExp::CSRspBuyExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspBuyExp)
}
CSRspBuyExp::CSRspBuyExp(const CSRspBuyExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspBuyExp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.addedexp_){}
    , decltype(_impl_.currentexp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currentexp_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.currentexp_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspBuyExp)
}

inline void CSRspBuyExp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.addedexp_){0}
    , decltype(_impl_.currentexp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspBuyExp::~CSRspBuyExp() {
  // @@protoc_insertion_point(destructor:msg.CSRspBuyExp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspBuyExp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspBuyExp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspBuyExp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspBuyExp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currentexp_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.currentexp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspBuyExp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AddedExp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.addedexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrentExp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.currentexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspBuyExp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspBuyExp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 AddedExp = 2;
  if (this->_internal_addedexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_addedexp(), target);
  }

  // int32 CurrentExp = 3;
  if (this->_internal_currentexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_currentexp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspBuyExp)
  return target;
}

size_t CSRspBuyExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspBuyExp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 AddedExp = 2;
  if (this->_internal_addedexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_addedexp());
  }

  // int32 CurrentExp = 3;
  if (this->_internal_currentexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentexp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspBuyExp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspBuyExp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspBuyExp::GetClassData() const { return &_class_data_; }


void CSRspBuyExp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspBuyExp*>(&to_msg);
  auto& from = static_cast<const CSRspBuyExp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspBuyExp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_addedexp() != 0) {
    _this->_internal_set_addedexp(from._internal_addedexp());
  }
  if (from._internal_currentexp() != 0) {
    _this->_internal_set_currentexp(from._internal_currentexp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspBuyExp::CopyFrom(const CSRspBuyExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspBuyExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspBuyExp::IsInitialized() const {
  return true;
}

void CSRspBuyExp::InternalSwap(CSRspBuyExp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspBuyExp, _impl_.currentexp_)
      + sizeof(CSRspBuyExp::_impl_.currentexp_)
      - PROTOBUF_FIELD_OFFSET(CSRspBuyExp, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspBuyExp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[59]);
}

// ===================================================================

class CSRspRefreshShop::_Internal {
 public:
};

CSRspRefreshShop::CSRspRefreshShop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspRefreshShop)
}
CSRspRefreshShop::CSRspRefreshShop(const CSRspRefreshShop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspRefreshShop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspRefreshShop)
}

inline void CSRspRefreshShop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspRefreshShop::~CSRspRefreshShop() {
  // @@protoc_insertion_point(destructor:msg.CSRspRefreshShop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspRefreshShop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspRefreshShop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspRefreshShop::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspRefreshShop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspRefreshShop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspRefreshShop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspRefreshShop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspRefreshShop)
  return target;
}

size_t CSRspRefreshShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspRefreshShop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspRefreshShop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspRefreshShop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspRefreshShop::GetClassData() const { return &_class_data_; }


void CSRspRefreshShop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspRefreshShop*>(&to_msg);
  auto& from = static_cast<const CSRspRefreshShop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspRefreshShop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspRefreshShop::CopyFrom(const CSRspRefreshShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspRefreshShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspRefreshShop::IsInitialized() const {
  return true;
}

void CSRspRefreshShop::InternalSwap(CSRspRefreshShop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspRefreshShop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[60]);
}

// ===================================================================

class CSRspMoveChessInBagToMap::_Internal {
 public:
  static const ::msg::PositionInt2D& destpos(const CSRspMoveChessInBagToMap* msg);
};

const ::msg::PositionInt2D&
CSRspMoveChessInBagToMap::_Internal::destpos(const CSRspMoveChessInBagToMap* msg) {
  return *msg->_impl_.destpos_;
}
CSRspMoveChessInBagToMap::CSRspMoveChessInBagToMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspMoveChessInBagToMap)
}
CSRspMoveChessInBagToMap::CSRspMoveChessInBagToMap(const CSRspMoveChessInBagToMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspMoveChessInBagToMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.bagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destpos()) {
    _this->_impl_.destpos_ = new ::msg::PositionInt2D(*from._impl_.destpos_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagidx_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.bagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspMoveChessInBagToMap)
}

inline void CSRspMoveChessInBagToMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.bagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspMoveChessInBagToMap::~CSRspMoveChessInBagToMap() {
  // @@protoc_insertion_point(destructor:msg.CSRspMoveChessInBagToMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspMoveChessInBagToMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.destpos_;
}

void CSRspMoveChessInBagToMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspMoveChessInBagToMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspMoveChessInBagToMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagidx_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.bagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspMoveChessInBagToMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D DestPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_destpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspMoveChessInBagToMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspMoveChessInBagToMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 BagIdx = 2;
  if (this->_internal_bagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagidx(), target);
  }

  // .msg.PositionInt2D DestPos = 3;
  if (this->_internal_has_destpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::destpos(this),
        _Internal::destpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspMoveChessInBagToMap)
  return target;
}

size_t CSRspMoveChessInBagToMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspMoveChessInBagToMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D DestPos = 3;
  if (this->_internal_has_destpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destpos_);
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 BagIdx = 2;
  if (this->_internal_bagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspMoveChessInBagToMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspMoveChessInBagToMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspMoveChessInBagToMap::GetClassData() const { return &_class_data_; }


void CSRspMoveChessInBagToMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspMoveChessInBagToMap*>(&to_msg);
  auto& from = static_cast<const CSRspMoveChessInBagToMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspMoveChessInBagToMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destpos()) {
    _this->_internal_mutable_destpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_destpos());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_bagidx() != 0) {
    _this->_internal_set_bagidx(from._internal_bagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspMoveChessInBagToMap::CopyFrom(const CSRspMoveChessInBagToMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspMoveChessInBagToMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspMoveChessInBagToMap::IsInitialized() const {
  return true;
}

void CSRspMoveChessInBagToMap::InternalSwap(CSRspMoveChessInBagToMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspMoveChessInBagToMap, _impl_.bagidx_)
      + sizeof(CSRspMoveChessInBagToMap::_impl_.bagidx_)
      - PROTOBUF_FIELD_OFFSET(CSRspMoveChessInBagToMap, _impl_.destpos_)>(
          reinterpret_cast<char*>(&_impl_.destpos_),
          reinterpret_cast<char*>(&other->_impl_.destpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspMoveChessInBagToMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[61]);
}

// ===================================================================

class CSRspMoveChessWithinBag::_Internal {
 public:
};

CSRspMoveChessWithinBag::CSRspMoveChessWithinBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspMoveChessWithinBag)
}
CSRspMoveChessWithinBag::CSRspMoveChessWithinBag(const CSRspMoveChessWithinBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspMoveChessWithinBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcbagidx_){}
    , decltype(_impl_.destbagidx_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcbagidx_, &from._impl_.srcbagidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.srcbagidx_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspMoveChessWithinBag)
}

inline void CSRspMoveChessWithinBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcbagidx_){0}
    , decltype(_impl_.destbagidx_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspMoveChessWithinBag::~CSRspMoveChessWithinBag() {
  // @@protoc_insertion_point(destructor:msg.CSRspMoveChessWithinBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspMoveChessWithinBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspMoveChessWithinBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspMoveChessWithinBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspMoveChessWithinBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.srcbagidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.srcbagidx_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspMoveChessWithinBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SrcBagIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestBagIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.destbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspMoveChessWithinBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspMoveChessWithinBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SrcBagIdx = 1;
  if (this->_internal_srcbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcbagidx(), target);
  }

  // int32 DestBagIdx = 2;
  if (this->_internal_destbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destbagidx(), target);
  }

  // bool Success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspMoveChessWithinBag)
  return target;
}

size_t CSRspMoveChessWithinBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspMoveChessWithinBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 SrcBagIdx = 1;
  if (this->_internal_srcbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcbagidx());
  }

  // int32 DestBagIdx = 2;
  if (this->_internal_destbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destbagidx());
  }

  // bool Success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspMoveChessWithinBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspMoveChessWithinBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspMoveChessWithinBag::GetClassData() const { return &_class_data_; }


void CSRspMoveChessWithinBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspMoveChessWithinBag*>(&to_msg);
  auto& from = static_cast<const CSRspMoveChessWithinBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspMoveChessWithinBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srcbagidx() != 0) {
    _this->_internal_set_srcbagidx(from._internal_srcbagidx());
  }
  if (from._internal_destbagidx() != 0) {
    _this->_internal_set_destbagidx(from._internal_destbagidx());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspMoveChessWithinBag::CopyFrom(const CSRspMoveChessWithinBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspMoveChessWithinBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspMoveChessWithinBag::IsInitialized() const {
  return true;
}

void CSRspMoveChessWithinBag::InternalSwap(CSRspMoveChessWithinBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspMoveChessWithinBag, _impl_.success_)
      + sizeof(CSRspMoveChessWithinBag::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(CSRspMoveChessWithinBag, _impl_.srcbagidx_)>(
          reinterpret_cast<char*>(&_impl_.srcbagidx_),
          reinterpret_cast<char*>(&other->_impl_.srcbagidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspMoveChessWithinBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[62]);
}

// ===================================================================

class CSRspPlayerLoaded::_Internal {
 public:
};

CSRspPlayerLoaded::CSRspPlayerLoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspPlayerLoaded)
}
CSRspPlayerLoaded::CSRspPlayerLoaded(const CSRspPlayerLoaded& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspPlayerLoaded* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspPlayerLoaded)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspPlayerLoaded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspPlayerLoaded::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspPlayerLoaded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[63]);
}

// ===================================================================

class CSRspPlayerRoundEnd::_Internal {
 public:
};

CSRspPlayerRoundEnd::CSRspPlayerRoundEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspPlayerRoundEnd)
}
CSRspPlayerRoundEnd::CSRspPlayerRoundEnd(const CSRspPlayerRoundEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspPlayerRoundEnd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspPlayerRoundEnd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspPlayerRoundEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspPlayerRoundEnd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspPlayerRoundEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[64]);
}

// ===================================================================

class CSRspPickupEquipment::_Internal {
 public:
};

CSRspPickupEquipment::CSRspPickupEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspPickupEquipment)
}
CSRspPickupEquipment::CSRspPickupEquipment(const CSRspPickupEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspPickupEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.bagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagidx_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.bagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspPickupEquipment)
}

inline void CSRspPickupEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.bagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspPickupEquipment::~CSRspPickupEquipment() {
  // @@protoc_insertion_point(destructor:msg.CSRspPickupEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspPickupEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspPickupEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspPickupEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspPickupEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagidx_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.bagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspPickupEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspPickupEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspPickupEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 BagIdx = 3;
  if (this->_internal_bagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspPickupEquipment)
  return target;
}

size_t CSRspPickupEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspPickupEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 BagIdx = 3;
  if (this->_internal_bagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspPickupEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspPickupEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspPickupEquipment::GetClassData() const { return &_class_data_; }


void CSRspPickupEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspPickupEquipment*>(&to_msg);
  auto& from = static_cast<const CSRspPickupEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspPickupEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_bagidx() != 0) {
    _this->_internal_set_bagidx(from._internal_bagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspPickupEquipment::CopyFrom(const CSRspPickupEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspPickupEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspPickupEquipment::IsInitialized() const {
  return true;
}

void CSRspPickupEquipment::InternalSwap(CSRspPickupEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspPickupEquipment, _impl_.bagidx_)
      + sizeof(CSRspPickupEquipment::_impl_.bagidx_)
      - PROTOBUF_FIELD_OFFSET(CSRspPickupEquipment, _impl_.netid_)>(
          reinterpret_cast<char*>(&_impl_.netid_),
          reinterpret_cast<char*>(&other->_impl_.netid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspPickupEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[65]);
}

// ===================================================================

class CSRspCraftEquip::_Internal {
 public:
  static const ::msg::EquipmentInfo& newequip(const CSRspCraftEquip* msg);
};

const ::msg::EquipmentInfo&
CSRspCraftEquip::_Internal::newequip(const CSRspCraftEquip* msg) {
  return *msg->_impl_.newequip_;
}
CSRspCraftEquip::CSRspCraftEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspCraftEquip)
}
CSRspCraftEquip::CSRspCraftEquip(const CSRspCraftEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspCraftEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.newequip_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.istochess_){}
    , decltype(_impl_.isonbattle_){}
    , decltype(_impl_.chessbagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_newequip()) {
    _this->_impl_.newequip_ = new ::msg::EquipmentInfo(*from._impl_.newequip_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chessbagidx_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.chessbagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspCraftEquip)
}

inline void CSRspCraftEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.newequip_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.istochess_){false}
    , decltype(_impl_.isonbattle_){false}
    , decltype(_impl_.chessbagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspCraftEquip::~CSRspCraftEquip() {
  // @@protoc_insertion_point(destructor:msg.CSRspCraftEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspCraftEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.newequip_;
}

void CSRspCraftEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspCraftEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspCraftEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.newequip_ != nullptr) {
    delete _impl_.newequip_;
  }
  _impl_.newequip_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chessbagidx_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.chessbagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspCraftEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsToChess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.istochess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Equips = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.EquipmentInfo NewEquip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_newequip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessBagIdx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.chessbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsOnBattle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isonbattle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspCraftEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspCraftEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bool IsToChess = 2;
  if (this->_internal_istochess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_istochess(), target);
  }

  // repeated int32 Equips = 3;
  {
    int byte_size = _impl_._equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_equips(), byte_size, target);
    }
  }

  // .msg.EquipmentInfo NewEquip = 4;
  if (this->_internal_has_newequip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::newequip(this),
        _Internal::newequip(this).GetCachedSize(), target, stream);
  }

  // int32 ChessBagIdx = 5;
  if (this->_internal_chessbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_chessbagidx(), target);
  }

  // bool IsOnBattle = 6;
  if (this->_internal_isonbattle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isonbattle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspCraftEquip)
  return target;
}

size_t CSRspCraftEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspCraftEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equips_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .msg.EquipmentInfo NewEquip = 4;
  if (this->_internal_has_newequip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.newequip_);
  }

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool IsToChess = 2;
  if (this->_internal_istochess() != 0) {
    total_size += 1 + 1;
  }

  // bool IsOnBattle = 6;
  if (this->_internal_isonbattle() != 0) {
    total_size += 1 + 1;
  }

  // int32 ChessBagIdx = 5;
  if (this->_internal_chessbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessbagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspCraftEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspCraftEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspCraftEquip::GetClassData() const { return &_class_data_; }


void CSRspCraftEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspCraftEquip*>(&to_msg);
  auto& from = static_cast<const CSRspCraftEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspCraftEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  if (from._internal_has_newequip()) {
    _this->_internal_mutable_newequip()->::msg::EquipmentInfo::MergeFrom(
        from._internal_newequip());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_istochess() != 0) {
    _this->_internal_set_istochess(from._internal_istochess());
  }
  if (from._internal_isonbattle() != 0) {
    _this->_internal_set_isonbattle(from._internal_isonbattle());
  }
  if (from._internal_chessbagidx() != 0) {
    _this->_internal_set_chessbagidx(from._internal_chessbagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspCraftEquip::CopyFrom(const CSRspCraftEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspCraftEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspCraftEquip::IsInitialized() const {
  return true;
}

void CSRspCraftEquip::InternalSwap(CSRspCraftEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspCraftEquip, _impl_.chessbagidx_)
      + sizeof(CSRspCraftEquip::_impl_.chessbagidx_)
      - PROTOBUF_FIELD_OFFSET(CSRspCraftEquip, _impl_.newequip_)>(
          reinterpret_cast<char*>(&_impl_.newequip_),
          reinterpret_cast<char*>(&other->_impl_.newequip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspCraftEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[66]);
}

// ===================================================================

class CSRspUseEquipment::_Internal {
 public:
  static const ::msg::PositionInt2D& pos(const CSRspUseEquipment* msg);
};

const ::msg::PositionInt2D&
CSRspUseEquipment::_Internal::pos(const CSRspUseEquipment* msg) {
  return *msg->_impl_.pos_;
}
CSRspUseEquipment::CSRspUseEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspUseEquipment)
}
CSRspUseEquipment::CSRspUseEquipment(const CSRspUseEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspUseEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.netid_){}
    , decltype(_impl_.chessbagindex_){}
    , decltype(_impl_.equipbagindex_){}
    , decltype(_impl_.ischessinbag_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.isonbattle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::msg::PositionInt2D(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isonbattle_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.isonbattle_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspUseEquipment)
}

inline void CSRspUseEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.netid_){0}
    , decltype(_impl_.chessbagindex_){0}
    , decltype(_impl_.equipbagindex_){0}
    , decltype(_impl_.ischessinbag_){false}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.isonbattle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspUseEquipment::~CSRspUseEquipment() {
  // @@protoc_insertion_point(destructor:msg.CSRspUseEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspUseEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void CSRspUseEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspUseEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspUseEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isonbattle_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.isonbattle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspUseEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsChessInBag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ischessinbag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessBagIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chessbagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipBagIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.equipbagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D Pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsOnBattle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isonbattle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspUseEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspUseEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // bool IsChessInBag = 2;
  if (this->_internal_ischessinbag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ischessinbag(), target);
  }

  // int32 ChessBagIndex = 3;
  if (this->_internal_chessbagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_chessbagindex(), target);
  }

  // int32 EquipBagIndex = 4;
  if (this->_internal_equipbagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_equipbagindex(), target);
  }

  // .msg.PositionInt2D Pos = 5;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // bool Success = 6;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_success(), target);
  }

  // bool IsOnBattle = 7;
  if (this->_internal_isonbattle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isonbattle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspUseEquipment)
  return target;
}

size_t CSRspUseEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspUseEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D Pos = 5;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // int32 ChessBagIndex = 3;
  if (this->_internal_chessbagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessbagindex());
  }

  // int32 EquipBagIndex = 4;
  if (this->_internal_equipbagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipbagindex());
  }

  // bool IsChessInBag = 2;
  if (this->_internal_ischessinbag() != 0) {
    total_size += 1 + 1;
  }

  // bool Success = 6;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool IsOnBattle = 7;
  if (this->_internal_isonbattle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspUseEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspUseEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspUseEquipment::GetClassData() const { return &_class_data_; }


void CSRspUseEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspUseEquipment*>(&to_msg);
  auto& from = static_cast<const CSRspUseEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspUseEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::msg::PositionInt2D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_chessbagindex() != 0) {
    _this->_internal_set_chessbagindex(from._internal_chessbagindex());
  }
  if (from._internal_equipbagindex() != 0) {
    _this->_internal_set_equipbagindex(from._internal_equipbagindex());
  }
  if (from._internal_ischessinbag() != 0) {
    _this->_internal_set_ischessinbag(from._internal_ischessinbag());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_isonbattle() != 0) {
    _this->_internal_set_isonbattle(from._internal_isonbattle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspUseEquipment::CopyFrom(const CSRspUseEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspUseEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspUseEquipment::IsInitialized() const {
  return true;
}

void CSRspUseEquipment::InternalSwap(CSRspUseEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspUseEquipment, _impl_.isonbattle_)
      + sizeof(CSRspUseEquipment::_impl_.isonbattle_)
      - PROTOBUF_FIELD_OFFSET(CSRspUseEquipment, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspUseEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[67]);
}

// ===================================================================

class CSRspUpdateAntiAddictionTime::_Internal {
 public:
};

CSRspUpdateAntiAddictionTime::CSRspUpdateAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspUpdateAntiAddictionTime)
}
CSRspUpdateAntiAddictionTime::CSRspUpdateAntiAddictionTime(const CSRspUpdateAntiAddictionTime& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspUpdateAntiAddictionTime* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspUpdateAntiAddictionTime)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspUpdateAntiAddictionTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspUpdateAntiAddictionTime::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspUpdateAntiAddictionTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[68]);
}

// ===================================================================

class CSRspCancelReconnect::_Internal {
 public:
};

CSRspCancelReconnect::CSRspCancelReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspCancelReconnect)
}
CSRspCancelReconnect::CSRspCancelReconnect(const CSRspCancelReconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspCancelReconnect* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspCancelReconnect)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspCancelReconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspCancelReconnect::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspCancelReconnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[69]);
}

// ===================================================================

class CSRspSetAutoUpgradeCharacter::_Internal {
 public:
};

CSRspSetAutoUpgradeCharacter::CSRspSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspSetAutoUpgradeCharacter)
}
CSRspSetAutoUpgradeCharacter::CSRspSetAutoUpgradeCharacter(const CSRspSetAutoUpgradeCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspSetAutoUpgradeCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.switchon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.switchon_ = from._impl_.switchon_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspSetAutoUpgradeCharacter)
}

inline void CSRspSetAutoUpgradeCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.switchon_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspSetAutoUpgradeCharacter::~CSRspSetAutoUpgradeCharacter() {
  // @@protoc_insertion_point(destructor:msg.CSRspSetAutoUpgradeCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspSetAutoUpgradeCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspSetAutoUpgradeCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspSetAutoUpgradeCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspSetAutoUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.switchon_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspSetAutoUpgradeCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool SwitchOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.switchon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspSetAutoUpgradeCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspSetAutoUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool SwitchOn = 1;
  if (this->_internal_switchon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_switchon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspSetAutoUpgradeCharacter)
  return target;
}

size_t CSRspSetAutoUpgradeCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspSetAutoUpgradeCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool SwitchOn = 1;
  if (this->_internal_switchon() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspSetAutoUpgradeCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspSetAutoUpgradeCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspSetAutoUpgradeCharacter::GetClassData() const { return &_class_data_; }


void CSRspSetAutoUpgradeCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspSetAutoUpgradeCharacter*>(&to_msg);
  auto& from = static_cast<const CSRspSetAutoUpgradeCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspSetAutoUpgradeCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switchon() != 0) {
    _this->_internal_set_switchon(from._internal_switchon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspSetAutoUpgradeCharacter::CopyFrom(const CSRspSetAutoUpgradeCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspSetAutoUpgradeCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspSetAutoUpgradeCharacter::IsInitialized() const {
  return true;
}

void CSRspSetAutoUpgradeCharacter::InternalSwap(CSRspSetAutoUpgradeCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.switchon_, other->_impl_.switchon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspSetAutoUpgradeCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[70]);
}

// ===================================================================

class CSRspReconnect::_Internal {
 public:
};

CSRspReconnect::CSRspReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspReconnect)
}
CSRspReconnect::CSRspReconnect(const CSRspReconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspReconnect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isvalid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isvalid_ = from._impl_.isvalid_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspReconnect)
}

inline void CSRspReconnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isvalid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspReconnect::~CSRspReconnect() {
  // @@protoc_insertion_point(destructor:msg.CSRspReconnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspReconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspReconnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspReconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspReconnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isvalid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspReconnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsValid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspReconnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspReconnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsValid = 1;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspReconnect)
  return target;
}

size_t CSRspReconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspReconnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsValid = 1;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspReconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspReconnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspReconnect::GetClassData() const { return &_class_data_; }


void CSRspReconnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspReconnect*>(&to_msg);
  auto& from = static_cast<const CSRspReconnect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspReconnect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isvalid() != 0) {
    _this->_internal_set_isvalid(from._internal_isvalid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspReconnect::CopyFrom(const CSRspReconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspReconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspReconnect::IsInitialized() const {
  return true;
}

void CSRspReconnect::InternalSwap(CSRspReconnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.isvalid_, other->_impl_.isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspReconnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[71]);
}

// ===================================================================

class CSRspUpdateRank::_Internal {
 public:
};

CSRspUpdateRank::CSRspUpdateRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspUpdateRank)
}
CSRspUpdateRank::CSRspUpdateRank(const CSRspUpdateRank& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspUpdateRank* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspUpdateRank)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspUpdateRank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspUpdateRank::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspUpdateRank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[72]);
}

// ===================================================================

class CSRspManuallyUpgradeCharacter::_Internal {
 public:
};

CSRspManuallyUpgradeCharacter::CSRspManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspManuallyUpgradeCharacter)
}
CSRspManuallyUpgradeCharacter::CSRspManuallyUpgradeCharacter(const CSRspManuallyUpgradeCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspManuallyUpgradeCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.isinbag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bagindex_, &from._impl_.bagindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isinbag_) -
    reinterpret_cast<char*>(&_impl_.bagindex_)) + sizeof(_impl_.isinbag_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspManuallyUpgradeCharacter)
}

inline void CSRspManuallyUpgradeCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bagindex_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.isinbag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspManuallyUpgradeCharacter::~CSRspManuallyUpgradeCharacter() {
  // @@protoc_insertion_point(destructor:msg.CSRspManuallyUpgradeCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspManuallyUpgradeCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspManuallyUpgradeCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspManuallyUpgradeCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspManuallyUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bagindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isinbag_) -
      reinterpret_cast<char*>(&_impl_.bagindex_)) + sizeof(_impl_.isinbag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspManuallyUpgradeCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 BagIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsInBag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isinbag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspManuallyUpgradeCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspManuallyUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BagIndex = 1;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bagindex(), target);
  }

  // int32 Tx = 2;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tx(), target);
  }

  // int32 Ty = 3;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ty(), target);
  }

  // bool Success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // bool IsInBag = 5;
  if (this->_internal_isinbag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isinbag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspManuallyUpgradeCharacter)
  return target;
}

size_t CSRspManuallyUpgradeCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspManuallyUpgradeCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 BagIndex = 1;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 Tx = 2;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // int32 Ty = 3;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  // bool Success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool IsInBag = 5;
  if (this->_internal_isinbag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspManuallyUpgradeCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspManuallyUpgradeCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspManuallyUpgradeCharacter::GetClassData() const { return &_class_data_; }


void CSRspManuallyUpgradeCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspManuallyUpgradeCharacter*>(&to_msg);
  auto& from = static_cast<const CSRspManuallyUpgradeCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspManuallyUpgradeCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_isinbag() != 0) {
    _this->_internal_set_isinbag(from._internal_isinbag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspManuallyUpgradeCharacter::CopyFrom(const CSRspManuallyUpgradeCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspManuallyUpgradeCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspManuallyUpgradeCharacter::IsInitialized() const {
  return true;
}

void CSRspManuallyUpgradeCharacter::InternalSwap(CSRspManuallyUpgradeCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspManuallyUpgradeCharacter, _impl_.isinbag_)
      + sizeof(CSRspManuallyUpgradeCharacter::_impl_.isinbag_)
      - PROTOBUF_FIELD_OFFSET(CSRspManuallyUpgradeCharacter, _impl_.bagindex_)>(
          reinterpret_cast<char*>(&_impl_.bagindex_),
          reinterpret_cast<char*>(&other->_impl_.bagindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspManuallyUpgradeCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[73]);
}

// ===================================================================

class CSRspQuitBattle::_Internal {
 public:
};

CSRspQuitBattle::CSRspQuitBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspQuitBattle)
}
CSRspQuitBattle::CSRspQuitBattle(const CSRspQuitBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspQuitBattle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspQuitBattle)
}

inline void CSRspQuitBattle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspQuitBattle::~CSRspQuitBattle() {
  // @@protoc_insertion_point(destructor:msg.CSRspQuitBattle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspQuitBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspQuitBattle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspQuitBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspQuitBattle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspQuitBattle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspQuitBattle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspQuitBattle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspQuitBattle)
  return target;
}

size_t CSRspQuitBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspQuitBattle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspQuitBattle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspQuitBattle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspQuitBattle::GetClassData() const { return &_class_data_; }


void CSRspQuitBattle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspQuitBattle*>(&to_msg);
  auto& from = static_cast<const CSRspQuitBattle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspQuitBattle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspQuitBattle::CopyFrom(const CSRspQuitBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspQuitBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspQuitBattle::IsInitialized() const {
  return true;
}

void CSRspQuitBattle::InternalSwap(CSRspQuitBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspQuitBattle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[74]);
}

// ===================================================================

class CSRspSusPendGame::_Internal {
 public:
};

CSRspSusPendGame::CSRspSusPendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspSusPendGame)
}
CSRspSusPendGame::CSRspSusPendGame(const CSRspSusPendGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspSusPendGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.suspend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.suspend_ = from._impl_.suspend_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspSusPendGame)
}

inline void CSRspSusPendGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.suspend_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspSusPendGame::~CSRspSusPendGame() {
  // @@protoc_insertion_point(destructor:msg.CSRspSusPendGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspSusPendGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspSusPendGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspSusPendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspSusPendGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.suspend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspSusPendGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool susPend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.suspend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspSusPendGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspSusPendGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool susPend = 1;
  if (this->_internal_suspend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_suspend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspSusPendGame)
  return target;
}

size_t CSRspSusPendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspSusPendGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool susPend = 1;
  if (this->_internal_suspend() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspSusPendGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspSusPendGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspSusPendGame::GetClassData() const { return &_class_data_; }


void CSRspSusPendGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspSusPendGame*>(&to_msg);
  auto& from = static_cast<const CSRspSusPendGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspSusPendGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_suspend() != 0) {
    _this->_internal_set_suspend(from._internal_suspend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspSusPendGame::CopyFrom(const CSRspSusPendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspSusPendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspSusPendGame::IsInitialized() const {
  return true;
}

void CSRspSusPendGame::InternalSwap(CSRspSusPendGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.suspend_, other->_impl_.suspend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspSusPendGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[75]);
}

// ===================================================================

class CSRspChessDB::_Internal {
 public:
};

CSRspChessDB::CSRspChessDB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspChessDB)
}
CSRspChessDB::CSRspChessDB(const CSRspChessDB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspChessDB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspiecesmaplev_){from._impl_.chesspiecesmaplev_}
    , decltype(_impl_.playerchess_){from._impl_.playerchess_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspChessDB)
}

inline void CSRspChessDB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesspiecesmaplev_){arena}
    , decltype(_impl_.playerchess_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspChessDB::~CSRspChessDB() {
  // @@protoc_insertion_point(destructor:msg.CSRspChessDB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspChessDB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chesspiecesmaplev_.~RepeatedPtrField();
  _impl_.playerchess_.~RepeatedPtrField();
}

void CSRspChessDB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspChessDB::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspChessDB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chesspiecesmaplev_.Clear();
  _impl_.playerchess_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspChessDB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.ChessPiecesMapLevData chessPiecesMapLev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chesspiecesmaplev(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PlayerChessNumber playerChess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerchess(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspChessDB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspChessDB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.ChessPiecesMapLevData chessPiecesMapLev = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chesspiecesmaplev_size()); i < n; i++) {
    const auto& repfield = this->_internal_chesspiecesmaplev(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.PlayerChessNumber playerChess = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerchess_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerchess(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspChessDB)
  return target;
}

size_t CSRspChessDB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspChessDB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ChessPiecesMapLevData chessPiecesMapLev = 1;
  total_size += 1UL * this->_internal_chesspiecesmaplev_size();
  for (const auto& msg : this->_impl_.chesspiecesmaplev_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.PlayerChessNumber playerChess = 2;
  total_size += 1UL * this->_internal_playerchess_size();
  for (const auto& msg : this->_impl_.playerchess_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspChessDB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspChessDB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspChessDB::GetClassData() const { return &_class_data_; }


void CSRspChessDB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspChessDB*>(&to_msg);
  auto& from = static_cast<const CSRspChessDB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspChessDB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chesspiecesmaplev_.MergeFrom(from._impl_.chesspiecesmaplev_);
  _this->_impl_.playerchess_.MergeFrom(from._impl_.playerchess_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspChessDB::CopyFrom(const CSRspChessDB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspChessDB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspChessDB::IsInitialized() const {
  return true;
}

void CSRspChessDB::InternalSwap(CSRspChessDB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chesspiecesmaplev_.InternalSwap(&other->_impl_.chesspiecesmaplev_);
  _impl_.playerchess_.InternalSwap(&other->_impl_.playerchess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspChessDB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[76]);
}

// ===================================================================

class CSRspStatisticsInfo::_Internal {
 public:
};

CSRspStatisticsInfo::CSRspStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspStatisticsInfo)
}
CSRspStatisticsInfo::CSRspStatisticsInfo(const CSRspStatisticsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspStatisticsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerstatistics_){from._impl_.playerstatistics_}
    , decltype(_impl_.initmoney_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.initmoney_ = from._impl_.initmoney_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspStatisticsInfo)
}

inline void CSRspStatisticsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerstatistics_){arena}
    , decltype(_impl_.initmoney_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspStatisticsInfo::~CSRspStatisticsInfo() {
  // @@protoc_insertion_point(destructor:msg.CSRspStatisticsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspStatisticsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerstatistics_.~RepeatedPtrField();
}

void CSRspStatisticsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspStatisticsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspStatisticsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerstatistics_.Clear();
  _impl_.initmoney_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspStatisticsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 initMoney = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.initmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PlayerStatisticsInfo playerStatistics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerstatistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspStatisticsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspStatisticsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 initMoney = 1;
  if (this->_internal_initmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_initmoney(), target);
  }

  // repeated .msg.PlayerStatisticsInfo playerStatistics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerstatistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerstatistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspStatisticsInfo)
  return target;
}

size_t CSRspStatisticsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspStatisticsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PlayerStatisticsInfo playerStatistics = 2;
  total_size += 1UL * this->_internal_playerstatistics_size();
  for (const auto& msg : this->_impl_.playerstatistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 initMoney = 1;
  if (this->_internal_initmoney() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_initmoney());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspStatisticsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspStatisticsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspStatisticsInfo::GetClassData() const { return &_class_data_; }


void CSRspStatisticsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspStatisticsInfo*>(&to_msg);
  auto& from = static_cast<const CSRspStatisticsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspStatisticsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerstatistics_.MergeFrom(from._impl_.playerstatistics_);
  if (from._internal_initmoney() != 0) {
    _this->_internal_set_initmoney(from._internal_initmoney());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspStatisticsInfo::CopyFrom(const CSRspStatisticsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspStatisticsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspStatisticsInfo::IsInitialized() const {
  return true;
}

void CSRspStatisticsInfo::InternalSwap(CSRspStatisticsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playerstatistics_.InternalSwap(&other->_impl_.playerstatistics_);
  swap(_impl_.initmoney_, other->_impl_.initmoney_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspStatisticsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[77]);
}

// ===================================================================

class CSRspPassThrough::_Internal {
 public:
};

CSRspPassThrough::CSRspPassThrough(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspPassThrough)
}
CSRspPassThrough::CSRspPassThrough(const CSRspPassThrough& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspPassThrough* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspPassThrough)
}

inline void CSRspPassThrough::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspPassThrough::~CSRspPassThrough() {
  // @@protoc_insertion_point(destructor:msg.CSRspPassThrough)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspPassThrough::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void CSRspPassThrough::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspPassThrough::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspPassThrough)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspPassThrough::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspPassThrough::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspPassThrough)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspPassThrough)
  return target;
}

size_t CSRspPassThrough::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspPassThrough)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_.size());
  for (int i = 0, n = _impl_.data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.data_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspPassThrough::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspPassThrough::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspPassThrough::GetClassData() const { return &_class_data_; }


void CSRspPassThrough::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspPassThrough*>(&to_msg);
  auto& from = static_cast<const CSRspPassThrough&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspPassThrough)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspPassThrough::CopyFrom(const CSRspPassThrough& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspPassThrough)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspPassThrough::IsInitialized() const {
  return true;
}

void CSRspPassThrough::InternalSwap(CSRspPassThrough* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspPassThrough::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[78]);
}

// ===================================================================

class CSRspUpdateBattleResult::_Internal {
 public:
};

CSRspUpdateBattleResult::CSRspUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspUpdateBattleResult)
}
CSRspUpdateBattleResult::CSRspUpdateBattleResult(const CSRspUpdateBattleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspUpdateBattleResult* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspUpdateBattleResult)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspUpdateBattleResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspUpdateBattleResult::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspUpdateBattleResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[79]);
}

// ===================================================================

class CSRspVisitPlayer::_Internal {
 public:
};

CSRspVisitPlayer::CSRspVisitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspVisitPlayer)
}
CSRspVisitPlayer::CSRspVisitPlayer(const CSRspVisitPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspVisitPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcplayerindex_){}
    , decltype(_impl_.destplayerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcplayerindex_, &from._impl_.srcplayerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destplayerindex_) -
    reinterpret_cast<char*>(&_impl_.srcplayerindex_)) + sizeof(_impl_.destplayerindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSRspVisitPlayer)
}

inline void CSRspVisitPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcplayerindex_){0}
    , decltype(_impl_.destplayerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspVisitPlayer::~CSRspVisitPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSRspVisitPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspVisitPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSRspVisitPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspVisitPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspVisitPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.srcplayerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destplayerindex_) -
      reinterpret_cast<char*>(&_impl_.srcplayerindex_)) + sizeof(_impl_.destplayerindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspVisitPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SrcPlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestPlayerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.destplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspVisitPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspVisitPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcplayerindex(), target);
  }

  // int32 DestPlayerIndex = 2;
  if (this->_internal_destplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destplayerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspVisitPlayer)
  return target;
}

size_t CSRspVisitPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspVisitPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcplayerindex());
  }

  // int32 DestPlayerIndex = 2;
  if (this->_internal_destplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destplayerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspVisitPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspVisitPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspVisitPlayer::GetClassData() const { return &_class_data_; }


void CSRspVisitPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspVisitPlayer*>(&to_msg);
  auto& from = static_cast<const CSRspVisitPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspVisitPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srcplayerindex() != 0) {
    _this->_internal_set_srcplayerindex(from._internal_srcplayerindex());
  }
  if (from._internal_destplayerindex() != 0) {
    _this->_internal_set_destplayerindex(from._internal_destplayerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspVisitPlayer::CopyFrom(const CSRspVisitPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspVisitPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspVisitPlayer::IsInitialized() const {
  return true;
}

void CSRspVisitPlayer::InternalSwap(CSRspVisitPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSRspVisitPlayer, _impl_.destplayerindex_)
      + sizeof(CSRspVisitPlayer::_impl_.destplayerindex_)
      - PROTOBUF_FIELD_OFFSET(CSRspVisitPlayer, _impl_.srcplayerindex_)>(
          reinterpret_cast<char*>(&_impl_.srcplayerindex_),
          reinterpret_cast<char*>(&other->_impl_.srcplayerindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspVisitPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[80]);
}

// ===================================================================

class CSRspLeaveGameEarly::_Internal {
 public:
};

CSRspLeaveGameEarly::CSRspLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspLeaveGameEarly)
}
CSRspLeaveGameEarly::CSRspLeaveGameEarly(const CSRspLeaveGameEarly& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspLeaveGameEarly* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspLeaveGameEarly)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspLeaveGameEarly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspLeaveGameEarly::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspLeaveGameEarly::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[81]);
}

// ===================================================================

class CSRspReportAbsent::_Internal {
 public:
};

CSRspReportAbsent::CSRspReportAbsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspReportAbsent)
}
CSRspReportAbsent::CSRspReportAbsent(const CSRspReportAbsent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspReportAbsent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspReportAbsent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspReportAbsent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspReportAbsent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspReportAbsent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[82]);
}

// ===================================================================

class CSNtfPvpChangeStage::_Internal {
 public:
};

CSNtfPvpChangeStage::CSNtfPvpChangeStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpChangeStage)
}
CSNtfPvpChangeStage::CSNtfPvpChangeStage(const CSNtfPvpChangeStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpChangeStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.correction_){from._impl_.correction_}
    , decltype(_impl_.roundcnt_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roundcnt_, &from._impl_.roundcnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stage_) -
    reinterpret_cast<char*>(&_impl_.roundcnt_)) + sizeof(_impl_.stage_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpChangeStage)
}

inline void CSNtfPvpChangeStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.correction_){arena}
    , decltype(_impl_.roundcnt_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.stage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpChangeStage::~CSNtfPvpChangeStage() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpChangeStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpChangeStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.correction_.~RepeatedPtrField();
}

void CSNtfPvpChangeStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpChangeStage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpChangeStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.correction_.Clear();
  ::memset(&_impl_.roundcnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stage_) -
      reinterpret_cast<char*>(&_impl_.roundcnt_)) + sizeof(_impl_.stage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpChangeStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 RoundCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roundcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.GameStage Stage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::msg::GameStage>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CorrectFormation Correction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_correction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpChangeStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpChangeStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RoundCnt = 1;
  if (this->_internal_roundcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roundcnt(), target);
  }

  // int32 Duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  // .msg.GameStage Stage = 3;
  if (this->_internal_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_stage(), target);
  }

  // repeated .msg.CorrectFormation Correction = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_correction_size()); i < n; i++) {
    const auto& repfield = this->_internal_correction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpChangeStage)
  return target;
}

size_t CSNtfPvpChangeStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpChangeStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CorrectFormation Correction = 4;
  total_size += 1UL * this->_internal_correction_size();
  for (const auto& msg : this->_impl_.correction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 RoundCnt = 1;
  if (this->_internal_roundcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roundcnt());
  }

  // int32 Duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  // .msg.GameStage Stage = 3;
  if (this->_internal_stage() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpChangeStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpChangeStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpChangeStage::GetClassData() const { return &_class_data_; }


void CSNtfPvpChangeStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpChangeStage*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpChangeStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpChangeStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.correction_.MergeFrom(from._impl_.correction_);
  if (from._internal_roundcnt() != 0) {
    _this->_internal_set_roundcnt(from._internal_roundcnt());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_stage() != 0) {
    _this->_internal_set_stage(from._internal_stage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpChangeStage::CopyFrom(const CSNtfPvpChangeStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpChangeStage::IsInitialized() const {
  return true;
}

void CSNtfPvpChangeStage::InternalSwap(CSNtfPvpChangeStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.correction_.InternalSwap(&other->_impl_.correction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPvpChangeStage, _impl_.stage_)
      + sizeof(CSNtfPvpChangeStage::_impl_.stage_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPvpChangeStage, _impl_.roundcnt_)>(
          reinterpret_cast<char*>(&_impl_.roundcnt_),
          reinterpret_cast<char*>(&other->_impl_.roundcnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpChangeStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[83]);
}

// ===================================================================

class CSNtfPvpUpdateMoney::_Internal {
 public:
};

CSNtfPvpUpdateMoney::CSNtfPvpUpdateMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpUpdateMoney)
}
CSNtfPvpUpdateMoney::CSNtfPvpUpdateMoney(const CSNtfPvpUpdateMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpUpdateMoney* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.srctag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.money_, &from._impl_.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.srctag_) -
    reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.srctag_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpUpdateMoney)
}

inline void CSNtfPvpUpdateMoney::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){0}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.srctag_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpUpdateMoney::~CSNtfPvpUpdateMoney() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpUpdateMoney)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpUpdateMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfPvpUpdateMoney::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpUpdateMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpUpdateMoney)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.srctag_) -
      reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.srctag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpUpdateMoney::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Money = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SrcTag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.srctag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpUpdateMoney::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpUpdateMoney)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Money = 1;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_money(), target);
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playeridx(), target);
  }

  // int32 SrcTag = 3;
  if (this->_internal_srctag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_srctag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpUpdateMoney)
  return target;
}

size_t CSNtfPvpUpdateMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpUpdateMoney)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Money = 1;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_money());
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 SrcTag = 3;
  if (this->_internal_srctag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srctag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpUpdateMoney::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpUpdateMoney::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpUpdateMoney::GetClassData() const { return &_class_data_; }


void CSNtfPvpUpdateMoney::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpUpdateMoney*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpUpdateMoney&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpUpdateMoney)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_srctag() != 0) {
    _this->_internal_set_srctag(from._internal_srctag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpUpdateMoney::CopyFrom(const CSNtfPvpUpdateMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpUpdateMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpUpdateMoney::IsInitialized() const {
  return true;
}

void CSNtfPvpUpdateMoney::InternalSwap(CSNtfPvpUpdateMoney* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPvpUpdateMoney, _impl_.srctag_)
      + sizeof(CSNtfPvpUpdateMoney::_impl_.srctag_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPvpUpdateMoney, _impl_.money_)>(
          reinterpret_cast<char*>(&_impl_.money_),
          reinterpret_cast<char*>(&other->_impl_.money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpUpdateMoney::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[84]);
}

// ===================================================================

class CSNtfPvpUpdateMessengerPos::_Internal {
 public:
  static const ::msg::PositionFloat2D& pos(const CSNtfPvpUpdateMessengerPos* msg);
};

const ::msg::PositionFloat2D&
CSNtfPvpUpdateMessengerPos::_Internal::pos(const CSNtfPvpUpdateMessengerPos* msg) {
  return *msg->_impl_.pos_;
}
CSNtfPvpUpdateMessengerPos::CSNtfPvpUpdateMessengerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpUpdateMessengerPos)
}
CSNtfPvpUpdateMessengerPos::CSNtfPvpUpdateMessengerPos(const CSNtfPvpUpdateMessengerPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpUpdateMessengerPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.playerindex_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::msg::PositionFloat2D(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.playerindex_, &from._impl_.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.playerindex_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpUpdateMessengerPos)
}

inline void CSNtfPvpUpdateMessengerPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.playerindex_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpUpdateMessengerPos::~CSNtfPvpUpdateMessengerPos() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpUpdateMessengerPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpUpdateMessengerPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void CSNtfPvpUpdateMessengerPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpUpdateMessengerPos::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpUpdateMessengerPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.playerindex_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpUpdateMessengerPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionFloat2D Pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.MessengerMoveType Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::MessengerMoveType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpUpdateMessengerPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpUpdateMessengerPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerindex(), target);
  }

  // .msg.PositionFloat2D Pos = 2;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .msg.MessengerMoveType Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpUpdateMessengerPos)
  return target;
}

size_t CSNtfPvpUpdateMessengerPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpUpdateMessengerPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionFloat2D Pos = 2;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerindex());
  }

  // .msg.MessengerMoveType Type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpUpdateMessengerPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpUpdateMessengerPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpUpdateMessengerPos::GetClassData() const { return &_class_data_; }


void CSNtfPvpUpdateMessengerPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpUpdateMessengerPos*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpUpdateMessengerPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpUpdateMessengerPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::msg::PositionFloat2D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpUpdateMessengerPos::CopyFrom(const CSNtfPvpUpdateMessengerPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpUpdateMessengerPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpUpdateMessengerPos::IsInitialized() const {
  return true;
}

void CSNtfPvpUpdateMessengerPos::InternalSwap(CSNtfPvpUpdateMessengerPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPvpUpdateMessengerPos, _impl_.type_)
      + sizeof(CSNtfPvpUpdateMessengerPos::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPvpUpdateMessengerPos, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpUpdateMessengerPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[85]);
}

// ===================================================================

class CSNtfPvpPlayerLoggedIn::_Internal {
 public:
  static const ::msg::PlayerBasicInfo& playerinfo(const CSNtfPvpPlayerLoggedIn* msg);
};

const ::msg::PlayerBasicInfo&
CSNtfPvpPlayerLoggedIn::_Internal::playerinfo(const CSNtfPvpPlayerLoggedIn* msg) {
  return *msg->_impl_.playerinfo_;
}
CSNtfPvpPlayerLoggedIn::CSNtfPvpPlayerLoggedIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpPlayerLoggedIn)
}
CSNtfPvpPlayerLoggedIn::CSNtfPvpPlayerLoggedIn(const CSNtfPvpPlayerLoggedIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpPlayerLoggedIn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::msg::PlayerBasicInfo(*from._impl_.playerinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpPlayerLoggedIn)
}

inline void CSNtfPvpPlayerLoggedIn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpPlayerLoggedIn::~CSNtfPvpPlayerLoggedIn() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpPlayerLoggedIn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpPlayerLoggedIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void CSNtfPvpPlayerLoggedIn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpPlayerLoggedIn::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpPlayerLoggedIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpPlayerLoggedIn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PlayerBasicInfo PlayerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpPlayerLoggedIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpPlayerLoggedIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PlayerBasicInfo PlayerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpPlayerLoggedIn)
  return target;
}

size_t CSNtfPvpPlayerLoggedIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpPlayerLoggedIn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PlayerBasicInfo PlayerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpPlayerLoggedIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpPlayerLoggedIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpPlayerLoggedIn::GetClassData() const { return &_class_data_; }


void CSNtfPvpPlayerLoggedIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpPlayerLoggedIn*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpPlayerLoggedIn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpPlayerLoggedIn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::msg::PlayerBasicInfo::MergeFrom(
        from._internal_playerinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpPlayerLoggedIn::CopyFrom(const CSNtfPvpPlayerLoggedIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpPlayerLoggedIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpPlayerLoggedIn::IsInitialized() const {
  return true;
}

void CSNtfPvpPlayerLoggedIn::InternalSwap(CSNtfPvpPlayerLoggedIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerinfo_, other->_impl_.playerinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpPlayerLoggedIn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[86]);
}

// ===================================================================

class CSNtfPvpSetReadyState::_Internal {
 public:
};

CSNtfPvpSetReadyState::CSNtfPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpSetReadyState)
}
CSNtfPvpSetReadyState::CSNtfPvpSetReadyState(const CSNtfPvpSetReadyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpSetReadyState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpSetReadyState)
}

inline void CSNtfPvpSetReadyState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.state_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpSetReadyState::~CSNtfPvpSetReadyState() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpSetReadyState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpSetReadyState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfPvpSetReadyState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpSetReadyState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpSetReadyState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpSetReadyState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpSetReadyState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpSetReadyState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // bool State = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpSetReadyState)
  return target;
}

size_t CSNtfPvpSetReadyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpSetReadyState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // bool State = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpSetReadyState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpSetReadyState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpSetReadyState::GetClassData() const { return &_class_data_; }


void CSNtfPvpSetReadyState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpSetReadyState*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpSetReadyState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpSetReadyState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpSetReadyState::CopyFrom(const CSNtfPvpSetReadyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpSetReadyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpSetReadyState::IsInitialized() const {
  return true;
}

void CSNtfPvpSetReadyState::InternalSwap(CSNtfPvpSetReadyState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPvpSetReadyState, _impl_.state_)
      + sizeof(CSNtfPvpSetReadyState::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPvpSetReadyState, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpSetReadyState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[87]);
}

// ===================================================================

class CSNtfPvpPlayerAllReady::_Internal {
 public:
};

CSNtfPvpPlayerAllReady::CSNtfPvpPlayerAllReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpPlayerAllReady)
}
CSNtfPvpPlayerAllReady::CSNtfPvpPlayerAllReady(const CSNtfPvpPlayerAllReady& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSNtfPvpPlayerAllReady* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpPlayerAllReady)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpPlayerAllReady::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpPlayerAllReady::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpPlayerAllReady::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[88]);
}

// ===================================================================

class CSNtfPvpPlayerDead::_Internal {
 public:
};

CSNtfPvpPlayerDead::CSNtfPvpPlayerDead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpPlayerDead)
}
CSNtfPvpPlayerDead::CSNtfPvpPlayerDead(const CSNtfPvpPlayerDead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpPlayerDead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playeridx_ = from._impl_.playeridx_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpPlayerDead)
}

inline void CSNtfPvpPlayerDead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpPlayerDead::~CSNtfPvpPlayerDead() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpPlayerDead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpPlayerDead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfPvpPlayerDead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpPlayerDead::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpPlayerDead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playeridx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpPlayerDead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpPlayerDead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpPlayerDead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpPlayerDead)
  return target;
}

size_t CSNtfPvpPlayerDead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpPlayerDead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpPlayerDead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpPlayerDead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpPlayerDead::GetClassData() const { return &_class_data_; }


void CSNtfPvpPlayerDead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpPlayerDead*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpPlayerDead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpPlayerDead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpPlayerDead::CopyFrom(const CSNtfPvpPlayerDead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpPlayerDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpPlayerDead::IsInitialized() const {
  return true;
}

void CSNtfPvpPlayerDead::InternalSwap(CSNtfPvpPlayerDead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playeridx_, other->_impl_.playeridx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpPlayerDead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[89]);
}

// ===================================================================

class CSNtfPvpPlayerOffline::_Internal {
 public:
};

CSNtfPvpPlayerOffline::CSNtfPvpPlayerOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpPlayerOffline)
}
CSNtfPvpPlayerOffline::CSNtfPvpPlayerOffline(const CSNtfPvpPlayerOffline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpPlayerOffline* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playeridx_ = from._impl_.playeridx_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpPlayerOffline)
}

inline void CSNtfPvpPlayerOffline::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpPlayerOffline::~CSNtfPvpPlayerOffline() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpPlayerOffline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpPlayerOffline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfPvpPlayerOffline::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpPlayerOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpPlayerOffline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playeridx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpPlayerOffline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpPlayerOffline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpPlayerOffline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpPlayerOffline)
  return target;
}

size_t CSNtfPvpPlayerOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpPlayerOffline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpPlayerOffline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpPlayerOffline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpPlayerOffline::GetClassData() const { return &_class_data_; }


void CSNtfPvpPlayerOffline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpPlayerOffline*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpPlayerOffline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpPlayerOffline)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpPlayerOffline::CopyFrom(const CSNtfPvpPlayerOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpPlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpPlayerOffline::IsInitialized() const {
  return true;
}

void CSNtfPvpPlayerOffline::InternalSwap(CSNtfPvpPlayerOffline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playeridx_, other->_impl_.playeridx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpPlayerOffline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[90]);
}

// ===================================================================

class CSNtfChessOnBoardSold::_Internal {
 public:
  static const ::msg::PositionInt2D& srcpos(const CSNtfChessOnBoardSold* msg);
};

const ::msg::PositionInt2D&
CSNtfChessOnBoardSold::_Internal::srcpos(const CSNtfChessOnBoardSold* msg) {
  return *msg->_impl_.srcpos_;
}
CSNtfChessOnBoardSold::CSNtfChessOnBoardSold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfChessOnBoardSold)
}
CSNtfChessOnBoardSold::CSNtfChessOnBoardSold(const CSNtfChessOnBoardSold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfChessOnBoardSold* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcpos_){nullptr}
    , decltype(_impl_.playeridx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srcpos()) {
    _this->_impl_.srcpos_ = new ::msg::PositionInt2D(*from._impl_.srcpos_);
  }
  _this->_impl_.playeridx_ = from._impl_.playeridx_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfChessOnBoardSold)
}

inline void CSNtfChessOnBoardSold::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcpos_){nullptr}
    , decltype(_impl_.playeridx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfChessOnBoardSold::~CSNtfChessOnBoardSold() {
  // @@protoc_insertion_point(destructor:msg.CSNtfChessOnBoardSold)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfChessOnBoardSold::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.srcpos_;
}

void CSNtfChessOnBoardSold::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfChessOnBoardSold::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfChessOnBoardSold)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.srcpos_ != nullptr) {
    delete _impl_.srcpos_;
  }
  _impl_.srcpos_ = nullptr;
  _impl_.playeridx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfChessOnBoardSold::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D SrcPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfChessOnBoardSold::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfChessOnBoardSold)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // .msg.PositionInt2D SrcPos = 2;
  if (this->_internal_has_srcpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::srcpos(this),
        _Internal::srcpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfChessOnBoardSold)
  return target;
}

size_t CSNtfChessOnBoardSold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfChessOnBoardSold)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcPos = 2;
  if (this->_internal_has_srcpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcpos_);
  }

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfChessOnBoardSold::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfChessOnBoardSold::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfChessOnBoardSold::GetClassData() const { return &_class_data_; }


void CSNtfChessOnBoardSold::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfChessOnBoardSold*>(&to_msg);
  auto& from = static_cast<const CSNtfChessOnBoardSold&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfChessOnBoardSold)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcpos()) {
    _this->_internal_mutable_srcpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_srcpos());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfChessOnBoardSold::CopyFrom(const CSNtfChessOnBoardSold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfChessOnBoardSold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfChessOnBoardSold::IsInitialized() const {
  return true;
}

void CSNtfChessOnBoardSold::InternalSwap(CSNtfChessOnBoardSold* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfChessOnBoardSold, _impl_.playeridx_)
      + sizeof(CSNtfChessOnBoardSold::_impl_.playeridx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfChessOnBoardSold, _impl_.srcpos_)>(
          reinterpret_cast<char*>(&_impl_.srcpos_),
          reinterpret_cast<char*>(&other->_impl_.srcpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfChessOnBoardSold::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[91]);
}

// ===================================================================

class CSNtfChessRemovedFromBag::_Internal {
 public:
};

CSNtfChessRemovedFromBag::CSNtfChessRemovedFromBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfChessRemovedFromBag)
}
CSNtfChessRemovedFromBag::CSNtfChessRemovedFromBag(const CSNtfChessRemovedFromBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfChessRemovedFromBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagindex_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfChessRemovedFromBag)
}

inline void CSNtfChessRemovedFromBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfChessRemovedFromBag::~CSNtfChessRemovedFromBag() {
  // @@protoc_insertion_point(destructor:msg.CSNtfChessRemovedFromBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfChessRemovedFromBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfChessRemovedFromBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfChessRemovedFromBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfChessRemovedFromBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagindex_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfChessRemovedFromBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfChessRemovedFromBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfChessRemovedFromBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfChessRemovedFromBag)
  return target;
}

size_t CSNtfChessRemovedFromBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfChessRemovedFromBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfChessRemovedFromBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfChessRemovedFromBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfChessRemovedFromBag::GetClassData() const { return &_class_data_; }


void CSNtfChessRemovedFromBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfChessRemovedFromBag*>(&to_msg);
  auto& from = static_cast<const CSNtfChessRemovedFromBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfChessRemovedFromBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfChessRemovedFromBag::CopyFrom(const CSNtfChessRemovedFromBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfChessRemovedFromBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfChessRemovedFromBag::IsInitialized() const {
  return true;
}

void CSNtfChessRemovedFromBag::InternalSwap(CSNtfChessRemovedFromBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfChessRemovedFromBag, _impl_.bagindex_)
      + sizeof(CSNtfChessRemovedFromBag::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CSNtfChessRemovedFromBag, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfChessRemovedFromBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[92]);
}

// ===================================================================

class CSNtfBuyChess::_Internal {
 public:
};

CSNtfBuyChess::CSNtfBuyChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfBuyChess)
}
CSNtfBuyChess::CSNtfBuyChess(const CSNtfBuyChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfBuyChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.chessconfigid_){}
    , decltype(_impl_.bagindex_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.istobag_){}
    , decltype(_impl_.isdrag_){}
    , decltype(_impl_.ty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ty_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.ty_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfBuyChess)
}

inline void CSNtfBuyChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.chessconfigid_){0}
    , decltype(_impl_.bagindex_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.istobag_){false}
    , decltype(_impl_.isdrag_){false}
    , decltype(_impl_.ty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfBuyChess::~CSNtfBuyChess() {
  // @@protoc_insertion_point(destructor:msg.CSNtfBuyChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfBuyChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfBuyChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfBuyChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfBuyChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ty_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.ty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfBuyChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessConfigId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chessconfigid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsToBag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.istobag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsDrag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isdrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfBuyChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfBuyChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 ChessConfigId = 2;
  if (this->_internal_chessconfigid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_chessconfigid(), target);
  }

  // bool IsToBag = 3;
  if (this->_internal_istobag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_istobag(), target);
  }

  // int32 BagIndex = 4;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bagindex(), target);
  }

  // int32 Tx = 5;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tx(), target);
  }

  // int32 Ty = 6;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ty(), target);
  }

  // bool IsDrag = 7;
  if (this->_internal_isdrag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isdrag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfBuyChess)
  return target;
}

size_t CSNtfBuyChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfBuyChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 ChessConfigId = 2;
  if (this->_internal_chessconfigid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessconfigid());
  }

  // int32 BagIndex = 4;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 Tx = 5;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // bool IsToBag = 3;
  if (this->_internal_istobag() != 0) {
    total_size += 1 + 1;
  }

  // bool IsDrag = 7;
  if (this->_internal_isdrag() != 0) {
    total_size += 1 + 1;
  }

  // int32 Ty = 6;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfBuyChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfBuyChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfBuyChess::GetClassData() const { return &_class_data_; }


void CSNtfBuyChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfBuyChess*>(&to_msg);
  auto& from = static_cast<const CSNtfBuyChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfBuyChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_chessconfigid() != 0) {
    _this->_internal_set_chessconfigid(from._internal_chessconfigid());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_istobag() != 0) {
    _this->_internal_set_istobag(from._internal_istobag());
  }
  if (from._internal_isdrag() != 0) {
    _this->_internal_set_isdrag(from._internal_isdrag());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfBuyChess::CopyFrom(const CSNtfBuyChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfBuyChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfBuyChess::IsInitialized() const {
  return true;
}

void CSNtfBuyChess::InternalSwap(CSNtfBuyChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfBuyChess, _impl_.ty_)
      + sizeof(CSNtfBuyChess::_impl_.ty_)
      - PROTOBUF_FIELD_OFFSET(CSNtfBuyChess, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfBuyChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[93]);
}

// ===================================================================

class CSNtfChessRetrievedToBag::_Internal {
 public:
  static const ::msg::PositionInt2D& srcpos(const CSNtfChessRetrievedToBag* msg);
};

const ::msg::PositionInt2D&
CSNtfChessRetrievedToBag::_Internal::srcpos(const CSNtfChessRetrievedToBag* msg) {
  return *msg->_impl_.srcpos_;
}
CSNtfChessRetrievedToBag::CSNtfChessRetrievedToBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfChessRetrievedToBag)
}
CSNtfChessRetrievedToBag::CSNtfChessRetrievedToBag(const CSNtfChessRetrievedToBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfChessRetrievedToBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcpos_){nullptr}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.bagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srcpos()) {
    _this->_impl_.srcpos_ = new ::msg::PositionInt2D(*from._impl_.srcpos_);
  }
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagindex_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfChessRetrievedToBag)
}

inline void CSNtfChessRetrievedToBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcpos_){nullptr}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.bagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfChessRetrievedToBag::~CSNtfChessRetrievedToBag() {
  // @@protoc_insertion_point(destructor:msg.CSNtfChessRetrievedToBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfChessRetrievedToBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.srcpos_;
}

void CSNtfChessRetrievedToBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfChessRetrievedToBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfChessRetrievedToBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.srcpos_ != nullptr) {
    delete _impl_.srcpos_;
  }
  _impl_.srcpos_ = nullptr;
  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagindex_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfChessRetrievedToBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D SrcPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfChessRetrievedToBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfChessRetrievedToBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  // .msg.PositionInt2D SrcPos = 3;
  if (this->_internal_has_srcpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::srcpos(this),
        _Internal::srcpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfChessRetrievedToBag)
  return target;
}

size_t CSNtfChessRetrievedToBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfChessRetrievedToBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcPos = 3;
  if (this->_internal_has_srcpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcpos_);
  }

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfChessRetrievedToBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfChessRetrievedToBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfChessRetrievedToBag::GetClassData() const { return &_class_data_; }


void CSNtfChessRetrievedToBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfChessRetrievedToBag*>(&to_msg);
  auto& from = static_cast<const CSNtfChessRetrievedToBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfChessRetrievedToBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcpos()) {
    _this->_internal_mutable_srcpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_srcpos());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfChessRetrievedToBag::CopyFrom(const CSNtfChessRetrievedToBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfChessRetrievedToBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfChessRetrievedToBag::IsInitialized() const {
  return true;
}

void CSNtfChessRetrievedToBag::InternalSwap(CSNtfChessRetrievedToBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfChessRetrievedToBag, _impl_.bagindex_)
      + sizeof(CSNtfChessRetrievedToBag::_impl_.bagindex_)
      - PROTOBUF_FIELD_OFFSET(CSNtfChessRetrievedToBag, _impl_.srcpos_)>(
          reinterpret_cast<char*>(&_impl_.srcpos_),
          reinterpret_cast<char*>(&other->_impl_.srcpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfChessRetrievedToBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[94]);
}

// ===================================================================

class CSNtfChessMoved::_Internal {
 public:
  static const ::msg::PositionInt2D& srcpos(const CSNtfChessMoved* msg);
  static const ::msg::PositionInt2D& destpos(const CSNtfChessMoved* msg);
};

const ::msg::PositionInt2D&
CSNtfChessMoved::_Internal::srcpos(const CSNtfChessMoved* msg) {
  return *msg->_impl_.srcpos_;
}
const ::msg::PositionInt2D&
CSNtfChessMoved::_Internal::destpos(const CSNtfChessMoved* msg) {
  return *msg->_impl_.destpos_;
}
CSNtfChessMoved::CSNtfChessMoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfChessMoved)
}
CSNtfChessMoved::CSNtfChessMoved(const CSNtfChessMoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfChessMoved* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcpos_){nullptr}
    , decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srcpos()) {
    _this->_impl_.srcpos_ = new ::msg::PositionInt2D(*from._impl_.srcpos_);
  }
  if (from._internal_has_destpos()) {
    _this->_impl_.destpos_ = new ::msg::PositionInt2D(*from._impl_.destpos_);
  }
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfChessMoved)
}

inline void CSNtfChessMoved::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcpos_){nullptr}
    , decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfChessMoved::~CSNtfChessMoved() {
  // @@protoc_insertion_point(destructor:msg.CSNtfChessMoved)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfChessMoved::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.srcpos_;
  if (this != internal_default_instance()) delete _impl_.destpos_;
}

void CSNtfChessMoved::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfChessMoved::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfChessMoved)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.srcpos_ != nullptr) {
    delete _impl_.srcpos_;
  }
  _impl_.srcpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfChessMoved::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PositionInt2D SrcPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_srcpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D DestPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfChessMoved::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfChessMoved)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcPos = 1;
  if (this->_internal_has_srcpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::srcpos(this),
        _Internal::srcpos(this).GetCachedSize(), target, stream);
  }

  // .msg.PositionInt2D DestPos = 2;
  if (this->_internal_has_destpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destpos(this),
        _Internal::destpos(this).GetCachedSize(), target, stream);
  }

  // int32 PlayerIdx = 3;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_playeridx(), target);
  }

  // bool Success = 4;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfChessMoved)
  return target;
}

size_t CSNtfChessMoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfChessMoved)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D SrcPos = 1;
  if (this->_internal_has_srcpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.srcpos_);
  }

  // .msg.PositionInt2D DestPos = 2;
  if (this->_internal_has_destpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destpos_);
  }

  // int32 PlayerIdx = 3;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // bool Success = 4;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfChessMoved::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfChessMoved::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfChessMoved::GetClassData() const { return &_class_data_; }


void CSNtfChessMoved::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfChessMoved*>(&to_msg);
  auto& from = static_cast<const CSNtfChessMoved&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfChessMoved)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_srcpos()) {
    _this->_internal_mutable_srcpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_srcpos());
  }
  if (from._internal_has_destpos()) {
    _this->_internal_mutable_destpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_destpos());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfChessMoved::CopyFrom(const CSNtfChessMoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfChessMoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfChessMoved::IsInitialized() const {
  return true;
}

void CSNtfChessMoved::InternalSwap(CSNtfChessMoved* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfChessMoved, _impl_.success_)
      + sizeof(CSNtfChessMoved::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(CSNtfChessMoved, _impl_.srcpos_)>(
          reinterpret_cast<char*>(&_impl_.srcpos_),
          reinterpret_cast<char*>(&other->_impl_.srcpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfChessMoved::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[95]);
}

// ===================================================================

class CSNtfChessFromBagToMap::_Internal {
 public:
  static const ::msg::PositionInt2D& destpos(const CSNtfChessFromBagToMap* msg);
};

const ::msg::PositionInt2D&
CSNtfChessFromBagToMap::_Internal::destpos(const CSNtfChessFromBagToMap* msg) {
  return *msg->_impl_.destpos_;
}
CSNtfChessFromBagToMap::CSNtfChessFromBagToMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfChessFromBagToMap)
}
CSNtfChessFromBagToMap::CSNtfChessFromBagToMap(const CSNtfChessFromBagToMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfChessFromBagToMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.bagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destpos()) {
    _this->_impl_.destpos_ = new ::msg::PositionInt2D(*from._impl_.destpos_);
  }
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagidx_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfChessFromBagToMap)
}

inline void CSNtfChessFromBagToMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.destpos_){nullptr}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.bagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfChessFromBagToMap::~CSNtfChessFromBagToMap() {
  // @@protoc_insertion_point(destructor:msg.CSNtfChessFromBagToMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfChessFromBagToMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.destpos_;
}

void CSNtfChessFromBagToMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfChessFromBagToMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfChessFromBagToMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagidx_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfChessFromBagToMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D DestPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_destpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfChessFromBagToMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfChessFromBagToMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 BagIdx = 2;
  if (this->_internal_bagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagidx(), target);
  }

  // .msg.PositionInt2D DestPos = 3;
  if (this->_internal_has_destpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::destpos(this),
        _Internal::destpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfChessFromBagToMap)
  return target;
}

size_t CSNtfChessFromBagToMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfChessFromBagToMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D DestPos = 3;
  if (this->_internal_has_destpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destpos_);
  }

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 BagIdx = 2;
  if (this->_internal_bagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfChessFromBagToMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfChessFromBagToMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfChessFromBagToMap::GetClassData() const { return &_class_data_; }


void CSNtfChessFromBagToMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfChessFromBagToMap*>(&to_msg);
  auto& from = static_cast<const CSNtfChessFromBagToMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfChessFromBagToMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destpos()) {
    _this->_internal_mutable_destpos()->::msg::PositionInt2D::MergeFrom(
        from._internal_destpos());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_bagidx() != 0) {
    _this->_internal_set_bagidx(from._internal_bagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfChessFromBagToMap::CopyFrom(const CSNtfChessFromBagToMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfChessFromBagToMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfChessFromBagToMap::IsInitialized() const {
  return true;
}

void CSNtfChessFromBagToMap::InternalSwap(CSNtfChessFromBagToMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfChessFromBagToMap, _impl_.bagidx_)
      + sizeof(CSNtfChessFromBagToMap::_impl_.bagidx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfChessFromBagToMap, _impl_.destpos_)>(
          reinterpret_cast<char*>(&_impl_.destpos_),
          reinterpret_cast<char*>(&other->_impl_.destpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfChessFromBagToMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[96]);
}

// ===================================================================

class CSNtfPlayerLvUpgraded::_Internal {
 public:
};

CSNtfPlayerLvUpgraded::CSNtfPlayerLvUpgraded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPlayerLvUpgraded)
}
CSNtfPlayerLvUpgraded::CSNtfPlayerLvUpgraded(const CSNtfPlayerLvUpgraded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPlayerLvUpgraded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.newplayerlv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newplayerlv_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.newplayerlv_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPlayerLvUpgraded)
}

inline void CSNtfPlayerLvUpgraded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.newplayerlv_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPlayerLvUpgraded::~CSNtfPlayerLvUpgraded() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPlayerLvUpgraded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPlayerLvUpgraded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfPlayerLvUpgraded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPlayerLvUpgraded::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPlayerLvUpgraded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newplayerlv_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.newplayerlv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPlayerLvUpgraded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NewPlayerLv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.newplayerlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPlayerLvUpgraded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPlayerLvUpgraded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 NewPlayerLv = 2;
  if (this->_internal_newplayerlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_newplayerlv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPlayerLvUpgraded)
  return target;
}

size_t CSNtfPlayerLvUpgraded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPlayerLvUpgraded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 NewPlayerLv = 2;
  if (this->_internal_newplayerlv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_newplayerlv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPlayerLvUpgraded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPlayerLvUpgraded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPlayerLvUpgraded::GetClassData() const { return &_class_data_; }


void CSNtfPlayerLvUpgraded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPlayerLvUpgraded*>(&to_msg);
  auto& from = static_cast<const CSNtfPlayerLvUpgraded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPlayerLvUpgraded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_newplayerlv() != 0) {
    _this->_internal_set_newplayerlv(from._internal_newplayerlv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPlayerLvUpgraded::CopyFrom(const CSNtfPlayerLvUpgraded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPlayerLvUpgraded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPlayerLvUpgraded::IsInitialized() const {
  return true;
}

void CSNtfPlayerLvUpgraded::InternalSwap(CSNtfPlayerLvUpgraded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPlayerLvUpgraded, _impl_.newplayerlv_)
      + sizeof(CSNtfPlayerLvUpgraded::_impl_.newplayerlv_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPlayerLvUpgraded, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPlayerLvUpgraded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[97]);
}

// ===================================================================

class CSNtfUpdateExp::_Internal {
 public:
};

CSNtfUpdateExp::CSNtfUpdateExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfUpdateExp)
}
CSNtfUpdateExp::CSNtfUpdateExp(const CSNtfUpdateExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfUpdateExp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currentexp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.currentexp_ = from._impl_.currentexp_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfUpdateExp)
}

inline void CSNtfUpdateExp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currentexp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfUpdateExp::~CSNtfUpdateExp() {
  // @@protoc_insertion_point(destructor:msg.CSNtfUpdateExp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfUpdateExp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfUpdateExp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfUpdateExp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfUpdateExp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currentexp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfUpdateExp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CurrentExp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.currentexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfUpdateExp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfUpdateExp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CurrentExp = 1;
  if (this->_internal_currentexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_currentexp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfUpdateExp)
  return target;
}

size_t CSNtfUpdateExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfUpdateExp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CurrentExp = 1;
  if (this->_internal_currentexp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentexp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfUpdateExp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfUpdateExp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfUpdateExp::GetClassData() const { return &_class_data_; }


void CSNtfUpdateExp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfUpdateExp*>(&to_msg);
  auto& from = static_cast<const CSNtfUpdateExp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfUpdateExp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_currentexp() != 0) {
    _this->_internal_set_currentexp(from._internal_currentexp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfUpdateExp::CopyFrom(const CSNtfUpdateExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfUpdateExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfUpdateExp::IsInitialized() const {
  return true;
}

void CSNtfUpdateExp::InternalSwap(CSNtfUpdateExp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.currentexp_, other->_impl_.currentexp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfUpdateExp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[98]);
}

// ===================================================================

class CSNtfSetEnemy::_Internal {
 public:
};

CSNtfSetEnemy::CSNtfSetEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfSetEnemy)
}
CSNtfSetEnemy::CSNtfSetEnemy(const CSNtfSetEnemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfSetEnemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.enemyidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enemyidx_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.enemyidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfSetEnemy)
}

inline void CSNtfSetEnemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.enemyidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfSetEnemy::~CSNtfSetEnemy() {
  // @@protoc_insertion_point(destructor:msg.CSNtfSetEnemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfSetEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfSetEnemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfSetEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfSetEnemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enemyidx_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.enemyidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfSetEnemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EnemyIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enemyidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfSetEnemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfSetEnemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 EnemyIdx = 2;
  if (this->_internal_enemyidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_enemyidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfSetEnemy)
  return target;
}

size_t CSNtfSetEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfSetEnemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 EnemyIdx = 2;
  if (this->_internal_enemyidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemyidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfSetEnemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfSetEnemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfSetEnemy::GetClassData() const { return &_class_data_; }


void CSNtfSetEnemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfSetEnemy*>(&to_msg);
  auto& from = static_cast<const CSNtfSetEnemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfSetEnemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_enemyidx() != 0) {
    _this->_internal_set_enemyidx(from._internal_enemyidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfSetEnemy::CopyFrom(const CSNtfSetEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfSetEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfSetEnemy::IsInitialized() const {
  return true;
}

void CSNtfSetEnemy::InternalSwap(CSNtfSetEnemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfSetEnemy, _impl_.enemyidx_)
      + sizeof(CSNtfSetEnemy::_impl_.enemyidx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfSetEnemy, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfSetEnemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[99]);
}

// ===================================================================

class CSNtfSetSeed::_Internal {
 public:
};

CSNtfSetSeed::CSNtfSetSeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfSetSeed)
}
CSNtfSetSeed::CSNtfSetSeed(const CSNtfSetSeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfSetSeed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seed_ = from._impl_.seed_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfSetSeed)
}

inline void CSNtfSetSeed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfSetSeed::~CSNtfSetSeed() {
  // @@protoc_insertion_point(destructor:msg.CSNtfSetSeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfSetSeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfSetSeed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfSetSeed::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfSetSeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfSetSeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfSetSeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfSetSeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Seed = 1;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfSetSeed)
  return target;
}

size_t CSNtfSetSeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfSetSeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Seed = 1;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfSetSeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfSetSeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfSetSeed::GetClassData() const { return &_class_data_; }


void CSNtfSetSeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfSetSeed*>(&to_msg);
  auto& from = static_cast<const CSNtfSetSeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfSetSeed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfSetSeed::CopyFrom(const CSNtfSetSeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfSetSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfSetSeed::IsInitialized() const {
  return true;
}

void CSNtfSetSeed::InternalSwap(CSNtfSetSeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.seed_, other->_impl_.seed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfSetSeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[100]);
}

// ===================================================================

class CSNtfBattleTerminated::_Internal {
 public:
};

CSNtfBattleTerminated::CSNtfBattleTerminated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfBattleTerminated)
}
CSNtfBattleTerminated::CSNtfBattleTerminated(const CSNtfBattleTerminated& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSNtfBattleTerminated* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfBattleTerminated)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfBattleTerminated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfBattleTerminated::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSNtfBattleTerminated::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[101]);
}

// ===================================================================

class CSNtfShopRefreshed::_Internal {
 public:
};

CSNtfShopRefreshed::CSNtfShopRefreshed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfShopRefreshed)
}
CSNtfShopRefreshed::CSNtfShopRefreshed(const CSNtfShopRefreshed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfShopRefreshed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesses_){from._impl_.chesses_}
    , /*decltype(_impl_._chesses_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfShopRefreshed)
}

inline void CSNtfShopRefreshed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesses_){arena}
    , /*decltype(_impl_._chesses_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfShopRefreshed::~CSNtfShopRefreshed() {
  // @@protoc_insertion_point(destructor:msg.CSNtfShopRefreshed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfShopRefreshed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chesses_.~RepeatedField();
}

void CSNtfShopRefreshed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfShopRefreshed::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfShopRefreshed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chesses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfShopRefreshed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 Chesses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chesses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chesses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfShopRefreshed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfShopRefreshed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Chesses = 1;
  {
    int byte_size = _impl_._chesses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_chesses(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfShopRefreshed)
  return target;
}

size_t CSNtfShopRefreshed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfShopRefreshed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Chesses = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chesses_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chesses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfShopRefreshed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfShopRefreshed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfShopRefreshed::GetClassData() const { return &_class_data_; }


void CSNtfShopRefreshed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfShopRefreshed*>(&to_msg);
  auto& from = static_cast<const CSNtfShopRefreshed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfShopRefreshed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chesses_.MergeFrom(from._impl_.chesses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfShopRefreshed::CopyFrom(const CSNtfShopRefreshed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfShopRefreshed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfShopRefreshed::IsInitialized() const {
  return true;
}

void CSNtfShopRefreshed::InternalSwap(CSNtfShopRefreshed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chesses_.InternalSwap(&other->_impl_.chesses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfShopRefreshed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[102]);
}

// ===================================================================

class CSNtfChessMovedWithinBag::_Internal {
 public:
};

CSNtfChessMovedWithinBag::CSNtfChessMovedWithinBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfChessMovedWithinBag)
}
CSNtfChessMovedWithinBag::CSNtfChessMovedWithinBag(const CSNtfChessMovedWithinBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfChessMovedWithinBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.srcbagidx_){}
    , decltype(_impl_.destbagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destbagidx_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.destbagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfChessMovedWithinBag)
}

inline void CSNtfChessMovedWithinBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.srcbagidx_){0}
    , decltype(_impl_.destbagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfChessMovedWithinBag::~CSNtfChessMovedWithinBag() {
  // @@protoc_insertion_point(destructor:msg.CSNtfChessMovedWithinBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfChessMovedWithinBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfChessMovedWithinBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfChessMovedWithinBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfChessMovedWithinBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destbagidx_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.destbagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfChessMovedWithinBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SrcBagIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.srcbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestBagIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.destbagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfChessMovedWithinBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfChessMovedWithinBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 SrcBagIdx = 2;
  if (this->_internal_srcbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_srcbagidx(), target);
  }

  // int32 DestBagIdx = 3;
  if (this->_internal_destbagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_destbagidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfChessMovedWithinBag)
  return target;
}

size_t CSNtfChessMovedWithinBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfChessMovedWithinBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 SrcBagIdx = 2;
  if (this->_internal_srcbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcbagidx());
  }

  // int32 DestBagIdx = 3;
  if (this->_internal_destbagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destbagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfChessMovedWithinBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfChessMovedWithinBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfChessMovedWithinBag::GetClassData() const { return &_class_data_; }


void CSNtfChessMovedWithinBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfChessMovedWithinBag*>(&to_msg);
  auto& from = static_cast<const CSNtfChessMovedWithinBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfChessMovedWithinBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_srcbagidx() != 0) {
    _this->_internal_set_srcbagidx(from._internal_srcbagidx());
  }
  if (from._internal_destbagidx() != 0) {
    _this->_internal_set_destbagidx(from._internal_destbagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfChessMovedWithinBag::CopyFrom(const CSNtfChessMovedWithinBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfChessMovedWithinBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfChessMovedWithinBag::IsInitialized() const {
  return true;
}

void CSNtfChessMovedWithinBag::InternalSwap(CSNtfChessMovedWithinBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfChessMovedWithinBag, _impl_.destbagidx_)
      + sizeof(CSNtfChessMovedWithinBag::_impl_.destbagidx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfChessMovedWithinBag, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfChessMovedWithinBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[103]);
}

// ===================================================================

class CSNtfCreepDied::_Internal {
 public:
  static const ::msg::PositionInt2D& creeppos(const CSNtfCreepDied* msg);
};

const ::msg::PositionInt2D&
CSNtfCreepDied::_Internal::creeppos(const CSNtfCreepDied* msg) {
  return *msg->_impl_.creeppos_;
}
CSNtfCreepDied::CSNtfCreepDied(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfCreepDied)
}
CSNtfCreepDied::CSNtfCreepDied(const CSNtfCreepDied& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfCreepDied* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creeppos_){nullptr}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.creepid_){}
    , decltype(_impl_.equipnetid_){}
    , decltype(_impl_.equipid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_creeppos()) {
    _this->_impl_.creeppos_ = new ::msg::PositionInt2D(*from._impl_.creeppos_);
  }
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equipid_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.equipid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfCreepDied)
}

inline void CSNtfCreepDied::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.creeppos_){nullptr}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.creepid_){0}
    , decltype(_impl_.equipnetid_){0}
    , decltype(_impl_.equipid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfCreepDied::~CSNtfCreepDied() {
  // @@protoc_insertion_point(destructor:msg.CSNtfCreepDied)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfCreepDied::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.creeppos_;
}

void CSNtfCreepDied::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfCreepDied::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfCreepDied)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.creeppos_ != nullptr) {
    delete _impl_.creeppos_;
  }
  _impl_.creeppos_ = nullptr;
  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equipid_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.equipid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfCreepDied::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CreepId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.creepid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipNetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.equipnetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D CreepPos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_creeppos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfCreepDied::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfCreepDied)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 CreepId = 2;
  if (this->_internal_creepid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_creepid(), target);
  }

  // int32 EquipNetId = 3;
  if (this->_internal_equipnetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_equipnetid(), target);
  }

  // int32 EquipId = 4;
  if (this->_internal_equipid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_equipid(), target);
  }

  // .msg.PositionInt2D CreepPos = 5;
  if (this->_internal_has_creeppos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::creeppos(this),
        _Internal::creeppos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfCreepDied)
  return target;
}

size_t CSNtfCreepDied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfCreepDied)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D CreepPos = 5;
  if (this->_internal_has_creeppos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.creeppos_);
  }

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 CreepId = 2;
  if (this->_internal_creepid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_creepid());
  }

  // int32 EquipNetId = 3;
  if (this->_internal_equipnetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipnetid());
  }

  // int32 EquipId = 4;
  if (this->_internal_equipid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfCreepDied::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfCreepDied::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfCreepDied::GetClassData() const { return &_class_data_; }


void CSNtfCreepDied::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfCreepDied*>(&to_msg);
  auto& from = static_cast<const CSNtfCreepDied&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfCreepDied)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_creeppos()) {
    _this->_internal_mutable_creeppos()->::msg::PositionInt2D::MergeFrom(
        from._internal_creeppos());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_creepid() != 0) {
    _this->_internal_set_creepid(from._internal_creepid());
  }
  if (from._internal_equipnetid() != 0) {
    _this->_internal_set_equipnetid(from._internal_equipnetid());
  }
  if (from._internal_equipid() != 0) {
    _this->_internal_set_equipid(from._internal_equipid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfCreepDied::CopyFrom(const CSNtfCreepDied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfCreepDied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfCreepDied::IsInitialized() const {
  return true;
}

void CSNtfCreepDied::InternalSwap(CSNtfCreepDied* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfCreepDied, _impl_.equipid_)
      + sizeof(CSNtfCreepDied::_impl_.equipid_)
      - PROTOBUF_FIELD_OFFSET(CSNtfCreepDied, _impl_.creeppos_)>(
          reinterpret_cast<char*>(&_impl_.creeppos_),
          reinterpret_cast<char*>(&other->_impl_.creeppos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfCreepDied::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[104]);
}

// ===================================================================

class CSNtfUpdateHp::_Internal {
 public:
};

CSNtfUpdateHp::CSNtfUpdateHp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfUpdateHp)
}
CSNtfUpdateHp::CSNtfUpdateHp(const CSNtfUpdateHp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfUpdateHp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfUpdateHp)
}

inline void CSNtfUpdateHp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfUpdateHp::~CSNtfUpdateHp() {
  // @@protoc_insertion_point(destructor:msg.CSNtfUpdateHp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfUpdateHp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfUpdateHp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfUpdateHp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfUpdateHp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfUpdateHp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfUpdateHp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfUpdateHp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 Hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfUpdateHp)
  return target;
}

size_t CSNtfUpdateHp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfUpdateHp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 Hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfUpdateHp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfUpdateHp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfUpdateHp::GetClassData() const { return &_class_data_; }


void CSNtfUpdateHp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfUpdateHp*>(&to_msg);
  auto& from = static_cast<const CSNtfUpdateHp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfUpdateHp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfUpdateHp::CopyFrom(const CSNtfUpdateHp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfUpdateHp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfUpdateHp::IsInitialized() const {
  return true;
}

void CSNtfUpdateHp::InternalSwap(CSNtfUpdateHp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfUpdateHp, _impl_.hp_)
      + sizeof(CSNtfUpdateHp::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(CSNtfUpdateHp, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfUpdateHp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[105]);
}

// ===================================================================

class CSNtfPickupEquipment::_Internal {
 public:
};

CSNtfPickupEquipment::CSNtfPickupEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPickupEquipment)
}
CSNtfPickupEquipment::CSNtfPickupEquipment(const CSNtfPickupEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPickupEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.equipnetid_){}
    , decltype(_impl_.bagidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagidx_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagidx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPickupEquipment)
}

inline void CSNtfPickupEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.equipnetid_){0}
    , decltype(_impl_.bagidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPickupEquipment::~CSNtfPickupEquipment() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPickupEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPickupEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfPickupEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPickupEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPickupEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagidx_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.bagidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPickupEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipNetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equipnetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPickupEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPickupEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 EquipNetId = 2;
  if (this->_internal_equipnetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_equipnetid(), target);
  }

  // int32 BagIdx = 3;
  if (this->_internal_bagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPickupEquipment)
  return target;
}

size_t CSNtfPickupEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPickupEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 EquipNetId = 2;
  if (this->_internal_equipnetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipnetid());
  }

  // int32 BagIdx = 3;
  if (this->_internal_bagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPickupEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPickupEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPickupEquipment::GetClassData() const { return &_class_data_; }


void CSNtfPickupEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPickupEquipment*>(&to_msg);
  auto& from = static_cast<const CSNtfPickupEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPickupEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_equipnetid() != 0) {
    _this->_internal_set_equipnetid(from._internal_equipnetid());
  }
  if (from._internal_bagidx() != 0) {
    _this->_internal_set_bagidx(from._internal_bagidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPickupEquipment::CopyFrom(const CSNtfPickupEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPickupEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPickupEquipment::IsInitialized() const {
  return true;
}

void CSNtfPickupEquipment::InternalSwap(CSNtfPickupEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPickupEquipment, _impl_.bagidx_)
      + sizeof(CSNtfPickupEquipment::_impl_.bagidx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPickupEquipment, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPickupEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[106]);
}

// ===================================================================

class CSNtfUseEquipment::_Internal {
 public:
  static const ::msg::PositionInt2D& pos(const CSNtfUseEquipment* msg);
};

const ::msg::PositionInt2D&
CSNtfUseEquipment::_Internal::pos(const CSNtfUseEquipment* msg) {
  return *msg->_impl_.pos_;
}
CSNtfUseEquipment::CSNtfUseEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfUseEquipment)
}
CSNtfUseEquipment::CSNtfUseEquipment(const CSNtfUseEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfUseEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.netid_){}
    , decltype(_impl_.bagindex_){}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.ischessinbag_){}
    , decltype(_impl_.isonbattle_){}
    , decltype(_impl_.equipbagindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::msg::PositionInt2D(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equipbagindex_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.equipbagindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfUseEquipment)
}

inline void CSNtfUseEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.netid_){0}
    , decltype(_impl_.bagindex_){0}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.ischessinbag_){false}
    , decltype(_impl_.isonbattle_){false}
    , decltype(_impl_.equipbagindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfUseEquipment::~CSNtfUseEquipment() {
  // @@protoc_insertion_point(destructor:msg.CSNtfUseEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfUseEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void CSNtfUseEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfUseEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfUseEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equipbagindex_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.equipbagindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfUseEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsChessInBag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ischessinbag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D Pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipBagIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.equipbagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsOnBattle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isonbattle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfUseEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfUseEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // bool IsChessInBag = 2;
  if (this->_internal_ischessinbag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ischessinbag(), target);
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagindex(), target);
  }

  // int32 PlayerIdx = 4;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_playeridx(), target);
  }

  // .msg.PositionInt2D Pos = 5;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // int32 EquipBagIndex = 6;
  if (this->_internal_equipbagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_equipbagindex(), target);
  }

  // bool IsOnBattle = 7;
  if (this->_internal_isonbattle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isonbattle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfUseEquipment)
  return target;
}

size_t CSNtfUseEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfUseEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D Pos = 5;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // int32 BagIndex = 3;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 PlayerIdx = 4;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // bool IsChessInBag = 2;
  if (this->_internal_ischessinbag() != 0) {
    total_size += 1 + 1;
  }

  // bool IsOnBattle = 7;
  if (this->_internal_isonbattle() != 0) {
    total_size += 1 + 1;
  }

  // int32 EquipBagIndex = 6;
  if (this->_internal_equipbagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipbagindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfUseEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfUseEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfUseEquipment::GetClassData() const { return &_class_data_; }


void CSNtfUseEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfUseEquipment*>(&to_msg);
  auto& from = static_cast<const CSNtfUseEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfUseEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::msg::PositionInt2D::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_ischessinbag() != 0) {
    _this->_internal_set_ischessinbag(from._internal_ischessinbag());
  }
  if (from._internal_isonbattle() != 0) {
    _this->_internal_set_isonbattle(from._internal_isonbattle());
  }
  if (from._internal_equipbagindex() != 0) {
    _this->_internal_set_equipbagindex(from._internal_equipbagindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfUseEquipment::CopyFrom(const CSNtfUseEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfUseEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfUseEquipment::IsInitialized() const {
  return true;
}

void CSNtfUseEquipment::InternalSwap(CSNtfUseEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfUseEquipment, _impl_.equipbagindex_)
      + sizeof(CSNtfUseEquipment::_impl_.equipbagindex_)
      - PROTOBUF_FIELD_OFFSET(CSNtfUseEquipment, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfUseEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[107]);
}

// ===================================================================

class CSNtfOperateEquipInBag::_Internal {
 public:
};

CSNtfOperateEquipInBag::CSNtfOperateEquipInBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfOperateEquipInBag)
}
CSNtfOperateEquipInBag::CSNtfOperateEquipInBag(const CSNtfOperateEquipInBag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfOperateEquipInBag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){}
    , decltype(_impl_.equipmentid_){}
    , decltype(_impl_.bagidx_){}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.isremoved_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isremoved_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.isremoved_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfOperateEquipInBag)
}

inline void CSNtfOperateEquipInBag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){0}
    , decltype(_impl_.equipmentid_){0}
    , decltype(_impl_.bagidx_){0}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.isremoved_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfOperateEquipInBag::~CSNtfOperateEquipInBag() {
  // @@protoc_insertion_point(destructor:msg.CSNtfOperateEquipInBag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfOperateEquipInBag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfOperateEquipInBag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfOperateEquipInBag::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfOperateEquipInBag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isremoved_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.isremoved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfOperateEquipInBag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipmentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equipmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bagidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsRemoved = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isremoved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfOperateEquipInBag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfOperateEquipInBag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // int32 EquipmentId = 2;
  if (this->_internal_equipmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_equipmentid(), target);
  }

  // int32 BagIdx = 3;
  if (this->_internal_bagidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bagidx(), target);
  }

  // int32 PlayerIdx = 4;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_playeridx(), target);
  }

  // bool IsRemoved = 5;
  if (this->_internal_isremoved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isremoved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfOperateEquipInBag)
  return target;
}

size_t CSNtfOperateEquipInBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfOperateEquipInBag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // int32 EquipmentId = 2;
  if (this->_internal_equipmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipmentid());
  }

  // int32 BagIdx = 3;
  if (this->_internal_bagidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagidx());
  }

  // int32 PlayerIdx = 4;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // bool IsRemoved = 5;
  if (this->_internal_isremoved() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfOperateEquipInBag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfOperateEquipInBag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfOperateEquipInBag::GetClassData() const { return &_class_data_; }


void CSNtfOperateEquipInBag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfOperateEquipInBag*>(&to_msg);
  auto& from = static_cast<const CSNtfOperateEquipInBag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfOperateEquipInBag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_equipmentid() != 0) {
    _this->_internal_set_equipmentid(from._internal_equipmentid());
  }
  if (from._internal_bagidx() != 0) {
    _this->_internal_set_bagidx(from._internal_bagidx());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_isremoved() != 0) {
    _this->_internal_set_isremoved(from._internal_isremoved());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfOperateEquipInBag::CopyFrom(const CSNtfOperateEquipInBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfOperateEquipInBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfOperateEquipInBag::IsInitialized() const {
  return true;
}

void CSNtfOperateEquipInBag::InternalSwap(CSNtfOperateEquipInBag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfOperateEquipInBag, _impl_.isremoved_)
      + sizeof(CSNtfOperateEquipInBag::_impl_.isremoved_)
      - PROTOBUF_FIELD_OFFSET(CSNtfOperateEquipInBag, _impl_.netid_)>(
          reinterpret_cast<char*>(&_impl_.netid_),
          reinterpret_cast<char*>(&other->_impl_.netid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfOperateEquipInBag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[108]);
}

// ===================================================================

class CSNtfOperateEquipOnChess::_Internal {
 public:
  static const ::msg::PositionInt2D& chesstilepos(const CSNtfOperateEquipOnChess* msg);
};

const ::msg::PositionInt2D&
CSNtfOperateEquipOnChess::_Internal::chesstilepos(const CSNtfOperateEquipOnChess* msg) {
  return *msg->_impl_.chesstilepos_;
}
CSNtfOperateEquipOnChess::CSNtfOperateEquipOnChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfOperateEquipOnChess)
}
CSNtfOperateEquipOnChess::CSNtfOperateEquipOnChess(const CSNtfOperateEquipOnChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfOperateEquipOnChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesstilepos_){nullptr}
    , decltype(_impl_.netid_){}
    , decltype(_impl_.playeridx_){}
    , decltype(_impl_.chessbagindex_){}
    , decltype(_impl_.isremoved_){}
    , decltype(_impl_.ischessonboard_){}
    , decltype(_impl_.isonbattle_){}
    , decltype(_impl_.equipmentid_){}
    , decltype(_impl_.chessslotindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chesstilepos()) {
    _this->_impl_.chesstilepos_ = new ::msg::PositionInt2D(*from._impl_.chesstilepos_);
  }
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chessslotindex_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.chessslotindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfOperateEquipOnChess)
}

inline void CSNtfOperateEquipOnChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesstilepos_){nullptr}
    , decltype(_impl_.netid_){0}
    , decltype(_impl_.playeridx_){0}
    , decltype(_impl_.chessbagindex_){0}
    , decltype(_impl_.isremoved_){false}
    , decltype(_impl_.ischessonboard_){false}
    , decltype(_impl_.isonbattle_){false}
    , decltype(_impl_.equipmentid_){0}
    , decltype(_impl_.chessslotindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfOperateEquipOnChess::~CSNtfOperateEquipOnChess() {
  // @@protoc_insertion_point(destructor:msg.CSNtfOperateEquipOnChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfOperateEquipOnChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chesstilepos_;
}

void CSNtfOperateEquipOnChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfOperateEquipOnChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfOperateEquipOnChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chesstilepos_ != nullptr) {
    delete _impl_.chesstilepos_;
  }
  _impl_.chesstilepos_ = nullptr;
  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chessslotindex_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.chessslotindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfOperateEquipOnChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsRemoved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isremoved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsChessOnBoard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ischessonboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessBagIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.chessbagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PositionInt2D ChessTilePos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chesstilepos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipmentId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.equipmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessSlotIndex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.chessslotindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsOnBattle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.isonbattle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfOperateEquipOnChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfOperateEquipOnChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playeridx(), target);
  }

  // bool IsRemoved = 3;
  if (this->_internal_isremoved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isremoved(), target);
  }

  // bool IsChessOnBoard = 4;
  if (this->_internal_ischessonboard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ischessonboard(), target);
  }

  // int32 ChessBagIndex = 5;
  if (this->_internal_chessbagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_chessbagindex(), target);
  }

  // .msg.PositionInt2D ChessTilePos = 6;
  if (this->_internal_has_chesstilepos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chesstilepos(this),
        _Internal::chesstilepos(this).GetCachedSize(), target, stream);
  }

  // int32 EquipmentId = 7;
  if (this->_internal_equipmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_equipmentid(), target);
  }

  // int32 ChessSlotIndex = 8;
  if (this->_internal_chessslotindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_chessslotindex(), target);
  }

  // bool IsOnBattle = 9;
  if (this->_internal_isonbattle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isonbattle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfOperateEquipOnChess)
  return target;
}

size_t CSNtfOperateEquipOnChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfOperateEquipOnChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PositionInt2D ChessTilePos = 6;
  if (this->_internal_has_chesstilepos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chesstilepos_);
  }

  // int32 NetId = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 ChessBagIndex = 5;
  if (this->_internal_chessbagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessbagindex());
  }

  // bool IsRemoved = 3;
  if (this->_internal_isremoved() != 0) {
    total_size += 1 + 1;
  }

  // bool IsChessOnBoard = 4;
  if (this->_internal_ischessonboard() != 0) {
    total_size += 1 + 1;
  }

  // bool IsOnBattle = 9;
  if (this->_internal_isonbattle() != 0) {
    total_size += 1 + 1;
  }

  // int32 EquipmentId = 7;
  if (this->_internal_equipmentid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipmentid());
  }

  // int32 ChessSlotIndex = 8;
  if (this->_internal_chessslotindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessslotindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfOperateEquipOnChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfOperateEquipOnChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfOperateEquipOnChess::GetClassData() const { return &_class_data_; }


void CSNtfOperateEquipOnChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfOperateEquipOnChess*>(&to_msg);
  auto& from = static_cast<const CSNtfOperateEquipOnChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfOperateEquipOnChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chesstilepos()) {
    _this->_internal_mutable_chesstilepos()->::msg::PositionInt2D::MergeFrom(
        from._internal_chesstilepos());
  }
  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_chessbagindex() != 0) {
    _this->_internal_set_chessbagindex(from._internal_chessbagindex());
  }
  if (from._internal_isremoved() != 0) {
    _this->_internal_set_isremoved(from._internal_isremoved());
  }
  if (from._internal_ischessonboard() != 0) {
    _this->_internal_set_ischessonboard(from._internal_ischessonboard());
  }
  if (from._internal_isonbattle() != 0) {
    _this->_internal_set_isonbattle(from._internal_isonbattle());
  }
  if (from._internal_equipmentid() != 0) {
    _this->_internal_set_equipmentid(from._internal_equipmentid());
  }
  if (from._internal_chessslotindex() != 0) {
    _this->_internal_set_chessslotindex(from._internal_chessslotindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfOperateEquipOnChess::CopyFrom(const CSNtfOperateEquipOnChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfOperateEquipOnChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfOperateEquipOnChess::IsInitialized() const {
  return true;
}

void CSNtfOperateEquipOnChess::InternalSwap(CSNtfOperateEquipOnChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfOperateEquipOnChess, _impl_.chessslotindex_)
      + sizeof(CSNtfOperateEquipOnChess::_impl_.chessslotindex_)
      - PROTOBUF_FIELD_OFFSET(CSNtfOperateEquipOnChess, _impl_.chesstilepos_)>(
          reinterpret_cast<char*>(&_impl_.chesstilepos_),
          reinterpret_cast<char*>(&other->_impl_.chesstilepos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfOperateEquipOnChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[109]);
}

// ===================================================================

class CSNtfAntiAddictionTime::_Internal {
 public:
};

CSNtfAntiAddictionTime::CSNtfAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfAntiAddictionTime)
}
CSNtfAntiAddictionTime::CSNtfAntiAddictionTime(const CSNtfAntiAddictionTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfAntiAddictionTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.totalonlineduration_){}
    , decltype(_impl_.totalofflineduration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.totalonlineduration_, &from._impl_.totalonlineduration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totalofflineduration_) -
    reinterpret_cast<char*>(&_impl_.totalonlineduration_)) + sizeof(_impl_.totalofflineduration_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfAntiAddictionTime)
}

inline void CSNtfAntiAddictionTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.totalonlineduration_){0}
    , decltype(_impl_.totalofflineduration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfAntiAddictionTime::~CSNtfAntiAddictionTime() {
  // @@protoc_insertion_point(destructor:msg.CSNtfAntiAddictionTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfAntiAddictionTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfAntiAddictionTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfAntiAddictionTime::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfAntiAddictionTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.totalonlineduration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totalofflineduration_) -
      reinterpret_cast<char*>(&_impl_.totalonlineduration_)) + sizeof(_impl_.totalofflineduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfAntiAddictionTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 TotalOnlineDuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.totalonlineduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TotalOfflineDuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.totalofflineduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfAntiAddictionTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfAntiAddictionTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TotalOnlineDuration = 1;
  if (this->_internal_totalonlineduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_totalonlineduration(), target);
  }

  // int32 TotalOfflineDuration = 2;
  if (this->_internal_totalofflineduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalofflineduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfAntiAddictionTime)
  return target;
}

size_t CSNtfAntiAddictionTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfAntiAddictionTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 TotalOnlineDuration = 1;
  if (this->_internal_totalonlineduration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_totalonlineduration());
  }

  // int32 TotalOfflineDuration = 2;
  if (this->_internal_totalofflineduration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_totalofflineduration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfAntiAddictionTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfAntiAddictionTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfAntiAddictionTime::GetClassData() const { return &_class_data_; }


void CSNtfAntiAddictionTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfAntiAddictionTime*>(&to_msg);
  auto& from = static_cast<const CSNtfAntiAddictionTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfAntiAddictionTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_totalonlineduration() != 0) {
    _this->_internal_set_totalonlineduration(from._internal_totalonlineduration());
  }
  if (from._internal_totalofflineduration() != 0) {
    _this->_internal_set_totalofflineduration(from._internal_totalofflineduration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfAntiAddictionTime::CopyFrom(const CSNtfAntiAddictionTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfAntiAddictionTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfAntiAddictionTime::IsInitialized() const {
  return true;
}

void CSNtfAntiAddictionTime::InternalSwap(CSNtfAntiAddictionTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfAntiAddictionTime, _impl_.totalofflineduration_)
      + sizeof(CSNtfAntiAddictionTime::_impl_.totalofflineduration_)
      - PROTOBUF_FIELD_OFFSET(CSNtfAntiAddictionTime, _impl_.totalonlineduration_)>(
          reinterpret_cast<char*>(&_impl_.totalonlineduration_),
          reinterpret_cast<char*>(&other->_impl_.totalonlineduration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfAntiAddictionTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[110]);
}

// ===================================================================

class CSNtfAntiAddictionTriggered::_Internal {
 public:
};

CSNtfAntiAddictionTriggered::CSNtfAntiAddictionTriggered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfAntiAddictionTriggered)
}
CSNtfAntiAddictionTriggered::CSNtfAntiAddictionTriggered(const CSNtfAntiAddictionTriggered& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSNtfAntiAddictionTriggered* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfAntiAddictionTriggered)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfAntiAddictionTriggered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfAntiAddictionTriggered::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSNtfAntiAddictionTriggered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[111]);
}

// ===================================================================

class CSNtfAntiAddictionRemoved::_Internal {
 public:
};

CSNtfAntiAddictionRemoved::CSNtfAntiAddictionRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfAntiAddictionRemoved)
}
CSNtfAntiAddictionRemoved::CSNtfAntiAddictionRemoved(const CSNtfAntiAddictionRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSNtfAntiAddictionRemoved* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfAntiAddictionRemoved)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfAntiAddictionRemoved::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfAntiAddictionRemoved::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSNtfAntiAddictionRemoved::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[112]);
}

// ===================================================================

class CSNtfUnsuggestedPhase::_Internal {
 public:
};

CSNtfUnsuggestedPhase::CSNtfUnsuggestedPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfUnsuggestedPhase)
}
CSNtfUnsuggestedPhase::CSNtfUnsuggestedPhase(const CSNtfUnsuggestedPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSNtfUnsuggestedPhase* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfUnsuggestedPhase)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfUnsuggestedPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfUnsuggestedPhase::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSNtfUnsuggestedPhase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[113]);
}

// ===================================================================

class CSNtfGameEnd::_Internal {
 public:
};

CSNtfGameEnd::CSNtfGameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfGameEnd)
}
CSNtfGameEnd::CSNtfGameEnd(const CSNtfGameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSNtfGameEnd* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfGameEnd)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfGameEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfGameEnd::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSNtfGameEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[114]);
}

// ===================================================================

class CSNtfCandyReward::_Internal {
 public:
};

CSNtfCandyReward::CSNtfCandyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfCandyReward)
}
CSNtfCandyReward::CSNtfCandyReward(const CSNtfCandyReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfCandyReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candycnt_){}
    , decltype(_impl_.playeridx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.candycnt_, &from._impl_.candycnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playeridx_) -
    reinterpret_cast<char*>(&_impl_.candycnt_)) + sizeof(_impl_.playeridx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfCandyReward)
}

inline void CSNtfCandyReward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candycnt_){0}
    , decltype(_impl_.playeridx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfCandyReward::~CSNtfCandyReward() {
  // @@protoc_insertion_point(destructor:msg.CSNtfCandyReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfCandyReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfCandyReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfCandyReward::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfCandyReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.candycnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playeridx_) -
      reinterpret_cast<char*>(&_impl_.candycnt_)) + sizeof(_impl_.playeridx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfCandyReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CandyCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.candycnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfCandyReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfCandyReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CandyCnt = 1;
  if (this->_internal_candycnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_candycnt(), target);
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playeridx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfCandyReward)
  return target;
}

size_t CSNtfCandyReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfCandyReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CandyCnt = 1;
  if (this->_internal_candycnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_candycnt());
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfCandyReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfCandyReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfCandyReward::GetClassData() const { return &_class_data_; }


void CSNtfCandyReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfCandyReward*>(&to_msg);
  auto& from = static_cast<const CSNtfCandyReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfCandyReward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_candycnt() != 0) {
    _this->_internal_set_candycnt(from._internal_candycnt());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfCandyReward::CopyFrom(const CSNtfCandyReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfCandyReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfCandyReward::IsInitialized() const {
  return true;
}

void CSNtfCandyReward::InternalSwap(CSNtfCandyReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfCandyReward, _impl_.playeridx_)
      + sizeof(CSNtfCandyReward::_impl_.playeridx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfCandyReward, _impl_.candycnt_)>(
          reinterpret_cast<char*>(&_impl_.candycnt_),
          reinterpret_cast<char*>(&other->_impl_.candycnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfCandyReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[115]);
}

// ===================================================================

class CSNtfWinStreak::_Internal {
 public:
};

CSNtfWinStreak::CSNtfWinStreak(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfWinStreak)
}
CSNtfWinStreak::CSNtfWinStreak(const CSNtfWinStreak& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfWinStreak* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winstreak_){}
    , decltype(_impl_.playeridx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.winstreak_, &from._impl_.winstreak_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playeridx_) -
    reinterpret_cast<char*>(&_impl_.winstreak_)) + sizeof(_impl_.playeridx_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfWinStreak)
}

inline void CSNtfWinStreak::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.winstreak_){0}
    , decltype(_impl_.playeridx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfWinStreak::~CSNtfWinStreak() {
  // @@protoc_insertion_point(destructor:msg.CSNtfWinStreak)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfWinStreak::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfWinStreak::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfWinStreak::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfWinStreak)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.winstreak_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playeridx_) -
      reinterpret_cast<char*>(&_impl_.winstreak_)) + sizeof(_impl_.playeridx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfWinStreak::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 WinStreak = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.winstreak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfWinStreak::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfWinStreak)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 WinStreak = 1;
  if (this->_internal_winstreak() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_winstreak(), target);
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playeridx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfWinStreak)
  return target;
}

size_t CSNtfWinStreak::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfWinStreak)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 WinStreak = 1;
  if (this->_internal_winstreak() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_winstreak());
  }

  // int32 PlayerIdx = 2;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfWinStreak::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfWinStreak::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfWinStreak::GetClassData() const { return &_class_data_; }


void CSNtfWinStreak::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfWinStreak*>(&to_msg);
  auto& from = static_cast<const CSNtfWinStreak&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfWinStreak)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_winstreak() != 0) {
    _this->_internal_set_winstreak(from._internal_winstreak());
  }
  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfWinStreak::CopyFrom(const CSNtfWinStreak& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfWinStreak)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfWinStreak::IsInitialized() const {
  return true;
}

void CSNtfWinStreak::InternalSwap(CSNtfWinStreak* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfWinStreak, _impl_.playeridx_)
      + sizeof(CSNtfWinStreak::_impl_.playeridx_)
      - PROTOBUF_FIELD_OFFSET(CSNtfWinStreak, _impl_.winstreak_)>(
          reinterpret_cast<char*>(&_impl_.winstreak_),
          reinterpret_cast<char*>(&other->_impl_.winstreak_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfWinStreak::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[116]);
}

// ===================================================================

class CSNtfPvpState::_Internal {
 public:
};

CSNtfPvpState::CSNtfPvpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpState)
}
CSNtfPvpState::CSNtfPvpState(const CSNtfPvpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pvptcpaddr_){}
    , decltype(_impl_.pvpid_){}
    , decltype(_impl_.gameid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pvptcpaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvptcpaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pvptcpaddr().empty()) {
    _this->_impl_.pvptcpaddr_.Set(from._internal_pvptcpaddr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pvpid_, &from._impl_.pvpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gameid_) -
    reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.gameid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpState)
}

inline void CSNtfPvpState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pvptcpaddr_){}
    , decltype(_impl_.pvpid_){0}
    , decltype(_impl_.gameid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pvptcpaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvptcpaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSNtfPvpState::~CSNtfPvpState() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pvptcpaddr_.Destroy();
}

void CSNtfPvpState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pvptcpaddr_.ClearToEmpty();
  ::memset(&_impl_.pvpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gameid_) -
      reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.gameid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PvpID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GameID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PvpTCPAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pvptcpaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpState.PvpTCPAddr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PvpID = 1;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pvpid(), target);
  }

  // int32 GameID = 2;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gameid(), target);
  }

  // string PvpTCPAddr = 3;
  if (!this->_internal_pvptcpaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pvptcpaddr().data(), static_cast<int>(this->_internal_pvptcpaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpState.PvpTCPAddr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pvptcpaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpState)
  return target;
}

size_t CSNtfPvpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PvpTCPAddr = 3;
  if (!this->_internal_pvptcpaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvptcpaddr());
  }

  // int32 PvpID = 1;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pvpid());
  }

  // int32 GameID = 2;
  if (this->_internal_gameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpState::GetClassData() const { return &_class_data_; }


void CSNtfPvpState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpState*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pvptcpaddr().empty()) {
    _this->_internal_set_pvptcpaddr(from._internal_pvptcpaddr());
  }
  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_gameid() != 0) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpState::CopyFrom(const CSNtfPvpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpState::IsInitialized() const {
  return true;
}

void CSNtfPvpState::InternalSwap(CSNtfPvpState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pvptcpaddr_, lhs_arena,
      &other->_impl_.pvptcpaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPvpState, _impl_.gameid_)
      + sizeof(CSNtfPvpState::_impl_.gameid_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPvpState, _impl_.pvpid_)>(
          reinterpret_cast<char*>(&_impl_.pvpid_),
          reinterpret_cast<char*>(&other->_impl_.pvpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[117]);
}

// ===================================================================

class CSNtfSetAutoUpgradeCharacter::_Internal {
 public:
};

CSNtfSetAutoUpgradeCharacter::CSNtfSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfSetAutoUpgradeCharacter)
}
CSNtfSetAutoUpgradeCharacter::CSNtfSetAutoUpgradeCharacter(const CSNtfSetAutoUpgradeCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfSetAutoUpgradeCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.switchon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.switchon_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.switchon_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfSetAutoUpgradeCharacter)
}

inline void CSNtfSetAutoUpgradeCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.switchon_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfSetAutoUpgradeCharacter::~CSNtfSetAutoUpgradeCharacter() {
  // @@protoc_insertion_point(destructor:msg.CSNtfSetAutoUpgradeCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfSetAutoUpgradeCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfSetAutoUpgradeCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfSetAutoUpgradeCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfSetAutoUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.switchon_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.switchon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfSetAutoUpgradeCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool SwitchOn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.switchon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfSetAutoUpgradeCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfSetAutoUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // bool SwitchOn = 2;
  if (this->_internal_switchon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_switchon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfSetAutoUpgradeCharacter)
  return target;
}

size_t CSNtfSetAutoUpgradeCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfSetAutoUpgradeCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // bool SwitchOn = 2;
  if (this->_internal_switchon() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfSetAutoUpgradeCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfSetAutoUpgradeCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfSetAutoUpgradeCharacter::GetClassData() const { return &_class_data_; }


void CSNtfSetAutoUpgradeCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfSetAutoUpgradeCharacter*>(&to_msg);
  auto& from = static_cast<const CSNtfSetAutoUpgradeCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfSetAutoUpgradeCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_switchon() != 0) {
    _this->_internal_set_switchon(from._internal_switchon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfSetAutoUpgradeCharacter::CopyFrom(const CSNtfSetAutoUpgradeCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfSetAutoUpgradeCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfSetAutoUpgradeCharacter::IsInitialized() const {
  return true;
}

void CSNtfSetAutoUpgradeCharacter::InternalSwap(CSNtfSetAutoUpgradeCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfSetAutoUpgradeCharacter, _impl_.switchon_)
      + sizeof(CSNtfSetAutoUpgradeCharacter::_impl_.switchon_)
      - PROTOBUF_FIELD_OFFSET(CSNtfSetAutoUpgradeCharacter, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfSetAutoUpgradeCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[118]);
}

// ===================================================================

class CSNtfManuallyUpgradeCharacter::_Internal {
 public:
};

CSNtfManuallyUpgradeCharacter::CSNtfManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfManuallyUpgradeCharacter)
}
CSNtfManuallyUpgradeCharacter::CSNtfManuallyUpgradeCharacter(const CSNtfManuallyUpgradeCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfManuallyUpgradeCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){}
    , decltype(_impl_.bagindex_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , decltype(_impl_.isinbag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playeridx_, &from._impl_.playeridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isinbag_) -
    reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.isinbag_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfManuallyUpgradeCharacter)
}

inline void CSNtfManuallyUpgradeCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridx_){0}
    , decltype(_impl_.bagindex_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , decltype(_impl_.isinbag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfManuallyUpgradeCharacter::~CSNtfManuallyUpgradeCharacter() {
  // @@protoc_insertion_point(destructor:msg.CSNtfManuallyUpgradeCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfManuallyUpgradeCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfManuallyUpgradeCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfManuallyUpgradeCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfManuallyUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playeridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isinbag_) -
      reinterpret_cast<char*>(&_impl_.playeridx_)) + sizeof(_impl_.isinbag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfManuallyUpgradeCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playeridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BagIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Ty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsInBag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isinbag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfManuallyUpgradeCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfManuallyUpgradeCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playeridx(), target);
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bagindex(), target);
  }

  // int32 Tx = 3;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tx(), target);
  }

  // int32 Ty = 4;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ty(), target);
  }

  // bool IsInBag = 5;
  if (this->_internal_isinbag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isinbag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfManuallyUpgradeCharacter)
  return target;
}

size_t CSNtfManuallyUpgradeCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfManuallyUpgradeCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIdx = 1;
  if (this->_internal_playeridx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playeridx());
  }

  // int32 BagIndex = 2;
  if (this->_internal_bagindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bagindex());
  }

  // int32 Tx = 3;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // int32 Ty = 4;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  // bool IsInBag = 5;
  if (this->_internal_isinbag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfManuallyUpgradeCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfManuallyUpgradeCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfManuallyUpgradeCharacter::GetClassData() const { return &_class_data_; }


void CSNtfManuallyUpgradeCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfManuallyUpgradeCharacter*>(&to_msg);
  auto& from = static_cast<const CSNtfManuallyUpgradeCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfManuallyUpgradeCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playeridx() != 0) {
    _this->_internal_set_playeridx(from._internal_playeridx());
  }
  if (from._internal_bagindex() != 0) {
    _this->_internal_set_bagindex(from._internal_bagindex());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  if (from._internal_isinbag() != 0) {
    _this->_internal_set_isinbag(from._internal_isinbag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfManuallyUpgradeCharacter::CopyFrom(const CSNtfManuallyUpgradeCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfManuallyUpgradeCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfManuallyUpgradeCharacter::IsInitialized() const {
  return true;
}

void CSNtfManuallyUpgradeCharacter::InternalSwap(CSNtfManuallyUpgradeCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfManuallyUpgradeCharacter, _impl_.isinbag_)
      + sizeof(CSNtfManuallyUpgradeCharacter::_impl_.isinbag_)
      - PROTOBUF_FIELD_OFFSET(CSNtfManuallyUpgradeCharacter, _impl_.playeridx_)>(
          reinterpret_cast<char*>(&_impl_.playeridx_),
          reinterpret_cast<char*>(&other->_impl_.playeridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfManuallyUpgradeCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[119]);
}

// ===================================================================

class CSNtfQuitBattle::_Internal {
 public:
};

CSNtfQuitBattle::CSNtfQuitBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfQuitBattle)
}
CSNtfQuitBattle::CSNtfQuitBattle(const CSNtfQuitBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfQuitBattle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfQuitBattle)
}

inline void CSNtfQuitBattle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfQuitBattle::~CSNtfQuitBattle() {
  // @@protoc_insertion_point(destructor:msg.CSNtfQuitBattle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfQuitBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfQuitBattle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfQuitBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfQuitBattle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfQuitBattle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfQuitBattle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfQuitBattle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfQuitBattle)
  return target;
}

size_t CSNtfQuitBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfQuitBattle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfQuitBattle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfQuitBattle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfQuitBattle::GetClassData() const { return &_class_data_; }


void CSNtfQuitBattle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfQuitBattle*>(&to_msg);
  auto& from = static_cast<const CSNtfQuitBattle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfQuitBattle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfQuitBattle::CopyFrom(const CSNtfQuitBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfQuitBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfQuitBattle::IsInitialized() const {
  return true;
}

void CSNtfQuitBattle::InternalSwap(CSNtfQuitBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfQuitBattle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[120]);
}

// ===================================================================

class CSNtfRoundResult::_Internal {
 public:
};

CSNtfRoundResult::CSNtfRoundResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfRoundResult)
}
CSNtfRoundResult::CSNtfRoundResult(const CSNtfRoundResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfRoundResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.leftfriendcount_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfRoundResult)
}

inline void CSNtfRoundResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.leftfriendcount_){0}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfRoundResult::~CSNtfRoundResult() {
  // @@protoc_insertion_point(destructor:msg.CSNtfRoundResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfRoundResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfRoundResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfRoundResult::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfRoundResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfRoundResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.WINTYPE Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::msg::WINTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 LeftFriendCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.leftfriendcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfRoundResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfRoundResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.WINTYPE Result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 LeftFriendCount = 2;
  if (this->_internal_leftfriendcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftfriendcount(), target);
  }

  // int32 Damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfRoundResult)
  return target;
}

size_t CSNtfRoundResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfRoundResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.WINTYPE Result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 LeftFriendCount = 2;
  if (this->_internal_leftfriendcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leftfriendcount());
  }

  // int32 Damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfRoundResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfRoundResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfRoundResult::GetClassData() const { return &_class_data_; }


void CSNtfRoundResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfRoundResult*>(&to_msg);
  auto& from = static_cast<const CSNtfRoundResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfRoundResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_leftfriendcount() != 0) {
    _this->_internal_set_leftfriendcount(from._internal_leftfriendcount());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfRoundResult::CopyFrom(const CSNtfRoundResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfRoundResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfRoundResult::IsInitialized() const {
  return true;
}

void CSNtfRoundResult::InternalSwap(CSNtfRoundResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfRoundResult, _impl_.damage_)
      + sizeof(CSNtfRoundResult::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(CSNtfRoundResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfRoundResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[121]);
}

// ===================================================================

class CSNtfSuspendGame::_Internal {
 public:
};

CSNtfSuspendGame::CSNtfSuspendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfSuspendGame)
}
CSNtfSuspendGame::CSNtfSuspendGame(const CSNtfSuspendGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfSuspendGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.suspend_){}
    , decltype(_impl_.resumetime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    _this->_impl_.pid_.Set(from._internal_pid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.suspend_, &from._impl_.suspend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resumetime_) -
    reinterpret_cast<char*>(&_impl_.suspend_)) + sizeof(_impl_.resumetime_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfSuspendGame)
}

inline void CSNtfSuspendGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.suspend_){false}
    , decltype(_impl_.resumetime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSNtfSuspendGame::~CSNtfSuspendGame() {
  // @@protoc_insertion_point(destructor:msg.CSNtfSuspendGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfSuspendGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pid_.Destroy();
}

void CSNtfSuspendGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfSuspendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfSuspendGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_.ClearToEmpty();
  ::memset(&_impl_.suspend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resumetime_) -
      reinterpret_cast<char*>(&_impl_.suspend_)) + sizeof(_impl_.resumetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfSuspendGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool susPend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.suspend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfSuspendGame.pid"));
        } else
          goto handle_unusual;
        continue;
      // int32 resumeTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.resumetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfSuspendGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfSuspendGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool susPend = 1;
  if (this->_internal_suspend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_suspend(), target);
  }

  // string pid = 2;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfSuspendGame.pid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pid(), target);
  }

  // int32 resumeTime = 3;
  if (this->_internal_resumetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_resumetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfSuspendGame)
  return target;
}

size_t CSNtfSuspendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfSuspendGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pid = 2;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // bool susPend = 1;
  if (this->_internal_suspend() != 0) {
    total_size += 1 + 1;
  }

  // int32 resumeTime = 3;
  if (this->_internal_resumetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resumetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfSuspendGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfSuspendGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfSuspendGame::GetClassData() const { return &_class_data_; }


void CSNtfSuspendGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfSuspendGame*>(&to_msg);
  auto& from = static_cast<const CSNtfSuspendGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfSuspendGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pid().empty()) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_suspend() != 0) {
    _this->_internal_set_suspend(from._internal_suspend());
  }
  if (from._internal_resumetime() != 0) {
    _this->_internal_set_resumetime(from._internal_resumetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfSuspendGame::CopyFrom(const CSNtfSuspendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfSuspendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfSuspendGame::IsInitialized() const {
  return true;
}

void CSNtfSuspendGame::InternalSwap(CSNtfSuspendGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pid_, lhs_arena,
      &other->_impl_.pid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfSuspendGame, _impl_.resumetime_)
      + sizeof(CSNtfSuspendGame::_impl_.resumetime_)
      - PROTOBUF_FIELD_OFFSET(CSNtfSuspendGame, _impl_.suspend_)>(
          reinterpret_cast<char*>(&_impl_.suspend_),
          reinterpret_cast<char*>(&other->_impl_.suspend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfSuspendGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[122]);
}

// ===================================================================

class CSNtfPassThrough::_Internal {
 public:
};

CSNtfPassThrough::CSNtfPassThrough(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPassThrough)
}
CSNtfPassThrough::CSNtfPassThrough(const CSNtfPassThrough& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPassThrough* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPassThrough)
}

inline void CSNtfPassThrough::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSNtfPassThrough::~CSNtfPassThrough() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPassThrough)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPassThrough::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CSNtfPassThrough::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPassThrough::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPassThrough)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPassThrough::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPassThrough::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPassThrough)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPassThrough)
  return target;
}

size_t CSNtfPassThrough::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPassThrough)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPassThrough::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPassThrough::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPassThrough::GetClassData() const { return &_class_data_; }


void CSNtfPassThrough::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPassThrough*>(&to_msg);
  auto& from = static_cast<const CSNtfPassThrough&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPassThrough)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPassThrough::CopyFrom(const CSNtfPassThrough& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPassThrough)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPassThrough::IsInitialized() const {
  return true;
}

void CSNtfPassThrough::InternalSwap(CSNtfPassThrough* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPassThrough::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[123]);
}

// ===================================================================

class CSNtfUpdateBattleResult::_Internal {
 public:
};

void CSNtfUpdateBattleResult::clear_camp() {
  _impl_.camp_.Clear();
}
CSNtfUpdateBattleResult::CSNtfUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfUpdateBattleResult)
}
CSNtfUpdateBattleResult::CSNtfUpdateBattleResult(const CSNtfUpdateBattleResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfUpdateBattleResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){from._impl_.camp_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfUpdateBattleResult)
}

inline void CSNtfUpdateBattleResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfUpdateBattleResult::~CSNtfUpdateBattleResult() {
  // @@protoc_insertion_point(destructor:msg.CSNtfUpdateBattleResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfUpdateBattleResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camp_.~RepeatedPtrField();
}

void CSNtfUpdateBattleResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfUpdateBattleResult::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfUpdateBattleResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camp_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfUpdateBattleResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTCampData Camp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfUpdateBattleResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfUpdateBattleResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTCampData Camp = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camp_size()); i < n; i++) {
    const auto& repfield = this->_internal_camp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfUpdateBattleResult)
  return target;
}

size_t CSNtfUpdateBattleResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfUpdateBattleResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTCampData Camp = 1;
  total_size += 1UL * this->_internal_camp_size();
  for (const auto& msg : this->_impl_.camp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfUpdateBattleResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfUpdateBattleResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfUpdateBattleResult::GetClassData() const { return &_class_data_; }


void CSNtfUpdateBattleResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfUpdateBattleResult*>(&to_msg);
  auto& from = static_cast<const CSNtfUpdateBattleResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfUpdateBattleResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.camp_.MergeFrom(from._impl_.camp_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfUpdateBattleResult::CopyFrom(const CSNtfUpdateBattleResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfUpdateBattleResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfUpdateBattleResult::IsInitialized() const {
  return true;
}

void CSNtfUpdateBattleResult::InternalSwap(CSNtfUpdateBattleResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camp_.InternalSwap(&other->_impl_.camp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfUpdateBattleResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[124]);
}

// ===================================================================

class CSNtfAA::_Internal {
 public:
};

CSNtfAA::CSNtfAA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfAA)
}
CSNtfAA::CSNtfAA(const CSNtfAA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfAA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.totalonlineduration_){}
    , decltype(_impl_.totalofflineduration_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.totalonlineduration_, &from._impl_.totalonlineduration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.totalonlineduration_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfAA)
}

inline void CSNtfAA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.totalonlineduration_){int64_t{0}}
    , decltype(_impl_.totalofflineduration_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfAA::~CSNtfAA() {
  // @@protoc_insertion_point(destructor:msg.CSNtfAA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfAA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfAA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfAA::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfAA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.totalonlineduration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.totalonlineduration_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfAA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.AddictionState State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::msg::AddictionState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 TotalOnlineDuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.totalonlineduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalOfflineDuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.totalofflineduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfAA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfAA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.AddictionState State = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int64 TotalOnlineDuration = 2;
  if (this->_internal_totalonlineduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_totalonlineduration(), target);
  }

  // int64 TotalOfflineDuration = 3;
  if (this->_internal_totalofflineduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_totalofflineduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfAA)
  return target;
}

size_t CSNtfAA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfAA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TotalOnlineDuration = 2;
  if (this->_internal_totalonlineduration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalonlineduration());
  }

  // int64 TotalOfflineDuration = 3;
  if (this->_internal_totalofflineduration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_totalofflineduration());
  }

  // .msg.AddictionState State = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfAA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfAA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfAA::GetClassData() const { return &_class_data_; }


void CSNtfAA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfAA*>(&to_msg);
  auto& from = static_cast<const CSNtfAA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfAA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_totalonlineduration() != 0) {
    _this->_internal_set_totalonlineduration(from._internal_totalonlineduration());
  }
  if (from._internal_totalofflineduration() != 0) {
    _this->_internal_set_totalofflineduration(from._internal_totalofflineduration());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfAA::CopyFrom(const CSNtfAA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfAA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfAA::IsInitialized() const {
  return true;
}

void CSNtfAA::InternalSwap(CSNtfAA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfAA, _impl_.state_)
      + sizeof(CSNtfAA::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CSNtfAA, _impl_.totalonlineduration_)>(
          reinterpret_cast<char*>(&_impl_.totalonlineduration_),
          reinterpret_cast<char*>(&other->_impl_.totalonlineduration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfAA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[125]);
}

// ===================================================================

class Division::_Internal {
 public:
};

Division::Division(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Division)
}
Division::Division(const Division& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Division* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){}
    , decltype(_impl_.equipid_){}
    , decltype(_impl_.destplayerindex_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.netid_, &from._impl_.netid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ty_) -
    reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.ty_));
  // @@protoc_insertion_point(copy_constructor:msg.Division)
}

inline void Division::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netid_){0}
    , decltype(_impl_.equipid_){0}
    , decltype(_impl_.destplayerindex_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Division::~Division() {
  // @@protoc_insertion_point(destructor:msg.Division)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Division::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Division::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Division::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Division)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.netid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ty_) -
      reinterpret_cast<char*>(&_impl_.netid_)) + sizeof(_impl_.ty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Division::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 NetID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 EquipID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestPlayerIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.destplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Division::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Division)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NetID = 1;
  if (this->_internal_netid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_netid(), target);
  }

  // int32 EquipID = 2;
  if (this->_internal_equipid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_equipid(), target);
  }

  // int32 DestPlayerIndex = 3;
  if (this->_internal_destplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_destplayerindex(), target);
  }

  // int32 TX = 4;
  if (this->_internal_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tx(), target);
  }

  // int32 TY = 5;
  if (this->_internal_ty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Division)
  return target;
}

size_t Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Division)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 NetID = 1;
  if (this->_internal_netid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_netid());
  }

  // int32 EquipID = 2;
  if (this->_internal_equipid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipid());
  }

  // int32 DestPlayerIndex = 3;
  if (this->_internal_destplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destplayerindex());
  }

  // int32 TX = 4;
  if (this->_internal_tx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tx());
  }

  // int32 TY = 5;
  if (this->_internal_ty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Division::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Division::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Division::GetClassData() const { return &_class_data_; }


void Division::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Division*>(&to_msg);
  auto& from = static_cast<const Division&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Division)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_netid() != 0) {
    _this->_internal_set_netid(from._internal_netid());
  }
  if (from._internal_equipid() != 0) {
    _this->_internal_set_equipid(from._internal_equipid());
  }
  if (from._internal_destplayerindex() != 0) {
    _this->_internal_set_destplayerindex(from._internal_destplayerindex());
  }
  if (from._internal_tx() != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_ty() != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Division::CopyFrom(const Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Division::IsInitialized() const {
  return true;
}

void Division::InternalSwap(Division* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Division, _impl_.ty_)
      + sizeof(Division::_impl_.ty_)
      - PROTOBUF_FIELD_OFFSET(Division, _impl_.netid_)>(
          reinterpret_cast<char*>(&_impl_.netid_),
          reinterpret_cast<char*>(&other->_impl_.netid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Division::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[126]);
}

// ===================================================================

class CSNtfEquipDivision::_Internal {
 public:
};

CSNtfEquipDivision::CSNtfEquipDivision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfEquipDivision)
}
CSNtfEquipDivision::CSNtfEquipDivision(const CSNtfEquipDivision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfEquipDivision* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.divisions_){from._impl_.divisions_}
    , decltype(_impl_.srcplayerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.srcplayerindex_ = from._impl_.srcplayerindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfEquipDivision)
}

inline void CSNtfEquipDivision::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.divisions_){arena}
    , decltype(_impl_.srcplayerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfEquipDivision::~CSNtfEquipDivision() {
  // @@protoc_insertion_point(destructor:msg.CSNtfEquipDivision)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfEquipDivision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.divisions_.~RepeatedPtrField();
}

void CSNtfEquipDivision::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfEquipDivision::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfEquipDivision)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.divisions_.Clear();
  _impl_.srcplayerindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfEquipDivision::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SrcPlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Division Divisions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_divisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfEquipDivision::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfEquipDivision)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcplayerindex(), target);
  }

  // repeated .msg.Division Divisions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_divisions_size()); i < n; i++) {
    const auto& repfield = this->_internal_divisions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfEquipDivision)
  return target;
}

size_t CSNtfEquipDivision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfEquipDivision)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Division Divisions = 2;
  total_size += 1UL * this->_internal_divisions_size();
  for (const auto& msg : this->_impl_.divisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcplayerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfEquipDivision::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfEquipDivision::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfEquipDivision::GetClassData() const { return &_class_data_; }


void CSNtfEquipDivision::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfEquipDivision*>(&to_msg);
  auto& from = static_cast<const CSNtfEquipDivision&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfEquipDivision)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.divisions_.MergeFrom(from._impl_.divisions_);
  if (from._internal_srcplayerindex() != 0) {
    _this->_internal_set_srcplayerindex(from._internal_srcplayerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfEquipDivision::CopyFrom(const CSNtfEquipDivision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfEquipDivision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfEquipDivision::IsInitialized() const {
  return true;
}

void CSNtfEquipDivision::InternalSwap(CSNtfEquipDivision* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.divisions_.InternalSwap(&other->_impl_.divisions_);
  swap(_impl_.srcplayerindex_, other->_impl_.srcplayerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfEquipDivision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[127]);
}

// ===================================================================

class CSNtfVisitPlayer::_Internal {
 public:
};

CSNtfVisitPlayer::CSNtfVisitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfVisitPlayer)
}
CSNtfVisitPlayer::CSNtfVisitPlayer(const CSNtfVisitPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfVisitPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcplayerindex_){}
    , decltype(_impl_.destplayerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.srcplayerindex_, &from._impl_.srcplayerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destplayerindex_) -
    reinterpret_cast<char*>(&_impl_.srcplayerindex_)) + sizeof(_impl_.destplayerindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfVisitPlayer)
}

inline void CSNtfVisitPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcplayerindex_){0}
    , decltype(_impl_.destplayerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfVisitPlayer::~CSNtfVisitPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSNtfVisitPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfVisitPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfVisitPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfVisitPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfVisitPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.srcplayerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destplayerindex_) -
      reinterpret_cast<char*>(&_impl_.srcplayerindex_)) + sizeof(_impl_.destplayerindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfVisitPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SrcPlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DestPlayerIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.destplayerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfVisitPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfVisitPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcplayerindex(), target);
  }

  // int32 DestPlayerIndex = 2;
  if (this->_internal_destplayerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_destplayerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfVisitPlayer)
  return target;
}

size_t CSNtfVisitPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfVisitPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 SrcPlayerIndex = 1;
  if (this->_internal_srcplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcplayerindex());
  }

  // int32 DestPlayerIndex = 2;
  if (this->_internal_destplayerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destplayerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfVisitPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfVisitPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfVisitPlayer::GetClassData() const { return &_class_data_; }


void CSNtfVisitPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfVisitPlayer*>(&to_msg);
  auto& from = static_cast<const CSNtfVisitPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfVisitPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_srcplayerindex() != 0) {
    _this->_internal_set_srcplayerindex(from._internal_srcplayerindex());
  }
  if (from._internal_destplayerindex() != 0) {
    _this->_internal_set_destplayerindex(from._internal_destplayerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfVisitPlayer::CopyFrom(const CSNtfVisitPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfVisitPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfVisitPlayer::IsInitialized() const {
  return true;
}

void CSNtfVisitPlayer::InternalSwap(CSNtfVisitPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfVisitPlayer, _impl_.destplayerindex_)
      + sizeof(CSNtfVisitPlayer::_impl_.destplayerindex_)
      - PROTOBUF_FIELD_OFFSET(CSNtfVisitPlayer, _impl_.srcplayerindex_)>(
          reinterpret_cast<char*>(&_impl_.srcplayerindex_),
          reinterpret_cast<char*>(&other->_impl_.srcplayerindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfVisitPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[128]);
}

// ===================================================================

class CSNtfLeaveGameEarly::_Internal {
 public:
};

CSNtfLeaveGameEarly::CSNtfLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfLeaveGameEarly)
}
CSNtfLeaveGameEarly::CSNtfLeaveGameEarly(const CSNtfLeaveGameEarly& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfLeaveGameEarly* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfLeaveGameEarly)
}

inline void CSNtfLeaveGameEarly::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfLeaveGameEarly::~CSNtfLeaveGameEarly() {
  // @@protoc_insertion_point(destructor:msg.CSNtfLeaveGameEarly)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfLeaveGameEarly::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSNtfLeaveGameEarly::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfLeaveGameEarly::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfLeaveGameEarly)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfLeaveGameEarly::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfLeaveGameEarly::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfLeaveGameEarly)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfLeaveGameEarly)
  return target;
}

size_t CSNtfLeaveGameEarly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfLeaveGameEarly)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfLeaveGameEarly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfLeaveGameEarly::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfLeaveGameEarly::GetClassData() const { return &_class_data_; }


void CSNtfLeaveGameEarly::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfLeaveGameEarly*>(&to_msg);
  auto& from = static_cast<const CSNtfLeaveGameEarly&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfLeaveGameEarly)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfLeaveGameEarly::CopyFrom(const CSNtfLeaveGameEarly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfLeaveGameEarly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfLeaveGameEarly::IsInitialized() const {
  return true;
}

void CSNtfLeaveGameEarly::InternalSwap(CSNtfLeaveGameEarly* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfLeaveGameEarly::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[129]);
}

// ===================================================================

class CSNtfPvpAffixTrigger::_Internal {
 public:
};

CSNtfPvpAffixTrigger::CSNtfPvpAffixTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpAffixTrigger)
}
CSNtfPvpAffixTrigger::CSNtfPvpAffixTrigger(const CSNtfPvpAffixTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpAffixTrigger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affix_){from._impl_.affix_}
    , decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpAffixTrigger)
}

inline void CSNtfPvpAffixTrigger::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affix_){arena}
    , decltype(_impl_.playerindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfPvpAffixTrigger::~CSNtfPvpAffixTrigger() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpAffixTrigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpAffixTrigger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.affix_.~RepeatedPtrField();
}

void CSNtfPvpAffixTrigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpAffixTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpAffixTrigger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affix_.Clear();
  _impl_.playerindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpAffixTrigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.AffixTriggerInfo Affix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpAffixTrigger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpAffixTrigger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerindex(), target);
  }

  // repeated .msg.AffixTriggerInfo Affix = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_affix_size()); i < n; i++) {
    const auto& repfield = this->_internal_affix(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpAffixTrigger)
  return target;
}

size_t CSNtfPvpAffixTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpAffixTrigger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.AffixTriggerInfo Affix = 3;
  total_size += 1UL * this->_internal_affix_size();
  for (const auto& msg : this->_impl_.affix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpAffixTrigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpAffixTrigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpAffixTrigger::GetClassData() const { return &_class_data_; }


void CSNtfPvpAffixTrigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpAffixTrigger*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpAffixTrigger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpAffixTrigger)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.affix_.MergeFrom(from._impl_.affix_);
  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpAffixTrigger::CopyFrom(const CSNtfPvpAffixTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpAffixTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpAffixTrigger::IsInitialized() const {
  return true;
}

void CSNtfPvpAffixTrigger::InternalSwap(CSNtfPvpAffixTrigger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.affix_.InternalSwap(&other->_impl_.affix_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpAffixTrigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[130]);
}

// ===================================================================

class AffixTriggerInfo::_Internal {
 public:
};

AffixTriggerInfo::AffixTriggerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.AffixTriggerInfo)
}
AffixTriggerInfo::AffixTriggerInfo(const AffixTriggerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AffixTriggerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.affixid_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.chesshandle_){}
    , decltype(_impl_.chessid_){}
    , decltype(_impl_.frameidx_){}
    , decltype(_impl_.isonlytrigger_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.affixid_, &from._impl_.affixid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isonlytrigger_) -
    reinterpret_cast<char*>(&_impl_.affixid_)) + sizeof(_impl_.isonlytrigger_));
  // @@protoc_insertion_point(copy_constructor:msg.AffixTriggerInfo)
}

inline void AffixTriggerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.affixid_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.chesshandle_){0u}
    , decltype(_impl_.chessid_){0u}
    , decltype(_impl_.frameidx_){0u}
    , decltype(_impl_.isonlytrigger_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AffixTriggerInfo::~AffixTriggerInfo() {
  // @@protoc_insertion_point(destructor:msg.AffixTriggerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AffixTriggerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AffixTriggerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AffixTriggerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AffixTriggerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.affixid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isonlytrigger_) -
      reinterpret_cast<char*>(&_impl_.affixid_)) + sizeof(_impl_.isonlytrigger_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AffixTriggerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 AffixId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.affixid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessHandle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chesshandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chessid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FrameIdx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.frameidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsOnlyTrigger = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isonlytrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AffixTriggerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AffixTriggerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 AffixId = 1;
  if (this->_internal_affixid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_affixid(), target);
  }

  // float Value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // uint32 ChessHandle = 3;
  if (this->_internal_chesshandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chesshandle(), target);
  }

  // uint32 ChessId = 4;
  if (this->_internal_chessid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_chessid(), target);
  }

  // uint32 FrameIdx = 5;
  if (this->_internal_frameidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_frameidx(), target);
  }

  // bool IsOnlyTrigger = 6;
  if (this->_internal_isonlytrigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isonlytrigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AffixTriggerInfo)
  return target;
}

size_t AffixTriggerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AffixTriggerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 AffixId = 1;
  if (this->_internal_affixid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_affixid());
  }

  // float Value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  // uint32 ChessHandle = 3;
  if (this->_internal_chesshandle() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chesshandle());
  }

  // uint32 ChessId = 4;
  if (this->_internal_chessid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessid());
  }

  // uint32 FrameIdx = 5;
  if (this->_internal_frameidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frameidx());
  }

  // bool IsOnlyTrigger = 6;
  if (this->_internal_isonlytrigger() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AffixTriggerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AffixTriggerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AffixTriggerInfo::GetClassData() const { return &_class_data_; }


void AffixTriggerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AffixTriggerInfo*>(&to_msg);
  auto& from = static_cast<const AffixTriggerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.AffixTriggerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_affixid() != 0) {
    _this->_internal_set_affixid(from._internal_affixid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_chesshandle() != 0) {
    _this->_internal_set_chesshandle(from._internal_chesshandle());
  }
  if (from._internal_chessid() != 0) {
    _this->_internal_set_chessid(from._internal_chessid());
  }
  if (from._internal_frameidx() != 0) {
    _this->_internal_set_frameidx(from._internal_frameidx());
  }
  if (from._internal_isonlytrigger() != 0) {
    _this->_internal_set_isonlytrigger(from._internal_isonlytrigger());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AffixTriggerInfo::CopyFrom(const AffixTriggerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AffixTriggerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffixTriggerInfo::IsInitialized() const {
  return true;
}

void AffixTriggerInfo::InternalSwap(AffixTriggerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AffixTriggerInfo, _impl_.isonlytrigger_)
      + sizeof(AffixTriggerInfo::_impl_.isonlytrigger_)
      - PROTOBUF_FIELD_OFFSET(AffixTriggerInfo, _impl_.affixid_)>(
          reinterpret_cast<char*>(&_impl_.affixid_),
          reinterpret_cast<char*>(&other->_impl_.affixid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AffixTriggerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[131]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::PositionInt2D*
Arena::CreateMaybeMessage< ::msg::PositionInt2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PositionInt2D >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PositionFloat2D*
Arena::CreateMaybeMessage< ::msg::PositionFloat2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PositionFloat2D >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerBasicInfo*
Arena::CreateMaybeMessage< ::msg::PlayerBasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerBasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::EquipmentInfo*
Arena::CreateMaybeMessage< ::msg::EquipmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::EquipmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessPiecesData*
Arena::CreateMaybeMessage< ::msg::ChessPiecesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessPiecesData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessPiecesMapLevData*
Arena::CreateMaybeMessage< ::msg::ChessPiecesMapLevData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessPiecesMapLevData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessNumber*
Arena::CreateMaybeMessage< ::msg::ChessNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerChessNumber*
Arena::CreateMaybeMessage< ::msg::PlayerChessNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerChessNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ReflushChessData*
Arena::CreateMaybeMessage< ::msg::ReflushChessData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ReflushChessData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BattleRoundData*
Arena::CreateMaybeMessage< ::msg::BattleRoundData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BattleRoundData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerStatisticsInfo*
Arena::CreateMaybeMessage< ::msg::PlayerStatisticsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerStatisticsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Item*
Arena::CreateMaybeMessage< ::msg::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ItemOnTheGround*
Arena::CreateMaybeMessage< ::msg::ItemOnTheGround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ItemOnTheGround >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ItemInTheBag*
Arena::CreateMaybeMessage< ::msg::ItemInTheBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ItemInTheBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Character*
Arena::CreateMaybeMessage< ::msg::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Character >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CharacterInTheBag*
Arena::CreateMaybeMessage< ::msg::CharacterInTheBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CharacterInTheBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CharacterOnTheMap*
Arena::CreateMaybeMessage< ::msg::CharacterOnTheMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CharacterOnTheMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ReconnectPlayer*
Arena::CreateMaybeMessage< ::msg::ReconnectPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ReconnectPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RoundInfo*
Arena::CreateMaybeMessage< ::msg::RoundInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::RoundInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CorrectFormation*
Arena::CreateMaybeMessage< ::msg::CorrectFormation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CorrectFormation >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqSetMessengerPos*
Arena::CreateMaybeMessage< ::msg::CSReqSetMessengerPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqSetMessengerPos >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqPvpSetReadyState*
Arena::CreateMaybeMessage< ::msg::CSReqPvpSetReadyState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqPvpSetReadyState >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqSetRefreshShopLock*
Arena::CreateMaybeMessage< ::msg::CSReqSetRefreshShopLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqSetRefreshShopLock >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqRetrieveChess*
Arena::CreateMaybeMessage< ::msg::CSReqRetrieveChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqRetrieveChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqBuyChess*
Arena::CreateMaybeMessage< ::msg::CSReqBuyChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqBuyChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqSellChessInBag*
Arena::CreateMaybeMessage< ::msg::CSReqSellChessInBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqSellChessInBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqSellChessOnBoard*
Arena::CreateMaybeMessage< ::msg::CSReqSellChessOnBoard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqSellChessOnBoard >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqMoveChess*
Arena::CreateMaybeMessage< ::msg::CSReqMoveChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqMoveChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqBuyExp*
Arena::CreateMaybeMessage< ::msg::CSReqBuyExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqBuyExp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqRefreshShop*
Arena::CreateMaybeMessage< ::msg::CSReqRefreshShop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqRefreshShop >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqMoveChessInBagToMap*
Arena::CreateMaybeMessage< ::msg::CSReqMoveChessInBagToMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqMoveChessInBagToMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqMoveChessWithinBag*
Arena::CreateMaybeMessage< ::msg::CSReqMoveChessWithinBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqMoveChessWithinBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqPlayerLoaded*
Arena::CreateMaybeMessage< ::msg::CSReqPlayerLoaded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqPlayerLoaded >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqPlayerRoundEnd*
Arena::CreateMaybeMessage< ::msg::CSReqPlayerRoundEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqPlayerRoundEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqPickupEquipment*
Arena::CreateMaybeMessage< ::msg::CSReqPickupEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqPickupEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqCraftEquip*
Arena::CreateMaybeMessage< ::msg::CSReqCraftEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqCraftEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqUseEquipment*
Arena::CreateMaybeMessage< ::msg::CSReqUseEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqUseEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqUpdateAntiAddictionTime*
Arena::CreateMaybeMessage< ::msg::CSReqUpdateAntiAddictionTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqUpdateAntiAddictionTime >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqCancelReconnect*
Arena::CreateMaybeMessage< ::msg::CSReqCancelReconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqCancelReconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqSetAutoUpgradeCharacter*
Arena::CreateMaybeMessage< ::msg::CSReqSetAutoUpgradeCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqSetAutoUpgradeCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqReconnect*
Arena::CreateMaybeMessage< ::msg::CSReqReconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqReconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqManuallyUpgradeCharacter*
Arena::CreateMaybeMessage< ::msg::CSReqManuallyUpgradeCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqManuallyUpgradeCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqQuitBattle*
Arena::CreateMaybeMessage< ::msg::CSReqQuitBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqQuitBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqSusPendGame*
Arena::CreateMaybeMessage< ::msg::CSReqSusPendGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqSusPendGame >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqChessDB*
Arena::CreateMaybeMessage< ::msg::CSReqChessDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqChessDB >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqStatisticsInfo*
Arena::CreateMaybeMessage< ::msg::CSReqStatisticsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqStatisticsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqPassThrough*
Arena::CreateMaybeMessage< ::msg::CSReqPassThrough >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqPassThrough >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqUpdateBattleResult*
Arena::CreateMaybeMessage< ::msg::CSReqUpdateBattleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqUpdateBattleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqVisitPlayer*
Arena::CreateMaybeMessage< ::msg::CSReqVisitPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqVisitPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqLeaveGameEarly*
Arena::CreateMaybeMessage< ::msg::CSReqLeaveGameEarly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqLeaveGameEarly >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqReportAbsent*
Arena::CreateMaybeMessage< ::msg::CSReqReportAbsent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqReportAbsent >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspSetMessengerPos*
Arena::CreateMaybeMessage< ::msg::CSRspSetMessengerPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspSetMessengerPos >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspPvpSetReadyState*
Arena::CreateMaybeMessage< ::msg::CSRspPvpSetReadyState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspPvpSetReadyState >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspSetRefreshShopLock*
Arena::CreateMaybeMessage< ::msg::CSRspSetRefreshShopLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspSetRefreshShopLock >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspRetrieveChess*
Arena::CreateMaybeMessage< ::msg::CSRspRetrieveChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspRetrieveChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspBuyChess*
Arena::CreateMaybeMessage< ::msg::CSRspBuyChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspBuyChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspSellChessInBag*
Arena::CreateMaybeMessage< ::msg::CSRspSellChessInBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspSellChessInBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspSellChessOnBoard*
Arena::CreateMaybeMessage< ::msg::CSRspSellChessOnBoard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspSellChessOnBoard >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspMoveChess*
Arena::CreateMaybeMessage< ::msg::CSRspMoveChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspMoveChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspBuyExp*
Arena::CreateMaybeMessage< ::msg::CSRspBuyExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspBuyExp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspRefreshShop*
Arena::CreateMaybeMessage< ::msg::CSRspRefreshShop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspRefreshShop >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspMoveChessInBagToMap*
Arena::CreateMaybeMessage< ::msg::CSRspMoveChessInBagToMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspMoveChessInBagToMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspMoveChessWithinBag*
Arena::CreateMaybeMessage< ::msg::CSRspMoveChessWithinBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspMoveChessWithinBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspPlayerLoaded*
Arena::CreateMaybeMessage< ::msg::CSRspPlayerLoaded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspPlayerLoaded >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspPlayerRoundEnd*
Arena::CreateMaybeMessage< ::msg::CSRspPlayerRoundEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspPlayerRoundEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspPickupEquipment*
Arena::CreateMaybeMessage< ::msg::CSRspPickupEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspPickupEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspCraftEquip*
Arena::CreateMaybeMessage< ::msg::CSRspCraftEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspCraftEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspUseEquipment*
Arena::CreateMaybeMessage< ::msg::CSRspUseEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspUseEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspUpdateAntiAddictionTime*
Arena::CreateMaybeMessage< ::msg::CSRspUpdateAntiAddictionTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspUpdateAntiAddictionTime >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspCancelReconnect*
Arena::CreateMaybeMessage< ::msg::CSRspCancelReconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspCancelReconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspSetAutoUpgradeCharacter*
Arena::CreateMaybeMessage< ::msg::CSRspSetAutoUpgradeCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspSetAutoUpgradeCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspReconnect*
Arena::CreateMaybeMessage< ::msg::CSRspReconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspReconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspUpdateRank*
Arena::CreateMaybeMessage< ::msg::CSRspUpdateRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspUpdateRank >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspManuallyUpgradeCharacter*
Arena::CreateMaybeMessage< ::msg::CSRspManuallyUpgradeCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspManuallyUpgradeCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspQuitBattle*
Arena::CreateMaybeMessage< ::msg::CSRspQuitBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspQuitBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspSusPendGame*
Arena::CreateMaybeMessage< ::msg::CSRspSusPendGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspSusPendGame >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspChessDB*
Arena::CreateMaybeMessage< ::msg::CSRspChessDB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspChessDB >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspStatisticsInfo*
Arena::CreateMaybeMessage< ::msg::CSRspStatisticsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspStatisticsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspPassThrough*
Arena::CreateMaybeMessage< ::msg::CSRspPassThrough >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspPassThrough >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspUpdateBattleResult*
Arena::CreateMaybeMessage< ::msg::CSRspUpdateBattleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspUpdateBattleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspVisitPlayer*
Arena::CreateMaybeMessage< ::msg::CSRspVisitPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspVisitPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspLeaveGameEarly*
Arena::CreateMaybeMessage< ::msg::CSRspLeaveGameEarly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspLeaveGameEarly >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspReportAbsent*
Arena::CreateMaybeMessage< ::msg::CSRspReportAbsent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspReportAbsent >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpChangeStage*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpChangeStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpChangeStage >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpUpdateMoney*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpUpdateMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpUpdateMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpUpdateMessengerPos*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpUpdateMessengerPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpUpdateMessengerPos >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpPlayerLoggedIn*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpPlayerLoggedIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpPlayerLoggedIn >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpSetReadyState*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpSetReadyState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpSetReadyState >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpPlayerAllReady*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpPlayerAllReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpPlayerAllReady >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpPlayerDead*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpPlayerDead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpPlayerDead >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpPlayerOffline*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpPlayerOffline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpPlayerOffline >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfChessOnBoardSold*
Arena::CreateMaybeMessage< ::msg::CSNtfChessOnBoardSold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfChessOnBoardSold >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfChessRemovedFromBag*
Arena::CreateMaybeMessage< ::msg::CSNtfChessRemovedFromBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfChessRemovedFromBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfBuyChess*
Arena::CreateMaybeMessage< ::msg::CSNtfBuyChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfBuyChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfChessRetrievedToBag*
Arena::CreateMaybeMessage< ::msg::CSNtfChessRetrievedToBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfChessRetrievedToBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfChessMoved*
Arena::CreateMaybeMessage< ::msg::CSNtfChessMoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfChessMoved >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfChessFromBagToMap*
Arena::CreateMaybeMessage< ::msg::CSNtfChessFromBagToMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfChessFromBagToMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPlayerLvUpgraded*
Arena::CreateMaybeMessage< ::msg::CSNtfPlayerLvUpgraded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPlayerLvUpgraded >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfUpdateExp*
Arena::CreateMaybeMessage< ::msg::CSNtfUpdateExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfUpdateExp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfSetEnemy*
Arena::CreateMaybeMessage< ::msg::CSNtfSetEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfSetEnemy >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfSetSeed*
Arena::CreateMaybeMessage< ::msg::CSNtfSetSeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfSetSeed >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfBattleTerminated*
Arena::CreateMaybeMessage< ::msg::CSNtfBattleTerminated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfBattleTerminated >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfShopRefreshed*
Arena::CreateMaybeMessage< ::msg::CSNtfShopRefreshed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfShopRefreshed >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfChessMovedWithinBag*
Arena::CreateMaybeMessage< ::msg::CSNtfChessMovedWithinBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfChessMovedWithinBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfCreepDied*
Arena::CreateMaybeMessage< ::msg::CSNtfCreepDied >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfCreepDied >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfUpdateHp*
Arena::CreateMaybeMessage< ::msg::CSNtfUpdateHp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfUpdateHp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPickupEquipment*
Arena::CreateMaybeMessage< ::msg::CSNtfPickupEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPickupEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfUseEquipment*
Arena::CreateMaybeMessage< ::msg::CSNtfUseEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfUseEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfOperateEquipInBag*
Arena::CreateMaybeMessage< ::msg::CSNtfOperateEquipInBag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfOperateEquipInBag >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfOperateEquipOnChess*
Arena::CreateMaybeMessage< ::msg::CSNtfOperateEquipOnChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfOperateEquipOnChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfAntiAddictionTime*
Arena::CreateMaybeMessage< ::msg::CSNtfAntiAddictionTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfAntiAddictionTime >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfAntiAddictionTriggered*
Arena::CreateMaybeMessage< ::msg::CSNtfAntiAddictionTriggered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfAntiAddictionTriggered >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfAntiAddictionRemoved*
Arena::CreateMaybeMessage< ::msg::CSNtfAntiAddictionRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfAntiAddictionRemoved >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfUnsuggestedPhase*
Arena::CreateMaybeMessage< ::msg::CSNtfUnsuggestedPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfUnsuggestedPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfGameEnd*
Arena::CreateMaybeMessage< ::msg::CSNtfGameEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfGameEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfCandyReward*
Arena::CreateMaybeMessage< ::msg::CSNtfCandyReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfCandyReward >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfWinStreak*
Arena::CreateMaybeMessage< ::msg::CSNtfWinStreak >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfWinStreak >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpState*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpState >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfSetAutoUpgradeCharacter*
Arena::CreateMaybeMessage< ::msg::CSNtfSetAutoUpgradeCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfSetAutoUpgradeCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfManuallyUpgradeCharacter*
Arena::CreateMaybeMessage< ::msg::CSNtfManuallyUpgradeCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfManuallyUpgradeCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfQuitBattle*
Arena::CreateMaybeMessage< ::msg::CSNtfQuitBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfQuitBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfRoundResult*
Arena::CreateMaybeMessage< ::msg::CSNtfRoundResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfRoundResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfSuspendGame*
Arena::CreateMaybeMessage< ::msg::CSNtfSuspendGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfSuspendGame >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPassThrough*
Arena::CreateMaybeMessage< ::msg::CSNtfPassThrough >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPassThrough >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfUpdateBattleResult*
Arena::CreateMaybeMessage< ::msg::CSNtfUpdateBattleResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfUpdateBattleResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfAA*
Arena::CreateMaybeMessage< ::msg::CSNtfAA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfAA >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Division*
Arena::CreateMaybeMessage< ::msg::Division >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Division >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfEquipDivision*
Arena::CreateMaybeMessage< ::msg::CSNtfEquipDivision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfEquipDivision >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfVisitPlayer*
Arena::CreateMaybeMessage< ::msg::CSNtfVisitPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfVisitPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfLeaveGameEarly*
Arena::CreateMaybeMessage< ::msg::CSNtfLeaveGameEarly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfLeaveGameEarly >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpAffixTrigger*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpAffixTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpAffixTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AffixTriggerInfo*
Arena::CreateMaybeMessage< ::msg::AffixTriggerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AffixTriggerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
