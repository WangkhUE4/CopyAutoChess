#if PLATFORM_WINDOWS
#pragma warning(disable:4100)
#pragma warning(disable:4125)
#pragma warning(disable:4267)
#pragma warning(disable:4668)
#pragma warning(disable:4800)
#pragma warning(disable:4456)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: towerdefense.proto

#if PLATFORM_WINDOWS
#pragma warning(disable:4125)
#pragma warning(disable:4668)
#endif
#ifndef GOOGLE_PROTOBUF_INCLUDED_towerdefense_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_towerdefense_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_towerdefense_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_towerdefense_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_towerdefense_2eproto;
namespace msg {
class CSNtfTDPlayerInfo;
struct CSNtfTDPlayerInfoDefaultTypeInternal;
extern CSNtfTDPlayerInfoDefaultTypeInternal _CSNtfTDPlayerInfo_default_instance_;
class CSReqTDEquip;
struct CSReqTDEquipDefaultTypeInternal;
extern CSReqTDEquipDefaultTypeInternal _CSReqTDEquip_default_instance_;
class CSReqTDGetOnHookAward;
struct CSReqTDGetOnHookAwardDefaultTypeInternal;
extern CSReqTDGetOnHookAwardDefaultTypeInternal _CSReqTDGetOnHookAward_default_instance_;
class CSReqTDLevelUp;
struct CSReqTDLevelUpDefaultTypeInternal;
extern CSReqTDLevelUpDefaultTypeInternal _CSReqTDLevelUp_default_instance_;
class CSReqTDSetCardGroup;
struct CSReqTDSetCardGroupDefaultTypeInternal;
extern CSReqTDSetCardGroupDefaultTypeInternal _CSReqTDSetCardGroup_default_instance_;
class CSRspTDEquip;
struct CSRspTDEquipDefaultTypeInternal;
extern CSRspTDEquipDefaultTypeInternal _CSRspTDEquip_default_instance_;
class CSRspTDGetOnHookAward;
struct CSRspTDGetOnHookAwardDefaultTypeInternal;
extern CSRspTDGetOnHookAwardDefaultTypeInternal _CSRspTDGetOnHookAward_default_instance_;
class CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse;
struct CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal;
extern CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal _CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse_default_instance_;
class CSRspTDLevelUp;
struct CSRspTDLevelUpDefaultTypeInternal;
extern CSRspTDLevelUpDefaultTypeInternal _CSRspTDLevelUp_default_instance_;
class CSRspTDSetCardGroup;
struct CSRspTDSetCardGroupDefaultTypeInternal;
extern CSRspTDSetCardGroupDefaultTypeInternal _CSRspTDSetCardGroup_default_instance_;
class ChessManMaterialData;
struct ChessManMaterialDataDefaultTypeInternal;
extern ChessManMaterialDataDefaultTypeInternal _ChessManMaterialData_default_instance_;
class CsReqTDBuyCard;
struct CsReqTDBuyCardDefaultTypeInternal;
extern CsReqTDBuyCardDefaultTypeInternal _CsReqTDBuyCard_default_instance_;
class CsReqTDDraw;
struct CsReqTDDrawDefaultTypeInternal;
extern CsReqTDDrawDefaultTypeInternal _CsReqTDDraw_default_instance_;
class CsRspTDBuyCard;
struct CsRspTDBuyCardDefaultTypeInternal;
extern CsRspTDBuyCardDefaultTypeInternal _CsRspTDBuyCard_default_instance_;
class CsRspTDDraw;
struct CsRspTDDrawDefaultTypeInternal;
extern CsRspTDDrawDefaultTypeInternal _CsRspTDDraw_default_instance_;
class ItemTypeLimit;
struct ItemTypeLimitDefaultTypeInternal;
extern ItemTypeLimitDefaultTypeInternal _ItemTypeLimit_default_instance_;
class OnHookOutPutData;
struct OnHookOutPutDataDefaultTypeInternal;
extern OnHookOutPutDataDefaultTypeInternal _OnHookOutPutData_default_instance_;
class OnHookOutPutInfo;
struct OnHookOutPutInfoDefaultTypeInternal;
extern OnHookOutPutInfoDefaultTypeInternal _OnHookOutPutInfo_default_instance_;
class PlayerInitchessData;
struct PlayerInitchessDataDefaultTypeInternal;
extern PlayerInitchessDataDefaultTypeInternal _PlayerInitchessData_default_instance_;
class SkillItem;
struct SkillItemDefaultTypeInternal;
extern SkillItemDefaultTypeInternal _SkillItem_default_instance_;
class TDBuy;
struct TDBuyDefaultTypeInternal;
extern TDBuyDefaultTypeInternal _TDBuy_default_instance_;
class TDCardGroupConfigInfo;
struct TDCardGroupConfigInfoDefaultTypeInternal;
extern TDCardGroupConfigInfoDefaultTypeInternal _TDCardGroupConfigInfo_default_instance_;
class TDChessboardPeople;
struct TDChessboardPeopleDefaultTypeInternal;
extern TDChessboardPeopleDefaultTypeInternal _TDChessboardPeople_default_instance_;
class TDComposeData;
struct TDComposeDataDefaultTypeInternal;
extern TDComposeDataDefaultTypeInternal _TDComposeData_default_instance_;
class TDComposeInfo;
struct TDComposeInfoDefaultTypeInternal;
extern TDComposeInfoDefaultTypeInternal _TDComposeInfo_default_instance_;
class TDConsume;
struct TDConsumeDefaultTypeInternal;
extern TDConsumeDefaultTypeInternal _TDConsume_default_instance_;
class TDItemData;
struct TDItemDataDefaultTypeInternal;
extern TDItemDataDefaultTypeInternal _TDItemData_default_instance_;
class TDItemInfo;
struct TDItemInfoDefaultTypeInternal;
extern TDItemInfoDefaultTypeInternal _TDItemInfo_default_instance_;
class TDLevelUpData;
struct TDLevelUpDataDefaultTypeInternal;
extern TDLevelUpDataDefaultTypeInternal _TDLevelUpData_default_instance_;
class TDLevelUpInfo;
struct TDLevelUpInfoDefaultTypeInternal;
extern TDLevelUpInfoDefaultTypeInternal _TDLevelUpInfo_default_instance_;
class TDOutPut;
struct TDOutPutDefaultTypeInternal;
extern TDOutPutDefaultTypeInternal _TDOutPut_default_instance_;
class TDPlayerInfo;
struct TDPlayerInfoDefaultTypeInternal;
extern TDPlayerInfoDefaultTypeInternal _TDPlayerInfo_default_instance_;
class TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse;
struct TDPlayerInfo_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal;
extern TDPlayerInfo_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal _TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse_default_instance_;
class TDRandCardData;
struct TDRandCardDataDefaultTypeInternal;
extern TDRandCardDataDefaultTypeInternal _TDRandCardData_default_instance_;
class TDRandCardInfo;
struct TDRandCardInfoDefaultTypeInternal;
extern TDRandCardInfoDefaultTypeInternal _TDRandCardInfo_default_instance_;
class TDRandPoolData;
struct TDRandPoolDataDefaultTypeInternal;
extern TDRandPoolDataDefaultTypeInternal _TDRandPoolData_default_instance_;
class TDRandPoolInfo;
struct TDRandPoolInfoDefaultTypeInternal;
extern TDRandPoolInfoDefaultTypeInternal _TDRandPoolInfo_default_instance_;
class TDSkillData;
struct TDSkillDataDefaultTypeInternal;
extern TDSkillDataDefaultTypeInternal _TDSkillData_default_instance_;
class TDSkillInfo;
struct TDSkillInfoDefaultTypeInternal;
extern TDSkillInfoDefaultTypeInternal _TDSkillInfo_default_instance_;
class TDStageData;
struct TDStageDataDefaultTypeInternal;
extern TDStageDataDefaultTypeInternal _TDStageData_default_instance_;
class TDStageInfo;
struct TDStageInfoDefaultTypeInternal;
extern TDStageInfoDefaultTypeInternal _TDStageInfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::CSNtfTDPlayerInfo* Arena::CreateMaybeMessage<::msg::CSNtfTDPlayerInfo>(Arena*);
template<> ::msg::CSReqTDEquip* Arena::CreateMaybeMessage<::msg::CSReqTDEquip>(Arena*);
template<> ::msg::CSReqTDGetOnHookAward* Arena::CreateMaybeMessage<::msg::CSReqTDGetOnHookAward>(Arena*);
template<> ::msg::CSReqTDLevelUp* Arena::CreateMaybeMessage<::msg::CSReqTDLevelUp>(Arena*);
template<> ::msg::CSReqTDSetCardGroup* Arena::CreateMaybeMessage<::msg::CSReqTDSetCardGroup>(Arena*);
template<> ::msg::CSRspTDEquip* Arena::CreateMaybeMessage<::msg::CSRspTDEquip>(Arena*);
template<> ::msg::CSRspTDGetOnHookAward* Arena::CreateMaybeMessage<::msg::CSRspTDGetOnHookAward>(Arena*);
template<> ::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse>(Arena*);
template<> ::msg::CSRspTDLevelUp* Arena::CreateMaybeMessage<::msg::CSRspTDLevelUp>(Arena*);
template<> ::msg::CSRspTDSetCardGroup* Arena::CreateMaybeMessage<::msg::CSRspTDSetCardGroup>(Arena*);
template<> ::msg::ChessManMaterialData* Arena::CreateMaybeMessage<::msg::ChessManMaterialData>(Arena*);
template<> ::msg::CsReqTDBuyCard* Arena::CreateMaybeMessage<::msg::CsReqTDBuyCard>(Arena*);
template<> ::msg::CsReqTDDraw* Arena::CreateMaybeMessage<::msg::CsReqTDDraw>(Arena*);
template<> ::msg::CsRspTDBuyCard* Arena::CreateMaybeMessage<::msg::CsRspTDBuyCard>(Arena*);
template<> ::msg::CsRspTDDraw* Arena::CreateMaybeMessage<::msg::CsRspTDDraw>(Arena*);
template<> ::msg::ItemTypeLimit* Arena::CreateMaybeMessage<::msg::ItemTypeLimit>(Arena*);
template<> ::msg::OnHookOutPutData* Arena::CreateMaybeMessage<::msg::OnHookOutPutData>(Arena*);
template<> ::msg::OnHookOutPutInfo* Arena::CreateMaybeMessage<::msg::OnHookOutPutInfo>(Arena*);
template<> ::msg::PlayerInitchessData* Arena::CreateMaybeMessage<::msg::PlayerInitchessData>(Arena*);
template<> ::msg::SkillItem* Arena::CreateMaybeMessage<::msg::SkillItem>(Arena*);
template<> ::msg::TDBuy* Arena::CreateMaybeMessage<::msg::TDBuy>(Arena*);
template<> ::msg::TDCardGroupConfigInfo* Arena::CreateMaybeMessage<::msg::TDCardGroupConfigInfo>(Arena*);
template<> ::msg::TDChessboardPeople* Arena::CreateMaybeMessage<::msg::TDChessboardPeople>(Arena*);
template<> ::msg::TDComposeData* Arena::CreateMaybeMessage<::msg::TDComposeData>(Arena*);
template<> ::msg::TDComposeInfo* Arena::CreateMaybeMessage<::msg::TDComposeInfo>(Arena*);
template<> ::msg::TDConsume* Arena::CreateMaybeMessage<::msg::TDConsume>(Arena*);
template<> ::msg::TDItemData* Arena::CreateMaybeMessage<::msg::TDItemData>(Arena*);
template<> ::msg::TDItemInfo* Arena::CreateMaybeMessage<::msg::TDItemInfo>(Arena*);
template<> ::msg::TDLevelUpData* Arena::CreateMaybeMessage<::msg::TDLevelUpData>(Arena*);
template<> ::msg::TDLevelUpInfo* Arena::CreateMaybeMessage<::msg::TDLevelUpInfo>(Arena*);
template<> ::msg::TDOutPut* Arena::CreateMaybeMessage<::msg::TDOutPut>(Arena*);
template<> ::msg::TDPlayerInfo* Arena::CreateMaybeMessage<::msg::TDPlayerInfo>(Arena*);
template<> ::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse>(Arena*);
template<> ::msg::TDRandCardData* Arena::CreateMaybeMessage<::msg::TDRandCardData>(Arena*);
template<> ::msg::TDRandCardInfo* Arena::CreateMaybeMessage<::msg::TDRandCardInfo>(Arena*);
template<> ::msg::TDRandPoolData* Arena::CreateMaybeMessage<::msg::TDRandPoolData>(Arena*);
template<> ::msg::TDRandPoolInfo* Arena::CreateMaybeMessage<::msg::TDRandPoolInfo>(Arena*);
template<> ::msg::TDSkillData* Arena::CreateMaybeMessage<::msg::TDSkillData>(Arena*);
template<> ::msg::TDSkillInfo* Arena::CreateMaybeMessage<::msg::TDSkillInfo>(Arena*);
template<> ::msg::TDStageData* Arena::CreateMaybeMessage<::msg::TDStageData>(Arena*);
template<> ::msg::TDStageInfo* Arena::CreateMaybeMessage<::msg::TDStageInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum TDITEMTYPE : int {
  TDITEMTYPE_MIN_NUM = 0,
  TDITEMTYPE_CHESS_MAN = 1,
  TDITEMTYPE_CHESS_PLAYER = 2,
  TDITEMTYPE_CHESS_BOARD = 3,
  TDITEMTYPE_CHESS_EQUIP = 4,
  TDITEMTYPE_MONEY = 5,
  TDITEMTYPE_EXP = 6,
  TDITEMTYPE_MATERIAL = 7,
  TDITEMTYPE_BLUE_PRINT = 8,
  TDITEMTYPE_AUTO_OPEN_CHEST = 9,
  TDITEMTYPE_MAX_NUM = 10,
  TDITEMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TDITEMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TDITEMTYPE_IsValid(int value);
constexpr TDITEMTYPE TDITEMTYPE_MIN = TDITEMTYPE_MIN_NUM;
constexpr TDITEMTYPE TDITEMTYPE_MAX = TDITEMTYPE_MAX_NUM;
constexpr int TDITEMTYPE_ARRAYSIZE = TDITEMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDITEMTYPE_descriptor();
template<typename T>
inline const std::string& TDITEMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDITEMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDITEMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDITEMTYPE_descriptor(), enum_t_value);
}
inline bool TDITEMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TDITEMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDITEMTYPE>(
    TDITEMTYPE_descriptor(), name, value);
}
enum TDLEVELUP_TYPE : int {
  TDLEVELUP_TYPE_CHESS_UNLOCK = 0,
  TDLEVELUP_TYPE_CHESS_WHITE_EQUIP = 1,
  TDLEVELUP_TYPE_CHESS_BLUE_EQUIP = 3,
  TDLEVELUP_TYPE_CHESS_PURE_EQUIP = 4,
  TDLEVELUP_TYPE_CHESS_ORIGiN_EQUIP = 5,
  TDLEVELUP_TYPE_COMPOSE = 6,
  TDLEVELUP_TYPE_CHESS_BOARD_TALENT = 9,
  TDLEVELUP_TYPE_CHESS_MAN_QUALITY = 10,
  TDLEVELUP_TYPE_CHESS_MAN_QUALITY_1 = 11,
  TDLEVELUP_TYPE_CHESS_MAN_QUALITY_2 = 12,
  TDLEVELUP_TYPE_CHESS_MAN_QUALITY_3 = 13,
  TDLEVELUP_TYPE_CHESS_MAN_QUALITY_4 = 14,
  TDLEVELUP_TYPE_CHESS_MAN_QUALITY_5 = 15,
  TDLEVELUP_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TDLEVELUP_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TDLEVELUP_TYPE_IsValid(int value);
constexpr TDLEVELUP_TYPE TDLEVELUP_TYPE_MIN = TDLEVELUP_TYPE_CHESS_UNLOCK;
constexpr TDLEVELUP_TYPE TDLEVELUP_TYPE_MAX = TDLEVELUP_TYPE_CHESS_MAN_QUALITY_5;
constexpr int TDLEVELUP_TYPE_ARRAYSIZE = TDLEVELUP_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDLEVELUP_TYPE_descriptor();
template<typename T>
inline const std::string& TDLEVELUP_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDLEVELUP_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDLEVELUP_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDLEVELUP_TYPE_descriptor(), enum_t_value);
}
inline bool TDLEVELUP_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TDLEVELUP_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDLEVELUP_TYPE>(
    TDLEVELUP_TYPE_descriptor(), name, value);
}
enum TDSKILLTYPE : int {
  TDSKILLTYPE_LIMIT_MIN = 0,
  TDSKILLTYPE_SKIL = 1,
  TDSKILLTYPE_EQUIP = 2,
  TDSKILLTYPE_SPECIAL_BUFF = 3,
  TDSKILLTYPE_BUFF = 4,
  TDSKILLTYPE_LIMIT_MAX = 5,
  TDSKILLTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TDSKILLTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TDSKILLTYPE_IsValid(int value);
constexpr TDSKILLTYPE TDSKILLTYPE_MIN = TDSKILLTYPE_LIMIT_MIN;
constexpr TDSKILLTYPE TDSKILLTYPE_MAX = TDSKILLTYPE_LIMIT_MAX;
constexpr int TDSKILLTYPE_ARRAYSIZE = TDSKILLTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDSKILLTYPE_descriptor();
template<typename T>
inline const std::string& TDSKILLTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDSKILLTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDSKILLTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDSKILLTYPE_descriptor(), enum_t_value);
}
inline bool TDSKILLTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TDSKILLTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDSKILLTYPE>(
    TDSKILLTYPE_descriptor(), name, value);
}
// ===================================================================

class OnHookOutPutInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OnHookOutPutInfo) */ {
 public:
  inline OnHookOutPutInfo() : OnHookOutPutInfo(nullptr) {}
  ~OnHookOutPutInfo() override;
  explicit PROTOBUF_CONSTEXPR OnHookOutPutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnHookOutPutInfo(const OnHookOutPutInfo& from);
  OnHookOutPutInfo(OnHookOutPutInfo&& from) noexcept
    : OnHookOutPutInfo() {
    *this = ::std::move(from);
  }

  inline OnHookOutPutInfo& operator=(const OnHookOutPutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnHookOutPutInfo& operator=(OnHookOutPutInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnHookOutPutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnHookOutPutInfo* internal_default_instance() {
    return reinterpret_cast<const OnHookOutPutInfo*>(
               &_OnHookOutPutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OnHookOutPutInfo& a, OnHookOutPutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OnHookOutPutInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnHookOutPutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnHookOutPutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnHookOutPutInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnHookOutPutInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OnHookOutPutInfo& from) {
    OnHookOutPutInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnHookOutPutInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OnHookOutPutInfo";
  }
  protected:
  explicit OnHookOutPutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.OnHookOutPutData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::OnHookOutPutData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OnHookOutPutData >*
      mutable_datas();
  private:
  const ::msg::OnHookOutPutData& _internal_datas(int index) const;
  ::msg::OnHookOutPutData* _internal_add_datas();
  public:
  const ::msg::OnHookOutPutData& datas(int index) const;
  ::msg::OnHookOutPutData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OnHookOutPutData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.OnHookOutPutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OnHookOutPutData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class OnHookOutPutData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OnHookOutPutData) */ {
 public:
  inline OnHookOutPutData() : OnHookOutPutData(nullptr) {}
  ~OnHookOutPutData() override;
  explicit PROTOBUF_CONSTEXPR OnHookOutPutData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnHookOutPutData(const OnHookOutPutData& from);
  OnHookOutPutData(OnHookOutPutData&& from) noexcept
    : OnHookOutPutData() {
    *this = ::std::move(from);
  }

  inline OnHookOutPutData& operator=(const OnHookOutPutData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnHookOutPutData& operator=(OnHookOutPutData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OnHookOutPutData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnHookOutPutData* internal_default_instance() {
    return reinterpret_cast<const OnHookOutPutData*>(
               &_OnHookOutPutData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OnHookOutPutData& a, OnHookOutPutData& b) {
    a.Swap(&b);
  }
  inline void Swap(OnHookOutPutData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnHookOutPutData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OnHookOutPutData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OnHookOutPutData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OnHookOutPutData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OnHookOutPutData& from) {
    OnHookOutPutData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnHookOutPutData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OnHookOutPutData";
  }
  protected:
  explicit OnHookOutPutData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectFieldNumber = 2,
    kStageIdFieldNumber = 1,
  };
  // repeated .msg.TDOutPut Effect = 2;
  int effect_size() const;
  private:
  int _internal_effect_size() const;
  public:
  void clear_effect();
  ::msg::TDOutPut* mutable_effect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDOutPut >*
      mutable_effect();
  private:
  const ::msg::TDOutPut& _internal_effect(int index) const;
  ::msg::TDOutPut* _internal_add_effect();
  public:
  const ::msg::TDOutPut& effect(int index) const;
  ::msg::TDOutPut* add_effect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDOutPut >&
      effect() const;

  // int32 StageId = 1;
  void clear_stageid();
  int32_t stageid() const;
  void set_stageid(int32_t value);
  private:
  int32_t _internal_stageid() const;
  void _internal_set_stageid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.OnHookOutPutData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDOutPut > effect_;
    int32_t stageid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDOutPut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDOutPut) */ {
 public:
  inline TDOutPut() : TDOutPut(nullptr) {}
  ~TDOutPut() override;
  explicit PROTOBUF_CONSTEXPR TDOutPut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDOutPut(const TDOutPut& from);
  TDOutPut(TDOutPut&& from) noexcept
    : TDOutPut() {
    *this = ::std::move(from);
  }

  inline TDOutPut& operator=(const TDOutPut& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDOutPut& operator=(TDOutPut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDOutPut& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDOutPut* internal_default_instance() {
    return reinterpret_cast<const TDOutPut*>(
               &_TDOutPut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TDOutPut& a, TDOutPut& b) {
    a.Swap(&b);
  }
  inline void Swap(TDOutPut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDOutPut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDOutPut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDOutPut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDOutPut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDOutPut& from) {
    TDOutPut::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDOutPut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDOutPut";
  }
  protected:
  explicit TDOutPut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 2,
    kIntervalFieldNumber = 1,
  };
  // repeated .msg.TDItem Awards = 2;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // int64 Interval = 1;
  void clear_interval();
  int64_t interval() const;
  void set_interval(int64_t value);
  private:
  int64_t _internal_interval() const;
  void _internal_set_interval(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDOutPut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    int64_t interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDConsume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDConsume) */ {
 public:
  inline TDConsume() : TDConsume(nullptr) {}
  ~TDConsume() override;
  explicit PROTOBUF_CONSTEXPR TDConsume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDConsume(const TDConsume& from);
  TDConsume(TDConsume&& from) noexcept
    : TDConsume() {
    *this = ::std::move(from);
  }

  inline TDConsume& operator=(const TDConsume& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDConsume& operator=(TDConsume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDConsume& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDConsume* internal_default_instance() {
    return reinterpret_cast<const TDConsume*>(
               &_TDConsume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TDConsume& a, TDConsume& b) {
    a.Swap(&b);
  }
  inline void Swap(TDConsume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDConsume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDConsume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDConsume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDConsume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDConsume& from) {
    TDConsume::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDConsume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDConsume";
  }
  protected:
  explicit TDConsume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 Level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDConsume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t count_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDBuy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDBuy) */ {
 public:
  inline TDBuy() : TDBuy(nullptr) {}
  ~TDBuy() override;
  explicit PROTOBUF_CONSTEXPR TDBuy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDBuy(const TDBuy& from);
  TDBuy(TDBuy&& from) noexcept
    : TDBuy() {
    *this = ::std::move(from);
  }

  inline TDBuy& operator=(const TDBuy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDBuy& operator=(TDBuy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDBuy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDBuy* internal_default_instance() {
    return reinterpret_cast<const TDBuy*>(
               &_TDBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TDBuy& a, TDBuy& b) {
    a.Swap(&b);
  }
  inline void Swap(TDBuy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDBuy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDBuy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDBuy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDBuy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDBuy& from) {
    TDBuy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDBuy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDBuy";
  }
  protected:
  explicit TDBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 1,
    kConsumesFieldNumber = 2,
    kExAwardsFieldNumber = 3,
  };
  // repeated .msg.TDItem Awards = 1;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // repeated .msg.Consume Consumes = 2;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::Consume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >*
      mutable_consumes();
  private:
  const ::msg::Consume& _internal_consumes(int index) const;
  ::msg::Consume* _internal_add_consumes();
  public:
  const ::msg::Consume& consumes(int index) const;
  ::msg::Consume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >&
      consumes() const;

  // repeated .msg.TDItem ExAwards = 3;
  int exawards_size() const;
  private:
  int _internal_exawards_size() const;
  public:
  void clear_exawards();
  ::msg::TDItem* mutable_exawards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_exawards();
  private:
  const ::msg::TDItem& _internal_exawards(int index) const;
  ::msg::TDItem* _internal_add_exawards();
  public:
  const ::msg::TDItem& exawards(int index) const;
  ::msg::TDItem* add_exawards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      exawards() const;

  // @@protoc_insertion_point(class_scope:msg.TDBuy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > exawards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDRandCardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDRandCardInfo) */ {
 public:
  inline TDRandCardInfo() : TDRandCardInfo(nullptr) {}
  ~TDRandCardInfo() override;
  explicit PROTOBUF_CONSTEXPR TDRandCardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDRandCardInfo(const TDRandCardInfo& from);
  TDRandCardInfo(TDRandCardInfo&& from) noexcept
    : TDRandCardInfo() {
    *this = ::std::move(from);
  }

  inline TDRandCardInfo& operator=(const TDRandCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDRandCardInfo& operator=(TDRandCardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDRandCardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDRandCardInfo* internal_default_instance() {
    return reinterpret_cast<const TDRandCardInfo*>(
               &_TDRandCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TDRandCardInfo& a, TDRandCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDRandCardInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDRandCardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDRandCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDRandCardInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDRandCardInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDRandCardInfo& from) {
    TDRandCardInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDRandCardInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDRandCardInfo";
  }
  protected:
  explicit TDRandCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDRandCardData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDRandCardData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandCardData >*
      mutable_datas();
  private:
  const ::msg::TDRandCardData& _internal_datas(int index) const;
  ::msg::TDRandCardData* _internal_add_datas();
  public:
  const ::msg::TDRandCardData& datas(int index) const;
  ::msg::TDRandCardData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandCardData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDRandCardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandCardData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDRandCardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDRandCardData) */ {
 public:
  inline TDRandCardData() : TDRandCardData(nullptr) {}
  ~TDRandCardData() override;
  explicit PROTOBUF_CONSTEXPR TDRandCardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDRandCardData(const TDRandCardData& from);
  TDRandCardData(TDRandCardData&& from) noexcept
    : TDRandCardData() {
    *this = ::std::move(from);
  }

  inline TDRandCardData& operator=(const TDRandCardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDRandCardData& operator=(TDRandCardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDRandCardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDRandCardData* internal_default_instance() {
    return reinterpret_cast<const TDRandCardData*>(
               &_TDRandCardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TDRandCardData& a, TDRandCardData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDRandCardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDRandCardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDRandCardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDRandCardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDRandCardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDRandCardData& from) {
    TDRandCardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDRandCardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDRandCardData";
  }
  protected:
  explicit TDRandCardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumeFieldNumber = 6,
    kTenDrawConsumesFieldNumber = 7,
    kNameFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kBackgroundFieldNumber = 5,
    kIdFieldNumber = 1,
    kChestIdFieldNumber = 8,
  };
  // repeated .msg.TDConsume Consume = 6;
  int consume_size() const;
  private:
  int _internal_consume_size() const;
  public:
  void clear_consume();
  ::msg::TDConsume* mutable_consume(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consume();
  private:
  const ::msg::TDConsume& _internal_consume(int index) const;
  ::msg::TDConsume* _internal_add_consume();
  public:
  const ::msg::TDConsume& consume(int index) const;
  ::msg::TDConsume* add_consume();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consume() const;

  // repeated .msg.TDConsume TenDrawConsumes = 7;
  int tendrawconsumes_size() const;
  private:
  int _internal_tendrawconsumes_size() const;
  public:
  void clear_tendrawconsumes();
  ::msg::TDConsume* mutable_tendrawconsumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_tendrawconsumes();
  private:
  const ::msg::TDConsume& _internal_tendrawconsumes(int index) const;
  ::msg::TDConsume* _internal_add_tendrawconsumes();
  public:
  const ::msg::TDConsume& tendrawconsumes(int index) const;
  ::msg::TDConsume* add_tendrawconsumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      tendrawconsumes() const;

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string StartTime = 3;
  void clear_starttime();
  const std::string& starttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starttime();
  PROTOBUF_NODISCARD std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string EndTime = 4;
  void clear_endtime();
  const std::string& endtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endtime();
  PROTOBUF_NODISCARD std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // string Background = 5;
  void clear_background();
  const std::string& background() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_background(ArgT0&& arg0, ArgT... args);
  std::string* mutable_background();
  PROTOBUF_NODISCARD std::string* release_background();
  void set_allocated_background(std::string* background);
  private:
  const std::string& _internal_background() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_background(const std::string& value);
  std::string* _internal_mutable_background();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 ChestId = 8;
  void clear_chestid();
  int32_t chestid() const;
  void set_chestid(int32_t value);
  private:
  int32_t _internal_chestid() const;
  void _internal_set_chestid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDRandCardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consume_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > tendrawconsumes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr background_;
    int32_t id_;
    int32_t chestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDRandPoolInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDRandPoolInfo) */ {
 public:
  inline TDRandPoolInfo() : TDRandPoolInfo(nullptr) {}
  ~TDRandPoolInfo() override;
  explicit PROTOBUF_CONSTEXPR TDRandPoolInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDRandPoolInfo(const TDRandPoolInfo& from);
  TDRandPoolInfo(TDRandPoolInfo&& from) noexcept
    : TDRandPoolInfo() {
    *this = ::std::move(from);
  }

  inline TDRandPoolInfo& operator=(const TDRandPoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDRandPoolInfo& operator=(TDRandPoolInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDRandPoolInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDRandPoolInfo* internal_default_instance() {
    return reinterpret_cast<const TDRandPoolInfo*>(
               &_TDRandPoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TDRandPoolInfo& a, TDRandPoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDRandPoolInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDRandPoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDRandPoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDRandPoolInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDRandPoolInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDRandPoolInfo& from) {
    TDRandPoolInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDRandPoolInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDRandPoolInfo";
  }
  protected:
  explicit TDRandPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDRandPoolData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDRandPoolData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandPoolData >*
      mutable_datas();
  private:
  const ::msg::TDRandPoolData& _internal_datas(int index) const;
  ::msg::TDRandPoolData* _internal_add_datas();
  public:
  const ::msg::TDRandPoolData& datas(int index) const;
  ::msg::TDRandPoolData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandPoolData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDRandPoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandPoolData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDRandPoolData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDRandPoolData) */ {
 public:
  inline TDRandPoolData() : TDRandPoolData(nullptr) {}
  ~TDRandPoolData() override;
  explicit PROTOBUF_CONSTEXPR TDRandPoolData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDRandPoolData(const TDRandPoolData& from);
  TDRandPoolData(TDRandPoolData&& from) noexcept
    : TDRandPoolData() {
    *this = ::std::move(from);
  }

  inline TDRandPoolData& operator=(const TDRandPoolData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDRandPoolData& operator=(TDRandPoolData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDRandPoolData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDRandPoolData* internal_default_instance() {
    return reinterpret_cast<const TDRandPoolData*>(
               &_TDRandPoolData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TDRandPoolData& a, TDRandPoolData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDRandPoolData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDRandPoolData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDRandPoolData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDRandPoolData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDRandPoolData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDRandPoolData& from) {
    TDRandPoolData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDRandPoolData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDRandPoolData";
  }
  protected:
  explicit TDRandPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardItemFieldNumber = 3,
    kIdFieldNumber = 1,
    kPoolIdFieldNumber = 2,
    kWeightFieldNumber = 4,
  };
  // .msg.TDItem AwardItem = 3;
  bool has_awarditem() const;
  private:
  bool _internal_has_awarditem() const;
  public:
  void clear_awarditem();
  const ::msg::TDItem& awarditem() const;
  PROTOBUF_NODISCARD ::msg::TDItem* release_awarditem();
  ::msg::TDItem* mutable_awarditem();
  void set_allocated_awarditem(::msg::TDItem* awarditem);
  private:
  const ::msg::TDItem& _internal_awarditem() const;
  ::msg::TDItem* _internal_mutable_awarditem();
  public:
  void unsafe_arena_set_allocated_awarditem(
      ::msg::TDItem* awarditem);
  ::msg::TDItem* unsafe_arena_release_awarditem();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 PoolId = 2;
  void clear_poolid();
  int32_t poolid() const;
  void set_poolid(int32_t value);
  private:
  int32_t _internal_poolid() const;
  void _internal_set_poolid(int32_t value);
  public:

  // int32 Weight = 4;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDRandPoolData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDItem* awarditem_;
    int32_t id_;
    int32_t poolid_;
    int32_t weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class PlayerInitchessData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerInitchessData) */ {
 public:
  inline PlayerInitchessData() : PlayerInitchessData(nullptr) {}
  ~PlayerInitchessData() override;
  explicit PROTOBUF_CONSTEXPR PlayerInitchessData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInitchessData(const PlayerInitchessData& from);
  PlayerInitchessData(PlayerInitchessData&& from) noexcept
    : PlayerInitchessData() {
    *this = ::std::move(from);
  }

  inline PlayerInitchessData& operator=(const PlayerInitchessData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInitchessData& operator=(PlayerInitchessData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInitchessData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInitchessData* internal_default_instance() {
    return reinterpret_cast<const PlayerInitchessData*>(
               &_PlayerInitchessData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PlayerInitchessData& a, PlayerInitchessData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInitchessData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInitchessData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInitchessData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInitchessData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInitchessData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInitchessData& from) {
    PlayerInitchessData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInitchessData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerInitchessData";
  }
  protected:
  explicit PlayerInitchessData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 Count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerInitchessData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class ChessManMaterialData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessManMaterialData) */ {
 public:
  inline ChessManMaterialData() : ChessManMaterialData(nullptr) {}
  ~ChessManMaterialData() override;
  explicit PROTOBUF_CONSTEXPR ChessManMaterialData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessManMaterialData(const ChessManMaterialData& from);
  ChessManMaterialData(ChessManMaterialData&& from) noexcept
    : ChessManMaterialData() {
    *this = ::std::move(from);
  }

  inline ChessManMaterialData& operator=(const ChessManMaterialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessManMaterialData& operator=(ChessManMaterialData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessManMaterialData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessManMaterialData* internal_default_instance() {
    return reinterpret_cast<const ChessManMaterialData*>(
               &_ChessManMaterialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChessManMaterialData& a, ChessManMaterialData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessManMaterialData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessManMaterialData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessManMaterialData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessManMaterialData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessManMaterialData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessManMaterialData& from) {
    ChessManMaterialData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessManMaterialData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessManMaterialData";
  }
  protected:
  explicit ChessManMaterialData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 2,
    kQualityFieldNumber = 1,
  };
  // repeated .msg.TDItem Awards = 2;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // int32 Quality = 1;
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChessManMaterialData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    int32_t quality_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDCardGroupConfigInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDCardGroupConfigInfo) */ {
 public:
  inline TDCardGroupConfigInfo() : TDCardGroupConfigInfo(nullptr) {}
  ~TDCardGroupConfigInfo() override;
  explicit PROTOBUF_CONSTEXPR TDCardGroupConfigInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDCardGroupConfigInfo(const TDCardGroupConfigInfo& from);
  TDCardGroupConfigInfo(TDCardGroupConfigInfo&& from) noexcept
    : TDCardGroupConfigInfo() {
    *this = ::std::move(from);
  }

  inline TDCardGroupConfigInfo& operator=(const TDCardGroupConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDCardGroupConfigInfo& operator=(TDCardGroupConfigInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDCardGroupConfigInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDCardGroupConfigInfo* internal_default_instance() {
    return reinterpret_cast<const TDCardGroupConfigInfo*>(
               &_TDCardGroupConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TDCardGroupConfigInfo& a, TDCardGroupConfigInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDCardGroupConfigInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDCardGroupConfigInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDCardGroupConfigInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDCardGroupConfigInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDCardGroupConfigInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDCardGroupConfigInfo& from) {
    TDCardGroupConfigInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDCardGroupConfigInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDCardGroupConfigInfo";
  }
  protected:
  explicit TDCardGroupConfigInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessBoardCountFieldNumber = 1,
    kChessPlayerCountFieldNumber = 2,
    kChessManCountFieldNumber = 3,
    kPlayerInitItemsFieldNumber = 4,
    kPopLimitFieldNumber = 7,
    kCostPoolCountFieldNumber = 18,
    kChessManMaterialsFieldNumber = 20,
    kMapKeyFieldNumber = 15,
    kShowRateFieldNumber = 21,
    kPvpChessPoolKeyFieldNumber = 22,
    kLimitTimeStageFieldNumber = 23,
    kPlayerInitchessFieldNumber = 5,
    kBuyCardFieldNumber = 14,
    kStoreLimitFieldNumber = 6,
    kChessBoardLvLimitFieldNumber = 8,
    kChessPlayerLvLimitFieldNumber = 9,
    kChessManLvLimitFieldNumber = 10,
    kChessEquipLimitFieldNumber = 11,
    kChessEquipLvLimitFieldNumber = 12,
    kChessBoardTalentLvLimitFieldNumber = 13,
    kPopSpecialBuffIdFieldNumber = 16,
    kLimitTimeFieldNumber = 19,
    kMaxStageFieldNumber = 17,
  };
  // repeated int32 ChessBoardCount = 1;
  int chessboardcount_size() const;
  private:
  int _internal_chessboardcount_size() const;
  public:
  void clear_chessboardcount();
  private:
  int32_t _internal_chessboardcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chessboardcount() const;
  void _internal_add_chessboardcount(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chessboardcount();
  public:
  int32_t chessboardcount(int index) const;
  void set_chessboardcount(int index, int32_t value);
  void add_chessboardcount(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chessboardcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chessboardcount();

  // repeated int32 ChessPlayerCount = 2;
  int chessplayercount_size() const;
  private:
  int _internal_chessplayercount_size() const;
  public:
  void clear_chessplayercount();
  private:
  int32_t _internal_chessplayercount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chessplayercount() const;
  void _internal_add_chessplayercount(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chessplayercount();
  public:
  int32_t chessplayercount(int index) const;
  void set_chessplayercount(int index, int32_t value);
  void add_chessplayercount(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chessplayercount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chessplayercount();

  // repeated int32 ChessManCount = 3;
  int chessmancount_size() const;
  private:
  int _internal_chessmancount_size() const;
  public:
  void clear_chessmancount();
  private:
  int32_t _internal_chessmancount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chessmancount() const;
  void _internal_add_chessmancount(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chessmancount();
  public:
  int32_t chessmancount(int index) const;
  void set_chessmancount(int index, int32_t value);
  void add_chessmancount(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chessmancount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chessmancount();

  // repeated .msg.TDItem PlayerInitItems = 4;
  int playerinititems_size() const;
  private:
  int _internal_playerinititems_size() const;
  public:
  void clear_playerinititems();
  ::msg::TDItem* mutable_playerinititems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_playerinititems();
  private:
  const ::msg::TDItem& _internal_playerinititems(int index) const;
  ::msg::TDItem* _internal_add_playerinititems();
  public:
  const ::msg::TDItem& playerinititems(int index) const;
  ::msg::TDItem* add_playerinititems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      playerinititems() const;

  // repeated .msg.TDChessboardPeople PopLimit = 7;
  int poplimit_size() const;
  private:
  int _internal_poplimit_size() const;
  public:
  void clear_poplimit();
  ::msg::TDChessboardPeople* mutable_poplimit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDChessboardPeople >*
      mutable_poplimit();
  private:
  const ::msg::TDChessboardPeople& _internal_poplimit(int index) const;
  ::msg::TDChessboardPeople* _internal_add_poplimit();
  public:
  const ::msg::TDChessboardPeople& poplimit(int index) const;
  ::msg::TDChessboardPeople* add_poplimit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDChessboardPeople >&
      poplimit() const;

  // repeated int32 CostPoolCount = 18;
  int costpoolcount_size() const;
  private:
  int _internal_costpoolcount_size() const;
  public:
  void clear_costpoolcount();
  private:
  int32_t _internal_costpoolcount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_costpoolcount() const;
  void _internal_add_costpoolcount(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_costpoolcount();
  public:
  int32_t costpoolcount(int index) const;
  void set_costpoolcount(int index, int32_t value);
  void add_costpoolcount(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      costpoolcount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_costpoolcount();

  // repeated .msg.ChessManMaterialData ChessManMaterials = 20;
  int chessmanmaterials_size() const;
  private:
  int _internal_chessmanmaterials_size() const;
  public:
  void clear_chessmanmaterials();
  ::msg::ChessManMaterialData* mutable_chessmanmaterials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessManMaterialData >*
      mutable_chessmanmaterials();
  private:
  const ::msg::ChessManMaterialData& _internal_chessmanmaterials(int index) const;
  ::msg::ChessManMaterialData* _internal_add_chessmanmaterials();
  public:
  const ::msg::ChessManMaterialData& chessmanmaterials(int index) const;
  ::msg::ChessManMaterialData* add_chessmanmaterials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessManMaterialData >&
      chessmanmaterials() const;

  // string MapKey = 15;
  void clear_mapkey();
  const std::string& mapkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapkey();
  PROTOBUF_NODISCARD std::string* release_mapkey();
  void set_allocated_mapkey(std::string* mapkey);
  private:
  const std::string& _internal_mapkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapkey(const std::string& value);
  std::string* _internal_mutable_mapkey();
  public:

  // string ShowRate = 21;
  void clear_showrate();
  const std::string& showrate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_showrate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_showrate();
  PROTOBUF_NODISCARD std::string* release_showrate();
  void set_allocated_showrate(std::string* showrate);
  private:
  const std::string& _internal_showrate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_showrate(const std::string& value);
  std::string* _internal_mutable_showrate();
  public:

  // string PvpChessPoolKey = 22;
  void clear_pvpchesspoolkey();
  const std::string& pvpchesspoolkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvpchesspoolkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvpchesspoolkey();
  PROTOBUF_NODISCARD std::string* release_pvpchesspoolkey();
  void set_allocated_pvpchesspoolkey(std::string* pvpchesspoolkey);
  private:
  const std::string& _internal_pvpchesspoolkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvpchesspoolkey(const std::string& value);
  std::string* _internal_mutable_pvpchesspoolkey();
  public:

  // string LimitTimeStage = 23;
  void clear_limittimestage();
  const std::string& limittimestage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_limittimestage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_limittimestage();
  PROTOBUF_NODISCARD std::string* release_limittimestage();
  void set_allocated_limittimestage(std::string* limittimestage);
  private:
  const std::string& _internal_limittimestage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_limittimestage(const std::string& value);
  std::string* _internal_mutable_limittimestage();
  public:

  // .msg.PlayerInitchessData PlayerInitchess = 5;
  bool has_playerinitchess() const;
  private:
  bool _internal_has_playerinitchess() const;
  public:
  void clear_playerinitchess();
  const ::msg::PlayerInitchessData& playerinitchess() const;
  PROTOBUF_NODISCARD ::msg::PlayerInitchessData* release_playerinitchess();
  ::msg::PlayerInitchessData* mutable_playerinitchess();
  void set_allocated_playerinitchess(::msg::PlayerInitchessData* playerinitchess);
  private:
  const ::msg::PlayerInitchessData& _internal_playerinitchess() const;
  ::msg::PlayerInitchessData* _internal_mutable_playerinitchess();
  public:
  void unsafe_arena_set_allocated_playerinitchess(
      ::msg::PlayerInitchessData* playerinitchess);
  ::msg::PlayerInitchessData* unsafe_arena_release_playerinitchess();

  // .msg.TDBuy BuyCard = 14;
  bool has_buycard() const;
  private:
  bool _internal_has_buycard() const;
  public:
  void clear_buycard();
  const ::msg::TDBuy& buycard() const;
  PROTOBUF_NODISCARD ::msg::TDBuy* release_buycard();
  ::msg::TDBuy* mutable_buycard();
  void set_allocated_buycard(::msg::TDBuy* buycard);
  private:
  const ::msg::TDBuy& _internal_buycard() const;
  ::msg::TDBuy* _internal_mutable_buycard();
  public:
  void unsafe_arena_set_allocated_buycard(
      ::msg::TDBuy* buycard);
  ::msg::TDBuy* unsafe_arena_release_buycard();

  // int32 StoreLimit = 6;
  void clear_storelimit();
  int32_t storelimit() const;
  void set_storelimit(int32_t value);
  private:
  int32_t _internal_storelimit() const;
  void _internal_set_storelimit(int32_t value);
  public:

  // int32 ChessBoardLvLimit = 8;
  void clear_chessboardlvlimit();
  int32_t chessboardlvlimit() const;
  void set_chessboardlvlimit(int32_t value);
  private:
  int32_t _internal_chessboardlvlimit() const;
  void _internal_set_chessboardlvlimit(int32_t value);
  public:

  // int32 ChessPlayerLvLimit = 9;
  void clear_chessplayerlvlimit();
  int32_t chessplayerlvlimit() const;
  void set_chessplayerlvlimit(int32_t value);
  private:
  int32_t _internal_chessplayerlvlimit() const;
  void _internal_set_chessplayerlvlimit(int32_t value);
  public:

  // int32 ChessManLvLimit = 10;
  void clear_chessmanlvlimit();
  int32_t chessmanlvlimit() const;
  void set_chessmanlvlimit(int32_t value);
  private:
  int32_t _internal_chessmanlvlimit() const;
  void _internal_set_chessmanlvlimit(int32_t value);
  public:

  // int32 ChessEquipLimit = 11;
  void clear_chessequiplimit();
  int32_t chessequiplimit() const;
  void set_chessequiplimit(int32_t value);
  private:
  int32_t _internal_chessequiplimit() const;
  void _internal_set_chessequiplimit(int32_t value);
  public:

  // int32 ChessEquipLvLimit = 12;
  void clear_chessequiplvlimit();
  int32_t chessequiplvlimit() const;
  void set_chessequiplvlimit(int32_t value);
  private:
  int32_t _internal_chessequiplvlimit() const;
  void _internal_set_chessequiplvlimit(int32_t value);
  public:

  // int32 ChessBoardTalentLvLimit = 13;
  void clear_chessboardtalentlvlimit();
  int32_t chessboardtalentlvlimit() const;
  void set_chessboardtalentlvlimit(int32_t value);
  private:
  int32_t _internal_chessboardtalentlvlimit() const;
  void _internal_set_chessboardtalentlvlimit(int32_t value);
  public:

  // int32 PopSpecialBuffId = 16;
  void clear_popspecialbuffid();
  int32_t popspecialbuffid() const;
  void set_popspecialbuffid(int32_t value);
  private:
  int32_t _internal_popspecialbuffid() const;
  void _internal_set_popspecialbuffid(int32_t value);
  public:

  // int64 LimitTime = 19;
  void clear_limittime();
  int64_t limittime() const;
  void set_limittime(int64_t value);
  private:
  int64_t _internal_limittime() const;
  void _internal_set_limittime(int64_t value);
  public:

  // int32 MaxStage = 17;
  void clear_maxstage();
  int32_t maxstage() const;
  void set_maxstage(int32_t value);
  private:
  int32_t _internal_maxstage() const;
  void _internal_set_maxstage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDCardGroupConfigInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chessboardcount_;
    mutable std::atomic<int> _chessboardcount_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chessplayercount_;
    mutable std::atomic<int> _chessplayercount_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chessmancount_;
    mutable std::atomic<int> _chessmancount_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > playerinititems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDChessboardPeople > poplimit_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > costpoolcount_;
    mutable std::atomic<int> _costpoolcount_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessManMaterialData > chessmanmaterials_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showrate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvpchesspoolkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr limittimestage_;
    ::msg::PlayerInitchessData* playerinitchess_;
    ::msg::TDBuy* buycard_;
    int32_t storelimit_;
    int32_t chessboardlvlimit_;
    int32_t chessplayerlvlimit_;
    int32_t chessmanlvlimit_;
    int32_t chessequiplimit_;
    int32_t chessequiplvlimit_;
    int32_t chessboardtalentlvlimit_;
    int32_t popspecialbuffid_;
    int64_t limittime_;
    int32_t maxstage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class ItemTypeLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ItemTypeLimit) */ {
 public:
  inline ItemTypeLimit() : ItemTypeLimit(nullptr) {}
  ~ItemTypeLimit() override;
  explicit PROTOBUF_CONSTEXPR ItemTypeLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemTypeLimit(const ItemTypeLimit& from);
  ItemTypeLimit(ItemTypeLimit&& from) noexcept
    : ItemTypeLimit() {
    *this = ::std::move(from);
  }

  inline ItemTypeLimit& operator=(const ItemTypeLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemTypeLimit& operator=(ItemTypeLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemTypeLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemTypeLimit* internal_default_instance() {
    return reinterpret_cast<const ItemTypeLimit*>(
               &_ItemTypeLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ItemTypeLimit& a, ItemTypeLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemTypeLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemTypeLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemTypeLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemTypeLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemTypeLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemTypeLimit& from) {
    ItemTypeLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemTypeLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ItemTypeLimit";
  }
  protected:
  explicit ItemTypeLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelLimitFieldNumber = 1,
    kCardGroupMinNumFieldNumber = 2,
    kCardGroupMaxNumFieldNumber = 3,
  };
  // int32 LevelLimit = 1;
  void clear_levellimit();
  int32_t levellimit() const;
  void set_levellimit(int32_t value);
  private:
  int32_t _internal_levellimit() const;
  void _internal_set_levellimit(int32_t value);
  public:

  // int32 CardGroupMinNum = 2;
  void clear_cardgroupminnum();
  int32_t cardgroupminnum() const;
  void set_cardgroupminnum(int32_t value);
  private:
  int32_t _internal_cardgroupminnum() const;
  void _internal_set_cardgroupminnum(int32_t value);
  public:

  // int32 CardGroupMaxNum = 3;
  void clear_cardgroupmaxnum();
  int32_t cardgroupmaxnum() const;
  void set_cardgroupmaxnum(int32_t value);
  private:
  int32_t _internal_cardgroupmaxnum() const;
  void _internal_set_cardgroupmaxnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ItemTypeLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t levellimit_;
    int32_t cardgroupminnum_;
    int32_t cardgroupmaxnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDChessboardPeople final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDChessboardPeople) */ {
 public:
  inline TDChessboardPeople() : TDChessboardPeople(nullptr) {}
  ~TDChessboardPeople() override;
  explicit PROTOBUF_CONSTEXPR TDChessboardPeople(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDChessboardPeople(const TDChessboardPeople& from);
  TDChessboardPeople(TDChessboardPeople&& from) noexcept
    : TDChessboardPeople() {
    *this = ::std::move(from);
  }

  inline TDChessboardPeople& operator=(const TDChessboardPeople& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDChessboardPeople& operator=(TDChessboardPeople&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDChessboardPeople& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDChessboardPeople* internal_default_instance() {
    return reinterpret_cast<const TDChessboardPeople*>(
               &_TDChessboardPeople_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TDChessboardPeople& a, TDChessboardPeople& b) {
    a.Swap(&b);
  }
  inline void Swap(TDChessboardPeople* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDChessboardPeople* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDChessboardPeople* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDChessboardPeople>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDChessboardPeople& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDChessboardPeople& from) {
    TDChessboardPeople::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDChessboardPeople* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDChessboardPeople";
  }
  protected:
  explicit TDChessboardPeople(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 Level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 Num = 2;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDChessboardPeople)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t level_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDLevelUpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDLevelUpInfo) */ {
 public:
  inline TDLevelUpInfo() : TDLevelUpInfo(nullptr) {}
  ~TDLevelUpInfo() override;
  explicit PROTOBUF_CONSTEXPR TDLevelUpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDLevelUpInfo(const TDLevelUpInfo& from);
  TDLevelUpInfo(TDLevelUpInfo&& from) noexcept
    : TDLevelUpInfo() {
    *this = ::std::move(from);
  }

  inline TDLevelUpInfo& operator=(const TDLevelUpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDLevelUpInfo& operator=(TDLevelUpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDLevelUpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDLevelUpInfo* internal_default_instance() {
    return reinterpret_cast<const TDLevelUpInfo*>(
               &_TDLevelUpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TDLevelUpInfo& a, TDLevelUpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDLevelUpInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDLevelUpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDLevelUpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDLevelUpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDLevelUpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDLevelUpInfo& from) {
    TDLevelUpInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDLevelUpInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDLevelUpInfo";
  }
  protected:
  explicit TDLevelUpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDLevelUpData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDLevelUpData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDLevelUpData >*
      mutable_datas();
  private:
  const ::msg::TDLevelUpData& _internal_datas(int index) const;
  ::msg::TDLevelUpData* _internal_add_datas();
  public:
  const ::msg::TDLevelUpData& datas(int index) const;
  ::msg::TDLevelUpData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDLevelUpData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDLevelUpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDLevelUpData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDLevelUpData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDLevelUpData) */ {
 public:
  inline TDLevelUpData() : TDLevelUpData(nullptr) {}
  ~TDLevelUpData() override;
  explicit PROTOBUF_CONSTEXPR TDLevelUpData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDLevelUpData(const TDLevelUpData& from);
  TDLevelUpData(TDLevelUpData&& from) noexcept
    : TDLevelUpData() {
    *this = ::std::move(from);
  }

  inline TDLevelUpData& operator=(const TDLevelUpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDLevelUpData& operator=(TDLevelUpData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDLevelUpData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDLevelUpData* internal_default_instance() {
    return reinterpret_cast<const TDLevelUpData*>(
               &_TDLevelUpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TDLevelUpData& a, TDLevelUpData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDLevelUpData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDLevelUpData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDLevelUpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDLevelUpData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDLevelUpData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDLevelUpData& from) {
    TDLevelUpData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDLevelUpData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDLevelUpData";
  }
  protected:
  explicit TDLevelUpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumesFieldNumber = 5,
    kEquipQualityConsumesFieldNumber = 6,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSubTypeFieldNumber = 4,
  };
  // repeated .msg.TDConsume Consumes = 5;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::TDConsume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consumes();
  private:
  const ::msg::TDConsume& _internal_consumes(int index) const;
  ::msg::TDConsume* _internal_add_consumes();
  public:
  const ::msg::TDConsume& consumes(int index) const;
  ::msg::TDConsume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consumes() const;

  // repeated int32 EquipQualityConsumes = 6;
  int equipqualityconsumes_size() const;
  private:
  int _internal_equipqualityconsumes_size() const;
  public:
  void clear_equipqualityconsumes();
  private:
  int32_t _internal_equipqualityconsumes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_equipqualityconsumes() const;
  void _internal_add_equipqualityconsumes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_equipqualityconsumes();
  public:
  int32_t equipqualityconsumes(int index) const;
  void set_equipqualityconsumes(int index, int32_t value);
  void add_equipqualityconsumes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      equipqualityconsumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_equipqualityconsumes();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // .msg.TDITEMTYPE Type = 3;
  void clear_type();
  ::msg::TDITEMTYPE type() const;
  void set_type(::msg::TDITEMTYPE value);
  private:
  ::msg::TDITEMTYPE _internal_type() const;
  void _internal_set_type(::msg::TDITEMTYPE value);
  public:

  // .msg.TDLEVELUP_TYPE SubType = 4;
  void clear_subtype();
  ::msg::TDLEVELUP_TYPE subtype() const;
  void set_subtype(::msg::TDLEVELUP_TYPE value);
  private:
  ::msg::TDLEVELUP_TYPE _internal_subtype() const;
  void _internal_set_subtype(::msg::TDLEVELUP_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDLevelUpData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > equipqualityconsumes_;
    mutable std::atomic<int> _equipqualityconsumes_cached_byte_size_;
    int32_t id_;
    int32_t level_;
    int type_;
    int subtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDComposeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDComposeInfo) */ {
 public:
  inline TDComposeInfo() : TDComposeInfo(nullptr) {}
  ~TDComposeInfo() override;
  explicit PROTOBUF_CONSTEXPR TDComposeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDComposeInfo(const TDComposeInfo& from);
  TDComposeInfo(TDComposeInfo&& from) noexcept
    : TDComposeInfo() {
    *this = ::std::move(from);
  }

  inline TDComposeInfo& operator=(const TDComposeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDComposeInfo& operator=(TDComposeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDComposeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDComposeInfo* internal_default_instance() {
    return reinterpret_cast<const TDComposeInfo*>(
               &_TDComposeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TDComposeInfo& a, TDComposeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDComposeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDComposeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDComposeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDComposeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDComposeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDComposeInfo& from) {
    TDComposeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDComposeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDComposeInfo";
  }
  protected:
  explicit TDComposeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDComposeData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDComposeData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDComposeData >*
      mutable_datas();
  private:
  const ::msg::TDComposeData& _internal_datas(int index) const;
  ::msg::TDComposeData* _internal_add_datas();
  public:
  const ::msg::TDComposeData& datas(int index) const;
  ::msg::TDComposeData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDComposeData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDComposeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDComposeData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDComposeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDComposeData) */ {
 public:
  inline TDComposeData() : TDComposeData(nullptr) {}
  ~TDComposeData() override;
  explicit PROTOBUF_CONSTEXPR TDComposeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDComposeData(const TDComposeData& from);
  TDComposeData(TDComposeData&& from) noexcept
    : TDComposeData() {
    *this = ::std::move(from);
  }

  inline TDComposeData& operator=(const TDComposeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDComposeData& operator=(TDComposeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDComposeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDComposeData* internal_default_instance() {
    return reinterpret_cast<const TDComposeData*>(
               &_TDComposeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TDComposeData& a, TDComposeData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDComposeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDComposeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDComposeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDComposeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDComposeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDComposeData& from) {
    TDComposeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDComposeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDComposeData";
  }
  protected:
  explicit TDComposeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumesFieldNumber = 3,
    kAwardFieldNumber = 4,
    kRouteIdFieldNumber = 1,
    kDrawingIdFieldNumber = 2,
  };
  // repeated .msg.TDConsume Consumes = 3;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::TDConsume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consumes();
  private:
  const ::msg::TDConsume& _internal_consumes(int index) const;
  ::msg::TDConsume* _internal_add_consumes();
  public:
  const ::msg::TDConsume& consumes(int index) const;
  ::msg::TDConsume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consumes() const;

  // repeated .msg.TDItem Award = 4;
  int award_size() const;
  private:
  int _internal_award_size() const;
  public:
  void clear_award();
  ::msg::TDItem* mutable_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_award();
  private:
  const ::msg::TDItem& _internal_award(int index) const;
  ::msg::TDItem* _internal_add_award();
  public:
  const ::msg::TDItem& award(int index) const;
  ::msg::TDItem* add_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      award() const;

  // int32 RouteId = 1;
  void clear_routeid();
  int32_t routeid() const;
  void set_routeid(int32_t value);
  private:
  int32_t _internal_routeid() const;
  void _internal_set_routeid(int32_t value);
  public:

  // int32 DrawingId = 2;
  void clear_drawingid();
  int32_t drawingid() const;
  void set_drawingid(int32_t value);
  private:
  int32_t _internal_drawingid() const;
  void _internal_set_drawingid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDComposeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > award_;
    int32_t routeid_;
    int32_t drawingid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDSkillInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDSkillInfo) */ {
 public:
  inline TDSkillInfo() : TDSkillInfo(nullptr) {}
  ~TDSkillInfo() override;
  explicit PROTOBUF_CONSTEXPR TDSkillInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDSkillInfo(const TDSkillInfo& from);
  TDSkillInfo(TDSkillInfo&& from) noexcept
    : TDSkillInfo() {
    *this = ::std::move(from);
  }

  inline TDSkillInfo& operator=(const TDSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDSkillInfo& operator=(TDSkillInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDSkillInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDSkillInfo* internal_default_instance() {
    return reinterpret_cast<const TDSkillInfo*>(
               &_TDSkillInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TDSkillInfo& a, TDSkillInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDSkillInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDSkillInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDSkillInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDSkillInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDSkillInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDSkillInfo& from) {
    TDSkillInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDSkillInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDSkillInfo";
  }
  protected:
  explicit TDSkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDSkillData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDSkillData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDSkillData >*
      mutable_datas();
  private:
  const ::msg::TDSkillData& _internal_datas(int index) const;
  ::msg::TDSkillData* _internal_add_datas();
  public:
  const ::msg::TDSkillData& datas(int index) const;
  ::msg::TDSkillData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDSkillData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDSkillInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDSkillData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class SkillItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.SkillItem) */ {
 public:
  inline SkillItem() : SkillItem(nullptr) {}
  ~SkillItem() override;
  explicit PROTOBUF_CONSTEXPR SkillItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillItem(const SkillItem& from);
  SkillItem(SkillItem&& from) noexcept
    : SkillItem() {
    *this = ::std::move(from);
  }

  inline SkillItem& operator=(const SkillItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillItem& operator=(SkillItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillItem* internal_default_instance() {
    return reinterpret_cast<const SkillItem*>(
               &_SkillItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SkillItem& a, SkillItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillItem& from) {
    SkillItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.SkillItem";
  }
  protected:
  explicit SkillItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kDescFieldNumber = 5,
    kValueFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // string Name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Desc = 5;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string value = 6;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .msg.TDSKILLTYPE Type = 2;
  void clear_type();
  ::msg::TDSKILLTYPE type() const;
  void set_type(::msg::TDSKILLTYPE value);
  private:
  ::msg::TDSKILLTYPE _internal_type() const;
  void _internal_set_type(::msg::TDSKILLTYPE value);
  public:

  // int32 Level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.SkillItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int32_t id_;
    int type_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDSkillData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDSkillData) */ {
 public:
  inline TDSkillData() : TDSkillData(nullptr) {}
  ~TDSkillData() override;
  explicit PROTOBUF_CONSTEXPR TDSkillData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDSkillData(const TDSkillData& from);
  TDSkillData(TDSkillData&& from) noexcept
    : TDSkillData() {
    *this = ::std::move(from);
  }

  inline TDSkillData& operator=(const TDSkillData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDSkillData& operator=(TDSkillData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDSkillData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDSkillData* internal_default_instance() {
    return reinterpret_cast<const TDSkillData*>(
               &_TDSkillData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TDSkillData& a, TDSkillData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDSkillData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDSkillData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDSkillData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDSkillData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDSkillData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDSkillData& from) {
    TDSkillData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDSkillData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDSkillData";
  }
  protected:
  explicit TDSkillData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 5,
    kIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // repeated .msg.SkillItem Skills = 5;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::msg::SkillItem* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SkillItem >*
      mutable_skills();
  private:
  const ::msg::SkillItem& _internal_skills(int index) const;
  ::msg::SkillItem* _internal_add_skills();
  public:
  const ::msg::SkillItem& skills(int index) const;
  ::msg::SkillItem* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SkillItem >&
      skills() const;

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 ItemId = 2;
  void clear_itemid();
  int32_t itemid() const;
  void set_itemid(int32_t value);
  private:
  int32_t _internal_itemid() const;
  void _internal_set_itemid(int32_t value);
  public:

  // .msg.TDITEMTYPE Type = 3;
  void clear_type();
  ::msg::TDITEMTYPE type() const;
  void set_type(::msg::TDITEMTYPE value);
  private:
  ::msg::TDITEMTYPE _internal_type() const;
  void _internal_set_type(::msg::TDITEMTYPE value);
  public:

  // int32 Level = 4;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDSkillData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SkillItem > skills_;
    int32_t id_;
    int32_t itemid_;
    int type_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDStageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDStageInfo) */ {
 public:
  inline TDStageInfo() : TDStageInfo(nullptr) {}
  ~TDStageInfo() override;
  explicit PROTOBUF_CONSTEXPR TDStageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDStageInfo(const TDStageInfo& from);
  TDStageInfo(TDStageInfo&& from) noexcept
    : TDStageInfo() {
    *this = ::std::move(from);
  }

  inline TDStageInfo& operator=(const TDStageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDStageInfo& operator=(TDStageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDStageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDStageInfo* internal_default_instance() {
    return reinterpret_cast<const TDStageInfo*>(
               &_TDStageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TDStageInfo& a, TDStageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDStageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDStageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDStageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDStageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDStageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDStageInfo& from) {
    TDStageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDStageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDStageInfo";
  }
  protected:
  explicit TDStageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDStageData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDStageData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDStageData >*
      mutable_datas();
  private:
  const ::msg::TDStageData& _internal_datas(int index) const;
  ::msg::TDStageData* _internal_add_datas();
  public:
  const ::msg::TDStageData& datas(int index) const;
  ::msg::TDStageData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDStageData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDStageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDStageData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDStageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDStageData) */ {
 public:
  inline TDStageData() : TDStageData(nullptr) {}
  ~TDStageData() override;
  explicit PROTOBUF_CONSTEXPR TDStageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDStageData(const TDStageData& from);
  TDStageData(TDStageData&& from) noexcept
    : TDStageData() {
    *this = ::std::move(from);
  }

  inline TDStageData& operator=(const TDStageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDStageData& operator=(TDStageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDStageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDStageData* internal_default_instance() {
    return reinterpret_cast<const TDStageData*>(
               &_TDStageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TDStageData& a, TDStageData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDStageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDStageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDStageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDStageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDStageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDStageData& from) {
    TDStageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDStageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDStageData";
  }
  protected:
  explicit TDStageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 4,
    kItemIdsFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 3,
  };
  // repeated .msg.TDItem Awards = 4;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // repeated int32 ItemIds = 5;
  int itemids_size() const;
  private:
  int _internal_itemids_size() const;
  public:
  void clear_itemids();
  private:
  int32_t _internal_itemids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_itemids() const;
  void _internal_add_itemids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_itemids();
  public:
  int32_t itemids(int index) const;
  void set_itemids(int index, int32_t value);
  void add_itemids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      itemids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_itemids();

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDStageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > itemids_;
    mutable std::atomic<int> _itemids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDItemInfo) */ {
 public:
  inline TDItemInfo() : TDItemInfo(nullptr) {}
  ~TDItemInfo() override;
  explicit PROTOBUF_CONSTEXPR TDItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDItemInfo(const TDItemInfo& from);
  TDItemInfo(TDItemInfo&& from) noexcept
    : TDItemInfo() {
    *this = ::std::move(from);
  }

  inline TDItemInfo& operator=(const TDItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDItemInfo& operator=(TDItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDItemInfo* internal_default_instance() {
    return reinterpret_cast<const TDItemInfo*>(
               &_TDItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TDItemInfo& a, TDItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDItemInfo& from) {
    TDItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDItemInfo";
  }
  protected:
  explicit TDItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .msg.TDItemData Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::msg::TDItemData* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItemData >*
      mutable_datas();
  private:
  const ::msg::TDItemData& _internal_datas(int index) const;
  ::msg::TDItemData* _internal_add_datas();
  public:
  const ::msg::TDItemData& datas(int index) const;
  ::msg::TDItemData* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItemData >&
      datas() const;

  // @@protoc_insertion_point(class_scope:msg.TDItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItemData > datas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDItemData) */ {
 public:
  inline TDItemData() : TDItemData(nullptr) {}
  ~TDItemData() override;
  explicit PROTOBUF_CONSTEXPR TDItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDItemData(const TDItemData& from);
  TDItemData(TDItemData&& from) noexcept
    : TDItemData() {
    *this = ::std::move(from);
  }

  inline TDItemData& operator=(const TDItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDItemData& operator=(TDItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDItemData* internal_default_instance() {
    return reinterpret_cast<const TDItemData*>(
               &_TDItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TDItemData& a, TDItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDItemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDItemData& from) {
    TDItemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDItemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDItemData";
  }
  protected:
  explicit TDItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdsFieldNumber = 7,
    kChessIdFieldNumber = 8,
    kNameFieldNumber = 3,
    kDescFieldNumber = 4,
    kIconFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQualityFieldNumber = 5,
    kCostFieldNumber = 9,
    kInitLevelFieldNumber = 10,
  };
  // repeated int32 ItemIds = 7;
  int itemids_size() const;
  private:
  int _internal_itemids_size() const;
  public:
  void clear_itemids();
  private:
  int32_t _internal_itemids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_itemids() const;
  void _internal_add_itemids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_itemids();
  public:
  int32_t itemids(int index) const;
  void set_itemids(int index, int32_t value);
  void add_itemids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      itemids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_itemids();

  // repeated int32 ChessId = 8;
  int chessid_size() const;
  private:
  int _internal_chessid_size() const;
  public:
  void clear_chessid();
  private:
  int32_t _internal_chessid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chessid() const;
  void _internal_add_chessid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chessid();
  public:
  int32_t chessid(int index) const;
  void set_chessid(int index, int32_t value);
  void add_chessid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chessid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chessid();

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Desc = 4;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string Icon = 6;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .msg.TDITEMTYPE Type = 2;
  void clear_type();
  ::msg::TDITEMTYPE type() const;
  void set_type(::msg::TDITEMTYPE value);
  private:
  ::msg::TDITEMTYPE _internal_type() const;
  void _internal_set_type(::msg::TDITEMTYPE value);
  public:

  // int32 Quality = 5;
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // int32 Cost = 9;
  void clear_cost();
  int32_t cost() const;
  void set_cost(int32_t value);
  private:
  int32_t _internal_cost() const;
  void _internal_set_cost(int32_t value);
  public:

  // int32 InitLevel = 10;
  void clear_initlevel();
  int32_t initlevel() const;
  void set_initlevel(int32_t value);
  private:
  int32_t _internal_initlevel() const;
  void _internal_set_initlevel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > itemids_;
    mutable std::atomic<int> _itemids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chessid_;
    mutable std::atomic<int> _chessid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
    int32_t id_;
    int type_;
    int32_t quality_;
    int32_t cost_;
    int32_t initlevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSReqTDGetOnHookAward final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqTDGetOnHookAward) */ {
 public:
  inline CSReqTDGetOnHookAward() : CSReqTDGetOnHookAward(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqTDGetOnHookAward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqTDGetOnHookAward(const CSReqTDGetOnHookAward& from);
  CSReqTDGetOnHookAward(CSReqTDGetOnHookAward&& from) noexcept
    : CSReqTDGetOnHookAward() {
    *this = ::std::move(from);
  }

  inline CSReqTDGetOnHookAward& operator=(const CSReqTDGetOnHookAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqTDGetOnHookAward& operator=(CSReqTDGetOnHookAward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqTDGetOnHookAward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqTDGetOnHookAward* internal_default_instance() {
    return reinterpret_cast<const CSReqTDGetOnHookAward*>(
               &_CSReqTDGetOnHookAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CSReqTDGetOnHookAward& a, CSReqTDGetOnHookAward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqTDGetOnHookAward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqTDGetOnHookAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqTDGetOnHookAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqTDGetOnHookAward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqTDGetOnHookAward& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqTDGetOnHookAward& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqTDGetOnHookAward";
  }
  protected:
  explicit CSReqTDGetOnHookAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqTDGetOnHookAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse& other);
  static const CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse*>(&_CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_towerdefense_2eproto;
};

// -------------------------------------------------------------------

class CSRspTDGetOnHookAward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspTDGetOnHookAward) */ {
 public:
  inline CSRspTDGetOnHookAward() : CSRspTDGetOnHookAward(nullptr) {}
  ~CSRspTDGetOnHookAward() override;
  explicit PROTOBUF_CONSTEXPR CSRspTDGetOnHookAward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspTDGetOnHookAward(const CSRspTDGetOnHookAward& from);
  CSRspTDGetOnHookAward(CSRspTDGetOnHookAward&& from) noexcept
    : CSRspTDGetOnHookAward() {
    *this = ::std::move(from);
  }

  inline CSRspTDGetOnHookAward& operator=(const CSRspTDGetOnHookAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspTDGetOnHookAward& operator=(CSRspTDGetOnHookAward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspTDGetOnHookAward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspTDGetOnHookAward* internal_default_instance() {
    return reinterpret_cast<const CSRspTDGetOnHookAward*>(
               &_CSRspTDGetOnHookAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSRspTDGetOnHookAward& a, CSRspTDGetOnHookAward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspTDGetOnHookAward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspTDGetOnHookAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspTDGetOnHookAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspTDGetOnHookAward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspTDGetOnHookAward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspTDGetOnHookAward& from) {
    CSRspTDGetOnHookAward::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspTDGetOnHookAward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspTDGetOnHookAward";
  }
  protected:
  explicit CSRspTDGetOnHookAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 1,
    kOnHookTimeRecordFieldNumber = 3,
    kOnHookTimeFieldNumber = 2,
  };
  // repeated .msg.TDItem Awards = 1;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // map<int64, int64> OnHookTimeRecord = 3;
  int onhooktimerecord_size() const;
  private:
  int _internal_onhooktimerecord_size() const;
  public:
  void clear_onhooktimerecord();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      _internal_onhooktimerecord() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      _internal_mutable_onhooktimerecord();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      onhooktimerecord() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      mutable_onhooktimerecord();

  // int64 OnHookTime = 2;
  void clear_onhooktime();
  int64_t onhooktime() const;
  void set_onhooktime(int64_t value);
  private:
  int64_t _internal_onhooktime() const;
  void _internal_set_onhooktime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspTDGetOnHookAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse,
        int64_t, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> onhooktimerecord_;
    int64_t onhooktime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CsReqTDDraw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CsReqTDDraw) */ {
 public:
  inline CsReqTDDraw() : CsReqTDDraw(nullptr) {}
  ~CsReqTDDraw() override;
  explicit PROTOBUF_CONSTEXPR CsReqTDDraw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsReqTDDraw(const CsReqTDDraw& from);
  CsReqTDDraw(CsReqTDDraw&& from) noexcept
    : CsReqTDDraw() {
    *this = ::std::move(from);
  }

  inline CsReqTDDraw& operator=(const CsReqTDDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsReqTDDraw& operator=(CsReqTDDraw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsReqTDDraw& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsReqTDDraw* internal_default_instance() {
    return reinterpret_cast<const CsReqTDDraw*>(
               &_CsReqTDDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CsReqTDDraw& a, CsReqTDDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CsReqTDDraw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsReqTDDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsReqTDDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsReqTDDraw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsReqTDDraw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CsReqTDDraw& from) {
    CsReqTDDraw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsReqTDDraw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CsReqTDDraw";
  }
  protected:
  explicit CsReqTDDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolIdFieldNumber = 1,
    kTenFieldNumber = 2,
  };
  // int32 PoolId = 1;
  void clear_poolid();
  int32_t poolid() const;
  void set_poolid(int32_t value);
  private:
  int32_t _internal_poolid() const;
  void _internal_set_poolid(int32_t value);
  public:

  // bool Ten = 2;
  void clear_ten();
  bool ten() const;
  void set_ten(bool value);
  private:
  bool _internal_ten() const;
  void _internal_set_ten(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CsReqTDDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t poolid_;
    bool ten_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CsRspTDDraw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CsRspTDDraw) */ {
 public:
  inline CsRspTDDraw() : CsRspTDDraw(nullptr) {}
  ~CsRspTDDraw() override;
  explicit PROTOBUF_CONSTEXPR CsRspTDDraw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsRspTDDraw(const CsRspTDDraw& from);
  CsRspTDDraw(CsRspTDDraw&& from) noexcept
    : CsRspTDDraw() {
    *this = ::std::move(from);
  }

  inline CsRspTDDraw& operator=(const CsRspTDDraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRspTDDraw& operator=(CsRspTDDraw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsRspTDDraw& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsRspTDDraw* internal_default_instance() {
    return reinterpret_cast<const CsRspTDDraw*>(
               &_CsRspTDDraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CsRspTDDraw& a, CsRspTDDraw& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRspTDDraw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsRspTDDraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsRspTDDraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsRspTDDraw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsRspTDDraw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CsRspTDDraw& from) {
    CsRspTDDraw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRspTDDraw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CsRspTDDraw";
  }
  protected:
  explicit CsRspTDDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 2,
    kConsumesFieldNumber = 3,
  };
  // repeated .msg.TDItem Awards = 2;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // repeated .msg.TDConsume Consumes = 3;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::TDConsume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consumes();
  private:
  const ::msg::TDConsume& _internal_consumes(int index) const;
  ::msg::TDConsume* _internal_add_consumes();
  public:
  const ::msg::TDConsume& consumes(int index) const;
  ::msg::TDConsume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consumes() const;

  // @@protoc_insertion_point(class_scope:msg.CsRspTDDraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consumes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CsReqTDBuyCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CsReqTDBuyCard) */ {
 public:
  inline CsReqTDBuyCard() : CsReqTDBuyCard(nullptr) {}
  ~CsReqTDBuyCard() override;
  explicit PROTOBUF_CONSTEXPR CsReqTDBuyCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsReqTDBuyCard(const CsReqTDBuyCard& from);
  CsReqTDBuyCard(CsReqTDBuyCard&& from) noexcept
    : CsReqTDBuyCard() {
    *this = ::std::move(from);
  }

  inline CsReqTDBuyCard& operator=(const CsReqTDBuyCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsReqTDBuyCard& operator=(CsReqTDBuyCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsReqTDBuyCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsReqTDBuyCard* internal_default_instance() {
    return reinterpret_cast<const CsReqTDBuyCard*>(
               &_CsReqTDBuyCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CsReqTDBuyCard& a, CsReqTDBuyCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CsReqTDBuyCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsReqTDBuyCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsReqTDBuyCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsReqTDBuyCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsReqTDBuyCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CsReqTDBuyCard& from) {
    CsReqTDBuyCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsReqTDBuyCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CsReqTDBuyCard";
  }
  protected:
  explicit CsReqTDBuyCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardCountFieldNumber = 1,
  };
  // int32 CardCount = 1;
  void clear_cardcount();
  int32_t cardcount() const;
  void set_cardcount(int32_t value);
  private:
  int32_t _internal_cardcount() const;
  void _internal_set_cardcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CsReqTDBuyCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cardcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CsRspTDBuyCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CsRspTDBuyCard) */ {
 public:
  inline CsRspTDBuyCard() : CsRspTDBuyCard(nullptr) {}
  ~CsRspTDBuyCard() override;
  explicit PROTOBUF_CONSTEXPR CsRspTDBuyCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsRspTDBuyCard(const CsRspTDBuyCard& from);
  CsRspTDBuyCard(CsRspTDBuyCard&& from) noexcept
    : CsRspTDBuyCard() {
    *this = ::std::move(from);
  }

  inline CsRspTDBuyCard& operator=(const CsRspTDBuyCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRspTDBuyCard& operator=(CsRspTDBuyCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsRspTDBuyCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsRspTDBuyCard* internal_default_instance() {
    return reinterpret_cast<const CsRspTDBuyCard*>(
               &_CsRspTDBuyCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CsRspTDBuyCard& a, CsRspTDBuyCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRspTDBuyCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsRspTDBuyCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsRspTDBuyCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsRspTDBuyCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsRspTDBuyCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CsRspTDBuyCard& from) {
    CsRspTDBuyCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRspTDBuyCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CsRspTDBuyCard";
  }
  protected:
  explicit CsRspTDBuyCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyCardFieldNumber = 1,
  };
  // .msg.TDBuy BuyCard = 1;
  bool has_buycard() const;
  private:
  bool _internal_has_buycard() const;
  public:
  void clear_buycard();
  const ::msg::TDBuy& buycard() const;
  PROTOBUF_NODISCARD ::msg::TDBuy* release_buycard();
  ::msg::TDBuy* mutable_buycard();
  void set_allocated_buycard(::msg::TDBuy* buycard);
  private:
  const ::msg::TDBuy& _internal_buycard() const;
  ::msg::TDBuy* _internal_mutable_buycard();
  public:
  void unsafe_arena_set_allocated_buycard(
      ::msg::TDBuy* buycard);
  ::msg::TDBuy* unsafe_arena_release_buycard();

  // @@protoc_insertion_point(class_scope:msg.CsRspTDBuyCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDBuy* buycard_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSNtfTDPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfTDPlayerInfo) */ {
 public:
  inline CSNtfTDPlayerInfo() : CSNtfTDPlayerInfo(nullptr) {}
  ~CSNtfTDPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR CSNtfTDPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfTDPlayerInfo(const CSNtfTDPlayerInfo& from);
  CSNtfTDPlayerInfo(CSNtfTDPlayerInfo&& from) noexcept
    : CSNtfTDPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CSNtfTDPlayerInfo& operator=(const CSNtfTDPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfTDPlayerInfo& operator=(CSNtfTDPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfTDPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfTDPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CSNtfTDPlayerInfo*>(
               &_CSNtfTDPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSNtfTDPlayerInfo& a, CSNtfTDPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfTDPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfTDPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfTDPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfTDPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfTDPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfTDPlayerInfo& from) {
    CSNtfTDPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfTDPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfTDPlayerInfo";
  }
  protected:
  explicit CSNtfTDPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
  };
  // .msg.TDPlayerInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::msg::TDPlayerInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::msg::TDPlayerInfo* release_playerinfo();
  ::msg::TDPlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::msg::TDPlayerInfo* playerinfo);
  private:
  const ::msg::TDPlayerInfo& _internal_playerinfo() const;
  ::msg::TDPlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::msg::TDPlayerInfo* playerinfo);
  ::msg::TDPlayerInfo* unsafe_arena_release_playerinfo();

  // @@protoc_insertion_point(class_scope:msg.CSNtfTDPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDPlayerInfo* playerinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSReqTDSetCardGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqTDSetCardGroup) */ {
 public:
  inline CSReqTDSetCardGroup() : CSReqTDSetCardGroup(nullptr) {}
  ~CSReqTDSetCardGroup() override;
  explicit PROTOBUF_CONSTEXPR CSReqTDSetCardGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqTDSetCardGroup(const CSReqTDSetCardGroup& from);
  CSReqTDSetCardGroup(CSReqTDSetCardGroup&& from) noexcept
    : CSReqTDSetCardGroup() {
    *this = ::std::move(from);
  }

  inline CSReqTDSetCardGroup& operator=(const CSReqTDSetCardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqTDSetCardGroup& operator=(CSReqTDSetCardGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqTDSetCardGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqTDSetCardGroup* internal_default_instance() {
    return reinterpret_cast<const CSReqTDSetCardGroup*>(
               &_CSReqTDSetCardGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CSReqTDSetCardGroup& a, CSReqTDSetCardGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqTDSetCardGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqTDSetCardGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqTDSetCardGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqTDSetCardGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqTDSetCardGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqTDSetCardGroup& from) {
    CSReqTDSetCardGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqTDSetCardGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqTDSetCardGroup";
  }
  protected:
  explicit CSReqTDSetCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardGroupFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .msg.TDCardGroup CardGroup = 2;
  bool has_cardgroup() const;
  private:
  bool _internal_has_cardgroup() const;
  public:
  void clear_cardgroup();
  const ::msg::TDCardGroup& cardgroup() const;
  PROTOBUF_NODISCARD ::msg::TDCardGroup* release_cardgroup();
  ::msg::TDCardGroup* mutable_cardgroup();
  void set_allocated_cardgroup(::msg::TDCardGroup* cardgroup);
  private:
  const ::msg::TDCardGroup& _internal_cardgroup() const;
  ::msg::TDCardGroup* _internal_mutable_cardgroup();
  public:
  void unsafe_arena_set_allocated_cardgroup(
      ::msg::TDCardGroup* cardgroup);
  ::msg::TDCardGroup* unsafe_arena_release_cardgroup();

  // .msg.TDITEMTYPE Type = 1;
  void clear_type();
  ::msg::TDITEMTYPE type() const;
  void set_type(::msg::TDITEMTYPE value);
  private:
  ::msg::TDITEMTYPE _internal_type() const;
  void _internal_set_type(::msg::TDITEMTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqTDSetCardGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDCardGroup* cardgroup_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSRspTDSetCardGroup final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspTDSetCardGroup) */ {
 public:
  inline CSRspTDSetCardGroup() : CSRspTDSetCardGroup(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspTDSetCardGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspTDSetCardGroup(const CSRspTDSetCardGroup& from);
  CSRspTDSetCardGroup(CSRspTDSetCardGroup&& from) noexcept
    : CSRspTDSetCardGroup() {
    *this = ::std::move(from);
  }

  inline CSRspTDSetCardGroup& operator=(const CSRspTDSetCardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspTDSetCardGroup& operator=(CSRspTDSetCardGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspTDSetCardGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspTDSetCardGroup* internal_default_instance() {
    return reinterpret_cast<const CSRspTDSetCardGroup*>(
               &_CSRspTDSetCardGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CSRspTDSetCardGroup& a, CSRspTDSetCardGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspTDSetCardGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspTDSetCardGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspTDSetCardGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspTDSetCardGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspTDSetCardGroup& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspTDSetCardGroup& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspTDSetCardGroup";
  }
  protected:
  explicit CSRspTDSetCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspTDSetCardGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSReqTDLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqTDLevelUp) */ {
 public:
  inline CSReqTDLevelUp() : CSReqTDLevelUp(nullptr) {}
  ~CSReqTDLevelUp() override;
  explicit PROTOBUF_CONSTEXPR CSReqTDLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqTDLevelUp(const CSReqTDLevelUp& from);
  CSReqTDLevelUp(CSReqTDLevelUp&& from) noexcept
    : CSReqTDLevelUp() {
    *this = ::std::move(from);
  }

  inline CSReqTDLevelUp& operator=(const CSReqTDLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqTDLevelUp& operator=(CSReqTDLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqTDLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqTDLevelUp* internal_default_instance() {
    return reinterpret_cast<const CSReqTDLevelUp*>(
               &_CSReqTDLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CSReqTDLevelUp& a, CSReqTDLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqTDLevelUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqTDLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqTDLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqTDLevelUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqTDLevelUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqTDLevelUp& from) {
    CSReqTDLevelUp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqTDLevelUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqTDLevelUp";
  }
  protected:
  explicit CSReqTDLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumesFieldNumber = 4,
    kSlotFieldNumber = 7,
    kIdFieldNumber = 1,
    kBluePrintFieldNumber = 5,
    kChessIdFieldNumber = 6,
    kEquipFieldNumber = 2,
    kLvUpTypeFieldNumber = 3,
  };
  // repeated .msg.TDConsume Consumes = 4;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::TDConsume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consumes();
  private:
  const ::msg::TDConsume& _internal_consumes(int index) const;
  ::msg::TDConsume* _internal_add_consumes();
  public:
  const ::msg::TDConsume& consumes(int index) const;
  ::msg::TDConsume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consumes() const;

  // string Slot = 7;
  void clear_slot();
  const std::string& slot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot();
  PROTOBUF_NODISCARD std::string* release_slot();
  void set_allocated_slot(std::string* slot);
  private:
  const std::string& _internal_slot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot(const std::string& value);
  std::string* _internal_mutable_slot();
  public:

  // .msg.TDItemId Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::msg::TDItemId& id() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_id();
  ::msg::TDItemId* mutable_id();
  void set_allocated_id(::msg::TDItemId* id);
  private:
  const ::msg::TDItemId& _internal_id() const;
  ::msg::TDItemId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::msg::TDItemId* id);
  ::msg::TDItemId* unsafe_arena_release_id();

  // .msg.TDItem BluePrint = 5;
  bool has_blueprint() const;
  private:
  bool _internal_has_blueprint() const;
  public:
  void clear_blueprint();
  const ::msg::TDItem& blueprint() const;
  PROTOBUF_NODISCARD ::msg::TDItem* release_blueprint();
  ::msg::TDItem* mutable_blueprint();
  void set_allocated_blueprint(::msg::TDItem* blueprint);
  private:
  const ::msg::TDItem& _internal_blueprint() const;
  ::msg::TDItem* _internal_mutable_blueprint();
  public:
  void unsafe_arena_set_allocated_blueprint(
      ::msg::TDItem* blueprint);
  ::msg::TDItem* unsafe_arena_release_blueprint();

  // .msg.TDItemId ChessId = 6;
  bool has_chessid() const;
  private:
  bool _internal_has_chessid() const;
  public:
  void clear_chessid();
  const ::msg::TDItemId& chessid() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_chessid();
  ::msg::TDItemId* mutable_chessid();
  void set_allocated_chessid(::msg::TDItemId* chessid);
  private:
  const ::msg::TDItemId& _internal_chessid() const;
  ::msg::TDItemId* _internal_mutable_chessid();
  public:
  void unsafe_arena_set_allocated_chessid(
      ::msg::TDItemId* chessid);
  ::msg::TDItemId* unsafe_arena_release_chessid();

  // bool Equip = 2;
  void clear_equip();
  bool equip() const;
  void set_equip(bool value);
  private:
  bool _internal_equip() const;
  void _internal_set_equip(bool value);
  public:

  // .msg.TDLEVELUP_TYPE LvUpType = 3;
  void clear_lvuptype();
  ::msg::TDLEVELUP_TYPE lvuptype() const;
  void set_lvuptype(::msg::TDLEVELUP_TYPE value);
  private:
  ::msg::TDLEVELUP_TYPE _internal_lvuptype() const;
  void _internal_set_lvuptype(::msg::TDLEVELUP_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqTDLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_;
    ::msg::TDItemId* id_;
    ::msg::TDItem* blueprint_;
    ::msg::TDItemId* chessid_;
    bool equip_;
    int lvuptype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSRspTDLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspTDLevelUp) */ {
 public:
  inline CSRspTDLevelUp() : CSRspTDLevelUp(nullptr) {}
  ~CSRspTDLevelUp() override;
  explicit PROTOBUF_CONSTEXPR CSRspTDLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspTDLevelUp(const CSRspTDLevelUp& from);
  CSRspTDLevelUp(CSRspTDLevelUp&& from) noexcept
    : CSRspTDLevelUp() {
    *this = ::std::move(from);
  }

  inline CSRspTDLevelUp& operator=(const CSRspTDLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspTDLevelUp& operator=(CSRspTDLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspTDLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspTDLevelUp* internal_default_instance() {
    return reinterpret_cast<const CSRspTDLevelUp*>(
               &_CSRspTDLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CSRspTDLevelUp& a, CSRspTDLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspTDLevelUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspTDLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspTDLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspTDLevelUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspTDLevelUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspTDLevelUp& from) {
    CSRspTDLevelUp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspTDLevelUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspTDLevelUp";
  }
  protected:
  explicit CSRspTDLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumesFieldNumber = 1,
    kAwardsFieldNumber = 2,
  };
  // repeated .msg.TDConsume Consumes = 1;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::TDConsume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consumes();
  private:
  const ::msg::TDConsume& _internal_consumes(int index) const;
  ::msg::TDConsume* _internal_add_consumes();
  public:
  const ::msg::TDConsume& consumes(int index) const;
  ::msg::TDConsume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consumes() const;

  // repeated .msg.TDItem Awards = 2;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // @@protoc_insertion_point(class_scope:msg.CSRspTDLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSReqTDEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqTDEquip) */ {
 public:
  inline CSReqTDEquip() : CSReqTDEquip(nullptr) {}
  ~CSReqTDEquip() override;
  explicit PROTOBUF_CONSTEXPR CSReqTDEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqTDEquip(const CSReqTDEquip& from);
  CSReqTDEquip(CSReqTDEquip&& from) noexcept
    : CSReqTDEquip() {
    *this = ::std::move(from);
  }

  inline CSReqTDEquip& operator=(const CSReqTDEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqTDEquip& operator=(CSReqTDEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqTDEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqTDEquip* internal_default_instance() {
    return reinterpret_cast<const CSReqTDEquip*>(
               &_CSReqTDEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CSReqTDEquip& a, CSReqTDEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqTDEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqTDEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqTDEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqTDEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqTDEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqTDEquip& from) {
    CSReqTDEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqTDEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqTDEquip";
  }
  protected:
  explicit CSReqTDEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 2,
    kChessIdFieldNumber = 1,
    kEquipIdFieldNumber = 4,
    kTakeOffFieldNumber = 3,
  };
  // string Slot = 2;
  void clear_slot();
  const std::string& slot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot();
  PROTOBUF_NODISCARD std::string* release_slot();
  void set_allocated_slot(std::string* slot);
  private:
  const std::string& _internal_slot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot(const std::string& value);
  std::string* _internal_mutable_slot();
  public:

  // .msg.TDItemId ChessId = 1;
  bool has_chessid() const;
  private:
  bool _internal_has_chessid() const;
  public:
  void clear_chessid();
  const ::msg::TDItemId& chessid() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_chessid();
  ::msg::TDItemId* mutable_chessid();
  void set_allocated_chessid(::msg::TDItemId* chessid);
  private:
  const ::msg::TDItemId& _internal_chessid() const;
  ::msg::TDItemId* _internal_mutable_chessid();
  public:
  void unsafe_arena_set_allocated_chessid(
      ::msg::TDItemId* chessid);
  ::msg::TDItemId* unsafe_arena_release_chessid();

  // .msg.TDItemId EquipId = 4;
  bool has_equipid() const;
  private:
  bool _internal_has_equipid() const;
  public:
  void clear_equipid();
  const ::msg::TDItemId& equipid() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_equipid();
  ::msg::TDItemId* mutable_equipid();
  void set_allocated_equipid(::msg::TDItemId* equipid);
  private:
  const ::msg::TDItemId& _internal_equipid() const;
  ::msg::TDItemId* _internal_mutable_equipid();
  public:
  void unsafe_arena_set_allocated_equipid(
      ::msg::TDItemId* equipid);
  ::msg::TDItemId* unsafe_arena_release_equipid();

  // bool TakeOff = 3;
  void clear_takeoff();
  bool takeoff() const;
  void set_takeoff(bool value);
  private:
  bool _internal_takeoff() const;
  void _internal_set_takeoff(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqTDEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_;
    ::msg::TDItemId* chessid_;
    ::msg::TDItemId* equipid_;
    bool takeoff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class CSRspTDEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspTDEquip) */ {
 public:
  inline CSRspTDEquip() : CSRspTDEquip(nullptr) {}
  ~CSRspTDEquip() override;
  explicit PROTOBUF_CONSTEXPR CSRspTDEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspTDEquip(const CSRspTDEquip& from);
  CSRspTDEquip(CSRspTDEquip&& from) noexcept
    : CSRspTDEquip() {
    *this = ::std::move(from);
  }

  inline CSRspTDEquip& operator=(const CSRspTDEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspTDEquip& operator=(CSRspTDEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspTDEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspTDEquip* internal_default_instance() {
    return reinterpret_cast<const CSRspTDEquip*>(
               &_CSRspTDEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CSRspTDEquip& a, CSRspTDEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspTDEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspTDEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspTDEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspTDEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspTDEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspTDEquip& from) {
    CSRspTDEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspTDEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspTDEquip";
  }
  protected:
  explicit CSRspTDEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumesFieldNumber = 1,
    kAwardsFieldNumber = 2,
  };
  // repeated .msg.TDConsume Consumes = 1;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::TDConsume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
      mutable_consumes();
  private:
  const ::msg::TDConsume& _internal_consumes(int index) const;
  ::msg::TDConsume* _internal_add_consumes();
  public:
  const ::msg::TDConsume& consumes(int index) const;
  ::msg::TDConsume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
      consumes() const;

  // repeated .msg.TDItem Awards = 2;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::TDItem* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_awards();
  private:
  const ::msg::TDItem& _internal_awards(int index) const;
  ::msg::TDItem* _internal_add_awards();
  public:
  const ::msg::TDItem& awards(int index) const;
  ::msg::TDItem* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      awards() const;

  // @@protoc_insertion_point(class_scope:msg.CSRspTDEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > awards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// -------------------------------------------------------------------

class TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse& other);
  static const TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse*>(&_TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_towerdefense_2eproto;
};

// -------------------------------------------------------------------

class TDPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDPlayerInfo) */ {
 public:
  inline TDPlayerInfo() : TDPlayerInfo(nullptr) {}
  ~TDPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR TDPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDPlayerInfo(const TDPlayerInfo& from);
  TDPlayerInfo(TDPlayerInfo&& from) noexcept
    : TDPlayerInfo() {
    *this = ::std::move(from);
  }

  inline TDPlayerInfo& operator=(const TDPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDPlayerInfo& operator=(TDPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const TDPlayerInfo*>(
               &_TDPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TDPlayerInfo& a, TDPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TDPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDPlayerInfo& from) {
    TDPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDPlayerInfo";
  }
  protected:
  explicit TDPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kOnHookTimeRecordFieldNumber = 6,
    kItemGroupFieldNumber = 4,
    kOnHookTimeFieldNumber = 1,
    kOnHookStageFieldNumber = 2,
    kLastStageFieldNumber = 3,
  };
  // repeated .msg.TDItem Items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::msg::TDItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
      mutable_items();
  private:
  const ::msg::TDItem& _internal_items(int index) const;
  ::msg::TDItem* _internal_add_items();
  public:
  const ::msg::TDItem& items(int index) const;
  ::msg::TDItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
      items() const;

  // map<int64, int64> OnHookTimeRecord = 6;
  int onhooktimerecord_size() const;
  private:
  int _internal_onhooktimerecord_size() const;
  public:
  void clear_onhooktimerecord();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      _internal_onhooktimerecord() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      _internal_mutable_onhooktimerecord();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      onhooktimerecord() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      mutable_onhooktimerecord();

  // .msg.TDItemGroup ItemGroup = 4;
  bool has_itemgroup() const;
  private:
  bool _internal_has_itemgroup() const;
  public:
  void clear_itemgroup();
  const ::msg::TDItemGroup& itemgroup() const;
  PROTOBUF_NODISCARD ::msg::TDItemGroup* release_itemgroup();
  ::msg::TDItemGroup* mutable_itemgroup();
  void set_allocated_itemgroup(::msg::TDItemGroup* itemgroup);
  private:
  const ::msg::TDItemGroup& _internal_itemgroup() const;
  ::msg::TDItemGroup* _internal_mutable_itemgroup();
  public:
  void unsafe_arena_set_allocated_itemgroup(
      ::msg::TDItemGroup* itemgroup);
  ::msg::TDItemGroup* unsafe_arena_release_itemgroup();

  // int64 OnHookTime = 1;
  void clear_onhooktime();
  int64_t onhooktime() const;
  void set_onhooktime(int64_t value);
  private:
  int64_t _internal_onhooktime() const;
  void _internal_set_onhooktime(int64_t value);
  public:

  // int32 OnHookStage = 2;
  void clear_onhookstage();
  int32_t onhookstage() const;
  void set_onhookstage(int32_t value);
  private:
  int32_t _internal_onhookstage() const;
  void _internal_set_onhookstage(int32_t value);
  public:

  // int32 LastStage = 3;
  void clear_laststage();
  int32_t laststage() const;
  void set_laststage(int32_t value);
  private:
  int32_t _internal_laststage() const;
  void _internal_set_laststage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse,
        int64_t, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> onhooktimerecord_;
    ::msg::TDItemGroup* itemgroup_;
    int64_t onhooktime_;
    int32_t onhookstage_;
    int32_t laststage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_towerdefense_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OnHookOutPutInfo

// repeated .msg.OnHookOutPutData Datas = 1;
inline int OnHookOutPutInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int OnHookOutPutInfo::datas_size() const {
  return _internal_datas_size();
}
inline void OnHookOutPutInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::OnHookOutPutData* OnHookOutPutInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.OnHookOutPutInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OnHookOutPutData >*
OnHookOutPutInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.OnHookOutPutInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::OnHookOutPutData& OnHookOutPutInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::OnHookOutPutData& OnHookOutPutInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.OnHookOutPutInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::OnHookOutPutData* OnHookOutPutInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::OnHookOutPutData* OnHookOutPutInfo::add_datas() {
  ::msg::OnHookOutPutData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.OnHookOutPutInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OnHookOutPutData >&
OnHookOutPutInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.OnHookOutPutInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// OnHookOutPutData

// int32 StageId = 1;
inline void OnHookOutPutData::clear_stageid() {
  _impl_.stageid_ = 0;
}
inline int32_t OnHookOutPutData::_internal_stageid() const {
  return _impl_.stageid_;
}
inline int32_t OnHookOutPutData::stageid() const {
  // @@protoc_insertion_point(field_get:msg.OnHookOutPutData.StageId)
  return _internal_stageid();
}
inline void OnHookOutPutData::_internal_set_stageid(int32_t value) {
  
  _impl_.stageid_ = value;
}
inline void OnHookOutPutData::set_stageid(int32_t value) {
  _internal_set_stageid(value);
  // @@protoc_insertion_point(field_set:msg.OnHookOutPutData.StageId)
}

// repeated .msg.TDOutPut Effect = 2;
inline int OnHookOutPutData::_internal_effect_size() const {
  return _impl_.effect_.size();
}
inline int OnHookOutPutData::effect_size() const {
  return _internal_effect_size();
}
inline void OnHookOutPutData::clear_effect() {
  _impl_.effect_.Clear();
}
inline ::msg::TDOutPut* OnHookOutPutData::mutable_effect(int index) {
  // @@protoc_insertion_point(field_mutable:msg.OnHookOutPutData.Effect)
  return _impl_.effect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDOutPut >*
OnHookOutPutData::mutable_effect() {
  // @@protoc_insertion_point(field_mutable_list:msg.OnHookOutPutData.Effect)
  return &_impl_.effect_;
}
inline const ::msg::TDOutPut& OnHookOutPutData::_internal_effect(int index) const {
  return _impl_.effect_.Get(index);
}
inline const ::msg::TDOutPut& OnHookOutPutData::effect(int index) const {
  // @@protoc_insertion_point(field_get:msg.OnHookOutPutData.Effect)
  return _internal_effect(index);
}
inline ::msg::TDOutPut* OnHookOutPutData::_internal_add_effect() {
  return _impl_.effect_.Add();
}
inline ::msg::TDOutPut* OnHookOutPutData::add_effect() {
  ::msg::TDOutPut* _add = _internal_add_effect();
  // @@protoc_insertion_point(field_add:msg.OnHookOutPutData.Effect)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDOutPut >&
OnHookOutPutData::effect() const {
  // @@protoc_insertion_point(field_list:msg.OnHookOutPutData.Effect)
  return _impl_.effect_;
}

// -------------------------------------------------------------------

// TDOutPut

// int64 Interval = 1;
inline void TDOutPut::clear_interval() {
  _impl_.interval_ = int64_t{0};
}
inline int64_t TDOutPut::_internal_interval() const {
  return _impl_.interval_;
}
inline int64_t TDOutPut::interval() const {
  // @@protoc_insertion_point(field_get:msg.TDOutPut.Interval)
  return _internal_interval();
}
inline void TDOutPut::_internal_set_interval(int64_t value) {
  
  _impl_.interval_ = value;
}
inline void TDOutPut::set_interval(int64_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:msg.TDOutPut.Interval)
}

// repeated .msg.TDItem Awards = 2;
inline int TDOutPut::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int TDOutPut::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* TDOutPut::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDOutPut.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDOutPut::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDOutPut.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& TDOutPut::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& TDOutPut::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDOutPut.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* TDOutPut::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* TDOutPut::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.TDOutPut.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDOutPut::awards() const {
  // @@protoc_insertion_point(field_list:msg.TDOutPut.Awards)
  return _impl_.awards_;
}

// -------------------------------------------------------------------

// TDConsume

// int32 Id = 1;
inline void TDConsume::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDConsume::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDConsume::id() const {
  // @@protoc_insertion_point(field_get:msg.TDConsume.Id)
  return _internal_id();
}
inline void TDConsume::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDConsume::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDConsume.Id)
}

// int32 Count = 2;
inline void TDConsume::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t TDConsume::_internal_count() const {
  return _impl_.count_;
}
inline int32_t TDConsume::count() const {
  // @@protoc_insertion_point(field_get:msg.TDConsume.Count)
  return _internal_count();
}
inline void TDConsume::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void TDConsume::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.TDConsume.Count)
}

// int32 Level = 3;
inline void TDConsume::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDConsume::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDConsume::level() const {
  // @@protoc_insertion_point(field_get:msg.TDConsume.Level)
  return _internal_level();
}
inline void TDConsume::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDConsume::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDConsume.Level)
}

// -------------------------------------------------------------------

// TDBuy

// repeated .msg.TDItem Awards = 1;
inline int TDBuy::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int TDBuy::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* TDBuy::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDBuy.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDBuy::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDBuy.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& TDBuy::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& TDBuy::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDBuy.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* TDBuy::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* TDBuy::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.TDBuy.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDBuy::awards() const {
  // @@protoc_insertion_point(field_list:msg.TDBuy.Awards)
  return _impl_.awards_;
}

// repeated .msg.Consume Consumes = 2;
inline int TDBuy::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int TDBuy::consumes_size() const {
  return _internal_consumes_size();
}
inline ::msg::Consume* TDBuy::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDBuy.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >*
TDBuy::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDBuy.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::Consume& TDBuy::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::Consume& TDBuy::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDBuy.Consumes)
  return _internal_consumes(index);
}
inline ::msg::Consume* TDBuy::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::Consume* TDBuy::add_consumes() {
  ::msg::Consume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.TDBuy.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >&
TDBuy::consumes() const {
  // @@protoc_insertion_point(field_list:msg.TDBuy.Consumes)
  return _impl_.consumes_;
}

// repeated .msg.TDItem ExAwards = 3;
inline int TDBuy::_internal_exawards_size() const {
  return _impl_.exawards_.size();
}
inline int TDBuy::exawards_size() const {
  return _internal_exawards_size();
}
inline ::msg::TDItem* TDBuy::mutable_exawards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDBuy.ExAwards)
  return _impl_.exawards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDBuy::mutable_exawards() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDBuy.ExAwards)
  return &_impl_.exawards_;
}
inline const ::msg::TDItem& TDBuy::_internal_exawards(int index) const {
  return _impl_.exawards_.Get(index);
}
inline const ::msg::TDItem& TDBuy::exawards(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDBuy.ExAwards)
  return _internal_exawards(index);
}
inline ::msg::TDItem* TDBuy::_internal_add_exawards() {
  return _impl_.exawards_.Add();
}
inline ::msg::TDItem* TDBuy::add_exawards() {
  ::msg::TDItem* _add = _internal_add_exawards();
  // @@protoc_insertion_point(field_add:msg.TDBuy.ExAwards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDBuy::exawards() const {
  // @@protoc_insertion_point(field_list:msg.TDBuy.ExAwards)
  return _impl_.exawards_;
}

// -------------------------------------------------------------------

// TDRandCardInfo

// repeated .msg.TDRandCardData Datas = 1;
inline int TDRandCardInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDRandCardInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDRandCardInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDRandCardData* TDRandCardInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandCardData >*
TDRandCardInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDRandCardInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDRandCardData& TDRandCardInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDRandCardData& TDRandCardInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDRandCardData* TDRandCardInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDRandCardData* TDRandCardInfo::add_datas() {
  ::msg::TDRandCardData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDRandCardInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandCardData >&
TDRandCardInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDRandCardInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// TDRandCardData

// int32 Id = 1;
inline void TDRandCardData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDRandCardData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDRandCardData::id() const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.Id)
  return _internal_id();
}
inline void TDRandCardData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDRandCardData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDRandCardData.Id)
}

// string Name = 2;
inline void TDRandCardData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TDRandCardData::name() const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDRandCardData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDRandCardData.Name)
}
inline std::string* TDRandCardData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardData.Name)
  return _s;
}
inline const std::string& TDRandCardData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TDRandCardData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TDRandCardData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TDRandCardData::release_name() {
  // @@protoc_insertion_point(field_release:msg.TDRandCardData.Name)
  return _impl_.name_.Release();
}
inline void TDRandCardData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDRandCardData.Name)
}

// string StartTime = 3;
inline void TDRandCardData::clear_starttime() {
  _impl_.starttime_.ClearToEmpty();
}
inline const std::string& TDRandCardData::starttime() const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.StartTime)
  return _internal_starttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDRandCardData::set_starttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.starttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDRandCardData.StartTime)
}
inline std::string* TDRandCardData::mutable_starttime() {
  std::string* _s = _internal_mutable_starttime();
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardData.StartTime)
  return _s;
}
inline const std::string& TDRandCardData::_internal_starttime() const {
  return _impl_.starttime_.Get();
}
inline void TDRandCardData::_internal_set_starttime(const std::string& value) {
  
  _impl_.starttime_.Set(value, GetArenaForAllocation());
}
inline std::string* TDRandCardData::_internal_mutable_starttime() {
  
  return _impl_.starttime_.Mutable(GetArenaForAllocation());
}
inline std::string* TDRandCardData::release_starttime() {
  // @@protoc_insertion_point(field_release:msg.TDRandCardData.StartTime)
  return _impl_.starttime_.Release();
}
inline void TDRandCardData::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  _impl_.starttime_.SetAllocated(starttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.starttime_.IsDefault()) {
    _impl_.starttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDRandCardData.StartTime)
}

// string EndTime = 4;
inline void TDRandCardData::clear_endtime() {
  _impl_.endtime_.ClearToEmpty();
}
inline const std::string& TDRandCardData::endtime() const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.EndTime)
  return _internal_endtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDRandCardData::set_endtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.endtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDRandCardData.EndTime)
}
inline std::string* TDRandCardData::mutable_endtime() {
  std::string* _s = _internal_mutable_endtime();
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardData.EndTime)
  return _s;
}
inline const std::string& TDRandCardData::_internal_endtime() const {
  return _impl_.endtime_.Get();
}
inline void TDRandCardData::_internal_set_endtime(const std::string& value) {
  
  _impl_.endtime_.Set(value, GetArenaForAllocation());
}
inline std::string* TDRandCardData::_internal_mutable_endtime() {
  
  return _impl_.endtime_.Mutable(GetArenaForAllocation());
}
inline std::string* TDRandCardData::release_endtime() {
  // @@protoc_insertion_point(field_release:msg.TDRandCardData.EndTime)
  return _impl_.endtime_.Release();
}
inline void TDRandCardData::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  _impl_.endtime_.SetAllocated(endtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endtime_.IsDefault()) {
    _impl_.endtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDRandCardData.EndTime)
}

// string Background = 5;
inline void TDRandCardData::clear_background() {
  _impl_.background_.ClearToEmpty();
}
inline const std::string& TDRandCardData::background() const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.Background)
  return _internal_background();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDRandCardData::set_background(ArgT0&& arg0, ArgT... args) {
 
 _impl_.background_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDRandCardData.Background)
}
inline std::string* TDRandCardData::mutable_background() {
  std::string* _s = _internal_mutable_background();
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardData.Background)
  return _s;
}
inline const std::string& TDRandCardData::_internal_background() const {
  return _impl_.background_.Get();
}
inline void TDRandCardData::_internal_set_background(const std::string& value) {
  
  _impl_.background_.Set(value, GetArenaForAllocation());
}
inline std::string* TDRandCardData::_internal_mutable_background() {
  
  return _impl_.background_.Mutable(GetArenaForAllocation());
}
inline std::string* TDRandCardData::release_background() {
  // @@protoc_insertion_point(field_release:msg.TDRandCardData.Background)
  return _impl_.background_.Release();
}
inline void TDRandCardData::set_allocated_background(std::string* background) {
  if (background != nullptr) {
    
  } else {
    
  }
  _impl_.background_.SetAllocated(background, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.background_.IsDefault()) {
    _impl_.background_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDRandCardData.Background)
}

// repeated .msg.TDConsume Consume = 6;
inline int TDRandCardData::_internal_consume_size() const {
  return _impl_.consume_.size();
}
inline int TDRandCardData::consume_size() const {
  return _internal_consume_size();
}
inline void TDRandCardData::clear_consume() {
  _impl_.consume_.Clear();
}
inline ::msg::TDConsume* TDRandCardData::mutable_consume(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardData.Consume)
  return _impl_.consume_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
TDRandCardData::mutable_consume() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDRandCardData.Consume)
  return &_impl_.consume_;
}
inline const ::msg::TDConsume& TDRandCardData::_internal_consume(int index) const {
  return _impl_.consume_.Get(index);
}
inline const ::msg::TDConsume& TDRandCardData::consume(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.Consume)
  return _internal_consume(index);
}
inline ::msg::TDConsume* TDRandCardData::_internal_add_consume() {
  return _impl_.consume_.Add();
}
inline ::msg::TDConsume* TDRandCardData::add_consume() {
  ::msg::TDConsume* _add = _internal_add_consume();
  // @@protoc_insertion_point(field_add:msg.TDRandCardData.Consume)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
TDRandCardData::consume() const {
  // @@protoc_insertion_point(field_list:msg.TDRandCardData.Consume)
  return _impl_.consume_;
}

// repeated .msg.TDConsume TenDrawConsumes = 7;
inline int TDRandCardData::_internal_tendrawconsumes_size() const {
  return _impl_.tendrawconsumes_.size();
}
inline int TDRandCardData::tendrawconsumes_size() const {
  return _internal_tendrawconsumes_size();
}
inline void TDRandCardData::clear_tendrawconsumes() {
  _impl_.tendrawconsumes_.Clear();
}
inline ::msg::TDConsume* TDRandCardData::mutable_tendrawconsumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDRandCardData.TenDrawConsumes)
  return _impl_.tendrawconsumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
TDRandCardData::mutable_tendrawconsumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDRandCardData.TenDrawConsumes)
  return &_impl_.tendrawconsumes_;
}
inline const ::msg::TDConsume& TDRandCardData::_internal_tendrawconsumes(int index) const {
  return _impl_.tendrawconsumes_.Get(index);
}
inline const ::msg::TDConsume& TDRandCardData::tendrawconsumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.TenDrawConsumes)
  return _internal_tendrawconsumes(index);
}
inline ::msg::TDConsume* TDRandCardData::_internal_add_tendrawconsumes() {
  return _impl_.tendrawconsumes_.Add();
}
inline ::msg::TDConsume* TDRandCardData::add_tendrawconsumes() {
  ::msg::TDConsume* _add = _internal_add_tendrawconsumes();
  // @@protoc_insertion_point(field_add:msg.TDRandCardData.TenDrawConsumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
TDRandCardData::tendrawconsumes() const {
  // @@protoc_insertion_point(field_list:msg.TDRandCardData.TenDrawConsumes)
  return _impl_.tendrawconsumes_;
}

// int32 ChestId = 8;
inline void TDRandCardData::clear_chestid() {
  _impl_.chestid_ = 0;
}
inline int32_t TDRandCardData::_internal_chestid() const {
  return _impl_.chestid_;
}
inline int32_t TDRandCardData::chestid() const {
  // @@protoc_insertion_point(field_get:msg.TDRandCardData.ChestId)
  return _internal_chestid();
}
inline void TDRandCardData::_internal_set_chestid(int32_t value) {
  
  _impl_.chestid_ = value;
}
inline void TDRandCardData::set_chestid(int32_t value) {
  _internal_set_chestid(value);
  // @@protoc_insertion_point(field_set:msg.TDRandCardData.ChestId)
}

// -------------------------------------------------------------------

// TDRandPoolInfo

// repeated .msg.TDRandPoolData Datas = 1;
inline int TDRandPoolInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDRandPoolInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDRandPoolInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDRandPoolData* TDRandPoolInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDRandPoolInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandPoolData >*
TDRandPoolInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDRandPoolInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDRandPoolData& TDRandPoolInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDRandPoolData& TDRandPoolInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDRandPoolInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDRandPoolData* TDRandPoolInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDRandPoolData* TDRandPoolInfo::add_datas() {
  ::msg::TDRandPoolData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDRandPoolInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDRandPoolData >&
TDRandPoolInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDRandPoolInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// TDRandPoolData

// int32 Id = 1;
inline void TDRandPoolData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDRandPoolData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDRandPoolData::id() const {
  // @@protoc_insertion_point(field_get:msg.TDRandPoolData.Id)
  return _internal_id();
}
inline void TDRandPoolData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDRandPoolData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDRandPoolData.Id)
}

// int32 PoolId = 2;
inline void TDRandPoolData::clear_poolid() {
  _impl_.poolid_ = 0;
}
inline int32_t TDRandPoolData::_internal_poolid() const {
  return _impl_.poolid_;
}
inline int32_t TDRandPoolData::poolid() const {
  // @@protoc_insertion_point(field_get:msg.TDRandPoolData.PoolId)
  return _internal_poolid();
}
inline void TDRandPoolData::_internal_set_poolid(int32_t value) {
  
  _impl_.poolid_ = value;
}
inline void TDRandPoolData::set_poolid(int32_t value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:msg.TDRandPoolData.PoolId)
}

// .msg.TDItem AwardItem = 3;
inline bool TDRandPoolData::_internal_has_awarditem() const {
  return this != internal_default_instance() && _impl_.awarditem_ != nullptr;
}
inline bool TDRandPoolData::has_awarditem() const {
  return _internal_has_awarditem();
}
inline const ::msg::TDItem& TDRandPoolData::_internal_awarditem() const {
  const ::msg::TDItem* p = _impl_.awarditem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItem&>(
      ::msg::_TDItem_default_instance_);
}
inline const ::msg::TDItem& TDRandPoolData::awarditem() const {
  // @@protoc_insertion_point(field_get:msg.TDRandPoolData.AwardItem)
  return _internal_awarditem();
}
inline void TDRandPoolData::unsafe_arena_set_allocated_awarditem(
    ::msg::TDItem* awarditem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.awarditem_);
  }
  _impl_.awarditem_ = awarditem;
  if (awarditem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDRandPoolData.AwardItem)
}
inline ::msg::TDItem* TDRandPoolData::release_awarditem() {
  
  ::msg::TDItem* temp = _impl_.awarditem_;
  _impl_.awarditem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItem* TDRandPoolData::unsafe_arena_release_awarditem() {
  // @@protoc_insertion_point(field_release:msg.TDRandPoolData.AwardItem)
  
  ::msg::TDItem* temp = _impl_.awarditem_;
  _impl_.awarditem_ = nullptr;
  return temp;
}
inline ::msg::TDItem* TDRandPoolData::_internal_mutable_awarditem() {
  
  if (_impl_.awarditem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItem>(GetArenaForAllocation());
    _impl_.awarditem_ = p;
  }
  return _impl_.awarditem_;
}
inline ::msg::TDItem* TDRandPoolData::mutable_awarditem() {
  ::msg::TDItem* _msg = _internal_mutable_awarditem();
  // @@protoc_insertion_point(field_mutable:msg.TDRandPoolData.AwardItem)
  return _msg;
}
inline void TDRandPoolData::set_allocated_awarditem(::msg::TDItem* awarditem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.awarditem_);
  }
  if (awarditem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarditem));
    if (message_arena != submessage_arena) {
      awarditem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarditem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.awarditem_ = awarditem;
  // @@protoc_insertion_point(field_set_allocated:msg.TDRandPoolData.AwardItem)
}

// int32 Weight = 4;
inline void TDRandPoolData::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t TDRandPoolData::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t TDRandPoolData::weight() const {
  // @@protoc_insertion_point(field_get:msg.TDRandPoolData.Weight)
  return _internal_weight();
}
inline void TDRandPoolData::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void TDRandPoolData::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:msg.TDRandPoolData.Weight)
}

// -------------------------------------------------------------------

// PlayerInitchessData

// string Id = 1;
inline void PlayerInitchessData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PlayerInitchessData::id() const {
  // @@protoc_insertion_point(field_get:msg.PlayerInitchessData.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInitchessData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerInitchessData.Id)
}
inline std::string* PlayerInitchessData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.PlayerInitchessData.Id)
  return _s;
}
inline const std::string& PlayerInitchessData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PlayerInitchessData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInitchessData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInitchessData::release_id() {
  // @@protoc_insertion_point(field_release:msg.PlayerInitchessData.Id)
  return _impl_.id_.Release();
}
inline void PlayerInitchessData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerInitchessData.Id)
}

// int32 Count = 2;
inline void PlayerInitchessData::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t PlayerInitchessData::_internal_count() const {
  return _impl_.count_;
}
inline int32_t PlayerInitchessData::count() const {
  // @@protoc_insertion_point(field_get:msg.PlayerInitchessData.Count)
  return _internal_count();
}
inline void PlayerInitchessData::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void PlayerInitchessData::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.PlayerInitchessData.Count)
}

// -------------------------------------------------------------------

// ChessManMaterialData

// int32 Quality = 1;
inline void ChessManMaterialData::clear_quality() {
  _impl_.quality_ = 0;
}
inline int32_t ChessManMaterialData::_internal_quality() const {
  return _impl_.quality_;
}
inline int32_t ChessManMaterialData::quality() const {
  // @@protoc_insertion_point(field_get:msg.ChessManMaterialData.Quality)
  return _internal_quality();
}
inline void ChessManMaterialData::_internal_set_quality(int32_t value) {
  
  _impl_.quality_ = value;
}
inline void ChessManMaterialData::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:msg.ChessManMaterialData.Quality)
}

// repeated .msg.TDItem Awards = 2;
inline int ChessManMaterialData::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int ChessManMaterialData::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* ChessManMaterialData::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ChessManMaterialData.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
ChessManMaterialData::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChessManMaterialData.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& ChessManMaterialData::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& ChessManMaterialData::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChessManMaterialData.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* ChessManMaterialData::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* ChessManMaterialData::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.ChessManMaterialData.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
ChessManMaterialData::awards() const {
  // @@protoc_insertion_point(field_list:msg.ChessManMaterialData.Awards)
  return _impl_.awards_;
}

// -------------------------------------------------------------------

// TDCardGroupConfigInfo

// repeated int32 ChessBoardCount = 1;
inline int TDCardGroupConfigInfo::_internal_chessboardcount_size() const {
  return _impl_.chessboardcount_.size();
}
inline int TDCardGroupConfigInfo::chessboardcount_size() const {
  return _internal_chessboardcount_size();
}
inline void TDCardGroupConfigInfo::clear_chessboardcount() {
  _impl_.chessboardcount_.Clear();
}
inline int32_t TDCardGroupConfigInfo::_internal_chessboardcount(int index) const {
  return _impl_.chessboardcount_.Get(index);
}
inline int32_t TDCardGroupConfigInfo::chessboardcount(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessBoardCount)
  return _internal_chessboardcount(index);
}
inline void TDCardGroupConfigInfo::set_chessboardcount(int index, int32_t value) {
  _impl_.chessboardcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessBoardCount)
}
inline void TDCardGroupConfigInfo::_internal_add_chessboardcount(int32_t value) {
  _impl_.chessboardcount_.Add(value);
}
inline void TDCardGroupConfigInfo::add_chessboardcount(int32_t value) {
  _internal_add_chessboardcount(value);
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.ChessBoardCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::_internal_chessboardcount() const {
  return _impl_.chessboardcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::chessboardcount() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.ChessBoardCount)
  return _internal_chessboardcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::_internal_mutable_chessboardcount() {
  return &_impl_.chessboardcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::mutable_chessboardcount() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.ChessBoardCount)
  return _internal_mutable_chessboardcount();
}

// repeated int32 ChessPlayerCount = 2;
inline int TDCardGroupConfigInfo::_internal_chessplayercount_size() const {
  return _impl_.chessplayercount_.size();
}
inline int TDCardGroupConfigInfo::chessplayercount_size() const {
  return _internal_chessplayercount_size();
}
inline void TDCardGroupConfigInfo::clear_chessplayercount() {
  _impl_.chessplayercount_.Clear();
}
inline int32_t TDCardGroupConfigInfo::_internal_chessplayercount(int index) const {
  return _impl_.chessplayercount_.Get(index);
}
inline int32_t TDCardGroupConfigInfo::chessplayercount(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessPlayerCount)
  return _internal_chessplayercount(index);
}
inline void TDCardGroupConfigInfo::set_chessplayercount(int index, int32_t value) {
  _impl_.chessplayercount_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessPlayerCount)
}
inline void TDCardGroupConfigInfo::_internal_add_chessplayercount(int32_t value) {
  _impl_.chessplayercount_.Add(value);
}
inline void TDCardGroupConfigInfo::add_chessplayercount(int32_t value) {
  _internal_add_chessplayercount(value);
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.ChessPlayerCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::_internal_chessplayercount() const {
  return _impl_.chessplayercount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::chessplayercount() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.ChessPlayerCount)
  return _internal_chessplayercount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::_internal_mutable_chessplayercount() {
  return &_impl_.chessplayercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::mutable_chessplayercount() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.ChessPlayerCount)
  return _internal_mutable_chessplayercount();
}

// repeated int32 ChessManCount = 3;
inline int TDCardGroupConfigInfo::_internal_chessmancount_size() const {
  return _impl_.chessmancount_.size();
}
inline int TDCardGroupConfigInfo::chessmancount_size() const {
  return _internal_chessmancount_size();
}
inline void TDCardGroupConfigInfo::clear_chessmancount() {
  _impl_.chessmancount_.Clear();
}
inline int32_t TDCardGroupConfigInfo::_internal_chessmancount(int index) const {
  return _impl_.chessmancount_.Get(index);
}
inline int32_t TDCardGroupConfigInfo::chessmancount(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessManCount)
  return _internal_chessmancount(index);
}
inline void TDCardGroupConfigInfo::set_chessmancount(int index, int32_t value) {
  _impl_.chessmancount_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessManCount)
}
inline void TDCardGroupConfigInfo::_internal_add_chessmancount(int32_t value) {
  _impl_.chessmancount_.Add(value);
}
inline void TDCardGroupConfigInfo::add_chessmancount(int32_t value) {
  _internal_add_chessmancount(value);
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.ChessManCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::_internal_chessmancount() const {
  return _impl_.chessmancount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::chessmancount() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.ChessManCount)
  return _internal_chessmancount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::_internal_mutable_chessmancount() {
  return &_impl_.chessmancount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::mutable_chessmancount() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.ChessManCount)
  return _internal_mutable_chessmancount();
}

// repeated .msg.TDItem PlayerInitItems = 4;
inline int TDCardGroupConfigInfo::_internal_playerinititems_size() const {
  return _impl_.playerinititems_.size();
}
inline int TDCardGroupConfigInfo::playerinititems_size() const {
  return _internal_playerinititems_size();
}
inline ::msg::TDItem* TDCardGroupConfigInfo::mutable_playerinititems(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.PlayerInitItems)
  return _impl_.playerinititems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDCardGroupConfigInfo::mutable_playerinititems() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.PlayerInitItems)
  return &_impl_.playerinititems_;
}
inline const ::msg::TDItem& TDCardGroupConfigInfo::_internal_playerinititems(int index) const {
  return _impl_.playerinititems_.Get(index);
}
inline const ::msg::TDItem& TDCardGroupConfigInfo::playerinititems(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.PlayerInitItems)
  return _internal_playerinititems(index);
}
inline ::msg::TDItem* TDCardGroupConfigInfo::_internal_add_playerinititems() {
  return _impl_.playerinititems_.Add();
}
inline ::msg::TDItem* TDCardGroupConfigInfo::add_playerinititems() {
  ::msg::TDItem* _add = _internal_add_playerinititems();
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.PlayerInitItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDCardGroupConfigInfo::playerinititems() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.PlayerInitItems)
  return _impl_.playerinititems_;
}

// .msg.PlayerInitchessData PlayerInitchess = 5;
inline bool TDCardGroupConfigInfo::_internal_has_playerinitchess() const {
  return this != internal_default_instance() && _impl_.playerinitchess_ != nullptr;
}
inline bool TDCardGroupConfigInfo::has_playerinitchess() const {
  return _internal_has_playerinitchess();
}
inline void TDCardGroupConfigInfo::clear_playerinitchess() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinitchess_ != nullptr) {
    delete _impl_.playerinitchess_;
  }
  _impl_.playerinitchess_ = nullptr;
}
inline const ::msg::PlayerInitchessData& TDCardGroupConfigInfo::_internal_playerinitchess() const {
  const ::msg::PlayerInitchessData* p = _impl_.playerinitchess_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PlayerInitchessData&>(
      ::msg::_PlayerInitchessData_default_instance_);
}
inline const ::msg::PlayerInitchessData& TDCardGroupConfigInfo::playerinitchess() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.PlayerInitchess)
  return _internal_playerinitchess();
}
inline void TDCardGroupConfigInfo::unsafe_arena_set_allocated_playerinitchess(
    ::msg::PlayerInitchessData* playerinitchess) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinitchess_);
  }
  _impl_.playerinitchess_ = playerinitchess;
  if (playerinitchess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDCardGroupConfigInfo.PlayerInitchess)
}
inline ::msg::PlayerInitchessData* TDCardGroupConfigInfo::release_playerinitchess() {
  
  ::msg::PlayerInitchessData* temp = _impl_.playerinitchess_;
  _impl_.playerinitchess_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PlayerInitchessData* TDCardGroupConfigInfo::unsafe_arena_release_playerinitchess() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroupConfigInfo.PlayerInitchess)
  
  ::msg::PlayerInitchessData* temp = _impl_.playerinitchess_;
  _impl_.playerinitchess_ = nullptr;
  return temp;
}
inline ::msg::PlayerInitchessData* TDCardGroupConfigInfo::_internal_mutable_playerinitchess() {
  
  if (_impl_.playerinitchess_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PlayerInitchessData>(GetArenaForAllocation());
    _impl_.playerinitchess_ = p;
  }
  return _impl_.playerinitchess_;
}
inline ::msg::PlayerInitchessData* TDCardGroupConfigInfo::mutable_playerinitchess() {
  ::msg::PlayerInitchessData* _msg = _internal_mutable_playerinitchess();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.PlayerInitchess)
  return _msg;
}
inline void TDCardGroupConfigInfo::set_allocated_playerinitchess(::msg::PlayerInitchessData* playerinitchess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinitchess_;
  }
  if (playerinitchess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinitchess);
    if (message_arena != submessage_arena) {
      playerinitchess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinitchess, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinitchess_ = playerinitchess;
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroupConfigInfo.PlayerInitchess)
}

// int32 StoreLimit = 6;
inline void TDCardGroupConfigInfo::clear_storelimit() {
  _impl_.storelimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_storelimit() const {
  return _impl_.storelimit_;
}
inline int32_t TDCardGroupConfigInfo::storelimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.StoreLimit)
  return _internal_storelimit();
}
inline void TDCardGroupConfigInfo::_internal_set_storelimit(int32_t value) {
  
  _impl_.storelimit_ = value;
}
inline void TDCardGroupConfigInfo::set_storelimit(int32_t value) {
  _internal_set_storelimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.StoreLimit)
}

// repeated .msg.TDChessboardPeople PopLimit = 7;
inline int TDCardGroupConfigInfo::_internal_poplimit_size() const {
  return _impl_.poplimit_.size();
}
inline int TDCardGroupConfigInfo::poplimit_size() const {
  return _internal_poplimit_size();
}
inline void TDCardGroupConfigInfo::clear_poplimit() {
  _impl_.poplimit_.Clear();
}
inline ::msg::TDChessboardPeople* TDCardGroupConfigInfo::mutable_poplimit(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.PopLimit)
  return _impl_.poplimit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDChessboardPeople >*
TDCardGroupConfigInfo::mutable_poplimit() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.PopLimit)
  return &_impl_.poplimit_;
}
inline const ::msg::TDChessboardPeople& TDCardGroupConfigInfo::_internal_poplimit(int index) const {
  return _impl_.poplimit_.Get(index);
}
inline const ::msg::TDChessboardPeople& TDCardGroupConfigInfo::poplimit(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.PopLimit)
  return _internal_poplimit(index);
}
inline ::msg::TDChessboardPeople* TDCardGroupConfigInfo::_internal_add_poplimit() {
  return _impl_.poplimit_.Add();
}
inline ::msg::TDChessboardPeople* TDCardGroupConfigInfo::add_poplimit() {
  ::msg::TDChessboardPeople* _add = _internal_add_poplimit();
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.PopLimit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDChessboardPeople >&
TDCardGroupConfigInfo::poplimit() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.PopLimit)
  return _impl_.poplimit_;
}

// int32 ChessBoardLvLimit = 8;
inline void TDCardGroupConfigInfo::clear_chessboardlvlimit() {
  _impl_.chessboardlvlimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_chessboardlvlimit() const {
  return _impl_.chessboardlvlimit_;
}
inline int32_t TDCardGroupConfigInfo::chessboardlvlimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessBoardLvLimit)
  return _internal_chessboardlvlimit();
}
inline void TDCardGroupConfigInfo::_internal_set_chessboardlvlimit(int32_t value) {
  
  _impl_.chessboardlvlimit_ = value;
}
inline void TDCardGroupConfigInfo::set_chessboardlvlimit(int32_t value) {
  _internal_set_chessboardlvlimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessBoardLvLimit)
}

// int32 ChessPlayerLvLimit = 9;
inline void TDCardGroupConfigInfo::clear_chessplayerlvlimit() {
  _impl_.chessplayerlvlimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_chessplayerlvlimit() const {
  return _impl_.chessplayerlvlimit_;
}
inline int32_t TDCardGroupConfigInfo::chessplayerlvlimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessPlayerLvLimit)
  return _internal_chessplayerlvlimit();
}
inline void TDCardGroupConfigInfo::_internal_set_chessplayerlvlimit(int32_t value) {
  
  _impl_.chessplayerlvlimit_ = value;
}
inline void TDCardGroupConfigInfo::set_chessplayerlvlimit(int32_t value) {
  _internal_set_chessplayerlvlimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessPlayerLvLimit)
}

// int32 ChessManLvLimit = 10;
inline void TDCardGroupConfigInfo::clear_chessmanlvlimit() {
  _impl_.chessmanlvlimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_chessmanlvlimit() const {
  return _impl_.chessmanlvlimit_;
}
inline int32_t TDCardGroupConfigInfo::chessmanlvlimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessManLvLimit)
  return _internal_chessmanlvlimit();
}
inline void TDCardGroupConfigInfo::_internal_set_chessmanlvlimit(int32_t value) {
  
  _impl_.chessmanlvlimit_ = value;
}
inline void TDCardGroupConfigInfo::set_chessmanlvlimit(int32_t value) {
  _internal_set_chessmanlvlimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessManLvLimit)
}

// int32 ChessEquipLimit = 11;
inline void TDCardGroupConfigInfo::clear_chessequiplimit() {
  _impl_.chessequiplimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_chessequiplimit() const {
  return _impl_.chessequiplimit_;
}
inline int32_t TDCardGroupConfigInfo::chessequiplimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessEquipLimit)
  return _internal_chessequiplimit();
}
inline void TDCardGroupConfigInfo::_internal_set_chessequiplimit(int32_t value) {
  
  _impl_.chessequiplimit_ = value;
}
inline void TDCardGroupConfigInfo::set_chessequiplimit(int32_t value) {
  _internal_set_chessequiplimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessEquipLimit)
}

// int32 ChessEquipLvLimit = 12;
inline void TDCardGroupConfigInfo::clear_chessequiplvlimit() {
  _impl_.chessequiplvlimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_chessequiplvlimit() const {
  return _impl_.chessequiplvlimit_;
}
inline int32_t TDCardGroupConfigInfo::chessequiplvlimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessEquipLvLimit)
  return _internal_chessequiplvlimit();
}
inline void TDCardGroupConfigInfo::_internal_set_chessequiplvlimit(int32_t value) {
  
  _impl_.chessequiplvlimit_ = value;
}
inline void TDCardGroupConfigInfo::set_chessequiplvlimit(int32_t value) {
  _internal_set_chessequiplvlimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessEquipLvLimit)
}

// int32 ChessBoardTalentLvLimit = 13;
inline void TDCardGroupConfigInfo::clear_chessboardtalentlvlimit() {
  _impl_.chessboardtalentlvlimit_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_chessboardtalentlvlimit() const {
  return _impl_.chessboardtalentlvlimit_;
}
inline int32_t TDCardGroupConfigInfo::chessboardtalentlvlimit() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessBoardTalentLvLimit)
  return _internal_chessboardtalentlvlimit();
}
inline void TDCardGroupConfigInfo::_internal_set_chessboardtalentlvlimit(int32_t value) {
  
  _impl_.chessboardtalentlvlimit_ = value;
}
inline void TDCardGroupConfigInfo::set_chessboardtalentlvlimit(int32_t value) {
  _internal_set_chessboardtalentlvlimit(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ChessBoardTalentLvLimit)
}

// .msg.TDBuy BuyCard = 14;
inline bool TDCardGroupConfigInfo::_internal_has_buycard() const {
  return this != internal_default_instance() && _impl_.buycard_ != nullptr;
}
inline bool TDCardGroupConfigInfo::has_buycard() const {
  return _internal_has_buycard();
}
inline void TDCardGroupConfigInfo::clear_buycard() {
  if (GetArenaForAllocation() == nullptr && _impl_.buycard_ != nullptr) {
    delete _impl_.buycard_;
  }
  _impl_.buycard_ = nullptr;
}
inline const ::msg::TDBuy& TDCardGroupConfigInfo::_internal_buycard() const {
  const ::msg::TDBuy* p = _impl_.buycard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDBuy&>(
      ::msg::_TDBuy_default_instance_);
}
inline const ::msg::TDBuy& TDCardGroupConfigInfo::buycard() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.BuyCard)
  return _internal_buycard();
}
inline void TDCardGroupConfigInfo::unsafe_arena_set_allocated_buycard(
    ::msg::TDBuy* buycard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buycard_);
  }
  _impl_.buycard_ = buycard;
  if (buycard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDCardGroupConfigInfo.BuyCard)
}
inline ::msg::TDBuy* TDCardGroupConfigInfo::release_buycard() {
  
  ::msg::TDBuy* temp = _impl_.buycard_;
  _impl_.buycard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDBuy* TDCardGroupConfigInfo::unsafe_arena_release_buycard() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroupConfigInfo.BuyCard)
  
  ::msg::TDBuy* temp = _impl_.buycard_;
  _impl_.buycard_ = nullptr;
  return temp;
}
inline ::msg::TDBuy* TDCardGroupConfigInfo::_internal_mutable_buycard() {
  
  if (_impl_.buycard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDBuy>(GetArenaForAllocation());
    _impl_.buycard_ = p;
  }
  return _impl_.buycard_;
}
inline ::msg::TDBuy* TDCardGroupConfigInfo::mutable_buycard() {
  ::msg::TDBuy* _msg = _internal_mutable_buycard();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.BuyCard)
  return _msg;
}
inline void TDCardGroupConfigInfo::set_allocated_buycard(::msg::TDBuy* buycard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buycard_;
  }
  if (buycard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buycard);
    if (message_arena != submessage_arena) {
      buycard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buycard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buycard_ = buycard;
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroupConfigInfo.BuyCard)
}

// string MapKey = 15;
inline void TDCardGroupConfigInfo::clear_mapkey() {
  _impl_.mapkey_.ClearToEmpty();
}
inline const std::string& TDCardGroupConfigInfo::mapkey() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.MapKey)
  return _internal_mapkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDCardGroupConfigInfo::set_mapkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.MapKey)
}
inline std::string* TDCardGroupConfigInfo::mutable_mapkey() {
  std::string* _s = _internal_mutable_mapkey();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.MapKey)
  return _s;
}
inline const std::string& TDCardGroupConfigInfo::_internal_mapkey() const {
  return _impl_.mapkey_.Get();
}
inline void TDCardGroupConfigInfo::_internal_set_mapkey(const std::string& value) {
  
  _impl_.mapkey_.Set(value, GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::_internal_mutable_mapkey() {
  
  return _impl_.mapkey_.Mutable(GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::release_mapkey() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroupConfigInfo.MapKey)
  return _impl_.mapkey_.Release();
}
inline void TDCardGroupConfigInfo::set_allocated_mapkey(std::string* mapkey) {
  if (mapkey != nullptr) {
    
  } else {
    
  }
  _impl_.mapkey_.SetAllocated(mapkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapkey_.IsDefault()) {
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroupConfigInfo.MapKey)
}

// int32 PopSpecialBuffId = 16;
inline void TDCardGroupConfigInfo::clear_popspecialbuffid() {
  _impl_.popspecialbuffid_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_popspecialbuffid() const {
  return _impl_.popspecialbuffid_;
}
inline int32_t TDCardGroupConfigInfo::popspecialbuffid() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.PopSpecialBuffId)
  return _internal_popspecialbuffid();
}
inline void TDCardGroupConfigInfo::_internal_set_popspecialbuffid(int32_t value) {
  
  _impl_.popspecialbuffid_ = value;
}
inline void TDCardGroupConfigInfo::set_popspecialbuffid(int32_t value) {
  _internal_set_popspecialbuffid(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.PopSpecialBuffId)
}

// int32 MaxStage = 17;
inline void TDCardGroupConfigInfo::clear_maxstage() {
  _impl_.maxstage_ = 0;
}
inline int32_t TDCardGroupConfigInfo::_internal_maxstage() const {
  return _impl_.maxstage_;
}
inline int32_t TDCardGroupConfigInfo::maxstage() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.MaxStage)
  return _internal_maxstage();
}
inline void TDCardGroupConfigInfo::_internal_set_maxstage(int32_t value) {
  
  _impl_.maxstage_ = value;
}
inline void TDCardGroupConfigInfo::set_maxstage(int32_t value) {
  _internal_set_maxstage(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.MaxStage)
}

// repeated int32 CostPoolCount = 18;
inline int TDCardGroupConfigInfo::_internal_costpoolcount_size() const {
  return _impl_.costpoolcount_.size();
}
inline int TDCardGroupConfigInfo::costpoolcount_size() const {
  return _internal_costpoolcount_size();
}
inline void TDCardGroupConfigInfo::clear_costpoolcount() {
  _impl_.costpoolcount_.Clear();
}
inline int32_t TDCardGroupConfigInfo::_internal_costpoolcount(int index) const {
  return _impl_.costpoolcount_.Get(index);
}
inline int32_t TDCardGroupConfigInfo::costpoolcount(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.CostPoolCount)
  return _internal_costpoolcount(index);
}
inline void TDCardGroupConfigInfo::set_costpoolcount(int index, int32_t value) {
  _impl_.costpoolcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.CostPoolCount)
}
inline void TDCardGroupConfigInfo::_internal_add_costpoolcount(int32_t value) {
  _impl_.costpoolcount_.Add(value);
}
inline void TDCardGroupConfigInfo::add_costpoolcount(int32_t value) {
  _internal_add_costpoolcount(value);
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.CostPoolCount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::_internal_costpoolcount() const {
  return _impl_.costpoolcount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroupConfigInfo::costpoolcount() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.CostPoolCount)
  return _internal_costpoolcount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::_internal_mutable_costpoolcount() {
  return &_impl_.costpoolcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroupConfigInfo::mutable_costpoolcount() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.CostPoolCount)
  return _internal_mutable_costpoolcount();
}

// int64 LimitTime = 19;
inline void TDCardGroupConfigInfo::clear_limittime() {
  _impl_.limittime_ = int64_t{0};
}
inline int64_t TDCardGroupConfigInfo::_internal_limittime() const {
  return _impl_.limittime_;
}
inline int64_t TDCardGroupConfigInfo::limittime() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.LimitTime)
  return _internal_limittime();
}
inline void TDCardGroupConfigInfo::_internal_set_limittime(int64_t value) {
  
  _impl_.limittime_ = value;
}
inline void TDCardGroupConfigInfo::set_limittime(int64_t value) {
  _internal_set_limittime(value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.LimitTime)
}

// repeated .msg.ChessManMaterialData ChessManMaterials = 20;
inline int TDCardGroupConfigInfo::_internal_chessmanmaterials_size() const {
  return _impl_.chessmanmaterials_.size();
}
inline int TDCardGroupConfigInfo::chessmanmaterials_size() const {
  return _internal_chessmanmaterials_size();
}
inline void TDCardGroupConfigInfo::clear_chessmanmaterials() {
  _impl_.chessmanmaterials_.Clear();
}
inline ::msg::ChessManMaterialData* TDCardGroupConfigInfo::mutable_chessmanmaterials(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.ChessManMaterials)
  return _impl_.chessmanmaterials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessManMaterialData >*
TDCardGroupConfigInfo::mutable_chessmanmaterials() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroupConfigInfo.ChessManMaterials)
  return &_impl_.chessmanmaterials_;
}
inline const ::msg::ChessManMaterialData& TDCardGroupConfigInfo::_internal_chessmanmaterials(int index) const {
  return _impl_.chessmanmaterials_.Get(index);
}
inline const ::msg::ChessManMaterialData& TDCardGroupConfigInfo::chessmanmaterials(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ChessManMaterials)
  return _internal_chessmanmaterials(index);
}
inline ::msg::ChessManMaterialData* TDCardGroupConfigInfo::_internal_add_chessmanmaterials() {
  return _impl_.chessmanmaterials_.Add();
}
inline ::msg::ChessManMaterialData* TDCardGroupConfigInfo::add_chessmanmaterials() {
  ::msg::ChessManMaterialData* _add = _internal_add_chessmanmaterials();
  // @@protoc_insertion_point(field_add:msg.TDCardGroupConfigInfo.ChessManMaterials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessManMaterialData >&
TDCardGroupConfigInfo::chessmanmaterials() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroupConfigInfo.ChessManMaterials)
  return _impl_.chessmanmaterials_;
}

// string ShowRate = 21;
inline void TDCardGroupConfigInfo::clear_showrate() {
  _impl_.showrate_.ClearToEmpty();
}
inline const std::string& TDCardGroupConfigInfo::showrate() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.ShowRate)
  return _internal_showrate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDCardGroupConfigInfo::set_showrate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.showrate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.ShowRate)
}
inline std::string* TDCardGroupConfigInfo::mutable_showrate() {
  std::string* _s = _internal_mutable_showrate();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.ShowRate)
  return _s;
}
inline const std::string& TDCardGroupConfigInfo::_internal_showrate() const {
  return _impl_.showrate_.Get();
}
inline void TDCardGroupConfigInfo::_internal_set_showrate(const std::string& value) {
  
  _impl_.showrate_.Set(value, GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::_internal_mutable_showrate() {
  
  return _impl_.showrate_.Mutable(GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::release_showrate() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroupConfigInfo.ShowRate)
  return _impl_.showrate_.Release();
}
inline void TDCardGroupConfigInfo::set_allocated_showrate(std::string* showrate) {
  if (showrate != nullptr) {
    
  } else {
    
  }
  _impl_.showrate_.SetAllocated(showrate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.showrate_.IsDefault()) {
    _impl_.showrate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroupConfigInfo.ShowRate)
}

// string PvpChessPoolKey = 22;
inline void TDCardGroupConfigInfo::clear_pvpchesspoolkey() {
  _impl_.pvpchesspoolkey_.ClearToEmpty();
}
inline const std::string& TDCardGroupConfigInfo::pvpchesspoolkey() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.PvpChessPoolKey)
  return _internal_pvpchesspoolkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDCardGroupConfigInfo::set_pvpchesspoolkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pvpchesspoolkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.PvpChessPoolKey)
}
inline std::string* TDCardGroupConfigInfo::mutable_pvpchesspoolkey() {
  std::string* _s = _internal_mutable_pvpchesspoolkey();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.PvpChessPoolKey)
  return _s;
}
inline const std::string& TDCardGroupConfigInfo::_internal_pvpchesspoolkey() const {
  return _impl_.pvpchesspoolkey_.Get();
}
inline void TDCardGroupConfigInfo::_internal_set_pvpchesspoolkey(const std::string& value) {
  
  _impl_.pvpchesspoolkey_.Set(value, GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::_internal_mutable_pvpchesspoolkey() {
  
  return _impl_.pvpchesspoolkey_.Mutable(GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::release_pvpchesspoolkey() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroupConfigInfo.PvpChessPoolKey)
  return _impl_.pvpchesspoolkey_.Release();
}
inline void TDCardGroupConfigInfo::set_allocated_pvpchesspoolkey(std::string* pvpchesspoolkey) {
  if (pvpchesspoolkey != nullptr) {
    
  } else {
    
  }
  _impl_.pvpchesspoolkey_.SetAllocated(pvpchesspoolkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pvpchesspoolkey_.IsDefault()) {
    _impl_.pvpchesspoolkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroupConfigInfo.PvpChessPoolKey)
}

// string LimitTimeStage = 23;
inline void TDCardGroupConfigInfo::clear_limittimestage() {
  _impl_.limittimestage_.ClearToEmpty();
}
inline const std::string& TDCardGroupConfigInfo::limittimestage() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroupConfigInfo.LimitTimeStage)
  return _internal_limittimestage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDCardGroupConfigInfo::set_limittimestage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.limittimestage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDCardGroupConfigInfo.LimitTimeStage)
}
inline std::string* TDCardGroupConfigInfo::mutable_limittimestage() {
  std::string* _s = _internal_mutable_limittimestage();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroupConfigInfo.LimitTimeStage)
  return _s;
}
inline const std::string& TDCardGroupConfigInfo::_internal_limittimestage() const {
  return _impl_.limittimestage_.Get();
}
inline void TDCardGroupConfigInfo::_internal_set_limittimestage(const std::string& value) {
  
  _impl_.limittimestage_.Set(value, GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::_internal_mutable_limittimestage() {
  
  return _impl_.limittimestage_.Mutable(GetArenaForAllocation());
}
inline std::string* TDCardGroupConfigInfo::release_limittimestage() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroupConfigInfo.LimitTimeStage)
  return _impl_.limittimestage_.Release();
}
inline void TDCardGroupConfigInfo::set_allocated_limittimestage(std::string* limittimestage) {
  if (limittimestage != nullptr) {
    
  } else {
    
  }
  _impl_.limittimestage_.SetAllocated(limittimestage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.limittimestage_.IsDefault()) {
    _impl_.limittimestage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroupConfigInfo.LimitTimeStage)
}

// -------------------------------------------------------------------

// ItemTypeLimit

// int32 LevelLimit = 1;
inline void ItemTypeLimit::clear_levellimit() {
  _impl_.levellimit_ = 0;
}
inline int32_t ItemTypeLimit::_internal_levellimit() const {
  return _impl_.levellimit_;
}
inline int32_t ItemTypeLimit::levellimit() const {
  // @@protoc_insertion_point(field_get:msg.ItemTypeLimit.LevelLimit)
  return _internal_levellimit();
}
inline void ItemTypeLimit::_internal_set_levellimit(int32_t value) {
  
  _impl_.levellimit_ = value;
}
inline void ItemTypeLimit::set_levellimit(int32_t value) {
  _internal_set_levellimit(value);
  // @@protoc_insertion_point(field_set:msg.ItemTypeLimit.LevelLimit)
}

// int32 CardGroupMinNum = 2;
inline void ItemTypeLimit::clear_cardgroupminnum() {
  _impl_.cardgroupminnum_ = 0;
}
inline int32_t ItemTypeLimit::_internal_cardgroupminnum() const {
  return _impl_.cardgroupminnum_;
}
inline int32_t ItemTypeLimit::cardgroupminnum() const {
  // @@protoc_insertion_point(field_get:msg.ItemTypeLimit.CardGroupMinNum)
  return _internal_cardgroupminnum();
}
inline void ItemTypeLimit::_internal_set_cardgroupminnum(int32_t value) {
  
  _impl_.cardgroupminnum_ = value;
}
inline void ItemTypeLimit::set_cardgroupminnum(int32_t value) {
  _internal_set_cardgroupminnum(value);
  // @@protoc_insertion_point(field_set:msg.ItemTypeLimit.CardGroupMinNum)
}

// int32 CardGroupMaxNum = 3;
inline void ItemTypeLimit::clear_cardgroupmaxnum() {
  _impl_.cardgroupmaxnum_ = 0;
}
inline int32_t ItemTypeLimit::_internal_cardgroupmaxnum() const {
  return _impl_.cardgroupmaxnum_;
}
inline int32_t ItemTypeLimit::cardgroupmaxnum() const {
  // @@protoc_insertion_point(field_get:msg.ItemTypeLimit.CardGroupMaxNum)
  return _internal_cardgroupmaxnum();
}
inline void ItemTypeLimit::_internal_set_cardgroupmaxnum(int32_t value) {
  
  _impl_.cardgroupmaxnum_ = value;
}
inline void ItemTypeLimit::set_cardgroupmaxnum(int32_t value) {
  _internal_set_cardgroupmaxnum(value);
  // @@protoc_insertion_point(field_set:msg.ItemTypeLimit.CardGroupMaxNum)
}

// -------------------------------------------------------------------

// TDChessboardPeople

// int32 Level = 1;
inline void TDChessboardPeople::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDChessboardPeople::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDChessboardPeople::level() const {
  // @@protoc_insertion_point(field_get:msg.TDChessboardPeople.Level)
  return _internal_level();
}
inline void TDChessboardPeople::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDChessboardPeople::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDChessboardPeople.Level)
}

// int32 Num = 2;
inline void TDChessboardPeople::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t TDChessboardPeople::_internal_num() const {
  return _impl_.num_;
}
inline int32_t TDChessboardPeople::num() const {
  // @@protoc_insertion_point(field_get:msg.TDChessboardPeople.Num)
  return _internal_num();
}
inline void TDChessboardPeople::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void TDChessboardPeople::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:msg.TDChessboardPeople.Num)
}

// -------------------------------------------------------------------

// TDLevelUpInfo

// repeated .msg.TDLevelUpData Datas = 1;
inline int TDLevelUpInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDLevelUpInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDLevelUpInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDLevelUpData* TDLevelUpInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDLevelUpInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDLevelUpData >*
TDLevelUpInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDLevelUpInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDLevelUpData& TDLevelUpInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDLevelUpData& TDLevelUpInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDLevelUpData* TDLevelUpInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDLevelUpData* TDLevelUpInfo::add_datas() {
  ::msg::TDLevelUpData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDLevelUpInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDLevelUpData >&
TDLevelUpInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDLevelUpInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// TDLevelUpData

// int32 Id = 1;
inline void TDLevelUpData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDLevelUpData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDLevelUpData::id() const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpData.Id)
  return _internal_id();
}
inline void TDLevelUpData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDLevelUpData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDLevelUpData.Id)
}

// int32 Level = 2;
inline void TDLevelUpData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDLevelUpData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDLevelUpData::level() const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpData.Level)
  return _internal_level();
}
inline void TDLevelUpData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDLevelUpData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDLevelUpData.Level)
}

// .msg.TDITEMTYPE Type = 3;
inline void TDLevelUpData::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::TDITEMTYPE TDLevelUpData::_internal_type() const {
  return static_cast< ::msg::TDITEMTYPE >(_impl_.type_);
}
inline ::msg::TDITEMTYPE TDLevelUpData::type() const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpData.Type)
  return _internal_type();
}
inline void TDLevelUpData::_internal_set_type(::msg::TDITEMTYPE value) {
  
  _impl_.type_ = value;
}
inline void TDLevelUpData::set_type(::msg::TDITEMTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.TDLevelUpData.Type)
}

// .msg.TDLEVELUP_TYPE SubType = 4;
inline void TDLevelUpData::clear_subtype() {
  _impl_.subtype_ = 0;
}
inline ::msg::TDLEVELUP_TYPE TDLevelUpData::_internal_subtype() const {
  return static_cast< ::msg::TDLEVELUP_TYPE >(_impl_.subtype_);
}
inline ::msg::TDLEVELUP_TYPE TDLevelUpData::subtype() const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpData.SubType)
  return _internal_subtype();
}
inline void TDLevelUpData::_internal_set_subtype(::msg::TDLEVELUP_TYPE value) {
  
  _impl_.subtype_ = value;
}
inline void TDLevelUpData::set_subtype(::msg::TDLEVELUP_TYPE value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:msg.TDLevelUpData.SubType)
}

// repeated .msg.TDConsume Consumes = 5;
inline int TDLevelUpData::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int TDLevelUpData::consumes_size() const {
  return _internal_consumes_size();
}
inline void TDLevelUpData::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::TDConsume* TDLevelUpData::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDLevelUpData.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
TDLevelUpData::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDLevelUpData.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::TDConsume& TDLevelUpData::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::TDConsume& TDLevelUpData::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpData.Consumes)
  return _internal_consumes(index);
}
inline ::msg::TDConsume* TDLevelUpData::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::TDConsume* TDLevelUpData::add_consumes() {
  ::msg::TDConsume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.TDLevelUpData.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
TDLevelUpData::consumes() const {
  // @@protoc_insertion_point(field_list:msg.TDLevelUpData.Consumes)
  return _impl_.consumes_;
}

// repeated int32 EquipQualityConsumes = 6;
inline int TDLevelUpData::_internal_equipqualityconsumes_size() const {
  return _impl_.equipqualityconsumes_.size();
}
inline int TDLevelUpData::equipqualityconsumes_size() const {
  return _internal_equipqualityconsumes_size();
}
inline void TDLevelUpData::clear_equipqualityconsumes() {
  _impl_.equipqualityconsumes_.Clear();
}
inline int32_t TDLevelUpData::_internal_equipqualityconsumes(int index) const {
  return _impl_.equipqualityconsumes_.Get(index);
}
inline int32_t TDLevelUpData::equipqualityconsumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDLevelUpData.EquipQualityConsumes)
  return _internal_equipqualityconsumes(index);
}
inline void TDLevelUpData::set_equipqualityconsumes(int index, int32_t value) {
  _impl_.equipqualityconsumes_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDLevelUpData.EquipQualityConsumes)
}
inline void TDLevelUpData::_internal_add_equipqualityconsumes(int32_t value) {
  _impl_.equipqualityconsumes_.Add(value);
}
inline void TDLevelUpData::add_equipqualityconsumes(int32_t value) {
  _internal_add_equipqualityconsumes(value);
  // @@protoc_insertion_point(field_add:msg.TDLevelUpData.EquipQualityConsumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDLevelUpData::_internal_equipqualityconsumes() const {
  return _impl_.equipqualityconsumes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDLevelUpData::equipqualityconsumes() const {
  // @@protoc_insertion_point(field_list:msg.TDLevelUpData.EquipQualityConsumes)
  return _internal_equipqualityconsumes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDLevelUpData::_internal_mutable_equipqualityconsumes() {
  return &_impl_.equipqualityconsumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDLevelUpData::mutable_equipqualityconsumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDLevelUpData.EquipQualityConsumes)
  return _internal_mutable_equipqualityconsumes();
}

// -------------------------------------------------------------------

// TDComposeInfo

// repeated .msg.TDComposeData Datas = 1;
inline int TDComposeInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDComposeInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDComposeInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDComposeData* TDComposeInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDComposeInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDComposeData >*
TDComposeInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDComposeInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDComposeData& TDComposeInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDComposeData& TDComposeInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDComposeInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDComposeData* TDComposeInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDComposeData* TDComposeInfo::add_datas() {
  ::msg::TDComposeData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDComposeInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDComposeData >&
TDComposeInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDComposeInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// TDComposeData

// int32 RouteId = 1;
inline void TDComposeData::clear_routeid() {
  _impl_.routeid_ = 0;
}
inline int32_t TDComposeData::_internal_routeid() const {
  return _impl_.routeid_;
}
inline int32_t TDComposeData::routeid() const {
  // @@protoc_insertion_point(field_get:msg.TDComposeData.RouteId)
  return _internal_routeid();
}
inline void TDComposeData::_internal_set_routeid(int32_t value) {
  
  _impl_.routeid_ = value;
}
inline void TDComposeData::set_routeid(int32_t value) {
  _internal_set_routeid(value);
  // @@protoc_insertion_point(field_set:msg.TDComposeData.RouteId)
}

// int32 DrawingId = 2;
inline void TDComposeData::clear_drawingid() {
  _impl_.drawingid_ = 0;
}
inline int32_t TDComposeData::_internal_drawingid() const {
  return _impl_.drawingid_;
}
inline int32_t TDComposeData::drawingid() const {
  // @@protoc_insertion_point(field_get:msg.TDComposeData.DrawingId)
  return _internal_drawingid();
}
inline void TDComposeData::_internal_set_drawingid(int32_t value) {
  
  _impl_.drawingid_ = value;
}
inline void TDComposeData::set_drawingid(int32_t value) {
  _internal_set_drawingid(value);
  // @@protoc_insertion_point(field_set:msg.TDComposeData.DrawingId)
}

// repeated .msg.TDConsume Consumes = 3;
inline int TDComposeData::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int TDComposeData::consumes_size() const {
  return _internal_consumes_size();
}
inline void TDComposeData::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::TDConsume* TDComposeData::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDComposeData.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
TDComposeData::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDComposeData.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::TDConsume& TDComposeData::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::TDConsume& TDComposeData::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDComposeData.Consumes)
  return _internal_consumes(index);
}
inline ::msg::TDConsume* TDComposeData::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::TDConsume* TDComposeData::add_consumes() {
  ::msg::TDConsume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.TDComposeData.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
TDComposeData::consumes() const {
  // @@protoc_insertion_point(field_list:msg.TDComposeData.Consumes)
  return _impl_.consumes_;
}

// repeated .msg.TDItem Award = 4;
inline int TDComposeData::_internal_award_size() const {
  return _impl_.award_.size();
}
inline int TDComposeData::award_size() const {
  return _internal_award_size();
}
inline ::msg::TDItem* TDComposeData::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDComposeData.Award)
  return _impl_.award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDComposeData::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDComposeData.Award)
  return &_impl_.award_;
}
inline const ::msg::TDItem& TDComposeData::_internal_award(int index) const {
  return _impl_.award_.Get(index);
}
inline const ::msg::TDItem& TDComposeData::award(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDComposeData.Award)
  return _internal_award(index);
}
inline ::msg::TDItem* TDComposeData::_internal_add_award() {
  return _impl_.award_.Add();
}
inline ::msg::TDItem* TDComposeData::add_award() {
  ::msg::TDItem* _add = _internal_add_award();
  // @@protoc_insertion_point(field_add:msg.TDComposeData.Award)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDComposeData::award() const {
  // @@protoc_insertion_point(field_list:msg.TDComposeData.Award)
  return _impl_.award_;
}

// -------------------------------------------------------------------

// TDSkillInfo

// repeated .msg.TDSkillData Datas = 1;
inline int TDSkillInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDSkillInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDSkillInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDSkillData* TDSkillInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDSkillInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDSkillData >*
TDSkillInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDSkillInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDSkillData& TDSkillInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDSkillData& TDSkillInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDSkillInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDSkillData* TDSkillInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDSkillData* TDSkillInfo::add_datas() {
  ::msg::TDSkillData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDSkillInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDSkillData >&
TDSkillInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDSkillInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// SkillItem

// int32 Id = 1;
inline void SkillItem::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SkillItem::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SkillItem::id() const {
  // @@protoc_insertion_point(field_get:msg.SkillItem.Id)
  return _internal_id();
}
inline void SkillItem::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SkillItem::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.SkillItem.Id)
}

// .msg.TDSKILLTYPE Type = 2;
inline void SkillItem::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::TDSKILLTYPE SkillItem::_internal_type() const {
  return static_cast< ::msg::TDSKILLTYPE >(_impl_.type_);
}
inline ::msg::TDSKILLTYPE SkillItem::type() const {
  // @@protoc_insertion_point(field_get:msg.SkillItem.Type)
  return _internal_type();
}
inline void SkillItem::_internal_set_type(::msg::TDSKILLTYPE value) {
  
  _impl_.type_ = value;
}
inline void SkillItem::set_type(::msg::TDSKILLTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.SkillItem.Type)
}

// int32 Level = 3;
inline void SkillItem::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SkillItem::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SkillItem::level() const {
  // @@protoc_insertion_point(field_get:msg.SkillItem.Level)
  return _internal_level();
}
inline void SkillItem::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SkillItem::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.SkillItem.Level)
}

// string Name = 4;
inline void SkillItem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SkillItem::name() const {
  // @@protoc_insertion_point(field_get:msg.SkillItem.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.SkillItem.Name)
}
inline std::string* SkillItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.SkillItem.Name)
  return _s;
}
inline const std::string& SkillItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SkillItem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillItem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillItem::release_name() {
  // @@protoc_insertion_point(field_release:msg.SkillItem.Name)
  return _impl_.name_.Release();
}
inline void SkillItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.SkillItem.Name)
}

// string Desc = 5;
inline void SkillItem::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& SkillItem::desc() const {
  // @@protoc_insertion_point(field_get:msg.SkillItem.Desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillItem::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.SkillItem.Desc)
}
inline std::string* SkillItem::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:msg.SkillItem.Desc)
  return _s;
}
inline const std::string& SkillItem::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void SkillItem::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillItem::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillItem::release_desc() {
  // @@protoc_insertion_point(field_release:msg.SkillItem.Desc)
  return _impl_.desc_.Release();
}
inline void SkillItem::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.SkillItem.Desc)
}

// string value = 6;
inline void SkillItem::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SkillItem::value() const {
  // @@protoc_insertion_point(field_get:msg.SkillItem.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillItem::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.SkillItem.value)
}
inline std::string* SkillItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:msg.SkillItem.value)
  return _s;
}
inline const std::string& SkillItem::_internal_value() const {
  return _impl_.value_.Get();
}
inline void SkillItem::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillItem::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillItem::release_value() {
  // @@protoc_insertion_point(field_release:msg.SkillItem.value)
  return _impl_.value_.Release();
}
inline void SkillItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.SkillItem.value)
}

// -------------------------------------------------------------------

// TDSkillData

// int32 Id = 1;
inline void TDSkillData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDSkillData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDSkillData::id() const {
  // @@protoc_insertion_point(field_get:msg.TDSkillData.Id)
  return _internal_id();
}
inline void TDSkillData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDSkillData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDSkillData.Id)
}

// int32 ItemId = 2;
inline void TDSkillData::clear_itemid() {
  _impl_.itemid_ = 0;
}
inline int32_t TDSkillData::_internal_itemid() const {
  return _impl_.itemid_;
}
inline int32_t TDSkillData::itemid() const {
  // @@protoc_insertion_point(field_get:msg.TDSkillData.ItemId)
  return _internal_itemid();
}
inline void TDSkillData::_internal_set_itemid(int32_t value) {
  
  _impl_.itemid_ = value;
}
inline void TDSkillData::set_itemid(int32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:msg.TDSkillData.ItemId)
}

// .msg.TDITEMTYPE Type = 3;
inline void TDSkillData::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::TDITEMTYPE TDSkillData::_internal_type() const {
  return static_cast< ::msg::TDITEMTYPE >(_impl_.type_);
}
inline ::msg::TDITEMTYPE TDSkillData::type() const {
  // @@protoc_insertion_point(field_get:msg.TDSkillData.Type)
  return _internal_type();
}
inline void TDSkillData::_internal_set_type(::msg::TDITEMTYPE value) {
  
  _impl_.type_ = value;
}
inline void TDSkillData::set_type(::msg::TDITEMTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.TDSkillData.Type)
}

// int32 Level = 4;
inline void TDSkillData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDSkillData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDSkillData::level() const {
  // @@protoc_insertion_point(field_get:msg.TDSkillData.Level)
  return _internal_level();
}
inline void TDSkillData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDSkillData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDSkillData.Level)
}

// repeated .msg.SkillItem Skills = 5;
inline int TDSkillData::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int TDSkillData::skills_size() const {
  return _internal_skills_size();
}
inline void TDSkillData::clear_skills() {
  _impl_.skills_.Clear();
}
inline ::msg::SkillItem* TDSkillData::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDSkillData.Skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SkillItem >*
TDSkillData::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDSkillData.Skills)
  return &_impl_.skills_;
}
inline const ::msg::SkillItem& TDSkillData::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::msg::SkillItem& TDSkillData::skills(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDSkillData.Skills)
  return _internal_skills(index);
}
inline ::msg::SkillItem* TDSkillData::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::msg::SkillItem* TDSkillData::add_skills() {
  ::msg::SkillItem* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:msg.TDSkillData.Skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SkillItem >&
TDSkillData::skills() const {
  // @@protoc_insertion_point(field_list:msg.TDSkillData.Skills)
  return _impl_.skills_;
}

// -------------------------------------------------------------------

// TDStageInfo

// repeated .msg.TDStageData Datas = 1;
inline int TDStageInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDStageInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDStageInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDStageData* TDStageInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDStageInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDStageData >*
TDStageInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDStageInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDStageData& TDStageInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDStageData& TDStageInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDStageInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDStageData* TDStageInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDStageData* TDStageInfo::add_datas() {
  ::msg::TDStageData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDStageInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDStageData >&
TDStageInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDStageInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// TDStageData

// int32 Id = 1;
inline void TDStageData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDStageData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDStageData::id() const {
  // @@protoc_insertion_point(field_get:msg.TDStageData.Id)
  return _internal_id();
}
inline void TDStageData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDStageData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDStageData.Id)
}

// string Name = 2;
inline void TDStageData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TDStageData::name() const {
  // @@protoc_insertion_point(field_get:msg.TDStageData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDStageData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDStageData.Name)
}
inline std::string* TDStageData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.TDStageData.Name)
  return _s;
}
inline const std::string& TDStageData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TDStageData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TDStageData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TDStageData::release_name() {
  // @@protoc_insertion_point(field_release:msg.TDStageData.Name)
  return _impl_.name_.Release();
}
inline void TDStageData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDStageData.Name)
}

// int32 Level = 3;
inline void TDStageData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDStageData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDStageData::level() const {
  // @@protoc_insertion_point(field_get:msg.TDStageData.Level)
  return _internal_level();
}
inline void TDStageData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDStageData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDStageData.Level)
}

// repeated .msg.TDItem Awards = 4;
inline int TDStageData::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int TDStageData::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* TDStageData::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDStageData.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDStageData::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDStageData.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& TDStageData::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& TDStageData::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDStageData.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* TDStageData::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* TDStageData::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.TDStageData.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDStageData::awards() const {
  // @@protoc_insertion_point(field_list:msg.TDStageData.Awards)
  return _impl_.awards_;
}

// repeated int32 ItemIds = 5;
inline int TDStageData::_internal_itemids_size() const {
  return _impl_.itemids_.size();
}
inline int TDStageData::itemids_size() const {
  return _internal_itemids_size();
}
inline void TDStageData::clear_itemids() {
  _impl_.itemids_.Clear();
}
inline int32_t TDStageData::_internal_itemids(int index) const {
  return _impl_.itemids_.Get(index);
}
inline int32_t TDStageData::itemids(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDStageData.ItemIds)
  return _internal_itemids(index);
}
inline void TDStageData::set_itemids(int index, int32_t value) {
  _impl_.itemids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDStageData.ItemIds)
}
inline void TDStageData::_internal_add_itemids(int32_t value) {
  _impl_.itemids_.Add(value);
}
inline void TDStageData::add_itemids(int32_t value) {
  _internal_add_itemids(value);
  // @@protoc_insertion_point(field_add:msg.TDStageData.ItemIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDStageData::_internal_itemids() const {
  return _impl_.itemids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDStageData::itemids() const {
  // @@protoc_insertion_point(field_list:msg.TDStageData.ItemIds)
  return _internal_itemids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDStageData::_internal_mutable_itemids() {
  return &_impl_.itemids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDStageData::mutable_itemids() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDStageData.ItemIds)
  return _internal_mutable_itemids();
}

// -------------------------------------------------------------------

// TDItemInfo

// repeated .msg.TDItemData Datas = 1;
inline int TDItemInfo::_internal_datas_size() const {
  return _impl_.datas_.size();
}
inline int TDItemInfo::datas_size() const {
  return _internal_datas_size();
}
inline void TDItemInfo::clear_datas() {
  _impl_.datas_.Clear();
}
inline ::msg::TDItemData* TDItemInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDItemInfo.Datas)
  return _impl_.datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItemData >*
TDItemInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDItemInfo.Datas)
  return &_impl_.datas_;
}
inline const ::msg::TDItemData& TDItemInfo::_internal_datas(int index) const {
  return _impl_.datas_.Get(index);
}
inline const ::msg::TDItemData& TDItemInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDItemInfo.Datas)
  return _internal_datas(index);
}
inline ::msg::TDItemData* TDItemInfo::_internal_add_datas() {
  return _impl_.datas_.Add();
}
inline ::msg::TDItemData* TDItemInfo::add_datas() {
  ::msg::TDItemData* _add = _internal_add_datas();
  // @@protoc_insertion_point(field_add:msg.TDItemInfo.Datas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItemData >&
TDItemInfo::datas() const {
  // @@protoc_insertion_point(field_list:msg.TDItemInfo.Datas)
  return _impl_.datas_;
}

// -------------------------------------------------------------------

// TDItemData

// int32 Id = 1;
inline void TDItemData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDItemData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDItemData::id() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Id)
  return _internal_id();
}
inline void TDItemData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDItemData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.Id)
}

// .msg.TDITEMTYPE Type = 2;
inline void TDItemData::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::TDITEMTYPE TDItemData::_internal_type() const {
  return static_cast< ::msg::TDITEMTYPE >(_impl_.type_);
}
inline ::msg::TDITEMTYPE TDItemData::type() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Type)
  return _internal_type();
}
inline void TDItemData::_internal_set_type(::msg::TDITEMTYPE value) {
  
  _impl_.type_ = value;
}
inline void TDItemData::set_type(::msg::TDITEMTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.Type)
}

// string Name = 3;
inline void TDItemData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TDItemData::name() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDItemData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDItemData.Name)
}
inline std::string* TDItemData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.TDItemData.Name)
  return _s;
}
inline const std::string& TDItemData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TDItemData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TDItemData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TDItemData::release_name() {
  // @@protoc_insertion_point(field_release:msg.TDItemData.Name)
  return _impl_.name_.Release();
}
inline void TDItemData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDItemData.Name)
}

// string Desc = 4;
inline void TDItemData::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& TDItemData::desc() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDItemData::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDItemData.Desc)
}
inline std::string* TDItemData::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:msg.TDItemData.Desc)
  return _s;
}
inline const std::string& TDItemData::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void TDItemData::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* TDItemData::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* TDItemData::release_desc() {
  // @@protoc_insertion_point(field_release:msg.TDItemData.Desc)
  return _impl_.desc_.Release();
}
inline void TDItemData::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDItemData.Desc)
}

// int32 Quality = 5;
inline void TDItemData::clear_quality() {
  _impl_.quality_ = 0;
}
inline int32_t TDItemData::_internal_quality() const {
  return _impl_.quality_;
}
inline int32_t TDItemData::quality() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Quality)
  return _internal_quality();
}
inline void TDItemData::_internal_set_quality(int32_t value) {
  
  _impl_.quality_ = value;
}
inline void TDItemData::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.Quality)
}

// string Icon = 6;
inline void TDItemData::clear_icon() {
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& TDItemData::icon() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TDItemData::set_icon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TDItemData.Icon)
}
inline std::string* TDItemData::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:msg.TDItemData.Icon)
  return _s;
}
inline const std::string& TDItemData::_internal_icon() const {
  return _impl_.icon_.Get();
}
inline void TDItemData::_internal_set_icon(const std::string& value) {
  
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* TDItemData::_internal_mutable_icon() {
  
  return _impl_.icon_.Mutable(GetArenaForAllocation());
}
inline std::string* TDItemData::release_icon() {
  // @@protoc_insertion_point(field_release:msg.TDItemData.Icon)
  return _impl_.icon_.Release();
}
inline void TDItemData::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  _impl_.icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TDItemData.Icon)
}

// repeated int32 ItemIds = 7;
inline int TDItemData::_internal_itemids_size() const {
  return _impl_.itemids_.size();
}
inline int TDItemData::itemids_size() const {
  return _internal_itemids_size();
}
inline void TDItemData::clear_itemids() {
  _impl_.itemids_.Clear();
}
inline int32_t TDItemData::_internal_itemids(int index) const {
  return _impl_.itemids_.Get(index);
}
inline int32_t TDItemData::itemids(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.ItemIds)
  return _internal_itemids(index);
}
inline void TDItemData::set_itemids(int index, int32_t value) {
  _impl_.itemids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.ItemIds)
}
inline void TDItemData::_internal_add_itemids(int32_t value) {
  _impl_.itemids_.Add(value);
}
inline void TDItemData::add_itemids(int32_t value) {
  _internal_add_itemids(value);
  // @@protoc_insertion_point(field_add:msg.TDItemData.ItemIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDItemData::_internal_itemids() const {
  return _impl_.itemids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDItemData::itemids() const {
  // @@protoc_insertion_point(field_list:msg.TDItemData.ItemIds)
  return _internal_itemids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDItemData::_internal_mutable_itemids() {
  return &_impl_.itemids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDItemData::mutable_itemids() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDItemData.ItemIds)
  return _internal_mutable_itemids();
}

// repeated int32 ChessId = 8;
inline int TDItemData::_internal_chessid_size() const {
  return _impl_.chessid_.size();
}
inline int TDItemData::chessid_size() const {
  return _internal_chessid_size();
}
inline void TDItemData::clear_chessid() {
  _impl_.chessid_.Clear();
}
inline int32_t TDItemData::_internal_chessid(int index) const {
  return _impl_.chessid_.Get(index);
}
inline int32_t TDItemData::chessid(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.ChessId)
  return _internal_chessid(index);
}
inline void TDItemData::set_chessid(int index, int32_t value) {
  _impl_.chessid_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.ChessId)
}
inline void TDItemData::_internal_add_chessid(int32_t value) {
  _impl_.chessid_.Add(value);
}
inline void TDItemData::add_chessid(int32_t value) {
  _internal_add_chessid(value);
  // @@protoc_insertion_point(field_add:msg.TDItemData.ChessId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDItemData::_internal_chessid() const {
  return _impl_.chessid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDItemData::chessid() const {
  // @@protoc_insertion_point(field_list:msg.TDItemData.ChessId)
  return _internal_chessid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDItemData::_internal_mutable_chessid() {
  return &_impl_.chessid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDItemData::mutable_chessid() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDItemData.ChessId)
  return _internal_mutable_chessid();
}

// int32 Cost = 9;
inline void TDItemData::clear_cost() {
  _impl_.cost_ = 0;
}
inline int32_t TDItemData::_internal_cost() const {
  return _impl_.cost_;
}
inline int32_t TDItemData::cost() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.Cost)
  return _internal_cost();
}
inline void TDItemData::_internal_set_cost(int32_t value) {
  
  _impl_.cost_ = value;
}
inline void TDItemData::set_cost(int32_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.Cost)
}

// int32 InitLevel = 10;
inline void TDItemData::clear_initlevel() {
  _impl_.initlevel_ = 0;
}
inline int32_t TDItemData::_internal_initlevel() const {
  return _impl_.initlevel_;
}
inline int32_t TDItemData::initlevel() const {
  // @@protoc_insertion_point(field_get:msg.TDItemData.InitLevel)
  return _internal_initlevel();
}
inline void TDItemData::_internal_set_initlevel(int32_t value) {
  
  _impl_.initlevel_ = value;
}
inline void TDItemData::set_initlevel(int32_t value) {
  _internal_set_initlevel(value);
  // @@protoc_insertion_point(field_set:msg.TDItemData.InitLevel)
}

// -------------------------------------------------------------------

// CSReqTDGetOnHookAward

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSRspTDGetOnHookAward

// repeated .msg.TDItem Awards = 1;
inline int CSRspTDGetOnHookAward::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int CSRspTDGetOnHookAward::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* CSRspTDGetOnHookAward::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspTDGetOnHookAward.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
CSRspTDGetOnHookAward::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspTDGetOnHookAward.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& CSRspTDGetOnHookAward::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& CSRspTDGetOnHookAward::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspTDGetOnHookAward.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* CSRspTDGetOnHookAward::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* CSRspTDGetOnHookAward::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.CSRspTDGetOnHookAward.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
CSRspTDGetOnHookAward::awards() const {
  // @@protoc_insertion_point(field_list:msg.CSRspTDGetOnHookAward.Awards)
  return _impl_.awards_;
}

// int64 OnHookTime = 2;
inline void CSRspTDGetOnHookAward::clear_onhooktime() {
  _impl_.onhooktime_ = int64_t{0};
}
inline int64_t CSRspTDGetOnHookAward::_internal_onhooktime() const {
  return _impl_.onhooktime_;
}
inline int64_t CSRspTDGetOnHookAward::onhooktime() const {
  // @@protoc_insertion_point(field_get:msg.CSRspTDGetOnHookAward.OnHookTime)
  return _internal_onhooktime();
}
inline void CSRspTDGetOnHookAward::_internal_set_onhooktime(int64_t value) {
  
  _impl_.onhooktime_ = value;
}
inline void CSRspTDGetOnHookAward::set_onhooktime(int64_t value) {
  _internal_set_onhooktime(value);
  // @@protoc_insertion_point(field_set:msg.CSRspTDGetOnHookAward.OnHookTime)
}

// map<int64, int64> OnHookTimeRecord = 3;
inline int CSRspTDGetOnHookAward::_internal_onhooktimerecord_size() const {
  return _impl_.onhooktimerecord_.size();
}
inline int CSRspTDGetOnHookAward::onhooktimerecord_size() const {
  return _internal_onhooktimerecord_size();
}
inline void CSRspTDGetOnHookAward::clear_onhooktimerecord() {
  _impl_.onhooktimerecord_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
CSRspTDGetOnHookAward::_internal_onhooktimerecord() const {
  return _impl_.onhooktimerecord_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
CSRspTDGetOnHookAward::onhooktimerecord() const {
  // @@protoc_insertion_point(field_map:msg.CSRspTDGetOnHookAward.OnHookTimeRecord)
  return _internal_onhooktimerecord();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
CSRspTDGetOnHookAward::_internal_mutable_onhooktimerecord() {
  return _impl_.onhooktimerecord_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
CSRspTDGetOnHookAward::mutable_onhooktimerecord() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSRspTDGetOnHookAward.OnHookTimeRecord)
  return _internal_mutable_onhooktimerecord();
}

// -------------------------------------------------------------------

// CsReqTDDraw

// int32 PoolId = 1;
inline void CsReqTDDraw::clear_poolid() {
  _impl_.poolid_ = 0;
}
inline int32_t CsReqTDDraw::_internal_poolid() const {
  return _impl_.poolid_;
}
inline int32_t CsReqTDDraw::poolid() const {
  // @@protoc_insertion_point(field_get:msg.CsReqTDDraw.PoolId)
  return _internal_poolid();
}
inline void CsReqTDDraw::_internal_set_poolid(int32_t value) {
  
  _impl_.poolid_ = value;
}
inline void CsReqTDDraw::set_poolid(int32_t value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:msg.CsReqTDDraw.PoolId)
}

// bool Ten = 2;
inline void CsReqTDDraw::clear_ten() {
  _impl_.ten_ = false;
}
inline bool CsReqTDDraw::_internal_ten() const {
  return _impl_.ten_;
}
inline bool CsReqTDDraw::ten() const {
  // @@protoc_insertion_point(field_get:msg.CsReqTDDraw.Ten)
  return _internal_ten();
}
inline void CsReqTDDraw::_internal_set_ten(bool value) {
  
  _impl_.ten_ = value;
}
inline void CsReqTDDraw::set_ten(bool value) {
  _internal_set_ten(value);
  // @@protoc_insertion_point(field_set:msg.CsReqTDDraw.Ten)
}

// -------------------------------------------------------------------

// CsRspTDDraw

// repeated .msg.TDItem Awards = 2;
inline int CsRspTDDraw::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int CsRspTDDraw::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* CsRspTDDraw::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CsRspTDDraw.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
CsRspTDDraw::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.CsRspTDDraw.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& CsRspTDDraw::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& CsRspTDDraw::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.CsRspTDDraw.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* CsRspTDDraw::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* CsRspTDDraw::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.CsRspTDDraw.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
CsRspTDDraw::awards() const {
  // @@protoc_insertion_point(field_list:msg.CsRspTDDraw.Awards)
  return _impl_.awards_;
}

// repeated .msg.TDConsume Consumes = 3;
inline int CsRspTDDraw::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int CsRspTDDraw::consumes_size() const {
  return _internal_consumes_size();
}
inline void CsRspTDDraw::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::TDConsume* CsRspTDDraw::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CsRspTDDraw.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
CsRspTDDraw::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.CsRspTDDraw.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::TDConsume& CsRspTDDraw::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::TDConsume& CsRspTDDraw::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.CsRspTDDraw.Consumes)
  return _internal_consumes(index);
}
inline ::msg::TDConsume* CsRspTDDraw::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::TDConsume* CsRspTDDraw::add_consumes() {
  ::msg::TDConsume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.CsRspTDDraw.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
CsRspTDDraw::consumes() const {
  // @@protoc_insertion_point(field_list:msg.CsRspTDDraw.Consumes)
  return _impl_.consumes_;
}

// -------------------------------------------------------------------

// CsReqTDBuyCard

// int32 CardCount = 1;
inline void CsReqTDBuyCard::clear_cardcount() {
  _impl_.cardcount_ = 0;
}
inline int32_t CsReqTDBuyCard::_internal_cardcount() const {
  return _impl_.cardcount_;
}
inline int32_t CsReqTDBuyCard::cardcount() const {
  // @@protoc_insertion_point(field_get:msg.CsReqTDBuyCard.CardCount)
  return _internal_cardcount();
}
inline void CsReqTDBuyCard::_internal_set_cardcount(int32_t value) {
  
  _impl_.cardcount_ = value;
}
inline void CsReqTDBuyCard::set_cardcount(int32_t value) {
  _internal_set_cardcount(value);
  // @@protoc_insertion_point(field_set:msg.CsReqTDBuyCard.CardCount)
}

// -------------------------------------------------------------------

// CsRspTDBuyCard

// .msg.TDBuy BuyCard = 1;
inline bool CsRspTDBuyCard::_internal_has_buycard() const {
  return this != internal_default_instance() && _impl_.buycard_ != nullptr;
}
inline bool CsRspTDBuyCard::has_buycard() const {
  return _internal_has_buycard();
}
inline void CsRspTDBuyCard::clear_buycard() {
  if (GetArenaForAllocation() == nullptr && _impl_.buycard_ != nullptr) {
    delete _impl_.buycard_;
  }
  _impl_.buycard_ = nullptr;
}
inline const ::msg::TDBuy& CsRspTDBuyCard::_internal_buycard() const {
  const ::msg::TDBuy* p = _impl_.buycard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDBuy&>(
      ::msg::_TDBuy_default_instance_);
}
inline const ::msg::TDBuy& CsRspTDBuyCard::buycard() const {
  // @@protoc_insertion_point(field_get:msg.CsRspTDBuyCard.BuyCard)
  return _internal_buycard();
}
inline void CsRspTDBuyCard::unsafe_arena_set_allocated_buycard(
    ::msg::TDBuy* buycard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buycard_);
  }
  _impl_.buycard_ = buycard;
  if (buycard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CsRspTDBuyCard.BuyCard)
}
inline ::msg::TDBuy* CsRspTDBuyCard::release_buycard() {
  
  ::msg::TDBuy* temp = _impl_.buycard_;
  _impl_.buycard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDBuy* CsRspTDBuyCard::unsafe_arena_release_buycard() {
  // @@protoc_insertion_point(field_release:msg.CsRspTDBuyCard.BuyCard)
  
  ::msg::TDBuy* temp = _impl_.buycard_;
  _impl_.buycard_ = nullptr;
  return temp;
}
inline ::msg::TDBuy* CsRspTDBuyCard::_internal_mutable_buycard() {
  
  if (_impl_.buycard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDBuy>(GetArenaForAllocation());
    _impl_.buycard_ = p;
  }
  return _impl_.buycard_;
}
inline ::msg::TDBuy* CsRspTDBuyCard::mutable_buycard() {
  ::msg::TDBuy* _msg = _internal_mutable_buycard();
  // @@protoc_insertion_point(field_mutable:msg.CsRspTDBuyCard.BuyCard)
  return _msg;
}
inline void CsRspTDBuyCard::set_allocated_buycard(::msg::TDBuy* buycard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buycard_;
  }
  if (buycard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buycard);
    if (message_arena != submessage_arena) {
      buycard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buycard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buycard_ = buycard;
  // @@protoc_insertion_point(field_set_allocated:msg.CsRspTDBuyCard.BuyCard)
}

// -------------------------------------------------------------------

// CSNtfTDPlayerInfo

// .msg.TDPlayerInfo PlayerInfo = 1;
inline bool CSNtfTDPlayerInfo::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool CSNtfTDPlayerInfo::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void CSNtfTDPlayerInfo::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::msg::TDPlayerInfo& CSNtfTDPlayerInfo::_internal_playerinfo() const {
  const ::msg::TDPlayerInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDPlayerInfo&>(
      ::msg::_TDPlayerInfo_default_instance_);
}
inline const ::msg::TDPlayerInfo& CSNtfTDPlayerInfo::playerinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfTDPlayerInfo.PlayerInfo)
  return _internal_playerinfo();
}
inline void CSNtfTDPlayerInfo::unsafe_arena_set_allocated_playerinfo(
    ::msg::TDPlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfTDPlayerInfo.PlayerInfo)
}
inline ::msg::TDPlayerInfo* CSNtfTDPlayerInfo::release_playerinfo() {
  
  ::msg::TDPlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDPlayerInfo* CSNtfTDPlayerInfo::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfTDPlayerInfo.PlayerInfo)
  
  ::msg::TDPlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::msg::TDPlayerInfo* CSNtfTDPlayerInfo::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDPlayerInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::msg::TDPlayerInfo* CSNtfTDPlayerInfo::mutable_playerinfo() {
  ::msg::TDPlayerInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfTDPlayerInfo.PlayerInfo)
  return _msg;
}
inline void CSNtfTDPlayerInfo::set_allocated_playerinfo(::msg::TDPlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfTDPlayerInfo.PlayerInfo)
}

// -------------------------------------------------------------------

// CSReqTDSetCardGroup

// .msg.TDITEMTYPE Type = 1;
inline void CSReqTDSetCardGroup::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::TDITEMTYPE CSReqTDSetCardGroup::_internal_type() const {
  return static_cast< ::msg::TDITEMTYPE >(_impl_.type_);
}
inline ::msg::TDITEMTYPE CSReqTDSetCardGroup::type() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDSetCardGroup.Type)
  return _internal_type();
}
inline void CSReqTDSetCardGroup::_internal_set_type(::msg::TDITEMTYPE value) {
  
  _impl_.type_ = value;
}
inline void CSReqTDSetCardGroup::set_type(::msg::TDITEMTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSReqTDSetCardGroup.Type)
}

// .msg.TDCardGroup CardGroup = 2;
inline bool CSReqTDSetCardGroup::_internal_has_cardgroup() const {
  return this != internal_default_instance() && _impl_.cardgroup_ != nullptr;
}
inline bool CSReqTDSetCardGroup::has_cardgroup() const {
  return _internal_has_cardgroup();
}
inline const ::msg::TDCardGroup& CSReqTDSetCardGroup::_internal_cardgroup() const {
  const ::msg::TDCardGroup* p = _impl_.cardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDCardGroup&>(
      ::msg::_TDCardGroup_default_instance_);
}
inline const ::msg::TDCardGroup& CSReqTDSetCardGroup::cardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDSetCardGroup.CardGroup)
  return _internal_cardgroup();
}
inline void CSReqTDSetCardGroup::unsafe_arena_set_allocated_cardgroup(
    ::msg::TDCardGroup* cardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cardgroup_);
  }
  _impl_.cardgroup_ = cardgroup;
  if (cardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqTDSetCardGroup.CardGroup)
}
inline ::msg::TDCardGroup* CSReqTDSetCardGroup::release_cardgroup() {
  
  ::msg::TDCardGroup* temp = _impl_.cardgroup_;
  _impl_.cardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDCardGroup* CSReqTDSetCardGroup::unsafe_arena_release_cardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDSetCardGroup.CardGroup)
  
  ::msg::TDCardGroup* temp = _impl_.cardgroup_;
  _impl_.cardgroup_ = nullptr;
  return temp;
}
inline ::msg::TDCardGroup* CSReqTDSetCardGroup::_internal_mutable_cardgroup() {
  
  if (_impl_.cardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDCardGroup>(GetArenaForAllocation());
    _impl_.cardgroup_ = p;
  }
  return _impl_.cardgroup_;
}
inline ::msg::TDCardGroup* CSReqTDSetCardGroup::mutable_cardgroup() {
  ::msg::TDCardGroup* _msg = _internal_mutable_cardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDSetCardGroup.CardGroup)
  return _msg;
}
inline void CSReqTDSetCardGroup::set_allocated_cardgroup(::msg::TDCardGroup* cardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cardgroup_);
  }
  if (cardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardgroup));
    if (message_arena != submessage_arena) {
      cardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cardgroup_ = cardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDSetCardGroup.CardGroup)
}

// -------------------------------------------------------------------

// CSRspTDSetCardGroup

// -------------------------------------------------------------------

// CSReqTDLevelUp

// .msg.TDItemId Id = 1;
inline bool CSReqTDLevelUp::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool CSReqTDLevelUp::has_id() const {
  return _internal_has_id();
}
inline const ::msg::TDItemId& CSReqTDLevelUp::_internal_id() const {
  const ::msg::TDItemId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& CSReqTDLevelUp::id() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.Id)
  return _internal_id();
}
inline void CSReqTDLevelUp::unsafe_arena_set_allocated_id(
    ::msg::TDItemId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqTDLevelUp.Id)
}
inline ::msg::TDItemId* CSReqTDLevelUp::release_id() {
  
  ::msg::TDItemId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* CSReqTDLevelUp::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDLevelUp.Id)
  
  ::msg::TDItemId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* CSReqTDLevelUp::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::msg::TDItemId* CSReqTDLevelUp::mutable_id() {
  ::msg::TDItemId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDLevelUp.Id)
  return _msg;
}
inline void CSReqTDLevelUp::set_allocated_id(::msg::TDItemId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDLevelUp.Id)
}

// bool Equip = 2;
inline void CSReqTDLevelUp::clear_equip() {
  _impl_.equip_ = false;
}
inline bool CSReqTDLevelUp::_internal_equip() const {
  return _impl_.equip_;
}
inline bool CSReqTDLevelUp::equip() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.Equip)
  return _internal_equip();
}
inline void CSReqTDLevelUp::_internal_set_equip(bool value) {
  
  _impl_.equip_ = value;
}
inline void CSReqTDLevelUp::set_equip(bool value) {
  _internal_set_equip(value);
  // @@protoc_insertion_point(field_set:msg.CSReqTDLevelUp.Equip)
}

// .msg.TDLEVELUP_TYPE LvUpType = 3;
inline void CSReqTDLevelUp::clear_lvuptype() {
  _impl_.lvuptype_ = 0;
}
inline ::msg::TDLEVELUP_TYPE CSReqTDLevelUp::_internal_lvuptype() const {
  return static_cast< ::msg::TDLEVELUP_TYPE >(_impl_.lvuptype_);
}
inline ::msg::TDLEVELUP_TYPE CSReqTDLevelUp::lvuptype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.LvUpType)
  return _internal_lvuptype();
}
inline void CSReqTDLevelUp::_internal_set_lvuptype(::msg::TDLEVELUP_TYPE value) {
  
  _impl_.lvuptype_ = value;
}
inline void CSReqTDLevelUp::set_lvuptype(::msg::TDLEVELUP_TYPE value) {
  _internal_set_lvuptype(value);
  // @@protoc_insertion_point(field_set:msg.CSReqTDLevelUp.LvUpType)
}

// repeated .msg.TDConsume Consumes = 4;
inline int CSReqTDLevelUp::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int CSReqTDLevelUp::consumes_size() const {
  return _internal_consumes_size();
}
inline void CSReqTDLevelUp::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::TDConsume* CSReqTDLevelUp::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDLevelUp.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
CSReqTDLevelUp::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSReqTDLevelUp.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::TDConsume& CSReqTDLevelUp::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::TDConsume& CSReqTDLevelUp::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.Consumes)
  return _internal_consumes(index);
}
inline ::msg::TDConsume* CSReqTDLevelUp::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::TDConsume* CSReqTDLevelUp::add_consumes() {
  ::msg::TDConsume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.CSReqTDLevelUp.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
CSReqTDLevelUp::consumes() const {
  // @@protoc_insertion_point(field_list:msg.CSReqTDLevelUp.Consumes)
  return _impl_.consumes_;
}

// .msg.TDItem BluePrint = 5;
inline bool CSReqTDLevelUp::_internal_has_blueprint() const {
  return this != internal_default_instance() && _impl_.blueprint_ != nullptr;
}
inline bool CSReqTDLevelUp::has_blueprint() const {
  return _internal_has_blueprint();
}
inline const ::msg::TDItem& CSReqTDLevelUp::_internal_blueprint() const {
  const ::msg::TDItem* p = _impl_.blueprint_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItem&>(
      ::msg::_TDItem_default_instance_);
}
inline const ::msg::TDItem& CSReqTDLevelUp::blueprint() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.BluePrint)
  return _internal_blueprint();
}
inline void CSReqTDLevelUp::unsafe_arena_set_allocated_blueprint(
    ::msg::TDItem* blueprint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blueprint_);
  }
  _impl_.blueprint_ = blueprint;
  if (blueprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqTDLevelUp.BluePrint)
}
inline ::msg::TDItem* CSReqTDLevelUp::release_blueprint() {
  
  ::msg::TDItem* temp = _impl_.blueprint_;
  _impl_.blueprint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItem* CSReqTDLevelUp::unsafe_arena_release_blueprint() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDLevelUp.BluePrint)
  
  ::msg::TDItem* temp = _impl_.blueprint_;
  _impl_.blueprint_ = nullptr;
  return temp;
}
inline ::msg::TDItem* CSReqTDLevelUp::_internal_mutable_blueprint() {
  
  if (_impl_.blueprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItem>(GetArenaForAllocation());
    _impl_.blueprint_ = p;
  }
  return _impl_.blueprint_;
}
inline ::msg::TDItem* CSReqTDLevelUp::mutable_blueprint() {
  ::msg::TDItem* _msg = _internal_mutable_blueprint();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDLevelUp.BluePrint)
  return _msg;
}
inline void CSReqTDLevelUp::set_allocated_blueprint(::msg::TDItem* blueprint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blueprint_);
  }
  if (blueprint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blueprint));
    if (message_arena != submessage_arena) {
      blueprint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blueprint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blueprint_ = blueprint;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDLevelUp.BluePrint)
}

// .msg.TDItemId ChessId = 6;
inline bool CSReqTDLevelUp::_internal_has_chessid() const {
  return this != internal_default_instance() && _impl_.chessid_ != nullptr;
}
inline bool CSReqTDLevelUp::has_chessid() const {
  return _internal_has_chessid();
}
inline const ::msg::TDItemId& CSReqTDLevelUp::_internal_chessid() const {
  const ::msg::TDItemId* p = _impl_.chessid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& CSReqTDLevelUp::chessid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.ChessId)
  return _internal_chessid();
}
inline void CSReqTDLevelUp::unsafe_arena_set_allocated_chessid(
    ::msg::TDItemId* chessid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessid_);
  }
  _impl_.chessid_ = chessid;
  if (chessid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqTDLevelUp.ChessId)
}
inline ::msg::TDItemId* CSReqTDLevelUp::release_chessid() {
  
  ::msg::TDItemId* temp = _impl_.chessid_;
  _impl_.chessid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* CSReqTDLevelUp::unsafe_arena_release_chessid() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDLevelUp.ChessId)
  
  ::msg::TDItemId* temp = _impl_.chessid_;
  _impl_.chessid_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* CSReqTDLevelUp::_internal_mutable_chessid() {
  
  if (_impl_.chessid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.chessid_ = p;
  }
  return _impl_.chessid_;
}
inline ::msg::TDItemId* CSReqTDLevelUp::mutable_chessid() {
  ::msg::TDItemId* _msg = _internal_mutable_chessid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDLevelUp.ChessId)
  return _msg;
}
inline void CSReqTDLevelUp::set_allocated_chessid(::msg::TDItemId* chessid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessid_);
  }
  if (chessid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chessid));
    if (message_arena != submessage_arena) {
      chessid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessid_ = chessid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDLevelUp.ChessId)
}

// string Slot = 7;
inline void CSReqTDLevelUp::clear_slot() {
  _impl_.slot_.ClearToEmpty();
}
inline const std::string& CSReqTDLevelUp::slot() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDLevelUp.Slot)
  return _internal_slot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqTDLevelUp::set_slot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.slot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqTDLevelUp.Slot)
}
inline std::string* CSReqTDLevelUp::mutable_slot() {
  std::string* _s = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDLevelUp.Slot)
  return _s;
}
inline const std::string& CSReqTDLevelUp::_internal_slot() const {
  return _impl_.slot_.Get();
}
inline void CSReqTDLevelUp::_internal_set_slot(const std::string& value) {
  
  _impl_.slot_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqTDLevelUp::_internal_mutable_slot() {
  
  return _impl_.slot_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqTDLevelUp::release_slot() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDLevelUp.Slot)
  return _impl_.slot_.Release();
}
inline void CSReqTDLevelUp::set_allocated_slot(std::string* slot) {
  if (slot != nullptr) {
    
  } else {
    
  }
  _impl_.slot_.SetAllocated(slot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.slot_.IsDefault()) {
    _impl_.slot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDLevelUp.Slot)
}

// -------------------------------------------------------------------

// CSRspTDLevelUp

// repeated .msg.TDConsume Consumes = 1;
inline int CSRspTDLevelUp::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int CSRspTDLevelUp::consumes_size() const {
  return _internal_consumes_size();
}
inline void CSRspTDLevelUp::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::TDConsume* CSRspTDLevelUp::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspTDLevelUp.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
CSRspTDLevelUp::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspTDLevelUp.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::TDConsume& CSRspTDLevelUp::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::TDConsume& CSRspTDLevelUp::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspTDLevelUp.Consumes)
  return _internal_consumes(index);
}
inline ::msg::TDConsume* CSRspTDLevelUp::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::TDConsume* CSRspTDLevelUp::add_consumes() {
  ::msg::TDConsume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.CSRspTDLevelUp.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
CSRspTDLevelUp::consumes() const {
  // @@protoc_insertion_point(field_list:msg.CSRspTDLevelUp.Consumes)
  return _impl_.consumes_;
}

// repeated .msg.TDItem Awards = 2;
inline int CSRspTDLevelUp::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int CSRspTDLevelUp::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* CSRspTDLevelUp::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspTDLevelUp.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
CSRspTDLevelUp::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspTDLevelUp.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& CSRspTDLevelUp::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& CSRspTDLevelUp::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspTDLevelUp.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* CSRspTDLevelUp::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* CSRspTDLevelUp::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.CSRspTDLevelUp.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
CSRspTDLevelUp::awards() const {
  // @@protoc_insertion_point(field_list:msg.CSRspTDLevelUp.Awards)
  return _impl_.awards_;
}

// -------------------------------------------------------------------

// CSReqTDEquip

// .msg.TDItemId ChessId = 1;
inline bool CSReqTDEquip::_internal_has_chessid() const {
  return this != internal_default_instance() && _impl_.chessid_ != nullptr;
}
inline bool CSReqTDEquip::has_chessid() const {
  return _internal_has_chessid();
}
inline const ::msg::TDItemId& CSReqTDEquip::_internal_chessid() const {
  const ::msg::TDItemId* p = _impl_.chessid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& CSReqTDEquip::chessid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDEquip.ChessId)
  return _internal_chessid();
}
inline void CSReqTDEquip::unsafe_arena_set_allocated_chessid(
    ::msg::TDItemId* chessid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessid_);
  }
  _impl_.chessid_ = chessid;
  if (chessid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqTDEquip.ChessId)
}
inline ::msg::TDItemId* CSReqTDEquip::release_chessid() {
  
  ::msg::TDItemId* temp = _impl_.chessid_;
  _impl_.chessid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* CSReqTDEquip::unsafe_arena_release_chessid() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDEquip.ChessId)
  
  ::msg::TDItemId* temp = _impl_.chessid_;
  _impl_.chessid_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* CSReqTDEquip::_internal_mutable_chessid() {
  
  if (_impl_.chessid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.chessid_ = p;
  }
  return _impl_.chessid_;
}
inline ::msg::TDItemId* CSReqTDEquip::mutable_chessid() {
  ::msg::TDItemId* _msg = _internal_mutable_chessid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDEquip.ChessId)
  return _msg;
}
inline void CSReqTDEquip::set_allocated_chessid(::msg::TDItemId* chessid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessid_);
  }
  if (chessid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chessid));
    if (message_arena != submessage_arena) {
      chessid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessid_ = chessid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDEquip.ChessId)
}

// string Slot = 2;
inline void CSReqTDEquip::clear_slot() {
  _impl_.slot_.ClearToEmpty();
}
inline const std::string& CSReqTDEquip::slot() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDEquip.Slot)
  return _internal_slot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqTDEquip::set_slot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.slot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqTDEquip.Slot)
}
inline std::string* CSReqTDEquip::mutable_slot() {
  std::string* _s = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDEquip.Slot)
  return _s;
}
inline const std::string& CSReqTDEquip::_internal_slot() const {
  return _impl_.slot_.Get();
}
inline void CSReqTDEquip::_internal_set_slot(const std::string& value) {
  
  _impl_.slot_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqTDEquip::_internal_mutable_slot() {
  
  return _impl_.slot_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqTDEquip::release_slot() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDEquip.Slot)
  return _impl_.slot_.Release();
}
inline void CSReqTDEquip::set_allocated_slot(std::string* slot) {
  if (slot != nullptr) {
    
  } else {
    
  }
  _impl_.slot_.SetAllocated(slot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.slot_.IsDefault()) {
    _impl_.slot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDEquip.Slot)
}

// bool TakeOff = 3;
inline void CSReqTDEquip::clear_takeoff() {
  _impl_.takeoff_ = false;
}
inline bool CSReqTDEquip::_internal_takeoff() const {
  return _impl_.takeoff_;
}
inline bool CSReqTDEquip::takeoff() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDEquip.TakeOff)
  return _internal_takeoff();
}
inline void CSReqTDEquip::_internal_set_takeoff(bool value) {
  
  _impl_.takeoff_ = value;
}
inline void CSReqTDEquip::set_takeoff(bool value) {
  _internal_set_takeoff(value);
  // @@protoc_insertion_point(field_set:msg.CSReqTDEquip.TakeOff)
}

// .msg.TDItemId EquipId = 4;
inline bool CSReqTDEquip::_internal_has_equipid() const {
  return this != internal_default_instance() && _impl_.equipid_ != nullptr;
}
inline bool CSReqTDEquip::has_equipid() const {
  return _internal_has_equipid();
}
inline const ::msg::TDItemId& CSReqTDEquip::_internal_equipid() const {
  const ::msg::TDItemId* p = _impl_.equipid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& CSReqTDEquip::equipid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqTDEquip.EquipId)
  return _internal_equipid();
}
inline void CSReqTDEquip::unsafe_arena_set_allocated_equipid(
    ::msg::TDItemId* equipid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipid_);
  }
  _impl_.equipid_ = equipid;
  if (equipid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqTDEquip.EquipId)
}
inline ::msg::TDItemId* CSReqTDEquip::release_equipid() {
  
  ::msg::TDItemId* temp = _impl_.equipid_;
  _impl_.equipid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* CSReqTDEquip::unsafe_arena_release_equipid() {
  // @@protoc_insertion_point(field_release:msg.CSReqTDEquip.EquipId)
  
  ::msg::TDItemId* temp = _impl_.equipid_;
  _impl_.equipid_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* CSReqTDEquip::_internal_mutable_equipid() {
  
  if (_impl_.equipid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.equipid_ = p;
  }
  return _impl_.equipid_;
}
inline ::msg::TDItemId* CSReqTDEquip::mutable_equipid() {
  ::msg::TDItemId* _msg = _internal_mutable_equipid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqTDEquip.EquipId)
  return _msg;
}
inline void CSReqTDEquip::set_allocated_equipid(::msg::TDItemId* equipid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipid_);
  }
  if (equipid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipid));
    if (message_arena != submessage_arena) {
      equipid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.equipid_ = equipid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqTDEquip.EquipId)
}

// -------------------------------------------------------------------

// CSRspTDEquip

// repeated .msg.TDConsume Consumes = 1;
inline int CSRspTDEquip::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int CSRspTDEquip::consumes_size() const {
  return _internal_consumes_size();
}
inline void CSRspTDEquip::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::TDConsume* CSRspTDEquip::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspTDEquip.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >*
CSRspTDEquip::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspTDEquip.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::TDConsume& CSRspTDEquip::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::TDConsume& CSRspTDEquip::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspTDEquip.Consumes)
  return _internal_consumes(index);
}
inline ::msg::TDConsume* CSRspTDEquip::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::TDConsume* CSRspTDEquip::add_consumes() {
  ::msg::TDConsume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.CSRspTDEquip.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDConsume >&
CSRspTDEquip::consumes() const {
  // @@protoc_insertion_point(field_list:msg.CSRspTDEquip.Consumes)
  return _impl_.consumes_;
}

// repeated .msg.TDItem Awards = 2;
inline int CSRspTDEquip::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int CSRspTDEquip::awards_size() const {
  return _internal_awards_size();
}
inline ::msg::TDItem* CSRspTDEquip::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspTDEquip.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
CSRspTDEquip::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspTDEquip.Awards)
  return &_impl_.awards_;
}
inline const ::msg::TDItem& CSRspTDEquip::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::TDItem& CSRspTDEquip::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspTDEquip.Awards)
  return _internal_awards(index);
}
inline ::msg::TDItem* CSRspTDEquip::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::TDItem* CSRspTDEquip::add_awards() {
  ::msg::TDItem* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.CSRspTDEquip.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
CSRspTDEquip::awards() const {
  // @@protoc_insertion_point(field_list:msg.CSRspTDEquip.Awards)
  return _impl_.awards_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TDPlayerInfo

// int64 OnHookTime = 1;
inline void TDPlayerInfo::clear_onhooktime() {
  _impl_.onhooktime_ = int64_t{0};
}
inline int64_t TDPlayerInfo::_internal_onhooktime() const {
  return _impl_.onhooktime_;
}
inline int64_t TDPlayerInfo::onhooktime() const {
  // @@protoc_insertion_point(field_get:msg.TDPlayerInfo.OnHookTime)
  return _internal_onhooktime();
}
inline void TDPlayerInfo::_internal_set_onhooktime(int64_t value) {
  
  _impl_.onhooktime_ = value;
}
inline void TDPlayerInfo::set_onhooktime(int64_t value) {
  _internal_set_onhooktime(value);
  // @@protoc_insertion_point(field_set:msg.TDPlayerInfo.OnHookTime)
}

// int32 OnHookStage = 2;
inline void TDPlayerInfo::clear_onhookstage() {
  _impl_.onhookstage_ = 0;
}
inline int32_t TDPlayerInfo::_internal_onhookstage() const {
  return _impl_.onhookstage_;
}
inline int32_t TDPlayerInfo::onhookstage() const {
  // @@protoc_insertion_point(field_get:msg.TDPlayerInfo.OnHookStage)
  return _internal_onhookstage();
}
inline void TDPlayerInfo::_internal_set_onhookstage(int32_t value) {
  
  _impl_.onhookstage_ = value;
}
inline void TDPlayerInfo::set_onhookstage(int32_t value) {
  _internal_set_onhookstage(value);
  // @@protoc_insertion_point(field_set:msg.TDPlayerInfo.OnHookStage)
}

// int32 LastStage = 3;
inline void TDPlayerInfo::clear_laststage() {
  _impl_.laststage_ = 0;
}
inline int32_t TDPlayerInfo::_internal_laststage() const {
  return _impl_.laststage_;
}
inline int32_t TDPlayerInfo::laststage() const {
  // @@protoc_insertion_point(field_get:msg.TDPlayerInfo.LastStage)
  return _internal_laststage();
}
inline void TDPlayerInfo::_internal_set_laststage(int32_t value) {
  
  _impl_.laststage_ = value;
}
inline void TDPlayerInfo::set_laststage(int32_t value) {
  _internal_set_laststage(value);
  // @@protoc_insertion_point(field_set:msg.TDPlayerInfo.LastStage)
}

// .msg.TDItemGroup ItemGroup = 4;
inline bool TDPlayerInfo::_internal_has_itemgroup() const {
  return this != internal_default_instance() && _impl_.itemgroup_ != nullptr;
}
inline bool TDPlayerInfo::has_itemgroup() const {
  return _internal_has_itemgroup();
}
inline const ::msg::TDItemGroup& TDPlayerInfo::_internal_itemgroup() const {
  const ::msg::TDItemGroup* p = _impl_.itemgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemGroup&>(
      ::msg::_TDItemGroup_default_instance_);
}
inline const ::msg::TDItemGroup& TDPlayerInfo::itemgroup() const {
  // @@protoc_insertion_point(field_get:msg.TDPlayerInfo.ItemGroup)
  return _internal_itemgroup();
}
inline void TDPlayerInfo::unsafe_arena_set_allocated_itemgroup(
    ::msg::TDItemGroup* itemgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemgroup_);
  }
  _impl_.itemgroup_ = itemgroup;
  if (itemgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDPlayerInfo.ItemGroup)
}
inline ::msg::TDItemGroup* TDPlayerInfo::release_itemgroup() {
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup_;
  _impl_.itemgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemGroup* TDPlayerInfo::unsafe_arena_release_itemgroup() {
  // @@protoc_insertion_point(field_release:msg.TDPlayerInfo.ItemGroup)
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup_;
  _impl_.itemgroup_ = nullptr;
  return temp;
}
inline ::msg::TDItemGroup* TDPlayerInfo::_internal_mutable_itemgroup() {
  
  if (_impl_.itemgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemGroup>(GetArenaForAllocation());
    _impl_.itemgroup_ = p;
  }
  return _impl_.itemgroup_;
}
inline ::msg::TDItemGroup* TDPlayerInfo::mutable_itemgroup() {
  ::msg::TDItemGroup* _msg = _internal_mutable_itemgroup();
  // @@protoc_insertion_point(field_mutable:msg.TDPlayerInfo.ItemGroup)
  return _msg;
}
inline void TDPlayerInfo::set_allocated_itemgroup(::msg::TDItemGroup* itemgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemgroup_);
  }
  if (itemgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(itemgroup));
    if (message_arena != submessage_arena) {
      itemgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, itemgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.itemgroup_ = itemgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.TDPlayerInfo.ItemGroup)
}

// repeated .msg.TDItem Items = 5;
inline int TDPlayerInfo::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int TDPlayerInfo::items_size() const {
  return _internal_items_size();
}
inline ::msg::TDItem* TDPlayerInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TDPlayerInfo.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >*
TDPlayerInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDPlayerInfo.Items)
  return &_impl_.items_;
}
inline const ::msg::TDItem& TDPlayerInfo::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::msg::TDItem& TDPlayerInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDPlayerInfo.Items)
  return _internal_items(index);
}
inline ::msg::TDItem* TDPlayerInfo::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::msg::TDItem* TDPlayerInfo::add_items() {
  ::msg::TDItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:msg.TDPlayerInfo.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::TDItem >&
TDPlayerInfo::items() const {
  // @@protoc_insertion_point(field_list:msg.TDPlayerInfo.Items)
  return _impl_.items_;
}

// map<int64, int64> OnHookTimeRecord = 6;
inline int TDPlayerInfo::_internal_onhooktimerecord_size() const {
  return _impl_.onhooktimerecord_.size();
}
inline int TDPlayerInfo::onhooktimerecord_size() const {
  return _internal_onhooktimerecord_size();
}
inline void TDPlayerInfo::clear_onhooktimerecord() {
  _impl_.onhooktimerecord_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TDPlayerInfo::_internal_onhooktimerecord() const {
  return _impl_.onhooktimerecord_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TDPlayerInfo::onhooktimerecord() const {
  // @@protoc_insertion_point(field_map:msg.TDPlayerInfo.OnHookTimeRecord)
  return _internal_onhooktimerecord();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TDPlayerInfo::_internal_mutable_onhooktimerecord() {
  return _impl_.onhooktimerecord_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TDPlayerInfo::mutable_onhooktimerecord() {
  // @@protoc_insertion_point(field_mutable_map:msg.TDPlayerInfo.OnHookTimeRecord)
  return _internal_mutable_onhooktimerecord();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::TDITEMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TDITEMTYPE>() {
  return ::msg::TDITEMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::TDLEVELUP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TDLEVELUP_TYPE>() {
  return ::msg::TDLEVELUP_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::TDSKILLTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TDSKILLTYPE>() {
  return ::msg::TDSKILLTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_towerdefense_2eproto
