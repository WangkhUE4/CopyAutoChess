#if PLATFORM_WINDOWS
#pragma warning(disable:4100)
#pragma warning(disable:4125)
#pragma warning(disable:4267)
#pragma warning(disable:4668)
#pragma warning(disable:4800)
#pragma warning(disable:4456)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#if PLATFORM_WINDOWS
#pragma warning(disable:4125)
#pragma warning(disable:4668)
#endif
#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace msg {
class ActivityAttrData;
struct ActivityAttrDataDefaultTypeInternal;
extern ActivityAttrDataDefaultTypeInternal _ActivityAttrData_default_instance_;
class ActivityData;
struct ActivityDataDefaultTypeInternal;
extern ActivityDataDefaultTypeInternal _ActivityData_default_instance_;
class ActivityGroup;
struct ActivityGroupDefaultTypeInternal;
extern ActivityGroupDefaultTypeInternal _ActivityGroup_default_instance_;
class ActivityGroupData;
struct ActivityGroupDataDefaultTypeInternal;
extern ActivityGroupDataDefaultTypeInternal _ActivityGroupData_default_instance_;
class AddRecommendData;
struct AddRecommendDataDefaultTypeInternal;
extern AddRecommendDataDefaultTypeInternal _AddRecommendData_default_instance_;
class AnswerData;
struct AnswerDataDefaultTypeInternal;
extern AnswerDataDefaultTypeInternal _AnswerData_default_instance_;
class ApplyWorkshopRule;
struct ApplyWorkshopRuleDefaultTypeInternal;
extern ApplyWorkshopRuleDefaultTypeInternal _ApplyWorkshopRule_default_instance_;
class Authority;
struct AuthorityDefaultTypeInternal;
extern AuthorityDefaultTypeInternal _Authority_default_instance_;
class Award;
struct AwardDefaultTypeInternal;
extern AwardDefaultTypeInternal _Award_default_instance_;
class Award_AffixsEntry_DoNotUse;
struct Award_AffixsEntry_DoNotUseDefaultTypeInternal;
extern Award_AffixsEntry_DoNotUseDefaultTypeInternal _Award_AffixsEntry_DoNotUse_default_instance_;
class BattleExtData;
struct BattleExtDataDefaultTypeInternal;
extern BattleExtDataDefaultTypeInternal _BattleExtData_default_instance_;
class BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse;
struct BattleExtData_PlayersBetCurrencyNumEntry_DoNotUseDefaultTypeInternal;
extern BattleExtData_PlayersBetCurrencyNumEntry_DoNotUseDefaultTypeInternal _BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse_default_instance_;
class BountySetting;
struct BountySettingDefaultTypeInternal;
extern BountySettingDefaultTypeInternal _BountySetting_default_instance_;
class BuffEffect;
struct BuffEffectDefaultTypeInternal;
extern BuffEffectDefaultTypeInternal _BuffEffect_default_instance_;
class Buffs;
struct BuffsDefaultTypeInternal;
extern BuffsDefaultTypeInternal _Buffs_default_instance_;
class CDNLanguageData;
struct CDNLanguageDataDefaultTypeInternal;
extern CDNLanguageDataDefaultTypeInternal _CDNLanguageData_default_instance_;
class CSDTActDaySign;
struct CSDTActDaySignDefaultTypeInternal;
extern CSDTActDaySignDefaultTypeInternal _CSDTActDaySign_default_instance_;
class CSDTActDaySignDetail;
struct CSDTActDaySignDetailDefaultTypeInternal;
extern CSDTActDaySignDetailDefaultTypeInternal _CSDTActDaySignDetail_default_instance_;
class CSDTActDaySign_SignDayEntry_DoNotUse;
struct CSDTActDaySign_SignDayEntry_DoNotUseDefaultTypeInternal;
extern CSDTActDaySign_SignDayEntry_DoNotUseDefaultTypeInternal _CSDTActDaySign_SignDayEntry_DoNotUse_default_instance_;
class CSDTActGroupBuy;
struct CSDTActGroupBuyDefaultTypeInternal;
extern CSDTActGroupBuyDefaultTypeInternal _CSDTActGroupBuy_default_instance_;
class CSDTActGroupBuyRwd;
struct CSDTActGroupBuyRwdDefaultTypeInternal;
extern CSDTActGroupBuyRwdDefaultTypeInternal _CSDTActGroupBuyRwd_default_instance_;
class CSDTActGroupBuyRwd_RewardsEntry_DoNotUse;
struct CSDTActGroupBuyRwd_RewardsEntry_DoNotUseDefaultTypeInternal;
extern CSDTActGroupBuyRwd_RewardsEntry_DoNotUseDefaultTypeInternal _CSDTActGroupBuyRwd_RewardsEntry_DoNotUse_default_instance_;
class CSDTActGroupBuy_ProcessEntry_DoNotUse;
struct CSDTActGroupBuy_ProcessEntry_DoNotUseDefaultTypeInternal;
extern CSDTActGroupBuy_ProcessEntry_DoNotUseDefaultTypeInternal _CSDTActGroupBuy_ProcessEntry_DoNotUse_default_instance_;
class CSDTActGroupBuy_RewardEntry_DoNotUse;
struct CSDTActGroupBuy_RewardEntry_DoNotUseDefaultTypeInternal;
extern CSDTActGroupBuy_RewardEntry_DoNotUseDefaultTypeInternal _CSDTActGroupBuy_RewardEntry_DoNotUse_default_instance_;
class CSDTActLuckMallData;
struct CSDTActLuckMallDataDefaultTypeInternal;
extern CSDTActLuckMallDataDefaultTypeInternal _CSDTActLuckMallData_default_instance_;
class CSDTActRecruitData;
struct CSDTActRecruitDataDefaultTypeInternal;
extern CSDTActRecruitDataDefaultTypeInternal _CSDTActRecruitData_default_instance_;
class CSDTActRecruitData_PlayersEntry_DoNotUse;
struct CSDTActRecruitData_PlayersEntry_DoNotUseDefaultTypeInternal;
extern CSDTActRecruitData_PlayersEntry_DoNotUseDefaultTypeInternal _CSDTActRecruitData_PlayersEntry_DoNotUse_default_instance_;
class CSDTActivity;
struct CSDTActivityDefaultTypeInternal;
extern CSDTActivityDefaultTypeInternal _CSDTActivity_default_instance_;
class CSDTActivityDetail;
struct CSDTActivityDetailDefaultTypeInternal;
extern CSDTActivityDetailDefaultTypeInternal _CSDTActivityDetail_default_instance_;
class CSDTActivityGroup;
struct CSDTActivityGroupDefaultTypeInternal;
extern CSDTActivityGroupDefaultTypeInternal _CSDTActivityGroup_default_instance_;
class CSDTActivityGroup_ActivitiesEntry_DoNotUse;
struct CSDTActivityGroup_ActivitiesEntry_DoNotUseDefaultTypeInternal;
extern CSDTActivityGroup_ActivitiesEntry_DoNotUseDefaultTypeInternal _CSDTActivityGroup_ActivitiesEntry_DoNotUse_default_instance_;
class CSDTActivityRecord;
struct CSDTActivityRecordDefaultTypeInternal;
extern CSDTActivityRecordDefaultTypeInternal _CSDTActivityRecord_default_instance_;
class CSDTActivityRecord_ProcessEntry_DoNotUse;
struct CSDTActivityRecord_ProcessEntry_DoNotUseDefaultTypeInternal;
extern CSDTActivityRecord_ProcessEntry_DoNotUseDefaultTypeInternal _CSDTActivityRecord_ProcessEntry_DoNotUse_default_instance_;
class CSDTActivityRecord_RewardEntry_DoNotUse;
struct CSDTActivityRecord_RewardEntry_DoNotUseDefaultTypeInternal;
extern CSDTActivityRecord_RewardEntry_DoNotUseDefaultTypeInternal _CSDTActivityRecord_RewardEntry_DoNotUse_default_instance_;
class CSDTActivityRecruit;
struct CSDTActivityRecruitDefaultTypeInternal;
extern CSDTActivityRecruitDefaultTypeInternal _CSDTActivityRecruit_default_instance_;
class CSDTActivityRecruit_PlayersEntry_DoNotUse;
struct CSDTActivityRecruit_PlayersEntry_DoNotUseDefaultTypeInternal;
extern CSDTActivityRecruit_PlayersEntry_DoNotUseDefaultTypeInternal _CSDTActivityRecruit_PlayersEntry_DoNotUse_default_instance_;
class CSDTActivity_GroupsEntry_DoNotUse;
struct CSDTActivity_GroupsEntry_DoNotUseDefaultTypeInternal;
extern CSDTActivity_GroupsEntry_DoNotUseDefaultTypeInternal _CSDTActivity_GroupsEntry_DoNotUse_default_instance_;
class CSDTAddictionInfo;
struct CSDTAddictionInfoDefaultTypeInternal;
extern CSDTAddictionInfoDefaultTypeInternal _CSDTAddictionInfo_default_instance_;
class CSDTAds;
struct CSDTAdsDefaultTypeInternal;
extern CSDTAdsDefaultTypeInternal _CSDTAds_default_instance_;
class CSDTAdsInfo;
struct CSDTAdsInfoDefaultTypeInternal;
extern CSDTAdsInfoDefaultTypeInternal _CSDTAdsInfo_default_instance_;
class CSDTBagItem;
struct CSDTBagItemDefaultTypeInternal;
extern CSDTBagItemDefaultTypeInternal _CSDTBagItem_default_instance_;
class CSDTBagPara;
struct CSDTBagParaDefaultTypeInternal;
extern CSDTBagParaDefaultTypeInternal _CSDTBagPara_default_instance_;
class CSDTBanner;
struct CSDTBannerDefaultTypeInternal;
extern CSDTBannerDefaultTypeInternal _CSDTBanner_default_instance_;
class CSDTBannerInfo;
struct CSDTBannerInfoDefaultTypeInternal;
extern CSDTBannerInfoDefaultTypeInternal _CSDTBannerInfo_default_instance_;
class CSDTBattleGroup;
struct CSDTBattleGroupDefaultTypeInternal;
extern CSDTBattleGroupDefaultTypeInternal _CSDTBattleGroup_default_instance_;
class CSDTBattleGroup_GameIDsEntry_DoNotUse;
struct CSDTBattleGroup_GameIDsEntry_DoNotUseDefaultTypeInternal;
extern CSDTBattleGroup_GameIDsEntry_DoNotUseDefaultTypeInternal _CSDTBattleGroup_GameIDsEntry_DoNotUse_default_instance_;
class CSDTBattleGroup_PlayersEntry_DoNotUse;
struct CSDTBattleGroup_PlayersEntry_DoNotUseDefaultTypeInternal;
extern CSDTBattleGroup_PlayersEntry_DoNotUseDefaultTypeInternal _CSDTBattleGroup_PlayersEntry_DoNotUse_default_instance_;
class CSDTBetData;
struct CSDTBetDataDefaultTypeInternal;
extern CSDTBetDataDefaultTypeInternal _CSDTBetData_default_instance_;
class CSDTBetData_BetFromPlayersEntry_DoNotUse;
struct CSDTBetData_BetFromPlayersEntry_DoNotUseDefaultTypeInternal;
extern CSDTBetData_BetFromPlayersEntry_DoNotUseDefaultTypeInternal _CSDTBetData_BetFromPlayersEntry_DoNotUse_default_instance_;
class CSDTBriefPunishment;
struct CSDTBriefPunishmentDefaultTypeInternal;
extern CSDTBriefPunishmentDefaultTypeInternal _CSDTBriefPunishment_default_instance_;
class CSDTBuffAct;
struct CSDTBuffActDefaultTypeInternal;
extern CSDTBuffActDefaultTypeInternal _CSDTBuffAct_default_instance_;
class CSDTCampData;
struct CSDTCampDataDefaultTypeInternal;
extern CSDTCampDataDefaultTypeInternal _CSDTCampData_default_instance_;
class CSDTChat;
struct CSDTChatDefaultTypeInternal;
extern CSDTChatDefaultTypeInternal _CSDTChat_default_instance_;
class CSDTChessPlayer;
struct CSDTChessPlayerDefaultTypeInternal;
extern CSDTChessPlayerDefaultTypeInternal _CSDTChessPlayer_default_instance_;
class CSDTChessPlayerEquip;
struct CSDTChessPlayerEquipDefaultTypeInternal;
extern CSDTChessPlayerEquipDefaultTypeInternal _CSDTChessPlayerEquip_default_instance_;
class CSDTChessPlayer_EquipEntry_DoNotUse;
struct CSDTChessPlayer_EquipEntry_DoNotUseDefaultTypeInternal;
extern CSDTChessPlayer_EquipEntry_DoNotUseDefaultTypeInternal _CSDTChessPlayer_EquipEntry_DoNotUse_default_instance_;
class CSDTChessPlayer_EquipsEntry_DoNotUse;
struct CSDTChessPlayer_EquipsEntry_DoNotUseDefaultTypeInternal;
extern CSDTChessPlayer_EquipsEntry_DoNotUseDefaultTypeInternal _CSDTChessPlayer_EquipsEntry_DoNotUse_default_instance_;
class CSDTChessPlrInfo;
struct CSDTChessPlrInfoDefaultTypeInternal;
extern CSDTChessPlrInfoDefaultTypeInternal _CSDTChessPlrInfo_default_instance_;
class CSDTChessPlrInfo_EquipsEntry_DoNotUse;
struct CSDTChessPlrInfo_EquipsEntry_DoNotUseDefaultTypeInternal;
extern CSDTChessPlrInfo_EquipsEntry_DoNotUseDefaultTypeInternal _CSDTChessPlrInfo_EquipsEntry_DoNotUse_default_instance_;
class CSDTCommonRandList;
struct CSDTCommonRandListDefaultTypeInternal;
extern CSDTCommonRandListDefaultTypeInternal _CSDTCommonRandList_default_instance_;
class CSDTCurShowItem;
struct CSDTCurShowItemDefaultTypeInternal;
extern CSDTCurShowItemDefaultTypeInternal _CSDTCurShowItem_default_instance_;
class CSDTEnrollEnd;
struct CSDTEnrollEndDefaultTypeInternal;
extern CSDTEnrollEndDefaultTypeInternal _CSDTEnrollEnd_default_instance_;
class CSDTFetters;
struct CSDTFettersDefaultTypeInternal;
extern CSDTFettersDefaultTypeInternal _CSDTFetters_default_instance_;
class CSDTGDCommonBin;
struct CSDTGDCommonBinDefaultTypeInternal;
extern CSDTGDCommonBinDefaultTypeInternal _CSDTGDCommonBin_default_instance_;
class CSDTGoods;
struct CSDTGoodsDefaultTypeInternal;
extern CSDTGoodsDefaultTypeInternal _CSDTGoods_default_instance_;
class CSDTGoodsInfo;
struct CSDTGoodsInfoDefaultTypeInternal;
extern CSDTGoodsInfoDefaultTypeInternal _CSDTGoodsInfo_default_instance_;
class CSDTGuide;
struct CSDTGuideDefaultTypeInternal;
extern CSDTGuideDefaultTypeInternal _CSDTGuide_default_instance_;
class CSDTItem;
struct CSDTItemDefaultTypeInternal;
extern CSDTItemDefaultTypeInternal _CSDTItem_default_instance_;
class CSDTItemID;
struct CSDTItemIDDefaultTypeInternal;
extern CSDTItemIDDefaultTypeInternal _CSDTItemID_default_instance_;
class CSDTItemMedal;
struct CSDTItemMedalDefaultTypeInternal;
extern CSDTItemMedalDefaultTypeInternal _CSDTItemMedal_default_instance_;
class CSDTItem_AffixsEntry_DoNotUse;
struct CSDTItem_AffixsEntry_DoNotUseDefaultTypeInternal;
extern CSDTItem_AffixsEntry_DoNotUseDefaultTypeInternal _CSDTItem_AffixsEntry_DoNotUse_default_instance_;
class CSDTMail;
struct CSDTMailDefaultTypeInternal;
extern CSDTMailDefaultTypeInternal _CSDTMail_default_instance_;
class CSDTMail_DictEntry_DoNotUse;
struct CSDTMail_DictEntry_DoNotUseDefaultTypeInternal;
extern CSDTMail_DictEntry_DoNotUseDefaultTypeInternal _CSDTMail_DictEntry_DoNotUse_default_instance_;
class CSDTMallBuyCount;
struct CSDTMallBuyCountDefaultTypeInternal;
extern CSDTMallBuyCountDefaultTypeInternal _CSDTMallBuyCount_default_instance_;
class CSDTMallBuyCountData;
struct CSDTMallBuyCountDataDefaultTypeInternal;
extern CSDTMallBuyCountDataDefaultTypeInternal _CSDTMallBuyCountData_default_instance_;
class CSDTMallGoods;
struct CSDTMallGoodsDefaultTypeInternal;
extern CSDTMallGoodsDefaultTypeInternal _CSDTMallGoods_default_instance_;
class CSDTMallGoodsData;
struct CSDTMallGoodsDataDefaultTypeInternal;
extern CSDTMallGoodsDataDefaultTypeInternal _CSDTMallGoodsData_default_instance_;
class CSDTMarquee;
struct CSDTMarqueeDefaultTypeInternal;
extern CSDTMarqueeDefaultTypeInternal _CSDTMarquee_default_instance_;
class CSDTMarqueeItem;
struct CSDTMarqueeItemDefaultTypeInternal;
extern CSDTMarqueeItemDefaultTypeInternal _CSDTMarqueeItem_default_instance_;
class CSDTMelee;
struct CSDTMeleeDefaultTypeInternal;
extern CSDTMeleeDefaultTypeInternal _CSDTMelee_default_instance_;
class CSDTMentorInfo;
struct CSDTMentorInfoDefaultTypeInternal;
extern CSDTMentorInfoDefaultTypeInternal _CSDTMentorInfo_default_instance_;
class CSDTMentorRecommendPlayer;
struct CSDTMentorRecommendPlayerDefaultTypeInternal;
extern CSDTMentorRecommendPlayerDefaultTypeInternal _CSDTMentorRecommendPlayer_default_instance_;
class CSDTNewTournament;
struct CSDTNewTournamentDefaultTypeInternal;
extern CSDTNewTournamentDefaultTypeInternal _CSDTNewTournament_default_instance_;
class CSDTNewTournament_ClassesEntry_DoNotUse;
struct CSDTNewTournament_ClassesEntry_DoNotUseDefaultTypeInternal;
extern CSDTNewTournament_ClassesEntry_DoNotUseDefaultTypeInternal _CSDTNewTournament_ClassesEntry_DoNotUse_default_instance_;
class CSDTNotice;
struct CSDTNoticeDefaultTypeInternal;
extern CSDTNoticeDefaultTypeInternal _CSDTNotice_default_instance_;
class CSDTNoticeInfo;
struct CSDTNoticeInfoDefaultTypeInternal;
extern CSDTNoticeInfoDefaultTypeInternal _CSDTNoticeInfo_default_instance_;
class CSDTNumRankItem;
struct CSDTNumRankItemDefaultTypeInternal;
extern CSDTNumRankItemDefaultTypeInternal _CSDTNumRankItem_default_instance_;
class CSDTPassportCard;
struct CSDTPassportCardDefaultTypeInternal;
extern CSDTPassportCardDefaultTypeInternal _CSDTPassportCard_default_instance_;
class CSDTPassportHistory;
struct CSDTPassportHistoryDefaultTypeInternal;
extern CSDTPassportHistoryDefaultTypeInternal _CSDTPassportHistory_default_instance_;
class CSDTPlayer;
struct CSDTPlayerDefaultTypeInternal;
extern CSDTPlayerDefaultTypeInternal _CSDTPlayer_default_instance_;
class CSDTPlayerBaseInfo;
struct CSDTPlayerBaseInfoDefaultTypeInternal;
extern CSDTPlayerBaseInfoDefaultTypeInternal _CSDTPlayerBaseInfo_default_instance_;
class CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse;
struct CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUseDefaultTypeInternal;
extern CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse_default_instance_;
class CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse;
struct CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUseDefaultTypeInternal;
extern CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse_default_instance_;
class CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse;
struct CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUseDefaultTypeInternal;
extern CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse_default_instance_;
class CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse;
struct CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUseDefaultTypeInternal;
extern CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse_default_instance_;
class CSDTPlayerDetailInfo;
struct CSDTPlayerDetailInfoDefaultTypeInternal;
extern CSDTPlayerDetailInfoDefaultTypeInternal _CSDTPlayerDetailInfo_default_instance_;
class CSDTPlayerFinish;
struct CSDTPlayerFinishDefaultTypeInternal;
extern CSDTPlayerFinishDefaultTypeInternal _CSDTPlayerFinish_default_instance_;
class CSDTPlayerItems;
struct CSDTPlayerItemsDefaultTypeInternal;
extern CSDTPlayerItemsDefaultTypeInternal _CSDTPlayerItems_default_instance_;
class CSDTPlayerPvpData;
struct CSDTPlayerPvpDataDefaultTypeInternal;
extern CSDTPlayerPvpDataDefaultTypeInternal _CSDTPlayerPvpData_default_instance_;
class CSDTPlayerPvpInfo;
struct CSDTPlayerPvpInfoDefaultTypeInternal;
extern CSDTPlayerPvpInfoDefaultTypeInternal _CSDTPlayerPvpInfo_default_instance_;
class CSDTPlayerRankInfo;
struct CSDTPlayerRankInfoDefaultTypeInternal;
extern CSDTPlayerRankInfoDefaultTypeInternal _CSDTPlayerRankInfo_default_instance_;
class CSDTPlayerSimpleInfo;
struct CSDTPlayerSimpleInfoDefaultTypeInternal;
extern CSDTPlayerSimpleInfoDefaultTypeInternal _CSDTPlayerSimpleInfo_default_instance_;
class CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse;
struct CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUseDefaultTypeInternal;
extern CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUseDefaultTypeInternal _CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse_default_instance_;
class CSDTPlayerStatusInfo;
struct CSDTPlayerStatusInfoDefaultTypeInternal;
extern CSDTPlayerStatusInfoDefaultTypeInternal _CSDTPlayerStatusInfo_default_instance_;
class CSDTPlayerTournamentInfo;
struct CSDTPlayerTournamentInfoDefaultTypeInternal;
extern CSDTPlayerTournamentInfoDefaultTypeInternal _CSDTPlayerTournamentInfo_default_instance_;
class CSDTPunishment;
struct CSDTPunishmentDefaultTypeInternal;
extern CSDTPunishmentDefaultTypeInternal _CSDTPunishment_default_instance_;
class CSDTPuzzle;
struct CSDTPuzzleDefaultTypeInternal;
extern CSDTPuzzleDefaultTypeInternal _CSDTPuzzle_default_instance_;
class CSDTPuzzle_ItemMapEntry_DoNotUse;
struct CSDTPuzzle_ItemMapEntry_DoNotUseDefaultTypeInternal;
extern CSDTPuzzle_ItemMapEntry_DoNotUseDefaultTypeInternal _CSDTPuzzle_ItemMapEntry_DoNotUse_default_instance_;
class CSDTPvpCampResult;
struct CSDTPvpCampResultDefaultTypeInternal;
extern CSDTPvpCampResultDefaultTypeInternal _CSDTPvpCampResult_default_instance_;
class CSDTPvpHistory;
struct CSDTPvpHistoryDefaultTypeInternal;
extern CSDTPvpHistoryDefaultTypeInternal _CSDTPvpHistory_default_instance_;
class CSDTPvpMvp;
struct CSDTPvpMvpDefaultTypeInternal;
extern CSDTPvpMvpDefaultTypeInternal _CSDTPvpMvp_default_instance_;
class CSDTPvpPlayerStat;
struct CSDTPvpPlayerStatDefaultTypeInternal;
extern CSDTPvpPlayerStatDefaultTypeInternal _CSDTPvpPlayerStat_default_instance_;
class CSDTPvpPlayerStat_ChessProEntry_DoNotUse;
struct CSDTPvpPlayerStat_ChessProEntry_DoNotUseDefaultTypeInternal;
extern CSDTPvpPlayerStat_ChessProEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_ChessProEntry_DoNotUse_default_instance_;
class CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse;
struct CSDTPvpPlayerStat_ChessRaceEntry_DoNotUseDefaultTypeInternal;
extern CSDTPvpPlayerStat_ChessRaceEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse_default_instance_;
class CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse;
struct CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUseDefaultTypeInternal;
extern CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse_default_instance_;
class CSDTPvpPlayerStat_PveItemsEntry_DoNotUse;
struct CSDTPvpPlayerStat_PveItemsEntry_DoNotUseDefaultTypeInternal;
extern CSDTPvpPlayerStat_PveItemsEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_PveItemsEntry_DoNotUse_default_instance_;
class CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse;
struct CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUseDefaultTypeInternal;
extern CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse_default_instance_;
class CSDTPvpStat;
struct CSDTPvpStatDefaultTypeInternal;
extern CSDTPvpStatDefaultTypeInternal _CSDTPvpStat_default_instance_;
class CSDTPvpStat_PlayerRoundEntry_DoNotUse;
struct CSDTPvpStat_PlayerRoundEntry_DoNotUseDefaultTypeInternal;
extern CSDTPvpStat_PlayerRoundEntry_DoNotUseDefaultTypeInternal _CSDTPvpStat_PlayerRoundEntry_DoNotUse_default_instance_;
class CSDTPvpWinData;
struct CSDTPvpWinDataDefaultTypeInternal;
extern CSDTPvpWinDataDefaultTypeInternal _CSDTPvpWinData_default_instance_;
class CSDTRankSeasonData;
struct CSDTRankSeasonDataDefaultTypeInternal;
extern CSDTRankSeasonDataDefaultTypeInternal _CSDTRankSeasonData_default_instance_;
class CSDTRankSeasonInfo;
struct CSDTRankSeasonInfoDefaultTypeInternal;
extern CSDTRankSeasonInfoDefaultTypeInternal _CSDTRankSeasonInfo_default_instance_;
class CSDTRankSeasonInfo_ModesEntry_DoNotUse;
struct CSDTRankSeasonInfo_ModesEntry_DoNotUseDefaultTypeInternal;
extern CSDTRankSeasonInfo_ModesEntry_DoNotUseDefaultTypeInternal _CSDTRankSeasonInfo_ModesEntry_DoNotUse_default_instance_;
class CSDTRecommendPlayer;
struct CSDTRecommendPlayerDefaultTypeInternal;
extern CSDTRecommendPlayerDefaultTypeInternal _CSDTRecommendPlayer_default_instance_;
class CSDTRecommendPvpInfo;
struct CSDTRecommendPvpInfoDefaultTypeInternal;
extern CSDTRecommendPvpInfoDefaultTypeInternal _CSDTRecommendPvpInfo_default_instance_;
class CSDTRecruitData;
struct CSDTRecruitDataDefaultTypeInternal;
extern CSDTRecruitDataDefaultTypeInternal _CSDTRecruitData_default_instance_;
class CSDTRecruitData_IsRecruitedEntry_DoNotUse;
struct CSDTRecruitData_IsRecruitedEntry_DoNotUseDefaultTypeInternal;
extern CSDTRecruitData_IsRecruitedEntry_DoNotUseDefaultTypeInternal _CSDTRecruitData_IsRecruitedEntry_DoNotUse_default_instance_;
class CSDTRecruitPlayer;
struct CSDTRecruitPlayerDefaultTypeInternal;
extern CSDTRecruitPlayerDefaultTypeInternal _CSDTRecruitPlayer_default_instance_;
class CSDTRedPktData;
struct CSDTRedPktDataDefaultTypeInternal;
extern CSDTRedPktDataDefaultTypeInternal _CSDTRedPktData_default_instance_;
class CSDTRedPktInfo;
struct CSDTRedPktInfoDefaultTypeInternal;
extern CSDTRedPktInfoDefaultTypeInternal _CSDTRedPktInfo_default_instance_;
class CSDTRoleStat;
struct CSDTRoleStatDefaultTypeInternal;
extern CSDTRoleStatDefaultTypeInternal _CSDTRoleStat_default_instance_;
class CSDTRound;
struct CSDTRoundDefaultTypeInternal;
extern CSDTRoundDefaultTypeInternal _CSDTRound_default_instance_;
class CSDTRoundEnd;
struct CSDTRoundEndDefaultTypeInternal;
extern CSDTRoundEndDefaultTypeInternal _CSDTRoundEnd_default_instance_;
class CSDTRoundItem;
struct CSDTRoundItemDefaultTypeInternal;
extern CSDTRoundItemDefaultTypeInternal _CSDTRoundItem_default_instance_;
class CSDTRoundItem_BuyChessListEntry_DoNotUse;
struct CSDTRoundItem_BuyChessListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_BuyChessListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_BuyChessListEntry_DoNotUse_default_instance_;
class CSDTRoundItem_DropEquipEntry_DoNotUse;
struct CSDTRoundItem_DropEquipEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_DropEquipEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_DropEquipEntry_DoNotUse_default_instance_;
class CSDTRoundItem_EnemyBattleChessEntry_DoNotUse;
struct CSDTRoundItem_EnemyBattleChessEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_EnemyBattleChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EnemyBattleChessEntry_DoNotUse_default_instance_;
class CSDTRoundItem_EnemyLeftChessEntry_DoNotUse;
struct CSDTRoundItem_EnemyLeftChessEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_EnemyLeftChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EnemyLeftChessEntry_DoNotUse_default_instance_;
class CSDTRoundItem_EquipComposeListEntry_DoNotUse;
struct CSDTRoundItem_EquipComposeListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_EquipComposeListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EquipComposeListEntry_DoNotUse_default_instance_;
class CSDTRoundItem_EquipComposeStructListEntry_DoNotUse;
struct CSDTRoundItem_EquipComposeStructListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_EquipComposeStructListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EquipComposeStructListEntry_DoNotUse_default_instance_;
class CSDTRoundItem_MoneyPayListEntry_DoNotUse;
struct CSDTRoundItem_MoneyPayListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_MoneyPayListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_MoneyPayListEntry_DoNotUse_default_instance_;
class CSDTRoundItem_MoneySourceListEntry_DoNotUse;
struct CSDTRoundItem_MoneySourceListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_MoneySourceListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_MoneySourceListEntry_DoNotUse_default_instance_;
class CSDTRoundItem_SelfBattleChessEntry_DoNotUse;
struct CSDTRoundItem_SelfBattleChessEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_SelfBattleChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_SelfBattleChessEntry_DoNotUse_default_instance_;
class CSDTRoundItem_SelfLeftChessEntry_DoNotUse;
struct CSDTRoundItem_SelfLeftChessEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_SelfLeftChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_SelfLeftChessEntry_DoNotUse_default_instance_;
class CSDTRoundItem_SellChessListEntry_DoNotUse;
struct CSDTRoundItem_SellChessListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_SellChessListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_SellChessListEntry_DoNotUse_default_instance_;
class CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse;
struct CSDTRoundItem_UpgradeStarChessListEntry_DoNotUseDefaultTypeInternal;
extern CSDTRoundItem_UpgradeStarChessListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse_default_instance_;
class CSDTSeason;
struct CSDTSeasonDefaultTypeInternal;
extern CSDTSeasonDefaultTypeInternal _CSDTSeason_default_instance_;
class CSDTSignData;
struct CSDTSignDataDefaultTypeInternal;
extern CSDTSignDataDefaultTypeInternal _CSDTSignData_default_instance_;
class CSDTSlotInfo;
struct CSDTSlotInfoDefaultTypeInternal;
extern CSDTSlotInfoDefaultTypeInternal _CSDTSlotInfo_default_instance_;
class CSDTStat;
struct CSDTStatDefaultTypeInternal;
extern CSDTStatDefaultTypeInternal _CSDTStat_default_instance_;
class CSDTStat_SeasonInfoEntry_DoNotUse;
struct CSDTStat_SeasonInfoEntry_DoNotUseDefaultTypeInternal;
extern CSDTStat_SeasonInfoEntry_DoNotUseDefaultTypeInternal _CSDTStat_SeasonInfoEntry_DoNotUse_default_instance_;
class CSDTTaskItem;
struct CSDTTaskItemDefaultTypeInternal;
extern CSDTTaskItemDefaultTypeInternal _CSDTTaskItem_default_instance_;
class CSDTTasks;
struct CSDTTasksDefaultTypeInternal;
extern CSDTTasksDefaultTypeInternal _CSDTTasks_default_instance_;
class CSDTTeamSlotPlayer;
struct CSDTTeamSlotPlayerDefaultTypeInternal;
extern CSDTTeamSlotPlayerDefaultTypeInternal _CSDTTeamSlotPlayer_default_instance_;
class CSDTTeamVoicePlayer;
struct CSDTTeamVoicePlayerDefaultTypeInternal;
extern CSDTTeamVoicePlayerDefaultTypeInternal _CSDTTeamVoicePlayer_default_instance_;
class CSDTTelBook;
struct CSDTTelBookDefaultTypeInternal;
extern CSDTTelBookDefaultTypeInternal _CSDTTelBook_default_instance_;
class CSDTThirdPvpInfo;
struct CSDTThirdPvpInfoDefaultTypeInternal;
extern CSDTThirdPvpInfoDefaultTypeInternal _CSDTThirdPvpInfo_default_instance_;
class CSDTTournament;
struct CSDTTournamentDefaultTypeInternal;
extern CSDTTournamentDefaultTypeInternal _CSDTTournament_default_instance_;
class CSDTTournamentClass;
struct CSDTTournamentClassDefaultTypeInternal;
extern CSDTTournamentClassDefaultTypeInternal _CSDTTournamentClass_default_instance_;
class CSDTTournamentClass_GroupsEntry_DoNotUse;
struct CSDTTournamentClass_GroupsEntry_DoNotUseDefaultTypeInternal;
extern CSDTTournamentClass_GroupsEntry_DoNotUseDefaultTypeInternal _CSDTTournamentClass_GroupsEntry_DoNotUse_default_instance_;
class CSDTTournament_PointsEntry_DoNotUse;
struct CSDTTournament_PointsEntry_DoNotUseDefaultTypeInternal;
extern CSDTTournament_PointsEntry_DoNotUseDefaultTypeInternal _CSDTTournament_PointsEntry_DoNotUse_default_instance_;
class CSDTTournament_RankInfoEntry_DoNotUse;
struct CSDTTournament_RankInfoEntry_DoNotUseDefaultTypeInternal;
extern CSDTTournament_RankInfoEntry_DoNotUseDefaultTypeInternal _CSDTTournament_RankInfoEntry_DoNotUse_default_instance_;
class CSDTTournament_RoundPointsEntry_DoNotUse;
struct CSDTTournament_RoundPointsEntry_DoNotUseDefaultTypeInternal;
extern CSDTTournament_RoundPointsEntry_DoNotUseDefaultTypeInternal _CSDTTournament_RoundPointsEntry_DoNotUse_default_instance_;
class CSDTVisitedMap;
struct CSDTVisitedMapDefaultTypeInternal;
extern CSDTVisitedMapDefaultTypeInternal _CSDTVisitedMap_default_instance_;
class CSDTWorldChat;
struct CSDTWorldChatDefaultTypeInternal;
extern CSDTWorldChatDefaultTypeInternal _CSDTWorldChat_default_instance_;
class CSDTWxRedPktItem;
struct CSDTWxRedPktItemDefaultTypeInternal;
extern CSDTWxRedPktItemDefaultTypeInternal _CSDTWxRedPktItem_default_instance_;
class CSDTWxRedPktProfile;
struct CSDTWxRedPktProfileDefaultTypeInternal;
extern CSDTWxRedPktProfileDefaultTypeInternal _CSDTWxRedPktProfile_default_instance_;
class CSDTWxVVipRankItem;
struct CSDTWxVVipRankItemDefaultTypeInternal;
extern CSDTWxVVipRankItemDefaultTypeInternal _CSDTWxVVipRankItem_default_instance_;
class CSNtfPvpChat;
struct CSNtfPvpChatDefaultTypeInternal;
extern CSNtfPvpChatDefaultTypeInternal _CSNtfPvpChat_default_instance_;
class CSNtfPvpChat_ShowItemsEntry_DoNotUse;
struct CSNtfPvpChat_ShowItemsEntry_DoNotUseDefaultTypeInternal;
extern CSNtfPvpChat_ShowItemsEntry_DoNotUseDefaultTypeInternal _CSNtfPvpChat_ShowItemsEntry_DoNotUse_default_instance_;
class CSReqLogin;
struct CSReqLoginDefaultTypeInternal;
extern CSReqLoginDefaultTypeInternal _CSReqLogin_default_instance_;
class CSReqLogin_AuthSDKCodeEntry_DoNotUse;
struct CSReqLogin_AuthSDKCodeEntry_DoNotUseDefaultTypeInternal;
extern CSReqLogin_AuthSDKCodeEntry_DoNotUseDefaultTypeInternal _CSReqLogin_AuthSDKCodeEntry_DoNotUse_default_instance_;
class CardGroupChess;
struct CardGroupChessDefaultTypeInternal;
extern CardGroupChessDefaultTypeInternal _CardGroupChess_default_instance_;
class CardGroupData;
struct CardGroupDataDefaultTypeInternal;
extern CardGroupDataDefaultTypeInternal _CardGroupData_default_instance_;
class ChampionInfo;
struct ChampionInfoDefaultTypeInternal;
extern ChampionInfoDefaultTypeInternal _ChampionInfo_default_instance_;
class ChampionInfoList;
struct ChampionInfoListDefaultTypeInternal;
extern ChampionInfoListDefaultTypeInternal _ChampionInfoList_default_instance_;
class ChannelFunctionData;
struct ChannelFunctionDataDefaultTypeInternal;
extern ChannelFunctionDataDefaultTypeInternal _ChannelFunctionData_default_instance_;
class ChessDamageStat;
struct ChessDamageStatDefaultTypeInternal;
extern ChessDamageStatDefaultTypeInternal _ChessDamageStat_default_instance_;
class ChessIds;
struct ChessIdsDefaultTypeInternal;
extern ChessIdsDefaultTypeInternal _ChessIds_default_instance_;
class ChessSkinSlotData;
struct ChessSkinSlotDataDefaultTypeInternal;
extern ChessSkinSlotDataDefaultTypeInternal _ChessSkinSlotData_default_instance_;
class ChessSkinSlotData_SlotsEntry_DoNotUse;
struct ChessSkinSlotData_SlotsEntry_DoNotUseDefaultTypeInternal;
extern ChessSkinSlotData_SlotsEntry_DoNotUseDefaultTypeInternal _ChessSkinSlotData_SlotsEntry_DoNotUse_default_instance_;
class ChestRecord;
struct ChestRecordDefaultTypeInternal;
extern ChestRecordDefaultTypeInternal _ChestRecord_default_instance_;
class CommonKVString;
struct CommonKVStringDefaultTypeInternal;
extern CommonKVStringDefaultTypeInternal _CommonKVString_default_instance_;
class Cond;
struct CondDefaultTypeInternal;
extern CondDefaultTypeInternal _Cond_default_instance_;
class Consume;
struct ConsumeDefaultTypeInternal;
extern ConsumeDefaultTypeInternal _Consume_default_instance_;
class ConsumeIncrease;
struct ConsumeIncreaseDefaultTypeInternal;
extern ConsumeIncreaseDefaultTypeInternal _ConsumeIncrease_default_instance_;
class Contest;
struct ContestDefaultTypeInternal;
extern ContestDefaultTypeInternal _Contest_default_instance_;
class CreditCfgItem;
struct CreditCfgItemDefaultTypeInternal;
extern CreditCfgItemDefaultTypeInternal _CreditCfgItem_default_instance_;
class Effect;
struct EffectDefaultTypeInternal;
extern EffectDefaultTypeInternal _Effect_default_instance_;
class Equip;
struct EquipDefaultTypeInternal;
extern EquipDefaultTypeInternal _Equip_default_instance_;
class ExchangeRecord;
struct ExchangeRecordDefaultTypeInternal;
extern ExchangeRecordDefaultTypeInternal _ExchangeRecord_default_instance_;
class ExtItem;
struct ExtItemDefaultTypeInternal;
extern ExtItemDefaultTypeInternal _ExtItem_default_instance_;
class GMLanguageData;
struct GMLanguageDataDefaultTypeInternal;
extern GMLanguageDataDefaultTypeInternal _GMLanguageData_default_instance_;
class GMLanguageData_LanguagesEntry_DoNotUse;
struct GMLanguageData_LanguagesEntry_DoNotUseDefaultTypeInternal;
extern GMLanguageData_LanguagesEntry_DoNotUseDefaultTypeInternal _GMLanguageData_LanguagesEntry_DoNotUse_default_instance_;
class GMLanguageInfo;
struct GMLanguageInfoDefaultTypeInternal;
extern GMLanguageInfoDefaultTypeInternal _GMLanguageInfo_default_instance_;
class GetNumRank;
struct GetNumRankDefaultTypeInternal;
extern GetNumRankDefaultTypeInternal _GetNumRank_default_instance_;
class GmBan;
struct GmBanDefaultTypeInternal;
extern GmBanDefaultTypeInternal _GmBan_default_instance_;
class GuildApplicant;
struct GuildApplicantDefaultTypeInternal;
extern GuildApplicantDefaultTypeInternal _GuildApplicant_default_instance_;
class GuildApplyInfo;
struct GuildApplyInfoDefaultTypeInternal;
extern GuildApplyInfoDefaultTypeInternal _GuildApplyInfo_default_instance_;
class GuildAttr;
struct GuildAttrDefaultTypeInternal;
extern GuildAttrDefaultTypeInternal _GuildAttr_default_instance_;
class GuildBaseInfo;
struct GuildBaseInfoDefaultTypeInternal;
extern GuildBaseInfoDefaultTypeInternal _GuildBaseInfo_default_instance_;
class GuildChatInfo;
struct GuildChatInfoDefaultTypeInternal;
extern GuildChatInfoDefaultTypeInternal _GuildChatInfo_default_instance_;
class GuildExtraInfo;
struct GuildExtraInfoDefaultTypeInternal;
extern GuildExtraInfoDefaultTypeInternal _GuildExtraInfo_default_instance_;
class GuildLog;
struct GuildLogDefaultTypeInternal;
extern GuildLogDefaultTypeInternal _GuildLog_default_instance_;
class GuildLog_ParaEntry_DoNotUse;
struct GuildLog_ParaEntry_DoNotUseDefaultTypeInternal;
extern GuildLog_ParaEntry_DoNotUseDefaultTypeInternal _GuildLog_ParaEntry_DoNotUse_default_instance_;
class GuildMember;
struct GuildMemberDefaultTypeInternal;
extern GuildMemberDefaultTypeInternal _GuildMember_default_instance_;
class GuildPlayerRole;
struct GuildPlayerRoleDefaultTypeInternal;
extern GuildPlayerRoleDefaultTypeInternal _GuildPlayerRole_default_instance_;
class HistoryMaxCupMmr;
struct HistoryMaxCupMmrDefaultTypeInternal;
extern HistoryMaxCupMmrDefaultTypeInternal _HistoryMaxCupMmr_default_instance_;
class ItemAffix;
struct ItemAffixDefaultTypeInternal;
extern ItemAffixDefaultTypeInternal _ItemAffix_default_instance_;
class KernelCardGroup;
struct KernelCardGroupDefaultTypeInternal;
extern KernelCardGroupDefaultTypeInternal _KernelCardGroup_default_instance_;
class KernelChessInfo;
struct KernelChessInfoDefaultTypeInternal;
extern KernelChessInfoDefaultTypeInternal _KernelChessInfo_default_instance_;
class KernelItem;
struct KernelItemDefaultTypeInternal;
extern KernelItemDefaultTypeInternal _KernelItem_default_instance_;
class KrAddictionInfo;
struct KrAddictionInfoDefaultTypeInternal;
extern KrAddictionInfoDefaultTypeInternal _KrAddictionInfo_default_instance_;
class LanguageData;
struct LanguageDataDefaultTypeInternal;
extern LanguageDataDefaultTypeInternal _LanguageData_default_instance_;
class Loc;
struct LocDefaultTypeInternal;
extern LocDefaultTypeInternal _Loc_default_instance_;
class MailExtData;
struct MailExtDataDefaultTypeInternal;
extern MailExtDataDefaultTypeInternal _MailExtData_default_instance_;
class MallGoodsData;
struct MallGoodsDataDefaultTypeInternal;
extern MallGoodsDataDefaultTypeInternal _MallGoodsData_default_instance_;
class MallNoticeData;
struct MallNoticeDataDefaultTypeInternal;
extern MallNoticeDataDefaultTypeInternal _MallNoticeData_default_instance_;
class MallTabData;
struct MallTabDataDefaultTypeInternal;
extern MallTabDataDefaultTypeInternal _MallTabData_default_instance_;
class MatchTeamData;
struct MatchTeamDataDefaultTypeInternal;
extern MatchTeamDataDefaultTypeInternal _MatchTeamData_default_instance_;
class MentorInfo;
struct MentorInfoDefaultTypeInternal;
extern MentorInfoDefaultTypeInternal _MentorInfo_default_instance_;
class MentorInfo_TasksEntry_DoNotUse;
struct MentorInfo_TasksEntry_DoNotUseDefaultTypeInternal;
extern MentorInfo_TasksEntry_DoNotUseDefaultTypeInternal _MentorInfo_TasksEntry_DoNotUse_default_instance_;
class MentorInviteMsg;
struct MentorInviteMsgDefaultTypeInternal;
extern MentorInviteMsgDefaultTypeInternal _MentorInviteMsg_default_instance_;
class MultiPlayer;
struct MultiPlayerDefaultTypeInternal;
extern MultiPlayerDefaultTypeInternal _MultiPlayer_default_instance_;
class OBPassThroughData;
struct OBPassThroughDataDefaultTypeInternal;
extern OBPassThroughDataDefaultTypeInternal _OBPassThroughData_default_instance_;
class OssPlayerData;
struct OssPlayerDataDefaultTypeInternal;
extern OssPlayerDataDefaultTypeInternal _OssPlayerData_default_instance_;
class PFDTTaskDetail;
struct PFDTTaskDetailDefaultTypeInternal;
extern PFDTTaskDetailDefaultTypeInternal _PFDTTaskDetail_default_instance_;
class PlayLimit;
struct PlayLimitDefaultTypeInternal;
extern PlayLimitDefaultTypeInternal _PlayLimit_default_instance_;
class PlayerConfirmInfo;
struct PlayerConfirmInfoDefaultTypeInternal;
extern PlayerConfirmInfoDefaultTypeInternal _PlayerConfirmInfo_default_instance_;
class PlayerExtMap;
struct PlayerExtMapDefaultTypeInternal;
extern PlayerExtMapDefaultTypeInternal _PlayerExtMap_default_instance_;
class PlayerExtMap_AssistantMapEntry_DoNotUse;
struct PlayerExtMap_AssistantMapEntry_DoNotUseDefaultTypeInternal;
extern PlayerExtMap_AssistantMapEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_AssistantMapEntry_DoNotUse_default_instance_;
class PlayerExtMap_BattleTimeMapEntry_DoNotUse;
struct PlayerExtMap_BattleTimeMapEntry_DoNotUseDefaultTypeInternal;
extern PlayerExtMap_BattleTimeMapEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_BattleTimeMapEntry_DoNotUse_default_instance_;
class PlayerExtMap_MsRelationEntry_DoNotUse;
struct PlayerExtMap_MsRelationEntry_DoNotUseDefaultTypeInternal;
extern PlayerExtMap_MsRelationEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_MsRelationEntry_DoNotUse_default_instance_;
class PlayerExtMap_PveBuffEntry_DoNotUse;
struct PlayerExtMap_PveBuffEntry_DoNotUseDefaultTypeInternal;
extern PlayerExtMap_PveBuffEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_PveBuffEntry_DoNotUse_default_instance_;
class PlayerExtMap_PvpPlayerGroupEntry_DoNotUse;
struct PlayerExtMap_PvpPlayerGroupEntry_DoNotUseDefaultTypeInternal;
extern PlayerExtMap_PvpPlayerGroupEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_PvpPlayerGroupEntry_DoNotUse_default_instance_;
class PlayerGuildInfo;
struct PlayerGuildInfoDefaultTypeInternal;
extern PlayerGuildInfoDefaultTypeInternal _PlayerGuildInfo_default_instance_;
class PlayerMentorShipInfo;
struct PlayerMentorShipInfoDefaultTypeInternal;
extern PlayerMentorShipInfoDefaultTypeInternal _PlayerMentorShipInfo_default_instance_;
class PlayerMentorShipInfo_TasksEntry_DoNotUse;
struct PlayerMentorShipInfo_TasksEntry_DoNotUseDefaultTypeInternal;
extern PlayerMentorShipInfo_TasksEntry_DoNotUseDefaultTypeInternal _PlayerMentorShipInfo_TasksEntry_DoNotUse_default_instance_;
class PlayerObServerInfo;
struct PlayerObServerInfoDefaultTypeInternal;
extern PlayerObServerInfoDefaultTypeInternal _PlayerObServerInfo_default_instance_;
class PlayerTeamInfo;
struct PlayerTeamInfoDefaultTypeInternal;
extern PlayerTeamInfoDefaultTypeInternal _PlayerTeamInfo_default_instance_;
class PlayerTournament;
struct PlayerTournamentDefaultTypeInternal;
extern PlayerTournamentDefaultTypeInternal _PlayerTournament_default_instance_;
class PlayerTournamentData;
struct PlayerTournamentDataDefaultTypeInternal;
extern PlayerTournamentDataDefaultTypeInternal _PlayerTournamentData_default_instance_;
class PlayerTournamentData_DataEntry_DoNotUse;
struct PlayerTournamentData_DataEntry_DoNotUseDefaultTypeInternal;
extern PlayerTournamentData_DataEntry_DoNotUseDefaultTypeInternal _PlayerTournamentData_DataEntry_DoNotUse_default_instance_;
class PlayerTournamentData_GetRewardEntry_DoNotUse;
struct PlayerTournamentData_GetRewardEntry_DoNotUseDefaultTypeInternal;
extern PlayerTournamentData_GetRewardEntry_DoNotUseDefaultTypeInternal _PlayerTournamentData_GetRewardEntry_DoNotUse_default_instance_;
class PlayerTournamentData_PointsEntry_DoNotUse;
struct PlayerTournamentData_PointsEntry_DoNotUseDefaultTypeInternal;
extern PlayerTournamentData_PointsEntry_DoNotUseDefaultTypeInternal _PlayerTournamentData_PointsEntry_DoNotUse_default_instance_;
class PlayerTournament_DataEntry_DoNotUse;
struct PlayerTournament_DataEntry_DoNotUseDefaultTypeInternal;
extern PlayerTournament_DataEntry_DoNotUseDefaultTypeInternal _PlayerTournament_DataEntry_DoNotUse_default_instance_;
class PlayerTournament_EnrollCountEntry_DoNotUse;
struct PlayerTournament_EnrollCountEntry_DoNotUseDefaultTypeInternal;
extern PlayerTournament_EnrollCountEntry_DoNotUseDefaultTypeInternal _PlayerTournament_EnrollCountEntry_DoNotUse_default_instance_;
class PlayerTournament_PointsEntry_DoNotUse;
struct PlayerTournament_PointsEntry_DoNotUseDefaultTypeInternal;
extern PlayerTournament_PointsEntry_DoNotUseDefaultTypeInternal _PlayerTournament_PointsEntry_DoNotUse_default_instance_;
class Pupil;
struct PupilDefaultTypeInternal;
extern PupilDefaultTypeInternal _Pupil_default_instance_;
class Pupil_TasksEntry_DoNotUse;
struct Pupil_TasksEntry_DoNotUseDefaultTypeInternal;
extern Pupil_TasksEntry_DoNotUseDefaultTypeInternal _Pupil_TasksEntry_DoNotUse_default_instance_;
class Pve;
struct PveDefaultTypeInternal;
extern PveDefaultTypeInternal _Pve_default_instance_;
class PveBuff;
struct PveBuffDefaultTypeInternal;
extern PveBuffDefaultTypeInternal _PveBuff_default_instance_;
class PveConsume;
struct PveConsumeDefaultTypeInternal;
extern PveConsumeDefaultTypeInternal _PveConsume_default_instance_;
class PveDataInfo;
struct PveDataInfoDefaultTypeInternal;
extern PveDataInfoDefaultTypeInternal _PveDataInfo_default_instance_;
class PveDataInfo_DataEntry_DoNotUse;
struct PveDataInfo_DataEntry_DoNotUseDefaultTypeInternal;
extern PveDataInfo_DataEntry_DoNotUseDefaultTypeInternal _PveDataInfo_DataEntry_DoNotUse_default_instance_;
class PveExData;
struct PveExDataDefaultTypeInternal;
extern PveExDataDefaultTypeInternal _PveExData_default_instance_;
class PveExData_TalentEntry_DoNotUse;
struct PveExData_TalentEntry_DoNotUseDefaultTypeInternal;
extern PveExData_TalentEntry_DoNotUseDefaultTypeInternal _PveExData_TalentEntry_DoNotUse_default_instance_;
class PveRankRedisInfo;
struct PveRankRedisInfoDefaultTypeInternal;
extern PveRankRedisInfoDefaultTypeInternal _PveRankRedisInfo_default_instance_;
class PveSetting;
struct PveSettingDefaultTypeInternal;
extern PveSettingDefaultTypeInternal _PveSetting_default_instance_;
class Pve_BuffEntry_DoNotUse;
struct Pve_BuffEntry_DoNotUseDefaultTypeInternal;
extern Pve_BuffEntry_DoNotUseDefaultTypeInternal _Pve_BuffEntry_DoNotUse_default_instance_;
class Pve_ChessIdsEntry_DoNotUse;
struct Pve_ChessIdsEntry_DoNotUseDefaultTypeInternal;
extern Pve_ChessIdsEntry_DoNotUseDefaultTypeInternal _Pve_ChessIdsEntry_DoNotUse_default_instance_;
class Pve_SkillsEntry_DoNotUse;
struct Pve_SkillsEntry_DoNotUseDefaultTypeInternal;
extern Pve_SkillsEntry_DoNotUseDefaultTypeInternal _Pve_SkillsEntry_DoNotUse_default_instance_;
class PvpBigWinnerData;
struct PvpBigWinnerDataDefaultTypeInternal;
extern PvpBigWinnerDataDefaultTypeInternal _PvpBigWinnerData_default_instance_;
class PvpData;
struct PvpDataDefaultTypeInternal;
extern PvpDataDefaultTypeInternal _PvpData_default_instance_;
class PvpExtData;
struct PvpExtDataDefaultTypeInternal;
extern PvpExtDataDefaultTypeInternal _PvpExtData_default_instance_;
class PvpHistoryData;
struct PvpHistoryDataDefaultTypeInternal;
extern PvpHistoryDataDefaultTypeInternal _PvpHistoryData_default_instance_;
class PvpPlayerData;
struct PvpPlayerDataDefaultTypeInternal;
extern PvpPlayerDataDefaultTypeInternal _PvpPlayerData_default_instance_;
class PvpPlayerData_ChessSkinDataEntry_DoNotUse;
struct PvpPlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_ChessSkinDataEntry_DoNotUse_default_instance_;
class PvpPlayerData_CurShowItemsEntry_DoNotUse;
struct PvpPlayerData_CurShowItemsEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_CurShowItemsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_CurShowItemsEntry_DoNotUse_default_instance_;
class PvpPlayerData_CurrencysEntry_DoNotUse;
struct PvpPlayerData_CurrencysEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_CurrencysEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_CurrencysEntry_DoNotUse_default_instance_;
class PvpPlayerData_ModeWinDatasEntry_DoNotUse;
struct PvpPlayerData_ModeWinDatasEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_ModeWinDatasEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_ModeWinDatasEntry_DoNotUse_default_instance_;
class PvpPlayerData_PunishmentEntry_DoNotUse;
struct PvpPlayerData_PunishmentEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_PunishmentEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_PunishmentEntry_DoNotUse_default_instance_;
class PvpPlayerData_RegionDelaysEntry_DoNotUse;
struct PvpPlayerData_RegionDelaysEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_RegionDelaysEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_RegionDelaysEntry_DoNotUse_default_instance_;
class PvpPlayerData_SettingsEntry_DoNotUse;
struct PvpPlayerData_SettingsEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_SettingsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_SettingsEntry_DoNotUse_default_instance_;
class PvpPlayerData_SkinDataEntry_DoNotUse;
struct PvpPlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_SkinDataEntry_DoNotUse_default_instance_;
class PvpPlayerData_SwitchItemsEntry_DoNotUse;
struct PvpPlayerData_SwitchItemsEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_SwitchItemsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_SwitchItemsEntry_DoNotUse_default_instance_;
class PvpPlayerData_TicketsEntry_DoNotUse;
struct PvpPlayerData_TicketsEntry_DoNotUseDefaultTypeInternal;
extern PvpPlayerData_TicketsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_TicketsEntry_DoNotUse_default_instance_;
class PvpTeachResult;
struct PvpTeachResultDefaultTypeInternal;
extern PvpTeachResultDefaultTypeInternal _PvpTeachResult_default_instance_;
class RoundData;
struct RoundDataDefaultTypeInternal;
extern RoundDataDefaultTypeInternal _RoundData_default_instance_;
class RoundData_PointsEntry_DoNotUse;
struct RoundData_PointsEntry_DoNotUseDefaultTypeInternal;
extern RoundData_PointsEntry_DoNotUseDefaultTypeInternal _RoundData_PointsEntry_DoNotUse_default_instance_;
class ScoredMap;
struct ScoredMapDefaultTypeInternal;
extern ScoredMapDefaultTypeInternal _ScoredMap_default_instance_;
class SelectEquip;
struct SelectEquipDefaultTypeInternal;
extern SelectEquipDefaultTypeInternal _SelectEquip_default_instance_;
class Sign;
struct SignDefaultTypeInternal;
extern SignDefaultTypeInternal _Sign_default_instance_;
class Skip;
struct SkipDefaultTypeInternal;
extern SkipDefaultTypeInternal _Skip_default_instance_;
class SkipType;
struct SkipTypeDefaultTypeInternal;
extern SkipTypeDefaultTypeInternal _SkipType_default_instance_;
class SwitchItem;
struct SwitchItemDefaultTypeInternal;
extern SwitchItemDefaultTypeInternal _SwitchItem_default_instance_;
class TDCardGroup;
struct TDCardGroupDefaultTypeInternal;
extern TDCardGroupDefaultTypeInternal _TDCardGroup_default_instance_;
class TDCardGroups;
struct TDCardGroupsDefaultTypeInternal;
extern TDCardGroupsDefaultTypeInternal _TDCardGroups_default_instance_;
class TDItem;
struct TDItemDefaultTypeInternal;
extern TDItemDefaultTypeInternal _TDItem_default_instance_;
class TDItemGroup;
struct TDItemGroupDefaultTypeInternal;
extern TDItemGroupDefaultTypeInternal _TDItemGroup_default_instance_;
class TDItemGroup_ItemsEntry_DoNotUse;
struct TDItemGroup_ItemsEntry_DoNotUseDefaultTypeInternal;
extern TDItemGroup_ItemsEntry_DoNotUseDefaultTypeInternal _TDItemGroup_ItemsEntry_DoNotUse_default_instance_;
class TDItemId;
struct TDItemIdDefaultTypeInternal;
extern TDItemIdDefaultTypeInternal _TDItemId_default_instance_;
class TDItem_EquipmentsEntry_DoNotUse;
struct TDItem_EquipmentsEntry_DoNotUseDefaultTypeInternal;
extern TDItem_EquipmentsEntry_DoNotUseDefaultTypeInternal _TDItem_EquipmentsEntry_DoNotUse_default_instance_;
class TDUnUse;
struct TDUnUseDefaultTypeInternal;
extern TDUnUseDefaultTypeInternal _TDUnUse_default_instance_;
class TeamBaseInfo;
struct TeamBaseInfoDefaultTypeInternal;
extern TeamBaseInfoDefaultTypeInternal _TeamBaseInfo_default_instance_;
class TeamBetOnBounty;
struct TeamBetOnBountyDefaultTypeInternal;
extern TeamBetOnBountyDefaultTypeInternal _TeamBetOnBounty_default_instance_;
class TeamDesc;
struct TeamDescDefaultTypeInternal;
extern TeamDescDefaultTypeInternal _TeamDesc_default_instance_;
class TeamOP;
struct TeamOPDefaultTypeInternal;
extern TeamOPDefaultTypeInternal _TeamOP_default_instance_;
class TeamOPAppointLeader;
struct TeamOPAppointLeaderDefaultTypeInternal;
extern TeamOPAppointLeaderDefaultTypeInternal _TeamOPAppointLeader_default_instance_;
class TeamOPChangeGroup;
struct TeamOPChangeGroupDefaultTypeInternal;
extern TeamOPChangeGroupDefaultTypeInternal _TeamOPChangeGroup_default_instance_;
class TeamOPChangeName;
struct TeamOPChangeNameDefaultTypeInternal;
extern TeamOPChangeNameDefaultTypeInternal _TeamOPChangeName_default_instance_;
class TeamOPSelfChangeGroup;
struct TeamOPSelfChangeGroupDefaultTypeInternal;
extern TeamOPSelfChangeGroupDefaultTypeInternal _TeamOPSelfChangeGroup_default_instance_;
class TeamOPSetting;
struct TeamOPSettingDefaultTypeInternal;
extern TeamOPSettingDefaultTypeInternal _TeamOPSetting_default_instance_;
class TeamOPSwitchSlot;
struct TeamOPSwitchSlotDefaultTypeInternal;
extern TeamOPSwitchSlotDefaultTypeInternal _TeamOPSwitchSlot_default_instance_;
class TopRank;
struct TopRankDefaultTypeInternal;
extern TopRankDefaultTypeInternal _TopRank_default_instance_;
class TournamentDesc;
struct TournamentDescDefaultTypeInternal;
extern TournamentDescDefaultTypeInternal _TournamentDesc_default_instance_;
class TournamentHistory;
struct TournamentHistoryDefaultTypeInternal;
extern TournamentHistoryDefaultTypeInternal _TournamentHistory_default_instance_;
class TournamentHistory_ChampionHistoryEntry_DoNotUse;
struct TournamentHistory_ChampionHistoryEntry_DoNotUseDefaultTypeInternal;
extern TournamentHistory_ChampionHistoryEntry_DoNotUseDefaultTypeInternal _TournamentHistory_ChampionHistoryEntry_DoNotUse_default_instance_;
class TournamentHistory_TopRankHistoryEntry_DoNotUse;
struct TournamentHistory_TopRankHistoryEntry_DoNotUseDefaultTypeInternal;
extern TournamentHistory_TopRankHistoryEntry_DoNotUseDefaultTypeInternal _TournamentHistory_TopRankHistoryEntry_DoNotUse_default_instance_;
class TournamentRoom;
struct TournamentRoomDefaultTypeInternal;
extern TournamentRoomDefaultTypeInternal _TournamentRoom_default_instance_;
class TowerDefenseData;
struct TowerDefenseDataDefaultTypeInternal;
extern TowerDefenseDataDefaultTypeInternal _TowerDefenseData_default_instance_;
class TransferEvent;
struct TransferEventDefaultTypeInternal;
extern TransferEventDefaultTypeInternal _TransferEvent_default_instance_;
class TransferOP;
struct TransferOPDefaultTypeInternal;
extern TransferOPDefaultTypeInternal _TransferOP_default_instance_;
class UpdatePlayerData;
struct UpdatePlayerDataDefaultTypeInternal;
extern UpdatePlayerDataDefaultTypeInternal _UpdatePlayerData_default_instance_;
class UpdatePlayerData_ChessSkinDataEntry_DoNotUse;
struct UpdatePlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal;
extern UpdatePlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal _UpdatePlayerData_ChessSkinDataEntry_DoNotUse_default_instance_;
class UpdatePlayerData_ShowItemsEntry_DoNotUse;
struct UpdatePlayerData_ShowItemsEntry_DoNotUseDefaultTypeInternal;
extern UpdatePlayerData_ShowItemsEntry_DoNotUseDefaultTypeInternal _UpdatePlayerData_ShowItemsEntry_DoNotUse_default_instance_;
class UpdatePlayerData_SkinDataEntry_DoNotUse;
struct UpdatePlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal;
extern UpdatePlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal _UpdatePlayerData_SkinDataEntry_DoNotUse_default_instance_;
class VideoInfo;
struct VideoInfoDefaultTypeInternal;
extern VideoInfoDefaultTypeInternal _VideoInfo_default_instance_;
class VisitedMaps;
struct VisitedMapsDefaultTypeInternal;
extern VisitedMapsDefaultTypeInternal _VisitedMaps_default_instance_;
class VisitedMaps_MapsEntry_DoNotUse;
struct VisitedMaps_MapsEntry_DoNotUseDefaultTypeInternal;
extern VisitedMaps_MapsEntry_DoNotUseDefaultTypeInternal _VisitedMaps_MapsEntry_DoNotUse_default_instance_;
class WorkshopSetting;
struct WorkshopSettingDefaultTypeInternal;
extern WorkshopSettingDefaultTypeInternal _WorkshopSetting_default_instance_;
class WxVVipData;
struct WxVVipDataDefaultTypeInternal;
extern WxVVipDataDefaultTypeInternal _WxVVipData_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::ActivityAttrData* Arena::CreateMaybeMessage<::msg::ActivityAttrData>(Arena*);
template<> ::msg::ActivityData* Arena::CreateMaybeMessage<::msg::ActivityData>(Arena*);
template<> ::msg::ActivityGroup* Arena::CreateMaybeMessage<::msg::ActivityGroup>(Arena*);
template<> ::msg::ActivityGroupData* Arena::CreateMaybeMessage<::msg::ActivityGroupData>(Arena*);
template<> ::msg::AddRecommendData* Arena::CreateMaybeMessage<::msg::AddRecommendData>(Arena*);
template<> ::msg::AnswerData* Arena::CreateMaybeMessage<::msg::AnswerData>(Arena*);
template<> ::msg::ApplyWorkshopRule* Arena::CreateMaybeMessage<::msg::ApplyWorkshopRule>(Arena*);
template<> ::msg::Authority* Arena::CreateMaybeMessage<::msg::Authority>(Arena*);
template<> ::msg::Award* Arena::CreateMaybeMessage<::msg::Award>(Arena*);
template<> ::msg::Award_AffixsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::Award_AffixsEntry_DoNotUse>(Arena*);
template<> ::msg::BattleExtData* Arena::CreateMaybeMessage<::msg::BattleExtData>(Arena*);
template<> ::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse>(Arena*);
template<> ::msg::BountySetting* Arena::CreateMaybeMessage<::msg::BountySetting>(Arena*);
template<> ::msg::BuffEffect* Arena::CreateMaybeMessage<::msg::BuffEffect>(Arena*);
template<> ::msg::Buffs* Arena::CreateMaybeMessage<::msg::Buffs>(Arena*);
template<> ::msg::CDNLanguageData* Arena::CreateMaybeMessage<::msg::CDNLanguageData>(Arena*);
template<> ::msg::CSDTActDaySign* Arena::CreateMaybeMessage<::msg::CSDTActDaySign>(Arena*);
template<> ::msg::CSDTActDaySignDetail* Arena::CreateMaybeMessage<::msg::CSDTActDaySignDetail>(Arena*);
template<> ::msg::CSDTActDaySign_SignDayEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActDaySign_SignDayEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActGroupBuy* Arena::CreateMaybeMessage<::msg::CSDTActGroupBuy>(Arena*);
template<> ::msg::CSDTActGroupBuyRwd* Arena::CreateMaybeMessage<::msg::CSDTActGroupBuyRwd>(Arena*);
template<> ::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActGroupBuy_RewardEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActGroupBuy_RewardEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActLuckMallData* Arena::CreateMaybeMessage<::msg::CSDTActLuckMallData>(Arena*);
template<> ::msg::CSDTActRecruitData* Arena::CreateMaybeMessage<::msg::CSDTActRecruitData>(Arena*);
template<> ::msg::CSDTActRecruitData_PlayersEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActRecruitData_PlayersEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActivity* Arena::CreateMaybeMessage<::msg::CSDTActivity>(Arena*);
template<> ::msg::CSDTActivityDetail* Arena::CreateMaybeMessage<::msg::CSDTActivityDetail>(Arena*);
template<> ::msg::CSDTActivityGroup* Arena::CreateMaybeMessage<::msg::CSDTActivityGroup>(Arena*);
template<> ::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActivityRecord* Arena::CreateMaybeMessage<::msg::CSDTActivityRecord>(Arena*);
template<> ::msg::CSDTActivityRecord_ProcessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActivityRecord_ProcessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActivityRecord_RewardEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActivityRecord_RewardEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActivityRecruit* Arena::CreateMaybeMessage<::msg::CSDTActivityRecruit>(Arena*);
template<> ::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTActivity_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTActivity_GroupsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTAddictionInfo* Arena::CreateMaybeMessage<::msg::CSDTAddictionInfo>(Arena*);
template<> ::msg::CSDTAds* Arena::CreateMaybeMessage<::msg::CSDTAds>(Arena*);
template<> ::msg::CSDTAdsInfo* Arena::CreateMaybeMessage<::msg::CSDTAdsInfo>(Arena*);
template<> ::msg::CSDTBagItem* Arena::CreateMaybeMessage<::msg::CSDTBagItem>(Arena*);
template<> ::msg::CSDTBagPara* Arena::CreateMaybeMessage<::msg::CSDTBagPara>(Arena*);
template<> ::msg::CSDTBanner* Arena::CreateMaybeMessage<::msg::CSDTBanner>(Arena*);
template<> ::msg::CSDTBannerInfo* Arena::CreateMaybeMessage<::msg::CSDTBannerInfo>(Arena*);
template<> ::msg::CSDTBattleGroup* Arena::CreateMaybeMessage<::msg::CSDTBattleGroup>(Arena*);
template<> ::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTBattleGroup_PlayersEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTBattleGroup_PlayersEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTBetData* Arena::CreateMaybeMessage<::msg::CSDTBetData>(Arena*);
template<> ::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTBriefPunishment* Arena::CreateMaybeMessage<::msg::CSDTBriefPunishment>(Arena*);
template<> ::msg::CSDTBuffAct* Arena::CreateMaybeMessage<::msg::CSDTBuffAct>(Arena*);
template<> ::msg::CSDTCampData* Arena::CreateMaybeMessage<::msg::CSDTCampData>(Arena*);
template<> ::msg::CSDTChat* Arena::CreateMaybeMessage<::msg::CSDTChat>(Arena*);
template<> ::msg::CSDTChessPlayer* Arena::CreateMaybeMessage<::msg::CSDTChessPlayer>(Arena*);
template<> ::msg::CSDTChessPlayerEquip* Arena::CreateMaybeMessage<::msg::CSDTChessPlayerEquip>(Arena*);
template<> ::msg::CSDTChessPlayer_EquipEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTChessPlayer_EquipEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTChessPlayer_EquipsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTChessPlayer_EquipsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTChessPlrInfo* Arena::CreateMaybeMessage<::msg::CSDTChessPlrInfo>(Arena*);
template<> ::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTCommonRandList* Arena::CreateMaybeMessage<::msg::CSDTCommonRandList>(Arena*);
template<> ::msg::CSDTCurShowItem* Arena::CreateMaybeMessage<::msg::CSDTCurShowItem>(Arena*);
template<> ::msg::CSDTEnrollEnd* Arena::CreateMaybeMessage<::msg::CSDTEnrollEnd>(Arena*);
template<> ::msg::CSDTFetters* Arena::CreateMaybeMessage<::msg::CSDTFetters>(Arena*);
template<> ::msg::CSDTGDCommonBin* Arena::CreateMaybeMessage<::msg::CSDTGDCommonBin>(Arena*);
template<> ::msg::CSDTGoods* Arena::CreateMaybeMessage<::msg::CSDTGoods>(Arena*);
template<> ::msg::CSDTGoodsInfo* Arena::CreateMaybeMessage<::msg::CSDTGoodsInfo>(Arena*);
template<> ::msg::CSDTGuide* Arena::CreateMaybeMessage<::msg::CSDTGuide>(Arena*);
template<> ::msg::CSDTItem* Arena::CreateMaybeMessage<::msg::CSDTItem>(Arena*);
template<> ::msg::CSDTItemID* Arena::CreateMaybeMessage<::msg::CSDTItemID>(Arena*);
template<> ::msg::CSDTItemMedal* Arena::CreateMaybeMessage<::msg::CSDTItemMedal>(Arena*);
template<> ::msg::CSDTItem_AffixsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTItem_AffixsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTMail* Arena::CreateMaybeMessage<::msg::CSDTMail>(Arena*);
template<> ::msg::CSDTMail_DictEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTMail_DictEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTMallBuyCount* Arena::CreateMaybeMessage<::msg::CSDTMallBuyCount>(Arena*);
template<> ::msg::CSDTMallBuyCountData* Arena::CreateMaybeMessage<::msg::CSDTMallBuyCountData>(Arena*);
template<> ::msg::CSDTMallGoods* Arena::CreateMaybeMessage<::msg::CSDTMallGoods>(Arena*);
template<> ::msg::CSDTMallGoodsData* Arena::CreateMaybeMessage<::msg::CSDTMallGoodsData>(Arena*);
template<> ::msg::CSDTMarquee* Arena::CreateMaybeMessage<::msg::CSDTMarquee>(Arena*);
template<> ::msg::CSDTMarqueeItem* Arena::CreateMaybeMessage<::msg::CSDTMarqueeItem>(Arena*);
template<> ::msg::CSDTMelee* Arena::CreateMaybeMessage<::msg::CSDTMelee>(Arena*);
template<> ::msg::CSDTMentorInfo* Arena::CreateMaybeMessage<::msg::CSDTMentorInfo>(Arena*);
template<> ::msg::CSDTMentorRecommendPlayer* Arena::CreateMaybeMessage<::msg::CSDTMentorRecommendPlayer>(Arena*);
template<> ::msg::CSDTNewTournament* Arena::CreateMaybeMessage<::msg::CSDTNewTournament>(Arena*);
template<> ::msg::CSDTNewTournament_ClassesEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTNewTournament_ClassesEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTNotice* Arena::CreateMaybeMessage<::msg::CSDTNotice>(Arena*);
template<> ::msg::CSDTNoticeInfo* Arena::CreateMaybeMessage<::msg::CSDTNoticeInfo>(Arena*);
template<> ::msg::CSDTNumRankItem* Arena::CreateMaybeMessage<::msg::CSDTNumRankItem>(Arena*);
template<> ::msg::CSDTPassportCard* Arena::CreateMaybeMessage<::msg::CSDTPassportCard>(Arena*);
template<> ::msg::CSDTPassportHistory* Arena::CreateMaybeMessage<::msg::CSDTPassportHistory>(Arena*);
template<> ::msg::CSDTPlayer* Arena::CreateMaybeMessage<::msg::CSDTPlayer>(Arena*);
template<> ::msg::CSDTPlayerBaseInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerBaseInfo>(Arena*);
template<> ::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPlayerDetailInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerDetailInfo>(Arena*);
template<> ::msg::CSDTPlayerFinish* Arena::CreateMaybeMessage<::msg::CSDTPlayerFinish>(Arena*);
template<> ::msg::CSDTPlayerItems* Arena::CreateMaybeMessage<::msg::CSDTPlayerItems>(Arena*);
template<> ::msg::CSDTPlayerPvpData* Arena::CreateMaybeMessage<::msg::CSDTPlayerPvpData>(Arena*);
template<> ::msg::CSDTPlayerPvpInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerPvpInfo>(Arena*);
template<> ::msg::CSDTPlayerRankInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerRankInfo>(Arena*);
template<> ::msg::CSDTPlayerSimpleInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerSimpleInfo>(Arena*);
template<> ::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPlayerStatusInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerStatusInfo>(Arena*);
template<> ::msg::CSDTPlayerTournamentInfo* Arena::CreateMaybeMessage<::msg::CSDTPlayerTournamentInfo>(Arena*);
template<> ::msg::CSDTPunishment* Arena::CreateMaybeMessage<::msg::CSDTPunishment>(Arena*);
template<> ::msg::CSDTPuzzle* Arena::CreateMaybeMessage<::msg::CSDTPuzzle>(Arena*);
template<> ::msg::CSDTPuzzle_ItemMapEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPuzzle_ItemMapEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpCampResult* Arena::CreateMaybeMessage<::msg::CSDTPvpCampResult>(Arena*);
template<> ::msg::CSDTPvpHistory* Arena::CreateMaybeMessage<::msg::CSDTPvpHistory>(Arena*);
template<> ::msg::CSDTPvpMvp* Arena::CreateMaybeMessage<::msg::CSDTPvpMvp>(Arena*);
template<> ::msg::CSDTPvpPlayerStat* Arena::CreateMaybeMessage<::msg::CSDTPvpPlayerStat>(Arena*);
template<> ::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpStat* Arena::CreateMaybeMessage<::msg::CSDTPvpStat>(Arena*);
template<> ::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTPvpWinData* Arena::CreateMaybeMessage<::msg::CSDTPvpWinData>(Arena*);
template<> ::msg::CSDTRankSeasonData* Arena::CreateMaybeMessage<::msg::CSDTRankSeasonData>(Arena*);
template<> ::msg::CSDTRankSeasonInfo* Arena::CreateMaybeMessage<::msg::CSDTRankSeasonInfo>(Arena*);
template<> ::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRecommendPlayer* Arena::CreateMaybeMessage<::msg::CSDTRecommendPlayer>(Arena*);
template<> ::msg::CSDTRecommendPvpInfo* Arena::CreateMaybeMessage<::msg::CSDTRecommendPvpInfo>(Arena*);
template<> ::msg::CSDTRecruitData* Arena::CreateMaybeMessage<::msg::CSDTRecruitData>(Arena*);
template<> ::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRecruitPlayer* Arena::CreateMaybeMessage<::msg::CSDTRecruitPlayer>(Arena*);
template<> ::msg::CSDTRedPktData* Arena::CreateMaybeMessage<::msg::CSDTRedPktData>(Arena*);
template<> ::msg::CSDTRedPktInfo* Arena::CreateMaybeMessage<::msg::CSDTRedPktInfo>(Arena*);
template<> ::msg::CSDTRoleStat* Arena::CreateMaybeMessage<::msg::CSDTRoleStat>(Arena*);
template<> ::msg::CSDTRound* Arena::CreateMaybeMessage<::msg::CSDTRound>(Arena*);
template<> ::msg::CSDTRoundEnd* Arena::CreateMaybeMessage<::msg::CSDTRoundEnd>(Arena*);
template<> ::msg::CSDTRoundItem* Arena::CreateMaybeMessage<::msg::CSDTRoundItem>(Arena*);
template<> ::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_DropEquipEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_DropEquipEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_SellChessListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_SellChessListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTSeason* Arena::CreateMaybeMessage<::msg::CSDTSeason>(Arena*);
template<> ::msg::CSDTSignData* Arena::CreateMaybeMessage<::msg::CSDTSignData>(Arena*);
template<> ::msg::CSDTSlotInfo* Arena::CreateMaybeMessage<::msg::CSDTSlotInfo>(Arena*);
template<> ::msg::CSDTStat* Arena::CreateMaybeMessage<::msg::CSDTStat>(Arena*);
template<> ::msg::CSDTStat_SeasonInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTStat_SeasonInfoEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTTaskItem* Arena::CreateMaybeMessage<::msg::CSDTTaskItem>(Arena*);
template<> ::msg::CSDTTasks* Arena::CreateMaybeMessage<::msg::CSDTTasks>(Arena*);
template<> ::msg::CSDTTeamSlotPlayer* Arena::CreateMaybeMessage<::msg::CSDTTeamSlotPlayer>(Arena*);
template<> ::msg::CSDTTeamVoicePlayer* Arena::CreateMaybeMessage<::msg::CSDTTeamVoicePlayer>(Arena*);
template<> ::msg::CSDTTelBook* Arena::CreateMaybeMessage<::msg::CSDTTelBook>(Arena*);
template<> ::msg::CSDTThirdPvpInfo* Arena::CreateMaybeMessage<::msg::CSDTThirdPvpInfo>(Arena*);
template<> ::msg::CSDTTournament* Arena::CreateMaybeMessage<::msg::CSDTTournament>(Arena*);
template<> ::msg::CSDTTournamentClass* Arena::CreateMaybeMessage<::msg::CSDTTournamentClass>(Arena*);
template<> ::msg::CSDTTournamentClass_GroupsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTTournamentClass_GroupsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTTournament_PointsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTTournament_PointsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTTournament_RankInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTTournament_RankInfoEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTTournament_RoundPointsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSDTTournament_RoundPointsEntry_DoNotUse>(Arena*);
template<> ::msg::CSDTVisitedMap* Arena::CreateMaybeMessage<::msg::CSDTVisitedMap>(Arena*);
template<> ::msg::CSDTWorldChat* Arena::CreateMaybeMessage<::msg::CSDTWorldChat>(Arena*);
template<> ::msg::CSDTWxRedPktItem* Arena::CreateMaybeMessage<::msg::CSDTWxRedPktItem>(Arena*);
template<> ::msg::CSDTWxRedPktProfile* Arena::CreateMaybeMessage<::msg::CSDTWxRedPktProfile>(Arena*);
template<> ::msg::CSDTWxVVipRankItem* Arena::CreateMaybeMessage<::msg::CSDTWxVVipRankItem>(Arena*);
template<> ::msg::CSNtfPvpChat* Arena::CreateMaybeMessage<::msg::CSNtfPvpChat>(Arena*);
template<> ::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse>(Arena*);
template<> ::msg::CSReqLogin* Arena::CreateMaybeMessage<::msg::CSReqLogin>(Arena*);
template<> ::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse>(Arena*);
template<> ::msg::CardGroupChess* Arena::CreateMaybeMessage<::msg::CardGroupChess>(Arena*);
template<> ::msg::CardGroupData* Arena::CreateMaybeMessage<::msg::CardGroupData>(Arena*);
template<> ::msg::ChampionInfo* Arena::CreateMaybeMessage<::msg::ChampionInfo>(Arena*);
template<> ::msg::ChampionInfoList* Arena::CreateMaybeMessage<::msg::ChampionInfoList>(Arena*);
template<> ::msg::ChannelFunctionData* Arena::CreateMaybeMessage<::msg::ChannelFunctionData>(Arena*);
template<> ::msg::ChessDamageStat* Arena::CreateMaybeMessage<::msg::ChessDamageStat>(Arena*);
template<> ::msg::ChessIds* Arena::CreateMaybeMessage<::msg::ChessIds>(Arena*);
template<> ::msg::ChessSkinSlotData* Arena::CreateMaybeMessage<::msg::ChessSkinSlotData>(Arena*);
template<> ::msg::ChessSkinSlotData_SlotsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::ChessSkinSlotData_SlotsEntry_DoNotUse>(Arena*);
template<> ::msg::ChestRecord* Arena::CreateMaybeMessage<::msg::ChestRecord>(Arena*);
template<> ::msg::CommonKVString* Arena::CreateMaybeMessage<::msg::CommonKVString>(Arena*);
template<> ::msg::Cond* Arena::CreateMaybeMessage<::msg::Cond>(Arena*);
template<> ::msg::Consume* Arena::CreateMaybeMessage<::msg::Consume>(Arena*);
template<> ::msg::ConsumeIncrease* Arena::CreateMaybeMessage<::msg::ConsumeIncrease>(Arena*);
template<> ::msg::Contest* Arena::CreateMaybeMessage<::msg::Contest>(Arena*);
template<> ::msg::CreditCfgItem* Arena::CreateMaybeMessage<::msg::CreditCfgItem>(Arena*);
template<> ::msg::Effect* Arena::CreateMaybeMessage<::msg::Effect>(Arena*);
template<> ::msg::Equip* Arena::CreateMaybeMessage<::msg::Equip>(Arena*);
template<> ::msg::ExchangeRecord* Arena::CreateMaybeMessage<::msg::ExchangeRecord>(Arena*);
template<> ::msg::ExtItem* Arena::CreateMaybeMessage<::msg::ExtItem>(Arena*);
template<> ::msg::GMLanguageData* Arena::CreateMaybeMessage<::msg::GMLanguageData>(Arena*);
template<> ::msg::GMLanguageData_LanguagesEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::GMLanguageData_LanguagesEntry_DoNotUse>(Arena*);
template<> ::msg::GMLanguageInfo* Arena::CreateMaybeMessage<::msg::GMLanguageInfo>(Arena*);
template<> ::msg::GetNumRank* Arena::CreateMaybeMessage<::msg::GetNumRank>(Arena*);
template<> ::msg::GmBan* Arena::CreateMaybeMessage<::msg::GmBan>(Arena*);
template<> ::msg::GuildApplicant* Arena::CreateMaybeMessage<::msg::GuildApplicant>(Arena*);
template<> ::msg::GuildApplyInfo* Arena::CreateMaybeMessage<::msg::GuildApplyInfo>(Arena*);
template<> ::msg::GuildAttr* Arena::CreateMaybeMessage<::msg::GuildAttr>(Arena*);
template<> ::msg::GuildBaseInfo* Arena::CreateMaybeMessage<::msg::GuildBaseInfo>(Arena*);
template<> ::msg::GuildChatInfo* Arena::CreateMaybeMessage<::msg::GuildChatInfo>(Arena*);
template<> ::msg::GuildExtraInfo* Arena::CreateMaybeMessage<::msg::GuildExtraInfo>(Arena*);
template<> ::msg::GuildLog* Arena::CreateMaybeMessage<::msg::GuildLog>(Arena*);
template<> ::msg::GuildLog_ParaEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::GuildLog_ParaEntry_DoNotUse>(Arena*);
template<> ::msg::GuildMember* Arena::CreateMaybeMessage<::msg::GuildMember>(Arena*);
template<> ::msg::GuildPlayerRole* Arena::CreateMaybeMessage<::msg::GuildPlayerRole>(Arena*);
template<> ::msg::HistoryMaxCupMmr* Arena::CreateMaybeMessage<::msg::HistoryMaxCupMmr>(Arena*);
template<> ::msg::ItemAffix* Arena::CreateMaybeMessage<::msg::ItemAffix>(Arena*);
template<> ::msg::KernelCardGroup* Arena::CreateMaybeMessage<::msg::KernelCardGroup>(Arena*);
template<> ::msg::KernelChessInfo* Arena::CreateMaybeMessage<::msg::KernelChessInfo>(Arena*);
template<> ::msg::KernelItem* Arena::CreateMaybeMessage<::msg::KernelItem>(Arena*);
template<> ::msg::KrAddictionInfo* Arena::CreateMaybeMessage<::msg::KrAddictionInfo>(Arena*);
template<> ::msg::LanguageData* Arena::CreateMaybeMessage<::msg::LanguageData>(Arena*);
template<> ::msg::Loc* Arena::CreateMaybeMessage<::msg::Loc>(Arena*);
template<> ::msg::MailExtData* Arena::CreateMaybeMessage<::msg::MailExtData>(Arena*);
template<> ::msg::MallGoodsData* Arena::CreateMaybeMessage<::msg::MallGoodsData>(Arena*);
template<> ::msg::MallNoticeData* Arena::CreateMaybeMessage<::msg::MallNoticeData>(Arena*);
template<> ::msg::MallTabData* Arena::CreateMaybeMessage<::msg::MallTabData>(Arena*);
template<> ::msg::MatchTeamData* Arena::CreateMaybeMessage<::msg::MatchTeamData>(Arena*);
template<> ::msg::MentorInfo* Arena::CreateMaybeMessage<::msg::MentorInfo>(Arena*);
template<> ::msg::MentorInfo_TasksEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::MentorInfo_TasksEntry_DoNotUse>(Arena*);
template<> ::msg::MentorInviteMsg* Arena::CreateMaybeMessage<::msg::MentorInviteMsg>(Arena*);
template<> ::msg::MultiPlayer* Arena::CreateMaybeMessage<::msg::MultiPlayer>(Arena*);
template<> ::msg::OBPassThroughData* Arena::CreateMaybeMessage<::msg::OBPassThroughData>(Arena*);
template<> ::msg::OssPlayerData* Arena::CreateMaybeMessage<::msg::OssPlayerData>(Arena*);
template<> ::msg::PFDTTaskDetail* Arena::CreateMaybeMessage<::msg::PFDTTaskDetail>(Arena*);
template<> ::msg::PlayLimit* Arena::CreateMaybeMessage<::msg::PlayLimit>(Arena*);
template<> ::msg::PlayerConfirmInfo* Arena::CreateMaybeMessage<::msg::PlayerConfirmInfo>(Arena*);
template<> ::msg::PlayerExtMap* Arena::CreateMaybeMessage<::msg::PlayerExtMap>(Arena*);
template<> ::msg::PlayerExtMap_AssistantMapEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerExtMap_AssistantMapEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerExtMap_MsRelationEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerExtMap_MsRelationEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerExtMap_PveBuffEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerExtMap_PveBuffEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerGuildInfo* Arena::CreateMaybeMessage<::msg::PlayerGuildInfo>(Arena*);
template<> ::msg::PlayerMentorShipInfo* Arena::CreateMaybeMessage<::msg::PlayerMentorShipInfo>(Arena*);
template<> ::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerObServerInfo* Arena::CreateMaybeMessage<::msg::PlayerObServerInfo>(Arena*);
template<> ::msg::PlayerTeamInfo* Arena::CreateMaybeMessage<::msg::PlayerTeamInfo>(Arena*);
template<> ::msg::PlayerTournament* Arena::CreateMaybeMessage<::msg::PlayerTournament>(Arena*);
template<> ::msg::PlayerTournamentData* Arena::CreateMaybeMessage<::msg::PlayerTournamentData>(Arena*);
template<> ::msg::PlayerTournamentData_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerTournamentData_DataEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerTournamentData_GetRewardEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerTournamentData_GetRewardEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerTournamentData_PointsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerTournamentData_PointsEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerTournament_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerTournament_DataEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerTournament_EnrollCountEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerTournament_EnrollCountEntry_DoNotUse>(Arena*);
template<> ::msg::PlayerTournament_PointsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PlayerTournament_PointsEntry_DoNotUse>(Arena*);
template<> ::msg::Pupil* Arena::CreateMaybeMessage<::msg::Pupil>(Arena*);
template<> ::msg::Pupil_TasksEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::Pupil_TasksEntry_DoNotUse>(Arena*);
template<> ::msg::Pve* Arena::CreateMaybeMessage<::msg::Pve>(Arena*);
template<> ::msg::PveBuff* Arena::CreateMaybeMessage<::msg::PveBuff>(Arena*);
template<> ::msg::PveConsume* Arena::CreateMaybeMessage<::msg::PveConsume>(Arena*);
template<> ::msg::PveDataInfo* Arena::CreateMaybeMessage<::msg::PveDataInfo>(Arena*);
template<> ::msg::PveDataInfo_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PveDataInfo_DataEntry_DoNotUse>(Arena*);
template<> ::msg::PveExData* Arena::CreateMaybeMessage<::msg::PveExData>(Arena*);
template<> ::msg::PveExData_TalentEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PveExData_TalentEntry_DoNotUse>(Arena*);
template<> ::msg::PveRankRedisInfo* Arena::CreateMaybeMessage<::msg::PveRankRedisInfo>(Arena*);
template<> ::msg::PveSetting* Arena::CreateMaybeMessage<::msg::PveSetting>(Arena*);
template<> ::msg::Pve_BuffEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::Pve_BuffEntry_DoNotUse>(Arena*);
template<> ::msg::Pve_ChessIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::Pve_ChessIdsEntry_DoNotUse>(Arena*);
template<> ::msg::Pve_SkillsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::Pve_SkillsEntry_DoNotUse>(Arena*);
template<> ::msg::PvpBigWinnerData* Arena::CreateMaybeMessage<::msg::PvpBigWinnerData>(Arena*);
template<> ::msg::PvpData* Arena::CreateMaybeMessage<::msg::PvpData>(Arena*);
template<> ::msg::PvpExtData* Arena::CreateMaybeMessage<::msg::PvpExtData>(Arena*);
template<> ::msg::PvpHistoryData* Arena::CreateMaybeMessage<::msg::PvpHistoryData>(Arena*);
template<> ::msg::PvpPlayerData* Arena::CreateMaybeMessage<::msg::PvpPlayerData>(Arena*);
template<> ::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_CurrencysEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_CurrencysEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_PunishmentEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_PunishmentEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_SettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_SettingsEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_SkinDataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_SkinDataEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse>(Arena*);
template<> ::msg::PvpPlayerData_TicketsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::PvpPlayerData_TicketsEntry_DoNotUse>(Arena*);
template<> ::msg::PvpTeachResult* Arena::CreateMaybeMessage<::msg::PvpTeachResult>(Arena*);
template<> ::msg::RoundData* Arena::CreateMaybeMessage<::msg::RoundData>(Arena*);
template<> ::msg::RoundData_PointsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::RoundData_PointsEntry_DoNotUse>(Arena*);
template<> ::msg::ScoredMap* Arena::CreateMaybeMessage<::msg::ScoredMap>(Arena*);
template<> ::msg::SelectEquip* Arena::CreateMaybeMessage<::msg::SelectEquip>(Arena*);
template<> ::msg::Sign* Arena::CreateMaybeMessage<::msg::Sign>(Arena*);
template<> ::msg::Skip* Arena::CreateMaybeMessage<::msg::Skip>(Arena*);
template<> ::msg::SkipType* Arena::CreateMaybeMessage<::msg::SkipType>(Arena*);
template<> ::msg::SwitchItem* Arena::CreateMaybeMessage<::msg::SwitchItem>(Arena*);
template<> ::msg::TDCardGroup* Arena::CreateMaybeMessage<::msg::TDCardGroup>(Arena*);
template<> ::msg::TDCardGroups* Arena::CreateMaybeMessage<::msg::TDCardGroups>(Arena*);
template<> ::msg::TDItem* Arena::CreateMaybeMessage<::msg::TDItem>(Arena*);
template<> ::msg::TDItemGroup* Arena::CreateMaybeMessage<::msg::TDItemGroup>(Arena*);
template<> ::msg::TDItemGroup_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::TDItemGroup_ItemsEntry_DoNotUse>(Arena*);
template<> ::msg::TDItemId* Arena::CreateMaybeMessage<::msg::TDItemId>(Arena*);
template<> ::msg::TDItem_EquipmentsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::TDItem_EquipmentsEntry_DoNotUse>(Arena*);
template<> ::msg::TDUnUse* Arena::CreateMaybeMessage<::msg::TDUnUse>(Arena*);
template<> ::msg::TeamBaseInfo* Arena::CreateMaybeMessage<::msg::TeamBaseInfo>(Arena*);
template<> ::msg::TeamBetOnBounty* Arena::CreateMaybeMessage<::msg::TeamBetOnBounty>(Arena*);
template<> ::msg::TeamDesc* Arena::CreateMaybeMessage<::msg::TeamDesc>(Arena*);
template<> ::msg::TeamOP* Arena::CreateMaybeMessage<::msg::TeamOP>(Arena*);
template<> ::msg::TeamOPAppointLeader* Arena::CreateMaybeMessage<::msg::TeamOPAppointLeader>(Arena*);
template<> ::msg::TeamOPChangeGroup* Arena::CreateMaybeMessage<::msg::TeamOPChangeGroup>(Arena*);
template<> ::msg::TeamOPChangeName* Arena::CreateMaybeMessage<::msg::TeamOPChangeName>(Arena*);
template<> ::msg::TeamOPSelfChangeGroup* Arena::CreateMaybeMessage<::msg::TeamOPSelfChangeGroup>(Arena*);
template<> ::msg::TeamOPSetting* Arena::CreateMaybeMessage<::msg::TeamOPSetting>(Arena*);
template<> ::msg::TeamOPSwitchSlot* Arena::CreateMaybeMessage<::msg::TeamOPSwitchSlot>(Arena*);
template<> ::msg::TopRank* Arena::CreateMaybeMessage<::msg::TopRank>(Arena*);
template<> ::msg::TournamentDesc* Arena::CreateMaybeMessage<::msg::TournamentDesc>(Arena*);
template<> ::msg::TournamentHistory* Arena::CreateMaybeMessage<::msg::TournamentHistory>(Arena*);
template<> ::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse>(Arena*);
template<> ::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse>(Arena*);
template<> ::msg::TournamentRoom* Arena::CreateMaybeMessage<::msg::TournamentRoom>(Arena*);
template<> ::msg::TowerDefenseData* Arena::CreateMaybeMessage<::msg::TowerDefenseData>(Arena*);
template<> ::msg::TransferEvent* Arena::CreateMaybeMessage<::msg::TransferEvent>(Arena*);
template<> ::msg::TransferOP* Arena::CreateMaybeMessage<::msg::TransferOP>(Arena*);
template<> ::msg::UpdatePlayerData* Arena::CreateMaybeMessage<::msg::UpdatePlayerData>(Arena*);
template<> ::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse>(Arena*);
template<> ::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse>(Arena*);
template<> ::msg::UpdatePlayerData_SkinDataEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::UpdatePlayerData_SkinDataEntry_DoNotUse>(Arena*);
template<> ::msg::VideoInfo* Arena::CreateMaybeMessage<::msg::VideoInfo>(Arena*);
template<> ::msg::VisitedMaps* Arena::CreateMaybeMessage<::msg::VisitedMaps>(Arena*);
template<> ::msg::VisitedMaps_MapsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::VisitedMaps_MapsEntry_DoNotUse>(Arena*);
template<> ::msg::WorkshopSetting* Arena::CreateMaybeMessage<::msg::WorkshopSetting>(Arena*);
template<> ::msg::WxVVipData* Arena::CreateMaybeMessage<::msg::WxVVipData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum REASON : int {
  REASON_NULL = 0,
  SYSTEM = 1,
  INACTIVE = 2,
  RELOGIN = 3,
  SERVER_STOPING = 5,
  REDIRECT_HALL_SERVER = 6,
  GROWUP_DEFEND_FROZEN = 7,
  REQUEST_TOO_FAST = 8,
  PUNISHED = 9,
  ADDICTION_LIMIT_AGE = 10,
  GAME_OVER = 11,
  ADDICTION_LIMIT_TIME = 12,
  BIND_TXPLAYER = 13,
  SERVICE_CLOSE = 14,
  PS_REVOKED = 15,
  PS_BIND_LY = 16,
  PS_UNBIND_LY = 17,
  ACTIVE_KICKOFF = 18,
  REASON_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  REASON_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool REASON_IsValid(int value);
constexpr REASON REASON_MIN = REASON_NULL;
constexpr REASON REASON_MAX = ACTIVE_KICKOFF;
constexpr int REASON_ARRAYSIZE = REASON_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* REASON_descriptor();
template<typename T>
inline const std::string& REASON_Name(T enum_t_value) {
  static_assert(::std::is_same<T, REASON>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function REASON_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    REASON_descriptor(), enum_t_value);
}
inline bool REASON_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, REASON* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<REASON>(
    REASON_descriptor(), name, value);
}
enum SOURCE : int {
  SOURCE_GM = 0,
  SOURCE_INIT = 1,
  EVAL = 2,
  MAIL = 3,
  BUY_EGG = 4,
  SET_NAME = 5,
  SELL_ITEM = 6,
  SOURCE_CDKEY = 7,
  BUY_PASSPORT_LEVEL = 8,
  GET_PASSPORT_LEVEL_AWARD = 9,
  UPGRADE_PASSPORT = 10,
  GET_PASSPORT_TASK_AWARD = 11,
  CHARGE = 15,
  EVAL_FIRST_WIN = 16,
  SOURCE_GM_EVAL = 17,
  SOURCE_RANKSEASON_EVAL = 18,
  USE_BONUS_CARD = 19,
  SEASON_AWARD = 20,
  SEASON_ACCOUNT_LEVEL_UP = 21,
  GET_ACTIVITY_AWARD = 22,
  MELEE_AWARD = 23,
  MAIL_ACTIVITY_REWARD = 24,
  MAIL_MAINTAIN_COMPENSATE = 25,
  MAIL_ACTIVITY_COMPENSATE = 26,
  MAIL_OTHER_COMPENSATE = 27,
  MAIL_INTERNAL_WELFARE = 28,
  PASSPORT_CLOSE = 29,
  ALPHA_ACTIVITY = 30,
  ALPHA_ORDER = 31,
  ALPHA_COMPETE = 32,
  ALPHA_CHARGE = 33,
  ALPHA_TEST = 34,
  PASSPORT_RETURN = 35,
  BUY_SPECIAL_GIFT = 36,
  EXCHANGE_TIMED_GOODS = 37,
  EXCHANGE_PASSPORT_GOODS = 38,
  USE_PASSPORT_TASK_CARD = 39,
  OPEN_RAND_CHEST = 40,
  EGG_LOTTERY = 41,
  UNGET_WEEKLY_AWARD = 42,
  USE_ITEM = 43,
  USE_EXPERIENCE_CARD = 44,
  BIND_PHONE_NUMBER = 45,
  PASSPORT_WRONG_DATA = 46,
  LAUNCH_PRIVILEGE_AWARD = 47,
  QQ_LOGIN_PRIVILEGE_AWARD = 48,
  QQSVIP_LOGINCONTINUS_AWARD = 49,
  DAILY_SHARE_REWARD = 50,
  BUY_MALL_GOODS = 51,
  DAY_SIGN_AWARD = 52,
  ACT_ITEM_EXCH = 53,
  CHARGE_RAW = 54,
  WX_VVIP_INIT = 55,
  WX_VVIP_DAILY_AWARD = 56,
  WX_VVIP_DAILY_V_AWARD = 57,
  WX_VVIP_WEEKLY_V_AWARD = 58,
  WX_VVIP_ACC_LOGIN = 59,
  WX_VVIP_ACC_BATTLE = 60,
  WX_VVIP_ACC_WIN = 61,
  WX_VVIP_LVL_UP = 62,
  WX_VVIP_S_CUP_UP = 63,
  WX_VVIP_D_CUP_UP = 64,
  WX_REDPKT_DAILY_AWARD = 65,
  WX_SEND_RED_PACKET = 66,
  WX_RECV_RED_PACKET = 67,
  WX_REDPKT_LIKE_AWARD = 68,
  WX_REDPKT_RANK_AWARD = 69,
  INVITED_REGISTER_AWARD = 70,
  LYDIAMOND_TRANSMIT = 71,
  CHARGE_GBUY = 72,
  ACT_AUTO_EXCHAGE = 73,
  COMPOSE = 74,
  CHARGE_ACT_MALL = 75,
  AMAZON_GIFT_AWARD = 76,
  RECALL_AWARD = 77,
  TEAMPVPWIN_AWARD = 78,
  MERGE_PLAYER = 79,
  ENROLL_TOURNAMENT = 80,
  WEB_SHOPPING_CONSUME = 81,
  WEB_SHOPPING_REFUND = 82,
  ALL_TOURNAMENT_CLASS_CANCEL = 83,
  TOURNAMENT_END = 84,
  LUCK_STAR = 85,
  TOURNAMENT_POINT_RANK = 86,
  CLASS_POINT_RANK = 87,
  ROUND_POINT_RANK = 88,
  SELF_GET_POINT_AWARD = 89,
  MAIL_POINT_AWARD = 90,
  TOURNAMENT_OUT = 91,
  OBSERVE_TASK = 92,
  ENROLL_FAIL_RETURN = 93,
  CHEST_CUMULATE_AWARD = 94,
  WORKSHOP_TICKET = 95,
  MAIL_AUTO_GET = 96,
  WORKSHOP_CURRENCY = 97,
  BOUNTY_ROOM = 98,
  TRANSFER_TO_OFFICIAL_ACCOUNT = 99,
  PVP_INCOME = 100,
  SOURCE_SUMSANG_ORDERGIFT = 101,
  REPORT = 102,
  PS_REVOKE = 103,
  GUILD_CREATE = 104,
  GUILD_NAME = 105,
  GUILD_SIGN = 106,
  CONVERT = 107,
  VNG_COMMENT_AWARD = 108,
  OPEN_CHOICE_CHEST = 109,
  USE_PROTECTION_CARD = 110,
  ADVERTISE_AWARD = 111,
  LEVELUP_CHEST = 112,
  TEACH_PASS_AWARD = 113,
  OPEN_PLATFORM_INTEL_EXCHANGE = 114,
  OPEN_PLATFORM_DAILY_SIGN = 115,
  OPEN_PLATFORM_ACTIVITY_REWARD = 116,
  OPEN_PLATFORM_TRADE = 117,
  OPEN_PLATFORM_GIVEAWAY = 118,
  USE_PASSPORT_CARD = 119,
  COMPLETE_TASK = 120,
  CHEST_RARE_AWARD = 121,
  BIGWINNER_AWARD = 122,
  BIGWINNER_BATTLEAWARD = 123,
  BIGWINNER_TICKET = 124,
  BIGWINNER_BATTLECONSUME = 125,
  EXCHANGE_BUY = 126,
  EXCHANGE_SELL = 127,
  EXCHANGE_FAIL = 128,
  PVP_PLAY_REWARD = 129,
  DEAL_WEB_MAIL = 130,
  NORMAL_OUT_PUT = 131,
  ACTIVITY_PUZZLE_ITEM = 132,
  BIGWINNER_SEASONEVAL = 133,
  OPEN_PLATFORM_CONVERTITEM = 134,
  PVE_CHALLENAGE_ITEM = 135,
  OPEN_PLATFORM_CONVERTDIAMOND = 136,
  PVE_CHALLENGE_RANK_AWARD = 137,
  SMELT_ITEM = 138,
  SOURCE_BIND_ACCOUNT = 139,
  SOURCCE_TRANS_OLD_ITEM = 140,
  SOURCE_IDENTIFY_ITEM = 141,
  SOURCE_INSERT_AFFIX = 142,
  PLAT_GET_AWARD = 143,
  PVP_OB_REWARD = 144,
  SET_DEFAULT_ATTRIBUTE = 145,
  EXCHANGE_UPGRADE_PASSPORT = 146,
  PVE_BUFF = 147,
  PVP_AUTHORITY_REWARD = 148,
  TD_BUY_CARD = 149,
  MENTOR_SHIP_TASK = 150,
  TD_MATERIAL = 151,
  TD_IN_USE = 152,
  TD_TAKE_OFF = 153,
  TD_WEAR = 154,
  TD_COMPOSE = 155,
  TD_LEVEL_UP = 156,
  TD_EXAWARDS = 157,
  TD_INIT = 158,
  TD_ON_HOOK = 159,
  TD_DRAW = 160,
  TD_TRANS = 161,
  TD_BUY = 162,
  TD_CAL = 163,
  TD_GM = 164,
  BALANCE_RECHARGE = 165,
  EXCHANGE_CONSUMES = 166,
  COMPLETE_MEDAL_TASK = 167,
  LY_ACTIVITY_LIMIT_DROP_AWARD = 168,
  INSURANCE_CARD_USE = 169,
  PASSPORT_SEASON_EVAL = 170,
  SOURCE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SOURCE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SOURCE_IsValid(int value);
constexpr SOURCE SOURCE_MIN = SOURCE_GM;
constexpr SOURCE SOURCE_MAX = PASSPORT_SEASON_EVAL;
constexpr int SOURCE_ARRAYSIZE = SOURCE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SOURCE_descriptor();
template<typename T>
inline const std::string& SOURCE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SOURCE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SOURCE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SOURCE_descriptor(), enum_t_value);
}
inline bool SOURCE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SOURCE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SOURCE>(
    SOURCE_descriptor(), name, value);
}
enum PLAYERSTATUS : int {
  PLAYERSTATUS_OFFLINE = 0,
  PLAYERSTATUS_HALL = 1,
  PLAYERSTATUS_PVP = 2,
  PLAYERSTATUS_TEAM = 3,
  PLAYERSTATUS_PVP_OFFLINE = 4,
  PLAYERSTATUS_OBSERVE = 5,
  PLAYERSTATUS_OBSERVE_OFFLINE = 6,
  PLAYERSTATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PLAYERSTATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PLAYERSTATUS_IsValid(int value);
constexpr PLAYERSTATUS PLAYERSTATUS_MIN = PLAYERSTATUS_OFFLINE;
constexpr PLAYERSTATUS PLAYERSTATUS_MAX = PLAYERSTATUS_OBSERVE_OFFLINE;
constexpr int PLAYERSTATUS_ARRAYSIZE = PLAYERSTATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYERSTATUS_descriptor();
template<typename T>
inline const std::string& PLAYERSTATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PLAYERSTATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PLAYERSTATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PLAYERSTATUS_descriptor(), enum_t_value);
}
inline bool PLAYERSTATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PLAYERSTATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PLAYERSTATUS>(
    PLAYERSTATUS_descriptor(), name, value);
}
enum FRIENDINVISIBLE : int {
  FRIENDINVISIBLE_NONE = 0,
  FRIENDINVISIBLE_TRUE = 1,
  FRIENDINVISIBLE_FALSE = 2,
  FRIENDINVISIBLE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FRIENDINVISIBLE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FRIENDINVISIBLE_IsValid(int value);
constexpr FRIENDINVISIBLE FRIENDINVISIBLE_MIN = FRIENDINVISIBLE_NONE;
constexpr FRIENDINVISIBLE FRIENDINVISIBLE_MAX = FRIENDINVISIBLE_FALSE;
constexpr int FRIENDINVISIBLE_ARRAYSIZE = FRIENDINVISIBLE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FRIENDINVISIBLE_descriptor();
template<typename T>
inline const std::string& FRIENDINVISIBLE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FRIENDINVISIBLE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FRIENDINVISIBLE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FRIENDINVISIBLE_descriptor(), enum_t_value);
}
inline bool FRIENDINVISIBLE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FRIENDINVISIBLE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FRIENDINVISIBLE>(
    FRIENDINVISIBLE_descriptor(), name, value);
}
enum PLATFORMTYPE : int {
  PLATFORMTYPE_OTHER = 0,
  PLATFORMTYPE_ANDROID = 1,
  PLATFORMTYPE_IOS = 2,
  PLATFORMTYPE_PC = 3,
  PLATFORMTYPE_PS4 = 4,
  PLATFORMTYPE_PS5 = 5,
  PLATFORMTYPE_END = 6,
  PLATFORMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PLATFORMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PLATFORMTYPE_IsValid(int value);
constexpr PLATFORMTYPE PLATFORMTYPE_MIN = PLATFORMTYPE_OTHER;
constexpr PLATFORMTYPE PLATFORMTYPE_MAX = PLATFORMTYPE_END;
constexpr int PLATFORMTYPE_ARRAYSIZE = PLATFORMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLATFORMTYPE_descriptor();
template<typename T>
inline const std::string& PLATFORMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PLATFORMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PLATFORMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PLATFORMTYPE_descriptor(), enum_t_value);
}
inline bool PLATFORMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PLATFORMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PLATFORMTYPE>(
    PLATFORMTYPE_descriptor(), name, value);
}
enum MAGNETISMTYPE : int {
  MAGNETISMTYPE_NONE = 0,
  MAGNETISMTYPE_1 = 1,
  MAGNETISMTYPE_2 = 2,
  MAGNETISMTYPE_3 = 3,
  MAGNETISMTYPE_4 = 4,
  MAGNETISMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MAGNETISMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MAGNETISMTYPE_IsValid(int value);
constexpr MAGNETISMTYPE MAGNETISMTYPE_MIN = MAGNETISMTYPE_NONE;
constexpr MAGNETISMTYPE MAGNETISMTYPE_MAX = MAGNETISMTYPE_4;
constexpr int MAGNETISMTYPE_ARRAYSIZE = MAGNETISMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MAGNETISMTYPE_descriptor();
template<typename T>
inline const std::string& MAGNETISMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MAGNETISMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MAGNETISMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MAGNETISMTYPE_descriptor(), enum_t_value);
}
inline bool MAGNETISMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MAGNETISMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MAGNETISMTYPE>(
    MAGNETISMTYPE_descriptor(), name, value);
}
enum PVPEND_REASON : int {
  PVPEND_GAMEOVER = 0,
  PVPEND_PLAYERDIE = 1,
  PVPEND_LEAVEEARLY = 2,
  PVPEND_REASON_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVPEND_REASON_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVPEND_REASON_IsValid(int value);
constexpr PVPEND_REASON PVPEND_REASON_MIN = PVPEND_GAMEOVER;
constexpr PVPEND_REASON PVPEND_REASON_MAX = PVPEND_LEAVEEARLY;
constexpr int PVPEND_REASON_ARRAYSIZE = PVPEND_REASON_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVPEND_REASON_descriptor();
template<typename T>
inline const std::string& PVPEND_REASON_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVPEND_REASON>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVPEND_REASON_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVPEND_REASON_descriptor(), enum_t_value);
}
inline bool PVPEND_REASON_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVPEND_REASON* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVPEND_REASON>(
    PVPEND_REASON_descriptor(), name, value);
}
enum CHANELTYPE : int {
  CHANELTYPE_GUEST = 0,
  CHANELTYPE_LY = 1,
  CHANELTYPE_4399 = 2,
  CHANELTYPE_360 = 3,
  CHANELTYPE_BAIDU = 4,
  CHANELTYPE_DANGLE = 5,
  CHANELTYPE_KUPAI = 6,
  CHANELTYPE_LIANXIANG = 7,
  CHANELTYPE_XIAOMI = 8,
  CHANELTYPE_YINGYONGHUI = 9,
  CHANELTYPE_OPPO = 10,
  CHANELTYPE_VIVO = 11,
  CHANELTYPE_HUAWEI = 12,
  CHANELTYPE_QQ = 13,
  CHANELTYPE_WX = 14,
  CHANELTYPE_UC = 15,
  CHANELTYPE_JINLI = 16,
  CHANELTYPE_MEIZU = 17,
  CHANELTYPE_LY_IOS = 18,
  CHANELTYPE_TWITTER = 19,
  CHANELTYPE_LINE = 20,
  CHANELTYPE_DMM = 21,
  CHANELTYPE_LY_JP = 22,
  CHANELTYPE_GOOGLE_PAY = 23,
  CHANELTYPE_IOS_PAY = 24,
  CHANELTYPE_BILI_GAME = 25,
  CHANELTYPE_GOOGLE_LOGIN = 26,
  CHANELTYPE_FACEBOOK = 27,
  CHANELTYPE_OPPO_OVERSEAS = 28,
  CHANELTYPE_VIETNAM_IOS = 29,
  CHANELTYPE_VIETNAM_GOOGLE = 30,
  CHANELTYPE_XIAOMI_OVERSEA = 31,
  CHANELTYPE_XIAOMI_OVERSEA2 = 32,
  CHANELTYPE_QQ_IOS_PAY = 33,
  CHANELTYPE_WX_IOS_PAY = 34,
  CHANELTYPE_VIETNAM_VNG = 35,
  CHANELTYPE_GUEST_IOS = 36,
  CHANELTYPE_QQ_ANDROID_PAY = 37,
  CHANELTYPE_WX_ANDROID_PAY = 38,
  CHANELTYPE_VIVO_OVERSEA = 39,
  CHANELTYPE_VNG_FIREBASE = 41,
  CHANELTYPE_EPIC = 42,
  CHANELTYPE_WEB_FACEBOOK = 43,
  CHANELTYPE_WEB_GOOGLE = 44,
  CHANELTYPE_SUMSANG_PAY = 45,
  CHANELTYPE_IOS = 46,
  CHANELTYPE_MAX_NUM = 47,
  CHANELTYPE_MSDK_IOS = 48,
  CHANELTYPE_SESSION = 50,
  CHANELTYPE_ID = 51,
  CHANELTYPE_AI_TRAINING = 52,
  CHANELTYPE_HUAWEI_OVERSEA = 53,
  CHANELTYPE_LAUNCHER = 54,
  CHANELTYPE_LY_IOS_PAY = 55,
  CHANELTYPE_PS4 = 56,
  CHANELTYPE_LY_OPEN_PAY = 58,
  CHANELTYPE_VIETNAM_GOOGLE_BATTLE = 59,
  CHANELTYPE_CAFE_BAZAAR = 60,
  CHANELTYPE_VIETNAM_IOS_BATTLE = 61,
  CHANELTYPE_YILEWAN = 62,
  CHANELTYPE_FEIHUO = 63,
  CHANELTYPE_FEIHUO_PC = 64,
  CHANELTYPE_WEGAME = 65,
  CHANELTYPE_WEGAME_IOS = 66,
  CHANELTYPE_WEGAME_ANDROID = 67,
  CHANELTYPE_PANGOLIN = 68,
  CHANELTYPE_ADMOB = 69,
  CHANELTYPE_PS5_PAY = 70,
  CHANELTYPE_RAZER_PAY = 71,
  CHANELTYPE_GM_PAY = 72,
  CHANELTYPE_CODA_PAY = 73,
  CHANELTYPE_LYAPI = 74,
  CHANELTYPE_AD_FACEBOOK = 75,
  CHANELTYPE_PAYPAL = 76,
  CHANELTYPE_XSOLLA = 77,
  CHANELTYPE_NOW_GG = 78,
  CHANELTYPE_STEAM_PAY = 79,
  CHANELTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHANELTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHANELTYPE_IsValid(int value);
constexpr CHANELTYPE CHANELTYPE_MIN = CHANELTYPE_GUEST;
constexpr CHANELTYPE CHANELTYPE_MAX = CHANELTYPE_STEAM_PAY;
constexpr int CHANELTYPE_ARRAYSIZE = CHANELTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHANELTYPE_descriptor();
template<typename T>
inline const std::string& CHANELTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHANELTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHANELTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHANELTYPE_descriptor(), enum_t_value);
}
inline bool CHANELTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHANELTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHANELTYPE>(
    CHANELTYPE_descriptor(), name, value);
}
enum NETTYPE : int {
  NETTYPE_NULL = 0,
  NETTYPE_MOBILENETWORK = 1,
  NETTYPE_WIFI = 2,
  NETTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NETTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NETTYPE_IsValid(int value);
constexpr NETTYPE NETTYPE_MIN = NETTYPE_NULL;
constexpr NETTYPE NETTYPE_MAX = NETTYPE_WIFI;
constexpr int NETTYPE_ARRAYSIZE = NETTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NETTYPE_descriptor();
template<typename T>
inline const std::string& NETTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NETTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NETTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NETTYPE_descriptor(), enum_t_value);
}
inline bool NETTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NETTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NETTYPE>(
    NETTYPE_descriptor(), name, value);
}
enum LOGINTYPE : int {
  LOGIN_NORMAL = 0,
  LOGIN_RECONNECT = 1,
  LOGIN_PVPFINISH = 2,
  LOGINTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LOGINTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LOGINTYPE_IsValid(int value);
constexpr LOGINTYPE LOGINTYPE_MIN = LOGIN_NORMAL;
constexpr LOGINTYPE LOGINTYPE_MAX = LOGIN_PVPFINISH;
constexpr int LOGINTYPE_ARRAYSIZE = LOGINTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LOGINTYPE_descriptor();
template<typename T>
inline const std::string& LOGINTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LOGINTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LOGINTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LOGINTYPE_descriptor(), enum_t_value);
}
inline bool LOGINTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LOGINTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LOGINTYPE>(
    LOGINTYPE_descriptor(), name, value);
}
enum LAUNCHTYPE : int {
  LAUNCH_GAME = 0,
  LAUNCH_WECHAT = 1,
  LAUNCH_QQ = 2,
  LAUNCHTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LAUNCHTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LAUNCHTYPE_IsValid(int value);
constexpr LAUNCHTYPE LAUNCHTYPE_MIN = LAUNCH_GAME;
constexpr LAUNCHTYPE LAUNCHTYPE_MAX = LAUNCH_QQ;
constexpr int LAUNCHTYPE_ARRAYSIZE = LAUNCHTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LAUNCHTYPE_descriptor();
template<typename T>
inline const std::string& LAUNCHTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LAUNCHTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LAUNCHTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LAUNCHTYPE_descriptor(), enum_t_value);
}
inline bool LAUNCHTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LAUNCHTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LAUNCHTYPE>(
    LAUNCHTYPE_descriptor(), name, value);
}
enum CHANNELVIPTYPE : int {
  CHANNELVIP_NONE = 0,
  CHANNELVIP_QQVIP = 1,
  CHANNELVIP_QQSVIP = 2,
  CHANNELVIPTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHANNELVIPTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHANNELVIPTYPE_IsValid(int value);
constexpr CHANNELVIPTYPE CHANNELVIPTYPE_MIN = CHANNELVIP_NONE;
constexpr CHANNELVIPTYPE CHANNELVIPTYPE_MAX = CHANNELVIP_QQSVIP;
constexpr int CHANNELVIPTYPE_ARRAYSIZE = CHANNELVIPTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHANNELVIPTYPE_descriptor();
template<typename T>
inline const std::string& CHANNELVIPTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHANNELVIPTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHANNELVIPTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHANNELVIPTYPE_descriptor(), enum_t_value);
}
inline bool CHANNELVIPTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHANNELVIPTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHANNELVIPTYPE>(
    CHANNELVIPTYPE_descriptor(), name, value);
}
enum CHARGERESULT_TYPE : int {
  CHARGERESULT_TYPE_NULL = 0,
  CHARGERESULT_TYPE_SUCCESS = 1,
  CHARGERESULT_TYPE_FAIL = 2,
  CHARGERESULT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHARGERESULT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHARGERESULT_TYPE_IsValid(int value);
constexpr CHARGERESULT_TYPE CHARGERESULT_TYPE_MIN = CHARGERESULT_TYPE_NULL;
constexpr CHARGERESULT_TYPE CHARGERESULT_TYPE_MAX = CHARGERESULT_TYPE_FAIL;
constexpr int CHARGERESULT_TYPE_ARRAYSIZE = CHARGERESULT_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHARGERESULT_TYPE_descriptor();
template<typename T>
inline const std::string& CHARGERESULT_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHARGERESULT_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHARGERESULT_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHARGERESULT_TYPE_descriptor(), enum_t_value);
}
inline bool CHARGERESULT_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHARGERESULT_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHARGERESULT_TYPE>(
    CHARGERESULT_TYPE_descriptor(), name, value);
}
enum CHEST_OPEN_TYPE : int {
  CHEST_OPEN_TYPE_NULL = 0,
  HIGH_SECRET = 1,
  ORDINARY_SECRET = 2,
  CHEST_OPEN_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHEST_OPEN_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHEST_OPEN_TYPE_IsValid(int value);
constexpr CHEST_OPEN_TYPE CHEST_OPEN_TYPE_MIN = CHEST_OPEN_TYPE_NULL;
constexpr CHEST_OPEN_TYPE CHEST_OPEN_TYPE_MAX = ORDINARY_SECRET;
constexpr int CHEST_OPEN_TYPE_ARRAYSIZE = CHEST_OPEN_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHEST_OPEN_TYPE_descriptor();
template<typename T>
inline const std::string& CHEST_OPEN_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHEST_OPEN_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHEST_OPEN_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHEST_OPEN_TYPE_descriptor(), enum_t_value);
}
inline bool CHEST_OPEN_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHEST_OPEN_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHEST_OPEN_TYPE>(
    CHEST_OPEN_TYPE_descriptor(), name, value);
}
enum ITEMTYPE : int {
  ITEMTYPE_NULL = 0,
  MONEY = 1,
  CHESS_PLAYER_MODEL = 2,
  SCENE = 3,
  HEAD_PIC = 4,
  CHESS_PLAYER_ACTION = 5,
  CHESS_PLAYER_PICTURE = 6,
  CHESS_PLAYER_VOICE = 7,
  BATTLE_STAR = 8,
  DIAMOND = 9,
  PLAYER_EXP = 10,
  EXP_BONUS_CARD = 11,
  CANDY_BONUS_CARD = 12,
  RENAME_CARD = 13,
  DIRECT_LEVEL_UP = 14,
  SCENE_SKIN = 15,
  CHESS_EFFECTS = 16,
  CHESS_ACTION = 17,
  CHESS_VOICE = 18,
  EMOTION = 19,
  HEAD_PIC_FRAME = 20,
  PERSONAL_BACKGROUND = 21,
  CHAT_BUBBLE = 22,
  ADVANCED_PASSPORT = 23,
  CHAT_DANMAKU = 24,
  CHESS_COMBINE_EFFECT = 25,
  STREAK_WIN_TOOLTIP = 26,
  HEAD_PIC_PENDANT = 27,
  CHICKEN_ACTION = 28,
  ROUND_BEGIN_POSE = 29,
  PASSPORT_COIN = 30,
  PASSPORT_TASK_CARD = 31,
  RAND_CHEST = 32,
  EGG_TICKET = 33,
  EXPERIENCE_CARD = 34,
  DRESS_PIECE = 35,
  GINGERBREAD_MAN = 36,
  TWO_SCENE = 37,
  CHESS_SKIN = 38,
  DIRECT_MONEY = 39,
  CHESS_PLAYER_WEAR = 40,
  CHESS_PLAYER_WEAPON = 41,
  CHESS_PLAYER_RIDE = 42,
  KEY = 43,
  TOURNAMENT_POINT_GLOBAL = 44,
  TOURNAMENT_POINT_PART = 45,
  TOURNAMENT_POINT_ROUND = 46,
  TOURNAMENT_TICKET = 47,
  DEDUCTION_COUPON = 48,
  DEDUCTION_MALL = 49,
  IT_WORKSHOP_TICKET = 50,
  CHESS_SKIN_DEBRIS = 51,
  CHESS_PLAYER_DEBRIS = 52,
  SCENE_DEBRIS = 53,
  EXPIRED_SKIN_DEBRIS = 54,
  PROTECTION_CARD = 56,
  PASSPORT_CARD = 57,
  BIGWINNER_SCORE = 58,
  MEDAL = 59,
  CHESSSKIN_SUIT = 60,
  SLAG = 61,
  ITEMTYPE_NOTUSED = 62,
  ITEMTYPE_AFFIX_SAVER = 63,
  DANMAKU_FLOOR = 64,
  ITEMTYPE_COOKIES = 65,
  ITEMTYPE_MAX_NUM = 66,
  MEDAL_SCORE = 67,
  LY_ACTIVITY_LIMIT = 68,
  INSURANCE_CARD = 69,
  ITEMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITEMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITEMTYPE_IsValid(int value);
constexpr ITEMTYPE ITEMTYPE_MIN = ITEMTYPE_NULL;
constexpr ITEMTYPE ITEMTYPE_MAX = INSURANCE_CARD;
constexpr int ITEMTYPE_ARRAYSIZE = ITEMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMTYPE_descriptor();
template<typename T>
inline const std::string& ITEMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEMTYPE_descriptor(), enum_t_value);
}
inline bool ITEMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITEMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEMTYPE>(
    ITEMTYPE_descriptor(), name, value);
}
enum ITEMQUALITY : int {
  NULL_ = 0,
  WHITE = 1,
  GREEN = 2,
  BLUE = 3,
  PURPLE = 4,
  ORANGE = 5,
  RED = 6,
  MAX_NUM = 7,
  ITEMQUALITY_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITEMQUALITY_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITEMQUALITY_IsValid(int value);
constexpr ITEMQUALITY ITEMQUALITY_MIN = NULL_;
constexpr ITEMQUALITY ITEMQUALITY_MAX = MAX_NUM;
constexpr int ITEMQUALITY_ARRAYSIZE = ITEMQUALITY_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMQUALITY_descriptor();
template<typename T>
inline const std::string& ITEMQUALITY_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEMQUALITY>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEMQUALITY_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEMQUALITY_descriptor(), enum_t_value);
}
inline bool ITEMQUALITY_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITEMQUALITY* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEMQUALITY>(
    ITEMQUALITY_descriptor(), name, value);
}
enum ITEMSHAREBG : int {
  BG_NULL = 0,
  BG_ORANGE = 1,
  BG_BROWNNESS = 2,
  BG_BLUE = 3,
  BG_GREEN = 4,
  BG_PURPLE = 5,
  BG_GRAY = 6,
  BG_MAX_NUM = 7,
  ITEMSHAREBG_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITEMSHAREBG_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITEMSHAREBG_IsValid(int value);
constexpr ITEMSHAREBG ITEMSHAREBG_MIN = BG_NULL;
constexpr ITEMSHAREBG ITEMSHAREBG_MAX = BG_MAX_NUM;
constexpr int ITEMSHAREBG_ARRAYSIZE = ITEMSHAREBG_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMSHAREBG_descriptor();
template<typename T>
inline const std::string& ITEMSHAREBG_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEMSHAREBG>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEMSHAREBG_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEMSHAREBG_descriptor(), enum_t_value);
}
inline bool ITEMSHAREBG_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITEMSHAREBG* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEMSHAREBG>(
    ITEMSHAREBG_descriptor(), name, value);
}
enum ITEMACCUMTYPE : int {
  NOT_MULTIPLY = 0,
  MULTIPLY = 1,
  ITEMACCUMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITEMACCUMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITEMACCUMTYPE_IsValid(int value);
constexpr ITEMACCUMTYPE ITEMACCUMTYPE_MIN = NOT_MULTIPLY;
constexpr ITEMACCUMTYPE ITEMACCUMTYPE_MAX = MULTIPLY;
constexpr int ITEMACCUMTYPE_ARRAYSIZE = ITEMACCUMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMACCUMTYPE_descriptor();
template<typename T>
inline const std::string& ITEMACCUMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEMACCUMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEMACCUMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEMACCUMTYPE_descriptor(), enum_t_value);
}
inline bool ITEMACCUMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITEMACCUMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEMACCUMTYPE>(
    ITEMACCUMTYPE_descriptor(), name, value);
}
enum ITEMSELLSTATUS : int {
  NOT_SELL = 0,
  SELL = 1,
  INDATE_NOT_SELL = 2,
  ITEMSELLSTATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITEMSELLSTATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITEMSELLSTATUS_IsValid(int value);
constexpr ITEMSELLSTATUS ITEMSELLSTATUS_MIN = NOT_SELL;
constexpr ITEMSELLSTATUS ITEMSELLSTATUS_MAX = INDATE_NOT_SELL;
constexpr int ITEMSELLSTATUS_ARRAYSIZE = ITEMSELLSTATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMSELLSTATUS_descriptor();
template<typename T>
inline const std::string& ITEMSELLSTATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEMSELLSTATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEMSELLSTATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEMSELLSTATUS_descriptor(), enum_t_value);
}
inline bool ITEMSELLSTATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITEMSELLSTATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEMSELLSTATUS>(
    ITEMSELLSTATUS_descriptor(), name, value);
}
enum PVPMODE : int {
  AUTO_CHESS = 0,
  AUTO_CHESS_RANK = 1,
  CUSTOM = 2,
  NEW_PLAYER = 3,
  MELEE = 4,
  TEAM_BATTLE = 5,
  TEAM_BATTLE_RANK = 6,
  COMBAT_TRAINING = 7,
  NEW_PLAYER_GUIDE = 8,
  CUSTOM_BATTLE = 9,
  TEACH_BATTLE = 11,
  AI_TRAIN = 12,
  BIGWINNER = 13,
  TWOVSTWO = 14,
  FOURVSFOUR = 15,
  FOURVSFOUR_RANK = 16,
  NIAN_PVE = 17,
  PVE = 18,
  OLD_AUTO_CHESS = 19,
  OLD_FOURVSFOUR = 20,
  TOWER_DEFENSE = 21,
  MODE_MAX_NUM = 22,
  PVPMODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVPMODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVPMODE_IsValid(int value);
constexpr PVPMODE PVPMODE_MIN = AUTO_CHESS;
constexpr PVPMODE PVPMODE_MAX = MODE_MAX_NUM;
constexpr int PVPMODE_ARRAYSIZE = PVPMODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVPMODE_descriptor();
template<typename T>
inline const std::string& PVPMODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVPMODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVPMODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVPMODE_descriptor(), enum_t_value);
}
inline bool PVPMODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVPMODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVPMODE>(
    PVPMODE_descriptor(), name, value);
}
enum TEAMGROUP : int {
  TYPE_COMPETOTPR = 0,
  TYPE_OBSERVER = 1,
  TYPE_REFEREE = 2,
  TYPE_MAX_NUM = 3,
  TEAMGROUP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TEAMGROUP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TEAMGROUP_IsValid(int value);
constexpr TEAMGROUP TEAMGROUP_MIN = TYPE_COMPETOTPR;
constexpr TEAMGROUP TEAMGROUP_MAX = TYPE_MAX_NUM;
constexpr int TEAMGROUP_ARRAYSIZE = TEAMGROUP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMGROUP_descriptor();
template<typename T>
inline const std::string& TEAMGROUP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAMGROUP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAMGROUP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAMGROUP_descriptor(), enum_t_value);
}
inline bool TEAMGROUP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAMGROUP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAMGROUP>(
    TEAMGROUP_descriptor(), name, value);
}
enum TEAMTYPE : int {
  NORMAL = 0,
  OBSERVER = 1,
  TOURNAMENT_ROOM = 3,
  TEAMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TEAMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TEAMTYPE_IsValid(int value);
constexpr TEAMTYPE TEAMTYPE_MIN = NORMAL;
constexpr TEAMTYPE TEAMTYPE_MAX = TOURNAMENT_ROOM;
constexpr int TEAMTYPE_ARRAYSIZE = TEAMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMTYPE_descriptor();
template<typename T>
inline const std::string& TEAMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAMTYPE_descriptor(), enum_t_value);
}
inline bool TEAMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAMTYPE>(
    TEAMTYPE_descriptor(), name, value);
}
enum TEAMGROUPBEGINIDX : int {
  IDX_COMPETOTPR = 0,
  IDX_REFEREE = 1000,
  IDX_OBSERVER = 2000,
  TEAMGROUPBEGINIDX_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TEAMGROUPBEGINIDX_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TEAMGROUPBEGINIDX_IsValid(int value);
constexpr TEAMGROUPBEGINIDX TEAMGROUPBEGINIDX_MIN = IDX_COMPETOTPR;
constexpr TEAMGROUPBEGINIDX TEAMGROUPBEGINIDX_MAX = IDX_OBSERVER;
constexpr int TEAMGROUPBEGINIDX_ARRAYSIZE = TEAMGROUPBEGINIDX_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMGROUPBEGINIDX_descriptor();
template<typename T>
inline const std::string& TEAMGROUPBEGINIDX_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAMGROUPBEGINIDX>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAMGROUPBEGINIDX_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAMGROUPBEGINIDX_descriptor(), enum_t_value);
}
inline bool TEAMGROUPBEGINIDX_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAMGROUPBEGINIDX* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAMGROUPBEGINIDX>(
    TEAMGROUPBEGINIDX_descriptor(), name, value);
}
enum TEAMOP : int {
  SETTING = 0,
  SWITCH_GROUP = 1,
  APPOINTLEADER = 2,
  REFRESH_SLOT = 3,
  SELF_SWITCH_GROUP = 4,
  INVITE_JOIN_TEAM = 5,
  CHANGE_NAME = 6,
  SWITCH_SLOT = 7,
  BET_ON_BOUNTY = 8,
  UPDATE_DEBUFF = 9,
  TEAMOP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TEAMOP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TEAMOP_IsValid(int value);
constexpr TEAMOP TEAMOP_MIN = SETTING;
constexpr TEAMOP TEAMOP_MAX = UPDATE_DEBUFF;
constexpr int TEAMOP_ARRAYSIZE = TEAMOP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMOP_descriptor();
template<typename T>
inline const std::string& TEAMOP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAMOP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAMOP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAMOP_descriptor(), enum_t_value);
}
inline bool TEAMOP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAMOP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAMOP>(
    TEAMOP_descriptor(), name, value);
}
enum OFFLINE_INVITE : int {
  TX_WX = 0,
  TX_QQ = 1,
  OFFLINE_INVITE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OFFLINE_INVITE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OFFLINE_INVITE_IsValid(int value);
constexpr OFFLINE_INVITE OFFLINE_INVITE_MIN = TX_WX;
constexpr OFFLINE_INVITE OFFLINE_INVITE_MAX = TX_QQ;
constexpr int OFFLINE_INVITE_ARRAYSIZE = OFFLINE_INVITE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OFFLINE_INVITE_descriptor();
template<typename T>
inline const std::string& OFFLINE_INVITE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OFFLINE_INVITE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OFFLINE_INVITE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OFFLINE_INVITE_descriptor(), enum_t_value);
}
inline bool OFFLINE_INVITE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OFFLINE_INVITE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OFFLINE_INVITE>(
    OFFLINE_INVITE_descriptor(), name, value);
}
enum WINTYPE : int {
  WINTYPE_FAIL = 0,
  WINTYPE_WIN = 1,
  WINTYPE_DRAW = 2,
  WINTYPE_NOT_UPDATE = 3,
  WINTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WINTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WINTYPE_IsValid(int value);
constexpr WINTYPE WINTYPE_MIN = WINTYPE_FAIL;
constexpr WINTYPE WINTYPE_MAX = WINTYPE_NOT_UPDATE;
constexpr int WINTYPE_ARRAYSIZE = WINTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WINTYPE_descriptor();
template<typename T>
inline const std::string& WINTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WINTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WINTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WINTYPE_descriptor(), enum_t_value);
}
inline bool WINTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WINTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WINTYPE>(
    WINTYPE_descriptor(), name, value);
}
enum RANKTYPE : int {
  RANKTYPE_NULL = 0,
  RANKTYPE_MMR = 1,
  RANKTYPE_MVP_AUTO_CHESS = 2,
  RANKTYPE_MVP_AUTO_CHESS_RANK = 3,
  RANKTYPE_MVP_NEW_PLAYER = 4,
  RANKTYPE_MVP_MELEE = 5,
  RANKTYPE_MMR_TEAM_BATTLE = 6,
  RANKTYPE_MVP_TEAM_BATTLE = 7,
  RANKTYPE_MVP_TEAM_BATTLE_RANK = 8,
  RANKTYPE_BATTLE_STAR = 9,
  RANKTYPE_PLAYER_LEVEL = 10,
  RANKTYPE_TOURNAMENT = 11,
  RANKTYPE_BIGWINNER_SEASONSCORE = 12,
  RANKTYPE_FOURVSFOUR_MMR_RANK = 13,
  RANKTYPE_MENTOR = 14,
  RANKTYPE_MAX_NUM = 15,
  RANKTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RANKTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RANKTYPE_IsValid(int value);
constexpr RANKTYPE RANKTYPE_MIN = RANKTYPE_NULL;
constexpr RANKTYPE RANKTYPE_MAX = RANKTYPE_MAX_NUM;
constexpr int RANKTYPE_ARRAYSIZE = RANKTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RANKTYPE_descriptor();
template<typename T>
inline const std::string& RANKTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RANKTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RANKTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RANKTYPE_descriptor(), enum_t_value);
}
inline bool RANKTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RANKTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RANKTYPE>(
    RANKTYPE_descriptor(), name, value);
}
enum FROZEN_TYPE : int {
  FROZEN_TYPE_NULL = 0,
  FROZEN_TYPE_ACCOUNT = 1,
  FROZEN_TYPE_DEV = 2,
  FROZEN_TYPE_CHAT = 3,
  FROZEN_TYPE_PUBLISH_STATE = 4,
  FROZEN_TYPE_GROWUP_DEFEND = 5,
  FROZEN_TYPE_MAX_NUM = 6,
  FROZEN_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FROZEN_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FROZEN_TYPE_IsValid(int value);
constexpr FROZEN_TYPE FROZEN_TYPE_MIN = FROZEN_TYPE_NULL;
constexpr FROZEN_TYPE FROZEN_TYPE_MAX = FROZEN_TYPE_MAX_NUM;
constexpr int FROZEN_TYPE_ARRAYSIZE = FROZEN_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FROZEN_TYPE_descriptor();
template<typename T>
inline const std::string& FROZEN_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FROZEN_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FROZEN_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FROZEN_TYPE_descriptor(), enum_t_value);
}
inline bool FROZEN_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FROZEN_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FROZEN_TYPE>(
    FROZEN_TYPE_descriptor(), name, value);
}
enum NOTICETYPE : int {
  NOTICETYPE_NULL = 0,
  NOTICETYPE_OPEN = 1,
  NOTICETYPE_STOP = 2,
  NOTICETYPE_FROZE_ACCOUNT = 3,
  NOTICETYPE_FROZE_DEV = 4,
  NOTICETYPE_LY_WHITE_LIST = 5,
  NOTICETYPE_ACTIVE_CODE = 6,
  NOTICETYPE_APK_UPGRADE = 7,
  NOTICETYPE_RESOURCE_UPGRADE = 8,
  NOTICETYPE_FROZE_GROWUP_DEFEND = 9,
  NOTICETYPE_PRELOGIN = 10,
  NOTICETYPE_MAX_NUM = 11,
  NOTICETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NOTICETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NOTICETYPE_IsValid(int value);
constexpr NOTICETYPE NOTICETYPE_MIN = NOTICETYPE_NULL;
constexpr NOTICETYPE NOTICETYPE_MAX = NOTICETYPE_MAX_NUM;
constexpr int NOTICETYPE_ARRAYSIZE = NOTICETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICETYPE_descriptor();
template<typename T>
inline const std::string& NOTICETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NOTICETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NOTICETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NOTICETYPE_descriptor(), enum_t_value);
}
inline bool NOTICETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NOTICETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NOTICETYPE>(
    NOTICETYPE_descriptor(), name, value);
}
enum NOTICETAP : int {
  NOTICETAP_NEW = 0,
  NOTICETAP_ACTIVITY = 1,
  NOTICETAP_SPECIAL = 2,
  NOTICETAP_COMPETITION = 3,
  NOTICETAP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NOTICETAP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NOTICETAP_IsValid(int value);
constexpr NOTICETAP NOTICETAP_MIN = NOTICETAP_NEW;
constexpr NOTICETAP NOTICETAP_MAX = NOTICETAP_COMPETITION;
constexpr int NOTICETAP_ARRAYSIZE = NOTICETAP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICETAP_descriptor();
template<typename T>
inline const std::string& NOTICETAP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NOTICETAP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NOTICETAP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NOTICETAP_descriptor(), enum_t_value);
}
inline bool NOTICETAP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NOTICETAP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NOTICETAP>(
    NOTICETAP_descriptor(), name, value);
}
enum PICNOTICEJUMPTYPE : int {
  PICNOTICEJUMPTYPE_IN = 0,
  PICNOTICEJUMPTYPE_OUT = 1,
  PICNOTICEJUMPTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PICNOTICEJUMPTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PICNOTICEJUMPTYPE_IsValid(int value);
constexpr PICNOTICEJUMPTYPE PICNOTICEJUMPTYPE_MIN = PICNOTICEJUMPTYPE_IN;
constexpr PICNOTICEJUMPTYPE PICNOTICEJUMPTYPE_MAX = PICNOTICEJUMPTYPE_OUT;
constexpr int PICNOTICEJUMPTYPE_ARRAYSIZE = PICNOTICEJUMPTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PICNOTICEJUMPTYPE_descriptor();
template<typename T>
inline const std::string& PICNOTICEJUMPTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PICNOTICEJUMPTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PICNOTICEJUMPTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PICNOTICEJUMPTYPE_descriptor(), enum_t_value);
}
inline bool PICNOTICEJUMPTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PICNOTICEJUMPTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PICNOTICEJUMPTYPE>(
    PICNOTICEJUMPTYPE_descriptor(), name, value);
}
enum ADSTYPE : int {
  ADSTYPE_NULL = 0,
  ADSTYPE_PVP_LOADING = 1,
  ADSTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ADSTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ADSTYPE_IsValid(int value);
constexpr ADSTYPE ADSTYPE_MIN = ADSTYPE_NULL;
constexpr ADSTYPE ADSTYPE_MAX = ADSTYPE_PVP_LOADING;
constexpr int ADSTYPE_ARRAYSIZE = ADSTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADSTYPE_descriptor();
template<typename T>
inline const std::string& ADSTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADSTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADSTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADSTYPE_descriptor(), enum_t_value);
}
inline bool ADSTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ADSTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADSTYPE>(
    ADSTYPE_descriptor(), name, value);
}
enum ADSPAYTYPE : int {
  ADSTYPE_ALL = 0,
  ADSTYPE_NOT_PAY = 1,
  ADSTYPE_PAY = 2,
  ADSPAYTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ADSPAYTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ADSPAYTYPE_IsValid(int value);
constexpr ADSPAYTYPE ADSPAYTYPE_MIN = ADSTYPE_ALL;
constexpr ADSPAYTYPE ADSPAYTYPE_MAX = ADSTYPE_PAY;
constexpr int ADSPAYTYPE_ARRAYSIZE = ADSPAYTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADSPAYTYPE_descriptor();
template<typename T>
inline const std::string& ADSPAYTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADSPAYTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADSPAYTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADSPAYTYPE_descriptor(), enum_t_value);
}
inline bool ADSPAYTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ADSPAYTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADSPAYTYPE>(
    ADSPAYTYPE_descriptor(), name, value);
}
enum PASSPORTTYPE : int {
  PASSPORT_UNACTIVATED = 0,
  PASSPORT_FREE = 1,
  PASSPORT_ADVANCE = 2,
  PASSPORT_ADVANCE_SUPER = 3,
  PASSPORT_ADVANCE_SEGMENT = 4,
  PASSPORT_ADVANCE_YEAR = 5,
  PASSPORTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PASSPORTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PASSPORTTYPE_IsValid(int value);
constexpr PASSPORTTYPE PASSPORTTYPE_MIN = PASSPORT_UNACTIVATED;
constexpr PASSPORTTYPE PASSPORTTYPE_MAX = PASSPORT_ADVANCE_YEAR;
constexpr int PASSPORTTYPE_ARRAYSIZE = PASSPORTTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTTYPE_descriptor();
template<typename T>
inline const std::string& PASSPORTTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PASSPORTTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PASSPORTTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PASSPORTTYPE_descriptor(), enum_t_value);
}
inline bool PASSPORTTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PASSPORTTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PASSPORTTYPE>(
    PASSPORTTYPE_descriptor(), name, value);
}
enum RELOADTYPE : int {
  RELOAD_LANGUAGE = 0,
  RELOAD_WHILE_LIST = 1,
  RELOADTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RELOADTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RELOADTYPE_IsValid(int value);
constexpr RELOADTYPE RELOADTYPE_MIN = RELOAD_LANGUAGE;
constexpr RELOADTYPE RELOADTYPE_MAX = RELOAD_WHILE_LIST;
constexpr int RELOADTYPE_ARRAYSIZE = RELOADTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RELOADTYPE_descriptor();
template<typename T>
inline const std::string& RELOADTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RELOADTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RELOADTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RELOADTYPE_descriptor(), enum_t_value);
}
inline bool RELOADTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RELOADTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RELOADTYPE>(
    RELOADTYPE_descriptor(), name, value);
}
enum TRANSACTION : int {
  TRANSACTION_ALL = 0,
  TRANSACTION_GET = 1,
  TRANSACTION_USE = 2,
  TRANSACTION_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TRANSACTION_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TRANSACTION_IsValid(int value);
constexpr TRANSACTION TRANSACTION_MIN = TRANSACTION_ALL;
constexpr TRANSACTION TRANSACTION_MAX = TRANSACTION_USE;
constexpr int TRANSACTION_ARRAYSIZE = TRANSACTION_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TRANSACTION_descriptor();
template<typename T>
inline const std::string& TRANSACTION_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TRANSACTION>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TRANSACTION_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TRANSACTION_descriptor(), enum_t_value);
}
inline bool TRANSACTION_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TRANSACTION* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TRANSACTION>(
    TRANSACTION_descriptor(), name, value);
}
enum CONDTYPE : int {
  CONDTYPE_NULL = 0,
  CHESS_PLAYER_LEVEL = 100,
  ACCUMULATIVE_RANK = 200,
  CONTINUOUS_RANK = 201,
  FIRST_PAY = 202,
  ACCUMULATIVE_PAY = 203,
  ACCUMULATIVE_COST = 204,
  ACCUMULATIVE_RANK_FETTER = 205,
  ROUND_WIN = 300,
  ROUND_STREAK_WIN = 301,
  ACCUMULATIVE_ROUND_WIN = 302,
  ALIVE_ROUND = 400,
  BUY_CHESS_PRO = 402,
  BUY_CHESS_RACE = 403,
  ACCUMULATIVE_BUY_CHESS = 405,
  ACCUMULATIVE_BUY_CHESS_PROFESSION = 406,
  ACCUMULATIVE_BUY_CHESS_RACE = 407,
  ACCUMULATIVE_BUY_CHESS_QUALITY = 408,
  SINGLE_ROUND_CHESS_BATTLE = 500,
  SINGLE_ROUND_CHESS_PRO_BATTLE = 501,
  SINGLE_ROUND_CHESS_RACE_BATTLE = 502,
  SINGLE_ROUND_CHESS_QUALITY_BATTLE = 503,
  SINGLE_ROUND_CHESS_STAR_BATTLE = 504,
  COMPOSE_CHESS_STAR_PRO = 601,
  COMPOSE_CHESS_STAR_QUALITY = 602,
  ACCUMULATIVE_COMPOSE_CHESS = 603,
  ACCUMULATIVE_COMPOSE_CHESS_STAR_PRO = 604,
  ACCUMULATIVE_COMPOSE_CHESS_STAR = 606,
  SELL_CHESS_QUALITY = 703,
  ACCUMULATIVE_SELL_CHESS = 705,
  ACCUMULATIVE_SELL_CHESS_STAR = 709,
  ACCUMULATIVE_PICKUP_EQUIP = 801,
  COMPOSE_EQUIP = 900,
  ACCUMULATIVE_COMPOSE_EQUIP = 901,
  ACCUMULATIVE_COMPOSE_EQUIP_QUALITY = 902,
  ACCUMULATIVE_GAIN_GOLD = 1004,
  ACCUMULATIVE_GAIN_GOLD_STREAK = 1005,
  ACCUMULATIVE_GAIN_GOLD_LOSS = 1006,
  ACCUMULATIVE_GAIN_GOLD_INTEREST = 1007,
  USE_GOLD = 1100,
  ACCUMULATIVE_USE_GOLD = 1104,
  ACCUMULATIVE_USE_GOLD_UPGRADE = 1105,
  ACCUMULATIVE_USE_GOLD_CHESS = 1106,
  ACCUMULATIVE_USE_GOLD_REFRESH = 1107,
  CHESS_STAR_STAR_BATTLE_AND_WIN = 1314,
  CHESS_PRO_RACE_BATTLE_AND_WIN = 1327,
  ACCOUNT_LEVEL = 1400,
  INDIVIDUAL_PVP = 1500,
  TEAMING_PVP = 1502,
  INDIVIDUAL_TEAMING_PVP = 1503,
  FINISH_PVP = 1504,
  FINISH_DAY_FIRST_WIN = 1505,
  PASS_TEACH_BATTLE = 1506,
  ACCUMULATIVE_PASS_TEACH_BATTLE = 1507,
  GAIN_ITEM_BY_ID = 1600,
  GAIN_ITEM_BY_TYPE = 1601,
  GAIN_ITEM_BY_CLASS1 = 1602,
  GAIN_DIFF_ITEM_SKIN_QUALITY = 1603,
  GAIN_FROM_SMELT_ITEM = 1604,
  ACCUMULATIVE_SHARE = 1900,
  DAILY_SHARE = 1901,
  ACCUMULATIVE_FOLLOW_EACH_OTHER = 2003,
  COMPLETE_SEASON_CHALLENGE = 2101,
  COMPLETE_WEEK_CHALLENGE = 2102,
  ACCUMULATIVE_WEEK_CHALLENGE = 2103,
  ACCUMULATIVE_NEW_PLAYER_TASK = 2104,
  COMPLETE_CURRENT_WEEK_CHALLENGE = 2105,
  ACCUMULATIVE_RETURN_TASK = 2106,
  ACCUMULATIVE_TASK = 2107,
  ACCUMULATIVE_NEW_PLAYER_ACT_TASK = 2108,
  SKIP_CLIENT_INTERFACE = 2200,
  PLAYER_CUP = 2300,
  SEASON_PLAYER_CUP = 2301,
  HISTORY_MAX_PLAYER_CUP = 2302,
  ACCUMULATIVE_BUY_EGG = 2400,
  ACCUMULATIVE_LOGIN = 2500,
  SEASON_ACCUMULATIVE_LOGIN = 2501,
  FRIENDS_INGAME = 2600,
  ALL_FIGHT_TOTAL = 2700,
  ALL_FIGHT_ONE = 2701,
  REALATIONSHIP_STAR = 2800,
  BUFF_ACT = 2801,
  OBSERVE_DURATION = 2802,
  OBSERVE_MODE = 2812,
  RECRUIT_PLAYER_BATTLECOUNT = 2803,
  RECRUIT_WITHINVITER_FIGHT = 2804,
  RECRUIT_WITHRECRUIT_FIGHT = 2805,
  GUILD_CREATE_JOIN = 2900,
  CHANGE_RECOMMEND_LINEUP = 2950,
  CHANGE_DRESS = 2951,
  GAIN_WINNER_SCORE = 3200,
  PASSPORT_TASKS_COMPLETED = 3201,
  SEASON_GAIN_WINNER_SCORE = 3202,
  PVE_GAIN_SCORE = 3203,
  PVE_CUSTOM_GAIN_SCORE = 3204,
  ACCUMULATIVE_COLLECT_SET_MEDAL = 3300,
  SEASON_PLAYER_OVER_CUP = 3301,
  ACCUMULATIVE_UNLOCK_CHESS_STAR = 3400,
  ACCUMULATIVE_TOURNAMENT_BATTLE = 3600,
  MENTOR_INVITE_MSG = 4000,
  MENTOR_PLAYER_CUP = 4001,
  MENTOR_GRADUATE_PUPIL_NUM = 4002,
  COMMON_PAY = 5000,
  CONDTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CONDTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CONDTYPE_IsValid(int value);
constexpr CONDTYPE CONDTYPE_MIN = CONDTYPE_NULL;
constexpr CONDTYPE CONDTYPE_MAX = COMMON_PAY;
constexpr int CONDTYPE_ARRAYSIZE = CONDTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONDTYPE_descriptor();
template<typename T>
inline const std::string& CONDTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CONDTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CONDTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CONDTYPE_descriptor(), enum_t_value);
}
inline bool CONDTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CONDTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CONDTYPE>(
    CONDTYPE_descriptor(), name, value);
}
enum PASSPORTTASKTYPE : int {
  PASSPORTTASKTYPE_NULL = 0,
  WEEKLY_TASK = 1,
  WEEKLY_REFRESH = 2,
  SEASON_TASK = 3,
  DAILY_REFRESH = 4,
  DAILY_TASK = 5,
  PASSPORTTASKTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PASSPORTTASKTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PASSPORTTASKTYPE_IsValid(int value);
constexpr PASSPORTTASKTYPE PASSPORTTASKTYPE_MIN = PASSPORTTASKTYPE_NULL;
constexpr PASSPORTTASKTYPE PASSPORTTASKTYPE_MAX = DAILY_TASK;
constexpr int PASSPORTTASKTYPE_ARRAYSIZE = PASSPORTTASKTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTTASKTYPE_descriptor();
template<typename T>
inline const std::string& PASSPORTTASKTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PASSPORTTASKTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PASSPORTTASKTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PASSPORTTASKTYPE_descriptor(), enum_t_value);
}
inline bool PASSPORTTASKTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PASSPORTTASKTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PASSPORTTASKTYPE>(
    PASSPORTTASKTYPE_descriptor(), name, value);
}
enum SHOPTYPE : int {
  SHOPTYPE_NULL = 0,
  SHOPTYPE_EGG = 1,
  SHOPTYPE_SPECIAL_GIFT = 2,
  SHOPTYPE_TIMED_EXCHANGE = 3,
  SHOPTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SHOPTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SHOPTYPE_IsValid(int value);
constexpr SHOPTYPE SHOPTYPE_MIN = SHOPTYPE_NULL;
constexpr SHOPTYPE SHOPTYPE_MAX = SHOPTYPE_TIMED_EXCHANGE;
constexpr int SHOPTYPE_ARRAYSIZE = SHOPTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SHOPTYPE_descriptor();
template<typename T>
inline const std::string& SHOPTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SHOPTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SHOPTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SHOPTYPE_descriptor(), enum_t_value);
}
inline bool SHOPTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SHOPTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SHOPTYPE>(
    SHOPTYPE_descriptor(), name, value);
}
enum PAYRESULT : int {
  PAYRESULT_SUCCESS = 0,
  PAYRESULT_FAIL = 1,
  PAYRESULT_OTHER = 2,
  PAYRESULT_NO_ORDER_DATA = 3,
  PAYRESULT_ORDER_PAYED = 4,
  PAYRESULT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PAYRESULT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PAYRESULT_IsValid(int value);
constexpr PAYRESULT PAYRESULT_MIN = PAYRESULT_SUCCESS;
constexpr PAYRESULT PAYRESULT_MAX = PAYRESULT_ORDER_PAYED;
constexpr int PAYRESULT_ARRAYSIZE = PAYRESULT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PAYRESULT_descriptor();
template<typename T>
inline const std::string& PAYRESULT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PAYRESULT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PAYRESULT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PAYRESULT_descriptor(), enum_t_value);
}
inline bool PAYRESULT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PAYRESULT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PAYRESULT>(
    PAYRESULT_descriptor(), name, value);
}
enum CURRENCYTYPE : int {
  CURRENCY_RMB = 0,
  CURRENCY_DOLLAR = 1,
  CURRENCY_RUPEE = 2,
  CURRENCY_INDONESIAN_RUPIAH = 3,
  CURRENCY_TAIWAN_DOLLAR = 4,
  CURRENCY_VIETNAMESE_DONG = 5,
  CURRENCY_THAI_BAHT = 6,
  CURRENCY_PHILIPPINE_PESO = 7,
  CURRENCY_RINGGIT = 8,
  CURRENCY_BRAZIL_BRL = 9,
  CURRENCY_IRAN_TOMANS = 10,
  CURRENCY_SINGAPORE_SGD = 11,
  CURRENCY_UNKNOWN = 99,
  CURRENCYTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CURRENCYTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CURRENCYTYPE_IsValid(int value);
constexpr CURRENCYTYPE CURRENCYTYPE_MIN = CURRENCY_RMB;
constexpr CURRENCYTYPE CURRENCYTYPE_MAX = CURRENCY_UNKNOWN;
constexpr int CURRENCYTYPE_ARRAYSIZE = CURRENCYTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CURRENCYTYPE_descriptor();
template<typename T>
inline const std::string& CURRENCYTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CURRENCYTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CURRENCYTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CURRENCYTYPE_descriptor(), enum_t_value);
}
inline bool CURRENCYTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CURRENCYTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CURRENCYTYPE>(
    CURRENCYTYPE_descriptor(), name, value);
}
enum NOTICESHOWTYPE : int {
  NOTICESHOW_NULL = 0,
  NOTICESHOW_DEFAULT = 1,
  NOTICESHOW_POP = 2,
  NOTICESHOWTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NOTICESHOWTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NOTICESHOWTYPE_IsValid(int value);
constexpr NOTICESHOWTYPE NOTICESHOWTYPE_MIN = NOTICESHOW_NULL;
constexpr NOTICESHOWTYPE NOTICESHOWTYPE_MAX = NOTICESHOW_POP;
constexpr int NOTICESHOWTYPE_ARRAYSIZE = NOTICESHOWTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICESHOWTYPE_descriptor();
template<typename T>
inline const std::string& NOTICESHOWTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NOTICESHOWTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NOTICESHOWTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NOTICESHOWTYPE_descriptor(), enum_t_value);
}
inline bool NOTICESHOWTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NOTICESHOWTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NOTICESHOWTYPE>(
    NOTICESHOWTYPE_descriptor(), name, value);
}
enum NOTICECONTENTTYPE : int {
  NOTICECONTENT_NULL = 0,
  NOTICECONTENT_TEXT = 1,
  NOTICECONTENT_PICTURE = 2,
  NOTICECONTENT_WEB = 3,
  NOTICECONTENT_PICTURE_TEXT = 4,
  NOTICECONTENTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NOTICECONTENTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NOTICECONTENTTYPE_IsValid(int value);
constexpr NOTICECONTENTTYPE NOTICECONTENTTYPE_MIN = NOTICECONTENT_NULL;
constexpr NOTICECONTENTTYPE NOTICECONTENTTYPE_MAX = NOTICECONTENT_PICTURE_TEXT;
constexpr int NOTICECONTENTTYPE_ARRAYSIZE = NOTICECONTENTTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICECONTENTTYPE_descriptor();
template<typename T>
inline const std::string& NOTICECONTENTTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NOTICECONTENTTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NOTICECONTENTTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NOTICECONTENTTYPE_descriptor(), enum_t_value);
}
inline bool NOTICECONTENTTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NOTICECONTENTTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NOTICECONTENTTYPE>(
    NOTICECONTENTTYPE_descriptor(), name, value);
}
enum ACTIVITYTYPE : int {
  ACTIVITY_NULL = 0,
  ACTIVITY_NEW_PLAYER = 1,
  ACTIVITY_FIRST_CHARGE = 2,
  ACTIVITY_PASSPORT_TYPE_2 = 3,
  ACTIVITY_PASSPORT_TYPE_3 = 4,
  ACTIVITY_FRIENDS_INGAME = 5,
  ACTIVITY_ALL_FIGHT = 6,
  ACTIVITY_SHARING_CODE = 7,
  ACTIVITY_ACCUMULATIVE_PAY = 8,
  ACTIVITY_ACCUMULATIVE_COST = 9,
  ACTIVITY_FIRST_PAY = 10,
  ACTIVITY_ITEM_EXCHANGE = 11,
  ACTIVITY_REALATIONSHIP_STAR = 12,
  ACTIVITY_LIMIT_TIME_BUFF = 13,
  ACTIVITY_GROUP_BUY = 14,
  ACTIVITY_H5_LINKS = 15,
  ACTIVITY_RETURN = 16,
  ACTIVITY_WXVVIP_RED_PACKET = 17,
  ACTIVITY_SHARE = 18,
  ACTIVITY_CYBER_WEEK = 19,
  ACTIVITY_YEAR_END_GIFTS = 20,
  ACTIVITY_QUESTIONNAIRE = 21,
  ACTIVITY_TRAFFIC_STEERING = 22,
  ACTIVITY_LIMIT_TIME_MALL = 23,
  ACTIVITY_SHARE_NEWS = 24,
  ACTIVITY_H5_LINKS_OVERSEAS = 25,
  ACTIVITY_H5_TWITCH_PRIME = 26,
  RETURN_SLIDESHOW = 27,
  ACTIVITY_RECRUIT = 28,
  ACTIVITY_RETURN_MALL = 29,
  ACTIVITY_CHEST = 30,
  ACTIVITY_LUCK_MALL = 31,
  ACTIVITY_SIGN = 32,
  ACTIVITY_TASK = 33,
  ACTIVITY_GOA_QUESTIONNAIRE = 34,
  ACTIVITY_NEWPLAYER_GIFT = 35,
  ACTIVITY_NEWPLAYER_MALL = 36,
  ACTIVITY_PUZZLE = 37,
  ACTIVITY_PVE_CHALLENGE = 38,
  ACTIVITY_RETURN_GUILD = 39,
  ACTIVITY_NEWPLAYER_SHORTCUT = 40,
  ACTIVITY_PVE = 41,
  ACTIVITY_LY_LIMIT = 42,
  ACTIVITYTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ACTIVITYTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ACTIVITYTYPE_IsValid(int value);
constexpr ACTIVITYTYPE ACTIVITYTYPE_MIN = ACTIVITY_NULL;
constexpr ACTIVITYTYPE ACTIVITYTYPE_MAX = ACTIVITY_LY_LIMIT;
constexpr int ACTIVITYTYPE_ARRAYSIZE = ACTIVITYTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACTIVITYTYPE_descriptor();
template<typename T>
inline const std::string& ACTIVITYTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ACTIVITYTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ACTIVITYTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ACTIVITYTYPE_descriptor(), enum_t_value);
}
inline bool ACTIVITYTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ACTIVITYTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ACTIVITYTYPE>(
    ACTIVITYTYPE_descriptor(), name, value);
}
enum HISTORYPVPSHOWPERMISSION : int {
  SHOWPERMISSION_ALL = 0,
  SHOWPERMISSION_FANS = 1,
  SHOWPERMISSION_DENIED = 2,
  HISTORYPVPSHOWPERMISSION_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HISTORYPVPSHOWPERMISSION_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HISTORYPVPSHOWPERMISSION_IsValid(int value);
constexpr HISTORYPVPSHOWPERMISSION HISTORYPVPSHOWPERMISSION_MIN = SHOWPERMISSION_ALL;
constexpr HISTORYPVPSHOWPERMISSION HISTORYPVPSHOWPERMISSION_MAX = SHOWPERMISSION_DENIED;
constexpr int HISTORYPVPSHOWPERMISSION_ARRAYSIZE = HISTORYPVPSHOWPERMISSION_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HISTORYPVPSHOWPERMISSION_descriptor();
template<typename T>
inline const std::string& HISTORYPVPSHOWPERMISSION_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HISTORYPVPSHOWPERMISSION>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HISTORYPVPSHOWPERMISSION_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HISTORYPVPSHOWPERMISSION_descriptor(), enum_t_value);
}
inline bool HISTORYPVPSHOWPERMISSION_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HISTORYPVPSHOWPERMISSION* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HISTORYPVPSHOWPERMISSION>(
    HISTORYPVPSHOWPERMISSION_descriptor(), name, value);
}
enum CHATTYPE : int {
  CHATTYPE_All = 0,
  CHATTYPE_WORLD = 1,
  CHATTYPE_PERSONAL = 2,
  CHATTYPE_TEAM = 3,
  CHATTYPE_BATTLE = 4,
  CHATTYPE_CAMP = 5,
  CHATTYPE_INVITE = 6,
  CHATTYPE_WATCHER = 7,
  CHATTYPE_BATTLE_OBSERVER = 8,
  CHATTYPE_BATTLE_COMPETOTPR = 9,
  CHATTYPE_STEAM = 10,
  CHATTYPE_GUILD = 11,
  CHATTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHATTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHATTYPE_IsValid(int value);
constexpr CHATTYPE CHATTYPE_MIN = CHATTYPE_All;
constexpr CHATTYPE CHATTYPE_MAX = CHATTYPE_GUILD;
constexpr int CHATTYPE_ARRAYSIZE = CHATTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHATTYPE_descriptor();
template<typename T>
inline const std::string& CHATTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHATTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHATTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHATTYPE_descriptor(), enum_t_value);
}
inline bool CHATTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHATTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHATTYPE>(
    CHATTYPE_descriptor(), name, value);
}
enum CHATSOURCETYPE : int {
  PLAYER = 0,
  RECOMMEND_SHARE = 1,
  CHATSOURCETYPE_SHOW_MEDAL = 2,
  CHATSOURCETYPE_MEDAL_EMOTION = 3,
  COMMON_JSON_SHARE = 4,
  VOICE = 5,
  CHATSOURCETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHATSOURCETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHATSOURCETYPE_IsValid(int value);
constexpr CHATSOURCETYPE CHATSOURCETYPE_MIN = PLAYER;
constexpr CHATSOURCETYPE CHATSOURCETYPE_MAX = VOICE;
constexpr int CHATSOURCETYPE_ARRAYSIZE = CHATSOURCETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHATSOURCETYPE_descriptor();
template<typename T>
inline const std::string& CHATSOURCETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHATSOURCETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHATSOURCETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHATSOURCETYPE_descriptor(), enum_t_value);
}
inline bool CHATSOURCETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHATSOURCETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHATSOURCETYPE>(
    CHATSOURCETYPE_descriptor(), name, value);
}
enum SWITCHTYPE : int {
  SWITCHTYPE_NULL = 0,
  BAG_SELL_ITEM = 100,
  CHAT_All = 200,
  PVPMODE_AUTO_CHESS = 300,
  PVPMODE_AUTO_CHESS_RANK = 301,
  PVPMODE_CUSTOM = 302,
  PVPMODE_NEW_PLAYER = 303,
  PVPMODE_MELEE = 304,
  PVPMODE_TEAM_BATTLE = 305,
  PVPMODE_TEAM_BATTLE_RANK = 306,
  PVPMODE_TEACH_BATTLE = 307,
  PVPMODE_COMBAT_TRAINING = 308,
  PVPMODE_AI_TRAIN = 309,
  PVPMODE_FOURVSFOUR = 310,
  PVPMODE_FOURVSFOUR_RANK = 311,
  MAKE_ROOM = 400,
  MAKE_TEAM = 500,
  ACTIVITY_NEWPLAYER = 600,
  SHOP_EGG = 700,
  SHARE_FINGHT = 800,
  SHARE_PLATER_INFO = 801,
  PASSPORT = 900,
  SYSTEM_MAIL = 1000,
  RANK_WORLD = 1100,
  RANK_FOLLOW = 1101,
  OPEN_GM = 1200,
  CLOSE_GM_LV_LIMIT = 1201,
  ADD_FRIEND = 1300,
  PVPMODE_ALL_WITHOUT_NEW_PLAYER = 1400,
  SWITCH_TOURNAMENT = 1500,
  SWITCH_OBSERVE = 1600,
  SWITCH_LUCKSTAR = 1700,
  SWITCH_OPENPLAT = 1800,
  SWITCH_GROUPBUY = 1900,
  SWITCHTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SWITCHTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SWITCHTYPE_IsValid(int value);
constexpr SWITCHTYPE SWITCHTYPE_MIN = SWITCHTYPE_NULL;
constexpr SWITCHTYPE SWITCHTYPE_MAX = SWITCH_GROUPBUY;
constexpr int SWITCHTYPE_ARRAYSIZE = SWITCHTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SWITCHTYPE_descriptor();
template<typename T>
inline const std::string& SWITCHTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SWITCHTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SWITCHTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SWITCHTYPE_descriptor(), enum_t_value);
}
inline bool SWITCHTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SWITCHTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SWITCHTYPE>(
    SWITCHTYPE_descriptor(), name, value);
}
enum MALLTABTYPE : int {
  TAB_NULL = 0,
  TAB_TIME_LIMIT = 1,
  TAB_GENERAL = 2,
  TAB_RECOMMEND = 3,
  TAB_ACTIVITY = 4,
  TAB_RETURN = 5,
  TAB_LUCK = 6,
  TAB_BIGWINNER = 7,
  MALLTABTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MALLTABTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MALLTABTYPE_IsValid(int value);
constexpr MALLTABTYPE MALLTABTYPE_MIN = TAB_NULL;
constexpr MALLTABTYPE MALLTABTYPE_MAX = TAB_BIGWINNER;
constexpr int MALLTABTYPE_ARRAYSIZE = MALLTABTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MALLTABTYPE_descriptor();
template<typename T>
inline const std::string& MALLTABTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MALLTABTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MALLTABTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MALLTABTYPE_descriptor(), enum_t_value);
}
inline bool MALLTABTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MALLTABTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MALLTABTYPE>(
    MALLTABTYPE_descriptor(), name, value);
}
enum SKIPTYPE : int {
  PAGE = 0,
  GOODS = 1,
  VIDEO = 2,
  SKIPTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SKIPTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SKIPTYPE_IsValid(int value);
constexpr SKIPTYPE SKIPTYPE_MIN = PAGE;
constexpr SKIPTYPE SKIPTYPE_MAX = VIDEO;
constexpr int SKIPTYPE_ARRAYSIZE = SKIPTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKIPTYPE_descriptor();
template<typename T>
inline const std::string& SKIPTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SKIPTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SKIPTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SKIPTYPE_descriptor(), enum_t_value);
}
inline bool SKIPTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SKIPTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SKIPTYPE>(
    SKIPTYPE_descriptor(), name, value);
}
enum JOINTEAMTYPE : int {
  Invited = 0,
  Num = 1,
  Link = 2,
  OfflineInvited = 3,
  PlatMatch = 4,
  Tournament = 5,
  Reconnect = 6,
  InvalidType = 254,
  JOINTEAMTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JOINTEAMTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JOINTEAMTYPE_IsValid(int value);
constexpr JOINTEAMTYPE JOINTEAMTYPE_MIN = Invited;
constexpr JOINTEAMTYPE JOINTEAMTYPE_MAX = InvalidType;
constexpr int JOINTEAMTYPE_ARRAYSIZE = JOINTEAMTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JOINTEAMTYPE_descriptor();
template<typename T>
inline const std::string& JOINTEAMTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JOINTEAMTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JOINTEAMTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JOINTEAMTYPE_descriptor(), enum_t_value);
}
inline bool JOINTEAMTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JOINTEAMTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JOINTEAMTYPE>(
    JOINTEAMTYPE_descriptor(), name, value);
}
enum BUFFACTSTATUS : int {
  BUFFACTSTATUS_NONE = 0,
  BUFFACTSTATUS_START = 1,
  BUFFACTSTATUS_END = 2,
  BUFFACTSTATUS_ENDSHOW = 3,
  BUFFACTSTATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BUFFACTSTATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BUFFACTSTATUS_IsValid(int value);
constexpr BUFFACTSTATUS BUFFACTSTATUS_MIN = BUFFACTSTATUS_NONE;
constexpr BUFFACTSTATUS BUFFACTSTATUS_MAX = BUFFACTSTATUS_ENDSHOW;
constexpr int BUFFACTSTATUS_ARRAYSIZE = BUFFACTSTATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BUFFACTSTATUS_descriptor();
template<typename T>
inline const std::string& BUFFACTSTATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BUFFACTSTATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BUFFACTSTATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BUFFACTSTATUS_descriptor(), enum_t_value);
}
inline bool BUFFACTSTATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BUFFACTSTATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BUFFACTSTATUS>(
    BUFFACTSTATUS_descriptor(), name, value);
}
enum SMSTYPE : int {
  SMSTYPE_LY = 0,
  SMSTYPE_TENCENT = 1,
  SMSTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SMSTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SMSTYPE_IsValid(int value);
constexpr SMSTYPE SMSTYPE_MIN = SMSTYPE_LY;
constexpr SMSTYPE SMSTYPE_MAX = SMSTYPE_TENCENT;
constexpr int SMSTYPE_ARRAYSIZE = SMSTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SMSTYPE_descriptor();
template<typename T>
inline const std::string& SMSTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SMSTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SMSTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SMSTYPE_descriptor(), enum_t_value);
}
inline bool SMSTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SMSTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SMSTYPE>(
    SMSTYPE_descriptor(), name, value);
}
enum OBSERVELISTTYPE : int {
  OBSERVE_RECOMMEND = 0,
  OBSERVE_FOLLOW = 1,
  OBSERVE_TOURNAMENT = 2,
  OBSERVELISTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OBSERVELISTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OBSERVELISTTYPE_IsValid(int value);
constexpr OBSERVELISTTYPE OBSERVELISTTYPE_MIN = OBSERVE_RECOMMEND;
constexpr OBSERVELISTTYPE OBSERVELISTTYPE_MAX = OBSERVE_TOURNAMENT;
constexpr int OBSERVELISTTYPE_ARRAYSIZE = OBSERVELISTTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBSERVELISTTYPE_descriptor();
template<typename T>
inline const std::string& OBSERVELISTTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OBSERVELISTTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OBSERVELISTTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OBSERVELISTTYPE_descriptor(), enum_t_value);
}
inline bool OBSERVELISTTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OBSERVELISTTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OBSERVELISTTYPE>(
    OBSERVELISTTYPE_descriptor(), name, value);
}
enum WEBOP : int {
  WEBOP_NULL = 0,
  WEBOP_BIND_ACC = 1,
  WEBOP_TRANSFER_TO_OFFICIAL_ACCOUNT = 2,
  WEBOP_EXCHANGE_SELL = 3,
  WEBOP_EXCHANGE_GIFT = 4,
  WEBOP_EXCHANGE_RECEIVE = 5,
  WEBOP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WEBOP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WEBOP_IsValid(int value);
constexpr WEBOP WEBOP_MIN = WEBOP_NULL;
constexpr WEBOP WEBOP_MAX = WEBOP_EXCHANGE_RECEIVE;
constexpr int WEBOP_ARRAYSIZE = WEBOP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WEBOP_descriptor();
template<typename T>
inline const std::string& WEBOP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WEBOP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WEBOP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WEBOP_descriptor(), enum_t_value);
}
inline bool WEBOP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WEBOP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WEBOP>(
    WEBOP_descriptor(), name, value);
}
enum WEBRESULT : int {
  WEB_RESULT_OK = 0,
  WEB_RESULT_CANCEL = 1,
  WEBRESULT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WEBRESULT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WEBRESULT_IsValid(int value);
constexpr WEBRESULT WEBRESULT_MIN = WEB_RESULT_OK;
constexpr WEBRESULT WEBRESULT_MAX = WEB_RESULT_CANCEL;
constexpr int WEBRESULT_ARRAYSIZE = WEBRESULT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WEBRESULT_descriptor();
template<typename T>
inline const std::string& WEBRESULT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WEBRESULT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WEBRESULT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WEBRESULT_descriptor(), enum_t_value);
}
inline bool WEBRESULT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WEBRESULT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WEBRESULT>(
    WEBRESULT_descriptor(), name, value);
}
enum PUNISHMENTBEHAVIOR : int {
  BEHAVIOR_NULL = 0,
  MATCH_SUCCESS_NOT_CONFIRM = 1,
  MATCH_SUCCESS_OFFLINE = 2,
  GIVE_UP_AHEAD = 3,
  AWAY_FROM_KEYBOARD = 4,
  PUNISHMENTBEHAVIOR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PUNISHMENTBEHAVIOR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PUNISHMENTBEHAVIOR_IsValid(int value);
constexpr PUNISHMENTBEHAVIOR PUNISHMENTBEHAVIOR_MIN = BEHAVIOR_NULL;
constexpr PUNISHMENTBEHAVIOR PUNISHMENTBEHAVIOR_MAX = AWAY_FROM_KEYBOARD;
constexpr int PUNISHMENTBEHAVIOR_ARRAYSIZE = PUNISHMENTBEHAVIOR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUNISHMENTBEHAVIOR_descriptor();
template<typename T>
inline const std::string& PUNISHMENTBEHAVIOR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PUNISHMENTBEHAVIOR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PUNISHMENTBEHAVIOR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PUNISHMENTBEHAVIOR_descriptor(), enum_t_value);
}
inline bool PUNISHMENTBEHAVIOR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PUNISHMENTBEHAVIOR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PUNISHMENTBEHAVIOR>(
    PUNISHMENTBEHAVIOR_descriptor(), name, value);
}
enum PUNISHMENTTYPE : int {
  PUNISHMENT_NULL = 0,
  FORBID_PLAY_GAME = 1,
  FORBID_CHAT = 2,
  FROZEN_ACCOUNT = 3,
  FROZEN_DEVICE = 4,
  PUNISHMENTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PUNISHMENTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PUNISHMENTTYPE_IsValid(int value);
constexpr PUNISHMENTTYPE PUNISHMENTTYPE_MIN = PUNISHMENT_NULL;
constexpr PUNISHMENTTYPE PUNISHMENTTYPE_MAX = FROZEN_DEVICE;
constexpr int PUNISHMENTTYPE_ARRAYSIZE = PUNISHMENTTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUNISHMENTTYPE_descriptor();
template<typename T>
inline const std::string& PUNISHMENTTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PUNISHMENTTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PUNISHMENTTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PUNISHMENTTYPE_descriptor(), enum_t_value);
}
inline bool PUNISHMENTTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PUNISHMENTTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PUNISHMENTTYPE>(
    PUNISHMENTTYPE_descriptor(), name, value);
}
enum BANNERTYPE : int {
  BANNERTYPE_NULL = 0,
  BANNERTYPE_HALL = 1,
  BANNERTYPE_MALL_THREE = 2,
  BANNERTYPE_FIRST_PAY = 3,
  BANNERTYPE_BAG = 4,
  BANNERTYPE_MAP = 5,
  BANNERTYPE_HALL_MODE = 6,
  BANNERTYPE_MALL_ONE = 7,
  BANNERTYPE_MAX_NUM = 8,
  BANNERTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BANNERTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BANNERTYPE_IsValid(int value);
constexpr BANNERTYPE BANNERTYPE_MIN = BANNERTYPE_NULL;
constexpr BANNERTYPE BANNERTYPE_MAX = BANNERTYPE_MAX_NUM;
constexpr int BANNERTYPE_ARRAYSIZE = BANNERTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BANNERTYPE_descriptor();
template<typename T>
inline const std::string& BANNERTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BANNERTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BANNERTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BANNERTYPE_descriptor(), enum_t_value);
}
inline bool BANNERTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BANNERTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BANNERTYPE>(
    BANNERTYPE_descriptor(), name, value);
}
enum ACCOUNT_STATUS : int {
  ACCOUNT_STATUS_NORMAL = 0,
  ACCOUNT_STATUS_LOGOFF = 1,
  ACCOUNT_STATUS_LOGOFF_PROGRESS = 2,
  ACCOUNT_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ACCOUNT_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ACCOUNT_STATUS_IsValid(int value);
constexpr ACCOUNT_STATUS ACCOUNT_STATUS_MIN = ACCOUNT_STATUS_NORMAL;
constexpr ACCOUNT_STATUS ACCOUNT_STATUS_MAX = ACCOUNT_STATUS_LOGOFF_PROGRESS;
constexpr int ACCOUNT_STATUS_ARRAYSIZE = ACCOUNT_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACCOUNT_STATUS_descriptor();
template<typename T>
inline const std::string& ACCOUNT_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ACCOUNT_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ACCOUNT_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ACCOUNT_STATUS_descriptor(), enum_t_value);
}
inline bool ACCOUNT_STATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ACCOUNT_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ACCOUNT_STATUS>(
    ACCOUNT_STATUS_descriptor(), name, value);
}
enum ABTESTTYPE : int {
  AB_NULL = 0,
  AB_PASSPORT = 1,
  AB_NEWGUIDE = 2,
  AB_ADVERTISE = 3,
  AB_NEWPLAYER = 4,
  AB_PERSONAL_MALL = 5,
  ABTESTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ABTESTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ABTESTTYPE_IsValid(int value);
constexpr ABTESTTYPE ABTESTTYPE_MIN = AB_NULL;
constexpr ABTESTTYPE ABTESTTYPE_MAX = AB_PERSONAL_MALL;
constexpr int ABTESTTYPE_ARRAYSIZE = ABTESTTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ABTESTTYPE_descriptor();
template<typename T>
inline const std::string& ABTESTTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ABTESTTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ABTESTTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ABTESTTYPE_descriptor(), enum_t_value);
}
inline bool ABTESTTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ABTESTTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ABTESTTYPE>(
    ABTESTTYPE_descriptor(), name, value);
}
enum LABELTYPE : int {
  LABELTYPE_NULL = 0,
  LABELTYPE_LINKAGE = 1,
  LABELTYPE_COMMUNITY = 2,
  LABELTYPE_COMPETITION = 3,
  LABELTYPE_ACTIVITY = 4,
  LABELTYPE_LIVE = 5,
  LABELTYPE_UPDATE = 6,
  LABELTYPE_REPAIR = 7,
  LABELTYPE_PUNISHMENT = 8,
  LABELTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LABELTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LABELTYPE_IsValid(int value);
constexpr LABELTYPE LABELTYPE_MIN = LABELTYPE_NULL;
constexpr LABELTYPE LABELTYPE_MAX = LABELTYPE_PUNISHMENT;
constexpr int LABELTYPE_ARRAYSIZE = LABELTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LABELTYPE_descriptor();
template<typename T>
inline const std::string& LABELTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LABELTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LABELTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LABELTYPE_descriptor(), enum_t_value);
}
inline bool LABELTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LABELTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LABELTYPE>(
    LABELTYPE_descriptor(), name, value);
}
enum INVITETYPE : int {
  INVITE_NULL = 0,
  INVITE_TEAM = 1,
  INVITE_OBSERVE = 2,
  INVITE_GUILD = 3,
  INVITETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  INVITETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool INVITETYPE_IsValid(int value);
constexpr INVITETYPE INVITETYPE_MIN = INVITE_NULL;
constexpr INVITETYPE INVITETYPE_MAX = INVITE_GUILD;
constexpr int INVITETYPE_ARRAYSIZE = INVITETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INVITETYPE_descriptor();
template<typename T>
inline const std::string& INVITETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, INVITETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function INVITETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    INVITETYPE_descriptor(), enum_t_value);
}
inline bool INVITETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, INVITETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<INVITETYPE>(
    INVITETYPE_descriptor(), name, value);
}
enum TOURNAMENTSTATUS : int {
  TOURNAMENT_STATUS_NULL = 0,
  TOURNAMENT_STATUS_WILL_BEGIN = 1,
  TOURNAMENT_STATUS_BEGINNING = 2,
  TOURNAMENT_STATUS_ENROLLING = 3,
  TOURNAMENT_STATUS_ENROLL_END = 4,
  TOURNAMENT_STATUS_END = 5,
  TOURNAMENT_STATUS_CANCEL = 6,
  TOURNAMENTSTATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TOURNAMENTSTATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TOURNAMENTSTATUS_IsValid(int value);
constexpr TOURNAMENTSTATUS TOURNAMENTSTATUS_MIN = TOURNAMENT_STATUS_NULL;
constexpr TOURNAMENTSTATUS TOURNAMENTSTATUS_MAX = TOURNAMENT_STATUS_CANCEL;
constexpr int TOURNAMENTSTATUS_ARRAYSIZE = TOURNAMENTSTATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TOURNAMENTSTATUS_descriptor();
template<typename T>
inline const std::string& TOURNAMENTSTATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TOURNAMENTSTATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TOURNAMENTSTATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TOURNAMENTSTATUS_descriptor(), enum_t_value);
}
inline bool TOURNAMENTSTATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TOURNAMENTSTATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TOURNAMENTSTATUS>(
    TOURNAMENTSTATUS_descriptor(), name, value);
}
enum PASSPORTREFRESH : int {
  PASSPORTREFRESH_NONE = 0,
  PASSPORTREFRESH_DAY = 1,
  PASSPORTREFRESH_WEEK = 2,
  PASSPORTREFRESH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PASSPORTREFRESH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PASSPORTREFRESH_IsValid(int value);
constexpr PASSPORTREFRESH PASSPORTREFRESH_MIN = PASSPORTREFRESH_NONE;
constexpr PASSPORTREFRESH PASSPORTREFRESH_MAX = PASSPORTREFRESH_WEEK;
constexpr int PASSPORTREFRESH_ARRAYSIZE = PASSPORTREFRESH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTREFRESH_descriptor();
template<typename T>
inline const std::string& PASSPORTREFRESH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PASSPORTREFRESH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PASSPORTREFRESH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PASSPORTREFRESH_descriptor(), enum_t_value);
}
inline bool PASSPORTREFRESH_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PASSPORTREFRESH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PASSPORTREFRESH>(
    PASSPORTREFRESH_descriptor(), name, value);
}
enum OBSERVEPRIVILEGE : int {
  OBSERVE_ALL = 0,
  OBSERVE_NONE = 1,
  OBSERVE_MUTUAL_FOLLOW = 2,
  OBSERVEPRIVILEGE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OBSERVEPRIVILEGE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OBSERVEPRIVILEGE_IsValid(int value);
constexpr OBSERVEPRIVILEGE OBSERVEPRIVILEGE_MIN = OBSERVE_ALL;
constexpr OBSERVEPRIVILEGE OBSERVEPRIVILEGE_MAX = OBSERVE_MUTUAL_FOLLOW;
constexpr int OBSERVEPRIVILEGE_ARRAYSIZE = OBSERVEPRIVILEGE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBSERVEPRIVILEGE_descriptor();
template<typename T>
inline const std::string& OBSERVEPRIVILEGE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OBSERVEPRIVILEGE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OBSERVEPRIVILEGE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OBSERVEPRIVILEGE_descriptor(), enum_t_value);
}
inline bool OBSERVEPRIVILEGE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OBSERVEPRIVILEGE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OBSERVEPRIVILEGE>(
    OBSERVEPRIVILEGE_descriptor(), name, value);
}
enum NoticeSkip : int {
  UINull = 0,
  UIHallBag_34 = 1,
  UIHallBag_35 = 2,
  UIHallMainPlayer_0 = 10,
  UIEmail_0 = 11,
  UIHallBattlePassport_51 = 12,
  UIHallBattlePassport_52 = 13,
  UIHallBattlePassport_53 = 14,
  UIHallBattlePassport_54 = 15,
  UIHallPicBook_3 = 17,
  UIHallPicBook_4 = 18,
  UIHallPicBook_5 = 19,
  UIHallPicBook_6 = 20,
  UIHallPicBook_18 = 21,
  UIHallActivityFollow_0 = 33,
  UIHallModeSelect_0 = 34,
  UIHallModeSelect_1 = 35,
  UIHallModeSelect_2 = 36,
  UIHallModeSelect_3 = 37,
  UIHallCharge_0 = 49,
  UIHallSeason_0 = 50,
  UIHallSpectator_76 = 55,
  UIHallSpectator_77 = 56,
  UIHallPicBook_88 = 67,
  UIHallActivity_22 = 68,
  UIHallActivity_41 = 70,
  UIHallActivity_48 = 71,
  UIHallActivity_50 = 72,
  UIHallActivity_56 = 73,
  UIHallActivity_57 = 74,
  UIHallActivity_58 = 75,
  UIHallActivity_78 = 76,
  UIHallActivity_82 = 77,
  UIHallActivity_85 = 79,
  UIHallSelectMode_0 = 80,
  UIHallActivity_83 = 81,
  UIHallMall_0 = 82,
  UIHallBag_99 = 83,
  UIHallBag_100 = 84,
  UIHallBag_101 = 85,
  UIHallBag_102 = 86,
  UIHallActivity_44 = 87,
  UIHallActivity_45 = 88,
  UIHallActivity_46 = 89,
  UIHallActivity_49 = 90,
  UIHallActivity_81 = 91,
  UIShareCommon_65 = 92,
  UIShareCommon_66 = 93,
  UIShareCommon_67 = 94,
  UIShareCommon_68 = 95,
  UIShareCommon_69 = 96,
  UIShareCommon_70 = 97,
  UIShareCommon_71 = 98,
  UIShareCommon_72 = 99,
  UIShareCommon_73 = 100,
  UIShareCommon_74 = 101,
  UIShareCommon_75 = 102,
  UIHallWorkshop_0 = 103,
  UIHallPicBook_141 = 104,
  UIHallPicBook_142 = 105,
  UIHallPicBook_143 = 106,
  UIHallPicBook_144 = 107,
  UIHallPicBook_145 = 108,
  UIHallGuildJoin_158 = 109,
  UIHallGuildJoin_159 = 110,
  UIHallGuildCreateDetails_0 = 111,
  UIHallGuildMembers_160 = 112,
  UIHallGuildMembers_161 = 113,
  UIHallGuildMembers_162 = 114,
  UIHallActivity_175 = 115,
  UIHallActivity_140 = 116,
  UIHallActNotice = 117,
  NoticeSkip_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NoticeSkip_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NoticeSkip_IsValid(int value);
constexpr NoticeSkip NoticeSkip_MIN = UINull;
constexpr NoticeSkip NoticeSkip_MAX = UIHallActNotice;
constexpr int NoticeSkip_ARRAYSIZE = NoticeSkip_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NoticeSkip_descriptor();
template<typename T>
inline const std::string& NoticeSkip_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NoticeSkip>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NoticeSkip_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NoticeSkip_descriptor(), enum_t_value);
}
inline bool NoticeSkip_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NoticeSkip* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NoticeSkip>(
    NoticeSkip_descriptor(), name, value);
}
enum VIDEO_TYPE : int {
  Teaching = 0,
  Genre = 1,
  MaxType = 2,
  VIDEO_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VIDEO_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VIDEO_TYPE_IsValid(int value);
constexpr VIDEO_TYPE VIDEO_TYPE_MIN = Teaching;
constexpr VIDEO_TYPE VIDEO_TYPE_MAX = MaxType;
constexpr int VIDEO_TYPE_ARRAYSIZE = VIDEO_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VIDEO_TYPE_descriptor();
template<typename T>
inline const std::string& VIDEO_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VIDEO_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VIDEO_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VIDEO_TYPE_descriptor(), enum_t_value);
}
inline bool VIDEO_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VIDEO_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VIDEO_TYPE>(
    VIDEO_TYPE_descriptor(), name, value);
}
enum VIDEO_OPERATE : int {
  Add = 0,
  Modify = 1,
  Remove = 2,
  VIDEO_OPERATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VIDEO_OPERATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VIDEO_OPERATE_IsValid(int value);
constexpr VIDEO_OPERATE VIDEO_OPERATE_MIN = Add;
constexpr VIDEO_OPERATE VIDEO_OPERATE_MAX = Remove;
constexpr int VIDEO_OPERATE_ARRAYSIZE = VIDEO_OPERATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VIDEO_OPERATE_descriptor();
template<typename T>
inline const std::string& VIDEO_OPERATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VIDEO_OPERATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VIDEO_OPERATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VIDEO_OPERATE_descriptor(), enum_t_value);
}
inline bool VIDEO_OPERATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VIDEO_OPERATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VIDEO_OPERATE>(
    VIDEO_OPERATE_descriptor(), name, value);
}
enum TEAM_DISMISS_REASON : int {
  JOIN_TIMEOUT = 0,
  ENTER_PVP = 1,
  ENTER_PVP_TIMEOUT = 2,
  TOURNAMENT_ROUND_END = 3,
  TEAM_INACTIVE = 4,
  TEAM_DISMISS_REASON_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TEAM_DISMISS_REASON_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TEAM_DISMISS_REASON_IsValid(int value);
constexpr TEAM_DISMISS_REASON TEAM_DISMISS_REASON_MIN = JOIN_TIMEOUT;
constexpr TEAM_DISMISS_REASON TEAM_DISMISS_REASON_MAX = TEAM_INACTIVE;
constexpr int TEAM_DISMISS_REASON_ARRAYSIZE = TEAM_DISMISS_REASON_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAM_DISMISS_REASON_descriptor();
template<typename T>
inline const std::string& TEAM_DISMISS_REASON_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAM_DISMISS_REASON>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAM_DISMISS_REASON_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAM_DISMISS_REASON_descriptor(), enum_t_value);
}
inline bool TEAM_DISMISS_REASON_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAM_DISMISS_REASON* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAM_DISMISS_REASON>(
    TEAM_DISMISS_REASON_descriptor(), name, value);
}
enum MALL_GOODS_FLAG : int {
  MGF_NULL = 0,
  SALE = 1,
  PURCHASE_LIMITATION = 2,
  NEW = 3,
  TIME_LIMIT = 4,
  HOT = 5,
  THEME = 6,
  MALL_GOODS_FLAG_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MALL_GOODS_FLAG_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MALL_GOODS_FLAG_IsValid(int value);
constexpr MALL_GOODS_FLAG MALL_GOODS_FLAG_MIN = MGF_NULL;
constexpr MALL_GOODS_FLAG MALL_GOODS_FLAG_MAX = THEME;
constexpr int MALL_GOODS_FLAG_ARRAYSIZE = MALL_GOODS_FLAG_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MALL_GOODS_FLAG_descriptor();
template<typename T>
inline const std::string& MALL_GOODS_FLAG_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MALL_GOODS_FLAG>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MALL_GOODS_FLAG_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MALL_GOODS_FLAG_descriptor(), enum_t_value);
}
inline bool MALL_GOODS_FLAG_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MALL_GOODS_FLAG* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MALL_GOODS_FLAG>(
    MALL_GOODS_FLAG_descriptor(), name, value);
}
enum EXCHANGESTATE : int {
  EXCHANGEMARK_NOT = 0,
  EXCHANGEMARK_NORMAL = 1,
  EXCHANGESTATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EXCHANGESTATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EXCHANGESTATE_IsValid(int value);
constexpr EXCHANGESTATE EXCHANGESTATE_MIN = EXCHANGEMARK_NOT;
constexpr EXCHANGESTATE EXCHANGESTATE_MAX = EXCHANGEMARK_NORMAL;
constexpr int EXCHANGESTATE_ARRAYSIZE = EXCHANGESTATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXCHANGESTATE_descriptor();
template<typename T>
inline const std::string& EXCHANGESTATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EXCHANGESTATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EXCHANGESTATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EXCHANGESTATE_descriptor(), enum_t_value);
}
inline bool EXCHANGESTATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EXCHANGESTATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EXCHANGESTATE>(
    EXCHANGESTATE_descriptor(), name, value);
}
enum WORDCHAT : int {
  TYPE_COMMON = 0,
  TYPE_STEAM = 1,
  WORDCHAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WORDCHAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WORDCHAT_IsValid(int value);
constexpr WORDCHAT WORDCHAT_MIN = TYPE_COMMON;
constexpr WORDCHAT WORDCHAT_MAX = TYPE_STEAM;
constexpr int WORDCHAT_ARRAYSIZE = WORDCHAT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WORDCHAT_descriptor();
template<typename T>
inline const std::string& WORDCHAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WORDCHAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WORDCHAT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WORDCHAT_descriptor(), enum_t_value);
}
inline bool WORDCHAT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WORDCHAT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WORDCHAT>(
    WORDCHAT_descriptor(), name, value);
}
enum BuffEffectType : int {
  BuffEffectType_None = 0,
  BuffEffectType_Exp = 1,
  BuffEffectType_Money = 2,
  BuffEffectType_Mall = 3,
  BuffEffectType_RankProtect = 4,
  BuffEffectType_Passport = 5,
  BuffEffectType_NewPlayer_Exp = 6,
  BuffEffectType_Ms = 7,
  BuffEffectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BuffEffectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BuffEffectType_IsValid(int value);
constexpr BuffEffectType BuffEffectType_MIN = BuffEffectType_None;
constexpr BuffEffectType BuffEffectType_MAX = BuffEffectType_Ms;
constexpr int BuffEffectType_ARRAYSIZE = BuffEffectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuffEffectType_descriptor();
template<typename T>
inline const std::string& BuffEffectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuffEffectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuffEffectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuffEffectType_descriptor(), enum_t_value);
}
inline bool BuffEffectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuffEffectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuffEffectType>(
    BuffEffectType_descriptor(), name, value);
}
enum PlayerRecruitStatus : int {
  RECRUIT_INIT = 0,
  RECRUIT_INVITE = 1,
  RECRUIT_SUCCESS = 2,
  RECRUIT_INVALID = 3,
  PlayerRecruitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerRecruitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerRecruitStatus_IsValid(int value);
constexpr PlayerRecruitStatus PlayerRecruitStatus_MIN = RECRUIT_INIT;
constexpr PlayerRecruitStatus PlayerRecruitStatus_MAX = RECRUIT_INVALID;
constexpr int PlayerRecruitStatus_ARRAYSIZE = PlayerRecruitStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerRecruitStatus_descriptor();
template<typename T>
inline const std::string& PlayerRecruitStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerRecruitStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerRecruitStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerRecruitStatus_descriptor(), enum_t_value);
}
inline bool PlayerRecruitStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerRecruitStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerRecruitStatus>(
    PlayerRecruitStatus_descriptor(), name, value);
}
enum TeachPhase : int {
  Over = 0,
  None = 1,
  IfSkipGuide = 10,
  Guide = 11,
  NewPlayerMode = 12,
  ActualBattle = 13,
  FirstTeachLevel = 14,
  ModeSelect = 15,
  BeginPlay = 16,
  MentorShipPlay = 17,
  TeachPhase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TeachPhase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TeachPhase_IsValid(int value);
constexpr TeachPhase TeachPhase_MIN = Over;
constexpr TeachPhase TeachPhase_MAX = MentorShipPlay;
constexpr int TeachPhase_ARRAYSIZE = TeachPhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeachPhase_descriptor();
template<typename T>
inline const std::string& TeachPhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeachPhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeachPhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeachPhase_descriptor(), enum_t_value);
}
inline bool TeachPhase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TeachPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeachPhase>(
    TeachPhase_descriptor(), name, value);
}
enum EFFECTTIMETYPE : int {
  EFFECTTIMETYPE_NULL = 0,
  WEEKDAY = 1,
  FIXDATETIME = 2,
  EFFECTTIMETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EFFECTTIMETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EFFECTTIMETYPE_IsValid(int value);
constexpr EFFECTTIMETYPE EFFECTTIMETYPE_MIN = EFFECTTIMETYPE_NULL;
constexpr EFFECTTIMETYPE EFFECTTIMETYPE_MAX = FIXDATETIME;
constexpr int EFFECTTIMETYPE_ARRAYSIZE = EFFECTTIMETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EFFECTTIMETYPE_descriptor();
template<typename T>
inline const std::string& EFFECTTIMETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EFFECTTIMETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EFFECTTIMETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EFFECTTIMETYPE_descriptor(), enum_t_value);
}
inline bool EFFECTTIMETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EFFECTTIMETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EFFECTTIMETYPE>(
    EFFECTTIMETYPE_descriptor(), name, value);
}
enum ACTIVITYTEAMSTATE : int {
  TEAMNULL = 0,
  TEAMIN = 1,
  TEAMOUT = 2,
  ACTIVITYTEAMSTATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ACTIVITYTEAMSTATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ACTIVITYTEAMSTATE_IsValid(int value);
constexpr ACTIVITYTEAMSTATE ACTIVITYTEAMSTATE_MIN = TEAMNULL;
constexpr ACTIVITYTEAMSTATE ACTIVITYTEAMSTATE_MAX = TEAMOUT;
constexpr int ACTIVITYTEAMSTATE_ARRAYSIZE = ACTIVITYTEAMSTATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACTIVITYTEAMSTATE_descriptor();
template<typename T>
inline const std::string& ACTIVITYTEAMSTATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ACTIVITYTEAMSTATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ACTIVITYTEAMSTATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ACTIVITYTEAMSTATE_descriptor(), enum_t_value);
}
inline bool ACTIVITYTEAMSTATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ACTIVITYTEAMSTATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ACTIVITYTEAMSTATE>(
    ACTIVITYTEAMSTATE_descriptor(), name, value);
}
enum ActivityResetType : int {
  ART_NULL = 0,
  WEEK = 1,
  WEEKREFRESH = 2,
  SEASEN = 3,
  DAYLYREFRESH = 4,
  ActivityResetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ActivityResetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ActivityResetType_IsValid(int value);
constexpr ActivityResetType ActivityResetType_MIN = ART_NULL;
constexpr ActivityResetType ActivityResetType_MAX = DAYLYREFRESH;
constexpr int ActivityResetType_ARRAYSIZE = ActivityResetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityResetType_descriptor();
template<typename T>
inline const std::string& ActivityResetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActivityResetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActivityResetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActivityResetType_descriptor(), enum_t_value);
}
inline bool ActivityResetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActivityResetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActivityResetType>(
    ActivityResetType_descriptor(), name, value);
}
enum ConsumeIncreaseRefresh : int {
  CIRefreshNo = 0,
  CIRefreshDay = 1,
  CIRefreshWeek = 2,
  ConsumeIncreaseRefresh_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConsumeIncreaseRefresh_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConsumeIncreaseRefresh_IsValid(int value);
constexpr ConsumeIncreaseRefresh ConsumeIncreaseRefresh_MIN = CIRefreshNo;
constexpr ConsumeIncreaseRefresh ConsumeIncreaseRefresh_MAX = CIRefreshWeek;
constexpr int ConsumeIncreaseRefresh_ARRAYSIZE = ConsumeIncreaseRefresh_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsumeIncreaseRefresh_descriptor();
template<typename T>
inline const std::string& ConsumeIncreaseRefresh_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConsumeIncreaseRefresh>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConsumeIncreaseRefresh_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConsumeIncreaseRefresh_descriptor(), enum_t_value);
}
inline bool ConsumeIncreaseRefresh_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConsumeIncreaseRefresh* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConsumeIncreaseRefresh>(
    ConsumeIncreaseRefresh_descriptor(), name, value);
}
enum ActSignType : int {
  UnSign = 0,
  SignIn = 1,
  ReSign = 2,
  ActSignType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ActSignType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ActSignType_IsValid(int value);
constexpr ActSignType ActSignType_MIN = UnSign;
constexpr ActSignType ActSignType_MAX = ReSign;
constexpr int ActSignType_ARRAYSIZE = ActSignType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActSignType_descriptor();
template<typename T>
inline const std::string& ActSignType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActSignType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActSignType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActSignType_descriptor(), enum_t_value);
}
inline bool ActSignType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActSignType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActSignType>(
    ActSignType_descriptor(), name, value);
}
enum GDBinType : int {
  BinNull = 0,
  CommonFile = 1,
  CoreFile = 2,
  UnityLocFile = 3,
  UnityGlobalFile = 4,
  PCFile = 5,
  GDBinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GDBinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GDBinType_IsValid(int value);
constexpr GDBinType GDBinType_MIN = BinNull;
constexpr GDBinType GDBinType_MAX = PCFile;
constexpr int GDBinType_ARRAYSIZE = GDBinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GDBinType_descriptor();
template<typename T>
inline const std::string& GDBinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GDBinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GDBinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GDBinType_descriptor(), enum_t_value);
}
inline bool GDBinType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GDBinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GDBinType>(
    GDBinType_descriptor(), name, value);
}
enum GUILDROLETYPE : int {
  ROLETYPENULL = 0,
  MEMBER = 1,
  OFFICER = 10,
  VICE = 20,
  OWNER = 30,
  GUILDROLETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GUILDROLETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GUILDROLETYPE_IsValid(int value);
constexpr GUILDROLETYPE GUILDROLETYPE_MIN = ROLETYPENULL;
constexpr GUILDROLETYPE GUILDROLETYPE_MAX = OWNER;
constexpr int GUILDROLETYPE_ARRAYSIZE = GUILDROLETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GUILDROLETYPE_descriptor();
template<typename T>
inline const std::string& GUILDROLETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GUILDROLETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GUILDROLETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GUILDROLETYPE_descriptor(), enum_t_value);
}
inline bool GUILDROLETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GUILDROLETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GUILDROLETYPE>(
    GUILDROLETYPE_descriptor(), name, value);
}
enum GUILDPERMITTYPE : int {
  GUILDPERMIT_NULL = 0,
  GUILDPERMIT_FREE = 1,
  GUILDPERMIT_LIMIT = 2,
  GUILDPERMITTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GUILDPERMITTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GUILDPERMITTYPE_IsValid(int value);
constexpr GUILDPERMITTYPE GUILDPERMITTYPE_MIN = GUILDPERMIT_NULL;
constexpr GUILDPERMITTYPE GUILDPERMITTYPE_MAX = GUILDPERMIT_LIMIT;
constexpr int GUILDPERMITTYPE_ARRAYSIZE = GUILDPERMITTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GUILDPERMITTYPE_descriptor();
template<typename T>
inline const std::string& GUILDPERMITTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GUILDPERMITTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GUILDPERMITTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GUILDPERMITTYPE_descriptor(), enum_t_value);
}
inline bool GUILDPERMITTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GUILDPERMITTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GUILDPERMITTYPE>(
    GUILDPERMITTYPE_descriptor(), name, value);
}
enum TeamState : int {
  Idle = 0,
  Matching = 1,
  Pvp = 2,
  Dismissed = 3,
  Invalid = 4,
  StateCount = 5,
  TeamState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TeamState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TeamState_IsValid(int value);
constexpr TeamState TeamState_MIN = Idle;
constexpr TeamState TeamState_MAX = StateCount;
constexpr int TeamState_ARRAYSIZE = TeamState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamState_descriptor();
template<typename T>
inline const std::string& TeamState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeamState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeamState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeamState_descriptor(), enum_t_value);
}
inline bool TeamState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TeamState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeamState>(
    TeamState_descriptor(), name, value);
}
enum PveMode : int {
  Classic = 0,
  Nightmare = 1,
  PveMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PveMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PveMode_IsValid(int value);
constexpr PveMode PveMode_MIN = Classic;
constexpr PveMode PveMode_MAX = Nightmare;
constexpr int PveMode_ARRAYSIZE = PveMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PveMode_descriptor();
template<typename T>
inline const std::string& PveMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PveMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PveMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PveMode_descriptor(), enum_t_value);
}
inline bool PveMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PveMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PveMode>(
    PveMode_descriptor(), name, value);
}
enum ShortcutMapsOP : int {
  MoveIn = 0,
  MoveOut = 1,
  OPCount = 2,
  ShortcutMapsOP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ShortcutMapsOP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ShortcutMapsOP_IsValid(int value);
constexpr ShortcutMapsOP ShortcutMapsOP_MIN = MoveIn;
constexpr ShortcutMapsOP ShortcutMapsOP_MAX = OPCount;
constexpr int ShortcutMapsOP_ARRAYSIZE = ShortcutMapsOP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShortcutMapsOP_descriptor();
template<typename T>
inline const std::string& ShortcutMapsOP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShortcutMapsOP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShortcutMapsOP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShortcutMapsOP_descriptor(), enum_t_value);
}
inline bool ShortcutMapsOP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ShortcutMapsOP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShortcutMapsOP>(
    ShortcutMapsOP_descriptor(), name, value);
}
enum TransferEventType : int {
  Preserved = 0,
  Slient = 1,
  OfficialAccount = 2,
  TransferEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransferEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransferEventType_IsValid(int value);
constexpr TransferEventType TransferEventType_MIN = Preserved;
constexpr TransferEventType TransferEventType_MAX = OfficialAccount;
constexpr int TransferEventType_ARRAYSIZE = TransferEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferEventType_descriptor();
template<typename T>
inline const std::string& TransferEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferEventType_descriptor(), enum_t_value);
}
inline bool TransferEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferEventType>(
    TransferEventType_descriptor(), name, value);
}
enum OBSERVERACEMODE : int {
  OBSERVE_RACE_TOURNAMENT = 0,
  OBSERVE_RACE_MAX = 100,
  OBSERVERACEMODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OBSERVERACEMODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OBSERVERACEMODE_IsValid(int value);
constexpr OBSERVERACEMODE OBSERVERACEMODE_MIN = OBSERVE_RACE_TOURNAMENT;
constexpr OBSERVERACEMODE OBSERVERACEMODE_MAX = OBSERVE_RACE_MAX;
constexpr int OBSERVERACEMODE_ARRAYSIZE = OBSERVERACEMODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBSERVERACEMODE_descriptor();
template<typename T>
inline const std::string& OBSERVERACEMODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OBSERVERACEMODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OBSERVERACEMODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OBSERVERACEMODE_descriptor(), enum_t_value);
}
inline bool OBSERVERACEMODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OBSERVERACEMODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OBSERVERACEMODE>(
    OBSERVERACEMODE_descriptor(), name, value);
}
enum TASKTYPE : int {
  DEFAULT = 0,
  TROPHY = 1,
  ACHIEVE = 2,
  TASKTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TASKTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TASKTYPE_IsValid(int value);
constexpr TASKTYPE TASKTYPE_MIN = DEFAULT;
constexpr TASKTYPE TASKTYPE_MAX = ACHIEVE;
constexpr int TASKTYPE_ARRAYSIZE = TASKTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TASKTYPE_descriptor();
template<typename T>
inline const std::string& TASKTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TASKTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TASKTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TASKTYPE_descriptor(), enum_t_value);
}
inline bool TASKTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TASKTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TASKTYPE>(
    TASKTYPE_descriptor(), name, value);
}
enum UserRestrictType : int {
  UNLIMITED = 0,
  UNDER_AGE = 1,
  UserRestrictType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UserRestrictType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UserRestrictType_IsValid(int value);
constexpr UserRestrictType UserRestrictType_MIN = UNLIMITED;
constexpr UserRestrictType UserRestrictType_MAX = UNDER_AGE;
constexpr int UserRestrictType_ARRAYSIZE = UserRestrictType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserRestrictType_descriptor();
template<typename T>
inline const std::string& UserRestrictType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserRestrictType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserRestrictType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserRestrictType_descriptor(), enum_t_value);
}
inline bool UserRestrictType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserRestrictType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserRestrictType>(
    UserRestrictType_descriptor(), name, value);
}
enum OUTPUT_ITEM_TYPE : int {
  ITEM_NORMAL = 0,
  ITEM_LOW = 1,
  ITEM_HIGH = 2,
  OUTPUT_ITEM_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OUTPUT_ITEM_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OUTPUT_ITEM_TYPE_IsValid(int value);
constexpr OUTPUT_ITEM_TYPE OUTPUT_ITEM_TYPE_MIN = ITEM_NORMAL;
constexpr OUTPUT_ITEM_TYPE OUTPUT_ITEM_TYPE_MAX = ITEM_HIGH;
constexpr int OUTPUT_ITEM_TYPE_ARRAYSIZE = OUTPUT_ITEM_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OUTPUT_ITEM_TYPE_descriptor();
template<typename T>
inline const std::string& OUTPUT_ITEM_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OUTPUT_ITEM_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OUTPUT_ITEM_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OUTPUT_ITEM_TYPE_descriptor(), enum_t_value);
}
inline bool OUTPUT_ITEM_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OUTPUT_ITEM_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OUTPUT_ITEM_TYPE>(
    OUTPUT_ITEM_TYPE_descriptor(), name, value);
}
enum LOGINSOURCE : int {
  NORMAL_LOGIN = 0,
  BLACKBOX_LOGIN = 1,
  LOGINSOURCE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LOGINSOURCE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LOGINSOURCE_IsValid(int value);
constexpr LOGINSOURCE LOGINSOURCE_MIN = NORMAL_LOGIN;
constexpr LOGINSOURCE LOGINSOURCE_MAX = BLACKBOX_LOGIN;
constexpr int LOGINSOURCE_ARRAYSIZE = LOGINSOURCE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LOGINSOURCE_descriptor();
template<typename T>
inline const std::string& LOGINSOURCE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LOGINSOURCE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LOGINSOURCE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LOGINSOURCE_descriptor(), enum_t_value);
}
inline bool LOGINSOURCE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LOGINSOURCE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LOGINSOURCE>(
    LOGINSOURCE_descriptor(), name, value);
}
enum PASSPORTCARDTYPE : int {
  NO_CARD_TYPE = 0,
  DEFAULT_CARD_TYPE = 1,
  GRADUATE_CARD_TYPE = 2,
  YEAR_CARD_TYPE = 3,
  MAX_CARD_TYPE = 4,
  PASSPORTCARDTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PASSPORTCARDTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PASSPORTCARDTYPE_IsValid(int value);
constexpr PASSPORTCARDTYPE PASSPORTCARDTYPE_MIN = NO_CARD_TYPE;
constexpr PASSPORTCARDTYPE PASSPORTCARDTYPE_MAX = MAX_CARD_TYPE;
constexpr int PASSPORTCARDTYPE_ARRAYSIZE = PASSPORTCARDTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTCARDTYPE_descriptor();
template<typename T>
inline const std::string& PASSPORTCARDTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PASSPORTCARDTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PASSPORTCARDTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PASSPORTCARDTYPE_descriptor(), enum_t_value);
}
inline bool PASSPORTCARDTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PASSPORTCARDTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PASSPORTCARDTYPE>(
    PASSPORTCARDTYPE_descriptor(), name, value);
}
enum PVE_BUFF_TYPE : int {
  BUFF_NONE = 0,
  BUFF_PROP = 1,
  BUFF_STATION_GAIN = 2,
  BUFF_VIP = 3,
  BUFF_DEBUFF = 4,
  BUFF_KERNEL = 5,
  BUFF_SUPER_VIP = 6,
  PVE_BUFF_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVE_BUFF_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVE_BUFF_TYPE_IsValid(int value);
constexpr PVE_BUFF_TYPE PVE_BUFF_TYPE_MIN = BUFF_NONE;
constexpr PVE_BUFF_TYPE PVE_BUFF_TYPE_MAX = BUFF_SUPER_VIP;
constexpr int PVE_BUFF_TYPE_ARRAYSIZE = PVE_BUFF_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVE_BUFF_TYPE_descriptor();
template<typename T>
inline const std::string& PVE_BUFF_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVE_BUFF_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVE_BUFF_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVE_BUFF_TYPE_descriptor(), enum_t_value);
}
inline bool PVE_BUFF_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVE_BUFF_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVE_BUFF_TYPE>(
    PVE_BUFF_TYPE_descriptor(), name, value);
}
enum CHESS_QUALITY : int {
  NORMAL_CHESS = 0,
  RARE_CHESS = 1,
  UNCOMMON_CHESS = 2,
  EPIC_CHESS = 3,
  LEGEND_CHESS = 4,
  ALL_CHESS = 99,
  CHESS_QUALITY_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CHESS_QUALITY_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CHESS_QUALITY_IsValid(int value);
constexpr CHESS_QUALITY CHESS_QUALITY_MIN = NORMAL_CHESS;
constexpr CHESS_QUALITY CHESS_QUALITY_MAX = ALL_CHESS;
constexpr int CHESS_QUALITY_ARRAYSIZE = CHESS_QUALITY_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHESS_QUALITY_descriptor();
template<typename T>
inline const std::string& CHESS_QUALITY_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHESS_QUALITY>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHESS_QUALITY_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHESS_QUALITY_descriptor(), enum_t_value);
}
inline bool CHESS_QUALITY_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHESS_QUALITY* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHESS_QUALITY>(
    CHESS_QUALITY_descriptor(), name, value);
}
enum PVECONSUMETYPE : int {
  CONSUME_SCORE = 0,
  CONSUME_ITEM = 1,
  PVECONSUMETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVECONSUMETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVECONSUMETYPE_IsValid(int value);
constexpr PVECONSUMETYPE PVECONSUMETYPE_MIN = CONSUME_SCORE;
constexpr PVECONSUMETYPE PVECONSUMETYPE_MAX = CONSUME_ITEM;
constexpr int PVECONSUMETYPE_ARRAYSIZE = PVECONSUMETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVECONSUMETYPE_descriptor();
template<typename T>
inline const std::string& PVECONSUMETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVECONSUMETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVECONSUMETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVECONSUMETYPE_descriptor(), enum_t_value);
}
inline bool PVECONSUMETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVECONSUMETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVECONSUMETYPE>(
    PVECONSUMETYPE_descriptor(), name, value);
}
enum PVECHESSTYPE : int {
  CHESS = 0,
  SKILL = 1,
  PVECHESSTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVECHESSTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVECHESSTYPE_IsValid(int value);
constexpr PVECHESSTYPE PVECHESSTYPE_MIN = CHESS;
constexpr PVECHESSTYPE PVECHESSTYPE_MAX = SKILL;
constexpr int PVECHESSTYPE_ARRAYSIZE = PVECHESSTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVECHESSTYPE_descriptor();
template<typename T>
inline const std::string& PVECHESSTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVECHESSTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVECHESSTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVECHESSTYPE_descriptor(), enum_t_value);
}
inline bool PVECHESSTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVECHESSTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVECHESSTYPE>(
    PVECHESSTYPE_descriptor(), name, value);
}
enum PVESKILLTYPE : int {
  INITIATIVE = 0,
  PASSIVE = 1,
  PVESKILLTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVESKILLTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVESKILLTYPE_IsValid(int value);
constexpr PVESKILLTYPE PVESKILLTYPE_MIN = INITIATIVE;
constexpr PVESKILLTYPE PVESKILLTYPE_MAX = PASSIVE;
constexpr int PVESKILLTYPE_ARRAYSIZE = PVESKILLTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVESKILLTYPE_descriptor();
template<typename T>
inline const std::string& PVESKILLTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVESKILLTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVESKILLTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVESKILLTYPE_descriptor(), enum_t_value);
}
inline bool PVESKILLTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVESKILLTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVESKILLTYPE>(
    PVESKILLTYPE_descriptor(), name, value);
}
enum PVERANKTYPE : int {
  RANK_CHALLENGE = 0,
  RANK_CUSTOM = 1,
  PVERANKTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PVERANKTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PVERANKTYPE_IsValid(int value);
constexpr PVERANKTYPE PVERANKTYPE_MIN = RANK_CHALLENGE;
constexpr PVERANKTYPE PVERANKTYPE_MAX = RANK_CUSTOM;
constexpr int PVERANKTYPE_ARRAYSIZE = PVERANKTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVERANKTYPE_descriptor();
template<typename T>
inline const std::string& PVERANKTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PVERANKTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PVERANKTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PVERANKTYPE_descriptor(), enum_t_value);
}
inline bool PVERANKTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PVERANKTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PVERANKTYPE>(
    PVERANKTYPE_descriptor(), name, value);
}
enum MENTORSHIP : int {
  MENTOR = 0,
  PUPIL = 1,
  NONE_RELATION = 2,
  MENTORSHIP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MENTORSHIP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MENTORSHIP_IsValid(int value);
constexpr MENTORSHIP MENTORSHIP_MIN = MENTOR;
constexpr MENTORSHIP MENTORSHIP_MAX = NONE_RELATION;
constexpr int MENTORSHIP_ARRAYSIZE = MENTORSHIP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORSHIP_descriptor();
template<typename T>
inline const std::string& MENTORSHIP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MENTORSHIP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MENTORSHIP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MENTORSHIP_descriptor(), enum_t_value);
}
inline bool MENTORSHIP_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MENTORSHIP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MENTORSHIP>(
    MENTORSHIP_descriptor(), name, value);
}
enum MENTORSHIPTASK : int {
  ILLEGAL_ARCHIVE = 0,
  MENTOR_ARCHIVE = 1,
  MENTRO_PUPIL_ARCHIVE = 2,
  MENTRO_PUPIL_GRADUATE = 3,
  MENTORSHIPTASK_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MENTORSHIPTASK_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MENTORSHIPTASK_IsValid(int value);
constexpr MENTORSHIPTASK MENTORSHIPTASK_MIN = ILLEGAL_ARCHIVE;
constexpr MENTORSHIPTASK MENTORSHIPTASK_MAX = MENTRO_PUPIL_GRADUATE;
constexpr int MENTORSHIPTASK_ARRAYSIZE = MENTORSHIPTASK_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORSHIPTASK_descriptor();
template<typename T>
inline const std::string& MENTORSHIPTASK_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MENTORSHIPTASK>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MENTORSHIPTASK_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MENTORSHIPTASK_descriptor(), enum_t_value);
}
inline bool MENTORSHIPTASK_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MENTORSHIPTASK* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MENTORSHIPTASK>(
    MENTORSHIPTASK_descriptor(), name, value);
}
enum MENTORREACH : int {
  ERROR_TYPE = 0,
  MAX_HISTORY_MMR = 1,
  LEAVEL = 2,
  PUPIL_MMR = 3,
  MENTORREACH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MENTORREACH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MENTORREACH_IsValid(int value);
constexpr MENTORREACH MENTORREACH_MIN = ERROR_TYPE;
constexpr MENTORREACH MENTORREACH_MAX = PUPIL_MMR;
constexpr int MENTORREACH_ARRAYSIZE = MENTORREACH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORREACH_descriptor();
template<typename T>
inline const std::string& MENTORREACH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MENTORREACH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MENTORREACH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MENTORREACH_descriptor(), enum_t_value);
}
inline bool MENTORREACH_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MENTORREACH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MENTORREACH>(
    MENTORREACH_descriptor(), name, value);
}
enum MENTORADDN : int {
  MMR = 0,
  EXP = 1,
  PASSPORT_INTEGER = 2,
  MENTORADDN_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MENTORADDN_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MENTORADDN_IsValid(int value);
constexpr MENTORADDN MENTORADDN_MIN = MMR;
constexpr MENTORADDN MENTORADDN_MAX = PASSPORT_INTEGER;
constexpr int MENTORADDN_ARRAYSIZE = MENTORADDN_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORADDN_descriptor();
template<typename T>
inline const std::string& MENTORADDN_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MENTORADDN>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MENTORADDN_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MENTORADDN_descriptor(), enum_t_value);
}
inline bool MENTORADDN_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MENTORADDN* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MENTORADDN>(
    MENTORADDN_descriptor(), name, value);
}
enum MENTORLEVEL : int {
  ILLEGAL_LEVEL = 0,
  COPPER_LEVEL = 1,
  SILVER_LEVEL = 2,
  GOLD_LEVEL = 3,
  MAX_LEVEL = 4,
  MENTORLEVEL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MENTORLEVEL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MENTORLEVEL_IsValid(int value);
constexpr MENTORLEVEL MENTORLEVEL_MIN = ILLEGAL_LEVEL;
constexpr MENTORLEVEL MENTORLEVEL_MAX = MAX_LEVEL;
constexpr int MENTORLEVEL_ARRAYSIZE = MENTORLEVEL_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORLEVEL_descriptor();
template<typename T>
inline const std::string& MENTORLEVEL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MENTORLEVEL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MENTORLEVEL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MENTORLEVEL_descriptor(), enum_t_value);
}
inline bool MENTORLEVEL_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MENTORLEVEL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MENTORLEVEL>(
    MENTORLEVEL_descriptor(), name, value);
}
enum MENTORRECOMMEND : int {
  MENTOR_RANK = 0,
  MENTOR_RAND_LIST = 1,
  PUPIL_RANK = 2,
  MENTORRECOMMEND_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MENTORRECOMMEND_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MENTORRECOMMEND_IsValid(int value);
constexpr MENTORRECOMMEND MENTORRECOMMEND_MIN = MENTOR_RANK;
constexpr MENTORRECOMMEND MENTORRECOMMEND_MAX = PUPIL_RANK;
constexpr int MENTORRECOMMEND_ARRAYSIZE = MENTORRECOMMEND_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORRECOMMEND_descriptor();
template<typename T>
inline const std::string& MENTORRECOMMEND_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MENTORRECOMMEND>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MENTORRECOMMEND_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MENTORRECOMMEND_descriptor(), enum_t_value);
}
inline bool MENTORRECOMMEND_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MENTORRECOMMEND* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MENTORRECOMMEND>(
    MENTORRECOMMEND_descriptor(), name, value);
}
enum PUPILSTAT : int {
  PRACTICE = 0,
  REMOVE = 1,
  GRADUATE = 2,
  PUPIL_GRADUATE_APPLYING = 3,
  MENTOR_GRADUATE_APPLYING = 4,
  LIMIT_REMOVE = 5,
  PUPILSTAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PUPILSTAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PUPILSTAT_IsValid(int value);
constexpr PUPILSTAT PUPILSTAT_MIN = PRACTICE;
constexpr PUPILSTAT PUPILSTAT_MAX = LIMIT_REMOVE;
constexpr int PUPILSTAT_ARRAYSIZE = PUPILSTAT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUPILSTAT_descriptor();
template<typename T>
inline const std::string& PUPILSTAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PUPILSTAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PUPILSTAT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PUPILSTAT_descriptor(), enum_t_value);
}
inline bool PUPILSTAT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PUPILSTAT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PUPILSTAT>(
    PUPILSTAT_descriptor(), name, value);
}
enum KERNELJSONTYPE : int {
  NONE_TYPE = 0,
  BATTLE_BUFFER = 1,
  STATE_JSON = 2,
  OTHER = 3,
  KERNELJSONTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KERNELJSONTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KERNELJSONTYPE_IsValid(int value);
constexpr KERNELJSONTYPE KERNELJSONTYPE_MIN = NONE_TYPE;
constexpr KERNELJSONTYPE KERNELJSONTYPE_MAX = OTHER;
constexpr int KERNELJSONTYPE_ARRAYSIZE = KERNELJSONTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KERNELJSONTYPE_descriptor();
template<typename T>
inline const std::string& KERNELJSONTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KERNELJSONTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KERNELJSONTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KERNELJSONTYPE_descriptor(), enum_t_value);
}
inline bool KERNELJSONTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KERNELJSONTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KERNELJSONTYPE>(
    KERNELJSONTYPE_descriptor(), name, value);
}
// ===================================================================

class BountySetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BountySetting) */ {
 public:
  inline BountySetting() : BountySetting(nullptr) {}
  ~BountySetting() override;
  explicit PROTOBUF_CONSTEXPR BountySetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BountySetting(const BountySetting& from);
  BountySetting(BountySetting&& from) noexcept
    : BountySetting() {
    *this = ::std::move(from);
  }

  inline BountySetting& operator=(const BountySetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline BountySetting& operator=(BountySetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BountySetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const BountySetting* internal_default_instance() {
    return reinterpret_cast<const BountySetting*>(
               &_BountySetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BountySetting& a, BountySetting& b) {
    a.Swap(&b);
  }
  inline void Swap(BountySetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BountySetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BountySetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BountySetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BountySetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BountySetting& from) {
    BountySetting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BountySetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BountySetting";
  }
  protected:
  explicit BountySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyIdFieldNumber = 1,
    kCurrencyMinFieldNumber = 2,
    kCurrencyMaxFieldNumber = 3,
  };
  // int32 CurrencyId = 1;
  void clear_currencyid();
  int32_t currencyid() const;
  void set_currencyid(int32_t value);
  private:
  int32_t _internal_currencyid() const;
  void _internal_set_currencyid(int32_t value);
  public:

  // int32 CurrencyMin = 2;
  void clear_currencymin();
  int32_t currencymin() const;
  void set_currencymin(int32_t value);
  private:
  int32_t _internal_currencymin() const;
  void _internal_set_currencymin(int32_t value);
  public:

  // int32 CurrencyMax = 3;
  void clear_currencymax();
  int32_t currencymax() const;
  void set_currencymax(int32_t value);
  private:
  int32_t _internal_currencymax() const;
  void _internal_set_currencymax(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BountySetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t currencyid_;
    int32_t currencymin_;
    int32_t currencymax_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOPSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOPSetting) */ {
 public:
  inline TeamOPSetting() : TeamOPSetting(nullptr) {}
  ~TeamOPSetting() override;
  explicit PROTOBUF_CONSTEXPR TeamOPSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOPSetting(const TeamOPSetting& from);
  TeamOPSetting(TeamOPSetting&& from) noexcept
    : TeamOPSetting() {
    *this = ::std::move(from);
  }

  inline TeamOPSetting& operator=(const TeamOPSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOPSetting& operator=(TeamOPSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOPSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOPSetting* internal_default_instance() {
    return reinterpret_cast<const TeamOPSetting*>(
               &_TeamOPSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TeamOPSetting& a, TeamOPSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOPSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOPSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOPSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOPSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOPSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOPSetting& from) {
    TeamOPSetting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOPSetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOPSetting";
  }
  protected:
  explicit TeamOPSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockGroupsFieldNumber = 8,
    kPwdFieldNumber = 1,
    kNameFieldNumber = 6,
    kChannelUsrIdFieldNumber = 12,
    kWorkshopFieldNumber = 10,
    kBountyFieldNumber = 11,
    kPveSettingFieldNumber = 13,
    kPwdOpenFieldNumber = 2,
    kVisibleFieldNumber = 3,
    kInviteAuthorityFieldNumber = 4,
    kTeamTypeFieldNumber = 5,
    kSubModeFieldNumber = 7,
    kCustomGameIdFieldNumber = 9,
  };
  // repeated bool lockGroups = 8;
  int lockgroups_size() const;
  private:
  int _internal_lockgroups_size() const;
  public:
  void clear_lockgroups();
  private:
  bool _internal_lockgroups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_lockgroups() const;
  void _internal_add_lockgroups(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_lockgroups();
  public:
  bool lockgroups(int index) const;
  void set_lockgroups(int index, bool value);
  void add_lockgroups(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      lockgroups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_lockgroups();

  // string pwd = 1;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string channelUsrId = 12;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // .msg.WorkshopSetting Workshop = 10;
  bool has_workshop() const;
  private:
  bool _internal_has_workshop() const;
  public:
  void clear_workshop();
  const ::msg::WorkshopSetting& workshop() const;
  PROTOBUF_NODISCARD ::msg::WorkshopSetting* release_workshop();
  ::msg::WorkshopSetting* mutable_workshop();
  void set_allocated_workshop(::msg::WorkshopSetting* workshop);
  private:
  const ::msg::WorkshopSetting& _internal_workshop() const;
  ::msg::WorkshopSetting* _internal_mutable_workshop();
  public:
  void unsafe_arena_set_allocated_workshop(
      ::msg::WorkshopSetting* workshop);
  ::msg::WorkshopSetting* unsafe_arena_release_workshop();

  // .msg.BountySetting Bounty = 11;
  bool has_bounty() const;
  private:
  bool _internal_has_bounty() const;
  public:
  void clear_bounty();
  const ::msg::BountySetting& bounty() const;
  PROTOBUF_NODISCARD ::msg::BountySetting* release_bounty();
  ::msg::BountySetting* mutable_bounty();
  void set_allocated_bounty(::msg::BountySetting* bounty);
  private:
  const ::msg::BountySetting& _internal_bounty() const;
  ::msg::BountySetting* _internal_mutable_bounty();
  public:
  void unsafe_arena_set_allocated_bounty(
      ::msg::BountySetting* bounty);
  ::msg::BountySetting* unsafe_arena_release_bounty();

  // .msg.PveSetting PveSetting = 13;
  bool has_pvesetting() const;
  private:
  bool _internal_has_pvesetting() const;
  public:
  void clear_pvesetting();
  const ::msg::PveSetting& pvesetting() const;
  PROTOBUF_NODISCARD ::msg::PveSetting* release_pvesetting();
  ::msg::PveSetting* mutable_pvesetting();
  void set_allocated_pvesetting(::msg::PveSetting* pvesetting);
  private:
  const ::msg::PveSetting& _internal_pvesetting() const;
  ::msg::PveSetting* _internal_mutable_pvesetting();
  public:
  void unsafe_arena_set_allocated_pvesetting(
      ::msg::PveSetting* pvesetting);
  ::msg::PveSetting* unsafe_arena_release_pvesetting();

  // bool pwdOpen = 2;
  void clear_pwdopen();
  bool pwdopen() const;
  void set_pwdopen(bool value);
  private:
  bool _internal_pwdopen() const;
  void _internal_set_pwdopen(bool value);
  public:

  // bool visible = 3;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // int32 inviteAuthority = 4;
  void clear_inviteauthority();
  int32_t inviteauthority() const;
  void set_inviteauthority(int32_t value);
  private:
  int32_t _internal_inviteauthority() const;
  void _internal_set_inviteauthority(int32_t value);
  public:

  // .msg.TEAMTYPE teamType = 5;
  void clear_teamtype();
  ::msg::TEAMTYPE teamtype() const;
  void set_teamtype(::msg::TEAMTYPE value);
  private:
  ::msg::TEAMTYPE _internal_teamtype() const;
  void _internal_set_teamtype(::msg::TEAMTYPE value);
  public:

  // uint32 subMode = 7;
  void clear_submode();
  uint32_t submode() const;
  void set_submode(uint32_t value);
  private:
  uint32_t _internal_submode() const;
  void _internal_set_submode(uint32_t value);
  public:

  // int32 customGameId = 9;
  void clear_customgameid();
  int32_t customgameid() const;
  void set_customgameid(int32_t value);
  private:
  int32_t _internal_customgameid() const;
  void _internal_set_customgameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOPSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > lockgroups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::msg::WorkshopSetting* workshop_;
    ::msg::BountySetting* bounty_;
    ::msg::PveSetting* pvesetting_;
    bool pwdopen_;
    bool visible_;
    int32_t inviteauthority_;
    int teamtype_;
    uint32_t submode_;
    int32_t customgameid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class WorkshopSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.WorkshopSetting) */ {
 public:
  inline WorkshopSetting() : WorkshopSetting(nullptr) {}
  ~WorkshopSetting() override;
  explicit PROTOBUF_CONSTEXPR WorkshopSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkshopSetting(const WorkshopSetting& from);
  WorkshopSetting(WorkshopSetting&& from) noexcept
    : WorkshopSetting() {
    *this = ::std::move(from);
  }

  inline WorkshopSetting& operator=(const WorkshopSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkshopSetting& operator=(WorkshopSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkshopSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkshopSetting* internal_default_instance() {
    return reinterpret_cast<const WorkshopSetting*>(
               &_WorkshopSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkshopSetting& a, WorkshopSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkshopSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkshopSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkshopSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkshopSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkshopSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorkshopSetting& from) {
    WorkshopSetting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkshopSetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.WorkshopSetting";
  }
  protected:
  explicit WorkshopSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 3,
    kMapIdFieldNumber = 1,
    kSubMapIdFieldNumber = 2,
    kJoinAISwitchFieldNumber = 4,
  };
  // string MapName = 3;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // int32 MapId = 1;
  void clear_mapid();
  int32_t mapid() const;
  void set_mapid(int32_t value);
  private:
  int32_t _internal_mapid() const;
  void _internal_set_mapid(int32_t value);
  public:

  // int32 SubMapId = 2;
  void clear_submapid();
  int32_t submapid() const;
  void set_submapid(int32_t value);
  private:
  int32_t _internal_submapid() const;
  void _internal_set_submapid(int32_t value);
  public:

  // bool joinAISwitch = 4;
  void clear_joinaiswitch();
  bool joinaiswitch() const;
  void set_joinaiswitch(bool value);
  private:
  bool _internal_joinaiswitch() const;
  void _internal_set_joinaiswitch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.WorkshopSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
    int32_t mapid_;
    int32_t submapid_;
    bool joinaiswitch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOPChangeGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOPChangeGroup) */ {
 public:
  inline TeamOPChangeGroup() : TeamOPChangeGroup(nullptr) {}
  ~TeamOPChangeGroup() override;
  explicit PROTOBUF_CONSTEXPR TeamOPChangeGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOPChangeGroup(const TeamOPChangeGroup& from);
  TeamOPChangeGroup(TeamOPChangeGroup&& from) noexcept
    : TeamOPChangeGroup() {
    *this = ::std::move(from);
  }

  inline TeamOPChangeGroup& operator=(const TeamOPChangeGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOPChangeGroup& operator=(TeamOPChangeGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOPChangeGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOPChangeGroup* internal_default_instance() {
    return reinterpret_cast<const TeamOPChangeGroup*>(
               &_TeamOPChangeGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TeamOPChangeGroup& a, TeamOPChangeGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOPChangeGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOPChangeGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOPChangeGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOPChangeGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOPChangeGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOPChangeGroup& from) {
    TeamOPChangeGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOPChangeGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOPChangeGroup";
  }
  protected:
  explicit TeamOPChangeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kSlotFieldNumber = 3,
  };
  // string pid = 1;
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_NODISCARD std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // int32 groupId = 2;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // int32 slot = 3;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOPChangeGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
    int32_t groupid_;
    int32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOPSelfChangeGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOPSelfChangeGroup) */ {
 public:
  inline TeamOPSelfChangeGroup() : TeamOPSelfChangeGroup(nullptr) {}
  ~TeamOPSelfChangeGroup() override;
  explicit PROTOBUF_CONSTEXPR TeamOPSelfChangeGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOPSelfChangeGroup(const TeamOPSelfChangeGroup& from);
  TeamOPSelfChangeGroup(TeamOPSelfChangeGroup&& from) noexcept
    : TeamOPSelfChangeGroup() {
    *this = ::std::move(from);
  }

  inline TeamOPSelfChangeGroup& operator=(const TeamOPSelfChangeGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOPSelfChangeGroup& operator=(TeamOPSelfChangeGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOPSelfChangeGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOPSelfChangeGroup* internal_default_instance() {
    return reinterpret_cast<const TeamOPSelfChangeGroup*>(
               &_TeamOPSelfChangeGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeamOPSelfChangeGroup& a, TeamOPSelfChangeGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOPSelfChangeGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOPSelfChangeGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOPSelfChangeGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOPSelfChangeGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOPSelfChangeGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOPSelfChangeGroup& from) {
    TeamOPSelfChangeGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOPSelfChangeGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOPSelfChangeGroup";
  }
  protected:
  explicit TeamOPSelfChangeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // int32 groupId = 1;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // int32 slot = 2;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOPSelfChangeGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t groupid_;
    int32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOPAppointLeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOPAppointLeader) */ {
 public:
  inline TeamOPAppointLeader() : TeamOPAppointLeader(nullptr) {}
  ~TeamOPAppointLeader() override;
  explicit PROTOBUF_CONSTEXPR TeamOPAppointLeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOPAppointLeader(const TeamOPAppointLeader& from);
  TeamOPAppointLeader(TeamOPAppointLeader&& from) noexcept
    : TeamOPAppointLeader() {
    *this = ::std::move(from);
  }

  inline TeamOPAppointLeader& operator=(const TeamOPAppointLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOPAppointLeader& operator=(TeamOPAppointLeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOPAppointLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOPAppointLeader* internal_default_instance() {
    return reinterpret_cast<const TeamOPAppointLeader*>(
               &_TeamOPAppointLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TeamOPAppointLeader& a, TeamOPAppointLeader& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOPAppointLeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOPAppointLeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOPAppointLeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOPAppointLeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOPAppointLeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOPAppointLeader& from) {
    TeamOPAppointLeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOPAppointLeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOPAppointLeader";
  }
  protected:
  explicit TeamOPAppointLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // string pid = 1;
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_NODISCARD std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOPAppointLeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOPChangeName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOPChangeName) */ {
 public:
  inline TeamOPChangeName() : TeamOPChangeName(nullptr) {}
  ~TeamOPChangeName() override;
  explicit PROTOBUF_CONSTEXPR TeamOPChangeName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOPChangeName(const TeamOPChangeName& from);
  TeamOPChangeName(TeamOPChangeName&& from) noexcept
    : TeamOPChangeName() {
    *this = ::std::move(from);
  }

  inline TeamOPChangeName& operator=(const TeamOPChangeName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOPChangeName& operator=(TeamOPChangeName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOPChangeName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOPChangeName* internal_default_instance() {
    return reinterpret_cast<const TeamOPChangeName*>(
               &_TeamOPChangeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TeamOPChangeName& a, TeamOPChangeName& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOPChangeName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOPChangeName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOPChangeName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOPChangeName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOPChangeName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOPChangeName& from) {
    TeamOPChangeName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOPChangeName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOPChangeName";
  }
  protected:
  explicit TeamOPChangeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOPChangeName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOPSwitchSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOPSwitchSlot) */ {
 public:
  inline TeamOPSwitchSlot() : TeamOPSwitchSlot(nullptr) {}
  ~TeamOPSwitchSlot() override;
  explicit PROTOBUF_CONSTEXPR TeamOPSwitchSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOPSwitchSlot(const TeamOPSwitchSlot& from);
  TeamOPSwitchSlot(TeamOPSwitchSlot&& from) noexcept
    : TeamOPSwitchSlot() {
    *this = ::std::move(from);
  }

  inline TeamOPSwitchSlot& operator=(const TeamOPSwitchSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOPSwitchSlot& operator=(TeamOPSwitchSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOPSwitchSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOPSwitchSlot* internal_default_instance() {
    return reinterpret_cast<const TeamOPSwitchSlot*>(
               &_TeamOPSwitchSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TeamOPSwitchSlot& a, TeamOPSwitchSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOPSwitchSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOPSwitchSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOPSwitchSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOPSwitchSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOPSwitchSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOPSwitchSlot& from) {
    TeamOPSwitchSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOPSwitchSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOPSwitchSlot";
  }
  protected:
  explicit TeamOPSwitchSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerOneFieldNumber = 3,
    kPlayerTwoFieldNumber = 4,
    kGroupOneFieldNumber = 1,
    kGroupTwoFieldNumber = 2,
    kSlotOneFieldNumber = 5,
    kSlotTwoFieldNumber = 6,
  };
  // string playerOne = 3;
  void clear_playerone();
  const std::string& playerone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerone();
  PROTOBUF_NODISCARD std::string* release_playerone();
  void set_allocated_playerone(std::string* playerone);
  private:
  const std::string& _internal_playerone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerone(const std::string& value);
  std::string* _internal_mutable_playerone();
  public:

  // string playerTwo = 4;
  void clear_playertwo();
  const std::string& playertwo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playertwo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playertwo();
  PROTOBUF_NODISCARD std::string* release_playertwo();
  void set_allocated_playertwo(std::string* playertwo);
  private:
  const std::string& _internal_playertwo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playertwo(const std::string& value);
  std::string* _internal_mutable_playertwo();
  public:

  // int32 groupOne = 1;
  void clear_groupone();
  int32_t groupone() const;
  void set_groupone(int32_t value);
  private:
  int32_t _internal_groupone() const;
  void _internal_set_groupone(int32_t value);
  public:

  // int32 groupTwo = 2;
  void clear_grouptwo();
  int32_t grouptwo() const;
  void set_grouptwo(int32_t value);
  private:
  int32_t _internal_grouptwo() const;
  void _internal_set_grouptwo(int32_t value);
  public:

  // int32 slotOne = 5;
  void clear_slotone();
  int32_t slotone() const;
  void set_slotone(int32_t value);
  private:
  int32_t _internal_slotone() const;
  void _internal_set_slotone(int32_t value);
  public:

  // int32 slotTwo = 6;
  void clear_slottwo();
  int32_t slottwo() const;
  void set_slottwo(int32_t value);
  private:
  int32_t _internal_slottwo() const;
  void _internal_set_slottwo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOPSwitchSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playertwo_;
    int32_t groupone_;
    int32_t grouptwo_;
    int32_t slotone_;
    int32_t slottwo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamBetOnBounty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamBetOnBounty) */ {
 public:
  inline TeamBetOnBounty() : TeamBetOnBounty(nullptr) {}
  ~TeamBetOnBounty() override;
  explicit PROTOBUF_CONSTEXPR TeamBetOnBounty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamBetOnBounty(const TeamBetOnBounty& from);
  TeamBetOnBounty(TeamBetOnBounty&& from) noexcept
    : TeamBetOnBounty() {
    *this = ::std::move(from);
  }

  inline TeamBetOnBounty& operator=(const TeamBetOnBounty& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamBetOnBounty& operator=(TeamBetOnBounty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamBetOnBounty& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamBetOnBounty* internal_default_instance() {
    return reinterpret_cast<const TeamBetOnBounty*>(
               &_TeamBetOnBounty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TeamBetOnBounty& a, TeamBetOnBounty& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamBetOnBounty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamBetOnBounty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamBetOnBounty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamBetOnBounty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamBetOnBounty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamBetOnBounty& from) {
    TeamBetOnBounty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamBetOnBounty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamBetOnBounty";
  }
  protected:
  explicit TeamBetOnBounty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
  };
  // int32 Num = 1;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamBetOnBounty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamOP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamOP) */ {
 public:
  inline TeamOP() : TeamOP(nullptr) {}
  ~TeamOP() override;
  explicit PROTOBUF_CONSTEXPR TeamOP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamOP(const TeamOP& from);
  TeamOP(TeamOP&& from) noexcept
    : TeamOP() {
    *this = ::std::move(from);
  }

  inline TeamOP& operator=(const TeamOP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamOP& operator=(TeamOP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamOP& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamOP* internal_default_instance() {
    return reinterpret_cast<const TeamOP*>(
               &_TeamOP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TeamOP& a, TeamOP& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamOP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamOP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamOP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamOP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamOP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamOP& from) {
    TeamOP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamOP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamOP";
  }
  protected:
  explicit TeamOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPIDFieldNumber = 1,
    kSettingFieldNumber = 3,
    kChangeGroupFieldNumber = 4,
    kAppointLeaderFieldNumber = 5,
    kSelfChangeGroupFieldNumber = 6,
    kChangeNameFieldNumber = 7,
    kSwitchSlotFieldNumber = 8,
    kBetOnBountyFieldNumber = 9,
    kTypeFieldNumber = 2,
  };
  // string PID = 1;
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_NODISCARD std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // .msg.TeamOPSetting setting = 3;
  bool has_setting() const;
  private:
  bool _internal_has_setting() const;
  public:
  void clear_setting();
  const ::msg::TeamOPSetting& setting() const;
  PROTOBUF_NODISCARD ::msg::TeamOPSetting* release_setting();
  ::msg::TeamOPSetting* mutable_setting();
  void set_allocated_setting(::msg::TeamOPSetting* setting);
  private:
  const ::msg::TeamOPSetting& _internal_setting() const;
  ::msg::TeamOPSetting* _internal_mutable_setting();
  public:
  void unsafe_arena_set_allocated_setting(
      ::msg::TeamOPSetting* setting);
  ::msg::TeamOPSetting* unsafe_arena_release_setting();

  // .msg.TeamOPChangeGroup changeGroup = 4;
  bool has_changegroup() const;
  private:
  bool _internal_has_changegroup() const;
  public:
  void clear_changegroup();
  const ::msg::TeamOPChangeGroup& changegroup() const;
  PROTOBUF_NODISCARD ::msg::TeamOPChangeGroup* release_changegroup();
  ::msg::TeamOPChangeGroup* mutable_changegroup();
  void set_allocated_changegroup(::msg::TeamOPChangeGroup* changegroup);
  private:
  const ::msg::TeamOPChangeGroup& _internal_changegroup() const;
  ::msg::TeamOPChangeGroup* _internal_mutable_changegroup();
  public:
  void unsafe_arena_set_allocated_changegroup(
      ::msg::TeamOPChangeGroup* changegroup);
  ::msg::TeamOPChangeGroup* unsafe_arena_release_changegroup();

  // .msg.TeamOPAppointLeader appointLeader = 5;
  bool has_appointleader() const;
  private:
  bool _internal_has_appointleader() const;
  public:
  void clear_appointleader();
  const ::msg::TeamOPAppointLeader& appointleader() const;
  PROTOBUF_NODISCARD ::msg::TeamOPAppointLeader* release_appointleader();
  ::msg::TeamOPAppointLeader* mutable_appointleader();
  void set_allocated_appointleader(::msg::TeamOPAppointLeader* appointleader);
  private:
  const ::msg::TeamOPAppointLeader& _internal_appointleader() const;
  ::msg::TeamOPAppointLeader* _internal_mutable_appointleader();
  public:
  void unsafe_arena_set_allocated_appointleader(
      ::msg::TeamOPAppointLeader* appointleader);
  ::msg::TeamOPAppointLeader* unsafe_arena_release_appointleader();

  // .msg.TeamOPSelfChangeGroup selfChangeGroup = 6;
  bool has_selfchangegroup() const;
  private:
  bool _internal_has_selfchangegroup() const;
  public:
  void clear_selfchangegroup();
  const ::msg::TeamOPSelfChangeGroup& selfchangegroup() const;
  PROTOBUF_NODISCARD ::msg::TeamOPSelfChangeGroup* release_selfchangegroup();
  ::msg::TeamOPSelfChangeGroup* mutable_selfchangegroup();
  void set_allocated_selfchangegroup(::msg::TeamOPSelfChangeGroup* selfchangegroup);
  private:
  const ::msg::TeamOPSelfChangeGroup& _internal_selfchangegroup() const;
  ::msg::TeamOPSelfChangeGroup* _internal_mutable_selfchangegroup();
  public:
  void unsafe_arena_set_allocated_selfchangegroup(
      ::msg::TeamOPSelfChangeGroup* selfchangegroup);
  ::msg::TeamOPSelfChangeGroup* unsafe_arena_release_selfchangegroup();

  // .msg.TeamOPChangeName changeName = 7;
  bool has_changename() const;
  private:
  bool _internal_has_changename() const;
  public:
  void clear_changename();
  const ::msg::TeamOPChangeName& changename() const;
  PROTOBUF_NODISCARD ::msg::TeamOPChangeName* release_changename();
  ::msg::TeamOPChangeName* mutable_changename();
  void set_allocated_changename(::msg::TeamOPChangeName* changename);
  private:
  const ::msg::TeamOPChangeName& _internal_changename() const;
  ::msg::TeamOPChangeName* _internal_mutable_changename();
  public:
  void unsafe_arena_set_allocated_changename(
      ::msg::TeamOPChangeName* changename);
  ::msg::TeamOPChangeName* unsafe_arena_release_changename();

  // .msg.TeamOPSwitchSlot switchSlot = 8;
  bool has_switchslot() const;
  private:
  bool _internal_has_switchslot() const;
  public:
  void clear_switchslot();
  const ::msg::TeamOPSwitchSlot& switchslot() const;
  PROTOBUF_NODISCARD ::msg::TeamOPSwitchSlot* release_switchslot();
  ::msg::TeamOPSwitchSlot* mutable_switchslot();
  void set_allocated_switchslot(::msg::TeamOPSwitchSlot* switchslot);
  private:
  const ::msg::TeamOPSwitchSlot& _internal_switchslot() const;
  ::msg::TeamOPSwitchSlot* _internal_mutable_switchslot();
  public:
  void unsafe_arena_set_allocated_switchslot(
      ::msg::TeamOPSwitchSlot* switchslot);
  ::msg::TeamOPSwitchSlot* unsafe_arena_release_switchslot();

  // .msg.TeamBetOnBounty betOnBounty = 9;
  bool has_betonbounty() const;
  private:
  bool _internal_has_betonbounty() const;
  public:
  void clear_betonbounty();
  const ::msg::TeamBetOnBounty& betonbounty() const;
  PROTOBUF_NODISCARD ::msg::TeamBetOnBounty* release_betonbounty();
  ::msg::TeamBetOnBounty* mutable_betonbounty();
  void set_allocated_betonbounty(::msg::TeamBetOnBounty* betonbounty);
  private:
  const ::msg::TeamBetOnBounty& _internal_betonbounty() const;
  ::msg::TeamBetOnBounty* _internal_mutable_betonbounty();
  public:
  void unsafe_arena_set_allocated_betonbounty(
      ::msg::TeamBetOnBounty* betonbounty);
  ::msg::TeamBetOnBounty* unsafe_arena_release_betonbounty();

  // .msg.TEAMOP type = 2;
  void clear_type();
  ::msg::TEAMOP type() const;
  void set_type(::msg::TEAMOP value);
  private:
  ::msg::TEAMOP _internal_type() const;
  void _internal_set_type(::msg::TEAMOP value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamOP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
    ::msg::TeamOPSetting* setting_;
    ::msg::TeamOPChangeGroup* changegroup_;
    ::msg::TeamOPAppointLeader* appointleader_;
    ::msg::TeamOPSelfChangeGroup* selfchangegroup_;
    ::msg::TeamOPChangeName* changename_;
    ::msg::TeamOPSwitchSlot* switchslot_;
    ::msg::TeamBetOnBounty* betonbounty_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamBaseInfo) */ {
 public:
  inline TeamBaseInfo() : TeamBaseInfo(nullptr) {}
  ~TeamBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR TeamBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamBaseInfo(const TeamBaseInfo& from);
  TeamBaseInfo(TeamBaseInfo&& from) noexcept
    : TeamBaseInfo() {
    *this = ::std::move(from);
  }

  inline TeamBaseInfo& operator=(const TeamBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamBaseInfo& operator=(TeamBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamBaseInfo* internal_default_instance() {
    return reinterpret_cast<const TeamBaseInfo*>(
               &_TeamBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TeamBaseInfo& a, TeamBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamBaseInfo& from) {
    TeamBaseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamBaseInfo";
  }
  protected:
  explicit TeamBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChannelUsrIdFieldNumber = 11,
    kWSSettingFieldNumber = 8,
    kBountyFieldNumber = 9,
    kTeamIdFieldNumber = 2,
    kModeFieldNumber = 3,
    kCompetotperNumFieldNumber = 4,
    kCompetotperTotalNumFieldNumber = 5,
    kHasPwdFieldNumber = 6,
    kSubModeFieldNumber = 7,
    kBountyTotalFieldNumber = 10,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string channelUsrId = 11;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // .msg.WorkshopSetting WSSetting = 8;
  bool has_wssetting() const;
  private:
  bool _internal_has_wssetting() const;
  public:
  void clear_wssetting();
  const ::msg::WorkshopSetting& wssetting() const;
  PROTOBUF_NODISCARD ::msg::WorkshopSetting* release_wssetting();
  ::msg::WorkshopSetting* mutable_wssetting();
  void set_allocated_wssetting(::msg::WorkshopSetting* wssetting);
  private:
  const ::msg::WorkshopSetting& _internal_wssetting() const;
  ::msg::WorkshopSetting* _internal_mutable_wssetting();
  public:
  void unsafe_arena_set_allocated_wssetting(
      ::msg::WorkshopSetting* wssetting);
  ::msg::WorkshopSetting* unsafe_arena_release_wssetting();

  // .msg.BountySetting Bounty = 9;
  bool has_bounty() const;
  private:
  bool _internal_has_bounty() const;
  public:
  void clear_bounty();
  const ::msg::BountySetting& bounty() const;
  PROTOBUF_NODISCARD ::msg::BountySetting* release_bounty();
  ::msg::BountySetting* mutable_bounty();
  void set_allocated_bounty(::msg::BountySetting* bounty);
  private:
  const ::msg::BountySetting& _internal_bounty() const;
  ::msg::BountySetting* _internal_mutable_bounty();
  public:
  void unsafe_arena_set_allocated_bounty(
      ::msg::BountySetting* bounty);
  ::msg::BountySetting* unsafe_arena_release_bounty();

  // uint64 TeamId = 2;
  void clear_teamid();
  uint64_t teamid() const;
  void set_teamid(uint64_t value);
  private:
  uint64_t _internal_teamid() const;
  void _internal_set_teamid(uint64_t value);
  public:

  // .msg.PVPMODE Mode = 3;
  void clear_mode();
  ::msg::PVPMODE mode() const;
  void set_mode(::msg::PVPMODE value);
  private:
  ::msg::PVPMODE _internal_mode() const;
  void _internal_set_mode(::msg::PVPMODE value);
  public:

  // int32 CompetotperNum = 4;
  void clear_competotpernum();
  int32_t competotpernum() const;
  void set_competotpernum(int32_t value);
  private:
  int32_t _internal_competotpernum() const;
  void _internal_set_competotpernum(int32_t value);
  public:

  // int32 CompetotperTotalNum = 5;
  void clear_competotpertotalnum();
  int32_t competotpertotalnum() const;
  void set_competotpertotalnum(int32_t value);
  private:
  int32_t _internal_competotpertotalnum() const;
  void _internal_set_competotpertotalnum(int32_t value);
  public:

  // bool HasPwd = 6;
  void clear_haspwd();
  bool haspwd() const;
  void set_haspwd(bool value);
  private:
  bool _internal_haspwd() const;
  void _internal_set_haspwd(bool value);
  public:

  // int32 SubMode = 7;
  void clear_submode();
  int32_t submode() const;
  void set_submode(int32_t value);
  private:
  int32_t _internal_submode() const;
  void _internal_set_submode(int32_t value);
  public:

  // int32 BountyTotal = 10;
  void clear_bountytotal();
  int32_t bountytotal() const;
  void set_bountytotal(int32_t value);
  private:
  int32_t _internal_bountytotal() const;
  void _internal_set_bountytotal(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::msg::WorkshopSetting* wssetting_;
    ::msg::BountySetting* bounty_;
    uint64_t teamid_;
    int mode_;
    int32_t competotpernum_;
    int32_t competotpertotalnum_;
    bool haspwd_;
    int32_t submode_;
    int32_t bountytotal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Award_AffixsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Award_AffixsEntry_DoNotUse, 
    std::string, ::msg::ItemAffix,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Award_AffixsEntry_DoNotUse, 
    std::string, ::msg::ItemAffix,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Award_AffixsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Award_AffixsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Award_AffixsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Award_AffixsEntry_DoNotUse& other);
  static const Award_AffixsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Award_AffixsEntry_DoNotUse*>(&_Award_AffixsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.Award.AffixsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class Award final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Award) */ {
 public:
  inline Award() : Award(nullptr) {}
  ~Award() override;
  explicit PROTOBUF_CONSTEXPR Award(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Award(const Award& from);
  Award(Award&& from) noexcept
    : Award() {
    *this = ::std::move(from);
  }

  inline Award& operator=(const Award& from) {
    CopyFrom(from);
    return *this;
  }
  inline Award& operator=(Award&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Award& default_instance() {
    return *internal_default_instance();
  }
  static inline const Award* internal_default_instance() {
    return reinterpret_cast<const Award*>(
               &_Award_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Award& a, Award& b) {
    a.Swap(&b);
  }
  inline void Swap(Award* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Award* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Award* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Award>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Award& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Award& from) {
    Award::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Award* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Award";
  }
  protected:
  explicit Award(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 3,
    kAffixsFieldNumber = 12,
    kInstanceIdFieldNumber = 4,
    kNumberFieldNumber = 10,
    kAbrasionFieldNumber = 11,
    kMedalFieldNumber = 9,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kWeightFieldNumber = 5,
    kPriceFieldNumber = 6,
    kSurviveTimeFieldNumber = 8,
    kSourceIdxFieldNumber = 7,
    kIdentifiedFieldNumber = 13,
    kTextureIdFieldNumber = 14,
  };
  // repeated int64 Para = 3;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  int64_t _internal_para(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_para() const;
  void _internal_add_para(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_para();
  public:
  int64_t para(int index) const;
  void set_para(int index, int64_t value);
  void add_para(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_para();

  // map<string, .msg.ItemAffix> Affixs = 12;
  int affixs_size() const;
  private:
  int _internal_affixs_size() const;
  public:
  void clear_affixs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
      _internal_affixs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
      _internal_mutable_affixs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
      affixs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
      mutable_affixs();

  // string InstanceId = 4;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // string Number = 10;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string Abrasion = 11;
  void clear_abrasion();
  const std::string& abrasion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abrasion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abrasion();
  PROTOBUF_NODISCARD std::string* release_abrasion();
  void set_allocated_abrasion(std::string* abrasion);
  private:
  const std::string& _internal_abrasion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abrasion(const std::string& value);
  std::string* _internal_mutable_abrasion();
  public:

  // .msg.CSDTItemMedal Medal = 9;
  bool has_medal() const;
  private:
  bool _internal_has_medal() const;
  public:
  void clear_medal();
  const ::msg::CSDTItemMedal& medal() const;
  PROTOBUF_NODISCARD ::msg::CSDTItemMedal* release_medal();
  ::msg::CSDTItemMedal* mutable_medal();
  void set_allocated_medal(::msg::CSDTItemMedal* medal);
  private:
  const ::msg::CSDTItemMedal& _internal_medal() const;
  ::msg::CSDTItemMedal* _internal_mutable_medal();
  public:
  void unsafe_arena_set_allocated_medal(
      ::msg::CSDTItemMedal* medal);
  ::msg::CSDTItemMedal* unsafe_arena_release_medal();

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 Weight = 5;
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // uint32 Price = 6;
  void clear_price();
  uint32_t price() const;
  void set_price(uint32_t value);
  private:
  uint32_t _internal_price() const;
  void _internal_set_price(uint32_t value);
  public:

  // int64 SurviveTime = 8;
  void clear_survivetime();
  int64_t survivetime() const;
  void set_survivetime(int64_t value);
  private:
  int64_t _internal_survivetime() const;
  void _internal_set_survivetime(int64_t value);
  public:

  // uint32 SourceIdx = 7;
  void clear_sourceidx();
  uint32_t sourceidx() const;
  void set_sourceidx(uint32_t value);
  private:
  uint32_t _internal_sourceidx() const;
  void _internal_set_sourceidx(uint32_t value);
  public:

  // bool Identified = 13;
  void clear_identified();
  bool identified() const;
  void set_identified(bool value);
  private:
  bool _internal_identified() const;
  void _internal_set_identified(bool value);
  public:

  // uint32 TextureId = 14;
  void clear_textureid();
  uint32_t textureid() const;
  void set_textureid(uint32_t value);
  private:
  uint32_t _internal_textureid() const;
  void _internal_set_textureid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Award)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > para_;
    mutable std::atomic<int> _para_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Award_AffixsEntry_DoNotUse,
        std::string, ::msg::ItemAffix,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> affixs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abrasion_;
    ::msg::CSDTItemMedal* medal_;
    uint32_t id_;
    uint32_t count_;
    uint32_t weight_;
    uint32_t price_;
    int64_t survivetime_;
    uint32_t sourceidx_;
    bool identified_;
    uint32_t textureid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerData_ChessSkinDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatePlayerData_ChessSkinDataEntry_DoNotUse, 
    uint32_t, ::msg::ChessSkinSlotData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatePlayerData_ChessSkinDataEntry_DoNotUse, 
    uint32_t, ::msg::ChessSkinSlotData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UpdatePlayerData_ChessSkinDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR UpdatePlayerData_ChessSkinDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdatePlayerData_ChessSkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdatePlayerData_ChessSkinDataEntry_DoNotUse& other);
  static const UpdatePlayerData_ChessSkinDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdatePlayerData_ChessSkinDataEntry_DoNotUse*>(&_UpdatePlayerData_ChessSkinDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class UpdatePlayerData_ShowItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatePlayerData_ShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatePlayerData_ShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UpdatePlayerData_ShowItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR UpdatePlayerData_ShowItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdatePlayerData_ShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdatePlayerData_ShowItemsEntry_DoNotUse& other);
  static const UpdatePlayerData_ShowItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdatePlayerData_ShowItemsEntry_DoNotUse*>(&_UpdatePlayerData_ShowItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class UpdatePlayerData_SkinDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatePlayerData_SkinDataEntry_DoNotUse, 
    uint32_t, ::msg::CSDTItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatePlayerData_SkinDataEntry_DoNotUse, 
    uint32_t, ::msg::CSDTItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UpdatePlayerData_SkinDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR UpdatePlayerData_SkinDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdatePlayerData_SkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdatePlayerData_SkinDataEntry_DoNotUse& other);
  static const UpdatePlayerData_SkinDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdatePlayerData_SkinDataEntry_DoNotUse*>(&_UpdatePlayerData_SkinDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class UpdatePlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.UpdatePlayerData) */ {
 public:
  inline UpdatePlayerData() : UpdatePlayerData(nullptr) {}
  ~UpdatePlayerData() override;
  explicit PROTOBUF_CONSTEXPR UpdatePlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePlayerData(const UpdatePlayerData& from);
  UpdatePlayerData(UpdatePlayerData&& from) noexcept
    : UpdatePlayerData() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerData& operator=(const UpdatePlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerData& operator=(UpdatePlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePlayerData* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerData*>(
               &_UpdatePlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdatePlayerData& a, UpdatePlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePlayerData& from) {
    UpdatePlayerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.UpdatePlayerData";
  }
  protected:
  explicit UpdatePlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPassportTypeFieldNumber = 2,
    kChessSkinDataFieldNumber = 6,
    kShowItemsFieldNumber = 8,
    kSkinDataFieldNumber = 11,
    kUserNameFieldNumber = 1,
    kChessPlayerFieldNumber = 4,
    kEmotionListFieldNumber = 9,
    kPveFieldNumber = 10,
    kCardGroupDataFieldNumber = 12,
    kSceneIdFieldNumber = 5,
    kHeadPicFieldNumber = 7,
  };
  // repeated uint32 PassportType = 2;
  int passporttype_size() const;
  private:
  int _internal_passporttype_size() const;
  public:
  void clear_passporttype();
  private:
  uint32_t _internal_passporttype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passporttype() const;
  void _internal_add_passporttype(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passporttype();
  public:
  uint32_t passporttype(int index) const;
  void set_passporttype(int index, uint32_t value);
  void add_passporttype(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passporttype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passporttype();

  // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 6;
  int chessskindata_size() const;
  private:
  int _internal_chessskindata_size() const;
  public:
  void clear_chessskindata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
      _internal_chessskindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
      _internal_mutable_chessskindata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
      chessskindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
      mutable_chessskindata();

  // map<uint32, uint32> ShowItems = 8;
  int showitems_size() const;
  private:
  int _internal_showitems_size() const;
  public:
  void clear_showitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_showitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_showitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      showitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_showitems();

  // map<uint32, .msg.CSDTItem> SkinData = 11;
  int skindata_size() const;
  private:
  int _internal_skindata_size() const;
  public:
  void clear_skindata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
      _internal_skindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
      _internal_mutable_skindata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
      skindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
      mutable_skindata();

  // string UserName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .msg.CSDTChessPlrInfo ChessPlayer = 4;
  bool has_chessplayer() const;
  private:
  bool _internal_has_chessplayer() const;
  public:
  void clear_chessplayer();
  const ::msg::CSDTChessPlrInfo& chessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSDTChessPlrInfo* release_chessplayer();
  ::msg::CSDTChessPlrInfo* mutable_chessplayer();
  void set_allocated_chessplayer(::msg::CSDTChessPlrInfo* chessplayer);
  private:
  const ::msg::CSDTChessPlrInfo& _internal_chessplayer() const;
  ::msg::CSDTChessPlrInfo* _internal_mutable_chessplayer();
  public:
  void unsafe_arena_set_allocated_chessplayer(
      ::msg::CSDTChessPlrInfo* chessplayer);
  ::msg::CSDTChessPlrInfo* unsafe_arena_release_chessplayer();

  // .msg.CSDTCommonRandList EmotionList = 9;
  bool has_emotionlist() const;
  private:
  bool _internal_has_emotionlist() const;
  public:
  void clear_emotionlist();
  const ::msg::CSDTCommonRandList& emotionlist() const;
  PROTOBUF_NODISCARD ::msg::CSDTCommonRandList* release_emotionlist();
  ::msg::CSDTCommonRandList* mutable_emotionlist();
  void set_allocated_emotionlist(::msg::CSDTCommonRandList* emotionlist);
  private:
  const ::msg::CSDTCommonRandList& _internal_emotionlist() const;
  ::msg::CSDTCommonRandList* _internal_mutable_emotionlist();
  public:
  void unsafe_arena_set_allocated_emotionlist(
      ::msg::CSDTCommonRandList* emotionlist);
  ::msg::CSDTCommonRandList* unsafe_arena_release_emotionlist();

  // .msg.PveExData Pve = 10;
  bool has_pve() const;
  private:
  bool _internal_has_pve() const;
  public:
  void clear_pve();
  const ::msg::PveExData& pve() const;
  PROTOBUF_NODISCARD ::msg::PveExData* release_pve();
  ::msg::PveExData* mutable_pve();
  void set_allocated_pve(::msg::PveExData* pve);
  private:
  const ::msg::PveExData& _internal_pve() const;
  ::msg::PveExData* _internal_mutable_pve();
  public:
  void unsafe_arena_set_allocated_pve(
      ::msg::PveExData* pve);
  ::msg::PveExData* unsafe_arena_release_pve();

  // .msg.CardGroupData CardGroupData = 12;
  bool has_cardgroupdata() const;
  private:
  bool _internal_has_cardgroupdata() const;
  public:
  void clear_cardgroupdata();
  const ::msg::CardGroupData& cardgroupdata() const;
  PROTOBUF_NODISCARD ::msg::CardGroupData* release_cardgroupdata();
  ::msg::CardGroupData* mutable_cardgroupdata();
  void set_allocated_cardgroupdata(::msg::CardGroupData* cardgroupdata);
  private:
  const ::msg::CardGroupData& _internal_cardgroupdata() const;
  ::msg::CardGroupData* _internal_mutable_cardgroupdata();
  public:
  void unsafe_arena_set_allocated_cardgroupdata(
      ::msg::CardGroupData* cardgroupdata);
  ::msg::CardGroupData* unsafe_arena_release_cardgroupdata();

  // uint32 SceneId = 5;
  void clear_sceneid();
  uint32_t sceneid() const;
  void set_sceneid(uint32_t value);
  private:
  uint32_t _internal_sceneid() const;
  void _internal_set_sceneid(uint32_t value);
  public:

  // uint32 HeadPic = 7;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.UpdatePlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passporttype_;
    mutable std::atomic<int> _passporttype_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        UpdatePlayerData_ChessSkinDataEntry_DoNotUse,
        uint32_t, ::msg::ChessSkinSlotData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> chessskindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        UpdatePlayerData_ShowItemsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> showitems_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        UpdatePlayerData_SkinDataEntry_DoNotUse,
        uint32_t, ::msg::CSDTItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> skindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::msg::CSDTChessPlrInfo* chessplayer_;
    ::msg::CSDTCommonRandList* emotionlist_;
    ::msg::PveExData* pve_;
    ::msg::CardGroupData* cardgroupdata_;
    uint32_t sceneid_;
    uint32_t headpic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SkipType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.SkipType) */ {
 public:
  inline SkipType() : SkipType(nullptr) {}
  ~SkipType() override;
  explicit PROTOBUF_CONSTEXPR SkipType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkipType(const SkipType& from);
  SkipType(SkipType&& from) noexcept
    : SkipType() {
    *this = ::std::move(from);
  }

  inline SkipType& operator=(const SkipType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkipType& operator=(SkipType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkipType& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkipType* internal_default_instance() {
    return reinterpret_cast<const SkipType*>(
               &_SkipType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SkipType& a, SkipType& b) {
    a.Swap(&b);
  }
  inline void Swap(SkipType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkipType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkipType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkipType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkipType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkipType& from) {
    SkipType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkipType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.SkipType";
  }
  protected:
  explicit SkipType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipFieldNumber = 1,
    kTapFieldNumber = 2,
  };
  // string Skip = 1;
  void clear_skip();
  const std::string& skip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skip();
  PROTOBUF_NODISCARD std::string* release_skip();
  void set_allocated_skip(std::string* skip);
  private:
  const std::string& _internal_skip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skip(const std::string& value);
  std::string* _internal_mutable_skip();
  public:

  // string Tap = 2;
  void clear_tap();
  const std::string& tap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tap();
  PROTOBUF_NODISCARD std::string* release_tap();
  void set_allocated_tap(std::string* tap);
  private:
  const std::string& _internal_tap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tap(const std::string& value);
  std::string* _internal_mutable_tap();
  public:

  // @@protoc_insertion_point(class_scope:msg.SkipType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BuffEffect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BuffEffect) */ {
 public:
  inline BuffEffect() : BuffEffect(nullptr) {}
  ~BuffEffect() override;
  explicit PROTOBUF_CONSTEXPR BuffEffect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuffEffect(const BuffEffect& from);
  BuffEffect(BuffEffect&& from) noexcept
    : BuffEffect() {
    *this = ::std::move(from);
  }

  inline BuffEffect& operator=(const BuffEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuffEffect& operator=(BuffEffect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuffEffect& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuffEffect* internal_default_instance() {
    return reinterpret_cast<const BuffEffect*>(
               &_BuffEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BuffEffect& a, BuffEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(BuffEffect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuffEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuffEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuffEffect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuffEffect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuffEffect& from) {
    BuffEffect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuffEffect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BuffEffect";
  }
  protected:
  explicit BuffEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 Type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 Value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BuffEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Consume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Consume) */ {
 public:
  inline Consume() : Consume(nullptr) {}
  ~Consume() override;
  explicit PROTOBUF_CONSTEXPR Consume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Consume(const Consume& from);
  Consume(Consume&& from) noexcept
    : Consume() {
    *this = ::std::move(from);
  }

  inline Consume& operator=(const Consume& from) {
    CopyFrom(from);
    return *this;
  }
  inline Consume& operator=(Consume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Consume& default_instance() {
    return *internal_default_instance();
  }
  static inline const Consume* internal_default_instance() {
    return reinterpret_cast<const Consume*>(
               &_Consume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Consume& a, Consume& b) {
    a.Swap(&b);
  }
  inline void Swap(Consume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Consume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Consume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Consume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Consume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Consume& from) {
    Consume::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Consume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Consume";
  }
  protected:
  explicit Consume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 3,
    kInstanceIdFieldNumber = 4,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated int64 Para = 3;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  int64_t _internal_para(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_para() const;
  void _internal_add_para(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_para();
  public:
  int64_t para(int index) const;
  void set_para(int index, int64_t value);
  void add_para(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_para();

  // string InstanceId = 4;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Consume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > para_;
    mutable std::atomic<int> _para_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    uint32_t id_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTItem_AffixsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTItem_AffixsEntry_DoNotUse, 
    std::string, ::msg::ItemAffix,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTItem_AffixsEntry_DoNotUse, 
    std::string, ::msg::ItemAffix,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTItem_AffixsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTItem_AffixsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTItem_AffixsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTItem_AffixsEntry_DoNotUse& other);
  static const CSDTItem_AffixsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTItem_AffixsEntry_DoNotUse*>(&_CSDTItem_AffixsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTItem.AffixsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTItem) */ {
 public:
  inline CSDTItem() : CSDTItem(nullptr) {}
  ~CSDTItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTItem(const CSDTItem& from);
  CSDTItem(CSDTItem&& from) noexcept
    : CSDTItem() {
    *this = ::std::move(from);
  }

  inline CSDTItem& operator=(const CSDTItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTItem& operator=(CSDTItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTItem* internal_default_instance() {
    return reinterpret_cast<const CSDTItem*>(
               &_CSDTItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CSDTItem& a, CSDTItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTItem& from) {
    CSDTItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTItem";
  }
  protected:
  explicit CSDTItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 4,
    kAffixsFieldNumber = 11,
    kInstanceIdFieldNumber = 3,
    kNumberFieldNumber = 9,
    kAbrasionFieldNumber = 10,
    kMedalFieldNumber = 6,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kSurviveTimeFieldNumber = 5,
    kCreateTimeFieldNumber = 7,
    kGetTimeFieldNumber = 8,
    kIdentifiedFieldNumber = 12,
    kTextureIdFieldNumber = 13,
  };
  // repeated int64 Para = 4;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  int64_t _internal_para(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_para() const;
  void _internal_add_para(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_para();
  public:
  int64_t para(int index) const;
  void set_para(int index, int64_t value);
  void add_para(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_para();

  // map<string, .msg.ItemAffix> Affixs = 11;
  int affixs_size() const;
  private:
  int _internal_affixs_size() const;
  public:
  void clear_affixs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
      _internal_affixs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
      _internal_mutable_affixs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
      affixs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
      mutable_affixs();

  // string InstanceId = 3;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // string Number = 9;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string Abrasion = 10;
  void clear_abrasion();
  const std::string& abrasion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abrasion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abrasion();
  PROTOBUF_NODISCARD std::string* release_abrasion();
  void set_allocated_abrasion(std::string* abrasion);
  private:
  const std::string& _internal_abrasion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abrasion(const std::string& value);
  std::string* _internal_mutable_abrasion();
  public:

  // .msg.CSDTItemMedal Medal = 6;
  bool has_medal() const;
  private:
  bool _internal_has_medal() const;
  public:
  void clear_medal();
  const ::msg::CSDTItemMedal& medal() const;
  PROTOBUF_NODISCARD ::msg::CSDTItemMedal* release_medal();
  ::msg::CSDTItemMedal* mutable_medal();
  void set_allocated_medal(::msg::CSDTItemMedal* medal);
  private:
  const ::msg::CSDTItemMedal& _internal_medal() const;
  ::msg::CSDTItemMedal* _internal_mutable_medal();
  public:
  void unsafe_arena_set_allocated_medal(
      ::msg::CSDTItemMedal* medal);
  ::msg::CSDTItemMedal* unsafe_arena_release_medal();

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // int64 SurviveTime = 5;
  void clear_survivetime();
  int64_t survivetime() const;
  void set_survivetime(int64_t value);
  private:
  int64_t _internal_survivetime() const;
  void _internal_set_survivetime(int64_t value);
  public:

  // int64 CreateTime = 7;
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // int64 GetTime = 8;
  void clear_gettime();
  int64_t gettime() const;
  void set_gettime(int64_t value);
  private:
  int64_t _internal_gettime() const;
  void _internal_set_gettime(int64_t value);
  public:

  // bool Identified = 12;
  void clear_identified();
  bool identified() const;
  void set_identified(bool value);
  private:
  bool _internal_identified() const;
  void _internal_set_identified(bool value);
  public:

  // uint32 TextureId = 13;
  void clear_textureid();
  uint32_t textureid() const;
  void set_textureid(uint32_t value);
  private:
  uint32_t _internal_textureid() const;
  void _internal_set_textureid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > para_;
    mutable std::atomic<int> _para_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTItem_AffixsEntry_DoNotUse,
        std::string, ::msg::ItemAffix,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> affixs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abrasion_;
    ::msg::CSDTItemMedal* medal_;
    uint32_t id_;
    uint32_t count_;
    int64_t survivetime_;
    int64_t createtime_;
    int64_t gettime_;
    bool identified_;
    uint32_t textureid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ItemAffix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ItemAffix) */ {
 public:
  inline ItemAffix() : ItemAffix(nullptr) {}
  ~ItemAffix() override;
  explicit PROTOBUF_CONSTEXPR ItemAffix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemAffix(const ItemAffix& from);
  ItemAffix(ItemAffix&& from) noexcept
    : ItemAffix() {
    *this = ::std::move(from);
  }

  inline ItemAffix& operator=(const ItemAffix& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemAffix& operator=(ItemAffix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemAffix& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemAffix* internal_default_instance() {
    return reinterpret_cast<const ItemAffix*>(
               &_ItemAffix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ItemAffix& a, ItemAffix& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemAffix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemAffix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemAffix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemAffix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemAffix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemAffix& from) {
    ItemAffix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemAffix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ItemAffix";
  }
  protected:
  explicit ItemAffix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kValueFieldNumber = 2,
    kSourceItemIdFieldNumber = 3,
    kSourceItemTypeFieldNumber = 4,
  };
  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float Value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // uint32 SourceItemId = 3;
  void clear_sourceitemid();
  uint32_t sourceitemid() const;
  void set_sourceitemid(uint32_t value);
  private:
  uint32_t _internal_sourceitemid() const;
  void _internal_set_sourceitemid(uint32_t value);
  public:

  // .msg.ITEMTYPE SourceItemType = 4;
  void clear_sourceitemtype();
  ::msg::ITEMTYPE sourceitemtype() const;
  void set_sourceitemtype(::msg::ITEMTYPE value);
  private:
  ::msg::ITEMTYPE _internal_sourceitemtype() const;
  void _internal_set_sourceitemtype(::msg::ITEMTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ItemAffix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    float value_;
    uint32_t sourceitemid_;
    int sourceitemtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTItemMedal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTItemMedal) */ {
 public:
  inline CSDTItemMedal() : CSDTItemMedal(nullptr) {}
  ~CSDTItemMedal() override;
  explicit PROTOBUF_CONSTEXPR CSDTItemMedal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTItemMedal(const CSDTItemMedal& from);
  CSDTItemMedal(CSDTItemMedal&& from) noexcept
    : CSDTItemMedal() {
    *this = ::std::move(from);
  }

  inline CSDTItemMedal& operator=(const CSDTItemMedal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTItemMedal& operator=(CSDTItemMedal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTItemMedal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTItemMedal* internal_default_instance() {
    return reinterpret_cast<const CSDTItemMedal*>(
               &_CSDTItemMedal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CSDTItemMedal& a, CSDTItemMedal& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTItemMedal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTItemMedal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTItemMedal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTItemMedal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTItemMedal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTItemMedal& from) {
    CSDTItemMedal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTItemMedal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTItemMedal";
  }
  protected:
  explicit CSDTItemMedal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 3,
    kCreateTimeFieldNumber = 1,
    kScoreFieldNumber = 2,
    kSeasonIdFieldNumber = 4,
  };
  // string Number = 3;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // int64 CreateTime = 1;
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // int64 Score = 2;
  void clear_score();
  int64_t score() const;
  void set_score(int64_t value);
  private:
  int64_t _internal_score() const;
  void _internal_set_score(int64_t value);
  public:

  // int64 SeasonId = 4;
  void clear_seasonid();
  int64_t seasonid() const;
  void set_seasonid(int64_t value);
  private:
  int64_t _internal_seasonid() const;
  void _internal_set_seasonid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTItemMedal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
    int64_t createtime_;
    int64_t score_;
    int64_t seasonid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTItemID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTItemID) */ {
 public:
  inline CSDTItemID() : CSDTItemID(nullptr) {}
  ~CSDTItemID() override;
  explicit PROTOBUF_CONSTEXPR CSDTItemID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTItemID(const CSDTItemID& from);
  CSDTItemID(CSDTItemID&& from) noexcept
    : CSDTItemID() {
    *this = ::std::move(from);
  }

  inline CSDTItemID& operator=(const CSDTItemID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTItemID& operator=(CSDTItemID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTItemID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTItemID* internal_default_instance() {
    return reinterpret_cast<const CSDTItemID*>(
               &_CSDTItemID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSDTItemID& a, CSDTItemID& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTItemID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTItemID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTItemID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTItemID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTItemID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTItemID& from) {
    CSDTItemID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTItemID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTItemID";
  }
  protected:
  explicit CSDTItemID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 2,
    kAbrasionFieldNumber = 5,
    kIdFieldNumber = 1,
    kIsMedalFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string InstanceId = 2;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // string Abrasion = 5;
  void clear_abrasion();
  const std::string& abrasion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abrasion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abrasion();
  PROTOBUF_NODISCARD std::string* release_abrasion();
  void set_allocated_abrasion(std::string* abrasion);
  private:
  const std::string& _internal_abrasion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abrasion(const std::string& value);
  std::string* _internal_mutable_abrasion();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool IsMedal = 3;
  void clear_ismedal();
  bool ismedal() const;
  void set_ismedal(bool value);
  private:
  bool _internal_ismedal() const;
  void _internal_set_ismedal(bool value);
  public:

  // uint32 Count = 4;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTItemID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abrasion_;
    uint32_t id_;
    bool ismedal_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBagPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBagPara) */ {
 public:
  inline CSDTBagPara() : CSDTBagPara(nullptr) {}
  ~CSDTBagPara() override;
  explicit PROTOBUF_CONSTEXPR CSDTBagPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBagPara(const CSDTBagPara& from);
  CSDTBagPara(CSDTBagPara&& from) noexcept
    : CSDTBagPara() {
    *this = ::std::move(from);
  }

  inline CSDTBagPara& operator=(const CSDTBagPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBagPara& operator=(CSDTBagPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBagPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBagPara* internal_default_instance() {
    return reinterpret_cast<const CSDTBagPara*>(
               &_CSDTBagPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CSDTBagPara& a, CSDTBagPara& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBagPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBagPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBagPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBagPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBagPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBagPara& from) {
    CSDTBagPara::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBagPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBagPara";
  }
  protected:
  explicit CSDTBagPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 5,
    kSourceFieldNumber = 1,
    kSubSourceFieldNumber = 2,
    kAddTimeFieldNumber = 6,
    kTriggerEventFieldNumber = 3,
    kNewGetFieldNumber = 4,
  };
  // string OrderId = 5;
  void clear_orderid();
  const std::string& orderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_orderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_orderid();
  PROTOBUF_NODISCARD std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // .msg.SOURCE Source = 1;
  void clear_source();
  ::msg::SOURCE source() const;
  void set_source(::msg::SOURCE value);
  private:
  ::msg::SOURCE _internal_source() const;
  void _internal_set_source(::msg::SOURCE value);
  public:

  // uint32 SubSource = 2;
  void clear_subsource();
  uint32_t subsource() const;
  void set_subsource(uint32_t value);
  private:
  uint32_t _internal_subsource() const;
  void _internal_set_subsource(uint32_t value);
  public:

  // int64 AddTime = 6;
  void clear_addtime();
  int64_t addtime() const;
  void set_addtime(int64_t value);
  private:
  int64_t _internal_addtime() const;
  void _internal_set_addtime(int64_t value);
  public:

  // bool TriggerEvent = 3;
  void clear_triggerevent();
  bool triggerevent() const;
  void set_triggerevent(bool value);
  private:
  bool _internal_triggerevent() const;
  void _internal_set_triggerevent(bool value);
  public:

  // bool NewGet = 4;
  void clear_newget();
  bool newget() const;
  void set_newget(bool value);
  private:
  bool _internal_newget() const;
  void _internal_set_newget(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTBagPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
    int source_;
    uint32_t subsource_;
    int64_t addtime_;
    bool triggerevent_;
    bool newget_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBagItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBagItem) */ {
 public:
  inline CSDTBagItem() : CSDTBagItem(nullptr) {}
  ~CSDTBagItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTBagItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBagItem(const CSDTBagItem& from);
  CSDTBagItem(CSDTBagItem&& from) noexcept
    : CSDTBagItem() {
    *this = ::std::move(from);
  }

  inline CSDTBagItem& operator=(const CSDTBagItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBagItem& operator=(CSDTBagItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBagItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBagItem* internal_default_instance() {
    return reinterpret_cast<const CSDTBagItem*>(
               &_CSDTBagItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CSDTBagItem& a, CSDTBagItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBagItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBagItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBagItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBagItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBagItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBagItem& from) {
    CSDTBagItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBagItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBagItem";
  }
  protected:
  explicit CSDTBagItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kParaFieldNumber = 2,
  };
  // .msg.CSDTItem Item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::msg::CSDTItem& item() const;
  PROTOBUF_NODISCARD ::msg::CSDTItem* release_item();
  ::msg::CSDTItem* mutable_item();
  void set_allocated_item(::msg::CSDTItem* item);
  private:
  const ::msg::CSDTItem& _internal_item() const;
  ::msg::CSDTItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::msg::CSDTItem* item);
  ::msg::CSDTItem* unsafe_arena_release_item();

  // .msg.CSDTBagPara Para = 2;
  bool has_para() const;
  private:
  bool _internal_has_para() const;
  public:
  void clear_para();
  const ::msg::CSDTBagPara& para() const;
  PROTOBUF_NODISCARD ::msg::CSDTBagPara* release_para();
  ::msg::CSDTBagPara* mutable_para();
  void set_allocated_para(::msg::CSDTBagPara* para);
  private:
  const ::msg::CSDTBagPara& _internal_para() const;
  ::msg::CSDTBagPara* _internal_mutable_para();
  public:
  void unsafe_arena_set_allocated_para(
      ::msg::CSDTBagPara* para);
  ::msg::CSDTBagPara* unsafe_arena_release_para();

  // @@protoc_insertion_point(class_scope:msg.CSDTBagItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::CSDTItem* item_;
    ::msg::CSDTBagPara* para_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerStatusInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerStatusInfo) */ {
 public:
  inline CSDTPlayerStatusInfo() : CSDTPlayerStatusInfo(nullptr) {}
  ~CSDTPlayerStatusInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerStatusInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerStatusInfo(const CSDTPlayerStatusInfo& from);
  CSDTPlayerStatusInfo(CSDTPlayerStatusInfo&& from) noexcept
    : CSDTPlayerStatusInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerStatusInfo& operator=(const CSDTPlayerStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerStatusInfo& operator=(CSDTPlayerStatusInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerStatusInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerStatusInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerStatusInfo*>(
               &_CSDTPlayerStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSDTPlayerStatusInfo& a, CSDTPlayerStatusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerStatusInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerStatusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerStatusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerStatusInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerStatusInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerStatusInfo& from) {
    CSDTPlayerStatusInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerStatusInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerStatusInfo";
  }
  protected:
  explicit CSDTPlayerStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kApkVersionFieldNumber = 4,
    kServiceVersionFieldNumber = 13,
    kPlayerStatusFieldNumber = 2,
    kMapIdFieldNumber = 3,
    kPlatFormTypeFieldNumber = 5,
    kHallServerIdFieldNumber = 6,
    kObservePvpIdFieldNumber = 8,
    kFriendInvisibleFieldNumber = 7,
    kMapPlayingFieldNumber = 10,
    kChangeFriendInvisibleFieldNumber = 9,
    kChangePsOnlyFieldNumber = 11,
    kPsOnlyFieldNumber = 12,
    kLoginSourceFieldNumber = 14,
    kObservePvpModFieldNumber = 20,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ApkVersion = 4;
  void clear_apkversion();
  const std::string& apkversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apkversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apkversion();
  PROTOBUF_NODISCARD std::string* release_apkversion();
  void set_allocated_apkversion(std::string* apkversion);
  private:
  const std::string& _internal_apkversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apkversion(const std::string& value);
  std::string* _internal_mutable_apkversion();
  public:

  // string ServiceVersion = 13;
  void clear_serviceversion();
  const std::string& serviceversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceversion();
  PROTOBUF_NODISCARD std::string* release_serviceversion();
  void set_allocated_serviceversion(std::string* serviceversion);
  private:
  const std::string& _internal_serviceversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceversion(const std::string& value);
  std::string* _internal_mutable_serviceversion();
  public:

  // .msg.PLAYERSTATUS PlayerStatus = 2;
  void clear_playerstatus();
  ::msg::PLAYERSTATUS playerstatus() const;
  void set_playerstatus(::msg::PLAYERSTATUS value);
  private:
  ::msg::PLAYERSTATUS _internal_playerstatus() const;
  void _internal_set_playerstatus(::msg::PLAYERSTATUS value);
  public:

  // uint32 MapId = 3;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // .msg.PLATFORMTYPE PlatFormType = 5;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // uint32 HallServerId = 6;
  void clear_hallserverid();
  uint32_t hallserverid() const;
  void set_hallserverid(uint32_t value);
  private:
  uint32_t _internal_hallserverid() const;
  void _internal_set_hallserverid(uint32_t value);
  public:

  // uint64 ObservePvpId = 8;
  void clear_observepvpid();
  uint64_t observepvpid() const;
  void set_observepvpid(uint64_t value);
  private:
  uint64_t _internal_observepvpid() const;
  void _internal_set_observepvpid(uint64_t value);
  public:

  // .msg.FRIENDINVISIBLE FriendInvisible = 7;
  void clear_friendinvisible();
  ::msg::FRIENDINVISIBLE friendinvisible() const;
  void set_friendinvisible(::msg::FRIENDINVISIBLE value);
  private:
  ::msg::FRIENDINVISIBLE _internal_friendinvisible() const;
  void _internal_set_friendinvisible(::msg::FRIENDINVISIBLE value);
  public:

  // uint32 MapPlaying = 10;
  void clear_mapplaying();
  uint32_t mapplaying() const;
  void set_mapplaying(uint32_t value);
  private:
  uint32_t _internal_mapplaying() const;
  void _internal_set_mapplaying(uint32_t value);
  public:

  // bool ChangeFriendInvisible = 9;
  void clear_changefriendinvisible();
  bool changefriendinvisible() const;
  void set_changefriendinvisible(bool value);
  private:
  bool _internal_changefriendinvisible() const;
  void _internal_set_changefriendinvisible(bool value);
  public:

  // bool ChangePsOnly = 11;
  void clear_changepsonly();
  bool changepsonly() const;
  void set_changepsonly(bool value);
  private:
  bool _internal_changepsonly() const;
  void _internal_set_changepsonly(bool value);
  public:

  // bool PsOnly = 12;
  void clear_psonly();
  bool psonly() const;
  void set_psonly(bool value);
  private:
  bool _internal_psonly() const;
  void _internal_set_psonly(bool value);
  public:

  // .msg.LOGINSOURCE LoginSource = 14;
  void clear_loginsource();
  ::msg::LOGINSOURCE loginsource() const;
  void set_loginsource(::msg::LOGINSOURCE value);
  private:
  ::msg::LOGINSOURCE _internal_loginsource() const;
  void _internal_set_loginsource(::msg::LOGINSOURCE value);
  public:

  // .msg.PVPMODE ObservePvpMod = 20;
  void clear_observepvpmod();
  ::msg::PVPMODE observepvpmod() const;
  void set_observepvpmod(::msg::PVPMODE value);
  private:
  ::msg::PVPMODE _internal_observepvpmod() const;
  void _internal_set_observepvpmod(::msg::PVPMODE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerStatusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apkversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceversion_;
    int playerstatus_;
    uint32_t mapid_;
    int platformtype_;
    uint32_t hallserverid_;
    uint64_t observepvpid_;
    int friendinvisible_;
    uint32_t mapplaying_;
    bool changefriendinvisible_;
    bool changepsonly_;
    bool psonly_;
    int loginsource_;
    int observepvpmod_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPvpWinData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPvpWinData) */ {
 public:
  inline CSDTPvpWinData() : CSDTPvpWinData(nullptr) {}
  ~CSDTPvpWinData() override;
  explicit PROTOBUF_CONSTEXPR CSDTPvpWinData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPvpWinData(const CSDTPvpWinData& from);
  CSDTPvpWinData(CSDTPvpWinData&& from) noexcept
    : CSDTPvpWinData() {
    *this = ::std::move(from);
  }

  inline CSDTPvpWinData& operator=(const CSDTPvpWinData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPvpWinData& operator=(CSDTPvpWinData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPvpWinData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPvpWinData* internal_default_instance() {
    return reinterpret_cast<const CSDTPvpWinData*>(
               &_CSDTPvpWinData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CSDTPvpWinData& a, CSDTPvpWinData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPvpWinData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPvpWinData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPvpWinData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPvpWinData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPvpWinData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPvpWinData& from) {
    CSDTPvpWinData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPvpWinData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPvpWinData";
  }
  protected:
  explicit CSDTPvpWinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinTypeFieldNumber = 1,
    kResultCntFieldNumber = 2,
  };
  // .msg.WINTYPE WinType = 1;
  void clear_wintype();
  ::msg::WINTYPE wintype() const;
  void set_wintype(::msg::WINTYPE value);
  private:
  ::msg::WINTYPE _internal_wintype() const;
  void _internal_set_wintype(::msg::WINTYPE value);
  public:

  // uint32 ResultCnt = 2;
  void clear_resultcnt();
  uint32_t resultcnt() const;
  void set_resultcnt(uint32_t value);
  private:
  uint32_t _internal_resultcnt() const;
  void _internal_set_resultcnt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPvpWinData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int wintype_;
    uint32_t resultcnt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTChessPlrInfo_EquipsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTChessPlrInfo_EquipsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTChessPlrInfo_EquipsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTChessPlrInfo_EquipsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTChessPlrInfo_EquipsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTChessPlrInfo_EquipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTChessPlrInfo_EquipsEntry_DoNotUse& other);
  static const CSDTChessPlrInfo_EquipsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTChessPlrInfo_EquipsEntry_DoNotUse*>(&_CSDTChessPlrInfo_EquipsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTChessPlrInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTChessPlrInfo) */ {
 public:
  inline CSDTChessPlrInfo() : CSDTChessPlrInfo(nullptr) {}
  ~CSDTChessPlrInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTChessPlrInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTChessPlrInfo(const CSDTChessPlrInfo& from);
  CSDTChessPlrInfo(CSDTChessPlrInfo&& from) noexcept
    : CSDTChessPlrInfo() {
    *this = ::std::move(from);
  }

  inline CSDTChessPlrInfo& operator=(const CSDTChessPlrInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTChessPlrInfo& operator=(CSDTChessPlrInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTChessPlrInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTChessPlrInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTChessPlrInfo*>(
               &_CSDTChessPlrInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CSDTChessPlrInfo& a, CSDTChessPlrInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTChessPlrInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTChessPlrInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTChessPlrInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTChessPlrInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTChessPlrInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTChessPlrInfo& from) {
    CSDTChessPlrInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTChessPlrInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTChessPlrInfo";
  }
  protected:
  explicit CSDTChessPlrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEquipsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<uint32, uint32> Equips = 2;
  int equips_size() const;
  private:
  int _internal_equips_size() const;
  public:
  void clear_equips();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_equips() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_equips();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      equips() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_equips();

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTChessPlrInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTChessPlrInfo_EquipsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> equips_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPuzzle_ItemMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPuzzle_ItemMapEntry_DoNotUse, 
    uint32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPuzzle_ItemMapEntry_DoNotUse, 
    uint32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  CSDTPuzzle_ItemMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPuzzle_ItemMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPuzzle_ItemMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPuzzle_ItemMapEntry_DoNotUse& other);
  static const CSDTPuzzle_ItemMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPuzzle_ItemMapEntry_DoNotUse*>(&_CSDTPuzzle_ItemMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPuzzle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPuzzle) */ {
 public:
  inline CSDTPuzzle() : CSDTPuzzle(nullptr) {}
  ~CSDTPuzzle() override;
  explicit PROTOBUF_CONSTEXPR CSDTPuzzle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPuzzle(const CSDTPuzzle& from);
  CSDTPuzzle(CSDTPuzzle&& from) noexcept
    : CSDTPuzzle() {
    *this = ::std::move(from);
  }

  inline CSDTPuzzle& operator=(const CSDTPuzzle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPuzzle& operator=(CSDTPuzzle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPuzzle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPuzzle* internal_default_instance() {
    return reinterpret_cast<const CSDTPuzzle*>(
               &_CSDTPuzzle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSDTPuzzle& a, CSDTPuzzle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPuzzle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPuzzle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPuzzle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPuzzle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPuzzle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPuzzle& from) {
    CSDTPuzzle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPuzzle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPuzzle";
  }
  protected:
  explicit CSDTPuzzle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOpenMapFieldNumber = 1,
    kGroupAwardFieldNumber = 2,
    kItemMapFieldNumber = 3,
    kAwardPoolFieldNumber = 4,
  };
  // repeated uint32 OpenMap = 1;
  int openmap_size() const;
  private:
  int _internal_openmap_size() const;
  public:
  void clear_openmap();
  private:
  uint32_t _internal_openmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_openmap() const;
  void _internal_add_openmap(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_openmap();
  public:
  uint32_t openmap(int index) const;
  void set_openmap(int index, uint32_t value);
  void add_openmap(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      openmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_openmap();

  // repeated uint32 GroupAward = 2;
  int groupaward_size() const;
  private:
  int _internal_groupaward_size() const;
  public:
  void clear_groupaward();
  private:
  uint32_t _internal_groupaward(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_groupaward() const;
  void _internal_add_groupaward(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_groupaward();
  public:
  uint32_t groupaward(int index) const;
  void set_groupaward(int index, uint32_t value);
  void add_groupaward(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      groupaward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_groupaward();

  // map<uint32, int32> ItemMap = 3;
  int itemmap_size() const;
  private:
  int _internal_itemmap_size() const;
  public:
  void clear_itemmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
      _internal_itemmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
      _internal_mutable_itemmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
      itemmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
      mutable_itemmap();

  // repeated uint32 AwardPool = 4;
  int awardpool_size() const;
  private:
  int _internal_awardpool_size() const;
  public:
  void clear_awardpool();
  private:
  uint32_t _internal_awardpool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_awardpool() const;
  void _internal_add_awardpool(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_awardpool();
  public:
  uint32_t awardpool(int index) const;
  void set_awardpool(int index, uint32_t value);
  void add_awardpool(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      awardpool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_awardpool();

  // @@protoc_insertion_point(class_scope:msg.CSDTPuzzle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > openmap_;
    mutable std::atomic<int> _openmap_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > groupaward_;
    mutable std::atomic<int> _groupaward_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPuzzle_ItemMapEntry_DoNotUse,
        uint32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> itemmap_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > awardpool_;
    mutable std::atomic<int> _awardpool_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChessSkinSlotData_SlotsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChessSkinSlotData_SlotsEntry_DoNotUse, 
    std::string, ::msg::CSDTItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChessSkinSlotData_SlotsEntry_DoNotUse, 
    std::string, ::msg::CSDTItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ChessSkinSlotData_SlotsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ChessSkinSlotData_SlotsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChessSkinSlotData_SlotsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChessSkinSlotData_SlotsEntry_DoNotUse& other);
  static const ChessSkinSlotData_SlotsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChessSkinSlotData_SlotsEntry_DoNotUse*>(&_ChessSkinSlotData_SlotsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.ChessSkinSlotData.SlotsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class ChessSkinSlotData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessSkinSlotData) */ {
 public:
  inline ChessSkinSlotData() : ChessSkinSlotData(nullptr) {}
  ~ChessSkinSlotData() override;
  explicit PROTOBUF_CONSTEXPR ChessSkinSlotData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessSkinSlotData(const ChessSkinSlotData& from);
  ChessSkinSlotData(ChessSkinSlotData&& from) noexcept
    : ChessSkinSlotData() {
    *this = ::std::move(from);
  }

  inline ChessSkinSlotData& operator=(const ChessSkinSlotData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessSkinSlotData& operator=(ChessSkinSlotData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessSkinSlotData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessSkinSlotData* internal_default_instance() {
    return reinterpret_cast<const ChessSkinSlotData*>(
               &_ChessSkinSlotData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ChessSkinSlotData& a, ChessSkinSlotData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessSkinSlotData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessSkinSlotData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessSkinSlotData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessSkinSlotData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessSkinSlotData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessSkinSlotData& from) {
    ChessSkinSlotData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessSkinSlotData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessSkinSlotData";
  }
  protected:
  explicit ChessSkinSlotData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 1,
  };
  // map<string, .msg.CSDTItem> Slots = 1;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >&
      _internal_slots() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >*
      _internal_mutable_slots();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >&
      slots() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >*
      mutable_slots();

  // @@protoc_insertion_point(class_scope:msg.ChessSkinSlotData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ChessSkinSlotData_SlotsEntry_DoNotUse,
        std::string, ::msg::CSDTItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> slots_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PvpPlayerData_ModeWinDatasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_ModeWinDatasEntry_DoNotUse, 
    uint32_t, ::msg::CSDTPvpWinData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_ModeWinDatasEntry_DoNotUse, 
    uint32_t, ::msg::CSDTPvpWinData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PvpPlayerData_ModeWinDatasEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_ModeWinDatasEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_ModeWinDatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_ModeWinDatasEntry_DoNotUse& other);
  static const PvpPlayerData_ModeWinDatasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_ModeWinDatasEntry_DoNotUse*>(&_PvpPlayerData_ModeWinDatasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_CurShowItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_CurShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_CurShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PvpPlayerData_CurShowItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_CurShowItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_CurShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_CurShowItemsEntry_DoNotUse& other);
  static const PvpPlayerData_CurShowItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_CurShowItemsEntry_DoNotUse*>(&_PvpPlayerData_CurShowItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_SettingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_SettingsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_SettingsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PvpPlayerData_SettingsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_SettingsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_SettingsEntry_DoNotUse& other);
  static const PvpPlayerData_SettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_SettingsEntry_DoNotUse*>(&_PvpPlayerData_SettingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_SwitchItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_SwitchItemsEntry_DoNotUse, 
    std::string, ::msg::SwitchItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_SwitchItemsEntry_DoNotUse, 
    std::string, ::msg::SwitchItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PvpPlayerData_SwitchItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_SwitchItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_SwitchItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_SwitchItemsEntry_DoNotUse& other);
  static const PvpPlayerData_SwitchItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_SwitchItemsEntry_DoNotUse*>(&_PvpPlayerData_SwitchItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PvpPlayerData.SwitchItemsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_PunishmentEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_PunishmentEntry_DoNotUse, 
    uint32_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_PunishmentEntry_DoNotUse, 
    uint32_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  PvpPlayerData_PunishmentEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_PunishmentEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_PunishmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_PunishmentEntry_DoNotUse& other);
  static const PvpPlayerData_PunishmentEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_PunishmentEntry_DoNotUse*>(&_PvpPlayerData_PunishmentEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_RegionDelaysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_RegionDelaysEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_RegionDelaysEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PvpPlayerData_RegionDelaysEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_RegionDelaysEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_RegionDelaysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_RegionDelaysEntry_DoNotUse& other);
  static const PvpPlayerData_RegionDelaysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_RegionDelaysEntry_DoNotUse*>(&_PvpPlayerData_RegionDelaysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PvpPlayerData.RegionDelaysEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_TicketsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_TicketsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_TicketsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PvpPlayerData_TicketsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_TicketsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_TicketsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_TicketsEntry_DoNotUse& other);
  static const PvpPlayerData_TicketsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_TicketsEntry_DoNotUse*>(&_PvpPlayerData_TicketsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_CurrencysEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_CurrencysEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_CurrencysEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  PvpPlayerData_CurrencysEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_CurrencysEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_CurrencysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_CurrencysEntry_DoNotUse& other);
  static const PvpPlayerData_CurrencysEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_CurrencysEntry_DoNotUse*>(&_PvpPlayerData_CurrencysEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_ChessSkinDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_ChessSkinDataEntry_DoNotUse, 
    uint32_t, ::msg::ChessSkinSlotData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_ChessSkinDataEntry_DoNotUse, 
    uint32_t, ::msg::ChessSkinSlotData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PvpPlayerData_ChessSkinDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_ChessSkinDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_ChessSkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_ChessSkinDataEntry_DoNotUse& other);
  static const PvpPlayerData_ChessSkinDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_ChessSkinDataEntry_DoNotUse*>(&_PvpPlayerData_ChessSkinDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData_SkinDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_SkinDataEntry_DoNotUse, 
    uint32_t, ::msg::CSDTItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PvpPlayerData_SkinDataEntry_DoNotUse, 
    uint32_t, ::msg::CSDTItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PvpPlayerData_SkinDataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PvpPlayerData_SkinDataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PvpPlayerData_SkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PvpPlayerData_SkinDataEntry_DoNotUse& other);
  static const PvpPlayerData_SkinDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PvpPlayerData_SkinDataEntry_DoNotUse*>(&_PvpPlayerData_SkinDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PvpPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PvpPlayerData) */ {
 public:
  inline PvpPlayerData() : PvpPlayerData(nullptr) {}
  ~PvpPlayerData() override;
  explicit PROTOBUF_CONSTEXPR PvpPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PvpPlayerData(const PvpPlayerData& from);
  PvpPlayerData(PvpPlayerData&& from) noexcept
    : PvpPlayerData() {
    *this = ::std::move(from);
  }

  inline PvpPlayerData& operator=(const PvpPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvpPlayerData& operator=(PvpPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PvpPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PvpPlayerData* internal_default_instance() {
    return reinterpret_cast<const PvpPlayerData*>(
               &_PvpPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PvpPlayerData& a, PvpPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PvpPlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PvpPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PvpPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PvpPlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PvpPlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PvpPlayerData& from) {
    PvpPlayerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpPlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PvpPlayerData";
  }
  protected:
  explicit PvpPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModeWinDatasFieldNumber = 22,
    kCurShowItemsFieldNumber = 26,
    kSettingsFieldNumber = 32,
    kSwitchItemsFieldNumber = 50,
    kPunishmentFieldNumber = 52,
    kRegionDelaysFieldNumber = 61,
    kPassportTypeIdsFieldNumber = 70,
    kTicketsFieldNumber = 71,
    kCurrencysFieldNumber = 75,
    kPSBlockedUsersFieldNumber = 78,
    kChessListFieldNumber = 79,
    kSkinSuitIDFieldNumber = 81,
    kChessSkinDataFieldNumber = 85,
    kSkinDataFieldNumber = 86,
    kIdFieldNumber = 1,
    kUsrNameFieldNumber = 2,
    kApkVersionFieldNumber = 15,
    kPvpResourceVersionFieldNumber = 16,
    kDeviceTypeFieldNumber = 20,
    kChannelUsrIdFieldNumber = 30,
    kTeamVoiceIdFieldNumber = 37,
    kPicUrlFieldNumber = 39,
    kCupNameChinaFieldNumber = 45,
    kLanguageFieldNumber = 46,
    kCountryFieldNumber = 47,
    kCupIconUrlFieldNumber = 48,
    kPvpServerGroupFieldNumber = 57,
    kTeamVoiceUserIdFieldNumber = 60,
    kRegionFieldNumber = 63,
    kPackageNameFieldNumber = 65,
    kSdkCountryFieldNumber = 72,
    kGuildNameFieldNumber = 76,
    kChannelIDFieldNumber = 80,
    kMentorIdFieldNumber = 91,
    kEmotionListFieldNumber = 28,
    kCurChessPlrFieldNumber = 55,
    kAddictionFieldNumber = 62,
    kPvpDataFieldNumber = 87,
    kIndexFieldNumber = 3,
    kCampFieldNumber = 4,
    kCompetitionCntFieldNumber = 6,
    kHeadPicFieldNumber = 7,
    kTeamPlayerNumFieldNumber = 8,
    kMMRFieldNumber = 9,
    kReqTimeFieldNumber = 11,
    kLvlFieldNumber = 10,
    kPlatformTypeFieldNumber = 12,
    kTeamIdFieldNumber = 13,
    kCupFieldNumber = 14,
    kAsynFieldNumber = 17,
    kChessPlayerSkinFieldNumber = 18,
    kSceneSkinFieldNumber = 19,
    kDamageEffectFieldNumber = 21,
    kCurRankSeasonFieldNumber = 24,
    kMeleeRuleFieldNumber = 25,
    kChannelTypeFieldNumber = 31,
    kAssistantIdFieldNumber = 33,
    kCreditScoreFieldNumber = 34,
    kTMMRFieldNumber = 35,
    kTCupFieldNumber = 36,
    kTeamVoiceMemIdFieldNumber = 38,
    kIsRobotFieldNumber = 5,
    kPs4OnlyFieldNumber = 73,
    kTeamBattleCountFieldNumber = 40,
    kTeamBattleMvpCountFieldNumber = 41,
    kRecommendScoreFieldNumber = 42,
    kWxVVipLevelFieldNumber = 43,
    kTeamBattleAvgRankFieldNumber = 44,
    kPersonalAvgMvpFieldNumber = 49,
    kObservePrivilegeFieldNumber = 51,
    kSlotFieldNumber = 53,
    kTeamGroupFieldNumber = 56,
    kPingFieldNumber = 58,
    kProvinceFieldNumber = 59,
    kTournamentIDFieldNumber = 66,
    kTournamClassFieldNumber = 67,
    kTournamClassRoundFieldNumber = 68,
    kTournamChessIDFieldNumber = 69,
    kFirstMatchSuccessWaitTimeFieldNumber = 64,
    kRestrictTypeFieldNumber = 74,
    kGuildSignFieldNumber = 77,
    kFFMMRFieldNumber = 82,
    kFFCupFieldNumber = 83,
    kBattleTimeFieldNumber = 84,
    kPvpVoiceMemIdFieldNumber = 88,
    kCampVoiceMemIdFieldNumber = 89,
    kChoseCardGroupFieldNumber = 90,
    kExchangeStateFieldNumber = 92,
  };
  // map<uint32, .msg.CSDTPvpWinData> ModeWinDatas = 22;
  int modewindatas_size() const;
  private:
  int _internal_modewindatas_size() const;
  public:
  void clear_modewindatas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >&
      _internal_modewindatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >*
      _internal_mutable_modewindatas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >&
      modewindatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >*
      mutable_modewindatas();

  // map<uint32, uint32> CurShowItems = 26;
  int curshowitems_size() const;
  private:
  int _internal_curshowitems_size() const;
  public:
  void clear_curshowitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_curshowitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_curshowitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      curshowitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_curshowitems();

  // map<uint32, uint32> Settings = 32;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_settings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_settings();

  // map<string, .msg.SwitchItem> SwitchItems = 50;
  int switchitems_size() const;
  private:
  int _internal_switchitems_size() const;
  public:
  void clear_switchitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >&
      _internal_switchitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >*
      _internal_mutable_switchitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >&
      switchitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >*
      mutable_switchitems();

  // map<uint32, int64> Punishment = 52;
  int punishment_size() const;
  private:
  int _internal_punishment_size() const;
  public:
  void clear_punishment();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >&
      _internal_punishment() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >*
      _internal_mutable_punishment();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >&
      punishment() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >*
      mutable_punishment();

  // map<string, uint32> RegionDelays = 61;
  int regiondelays_size() const;
  private:
  int _internal_regiondelays_size() const;
  public:
  void clear_regiondelays();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_regiondelays() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_regiondelays();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      regiondelays() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_regiondelays();

  // repeated uint32 PassportTypeIds = 70;
  int passporttypeids_size() const;
  private:
  int _internal_passporttypeids_size() const;
  public:
  void clear_passporttypeids();
  private:
  uint32_t _internal_passporttypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passporttypeids() const;
  void _internal_add_passporttypeids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passporttypeids();
  public:
  uint32_t passporttypeids(int index) const;
  void set_passporttypeids(int index, uint32_t value);
  void add_passporttypeids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passporttypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passporttypeids();

  // map<uint32, uint32> Tickets = 71;
  int tickets_size() const;
  private:
  int _internal_tickets_size() const;
  public:
  void clear_tickets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_tickets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_tickets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      tickets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_tickets();

  // map<int32, int32> Currencys = 75;
  int currencys_size() const;
  private:
  int _internal_currencys_size() const;
  public:
  void clear_currencys();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_currencys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_currencys();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      currencys() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_currencys();

  // repeated string PSBlockedUsers = 78;
  int psblockedusers_size() const;
  private:
  int _internal_psblockedusers_size() const;
  public:
  void clear_psblockedusers();
  const std::string& psblockedusers(int index) const;
  std::string* mutable_psblockedusers(int index);
  void set_psblockedusers(int index, const std::string& value);
  void set_psblockedusers(int index, std::string&& value);
  void set_psblockedusers(int index, const char* value);
  void set_psblockedusers(int index, const char* value, size_t size);
  std::string* add_psblockedusers();
  void add_psblockedusers(const std::string& value);
  void add_psblockedusers(std::string&& value);
  void add_psblockedusers(const char* value);
  void add_psblockedusers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& psblockedusers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_psblockedusers();
  private:
  const std::string& _internal_psblockedusers(int index) const;
  std::string* _internal_add_psblockedusers();
  public:

  // repeated .msg.KernelChessInfo ChessList = 79;
  int chesslist_size() const;
  private:
  int _internal_chesslist_size() const;
  public:
  void clear_chesslist();
  ::msg::KernelChessInfo* mutable_chesslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >*
      mutable_chesslist();
  private:
  const ::msg::KernelChessInfo& _internal_chesslist(int index) const;
  ::msg::KernelChessInfo* _internal_add_chesslist();
  public:
  const ::msg::KernelChessInfo& chesslist(int index) const;
  ::msg::KernelChessInfo* add_chesslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >&
      chesslist() const;

  // repeated uint32 SkinSuitID = 81;
  int skinsuitid_size() const;
  private:
  int _internal_skinsuitid_size() const;
  public:
  void clear_skinsuitid();
  private:
  uint32_t _internal_skinsuitid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skinsuitid() const;
  void _internal_add_skinsuitid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skinsuitid();
  public:
  uint32_t skinsuitid(int index) const;
  void set_skinsuitid(int index, uint32_t value);
  void add_skinsuitid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skinsuitid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skinsuitid();

  // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 85;
  int chessskindata_size() const;
  private:
  int _internal_chessskindata_size() const;
  public:
  void clear_chessskindata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
      _internal_chessskindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
      _internal_mutable_chessskindata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
      chessskindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
      mutable_chessskindata();

  // map<uint32, .msg.CSDTItem> SkinData = 86;
  int skindata_size() const;
  private:
  int _internal_skindata_size() const;
  public:
  void clear_skindata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
      _internal_skindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
      _internal_mutable_skindata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
      skindata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
      mutable_skindata();

  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string UsrName = 2;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string ApkVersion = 15;
  void clear_apkversion();
  const std::string& apkversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apkversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apkversion();
  PROTOBUF_NODISCARD std::string* release_apkversion();
  void set_allocated_apkversion(std::string* apkversion);
  private:
  const std::string& _internal_apkversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apkversion(const std::string& value);
  std::string* _internal_mutable_apkversion();
  public:

  // string PvpResourceVersion = 16;
  void clear_pvpresourceversion();
  const std::string& pvpresourceversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvpresourceversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvpresourceversion();
  PROTOBUF_NODISCARD std::string* release_pvpresourceversion();
  void set_allocated_pvpresourceversion(std::string* pvpresourceversion);
  private:
  const std::string& _internal_pvpresourceversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvpresourceversion(const std::string& value);
  std::string* _internal_mutable_pvpresourceversion();
  public:

  // string DeviceType = 20;
  void clear_devicetype();
  const std::string& devicetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicetype();
  PROTOBUF_NODISCARD std::string* release_devicetype();
  void set_allocated_devicetype(std::string* devicetype);
  private:
  const std::string& _internal_devicetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicetype(const std::string& value);
  std::string* _internal_mutable_devicetype();
  public:

  // string ChannelUsrId = 30;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // string TeamVoiceId = 37;
  void clear_teamvoiceid();
  const std::string& teamvoiceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teamvoiceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teamvoiceid();
  PROTOBUF_NODISCARD std::string* release_teamvoiceid();
  void set_allocated_teamvoiceid(std::string* teamvoiceid);
  private:
  const std::string& _internal_teamvoiceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teamvoiceid(const std::string& value);
  std::string* _internal_mutable_teamvoiceid();
  public:

  // string PicUrl = 39;
  void clear_picurl();
  const std::string& picurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picurl();
  PROTOBUF_NODISCARD std::string* release_picurl();
  void set_allocated_picurl(std::string* picurl);
  private:
  const std::string& _internal_picurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picurl(const std::string& value);
  std::string* _internal_mutable_picurl();
  public:

  // string CupNameChina = 45;
  void clear_cupnamechina();
  const std::string& cupnamechina() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cupnamechina(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cupnamechina();
  PROTOBUF_NODISCARD std::string* release_cupnamechina();
  void set_allocated_cupnamechina(std::string* cupnamechina);
  private:
  const std::string& _internal_cupnamechina() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cupnamechina(const std::string& value);
  std::string* _internal_mutable_cupnamechina();
  public:

  // string Language = 46;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string Country = 47;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string CupIconUrl = 48;
  void clear_cupiconurl();
  const std::string& cupiconurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cupiconurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cupiconurl();
  PROTOBUF_NODISCARD std::string* release_cupiconurl();
  void set_allocated_cupiconurl(std::string* cupiconurl);
  private:
  const std::string& _internal_cupiconurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cupiconurl(const std::string& value);
  std::string* _internal_mutable_cupiconurl();
  public:

  // string PvpServerGroup = 57;
  void clear_pvpservergroup();
  const std::string& pvpservergroup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvpservergroup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvpservergroup();
  PROTOBUF_NODISCARD std::string* release_pvpservergroup();
  void set_allocated_pvpservergroup(std::string* pvpservergroup);
  private:
  const std::string& _internal_pvpservergroup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvpservergroup(const std::string& value);
  std::string* _internal_mutable_pvpservergroup();
  public:

  // string TeamVoiceUserId = 60;
  void clear_teamvoiceuserid();
  const std::string& teamvoiceuserid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teamvoiceuserid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teamvoiceuserid();
  PROTOBUF_NODISCARD std::string* release_teamvoiceuserid();
  void set_allocated_teamvoiceuserid(std::string* teamvoiceuserid);
  private:
  const std::string& _internal_teamvoiceuserid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teamvoiceuserid(const std::string& value);
  std::string* _internal_mutable_teamvoiceuserid();
  public:

  // string Region = 63;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string PackageName = 65;
  void clear_packagename();
  const std::string& packagename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packagename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packagename();
  PROTOBUF_NODISCARD std::string* release_packagename();
  void set_allocated_packagename(std::string* packagename);
  private:
  const std::string& _internal_packagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packagename(const std::string& value);
  std::string* _internal_mutable_packagename();
  public:

  // string SdkCountry = 72;
  void clear_sdkcountry();
  const std::string& sdkcountry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdkcountry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdkcountry();
  PROTOBUF_NODISCARD std::string* release_sdkcountry();
  void set_allocated_sdkcountry(std::string* sdkcountry);
  private:
  const std::string& _internal_sdkcountry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdkcountry(const std::string& value);
  std::string* _internal_mutable_sdkcountry();
  public:

  // string GuildName = 76;
  void clear_guildname();
  const std::string& guildname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guildname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guildname();
  PROTOBUF_NODISCARD std::string* release_guildname();
  void set_allocated_guildname(std::string* guildname);
  private:
  const std::string& _internal_guildname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guildname(const std::string& value);
  std::string* _internal_mutable_guildname();
  public:

  // string ChannelID = 80;
  void clear_channelid();
  const std::string& channelid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelid();
  PROTOBUF_NODISCARD std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string MentorId = 91;
  void clear_mentorid();
  const std::string& mentorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mentorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mentorid();
  PROTOBUF_NODISCARD std::string* release_mentorid();
  void set_allocated_mentorid(std::string* mentorid);
  private:
  const std::string& _internal_mentorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mentorid(const std::string& value);
  std::string* _internal_mutable_mentorid();
  public:

  // .msg.CSDTCommonRandList EmotionList = 28;
  bool has_emotionlist() const;
  private:
  bool _internal_has_emotionlist() const;
  public:
  void clear_emotionlist();
  const ::msg::CSDTCommonRandList& emotionlist() const;
  PROTOBUF_NODISCARD ::msg::CSDTCommonRandList* release_emotionlist();
  ::msg::CSDTCommonRandList* mutable_emotionlist();
  void set_allocated_emotionlist(::msg::CSDTCommonRandList* emotionlist);
  private:
  const ::msg::CSDTCommonRandList& _internal_emotionlist() const;
  ::msg::CSDTCommonRandList* _internal_mutable_emotionlist();
  public:
  void unsafe_arena_set_allocated_emotionlist(
      ::msg::CSDTCommonRandList* emotionlist);
  ::msg::CSDTCommonRandList* unsafe_arena_release_emotionlist();

  // .msg.CSDTChessPlrInfo CurChessPlr = 55;
  bool has_curchessplr() const;
  private:
  bool _internal_has_curchessplr() const;
  public:
  void clear_curchessplr();
  const ::msg::CSDTChessPlrInfo& curchessplr() const;
  PROTOBUF_NODISCARD ::msg::CSDTChessPlrInfo* release_curchessplr();
  ::msg::CSDTChessPlrInfo* mutable_curchessplr();
  void set_allocated_curchessplr(::msg::CSDTChessPlrInfo* curchessplr);
  private:
  const ::msg::CSDTChessPlrInfo& _internal_curchessplr() const;
  ::msg::CSDTChessPlrInfo* _internal_mutable_curchessplr();
  public:
  void unsafe_arena_set_allocated_curchessplr(
      ::msg::CSDTChessPlrInfo* curchessplr);
  ::msg::CSDTChessPlrInfo* unsafe_arena_release_curchessplr();

  // .msg.KrAddictionInfo Addiction = 62;
  bool has_addiction() const;
  private:
  bool _internal_has_addiction() const;
  public:
  void clear_addiction();
  const ::msg::KrAddictionInfo& addiction() const;
  PROTOBUF_NODISCARD ::msg::KrAddictionInfo* release_addiction();
  ::msg::KrAddictionInfo* mutable_addiction();
  void set_allocated_addiction(::msg::KrAddictionInfo* addiction);
  private:
  const ::msg::KrAddictionInfo& _internal_addiction() const;
  ::msg::KrAddictionInfo* _internal_mutable_addiction();
  public:
  void unsafe_arena_set_allocated_addiction(
      ::msg::KrAddictionInfo* addiction);
  ::msg::KrAddictionInfo* unsafe_arena_release_addiction();

  // .msg.PvpData PvpData = 87;
  bool has_pvpdata() const;
  private:
  bool _internal_has_pvpdata() const;
  public:
  void clear_pvpdata();
  const ::msg::PvpData& pvpdata() const;
  PROTOBUF_NODISCARD ::msg::PvpData* release_pvpdata();
  ::msg::PvpData* mutable_pvpdata();
  void set_allocated_pvpdata(::msg::PvpData* pvpdata);
  private:
  const ::msg::PvpData& _internal_pvpdata() const;
  ::msg::PvpData* _internal_mutable_pvpdata();
  public:
  void unsafe_arena_set_allocated_pvpdata(
      ::msg::PvpData* pvpdata);
  ::msg::PvpData* unsafe_arena_release_pvpdata();

  // uint32 Index = 3;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 Camp = 4;
  void clear_camp();
  uint32_t camp() const;
  void set_camp(uint32_t value);
  private:
  uint32_t _internal_camp() const;
  void _internal_set_camp(uint32_t value);
  public:

  // uint32 CompetitionCnt = 6;
  void clear_competitioncnt();
  uint32_t competitioncnt() const;
  void set_competitioncnt(uint32_t value);
  private:
  uint32_t _internal_competitioncnt() const;
  void _internal_set_competitioncnt(uint32_t value);
  public:

  // uint32 HeadPic = 7;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 TeamPlayerNum = 8;
  void clear_teamplayernum();
  uint32_t teamplayernum() const;
  void set_teamplayernum(uint32_t value);
  private:
  uint32_t _internal_teamplayernum() const;
  void _internal_set_teamplayernum(uint32_t value);
  public:

  // uint32 MMR = 9;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // int64 ReqTime = 11;
  void clear_reqtime();
  int64_t reqtime() const;
  void set_reqtime(int64_t value);
  private:
  int64_t _internal_reqtime() const;
  void _internal_set_reqtime(int64_t value);
  public:

  // uint32 Lvl = 10;
  void clear_lvl();
  uint32_t lvl() const;
  void set_lvl(uint32_t value);
  private:
  uint32_t _internal_lvl() const;
  void _internal_set_lvl(uint32_t value);
  public:

  // .msg.PLATFORMTYPE PlatformType = 12;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // uint32 TeamId = 13;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // uint32 Cup = 14;
  void clear_cup();
  uint32_t cup() const;
  void set_cup(uint32_t value);
  private:
  uint32_t _internal_cup() const;
  void _internal_set_cup(uint32_t value);
  public:

  // uint32 Asyn = 17;
  void clear_asyn();
  uint32_t asyn() const;
  void set_asyn(uint32_t value);
  private:
  uint32_t _internal_asyn() const;
  void _internal_set_asyn(uint32_t value);
  public:

  // uint32 ChessPlayerSkin = 18;
  void clear_chessplayerskin();
  uint32_t chessplayerskin() const;
  void set_chessplayerskin(uint32_t value);
  private:
  uint32_t _internal_chessplayerskin() const;
  void _internal_set_chessplayerskin(uint32_t value);
  public:

  // uint32 SceneSkin = 19;
  void clear_sceneskin();
  uint32_t sceneskin() const;
  void set_sceneskin(uint32_t value);
  private:
  uint32_t _internal_sceneskin() const;
  void _internal_set_sceneskin(uint32_t value);
  public:

  // uint32 DamageEffect = 21;
  void clear_damageeffect();
  uint32_t damageeffect() const;
  void set_damageeffect(uint32_t value);
  private:
  uint32_t _internal_damageeffect() const;
  void _internal_set_damageeffect(uint32_t value);
  public:

  // uint32 CurRankSeason = 24;
  void clear_currankseason();
  uint32_t currankseason() const;
  void set_currankseason(uint32_t value);
  private:
  uint32_t _internal_currankseason() const;
  void _internal_set_currankseason(uint32_t value);
  public:

  // uint32 MeleeRule = 25;
  void clear_meleerule();
  uint32_t meleerule() const;
  void set_meleerule(uint32_t value);
  private:
  uint32_t _internal_meleerule() const;
  void _internal_set_meleerule(uint32_t value);
  public:

  // .msg.CHANELTYPE ChannelType = 31;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // int32 AssistantId = 33;
  void clear_assistantid();
  int32_t assistantid() const;
  void set_assistantid(int32_t value);
  private:
  int32_t _internal_assistantid() const;
  void _internal_set_assistantid(int32_t value);
  public:

  // uint32 CreditScore = 34;
  void clear_creditscore();
  uint32_t creditscore() const;
  void set_creditscore(uint32_t value);
  private:
  uint32_t _internal_creditscore() const;
  void _internal_set_creditscore(uint32_t value);
  public:

  // uint32 TMMR = 35;
  void clear_tmmr();
  uint32_t tmmr() const;
  void set_tmmr(uint32_t value);
  private:
  uint32_t _internal_tmmr() const;
  void _internal_set_tmmr(uint32_t value);
  public:

  // uint32 TCup = 36;
  void clear_tcup();
  uint32_t tcup() const;
  void set_tcup(uint32_t value);
  private:
  uint32_t _internal_tcup() const;
  void _internal_set_tcup(uint32_t value);
  public:

  // uint32 TeamVoiceMemId = 38;
  void clear_teamvoicememid();
  uint32_t teamvoicememid() const;
  void set_teamvoicememid(uint32_t value);
  private:
  uint32_t _internal_teamvoicememid() const;
  void _internal_set_teamvoicememid(uint32_t value);
  public:

  // bool IsRobot = 5;
  void clear_isrobot();
  bool isrobot() const;
  void set_isrobot(bool value);
  private:
  bool _internal_isrobot() const;
  void _internal_set_isrobot(bool value);
  public:

  // bool Ps4Only = 73;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // uint32 TeamBattleCount = 40;
  void clear_teambattlecount();
  uint32_t teambattlecount() const;
  void set_teambattlecount(uint32_t value);
  private:
  uint32_t _internal_teambattlecount() const;
  void _internal_set_teambattlecount(uint32_t value);
  public:

  // uint32 TeamBattleMvpCount = 41;
  void clear_teambattlemvpcount();
  uint32_t teambattlemvpcount() const;
  void set_teambattlemvpcount(uint32_t value);
  private:
  uint32_t _internal_teambattlemvpcount() const;
  void _internal_set_teambattlemvpcount(uint32_t value);
  public:

  // uint32 RecommendScore = 42;
  void clear_recommendscore();
  uint32_t recommendscore() const;
  void set_recommendscore(uint32_t value);
  private:
  uint32_t _internal_recommendscore() const;
  void _internal_set_recommendscore(uint32_t value);
  public:

  // uint32 WxVVipLevel = 43;
  void clear_wxvviplevel();
  uint32_t wxvviplevel() const;
  void set_wxvviplevel(uint32_t value);
  private:
  uint32_t _internal_wxvviplevel() const;
  void _internal_set_wxvviplevel(uint32_t value);
  public:

  // int32 TeamBattleAvgRank = 44;
  void clear_teambattleavgrank();
  int32_t teambattleavgrank() const;
  void set_teambattleavgrank(int32_t value);
  private:
  int32_t _internal_teambattleavgrank() const;
  void _internal_set_teambattleavgrank(int32_t value);
  public:

  // int32 PersonalAvgMvp = 49;
  void clear_personalavgmvp();
  int32_t personalavgmvp() const;
  void set_personalavgmvp(int32_t value);
  private:
  int32_t _internal_personalavgmvp() const;
  void _internal_set_personalavgmvp(int32_t value);
  public:

  // .msg.OBSERVEPRIVILEGE ObservePrivilege = 51;
  void clear_observeprivilege();
  ::msg::OBSERVEPRIVILEGE observeprivilege() const;
  void set_observeprivilege(::msg::OBSERVEPRIVILEGE value);
  private:
  ::msg::OBSERVEPRIVILEGE _internal_observeprivilege() const;
  void _internal_set_observeprivilege(::msg::OBSERVEPRIVILEGE value);
  public:

  // uint32 Slot = 53;
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // .msg.TEAMGROUP TeamGroup = 56;
  void clear_teamgroup();
  ::msg::TEAMGROUP teamgroup() const;
  void set_teamgroup(::msg::TEAMGROUP value);
  private:
  ::msg::TEAMGROUP _internal_teamgroup() const;
  void _internal_set_teamgroup(::msg::TEAMGROUP value);
  public:

  // uint32 Ping = 58;
  void clear_ping();
  uint32_t ping() const;
  void set_ping(uint32_t value);
  private:
  uint32_t _internal_ping() const;
  void _internal_set_ping(uint32_t value);
  public:

  // uint32 Province = 59;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // uint64 TournamentID = 66;
  void clear_tournamentid();
  uint64_t tournamentid() const;
  void set_tournamentid(uint64_t value);
  private:
  uint64_t _internal_tournamentid() const;
  void _internal_set_tournamentid(uint64_t value);
  public:

  // uint64 TournamClass = 67;
  void clear_tournamclass();
  uint64_t tournamclass() const;
  void set_tournamclass(uint64_t value);
  private:
  uint64_t _internal_tournamclass() const;
  void _internal_set_tournamclass(uint64_t value);
  public:

  // uint64 TournamClassRound = 68;
  void clear_tournamclassround();
  uint64_t tournamclassround() const;
  void set_tournamclassround(uint64_t value);
  private:
  uint64_t _internal_tournamclassround() const;
  void _internal_set_tournamclassround(uint64_t value);
  public:

  // uint64 TournamChessID = 69;
  void clear_tournamchessid();
  uint64_t tournamchessid() const;
  void set_tournamchessid(uint64_t value);
  private:
  uint64_t _internal_tournamchessid() const;
  void _internal_set_tournamchessid(uint64_t value);
  public:

  // uint32 FirstMatchSuccessWaitTime = 64;
  void clear_firstmatchsuccesswaittime();
  uint32_t firstmatchsuccesswaittime() const;
  void set_firstmatchsuccesswaittime(uint32_t value);
  private:
  uint32_t _internal_firstmatchsuccesswaittime() const;
  void _internal_set_firstmatchsuccesswaittime(uint32_t value);
  public:

  // .msg.UserRestrictType RestrictType = 74;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // int32 GuildSign = 77;
  void clear_guildsign();
  int32_t guildsign() const;
  void set_guildsign(int32_t value);
  private:
  int32_t _internal_guildsign() const;
  void _internal_set_guildsign(int32_t value);
  public:

  // uint32 FFMMR = 82;
  void clear_ffmmr();
  uint32_t ffmmr() const;
  void set_ffmmr(uint32_t value);
  private:
  uint32_t _internal_ffmmr() const;
  void _internal_set_ffmmr(uint32_t value);
  public:

  // uint32 FFCup = 83;
  void clear_ffcup();
  uint32_t ffcup() const;
  void set_ffcup(uint32_t value);
  private:
  uint32_t _internal_ffcup() const;
  void _internal_set_ffcup(uint32_t value);
  public:

  // uint32 BattleTime = 84;
  void clear_battletime();
  uint32_t battletime() const;
  void set_battletime(uint32_t value);
  private:
  uint32_t _internal_battletime() const;
  void _internal_set_battletime(uint32_t value);
  public:

  // uint32 PvpVoiceMemId = 88;
  void clear_pvpvoicememid();
  uint32_t pvpvoicememid() const;
  void set_pvpvoicememid(uint32_t value);
  private:
  uint32_t _internal_pvpvoicememid() const;
  void _internal_set_pvpvoicememid(uint32_t value);
  public:

  // uint32 CampVoiceMemId = 89;
  void clear_campvoicememid();
  uint32_t campvoicememid() const;
  void set_campvoicememid(uint32_t value);
  private:
  uint32_t _internal_campvoicememid() const;
  void _internal_set_campvoicememid(uint32_t value);
  public:

  // uint32 ChoseCardGroup = 90;
  void clear_chosecardgroup();
  uint32_t chosecardgroup() const;
  void set_chosecardgroup(uint32_t value);
  private:
  uint32_t _internal_chosecardgroup() const;
  void _internal_set_chosecardgroup(uint32_t value);
  public:

  // .msg.EXCHANGESTATE ExchangeState = 92;
  void clear_exchangestate();
  ::msg::EXCHANGESTATE exchangestate() const;
  void set_exchangestate(::msg::EXCHANGESTATE value);
  private:
  ::msg::EXCHANGESTATE _internal_exchangestate() const;
  void _internal_set_exchangestate(::msg::EXCHANGESTATE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PvpPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_ModeWinDatasEntry_DoNotUse,
        uint32_t, ::msg::CSDTPvpWinData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> modewindatas_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_CurShowItemsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> curshowitems_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_SettingsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> settings_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_SwitchItemsEntry_DoNotUse,
        std::string, ::msg::SwitchItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> switchitems_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_PunishmentEntry_DoNotUse,
        uint32_t, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> punishment_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_RegionDelaysEntry_DoNotUse,
        std::string, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> regiondelays_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passporttypeids_;
    mutable std::atomic<int> _passporttypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_TicketsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> tickets_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_CurrencysEntry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> currencys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> psblockedusers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo > chesslist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skinsuitid_;
    mutable std::atomic<int> _skinsuitid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_ChessSkinDataEntry_DoNotUse,
        uint32_t, ::msg::ChessSkinSlotData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> chessskindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PvpPlayerData_SkinDataEntry_DoNotUse,
        uint32_t, ::msg::CSDTItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> skindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apkversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvpresourceversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamvoiceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cupnamechina_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cupiconurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvpservergroup_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamvoiceuserid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkcountry_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guildname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mentorid_;
    ::msg::CSDTCommonRandList* emotionlist_;
    ::msg::CSDTChessPlrInfo* curchessplr_;
    ::msg::KrAddictionInfo* addiction_;
    ::msg::PvpData* pvpdata_;
    uint32_t index_;
    uint32_t camp_;
    uint32_t competitioncnt_;
    uint32_t headpic_;
    uint32_t teamplayernum_;
    uint32_t mmr_;
    int64_t reqtime_;
    uint32_t lvl_;
    int platformtype_;
    uint32_t teamid_;
    uint32_t cup_;
    uint32_t asyn_;
    uint32_t chessplayerskin_;
    uint32_t sceneskin_;
    uint32_t damageeffect_;
    uint32_t currankseason_;
    uint32_t meleerule_;
    int channeltype_;
    int32_t assistantid_;
    uint32_t creditscore_;
    uint32_t tmmr_;
    uint32_t tcup_;
    uint32_t teamvoicememid_;
    bool isrobot_;
    bool ps4only_;
    uint32_t teambattlecount_;
    uint32_t teambattlemvpcount_;
    uint32_t recommendscore_;
    uint32_t wxvviplevel_;
    int32_t teambattleavgrank_;
    int32_t personalavgmvp_;
    int observeprivilege_;
    uint32_t slot_;
    int teamgroup_;
    uint32_t ping_;
    uint32_t province_;
    uint64_t tournamentid_;
    uint64_t tournamclass_;
    uint64_t tournamclassround_;
    uint64_t tournamchessid_;
    uint32_t firstmatchsuccesswaittime_;
    int restricttype_;
    int32_t guildsign_;
    uint32_t ffmmr_;
    uint32_t ffcup_;
    uint32_t battletime_;
    uint32_t pvpvoicememid_;
    uint32_t campvoicememid_;
    uint32_t chosecardgroup_;
    int exchangestate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PvpData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PvpData) */ {
 public:
  inline PvpData() : PvpData(nullptr) {}
  ~PvpData() override;
  explicit PROTOBUF_CONSTEXPR PvpData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PvpData(const PvpData& from);
  PvpData(PvpData&& from) noexcept
    : PvpData() {
    *this = ::std::move(from);
  }

  inline PvpData& operator=(const PvpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvpData& operator=(PvpData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PvpData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PvpData* internal_default_instance() {
    return reinterpret_cast<const PvpData*>(
               &_PvpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PvpData& a, PvpData& b) {
    a.Swap(&b);
  }
  inline void Swap(PvpData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PvpData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PvpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PvpData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PvpData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PvpData& from) {
    PvpData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PvpData";
  }
  protected:
  explicit PvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPveFieldNumber = 1,
    kCardGroupFieldNumber = 2,
    kTowerDefenseFieldNumber = 3,
  };
  // .msg.PveDataInfo Pve = 1;
  bool has_pve() const;
  private:
  bool _internal_has_pve() const;
  public:
  void clear_pve();
  const ::msg::PveDataInfo& pve() const;
  PROTOBUF_NODISCARD ::msg::PveDataInfo* release_pve();
  ::msg::PveDataInfo* mutable_pve();
  void set_allocated_pve(::msg::PveDataInfo* pve);
  private:
  const ::msg::PveDataInfo& _internal_pve() const;
  ::msg::PveDataInfo* _internal_mutable_pve();
  public:
  void unsafe_arena_set_allocated_pve(
      ::msg::PveDataInfo* pve);
  ::msg::PveDataInfo* unsafe_arena_release_pve();

  // .msg.CardGroupData CardGroup = 2;
  bool has_cardgroup() const;
  private:
  bool _internal_has_cardgroup() const;
  public:
  void clear_cardgroup();
  const ::msg::CardGroupData& cardgroup() const;
  PROTOBUF_NODISCARD ::msg::CardGroupData* release_cardgroup();
  ::msg::CardGroupData* mutable_cardgroup();
  void set_allocated_cardgroup(::msg::CardGroupData* cardgroup);
  private:
  const ::msg::CardGroupData& _internal_cardgroup() const;
  ::msg::CardGroupData* _internal_mutable_cardgroup();
  public:
  void unsafe_arena_set_allocated_cardgroup(
      ::msg::CardGroupData* cardgroup);
  ::msg::CardGroupData* unsafe_arena_release_cardgroup();

  // .msg.TowerDefenseData TowerDefense = 3;
  bool has_towerdefense() const;
  private:
  bool _internal_has_towerdefense() const;
  public:
  void clear_towerdefense();
  const ::msg::TowerDefenseData& towerdefense() const;
  PROTOBUF_NODISCARD ::msg::TowerDefenseData* release_towerdefense();
  ::msg::TowerDefenseData* mutable_towerdefense();
  void set_allocated_towerdefense(::msg::TowerDefenseData* towerdefense);
  private:
  const ::msg::TowerDefenseData& _internal_towerdefense() const;
  ::msg::TowerDefenseData* _internal_mutable_towerdefense();
  public:
  void unsafe_arena_set_allocated_towerdefense(
      ::msg::TowerDefenseData* towerdefense);
  ::msg::TowerDefenseData* unsafe_arena_release_towerdefense();

  // @@protoc_insertion_point(class_scope:msg.PvpData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PveDataInfo* pve_;
    ::msg::CardGroupData* cardgroup_;
    ::msg::TowerDefenseData* towerdefense_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TDCardGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDCardGroup) */ {
 public:
  inline TDCardGroup() : TDCardGroup(nullptr) {}
  ~TDCardGroup() override;
  explicit PROTOBUF_CONSTEXPR TDCardGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDCardGroup(const TDCardGroup& from);
  TDCardGroup(TDCardGroup&& from) noexcept
    : TDCardGroup() {
    *this = ::std::move(from);
  }

  inline TDCardGroup& operator=(const TDCardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDCardGroup& operator=(TDCardGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDCardGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDCardGroup* internal_default_instance() {
    return reinterpret_cast<const TDCardGroup*>(
               &_TDCardGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TDCardGroup& a, TDCardGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TDCardGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDCardGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDCardGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDCardGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDCardGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDCardGroup& from) {
    TDCardGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDCardGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDCardGroup";
  }
  protected:
  explicit TDCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated int32 Ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ids() const;
  void _internal_add_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ids();
  public:
  int32_t ids(int index) const;
  void set_ids(int index, int32_t value);
  void add_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:msg.TDCardGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TDCardGroups final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDCardGroups) */ {
 public:
  inline TDCardGroups() : TDCardGroups(nullptr) {}
  ~TDCardGroups() override;
  explicit PROTOBUF_CONSTEXPR TDCardGroups(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDCardGroups(const TDCardGroups& from);
  TDCardGroups(TDCardGroups&& from) noexcept
    : TDCardGroups() {
    *this = ::std::move(from);
  }

  inline TDCardGroups& operator=(const TDCardGroups& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDCardGroups& operator=(TDCardGroups&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDCardGroups& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDCardGroups* internal_default_instance() {
    return reinterpret_cast<const TDCardGroups*>(
               &_TDCardGroups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TDCardGroups& a, TDCardGroups& b) {
    a.Swap(&b);
  }
  inline void Swap(TDCardGroups* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDCardGroups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDCardGroups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDCardGroups>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDCardGroups& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDCardGroups& from) {
    TDCardGroups::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDCardGroups* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDCardGroups";
  }
  protected:
  explicit TDCardGroups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessBoardFieldNumber = 1,
    kChessPlayerFieldNumber = 2,
    kChessManFieldNumber = 3,
  };
  // .msg.TDCardGroup ChessBoard = 1;
  bool has_chessboard() const;
  private:
  bool _internal_has_chessboard() const;
  public:
  void clear_chessboard();
  const ::msg::TDCardGroup& chessboard() const;
  PROTOBUF_NODISCARD ::msg::TDCardGroup* release_chessboard();
  ::msg::TDCardGroup* mutable_chessboard();
  void set_allocated_chessboard(::msg::TDCardGroup* chessboard);
  private:
  const ::msg::TDCardGroup& _internal_chessboard() const;
  ::msg::TDCardGroup* _internal_mutable_chessboard();
  public:
  void unsafe_arena_set_allocated_chessboard(
      ::msg::TDCardGroup* chessboard);
  ::msg::TDCardGroup* unsafe_arena_release_chessboard();

  // .msg.TDCardGroup ChessPlayer = 2;
  bool has_chessplayer() const;
  private:
  bool _internal_has_chessplayer() const;
  public:
  void clear_chessplayer();
  const ::msg::TDCardGroup& chessplayer() const;
  PROTOBUF_NODISCARD ::msg::TDCardGroup* release_chessplayer();
  ::msg::TDCardGroup* mutable_chessplayer();
  void set_allocated_chessplayer(::msg::TDCardGroup* chessplayer);
  private:
  const ::msg::TDCardGroup& _internal_chessplayer() const;
  ::msg::TDCardGroup* _internal_mutable_chessplayer();
  public:
  void unsafe_arena_set_allocated_chessplayer(
      ::msg::TDCardGroup* chessplayer);
  ::msg::TDCardGroup* unsafe_arena_release_chessplayer();

  // .msg.TDCardGroup ChessMan = 3;
  bool has_chessman() const;
  private:
  bool _internal_has_chessman() const;
  public:
  void clear_chessman();
  const ::msg::TDCardGroup& chessman() const;
  PROTOBUF_NODISCARD ::msg::TDCardGroup* release_chessman();
  ::msg::TDCardGroup* mutable_chessman();
  void set_allocated_chessman(::msg::TDCardGroup* chessman);
  private:
  const ::msg::TDCardGroup& _internal_chessman() const;
  ::msg::TDCardGroup* _internal_mutable_chessman();
  public:
  void unsafe_arena_set_allocated_chessman(
      ::msg::TDCardGroup* chessman);
  ::msg::TDCardGroup* unsafe_arena_release_chessman();

  // @@protoc_insertion_point(class_scope:msg.TDCardGroups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDCardGroup* chessboard_;
    ::msg::TDCardGroup* chessplayer_;
    ::msg::TDCardGroup* chessman_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TDItemGroup_ItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TDItemGroup_ItemsEntry_DoNotUse, 
    int32_t, ::msg::TDItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TDItemGroup_ItemsEntry_DoNotUse, 
    int32_t, ::msg::TDItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TDItemGroup_ItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TDItemGroup_ItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TDItemGroup_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TDItemGroup_ItemsEntry_DoNotUse& other);
  static const TDItemGroup_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TDItemGroup_ItemsEntry_DoNotUse*>(&_TDItemGroup_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class TDItemGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDItemGroup) */ {
 public:
  inline TDItemGroup() : TDItemGroup(nullptr) {}
  ~TDItemGroup() override;
  explicit PROTOBUF_CONSTEXPR TDItemGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDItemGroup(const TDItemGroup& from);
  TDItemGroup(TDItemGroup&& from) noexcept
    : TDItemGroup() {
    *this = ::std::move(from);
  }

  inline TDItemGroup& operator=(const TDItemGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDItemGroup& operator=(TDItemGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDItemGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDItemGroup* internal_default_instance() {
    return reinterpret_cast<const TDItemGroup*>(
               &_TDItemGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TDItemGroup& a, TDItemGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TDItemGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDItemGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDItemGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDItemGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDItemGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDItemGroup& from) {
    TDItemGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDItemGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDItemGroup";
  }
  protected:
  explicit TDItemGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kCardGroupsFieldNumber = 1,
  };
  // map<int32, .msg.TDItem> Items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >&
      _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >*
      _internal_mutable_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >*
      mutable_items();

  // .msg.TDCardGroups CardGroups = 1;
  bool has_cardgroups() const;
  private:
  bool _internal_has_cardgroups() const;
  public:
  void clear_cardgroups();
  const ::msg::TDCardGroups& cardgroups() const;
  PROTOBUF_NODISCARD ::msg::TDCardGroups* release_cardgroups();
  ::msg::TDCardGroups* mutable_cardgroups();
  void set_allocated_cardgroups(::msg::TDCardGroups* cardgroups);
  private:
  const ::msg::TDCardGroups& _internal_cardgroups() const;
  ::msg::TDCardGroups* _internal_mutable_cardgroups();
  public:
  void unsafe_arena_set_allocated_cardgroups(
      ::msg::TDCardGroups* cardgroups);
  ::msg::TDCardGroups* unsafe_arena_release_cardgroups();

  // @@protoc_insertion_point(class_scope:msg.TDItemGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TDItemGroup_ItemsEntry_DoNotUse,
        int32_t, ::msg::TDItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> items_;
    ::msg::TDCardGroups* cardgroups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TowerDefenseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TowerDefenseData) */ {
 public:
  inline TowerDefenseData() : TowerDefenseData(nullptr) {}
  ~TowerDefenseData() override;
  explicit PROTOBUF_CONSTEXPR TowerDefenseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TowerDefenseData(const TowerDefenseData& from);
  TowerDefenseData(TowerDefenseData&& from) noexcept
    : TowerDefenseData() {
    *this = ::std::move(from);
  }

  inline TowerDefenseData& operator=(const TowerDefenseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TowerDefenseData& operator=(TowerDefenseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TowerDefenseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TowerDefenseData* internal_default_instance() {
    return reinterpret_cast<const TowerDefenseData*>(
               &_TowerDefenseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(TowerDefenseData& a, TowerDefenseData& b) {
    a.Swap(&b);
  }
  inline void Swap(TowerDefenseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TowerDefenseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TowerDefenseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TowerDefenseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TowerDefenseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TowerDefenseData& from) {
    TowerDefenseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TowerDefenseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TowerDefenseData";
  }
  protected:
  explicit TowerDefenseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemGroupFieldNumber = 1,
  };
  // .msg.TDItemGroup ItemGroup = 1;
  bool has_itemgroup() const;
  private:
  bool _internal_has_itemgroup() const;
  public:
  void clear_itemgroup();
  const ::msg::TDItemGroup& itemgroup() const;
  PROTOBUF_NODISCARD ::msg::TDItemGroup* release_itemgroup();
  ::msg::TDItemGroup* mutable_itemgroup();
  void set_allocated_itemgroup(::msg::TDItemGroup* itemgroup);
  private:
  const ::msg::TDItemGroup& _internal_itemgroup() const;
  ::msg::TDItemGroup* _internal_mutable_itemgroup();
  public:
  void unsafe_arena_set_allocated_itemgroup(
      ::msg::TDItemGroup* itemgroup);
  ::msg::TDItemGroup* unsafe_arena_release_itemgroup();

  // @@protoc_insertion_point(class_scope:msg.TowerDefenseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDItemGroup* itemgroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KernelCardGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.KernelCardGroup) */ {
 public:
  inline KernelCardGroup() : KernelCardGroup(nullptr) {}
  ~KernelCardGroup() override;
  explicit PROTOBUF_CONSTEXPR KernelCardGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KernelCardGroup(const KernelCardGroup& from);
  KernelCardGroup(KernelCardGroup&& from) noexcept
    : KernelCardGroup() {
    *this = ::std::move(from);
  }

  inline KernelCardGroup& operator=(const KernelCardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelCardGroup& operator=(KernelCardGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KernelCardGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const KernelCardGroup* internal_default_instance() {
    return reinterpret_cast<const KernelCardGroup*>(
               &_KernelCardGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(KernelCardGroup& a, KernelCardGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelCardGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KernelCardGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KernelCardGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KernelCardGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KernelCardGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KernelCardGroup& from) {
    KernelCardGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelCardGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.KernelCardGroup";
  }
  protected:
  explicit KernelCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessIdsFieldNumber = 1,
  };
  // repeated uint32 ChessIds = 1;
  int chessids_size() const;
  private:
  int _internal_chessids_size() const;
  public:
  void clear_chessids();
  private:
  uint32_t _internal_chessids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chessids() const;
  void _internal_add_chessids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chessids();
  public:
  uint32_t chessids(int index) const;
  void set_chessids(int index, uint32_t value);
  void add_chessids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chessids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chessids();

  // @@protoc_insertion_point(class_scope:msg.KernelCardGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chessids_;
    mutable std::atomic<int> _chessids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KernelChessInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.KernelChessInfo) */ {
 public:
  inline KernelChessInfo() : KernelChessInfo(nullptr) {}
  ~KernelChessInfo() override;
  explicit PROTOBUF_CONSTEXPR KernelChessInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KernelChessInfo(const KernelChessInfo& from);
  KernelChessInfo(KernelChessInfo&& from) noexcept
    : KernelChessInfo() {
    *this = ::std::move(from);
  }

  inline KernelChessInfo& operator=(const KernelChessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelChessInfo& operator=(KernelChessInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KernelChessInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const KernelChessInfo* internal_default_instance() {
    return reinterpret_cast<const KernelChessInfo*>(
               &_KernelChessInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(KernelChessInfo& a, KernelChessInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelChessInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KernelChessInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KernelChessInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KernelChessInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KernelChessInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KernelChessInfo& from) {
    KernelChessInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelChessInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.KernelChessInfo";
  }
  protected:
  explicit KernelChessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kQuantityFieldNumber = 3,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 Quantity = 3;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.KernelChessInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t level_;
    int32_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ApplyWorkshopRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ApplyWorkshopRule) */ {
 public:
  inline ApplyWorkshopRule() : ApplyWorkshopRule(nullptr) {}
  ~ApplyWorkshopRule() override;
  explicit PROTOBUF_CONSTEXPR ApplyWorkshopRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyWorkshopRule(const ApplyWorkshopRule& from);
  ApplyWorkshopRule(ApplyWorkshopRule&& from) noexcept
    : ApplyWorkshopRule() {
    *this = ::std::move(from);
  }

  inline ApplyWorkshopRule& operator=(const ApplyWorkshopRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyWorkshopRule& operator=(ApplyWorkshopRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyWorkshopRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyWorkshopRule* internal_default_instance() {
    return reinterpret_cast<const ApplyWorkshopRule*>(
               &_ApplyWorkshopRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ApplyWorkshopRule& a, ApplyWorkshopRule& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyWorkshopRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyWorkshopRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyWorkshopRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyWorkshopRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyWorkshopRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApplyWorkshopRule& from) {
    ApplyWorkshopRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyWorkshopRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ApplyWorkshopRule";
  }
  protected:
  explicit ApplyWorkshopRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtDataFieldNumber = 1,
  };
  // .msg.BattleExtData ExtData = 1;
  bool has_extdata() const;
  private:
  bool _internal_has_extdata() const;
  public:
  void clear_extdata();
  const ::msg::BattleExtData& extdata() const;
  PROTOBUF_NODISCARD ::msg::BattleExtData* release_extdata();
  ::msg::BattleExtData* mutable_extdata();
  void set_allocated_extdata(::msg::BattleExtData* extdata);
  private:
  const ::msg::BattleExtData& _internal_extdata() const;
  ::msg::BattleExtData* _internal_mutable_extdata();
  public:
  void unsafe_arena_set_allocated_extdata(
      ::msg::BattleExtData* extdata);
  ::msg::BattleExtData* unsafe_arena_release_extdata();

  // @@protoc_insertion_point(class_scope:msg.ApplyWorkshopRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::BattleExtData* extdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTVisitedMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTVisitedMap) */ {
 public:
  inline CSDTVisitedMap() : CSDTVisitedMap(nullptr) {}
  ~CSDTVisitedMap() override;
  explicit PROTOBUF_CONSTEXPR CSDTVisitedMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTVisitedMap(const CSDTVisitedMap& from);
  CSDTVisitedMap(CSDTVisitedMap&& from) noexcept
    : CSDTVisitedMap() {
    *this = ::std::move(from);
  }

  inline CSDTVisitedMap& operator=(const CSDTVisitedMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTVisitedMap& operator=(CSDTVisitedMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTVisitedMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTVisitedMap* internal_default_instance() {
    return reinterpret_cast<const CSDTVisitedMap*>(
               &_CSDTVisitedMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CSDTVisitedMap& a, CSDTVisitedMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTVisitedMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTVisitedMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTVisitedMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTVisitedMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTVisitedMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTVisitedMap& from) {
    CSDTVisitedMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTVisitedMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTVisitedMap";
  }
  protected:
  explicit CSDTVisitedMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 1,
    kMapIDFieldNumber = 2,
    kSubMapIDFieldNumber = 3,
    kIsPlayingFieldNumber = 4,
  };
  // int64 TimeStamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // uint32 MapID = 2;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 SubMapID = 3;
  void clear_submapid();
  uint32_t submapid() const;
  void set_submapid(uint32_t value);
  private:
  uint32_t _internal_submapid() const;
  void _internal_set_submapid(uint32_t value);
  public:

  // bool IsPlaying = 4;
  void clear_isplaying();
  bool isplaying() const;
  void set_isplaying(bool value);
  private:
  bool _internal_isplaying() const;
  void _internal_set_isplaying(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTVisitedMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    uint32_t mapid_;
    uint32_t submapid_;
    bool isplaying_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class VisitedMaps_MapsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VisitedMaps_MapsEntry_DoNotUse, 
    uint32_t, ::msg::CSDTVisitedMap,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VisitedMaps_MapsEntry_DoNotUse, 
    uint32_t, ::msg::CSDTVisitedMap,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  VisitedMaps_MapsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR VisitedMaps_MapsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VisitedMaps_MapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VisitedMaps_MapsEntry_DoNotUse& other);
  static const VisitedMaps_MapsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VisitedMaps_MapsEntry_DoNotUse*>(&_VisitedMaps_MapsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class VisitedMaps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.VisitedMaps) */ {
 public:
  inline VisitedMaps() : VisitedMaps(nullptr) {}
  ~VisitedMaps() override;
  explicit PROTOBUF_CONSTEXPR VisitedMaps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisitedMaps(const VisitedMaps& from);
  VisitedMaps(VisitedMaps&& from) noexcept
    : VisitedMaps() {
    *this = ::std::move(from);
  }

  inline VisitedMaps& operator=(const VisitedMaps& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitedMaps& operator=(VisitedMaps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisitedMaps& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisitedMaps* internal_default_instance() {
    return reinterpret_cast<const VisitedMaps*>(
               &_VisitedMaps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(VisitedMaps& a, VisitedMaps& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitedMaps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitedMaps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VisitedMaps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VisitedMaps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisitedMaps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VisitedMaps& from) {
    VisitedMaps::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitedMaps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.VisitedMaps";
  }
  protected:
  explicit VisitedMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 2,
    kPlayerIDFieldNumber = 1,
  };
  // map<uint32, .msg.CSDTVisitedMap> Maps = 2;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >&
      _internal_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >*
      _internal_mutable_maps();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >&
      maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >*
      mutable_maps();

  // string PlayerID = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_NODISCARD std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:msg.VisitedMaps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        VisitedMaps_MapsEntry_DoNotUse,
        uint32_t, ::msg::CSDTVisitedMap,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> maps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTCurShowItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTCurShowItem) */ {
 public:
  inline CSDTCurShowItem() : CSDTCurShowItem(nullptr) {}
  ~CSDTCurShowItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTCurShowItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTCurShowItem(const CSDTCurShowItem& from);
  CSDTCurShowItem(CSDTCurShowItem&& from) noexcept
    : CSDTCurShowItem() {
    *this = ::std::move(from);
  }

  inline CSDTCurShowItem& operator=(const CSDTCurShowItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTCurShowItem& operator=(CSDTCurShowItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTCurShowItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTCurShowItem* internal_default_instance() {
    return reinterpret_cast<const CSDTCurShowItem*>(
               &_CSDTCurShowItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CSDTCurShowItem& a, CSDTCurShowItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTCurShowItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTCurShowItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTCurShowItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTCurShowItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTCurShowItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTCurShowItem& from) {
    CSDTCurShowItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTCurShowItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTCurShowItem";
  }
  protected:
  explicit CSDTCurShowItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string InstanceId = 2;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTCurShowItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPassportHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPassportHistory) */ {
 public:
  inline CSDTPassportHistory() : CSDTPassportHistory(nullptr) {}
  ~CSDTPassportHistory() override;
  explicit PROTOBUF_CONSTEXPR CSDTPassportHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPassportHistory(const CSDTPassportHistory& from);
  CSDTPassportHistory(CSDTPassportHistory&& from) noexcept
    : CSDTPassportHistory() {
    *this = ::std::move(from);
  }

  inline CSDTPassportHistory& operator=(const CSDTPassportHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPassportHistory& operator=(CSDTPassportHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPassportHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPassportHistory* internal_default_instance() {
    return reinterpret_cast<const CSDTPassportHistory*>(
               &_CSDTPassportHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CSDTPassportHistory& a, CSDTPassportHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPassportHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPassportHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPassportHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPassportHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPassportHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPassportHistory& from) {
    CSDTPassportHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPassportHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPassportHistory";
  }
  protected:
  explicit CSDTPassportHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSeasonFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // .msg.PASSPORTTYPE Type = 1;
  void clear_type();
  ::msg::PASSPORTTYPE type() const;
  void set_type(::msg::PASSPORTTYPE value);
  private:
  ::msg::PASSPORTTYPE _internal_type() const;
  void _internal_set_type(::msg::PASSPORTTYPE value);
  public:

  // uint32 Season = 2;
  void clear_season();
  uint32_t season() const;
  void set_season(uint32_t value);
  private:
  uint32_t _internal_season() const;
  void _internal_set_season(uint32_t value);
  public:

  // uint32 Level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPassportHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    uint32_t season_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ExchangeRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ExchangeRecord) */ {
 public:
  inline ExchangeRecord() : ExchangeRecord(nullptr) {}
  ~ExchangeRecord() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRecord(const ExchangeRecord& from);
  ExchangeRecord(ExchangeRecord&& from) noexcept
    : ExchangeRecord() {
    *this = ::std::move(from);
  }

  inline ExchangeRecord& operator=(const ExchangeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRecord& operator=(ExchangeRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRecord* internal_default_instance() {
    return reinterpret_cast<const ExchangeRecord*>(
               &_ExchangeRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ExchangeRecord& a, ExchangeRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRecord& from) {
    ExchangeRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ExchangeRecord";
  }
  protected:
  explicit ExchangeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 1,
    kBalanceCountFieldNumber = 2,
    kSaleCountFieldNumber = 3,
  };
  // bool Init = 1;
  void clear_init();
  bool init() const;
  void set_init(bool value);
  private:
  bool _internal_init() const;
  void _internal_set_init(bool value);
  public:

  // int32 BalanceCount = 2;
  void clear_balancecount();
  int32_t balancecount() const;
  void set_balancecount(int32_t value);
  private:
  int32_t _internal_balancecount() const;
  void _internal_set_balancecount(int32_t value);
  public:

  // int32 SaleCount = 3;
  void clear_salecount();
  int32_t salecount() const;
  void set_salecount(int32_t value);
  private:
  int32_t _internal_salecount() const;
  void _internal_set_salecount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ExchangeRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool init_;
    int32_t balancecount_;
    int32_t salecount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse, 
    uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse& other);
  static const CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse*>(&_CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTPlayerBaseInfo.PvpHistoryEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse& other);
  static const CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse*>(&_CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse, 
    std::string, ::msg::CSDTPassportCard,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse, 
    std::string, ::msg::CSDTPassportCard,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse& other);
  static const CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse*>(&_CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTPlayerBaseInfo.AdvancePassportEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse& other);
  static const CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse*>(&_CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTPlayerBaseInfo.PassportCardNumEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPlayerBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerBaseInfo) */ {
 public:
  inline CSDTPlayerBaseInfo() : CSDTPlayerBaseInfo(nullptr) {}
  ~CSDTPlayerBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerBaseInfo(const CSDTPlayerBaseInfo& from);
  CSDTPlayerBaseInfo(CSDTPlayerBaseInfo&& from) noexcept
    : CSDTPlayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerBaseInfo& operator=(const CSDTPlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerBaseInfo& operator=(CSDTPlayerBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerBaseInfo*>(
               &_CSDTPlayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CSDTPlayerBaseInfo& a, CSDTPlayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerBaseInfo& from) {
    CSDTPlayerBaseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerBaseInfo";
  }
  protected:
  explicit CSDTPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPvpHistoryFieldNumber = 10,
    kSwitchPlayerSetFieldNumber = 15,
    kPunishmentFieldNumber = 27,
    kPassportTypeIdsFieldNumber = 31,
    kMvpInfosFieldNumber = 32,
    kAdvancePassportFieldNumber = 43,
    kPassportCardNumFieldNumber = 44,
    kPassportHistoryFieldNumber = 50,
    kIdFieldNumber = 1,
    kUsrNameFieldNumber = 2,
    kChannelUsrIdFieldNumber = 14,
    kCountryFieldNumber = 22,
    kNativeCountryFieldNumber = 24,
    kOriRegionFieldNumber = 38,
    kGuildInfoFieldNumber = 36,
    kMedalFieldNumber = 37,
    kPvpDataFieldNumber = 45,
    kMentorShipInfoFieldNumber = 46,
    kMentorInfoFieldNumber = 48,
    kExchangeRecordFieldNumber = 51,
    kHeadPicFieldNumber = 3,
    kChatBubbleFieldNumber = 4,
    kMMRFieldNumber = 5,
    kLevelFieldNumber = 6,
    kExpFieldNumber = 7,
    kCurRankSeasonFieldNumber = 8,
    kHistoryPvpShowPermissionFieldNumber = 9,
    kHeadPicFrameFieldNumber = 11,
    kHeadPicPendantFieldNumber = 12,
    kSceneFieldNumber = 13,
    kChannelVipTypeFieldNumber = 16,
    kLaunchTypeFieldNumber = 17,
    kPlatFormTypeFieldNumber = 18,
    kTMMRFieldNumber = 19,
    kPassportLevelFieldNumber = 20,
    kStarFieldNumber = 21,
    kLastLoginTimeFieldNumber = 23,
    kResetHeadPicTimeFieldNumber = 26,
    kChannelTypeFieldNumber = 25,
    kPeriodFieldNumber = 28,
    kProvinceFieldNumber = 29,
    kMvpCountFieldNumber = 30,
    kObservePvpIdFieldNumber = 33,
    kPs4OnlyFieldNumber = 34,
    kRestrictTypeFieldNumber = 35,
    kFFMMRFieldNumber = 39,
    kExchangeStateFieldNumber = 49,
    kTotalDurationFieldNumber = 47,
  };
  // map<uint64, string> PvpHistory = 10;
  int pvphistory_size() const;
  private:
  int _internal_pvphistory_size() const;
  public:
  void clear_pvphistory();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      _internal_pvphistory() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      _internal_mutable_pvphistory();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
      pvphistory() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
      mutable_pvphistory();

  // repeated .msg.SWITCHTYPE SwitchPlayerSet = 15;
  int switchplayerset_size() const;
  private:
  int _internal_switchplayerset_size() const;
  public:
  void clear_switchplayerset();
  private:
  ::msg::SWITCHTYPE _internal_switchplayerset(int index) const;
  void _internal_add_switchplayerset(::msg::SWITCHTYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_switchplayerset();
  public:
  ::msg::SWITCHTYPE switchplayerset(int index) const;
  void set_switchplayerset(int index, ::msg::SWITCHTYPE value);
  void add_switchplayerset(::msg::SWITCHTYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& switchplayerset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_switchplayerset();

  // repeated .msg.CSDTPunishment Punishment = 27;
  int punishment_size() const;
  private:
  int _internal_punishment_size() const;
  public:
  void clear_punishment();
  ::msg::CSDTPunishment* mutable_punishment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPunishment >*
      mutable_punishment();
  private:
  const ::msg::CSDTPunishment& _internal_punishment(int index) const;
  ::msg::CSDTPunishment* _internal_add_punishment();
  public:
  const ::msg::CSDTPunishment& punishment(int index) const;
  ::msg::CSDTPunishment* add_punishment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPunishment >&
      punishment() const;

  // repeated uint32 PassportTypeIds = 31;
  int passporttypeids_size() const;
  private:
  int _internal_passporttypeids_size() const;
  public:
  void clear_passporttypeids();
  private:
  uint32_t _internal_passporttypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passporttypeids() const;
  void _internal_add_passporttypeids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passporttypeids();
  public:
  uint32_t passporttypeids(int index) const;
  void set_passporttypeids(int index, uint32_t value);
  void add_passporttypeids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passporttypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passporttypeids();

  // map<uint32, uint32> MvpInfos = 32;
  int mvpinfos_size() const;
  private:
  int _internal_mvpinfos_size() const;
  public:
  void clear_mvpinfos();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_mvpinfos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_mvpinfos();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      mvpinfos() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_mvpinfos();

  // map<string, .msg.CSDTPassportCard> AdvancePassport = 43;
  int advancepassport_size() const;
  private:
  int _internal_advancepassport_size() const;
  public:
  void clear_advancepassport();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >&
      _internal_advancepassport() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >*
      _internal_mutable_advancepassport();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >&
      advancepassport() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >*
      mutable_advancepassport();

  // map<string, uint32> PassportCardNum = 44;
  int passportcardnum_size() const;
  private:
  int _internal_passportcardnum_size() const;
  public:
  void clear_passportcardnum();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_passportcardnum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_passportcardnum();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      passportcardnum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_passportcardnum();

  // repeated .msg.CSDTPassportHistory PassportHistory = 50;
  int passporthistory_size() const;
  private:
  int _internal_passporthistory_size() const;
  public:
  void clear_passporthistory();
  ::msg::CSDTPassportHistory* mutable_passporthistory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPassportHistory >*
      mutable_passporthistory();
  private:
  const ::msg::CSDTPassportHistory& _internal_passporthistory(int index) const;
  ::msg::CSDTPassportHistory* _internal_add_passporthistory();
  public:
  const ::msg::CSDTPassportHistory& passporthistory(int index) const;
  ::msg::CSDTPassportHistory* add_passporthistory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPassportHistory >&
      passporthistory() const;

  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string UsrName = 2;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string ChannelUsrId = 14;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // string Country = 22;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string NativeCountry = 24;
  void clear_nativecountry();
  const std::string& nativecountry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nativecountry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nativecountry();
  PROTOBUF_NODISCARD std::string* release_nativecountry();
  void set_allocated_nativecountry(std::string* nativecountry);
  private:
  const std::string& _internal_nativecountry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nativecountry(const std::string& value);
  std::string* _internal_mutable_nativecountry();
  public:

  // string OriRegion = 38;
  void clear_oriregion();
  const std::string& oriregion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oriregion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oriregion();
  PROTOBUF_NODISCARD std::string* release_oriregion();
  void set_allocated_oriregion(std::string* oriregion);
  private:
  const std::string& _internal_oriregion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oriregion(const std::string& value);
  std::string* _internal_mutable_oriregion();
  public:

  // .msg.PlayerGuildInfo GuildInfo = 36;
  bool has_guildinfo() const;
  private:
  bool _internal_has_guildinfo() const;
  public:
  void clear_guildinfo();
  const ::msg::PlayerGuildInfo& guildinfo() const;
  PROTOBUF_NODISCARD ::msg::PlayerGuildInfo* release_guildinfo();
  ::msg::PlayerGuildInfo* mutable_guildinfo();
  void set_allocated_guildinfo(::msg::PlayerGuildInfo* guildinfo);
  private:
  const ::msg::PlayerGuildInfo& _internal_guildinfo() const;
  ::msg::PlayerGuildInfo* _internal_mutable_guildinfo();
  public:
  void unsafe_arena_set_allocated_guildinfo(
      ::msg::PlayerGuildInfo* guildinfo);
  ::msg::PlayerGuildInfo* unsafe_arena_release_guildinfo();

  // .msg.CSDTItem medal = 37;
  bool has_medal() const;
  private:
  bool _internal_has_medal() const;
  public:
  void clear_medal();
  const ::msg::CSDTItem& medal() const;
  PROTOBUF_NODISCARD ::msg::CSDTItem* release_medal();
  ::msg::CSDTItem* mutable_medal();
  void set_allocated_medal(::msg::CSDTItem* medal);
  private:
  const ::msg::CSDTItem& _internal_medal() const;
  ::msg::CSDTItem* _internal_mutable_medal();
  public:
  void unsafe_arena_set_allocated_medal(
      ::msg::CSDTItem* medal);
  ::msg::CSDTItem* unsafe_arena_release_medal();

  // .msg.CSDTPlayerPvpData PvpData = 45;
  bool has_pvpdata() const;
  private:
  bool _internal_has_pvpdata() const;
  public:
  void clear_pvpdata();
  const ::msg::CSDTPlayerPvpData& pvpdata() const;
  PROTOBUF_NODISCARD ::msg::CSDTPlayerPvpData* release_pvpdata();
  ::msg::CSDTPlayerPvpData* mutable_pvpdata();
  void set_allocated_pvpdata(::msg::CSDTPlayerPvpData* pvpdata);
  private:
  const ::msg::CSDTPlayerPvpData& _internal_pvpdata() const;
  ::msg::CSDTPlayerPvpData* _internal_mutable_pvpdata();
  public:
  void unsafe_arena_set_allocated_pvpdata(
      ::msg::CSDTPlayerPvpData* pvpdata);
  ::msg::CSDTPlayerPvpData* unsafe_arena_release_pvpdata();

  // .msg.PlayerMentorShipInfo MentorShipInfo = 46;
  bool has_mentorshipinfo() const;
  private:
  bool _internal_has_mentorshipinfo() const;
  public:
  void clear_mentorshipinfo();
  const ::msg::PlayerMentorShipInfo& mentorshipinfo() const;
  PROTOBUF_NODISCARD ::msg::PlayerMentorShipInfo* release_mentorshipinfo();
  ::msg::PlayerMentorShipInfo* mutable_mentorshipinfo();
  void set_allocated_mentorshipinfo(::msg::PlayerMentorShipInfo* mentorshipinfo);
  private:
  const ::msg::PlayerMentorShipInfo& _internal_mentorshipinfo() const;
  ::msg::PlayerMentorShipInfo* _internal_mutable_mentorshipinfo();
  public:
  void unsafe_arena_set_allocated_mentorshipinfo(
      ::msg::PlayerMentorShipInfo* mentorshipinfo);
  ::msg::PlayerMentorShipInfo* unsafe_arena_release_mentorshipinfo();

  // .msg.CSDTMentorInfo MentorInfo = 48;
  bool has_mentorinfo() const;
  private:
  bool _internal_has_mentorinfo() const;
  public:
  void clear_mentorinfo();
  const ::msg::CSDTMentorInfo& mentorinfo() const;
  PROTOBUF_NODISCARD ::msg::CSDTMentorInfo* release_mentorinfo();
  ::msg::CSDTMentorInfo* mutable_mentorinfo();
  void set_allocated_mentorinfo(::msg::CSDTMentorInfo* mentorinfo);
  private:
  const ::msg::CSDTMentorInfo& _internal_mentorinfo() const;
  ::msg::CSDTMentorInfo* _internal_mutable_mentorinfo();
  public:
  void unsafe_arena_set_allocated_mentorinfo(
      ::msg::CSDTMentorInfo* mentorinfo);
  ::msg::CSDTMentorInfo* unsafe_arena_release_mentorinfo();

  // .msg.ExchangeRecord ExchangeRecord = 51;
  bool has_exchangerecord() const;
  private:
  bool _internal_has_exchangerecord() const;
  public:
  void clear_exchangerecord();
  const ::msg::ExchangeRecord& exchangerecord() const;
  PROTOBUF_NODISCARD ::msg::ExchangeRecord* release_exchangerecord();
  ::msg::ExchangeRecord* mutable_exchangerecord();
  void set_allocated_exchangerecord(::msg::ExchangeRecord* exchangerecord);
  private:
  const ::msg::ExchangeRecord& _internal_exchangerecord() const;
  ::msg::ExchangeRecord* _internal_mutable_exchangerecord();
  public:
  void unsafe_arena_set_allocated_exchangerecord(
      ::msg::ExchangeRecord* exchangerecord);
  ::msg::ExchangeRecord* unsafe_arena_release_exchangerecord();

  // uint32 HeadPic = 3;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 ChatBubble = 4;
  void clear_chatbubble();
  uint32_t chatbubble() const;
  void set_chatbubble(uint32_t value);
  private:
  uint32_t _internal_chatbubble() const;
  void _internal_set_chatbubble(uint32_t value);
  public:

  // uint32 MMR = 5;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 Level = 6;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 Exp = 7;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // uint32 CurRankSeason = 8;
  void clear_currankseason();
  uint32_t currankseason() const;
  void set_currankseason(uint32_t value);
  private:
  uint32_t _internal_currankseason() const;
  void _internal_set_currankseason(uint32_t value);
  public:

  // .msg.HISTORYPVPSHOWPERMISSION HistoryPvpShowPermission = 9;
  void clear_historypvpshowpermission();
  ::msg::HISTORYPVPSHOWPERMISSION historypvpshowpermission() const;
  void set_historypvpshowpermission(::msg::HISTORYPVPSHOWPERMISSION value);
  private:
  ::msg::HISTORYPVPSHOWPERMISSION _internal_historypvpshowpermission() const;
  void _internal_set_historypvpshowpermission(::msg::HISTORYPVPSHOWPERMISSION value);
  public:

  // uint32 HeadPicFrame = 11;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // uint32 HeadPicPendant = 12;
  void clear_headpicpendant();
  uint32_t headpicpendant() const;
  void set_headpicpendant(uint32_t value);
  private:
  uint32_t _internal_headpicpendant() const;
  void _internal_set_headpicpendant(uint32_t value);
  public:

  // uint32 Scene = 13;
  void clear_scene();
  uint32_t scene() const;
  void set_scene(uint32_t value);
  private:
  uint32_t _internal_scene() const;
  void _internal_set_scene(uint32_t value);
  public:

  // .msg.CHANNELVIPTYPE ChannelVipType = 16;
  void clear_channelviptype();
  ::msg::CHANNELVIPTYPE channelviptype() const;
  void set_channelviptype(::msg::CHANNELVIPTYPE value);
  private:
  ::msg::CHANNELVIPTYPE _internal_channelviptype() const;
  void _internal_set_channelviptype(::msg::CHANNELVIPTYPE value);
  public:

  // .msg.LAUNCHTYPE LaunchType = 17;
  void clear_launchtype();
  ::msg::LAUNCHTYPE launchtype() const;
  void set_launchtype(::msg::LAUNCHTYPE value);
  private:
  ::msg::LAUNCHTYPE _internal_launchtype() const;
  void _internal_set_launchtype(::msg::LAUNCHTYPE value);
  public:

  // .msg.PLATFORMTYPE PlatFormType = 18;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // uint32 TMMR = 19;
  void clear_tmmr();
  uint32_t tmmr() const;
  void set_tmmr(uint32_t value);
  private:
  uint32_t _internal_tmmr() const;
  void _internal_set_tmmr(uint32_t value);
  public:

  // uint32 PassportLevel = 20;
  void clear_passportlevel();
  uint32_t passportlevel() const;
  void set_passportlevel(uint32_t value);
  private:
  uint32_t _internal_passportlevel() const;
  void _internal_set_passportlevel(uint32_t value);
  public:

  // uint32 Star = 21;
  void clear_star();
  uint32_t star() const;
  void set_star(uint32_t value);
  private:
  uint32_t _internal_star() const;
  void _internal_set_star(uint32_t value);
  public:

  // int64 LastLoginTime = 23;
  void clear_lastlogintime();
  int64_t lastlogintime() const;
  void set_lastlogintime(int64_t value);
  private:
  int64_t _internal_lastlogintime() const;
  void _internal_set_lastlogintime(int64_t value);
  public:

  // int64 ResetHeadPicTime = 26;
  void clear_resetheadpictime();
  int64_t resetheadpictime() const;
  void set_resetheadpictime(int64_t value);
  private:
  int64_t _internal_resetheadpictime() const;
  void _internal_set_resetheadpictime(int64_t value);
  public:

  // .msg.CHANELTYPE ChannelType = 25;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // uint32 Period = 28;
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // uint32 Province = 29;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // uint32 MvpCount = 30;
  void clear_mvpcount();
  uint32_t mvpcount() const;
  void set_mvpcount(uint32_t value);
  private:
  uint32_t _internal_mvpcount() const;
  void _internal_set_mvpcount(uint32_t value);
  public:

  // uint64 ObservePvpId = 33;
  void clear_observepvpid();
  uint64_t observepvpid() const;
  void set_observepvpid(uint64_t value);
  private:
  uint64_t _internal_observepvpid() const;
  void _internal_set_observepvpid(uint64_t value);
  public:

  // bool Ps4Only = 34;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // .msg.UserRestrictType RestrictType = 35;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // uint32 FFMMR = 39;
  void clear_ffmmr();
  uint32_t ffmmr() const;
  void set_ffmmr(uint32_t value);
  private:
  uint32_t _internal_ffmmr() const;
  void _internal_set_ffmmr(uint32_t value);
  public:

  // .msg.EXCHANGESTATE ExchangeState = 49;
  void clear_exchangestate();
  ::msg::EXCHANGESTATE exchangestate() const;
  void set_exchangestate(::msg::EXCHANGESTATE value);
  private:
  ::msg::EXCHANGESTATE _internal_exchangestate() const;
  void _internal_set_exchangestate(::msg::EXCHANGESTATE value);
  public:

  // int64 TotalDuration = 47;
  void clear_totalduration();
  int64_t totalduration() const;
  void set_totalduration(int64_t value);
  private:
  int64_t _internal_totalduration() const;
  void _internal_set_totalduration(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse,
        uint64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> pvphistory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> switchplayerset_;
    mutable std::atomic<int> _switchplayerset_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPunishment > punishment_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passporttypeids_;
    mutable std::atomic<int> _passporttypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> mvpinfos_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse,
        std::string, ::msg::CSDTPassportCard,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> advancepassport_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse,
        std::string, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> passportcardnum_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPassportHistory > passporthistory_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nativecountry_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oriregion_;
    ::msg::PlayerGuildInfo* guildinfo_;
    ::msg::CSDTItem* medal_;
    ::msg::CSDTPlayerPvpData* pvpdata_;
    ::msg::PlayerMentorShipInfo* mentorshipinfo_;
    ::msg::CSDTMentorInfo* mentorinfo_;
    ::msg::ExchangeRecord* exchangerecord_;
    uint32_t headpic_;
    uint32_t chatbubble_;
    uint32_t mmr_;
    uint32_t level_;
    uint32_t exp_;
    uint32_t currankseason_;
    int historypvpshowpermission_;
    uint32_t headpicframe_;
    uint32_t headpicpendant_;
    uint32_t scene_;
    int channelviptype_;
    int launchtype_;
    int platformtype_;
    uint32_t tmmr_;
    uint32_t passportlevel_;
    uint32_t star_;
    int64_t lastlogintime_;
    int64_t resetheadpictime_;
    int channeltype_;
    uint32_t period_;
    uint32_t province_;
    uint32_t mvpcount_;
    uint64_t observepvpid_;
    bool ps4only_;
    int restricttype_;
    uint32_t ffmmr_;
    int exchangestate_;
    int64_t totalduration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerGuildInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerGuildInfo) */ {
 public:
  inline PlayerGuildInfo() : PlayerGuildInfo(nullptr) {}
  ~PlayerGuildInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerGuildInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerGuildInfo(const PlayerGuildInfo& from);
  PlayerGuildInfo(PlayerGuildInfo&& from) noexcept
    : PlayerGuildInfo() {
    *this = ::std::move(from);
  }

  inline PlayerGuildInfo& operator=(const PlayerGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerGuildInfo& operator=(PlayerGuildInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerGuildInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerGuildInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerGuildInfo*>(
               &_PlayerGuildInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(PlayerGuildInfo& a, PlayerGuildInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerGuildInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerGuildInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerGuildInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerGuildInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerGuildInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerGuildInfo& from) {
    PlayerGuildInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerGuildInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerGuildInfo";
  }
  protected:
  explicit PlayerGuildInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kSignFieldNumber = 3,
    kRoleFieldNumber = 4,
  };
  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 Sign = 3;
  void clear_sign();
  int32_t sign() const;
  void set_sign(int32_t value);
  private:
  int32_t _internal_sign() const;
  void _internal_set_sign(int32_t value);
  public:

  // .msg.GUILDROLETYPE Role = 4;
  void clear_role();
  ::msg::GUILDROLETYPE role() const;
  void set_role(::msg::GUILDROLETYPE value);
  private:
  ::msg::GUILDROLETYPE _internal_role() const;
  void _internal_set_role(::msg::GUILDROLETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerGuildInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t sign_;
    int role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse, 
    int32_t, ::msg::HistoryMaxCupMmr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse, 
    int32_t, ::msg::HistoryMaxCupMmr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse& other);
  static const CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse*>(&_CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPlayerSimpleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerSimpleInfo) */ {
 public:
  inline CSDTPlayerSimpleInfo() : CSDTPlayerSimpleInfo(nullptr) {}
  ~CSDTPlayerSimpleInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerSimpleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerSimpleInfo(const CSDTPlayerSimpleInfo& from);
  CSDTPlayerSimpleInfo(CSDTPlayerSimpleInfo&& from) noexcept
    : CSDTPlayerSimpleInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerSimpleInfo& operator=(const CSDTPlayerSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerSimpleInfo& operator=(CSDTPlayerSimpleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerSimpleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerSimpleInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerSimpleInfo*>(
               &_CSDTPlayerSimpleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CSDTPlayerSimpleInfo& a, CSDTPlayerSimpleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerSimpleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerSimpleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerSimpleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerSimpleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerSimpleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerSimpleInfo& from) {
    CSDTPlayerSimpleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerSimpleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerSimpleInfo";
  }
  protected:
  explicit CSDTPlayerSimpleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPassportTypeIdsFieldNumber = 15,
    kHisToryMaxStatFieldNumber = 25,
    kIdFieldNumber = 1,
    kUsrNameFieldNumber = 2,
    kCountryFieldNumber = 11,
    kChannelUsrIdFieldNumber = 21,
    kGuildInfoFieldNumber = 22,
    kHeadPicFieldNumber = 3,
    kHeadPicFrameFieldNumber = 4,
    kHeadPicPendantFieldNumber = 5,
    kChatBubbleFieldNumber = 6,
    kMMRFieldNumber = 7,
    kTMMRFieldNumber = 8,
    kCupFieldNumber = 9,
    kLevelFieldNumber = 10,
    kProvinceFieldNumber = 12,
    kPlatFormTypeFieldNumber = 13,
    kObservePvpIdFieldNumber = 16,
    kPeriodFieldNumber = 14,
    kPS4OnlyFieldNumber = 19,
    kChannelTypeFieldNumber = 20,
    kRestrictTypeFieldNumber = 23,
    kExchangeStateFieldNumber = 24,
  };
  // repeated uint32 PassportTypeIds = 15;
  int passporttypeids_size() const;
  private:
  int _internal_passporttypeids_size() const;
  public:
  void clear_passporttypeids();
  private:
  uint32_t _internal_passporttypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passporttypeids() const;
  void _internal_add_passporttypeids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passporttypeids();
  public:
  uint32_t passporttypeids(int index) const;
  void set_passporttypeids(int index, uint32_t value);
  void add_passporttypeids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passporttypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passporttypeids();

  // map<int32, .msg.HistoryMaxCupMmr> HisToryMaxStat = 25;
  int historymaxstat_size() const;
  private:
  int _internal_historymaxstat_size() const;
  public:
  void clear_historymaxstat();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >&
      _internal_historymaxstat() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >*
      _internal_mutable_historymaxstat();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >&
      historymaxstat() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >*
      mutable_historymaxstat();

  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string UsrName = 2;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string Country = 11;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string ChannelUsrId = 21;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // .msg.PlayerGuildInfo GuildInfo = 22;
  bool has_guildinfo() const;
  private:
  bool _internal_has_guildinfo() const;
  public:
  void clear_guildinfo();
  const ::msg::PlayerGuildInfo& guildinfo() const;
  PROTOBUF_NODISCARD ::msg::PlayerGuildInfo* release_guildinfo();
  ::msg::PlayerGuildInfo* mutable_guildinfo();
  void set_allocated_guildinfo(::msg::PlayerGuildInfo* guildinfo);
  private:
  const ::msg::PlayerGuildInfo& _internal_guildinfo() const;
  ::msg::PlayerGuildInfo* _internal_mutable_guildinfo();
  public:
  void unsafe_arena_set_allocated_guildinfo(
      ::msg::PlayerGuildInfo* guildinfo);
  ::msg::PlayerGuildInfo* unsafe_arena_release_guildinfo();

  // uint32 HeadPic = 3;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 HeadPicFrame = 4;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // uint32 HeadPicPendant = 5;
  void clear_headpicpendant();
  uint32_t headpicpendant() const;
  void set_headpicpendant(uint32_t value);
  private:
  uint32_t _internal_headpicpendant() const;
  void _internal_set_headpicpendant(uint32_t value);
  public:

  // uint32 ChatBubble = 6;
  void clear_chatbubble();
  uint32_t chatbubble() const;
  void set_chatbubble(uint32_t value);
  private:
  uint32_t _internal_chatbubble() const;
  void _internal_set_chatbubble(uint32_t value);
  public:

  // uint32 MMR = 7;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 TMMR = 8;
  void clear_tmmr();
  uint32_t tmmr() const;
  void set_tmmr(uint32_t value);
  private:
  uint32_t _internal_tmmr() const;
  void _internal_set_tmmr(uint32_t value);
  public:

  // uint32 Cup = 9;
  void clear_cup();
  uint32_t cup() const;
  void set_cup(uint32_t value);
  private:
  uint32_t _internal_cup() const;
  void _internal_set_cup(uint32_t value);
  public:

  // uint32 Level = 10;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 Province = 12;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // .msg.PLATFORMTYPE PlatFormType = 13;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // uint64 ObservePvpId = 16;
  void clear_observepvpid();
  uint64_t observepvpid() const;
  void set_observepvpid(uint64_t value);
  private:
  uint64_t _internal_observepvpid() const;
  void _internal_set_observepvpid(uint64_t value);
  public:

  // uint32 Period = 14;
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // bool PS4Only = 19;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // .msg.CHANELTYPE ChannelType = 20;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // .msg.UserRestrictType RestrictType = 23;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // .msg.EXCHANGESTATE ExchangeState = 24;
  void clear_exchangestate();
  ::msg::EXCHANGESTATE exchangestate() const;
  void set_exchangestate(::msg::EXCHANGESTATE value);
  private:
  ::msg::EXCHANGESTATE _internal_exchangestate() const;
  void _internal_set_exchangestate(::msg::EXCHANGESTATE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerSimpleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passporttypeids_;
    mutable std::atomic<int> _passporttypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse,
        int32_t, ::msg::HistoryMaxCupMmr,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> historymaxstat_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::msg::PlayerGuildInfo* guildinfo_;
    uint32_t headpic_;
    uint32_t headpicframe_;
    uint32_t headpicpendant_;
    uint32_t chatbubble_;
    uint32_t mmr_;
    uint32_t tmmr_;
    uint32_t cup_;
    uint32_t level_;
    uint32_t province_;
    int platformtype_;
    uint64_t observepvpid_;
    uint32_t period_;
    bool ps4only_;
    int channeltype_;
    int restricttype_;
    int exchangestate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerRankInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerRankInfo) */ {
 public:
  inline CSDTPlayerRankInfo() : CSDTPlayerRankInfo(nullptr) {}
  ~CSDTPlayerRankInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerRankInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerRankInfo(const CSDTPlayerRankInfo& from);
  CSDTPlayerRankInfo(CSDTPlayerRankInfo&& from) noexcept
    : CSDTPlayerRankInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerRankInfo& operator=(const CSDTPlayerRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerRankInfo& operator=(CSDTPlayerRankInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerRankInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerRankInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerRankInfo*>(
               &_CSDTPlayerRankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CSDTPlayerRankInfo& a, CSDTPlayerRankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerRankInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerRankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerRankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerRankInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerRankInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerRankInfo& from) {
    CSDTPlayerRankInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerRankInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerRankInfo";
  }
  protected:
  explicit CSDTPlayerRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUsrNameFieldNumber = 2,
    kCountryFieldNumber = 5,
    kHeadPicFieldNumber = 3,
    kHeadPicFrameFieldNumber = 4,
    kCupFieldNumber = 6,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string UsrName = 2;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string Country = 5;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // uint32 HeadPic = 3;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 HeadPicFrame = 4;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // uint32 Cup = 6;
  void clear_cup();
  uint32_t cup() const;
  void set_cup(uint32_t value);
  private:
  uint32_t _internal_cup() const;
  void _internal_set_cup(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerRankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    uint32_t headpic_;
    uint32_t headpicframe_;
    uint32_t cup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerTournamentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerTournamentInfo) */ {
 public:
  inline CSDTPlayerTournamentInfo() : CSDTPlayerTournamentInfo(nullptr) {}
  ~CSDTPlayerTournamentInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerTournamentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerTournamentInfo(const CSDTPlayerTournamentInfo& from);
  CSDTPlayerTournamentInfo(CSDTPlayerTournamentInfo&& from) noexcept
    : CSDTPlayerTournamentInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerTournamentInfo& operator=(const CSDTPlayerTournamentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerTournamentInfo& operator=(CSDTPlayerTournamentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerTournamentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerTournamentInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerTournamentInfo*>(
               &_CSDTPlayerTournamentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CSDTPlayerTournamentInfo& a, CSDTPlayerTournamentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerTournamentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerTournamentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerTournamentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerTournamentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerTournamentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerTournamentInfo& from) {
    CSDTPlayerTournamentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerTournamentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerTournamentInfo";
  }
  protected:
  explicit CSDTPlayerTournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 Score = 2;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerTournamentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    uint32_t score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPvpHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPvpHistory) */ {
 public:
  inline CSDTPvpHistory() : CSDTPvpHistory(nullptr) {}
  ~CSDTPvpHistory() override;
  explicit PROTOBUF_CONSTEXPR CSDTPvpHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPvpHistory(const CSDTPvpHistory& from);
  CSDTPvpHistory(CSDTPvpHistory&& from) noexcept
    : CSDTPvpHistory() {
    *this = ::std::move(from);
  }

  inline CSDTPvpHistory& operator=(const CSDTPvpHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPvpHistory& operator=(CSDTPvpHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPvpHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPvpHistory* internal_default_instance() {
    return reinterpret_cast<const CSDTPvpHistory*>(
               &_CSDTPvpHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CSDTPvpHistory& a, CSDTPvpHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPvpHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPvpHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPvpHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPvpHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPvpHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPvpHistory& from) {
    CSDTPvpHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPvpHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPvpHistory";
  }
  protected:
  explicit CSDTPvpHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyFirstWinAwardFieldNumber = 4,
    kPvpIdFieldNumber = 1,
    kChangeMmrFieldNumber = 2,
    kDailyFirstWinFieldNumber = 3,
  };
  // repeated .msg.Award DailyFirstWinAward = 4;
  int dailyfirstwinaward_size() const;
  private:
  int _internal_dailyfirstwinaward_size() const;
  public:
  void clear_dailyfirstwinaward();
  ::msg::Award* mutable_dailyfirstwinaward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
      mutable_dailyfirstwinaward();
  private:
  const ::msg::Award& _internal_dailyfirstwinaward(int index) const;
  ::msg::Award* _internal_add_dailyfirstwinaward();
  public:
  const ::msg::Award& dailyfirstwinaward(int index) const;
  ::msg::Award* add_dailyfirstwinaward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
      dailyfirstwinaward() const;

  // uint64 PvpId = 1;
  void clear_pvpid();
  uint64_t pvpid() const;
  void set_pvpid(uint64_t value);
  private:
  uint64_t _internal_pvpid() const;
  void _internal_set_pvpid(uint64_t value);
  public:

  // int32 ChangeMmr = 2;
  void clear_changemmr();
  int32_t changemmr() const;
  void set_changemmr(int32_t value);
  private:
  int32_t _internal_changemmr() const;
  void _internal_set_changemmr(int32_t value);
  public:

  // bool DailyFirstWin = 3;
  void clear_dailyfirstwin();
  bool dailyfirstwin() const;
  void set_dailyfirstwin(bool value);
  private:
  bool _internal_dailyfirstwin() const;
  void _internal_set_dailyfirstwin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPvpHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award > dailyfirstwinaward_;
    uint64_t pvpid_;
    int32_t changemmr_;
    bool dailyfirstwin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerPvpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerPvpInfo) */ {
 public:
  inline CSDTPlayerPvpInfo() : CSDTPlayerPvpInfo(nullptr) {}
  ~CSDTPlayerPvpInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerPvpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerPvpInfo(const CSDTPlayerPvpInfo& from);
  CSDTPlayerPvpInfo(CSDTPlayerPvpInfo&& from) noexcept
    : CSDTPlayerPvpInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerPvpInfo& operator=(const CSDTPlayerPvpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerPvpInfo& operator=(CSDTPlayerPvpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerPvpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerPvpInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerPvpInfo*>(
               &_CSDTPlayerPvpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CSDTPlayerPvpInfo& a, CSDTPlayerPvpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerPvpInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerPvpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerPvpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerPvpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerPvpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerPvpInfo& from) {
    CSDTPlayerPvpInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerPvpInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerPvpInfo";
  }
  protected:
  explicit CSDTPlayerPvpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPvpHistoryFieldNumber = 1,
  };
  // repeated .msg.CSDTPvpHistory PvpHistory = 1;
  int pvphistory_size() const;
  private:
  int _internal_pvphistory_size() const;
  public:
  void clear_pvphistory();
  ::msg::CSDTPvpHistory* mutable_pvphistory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpHistory >*
      mutable_pvphistory();
  private:
  const ::msg::CSDTPvpHistory& _internal_pvphistory(int index) const;
  ::msg::CSDTPvpHistory* _internal_add_pvphistory();
  public:
  const ::msg::CSDTPvpHistory& pvphistory(int index) const;
  ::msg::CSDTPvpHistory* add_pvphistory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpHistory >&
      pvphistory() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerPvpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpHistory > pvphistory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerDetailInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerDetailInfo) */ {
 public:
  inline CSDTPlayerDetailInfo() : CSDTPlayerDetailInfo(nullptr) {}
  ~CSDTPlayerDetailInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerDetailInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerDetailInfo(const CSDTPlayerDetailInfo& from);
  CSDTPlayerDetailInfo(CSDTPlayerDetailInfo&& from) noexcept
    : CSDTPlayerDetailInfo() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerDetailInfo& operator=(const CSDTPlayerDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerDetailInfo& operator=(CSDTPlayerDetailInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerDetailInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerDetailInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerDetailInfo*>(
               &_CSDTPlayerDetailInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CSDTPlayerDetailInfo& a, CSDTPlayerDetailInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerDetailInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerDetailInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerDetailInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerDetailInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerDetailInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerDetailInfo& from) {
    CSDTPlayerDetailInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerDetailInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerDetailInfo";
  }
  protected:
  explicit CSDTPlayerDetailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kBaseInfoFieldNumber = 1,
    kStatFieldNumber = 2,
  };
  // repeated .msg.CSDTItem Items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::msg::CSDTItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >*
      mutable_items();
  private:
  const ::msg::CSDTItem& _internal_items(int index) const;
  ::msg::CSDTItem* _internal_add_items();
  public:
  const ::msg::CSDTItem& items(int index) const;
  ::msg::CSDTItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >&
      items() const;

  // .msg.CSDTPlayerBaseInfo BaseInfo = 1;
  bool has_baseinfo() const;
  private:
  bool _internal_has_baseinfo() const;
  public:
  void clear_baseinfo();
  const ::msg::CSDTPlayerBaseInfo& baseinfo() const;
  PROTOBUF_NODISCARD ::msg::CSDTPlayerBaseInfo* release_baseinfo();
  ::msg::CSDTPlayerBaseInfo* mutable_baseinfo();
  void set_allocated_baseinfo(::msg::CSDTPlayerBaseInfo* baseinfo);
  private:
  const ::msg::CSDTPlayerBaseInfo& _internal_baseinfo() const;
  ::msg::CSDTPlayerBaseInfo* _internal_mutable_baseinfo();
  public:
  void unsafe_arena_set_allocated_baseinfo(
      ::msg::CSDTPlayerBaseInfo* baseinfo);
  ::msg::CSDTPlayerBaseInfo* unsafe_arena_release_baseinfo();

  // .msg.CSDTStat Stat = 2;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::msg::CSDTStat& stat() const;
  PROTOBUF_NODISCARD ::msg::CSDTStat* release_stat();
  ::msg::CSDTStat* mutable_stat();
  void set_allocated_stat(::msg::CSDTStat* stat);
  private:
  const ::msg::CSDTStat& _internal_stat() const;
  ::msg::CSDTStat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::msg::CSDTStat* stat);
  ::msg::CSDTStat* unsafe_arena_release_stat();

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerDetailInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem > items_;
    ::msg::CSDTPlayerBaseInfo* baseinfo_;
    ::msg::CSDTStat* stat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerItems) */ {
 public:
  inline CSDTPlayerItems() : CSDTPlayerItems(nullptr) {}
  ~CSDTPlayerItems() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerItems(const CSDTPlayerItems& from);
  CSDTPlayerItems(CSDTPlayerItems&& from) noexcept
    : CSDTPlayerItems() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerItems& operator=(const CSDTPlayerItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerItems& operator=(CSDTPlayerItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerItems* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerItems*>(
               &_CSDTPlayerItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CSDTPlayerItems& a, CSDTPlayerItems& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerItems& from) {
    CSDTPlayerItems::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerItems";
  }
  protected:
  explicit CSDTPlayerItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedalsFieldNumber = 2,
    kCacheFieldNumber = 1,
  };
  // repeated .msg.CSDTItem Medals = 2;
  int medals_size() const;
  private:
  int _internal_medals_size() const;
  public:
  void clear_medals();
  ::msg::CSDTItem* mutable_medals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >*
      mutable_medals();
  private:
  const ::msg::CSDTItem& _internal_medals(int index) const;
  ::msg::CSDTItem* _internal_add_medals();
  public:
  const ::msg::CSDTItem& medals(int index) const;
  ::msg::CSDTItem* add_medals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >&
      medals() const;

  // bool Cache = 1;
  void clear_cache();
  bool cache() const;
  void set_cache(bool value);
  private:
  bool _internal_cache() const;
  void _internal_set_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem > medals_;
    bool cache_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRankSeasonData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRankSeasonData) */ {
 public:
  inline CSDTRankSeasonData() : CSDTRankSeasonData(nullptr) {}
  ~CSDTRankSeasonData() override;
  explicit PROTOBUF_CONSTEXPR CSDTRankSeasonData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRankSeasonData(const CSDTRankSeasonData& from);
  CSDTRankSeasonData(CSDTRankSeasonData&& from) noexcept
    : CSDTRankSeasonData() {
    *this = ::std::move(from);
  }

  inline CSDTRankSeasonData& operator=(const CSDTRankSeasonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRankSeasonData& operator=(CSDTRankSeasonData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRankSeasonData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRankSeasonData* internal_default_instance() {
    return reinterpret_cast<const CSDTRankSeasonData*>(
               &_CSDTRankSeasonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CSDTRankSeasonData& a, CSDTRankSeasonData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRankSeasonData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRankSeasonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRankSeasonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRankSeasonData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRankSeasonData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRankSeasonData& from) {
    CSDTRankSeasonData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRankSeasonData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRankSeasonData";
  }
  protected:
  explicit CSDTRankSeasonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompetitionCntFieldNumber = 1,
    kAvgRankFieldNumber = 2,
    kMvpCountFieldNumber = 3,
    kMvpProbabilityFieldNumber = 4,
    kTop3CountFieldNumber = 5,
    kTop3ProbabilityFieldNumber = 6,
    kAvgRoundFieldNumber = 7,
    kWinTimesFieldNumber = 8,
  };
  // uint32 CompetitionCnt = 1;
  void clear_competitioncnt();
  uint32_t competitioncnt() const;
  void set_competitioncnt(uint32_t value);
  private:
  uint32_t _internal_competitioncnt() const;
  void _internal_set_competitioncnt(uint32_t value);
  public:

  // uint32 AvgRank = 2;
  void clear_avgrank();
  uint32_t avgrank() const;
  void set_avgrank(uint32_t value);
  private:
  uint32_t _internal_avgrank() const;
  void _internal_set_avgrank(uint32_t value);
  public:

  // uint32 MvpCount = 3;
  void clear_mvpcount();
  uint32_t mvpcount() const;
  void set_mvpcount(uint32_t value);
  private:
  uint32_t _internal_mvpcount() const;
  void _internal_set_mvpcount(uint32_t value);
  public:

  // uint32 MvpProbability = 4;
  void clear_mvpprobability();
  uint32_t mvpprobability() const;
  void set_mvpprobability(uint32_t value);
  private:
  uint32_t _internal_mvpprobability() const;
  void _internal_set_mvpprobability(uint32_t value);
  public:

  // uint32 Top3Count = 5;
  void clear_top3count();
  uint32_t top3count() const;
  void set_top3count(uint32_t value);
  private:
  uint32_t _internal_top3count() const;
  void _internal_set_top3count(uint32_t value);
  public:

  // uint32 Top3Probability = 6;
  void clear_top3probability();
  uint32_t top3probability() const;
  void set_top3probability(uint32_t value);
  private:
  uint32_t _internal_top3probability() const;
  void _internal_set_top3probability(uint32_t value);
  public:

  // uint32 AvgRound = 7;
  void clear_avground();
  uint32_t avground() const;
  void set_avground(uint32_t value);
  private:
  uint32_t _internal_avground() const;
  void _internal_set_avground(uint32_t value);
  public:

  // uint32 WinTimes = 8;
  void clear_wintimes();
  uint32_t wintimes() const;
  void set_wintimes(uint32_t value);
  private:
  uint32_t _internal_wintimes() const;
  void _internal_set_wintimes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRankSeasonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t competitioncnt_;
    uint32_t avgrank_;
    uint32_t mvpcount_;
    uint32_t mvpprobability_;
    uint32_t top3count_;
    uint32_t top3probability_;
    uint32_t avground_;
    uint32_t wintimes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRankSeasonInfo_ModesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRankSeasonInfo_ModesEntry_DoNotUse, 
    uint32_t, ::msg::CSDTRankSeasonData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRankSeasonInfo_ModesEntry_DoNotUse, 
    uint32_t, ::msg::CSDTRankSeasonData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTRankSeasonInfo_ModesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRankSeasonInfo_ModesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRankSeasonInfo_ModesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRankSeasonInfo_ModesEntry_DoNotUse& other);
  static const CSDTRankSeasonInfo_ModesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRankSeasonInfo_ModesEntry_DoNotUse*>(&_CSDTRankSeasonInfo_ModesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRankSeasonInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRankSeasonInfo) */ {
 public:
  inline CSDTRankSeasonInfo() : CSDTRankSeasonInfo(nullptr) {}
  ~CSDTRankSeasonInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTRankSeasonInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRankSeasonInfo(const CSDTRankSeasonInfo& from);
  CSDTRankSeasonInfo(CSDTRankSeasonInfo&& from) noexcept
    : CSDTRankSeasonInfo() {
    *this = ::std::move(from);
  }

  inline CSDTRankSeasonInfo& operator=(const CSDTRankSeasonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRankSeasonInfo& operator=(CSDTRankSeasonInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRankSeasonInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRankSeasonInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTRankSeasonInfo*>(
               &_CSDTRankSeasonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CSDTRankSeasonInfo& a, CSDTRankSeasonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRankSeasonInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRankSeasonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRankSeasonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRankSeasonInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRankSeasonInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRankSeasonInfo& from) {
    CSDTRankSeasonInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRankSeasonInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRankSeasonInfo";
  }
  protected:
  explicit CSDTRankSeasonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModesFieldNumber = 3,
    kIdFieldNumber = 1,
    kMaxMMRFieldNumber = 2,
    kMaxTMMRFieldNumber = 4,
    kMaxFFMMRFieldNumber = 5,
    kMaxQueenRankFieldNumber = 6,
    kMaxTQueenRankFieldNumber = 7,
    kMaxFQueenRankFieldNumber = 8,
  };
  // map<uint32, .msg.CSDTRankSeasonData> Modes = 3;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >&
      _internal_modes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >*
      _internal_mutable_modes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >&
      modes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >*
      mutable_modes();

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 MaxMMR = 2;
  void clear_maxmmr();
  uint32_t maxmmr() const;
  void set_maxmmr(uint32_t value);
  private:
  uint32_t _internal_maxmmr() const;
  void _internal_set_maxmmr(uint32_t value);
  public:

  // uint32 MaxTMMR = 4;
  void clear_maxtmmr();
  uint32_t maxtmmr() const;
  void set_maxtmmr(uint32_t value);
  private:
  uint32_t _internal_maxtmmr() const;
  void _internal_set_maxtmmr(uint32_t value);
  public:

  // uint32 MaxFFMMR = 5;
  void clear_maxffmmr();
  uint32_t maxffmmr() const;
  void set_maxffmmr(uint32_t value);
  private:
  uint32_t _internal_maxffmmr() const;
  void _internal_set_maxffmmr(uint32_t value);
  public:

  // int32 MaxQueenRank = 6;
  void clear_maxqueenrank();
  int32_t maxqueenrank() const;
  void set_maxqueenrank(int32_t value);
  private:
  int32_t _internal_maxqueenrank() const;
  void _internal_set_maxqueenrank(int32_t value);
  public:

  // int32 MaxTQueenRank = 7;
  void clear_maxtqueenrank();
  int32_t maxtqueenrank() const;
  void set_maxtqueenrank(int32_t value);
  private:
  int32_t _internal_maxtqueenrank() const;
  void _internal_set_maxtqueenrank(int32_t value);
  public:

  // int32 MaxFQueenRank = 8;
  void clear_maxfqueenrank();
  int32_t maxfqueenrank() const;
  void set_maxfqueenrank(int32_t value);
  private:
  int32_t _internal_maxfqueenrank() const;
  void _internal_set_maxfqueenrank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRankSeasonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRankSeasonInfo_ModesEntry_DoNotUse,
        uint32_t, ::msg::CSDTRankSeasonData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> modes_;
    uint32_t id_;
    uint32_t maxmmr_;
    uint32_t maxtmmr_;
    uint32_t maxffmmr_;
    int32_t maxqueenrank_;
    int32_t maxtqueenrank_;
    int32_t maxfqueenrank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTStat_SeasonInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTStat_SeasonInfoEntry_DoNotUse, 
    uint32_t, ::msg::CSDTRankSeasonInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTStat_SeasonInfoEntry_DoNotUse, 
    uint32_t, ::msg::CSDTRankSeasonInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTStat_SeasonInfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTStat_SeasonInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTStat_SeasonInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTStat_SeasonInfoEntry_DoNotUse& other);
  static const CSDTStat_SeasonInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTStat_SeasonInfoEntry_DoNotUse*>(&_CSDTStat_SeasonInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTStat) */ {
 public:
  inline CSDTStat() : CSDTStat(nullptr) {}
  ~CSDTStat() override;
  explicit PROTOBUF_CONSTEXPR CSDTStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTStat(const CSDTStat& from);
  CSDTStat(CSDTStat&& from) noexcept
    : CSDTStat() {
    *this = ::std::move(from);
  }

  inline CSDTStat& operator=(const CSDTStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTStat& operator=(CSDTStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTStat* internal_default_instance() {
    return reinterpret_cast<const CSDTStat*>(
               &_CSDTStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CSDTStat& a, CSDTStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTStat& from) {
    CSDTStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTStat";
  }
  protected:
  explicit CSDTStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSeasonInfoFieldNumber = 8,
    kUnSeasonDataFieldNumber = 9,
    kCurChessPlrFieldNumber = 13,
    kMMRFieldNumber = 1,
    kCompetitionCntFieldNumber = 2,
    kRegisterTimeFieldNumber = 4,
    kMvpCntFieldNumber = 3,
    kChessPlayerSkinFieldNumber = 5,
    kFollowCountFieldNumber = 6,
    kFansCountFieldNumber = 7,
    kCompetitionCntDailyFieldNumber = 10,
    kBindOldPlayerCountFieldNumber = 11,
    kTMMRFieldNumber = 12,
    kCupFieldNumber = 14,
    kFFMMRFieldNumber = 15,
    kMaxQueenRankFieldNumber = 16,
    kMaxTQueenRankFieldNumber = 17,
    kMaxFQueenRankFieldNumber = 18,
  };
  // map<uint32, .msg.CSDTRankSeasonInfo> SeasonInfo = 8;
  int seasoninfo_size() const;
  private:
  int _internal_seasoninfo_size() const;
  public:
  void clear_seasoninfo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >&
      _internal_seasoninfo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >*
      _internal_mutable_seasoninfo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >&
      seasoninfo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >*
      mutable_seasoninfo();

  // .msg.CSDTRankSeasonData UnSeasonData = 9;
  bool has_unseasondata() const;
  private:
  bool _internal_has_unseasondata() const;
  public:
  void clear_unseasondata();
  const ::msg::CSDTRankSeasonData& unseasondata() const;
  PROTOBUF_NODISCARD ::msg::CSDTRankSeasonData* release_unseasondata();
  ::msg::CSDTRankSeasonData* mutable_unseasondata();
  void set_allocated_unseasondata(::msg::CSDTRankSeasonData* unseasondata);
  private:
  const ::msg::CSDTRankSeasonData& _internal_unseasondata() const;
  ::msg::CSDTRankSeasonData* _internal_mutable_unseasondata();
  public:
  void unsafe_arena_set_allocated_unseasondata(
      ::msg::CSDTRankSeasonData* unseasondata);
  ::msg::CSDTRankSeasonData* unsafe_arena_release_unseasondata();

  // .msg.CSDTChessPlayer CurChessPlr = 13;
  bool has_curchessplr() const;
  private:
  bool _internal_has_curchessplr() const;
  public:
  void clear_curchessplr();
  const ::msg::CSDTChessPlayer& curchessplr() const;
  PROTOBUF_NODISCARD ::msg::CSDTChessPlayer* release_curchessplr();
  ::msg::CSDTChessPlayer* mutable_curchessplr();
  void set_allocated_curchessplr(::msg::CSDTChessPlayer* curchessplr);
  private:
  const ::msg::CSDTChessPlayer& _internal_curchessplr() const;
  ::msg::CSDTChessPlayer* _internal_mutable_curchessplr();
  public:
  void unsafe_arena_set_allocated_curchessplr(
      ::msg::CSDTChessPlayer* curchessplr);
  ::msg::CSDTChessPlayer* unsafe_arena_release_curchessplr();

  // uint32 MMR = 1;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 CompetitionCnt = 2;
  void clear_competitioncnt();
  uint32_t competitioncnt() const;
  void set_competitioncnt(uint32_t value);
  private:
  uint32_t _internal_competitioncnt() const;
  void _internal_set_competitioncnt(uint32_t value);
  public:

  // int64 RegisterTime = 4;
  void clear_registertime();
  int64_t registertime() const;
  void set_registertime(int64_t value);
  private:
  int64_t _internal_registertime() const;
  void _internal_set_registertime(int64_t value);
  public:

  // uint32 MvpCnt = 3;
  void clear_mvpcnt();
  uint32_t mvpcnt() const;
  void set_mvpcnt(uint32_t value);
  private:
  uint32_t _internal_mvpcnt() const;
  void _internal_set_mvpcnt(uint32_t value);
  public:

  // uint32 ChessPlayerSkin = 5;
  void clear_chessplayerskin();
  uint32_t chessplayerskin() const;
  void set_chessplayerskin(uint32_t value);
  private:
  uint32_t _internal_chessplayerskin() const;
  void _internal_set_chessplayerskin(uint32_t value);
  public:

  // uint32 FollowCount = 6;
  void clear_followcount();
  uint32_t followcount() const;
  void set_followcount(uint32_t value);
  private:
  uint32_t _internal_followcount() const;
  void _internal_set_followcount(uint32_t value);
  public:

  // uint32 FansCount = 7;
  void clear_fanscount();
  uint32_t fanscount() const;
  void set_fanscount(uint32_t value);
  private:
  uint32_t _internal_fanscount() const;
  void _internal_set_fanscount(uint32_t value);
  public:

  // uint32 CompetitionCntDaily = 10;
  void clear_competitioncntdaily();
  uint32_t competitioncntdaily() const;
  void set_competitioncntdaily(uint32_t value);
  private:
  uint32_t _internal_competitioncntdaily() const;
  void _internal_set_competitioncntdaily(uint32_t value);
  public:

  // uint32 BindOldPlayerCount = 11;
  void clear_bindoldplayercount();
  uint32_t bindoldplayercount() const;
  void set_bindoldplayercount(uint32_t value);
  private:
  uint32_t _internal_bindoldplayercount() const;
  void _internal_set_bindoldplayercount(uint32_t value);
  public:

  // uint32 TMMR = 12;
  void clear_tmmr();
  uint32_t tmmr() const;
  void set_tmmr(uint32_t value);
  private:
  uint32_t _internal_tmmr() const;
  void _internal_set_tmmr(uint32_t value);
  public:

  // uint32 Cup = 14;
  void clear_cup();
  uint32_t cup() const;
  void set_cup(uint32_t value);
  private:
  uint32_t _internal_cup() const;
  void _internal_set_cup(uint32_t value);
  public:

  // uint32 FFMMR = 15;
  void clear_ffmmr();
  uint32_t ffmmr() const;
  void set_ffmmr(uint32_t value);
  private:
  uint32_t _internal_ffmmr() const;
  void _internal_set_ffmmr(uint32_t value);
  public:

  // int32 MaxQueenRank = 16;
  void clear_maxqueenrank();
  int32_t maxqueenrank() const;
  void set_maxqueenrank(int32_t value);
  private:
  int32_t _internal_maxqueenrank() const;
  void _internal_set_maxqueenrank(int32_t value);
  public:

  // int32 MaxTQueenRank = 17;
  void clear_maxtqueenrank();
  int32_t maxtqueenrank() const;
  void set_maxtqueenrank(int32_t value);
  private:
  int32_t _internal_maxtqueenrank() const;
  void _internal_set_maxtqueenrank(int32_t value);
  public:

  // int32 MaxFQueenRank = 18;
  void clear_maxfqueenrank();
  int32_t maxfqueenrank() const;
  void set_maxfqueenrank(int32_t value);
  private:
  int32_t _internal_maxfqueenrank() const;
  void _internal_set_maxfqueenrank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTStat_SeasonInfoEntry_DoNotUse,
        uint32_t, ::msg::CSDTRankSeasonInfo,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> seasoninfo_;
    ::msg::CSDTRankSeasonData* unseasondata_;
    ::msg::CSDTChessPlayer* curchessplr_;
    uint32_t mmr_;
    uint32_t competitioncnt_;
    int64_t registertime_;
    uint32_t mvpcnt_;
    uint32_t chessplayerskin_;
    uint32_t followcount_;
    uint32_t fanscount_;
    uint32_t competitioncntdaily_;
    uint32_t bindoldplayercount_;
    uint32_t tmmr_;
    uint32_t cup_;
    uint32_t ffmmr_;
    int32_t maxqueenrank_;
    int32_t maxtqueenrank_;
    int32_t maxfqueenrank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTNumRankItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTNumRankItem) */ {
 public:
  inline CSDTNumRankItem() : CSDTNumRankItem(nullptr) {}
  ~CSDTNumRankItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTNumRankItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTNumRankItem(const CSDTNumRankItem& from);
  CSDTNumRankItem(CSDTNumRankItem&& from) noexcept
    : CSDTNumRankItem() {
    *this = ::std::move(from);
  }

  inline CSDTNumRankItem& operator=(const CSDTNumRankItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTNumRankItem& operator=(CSDTNumRankItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTNumRankItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTNumRankItem* internal_default_instance() {
    return reinterpret_cast<const CSDTNumRankItem*>(
               &_CSDTNumRankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CSDTNumRankItem& a, CSDTNumRankItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTNumRankItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTNumRankItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTNumRankItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTNumRankItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTNumRankItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTNumRankItem& from) {
    CSDTNumRankItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTNumRankItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTNumRankItem";
  }
  protected:
  explicit CSDTNumRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCaptainFieldNumber = 6,
    kNumberFieldNumber = 4,
    kRankFieldNumber = 5,
    kScoreFieldNumber = 7,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Captain = 6;
  void clear_captain();
  const std::string& captain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captain();
  PROTOBUF_NODISCARD std::string* release_captain();
  void set_allocated_captain(std::string* captain);
  private:
  const std::string& _internal_captain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captain(const std::string& value);
  std::string* _internal_mutable_captain();
  public:

  // uint32 Number = 4;
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // int32 Rank = 5;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // int64 Score = 7;
  void clear_score();
  int64_t score() const;
  void set_score(int64_t value);
  private:
  int64_t _internal_score() const;
  void _internal_set_score(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTNumRankItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captain_;
    uint32_t number_;
    int32_t rank_;
    int64_t score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTWorldChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTWorldChat) */ {
 public:
  inline CSDTWorldChat() : CSDTWorldChat(nullptr) {}
  ~CSDTWorldChat() override;
  explicit PROTOBUF_CONSTEXPR CSDTWorldChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTWorldChat(const CSDTWorldChat& from);
  CSDTWorldChat(CSDTWorldChat&& from) noexcept
    : CSDTWorldChat() {
    *this = ::std::move(from);
  }

  inline CSDTWorldChat& operator=(const CSDTWorldChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTWorldChat& operator=(CSDTWorldChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTWorldChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTWorldChat* internal_default_instance() {
    return reinterpret_cast<const CSDTWorldChat*>(
               &_CSDTWorldChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CSDTWorldChat& a, CSDTWorldChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTWorldChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTWorldChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTWorldChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTWorldChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTWorldChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTWorldChat& from) {
    CSDTWorldChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTWorldChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTWorldChat";
  }
  protected:
  explicit CSDTWorldChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kWorkshopMapNameFieldNumber = 7,
    kChannelIDFieldNumber = 10,
    kBaseInfoFieldNumber = 1,
    kWSSettingFieldNumber = 8,
    kMedalInfoFieldNumber = 11,
    kEmotionIdFieldNumber = 3,
    kNeedLocalizeFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kWorldChatTypeFieldNumber = 6,
    kSourceTypeFieldNumber = 9,
  };
  // string Content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string WorkshopMapName = 7;
  void clear_workshopmapname();
  const std::string& workshopmapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workshopmapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workshopmapname();
  PROTOBUF_NODISCARD std::string* release_workshopmapname();
  void set_allocated_workshopmapname(std::string* workshopmapname);
  private:
  const std::string& _internal_workshopmapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workshopmapname(const std::string& value);
  std::string* _internal_mutable_workshopmapname();
  public:

  // string ChannelID = 10;
  void clear_channelid();
  const std::string& channelid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelid();
  PROTOBUF_NODISCARD std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // .msg.CSDTPlayerSimpleInfo BaseInfo = 1;
  bool has_baseinfo() const;
  private:
  bool _internal_has_baseinfo() const;
  public:
  void clear_baseinfo();
  const ::msg::CSDTPlayerSimpleInfo& baseinfo() const;
  PROTOBUF_NODISCARD ::msg::CSDTPlayerSimpleInfo* release_baseinfo();
  ::msg::CSDTPlayerSimpleInfo* mutable_baseinfo();
  void set_allocated_baseinfo(::msg::CSDTPlayerSimpleInfo* baseinfo);
  private:
  const ::msg::CSDTPlayerSimpleInfo& _internal_baseinfo() const;
  ::msg::CSDTPlayerSimpleInfo* _internal_mutable_baseinfo();
  public:
  void unsafe_arena_set_allocated_baseinfo(
      ::msg::CSDTPlayerSimpleInfo* baseinfo);
  ::msg::CSDTPlayerSimpleInfo* unsafe_arena_release_baseinfo();

  // .msg.WorkshopSetting WSSetting = 8;
  bool has_wssetting() const;
  private:
  bool _internal_has_wssetting() const;
  public:
  void clear_wssetting();
  const ::msg::WorkshopSetting& wssetting() const;
  PROTOBUF_NODISCARD ::msg::WorkshopSetting* release_wssetting();
  ::msg::WorkshopSetting* mutable_wssetting();
  void set_allocated_wssetting(::msg::WorkshopSetting* wssetting);
  private:
  const ::msg::WorkshopSetting& _internal_wssetting() const;
  ::msg::WorkshopSetting* _internal_mutable_wssetting();
  public:
  void unsafe_arena_set_allocated_wssetting(
      ::msg::WorkshopSetting* wssetting);
  ::msg::WorkshopSetting* unsafe_arena_release_wssetting();

  // .msg.CSDTItemMedal MedalInfo = 11;
  bool has_medalinfo() const;
  private:
  bool _internal_has_medalinfo() const;
  public:
  void clear_medalinfo();
  const ::msg::CSDTItemMedal& medalinfo() const;
  PROTOBUF_NODISCARD ::msg::CSDTItemMedal* release_medalinfo();
  ::msg::CSDTItemMedal* mutable_medalinfo();
  void set_allocated_medalinfo(::msg::CSDTItemMedal* medalinfo);
  private:
  const ::msg::CSDTItemMedal& _internal_medalinfo() const;
  ::msg::CSDTItemMedal* _internal_mutable_medalinfo();
  public:
  void unsafe_arena_set_allocated_medalinfo(
      ::msg::CSDTItemMedal* medalinfo);
  ::msg::CSDTItemMedal* unsafe_arena_release_medalinfo();

  // uint32 EmotionId = 3;
  void clear_emotionid();
  uint32_t emotionid() const;
  void set_emotionid(uint32_t value);
  private:
  uint32_t _internal_emotionid() const;
  void _internal_set_emotionid(uint32_t value);
  public:

  // bool NeedLocalize = 4;
  void clear_needlocalize();
  bool needlocalize() const;
  void set_needlocalize(bool value);
  private:
  bool _internal_needlocalize() const;
  void _internal_set_needlocalize(bool value);
  public:

  // int64 Timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .msg.WORDCHAT WorldChatType = 6;
  void clear_worldchattype();
  ::msg::WORDCHAT worldchattype() const;
  void set_worldchattype(::msg::WORDCHAT value);
  private:
  ::msg::WORDCHAT _internal_worldchattype() const;
  void _internal_set_worldchattype(::msg::WORDCHAT value);
  public:

  // .msg.CHATSOURCETYPE SourceType = 9;
  void clear_sourcetype();
  ::msg::CHATSOURCETYPE sourcetype() const;
  void set_sourcetype(::msg::CHATSOURCETYPE value);
  private:
  ::msg::CHATSOURCETYPE _internal_sourcetype() const;
  void _internal_set_sourcetype(::msg::CHATSOURCETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTWorldChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workshopmapname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
    ::msg::CSDTPlayerSimpleInfo* baseinfo_;
    ::msg::WorkshopSetting* wssetting_;
    ::msg::CSDTItemMedal* medalinfo_;
    uint32_t emotionid_;
    bool needlocalize_;
    int64_t timestamp_;
    int worldchattype_;
    int sourcetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBuffAct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBuffAct) */ {
 public:
  inline CSDTBuffAct() : CSDTBuffAct(nullptr) {}
  ~CSDTBuffAct() override;
  explicit PROTOBUF_CONSTEXPR CSDTBuffAct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBuffAct(const CSDTBuffAct& from);
  CSDTBuffAct(CSDTBuffAct&& from) noexcept
    : CSDTBuffAct() {
    *this = ::std::move(from);
  }

  inline CSDTBuffAct& operator=(const CSDTBuffAct& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBuffAct& operator=(CSDTBuffAct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBuffAct& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBuffAct* internal_default_instance() {
    return reinterpret_cast<const CSDTBuffAct*>(
               &_CSDTBuffAct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CSDTBuffAct& a, CSDTBuffAct& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBuffAct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBuffAct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBuffAct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBuffAct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBuffAct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBuffAct& from) {
    CSDTBuffAct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBuffAct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBuffAct";
  }
  protected:
  explicit CSDTBuffAct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kActIdFieldNumber = 2,
    kActStatusFieldNumber = 3,
    kShowTimeFieldNumber = 4,
    kEndShowTimeFieldNumber = 5,
    kStartTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kBuffStartTimeFieldNumber = 8,
    kBuffEndTimeFieldNumber = 9,
    kActTypeFieldNumber = 10,
    kBuffTypeFieldNumber = 11,
    kBuffStartLvFieldNumber = 12,
    kBuffEndLvFieldNumber = 13,
  };
  // uint32 GroupId = 1;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // uint32 ActId = 2;
  void clear_actid();
  uint32_t actid() const;
  void set_actid(uint32_t value);
  private:
  uint32_t _internal_actid() const;
  void _internal_set_actid(uint32_t value);
  public:

  // .msg.BUFFACTSTATUS ActStatus = 3;
  void clear_actstatus();
  ::msg::BUFFACTSTATUS actstatus() const;
  void set_actstatus(::msg::BUFFACTSTATUS value);
  private:
  ::msg::BUFFACTSTATUS _internal_actstatus() const;
  void _internal_set_actstatus(::msg::BUFFACTSTATUS value);
  public:

  // uint32 ShowTime = 4;
  void clear_showtime();
  uint32_t showtime() const;
  void set_showtime(uint32_t value);
  private:
  uint32_t _internal_showtime() const;
  void _internal_set_showtime(uint32_t value);
  public:

  // uint32 EndShowTime = 5;
  void clear_endshowtime();
  uint32_t endshowtime() const;
  void set_endshowtime(uint32_t value);
  private:
  uint32_t _internal_endshowtime() const;
  void _internal_set_endshowtime(uint32_t value);
  public:

  // uint32 StartTime = 6;
  void clear_starttime();
  uint32_t starttime() const;
  void set_starttime(uint32_t value);
  private:
  uint32_t _internal_starttime() const;
  void _internal_set_starttime(uint32_t value);
  public:

  // uint32 EndTime = 7;
  void clear_endtime();
  uint32_t endtime() const;
  void set_endtime(uint32_t value);
  private:
  uint32_t _internal_endtime() const;
  void _internal_set_endtime(uint32_t value);
  public:

  // uint32 BuffStartTime = 8;
  void clear_buffstarttime();
  uint32_t buffstarttime() const;
  void set_buffstarttime(uint32_t value);
  private:
  uint32_t _internal_buffstarttime() const;
  void _internal_set_buffstarttime(uint32_t value);
  public:

  // uint32 BuffEndTime = 9;
  void clear_buffendtime();
  uint32_t buffendtime() const;
  void set_buffendtime(uint32_t value);
  private:
  uint32_t _internal_buffendtime() const;
  void _internal_set_buffendtime(uint32_t value);
  public:

  // .msg.ACTIVITYTYPE ActType = 10;
  void clear_acttype();
  ::msg::ACTIVITYTYPE acttype() const;
  void set_acttype(::msg::ACTIVITYTYPE value);
  private:
  ::msg::ACTIVITYTYPE _internal_acttype() const;
  void _internal_set_acttype(::msg::ACTIVITYTYPE value);
  public:

  // .msg.BuffEffectType BuffType = 11;
  void clear_bufftype();
  ::msg::BuffEffectType bufftype() const;
  void set_bufftype(::msg::BuffEffectType value);
  private:
  ::msg::BuffEffectType _internal_bufftype() const;
  void _internal_set_bufftype(::msg::BuffEffectType value);
  public:

  // uint32 BuffStartLv = 12;
  void clear_buffstartlv();
  uint32_t buffstartlv() const;
  void set_buffstartlv(uint32_t value);
  private:
  uint32_t _internal_buffstartlv() const;
  void _internal_set_buffstartlv(uint32_t value);
  public:

  // uint32 BuffEndLv = 13;
  void clear_buffendlv();
  uint32_t buffendlv() const;
  void set_buffendlv(uint32_t value);
  private:
  uint32_t _internal_buffendlv() const;
  void _internal_set_buffendlv(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTBuffAct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t groupid_;
    uint32_t actid_;
    int actstatus_;
    uint32_t showtime_;
    uint32_t endshowtime_;
    uint32_t starttime_;
    uint32_t endtime_;
    uint32_t buffstarttime_;
    uint32_t buffendtime_;
    int acttype_;
    int bufftype_;
    uint32_t buffstartlv_;
    uint32_t buffendlv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMail_DictEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTMail_DictEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTMail_DictEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CSDTMail_DictEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTMail_DictEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTMail_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTMail_DictEntry_DoNotUse& other);
  static const CSDTMail_DictEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTMail_DictEntry_DoNotUse*>(&_CSDTMail_DictEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTMail.DictEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTMail.DictEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTMail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMail) */ {
 public:
  inline CSDTMail() : CSDTMail(nullptr) {}
  ~CSDTMail() override;
  explicit PROTOBUF_CONSTEXPR CSDTMail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMail(const CSDTMail& from);
  CSDTMail(CSDTMail&& from) noexcept
    : CSDTMail() {
    *this = ::std::move(from);
  }

  inline CSDTMail& operator=(const CSDTMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMail& operator=(CSDTMail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMail* internal_default_instance() {
    return reinterpret_cast<const CSDTMail*>(
               &_CSDTMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CSDTMail& a, CSDTMail& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMail& from) {
    CSDTMail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMail";
  }
  protected:
  explicit CSDTMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 4,
    kDictFieldNumber = 10,
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kWebOpenDataFieldNumber = 31,
    kExtDataFieldNumber = 11,
    kIdFieldNumber = 1,
    kTsFieldNumber = 5,
    kIsReadFieldNumber = 6,
    kIsGetAwardFieldNumber = 7,
    kFlagFieldNumber = 8,
    kEndTimeFieldNumber = 12,
    kAwardSourceFieldNumber = 9,
    kWebOpFieldNumber = 30,
    kMustWaitTimeFieldNumber = 32,
  };
  // repeated .msg.Award Awards = 4;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::Award* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
      mutable_awards();
  private:
  const ::msg::Award& _internal_awards(int index) const;
  ::msg::Award* _internal_add_awards();
  public:
  const ::msg::Award& awards(int index) const;
  ::msg::Award* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
      awards() const;

  // map<string, string> Dict = 10;
  int dict_size() const;
  private:
  int _internal_dict_size() const;
  public:
  void clear_dict();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_dict();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      dict() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_dict();

  // string Title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string WebOpenData = 31;
  void clear_webopendata();
  const std::string& webopendata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webopendata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webopendata();
  PROTOBUF_NODISCARD std::string* release_webopendata();
  void set_allocated_webopendata(std::string* webopendata);
  private:
  const std::string& _internal_webopendata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webopendata(const std::string& value);
  std::string* _internal_mutable_webopendata();
  public:

  // .msg.MailExtData ExtData = 11;
  bool has_extdata() const;
  private:
  bool _internal_has_extdata() const;
  public:
  void clear_extdata();
  const ::msg::MailExtData& extdata() const;
  PROTOBUF_NODISCARD ::msg::MailExtData* release_extdata();
  ::msg::MailExtData* mutable_extdata();
  void set_allocated_extdata(::msg::MailExtData* extdata);
  private:
  const ::msg::MailExtData& _internal_extdata() const;
  ::msg::MailExtData* _internal_mutable_extdata();
  public:
  void unsafe_arena_set_allocated_extdata(
      ::msg::MailExtData* extdata);
  ::msg::MailExtData* unsafe_arena_release_extdata();

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // int64 Ts = 5;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // bool IsRead = 6;
  void clear_isread();
  bool isread() const;
  void set_isread(bool value);
  private:
  bool _internal_isread() const;
  void _internal_set_isread(bool value);
  public:

  // bool IsGetAward = 7;
  void clear_isgetaward();
  bool isgetaward() const;
  void set_isgetaward(bool value);
  private:
  bool _internal_isgetaward() const;
  void _internal_set_isgetaward(bool value);
  public:

  // uint32 Flag = 8;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // int64 EndTime = 12;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // .msg.SOURCE AwardSource = 9;
  void clear_awardsource();
  ::msg::SOURCE awardsource() const;
  void set_awardsource(::msg::SOURCE value);
  private:
  ::msg::SOURCE _internal_awardsource() const;
  void _internal_set_awardsource(::msg::SOURCE value);
  public:

  // .msg.WEBOP WebOp = 30;
  void clear_webop();
  ::msg::WEBOP webop() const;
  void set_webop(::msg::WEBOP value);
  private:
  ::msg::WEBOP _internal_webop() const;
  void _internal_set_webop(::msg::WEBOP value);
  public:

  // int64 MustWaitTime = 32;
  void clear_mustwaittime();
  int64_t mustwaittime() const;
  void set_mustwaittime(int64_t value);
  private:
  int64_t _internal_mustwaittime() const;
  void _internal_set_mustwaittime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award > awards_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTMail_DictEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> dict_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webopendata_;
    ::msg::MailExtData* extdata_;
    uint64_t id_;
    int64_t ts_;
    bool isread_;
    bool isgetaward_;
    uint32_t flag_;
    int64_t endtime_;
    int awardsource_;
    int webop_;
    int64_t mustwaittime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTNoticeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTNoticeInfo) */ {
 public:
  inline CSDTNoticeInfo() : CSDTNoticeInfo(nullptr) {}
  ~CSDTNoticeInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTNoticeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTNoticeInfo(const CSDTNoticeInfo& from);
  CSDTNoticeInfo(CSDTNoticeInfo&& from) noexcept
    : CSDTNoticeInfo() {
    *this = ::std::move(from);
  }

  inline CSDTNoticeInfo& operator=(const CSDTNoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTNoticeInfo& operator=(CSDTNoticeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTNoticeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTNoticeInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTNoticeInfo*>(
               &_CSDTNoticeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CSDTNoticeInfo& a, CSDTNoticeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTNoticeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTNoticeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTNoticeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTNoticeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTNoticeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTNoticeInfo& from) {
    CSDTNoticeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTNoticeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTNoticeInfo";
  }
  protected:
  explicit CSDTNoticeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .msg.CSDTNotice Data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::msg::CSDTNotice* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTNotice >*
      mutable_data();
  private:
  const ::msg::CSDTNotice& _internal_data(int index) const;
  ::msg::CSDTNotice* _internal_add_data();
  public:
  const ::msg::CSDTNotice& data(int index) const;
  ::msg::CSDTNotice* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTNotice >&
      data() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTNoticeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTNotice > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTNotice) */ {
 public:
  inline CSDTNotice() : CSDTNotice(nullptr) {}
  ~CSDTNotice() override;
  explicit PROTOBUF_CONSTEXPR CSDTNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTNotice(const CSDTNotice& from);
  CSDTNotice(CSDTNotice&& from) noexcept
    : CSDTNotice() {
    *this = ::std::move(from);
  }

  inline CSDTNotice& operator=(const CSDTNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTNotice& operator=(CSDTNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTNotice* internal_default_instance() {
    return reinterpret_cast<const CSDTNotice*>(
               &_CSDTNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CSDTNotice& a, CSDTNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTNotice& from) {
    CSDTNotice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTNotice";
  }
  protected:
  explicit CSDTNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryListFieldNumber = 14,
    kWebContentFieldNumber = 19,
    kDownloadListFieldNumber = 20,
    kPlatformListFieldNumber = 21,
    kApkVersionListFieldNumber = 26,
    kExcludeDownloadFieldNumber = 30,
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kLabelFieldNumber = 4,
    kPicUrlFieldNumber = 9,
    kSkipUrlFieldNumber = 10,
    kSkipInterfaceFieldNumber = 16,
    kCoverPicUrlFieldNumber = 23,
    kSubtitleFieldNumber = 24,
    kPCSkipUrlFieldNumber = 27,
    kIdFieldNumber = 1,
    kTsFieldNumber = 6,
    kLabelTypeFieldNumber = 5,
    kShowTypeFieldNumber = 7,
    kContentTypeFieldNumber = 8,
    kFlagFieldNumber = 11,
    kEndTimeFieldNumber = 12,
    kNoticeTypeFieldNumber = 13,
    kTapFieldNumber = 15,
    kSkipTabFieldNumber = 17,
    kPicJumpTypeFieldNumber = 18,
    kMagnetismTypeFieldNumber = 22,
    kJumpGoodsIdFieldNumber = 25,
    kSortFieldNumber = 28,
    kStartTimeFieldNumber = 31,
    kNeedRedPointFieldNumber = 29,
  };
  // repeated string CountryList = 14;
  int countrylist_size() const;
  private:
  int _internal_countrylist_size() const;
  public:
  void clear_countrylist();
  const std::string& countrylist(int index) const;
  std::string* mutable_countrylist(int index);
  void set_countrylist(int index, const std::string& value);
  void set_countrylist(int index, std::string&& value);
  void set_countrylist(int index, const char* value);
  void set_countrylist(int index, const char* value, size_t size);
  std::string* add_countrylist();
  void add_countrylist(const std::string& value);
  void add_countrylist(std::string&& value);
  void add_countrylist(const char* value);
  void add_countrylist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& countrylist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_countrylist();
  private:
  const std::string& _internal_countrylist(int index) const;
  std::string* _internal_add_countrylist();
  public:

  // repeated .msg.GMLanguageInfo WebContent = 19;
  int webcontent_size() const;
  private:
  int _internal_webcontent_size() const;
  public:
  void clear_webcontent();
  ::msg::GMLanguageInfo* mutable_webcontent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GMLanguageInfo >*
      mutable_webcontent();
  private:
  const ::msg::GMLanguageInfo& _internal_webcontent(int index) const;
  ::msg::GMLanguageInfo* _internal_add_webcontent();
  public:
  const ::msg::GMLanguageInfo& webcontent(int index) const;
  ::msg::GMLanguageInfo* add_webcontent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GMLanguageInfo >&
      webcontent() const;

  // repeated string DownloadList = 20;
  int downloadlist_size() const;
  private:
  int _internal_downloadlist_size() const;
  public:
  void clear_downloadlist();
  const std::string& downloadlist(int index) const;
  std::string* mutable_downloadlist(int index);
  void set_downloadlist(int index, const std::string& value);
  void set_downloadlist(int index, std::string&& value);
  void set_downloadlist(int index, const char* value);
  void set_downloadlist(int index, const char* value, size_t size);
  std::string* add_downloadlist();
  void add_downloadlist(const std::string& value);
  void add_downloadlist(std::string&& value);
  void add_downloadlist(const char* value);
  void add_downloadlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& downloadlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_downloadlist();
  private:
  const std::string& _internal_downloadlist(int index) const;
  std::string* _internal_add_downloadlist();
  public:

  // repeated .msg.PLATFORMTYPE PlatformList = 21;
  int platformlist_size() const;
  private:
  int _internal_platformlist_size() const;
  public:
  void clear_platformlist();
  private:
  ::msg::PLATFORMTYPE _internal_platformlist(int index) const;
  void _internal_add_platformlist(::msg::PLATFORMTYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_platformlist();
  public:
  ::msg::PLATFORMTYPE platformlist(int index) const;
  void set_platformlist(int index, ::msg::PLATFORMTYPE value);
  void add_platformlist(::msg::PLATFORMTYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& platformlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_platformlist();

  // repeated string ApkVersionList = 26;
  int apkversionlist_size() const;
  private:
  int _internal_apkversionlist_size() const;
  public:
  void clear_apkversionlist();
  const std::string& apkversionlist(int index) const;
  std::string* mutable_apkversionlist(int index);
  void set_apkversionlist(int index, const std::string& value);
  void set_apkversionlist(int index, std::string&& value);
  void set_apkversionlist(int index, const char* value);
  void set_apkversionlist(int index, const char* value, size_t size);
  std::string* add_apkversionlist();
  void add_apkversionlist(const std::string& value);
  void add_apkversionlist(std::string&& value);
  void add_apkversionlist(const char* value);
  void add_apkversionlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& apkversionlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_apkversionlist();
  private:
  const std::string& _internal_apkversionlist(int index) const;
  std::string* _internal_add_apkversionlist();
  public:

  // repeated string ExcludeDownload = 30;
  int excludedownload_size() const;
  private:
  int _internal_excludedownload_size() const;
  public:
  void clear_excludedownload();
  const std::string& excludedownload(int index) const;
  std::string* mutable_excludedownload(int index);
  void set_excludedownload(int index, const std::string& value);
  void set_excludedownload(int index, std::string&& value);
  void set_excludedownload(int index, const char* value);
  void set_excludedownload(int index, const char* value, size_t size);
  std::string* add_excludedownload();
  void add_excludedownload(const std::string& value);
  void add_excludedownload(std::string&& value);
  void add_excludedownload(const char* value);
  void add_excludedownload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedownload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedownload();
  private:
  const std::string& _internal_excludedownload(int index) const;
  std::string* _internal_add_excludedownload();
  public:

  // string Title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string Label = 4;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string PicUrl = 9;
  void clear_picurl();
  const std::string& picurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picurl();
  PROTOBUF_NODISCARD std::string* release_picurl();
  void set_allocated_picurl(std::string* picurl);
  private:
  const std::string& _internal_picurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picurl(const std::string& value);
  std::string* _internal_mutable_picurl();
  public:

  // string SkipUrl = 10;
  void clear_skipurl();
  const std::string& skipurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skipurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skipurl();
  PROTOBUF_NODISCARD std::string* release_skipurl();
  void set_allocated_skipurl(std::string* skipurl);
  private:
  const std::string& _internal_skipurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skipurl(const std::string& value);
  std::string* _internal_mutable_skipurl();
  public:

  // string SkipInterface = 16;
  void clear_skipinterface();
  const std::string& skipinterface() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skipinterface(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skipinterface();
  PROTOBUF_NODISCARD std::string* release_skipinterface();
  void set_allocated_skipinterface(std::string* skipinterface);
  private:
  const std::string& _internal_skipinterface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skipinterface(const std::string& value);
  std::string* _internal_mutable_skipinterface();
  public:

  // string CoverPicUrl = 23;
  void clear_coverpicurl();
  const std::string& coverpicurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coverpicurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coverpicurl();
  PROTOBUF_NODISCARD std::string* release_coverpicurl();
  void set_allocated_coverpicurl(std::string* coverpicurl);
  private:
  const std::string& _internal_coverpicurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coverpicurl(const std::string& value);
  std::string* _internal_mutable_coverpicurl();
  public:

  // string Subtitle = 24;
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // string PCSkipUrl = 27;
  void clear_pcskipurl();
  const std::string& pcskipurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcskipurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcskipurl();
  PROTOBUF_NODISCARD std::string* release_pcskipurl();
  void set_allocated_pcskipurl(std::string* pcskipurl);
  private:
  const std::string& _internal_pcskipurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcskipurl(const std::string& value);
  std::string* _internal_mutable_pcskipurl();
  public:

  // int64 Id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 Ts = 6;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // .msg.LABELTYPE LabelType = 5;
  void clear_labeltype();
  ::msg::LABELTYPE labeltype() const;
  void set_labeltype(::msg::LABELTYPE value);
  private:
  ::msg::LABELTYPE _internal_labeltype() const;
  void _internal_set_labeltype(::msg::LABELTYPE value);
  public:

  // .msg.NOTICESHOWTYPE ShowType = 7;
  void clear_showtype();
  ::msg::NOTICESHOWTYPE showtype() const;
  void set_showtype(::msg::NOTICESHOWTYPE value);
  private:
  ::msg::NOTICESHOWTYPE _internal_showtype() const;
  void _internal_set_showtype(::msg::NOTICESHOWTYPE value);
  public:

  // .msg.NOTICECONTENTTYPE ContentType = 8;
  void clear_contenttype();
  ::msg::NOTICECONTENTTYPE contenttype() const;
  void set_contenttype(::msg::NOTICECONTENTTYPE value);
  private:
  ::msg::NOTICECONTENTTYPE _internal_contenttype() const;
  void _internal_set_contenttype(::msg::NOTICECONTENTTYPE value);
  public:

  // uint32 Flag = 11;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // int64 EndTime = 12;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // .msg.NOTICETYPE NoticeType = 13;
  void clear_noticetype();
  ::msg::NOTICETYPE noticetype() const;
  void set_noticetype(::msg::NOTICETYPE value);
  private:
  ::msg::NOTICETYPE _internal_noticetype() const;
  void _internal_set_noticetype(::msg::NOTICETYPE value);
  public:

  // .msg.NOTICETAP Tap = 15;
  void clear_tap();
  ::msg::NOTICETAP tap() const;
  void set_tap(::msg::NOTICETAP value);
  private:
  ::msg::NOTICETAP _internal_tap() const;
  void _internal_set_tap(::msg::NOTICETAP value);
  public:

  // uint32 SkipTab = 17;
  void clear_skiptab();
  uint32_t skiptab() const;
  void set_skiptab(uint32_t value);
  private:
  uint32_t _internal_skiptab() const;
  void _internal_set_skiptab(uint32_t value);
  public:

  // .msg.PICNOTICEJUMPTYPE PicJumpType = 18;
  void clear_picjumptype();
  ::msg::PICNOTICEJUMPTYPE picjumptype() const;
  void set_picjumptype(::msg::PICNOTICEJUMPTYPE value);
  private:
  ::msg::PICNOTICEJUMPTYPE _internal_picjumptype() const;
  void _internal_set_picjumptype(::msg::PICNOTICEJUMPTYPE value);
  public:

  // .msg.MAGNETISMTYPE MagnetismType = 22;
  void clear_magnetismtype();
  ::msg::MAGNETISMTYPE magnetismtype() const;
  void set_magnetismtype(::msg::MAGNETISMTYPE value);
  private:
  ::msg::MAGNETISMTYPE _internal_magnetismtype() const;
  void _internal_set_magnetismtype(::msg::MAGNETISMTYPE value);
  public:

  // uint32 JumpGoodsId = 25;
  void clear_jumpgoodsid();
  uint32_t jumpgoodsid() const;
  void set_jumpgoodsid(uint32_t value);
  private:
  uint32_t _internal_jumpgoodsid() const;
  void _internal_set_jumpgoodsid(uint32_t value);
  public:

  // int64 Sort = 28;
  void clear_sort();
  int64_t sort() const;
  void set_sort(int64_t value);
  private:
  int64_t _internal_sort() const;
  void _internal_set_sort(int64_t value);
  public:

  // int64 StartTime = 31;
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // bool NeedRedPoint = 29;
  void clear_needredpoint();
  bool needredpoint() const;
  void set_needredpoint(bool value);
  private:
  bool _internal_needredpoint() const;
  void _internal_set_needredpoint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> countrylist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GMLanguageInfo > webcontent_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> downloadlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> platformlist_;
    mutable std::atomic<int> _platformlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> apkversionlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedownload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skipurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skipinterface_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coverpicurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcskipurl_;
    int64_t id_;
    int64_t ts_;
    int labeltype_;
    int showtype_;
    int contenttype_;
    uint32_t flag_;
    int64_t endtime_;
    int noticetype_;
    int tap_;
    uint32_t skiptab_;
    int picjumptype_;
    int magnetismtype_;
    uint32_t jumpgoodsid_;
    int64_t sort_;
    int64_t starttime_;
    bool needredpoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTAdsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTAdsInfo) */ {
 public:
  inline CSDTAdsInfo() : CSDTAdsInfo(nullptr) {}
  ~CSDTAdsInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTAdsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTAdsInfo(const CSDTAdsInfo& from);
  CSDTAdsInfo(CSDTAdsInfo&& from) noexcept
    : CSDTAdsInfo() {
    *this = ::std::move(from);
  }

  inline CSDTAdsInfo& operator=(const CSDTAdsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTAdsInfo& operator=(CSDTAdsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTAdsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTAdsInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTAdsInfo*>(
               &_CSDTAdsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CSDTAdsInfo& a, CSDTAdsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTAdsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTAdsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTAdsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTAdsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTAdsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTAdsInfo& from) {
    CSDTAdsInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTAdsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTAdsInfo";
  }
  protected:
  explicit CSDTAdsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .msg.CSDTAds Data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::msg::CSDTAds* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTAds >*
      mutable_data();
  private:
  const ::msg::CSDTAds& _internal_data(int index) const;
  ::msg::CSDTAds* _internal_add_data();
  public:
  const ::msg::CSDTAds& data(int index) const;
  ::msg::CSDTAds* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTAds >&
      data() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTAdsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTAds > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTAds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTAds) */ {
 public:
  inline CSDTAds() : CSDTAds(nullptr) {}
  ~CSDTAds() override;
  explicit PROTOBUF_CONSTEXPR CSDTAds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTAds(const CSDTAds& from);
  CSDTAds(CSDTAds&& from) noexcept
    : CSDTAds() {
    *this = ::std::move(from);
  }

  inline CSDTAds& operator=(const CSDTAds& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTAds& operator=(CSDTAds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTAds& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTAds* internal_default_instance() {
    return reinterpret_cast<const CSDTAds*>(
               &_CSDTAds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CSDTAds& a, CSDTAds& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTAds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTAds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTAds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTAds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTAds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTAds& from) {
    CSDTAds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTAds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTAds";
  }
  protected:
  explicit CSDTAds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryListFieldNumber = 9,
    kWhiteListFieldNumber = 10,
    kDownloadListFieldNumber = 11,
    kPlatformListFieldNumber = 12,
    kExcludeDownloadFieldNumber = 13,
    kTitleFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kStartTimeFieldNumber = 5,
    kShowLimitFieldNumber = 4,
    kShowCountFieldNumber = 7,
    kEndTimeFieldNumber = 6,
    kIsPayFieldNumber = 8,
  };
  // repeated string CountryList = 9;
  int countrylist_size() const;
  private:
  int _internal_countrylist_size() const;
  public:
  void clear_countrylist();
  const std::string& countrylist(int index) const;
  std::string* mutable_countrylist(int index);
  void set_countrylist(int index, const std::string& value);
  void set_countrylist(int index, std::string&& value);
  void set_countrylist(int index, const char* value);
  void set_countrylist(int index, const char* value, size_t size);
  std::string* add_countrylist();
  void add_countrylist(const std::string& value);
  void add_countrylist(std::string&& value);
  void add_countrylist(const char* value);
  void add_countrylist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& countrylist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_countrylist();
  private:
  const std::string& _internal_countrylist(int index) const;
  std::string* _internal_add_countrylist();
  public:

  // repeated string WhiteList = 10;
  int whitelist_size() const;
  private:
  int _internal_whitelist_size() const;
  public:
  void clear_whitelist();
  const std::string& whitelist(int index) const;
  std::string* mutable_whitelist(int index);
  void set_whitelist(int index, const std::string& value);
  void set_whitelist(int index, std::string&& value);
  void set_whitelist(int index, const char* value);
  void set_whitelist(int index, const char* value, size_t size);
  std::string* add_whitelist();
  void add_whitelist(const std::string& value);
  void add_whitelist(std::string&& value);
  void add_whitelist(const char* value);
  void add_whitelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whitelist();
  private:
  const std::string& _internal_whitelist(int index) const;
  std::string* _internal_add_whitelist();
  public:

  // repeated string DownloadList = 11;
  int downloadlist_size() const;
  private:
  int _internal_downloadlist_size() const;
  public:
  void clear_downloadlist();
  const std::string& downloadlist(int index) const;
  std::string* mutable_downloadlist(int index);
  void set_downloadlist(int index, const std::string& value);
  void set_downloadlist(int index, std::string&& value);
  void set_downloadlist(int index, const char* value);
  void set_downloadlist(int index, const char* value, size_t size);
  std::string* add_downloadlist();
  void add_downloadlist(const std::string& value);
  void add_downloadlist(std::string&& value);
  void add_downloadlist(const char* value);
  void add_downloadlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& downloadlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_downloadlist();
  private:
  const std::string& _internal_downloadlist(int index) const;
  std::string* _internal_add_downloadlist();
  public:

  // repeated .msg.PLATFORMTYPE PlatformList = 12;
  int platformlist_size() const;
  private:
  int _internal_platformlist_size() const;
  public:
  void clear_platformlist();
  private:
  ::msg::PLATFORMTYPE _internal_platformlist(int index) const;
  void _internal_add_platformlist(::msg::PLATFORMTYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_platformlist();
  public:
  ::msg::PLATFORMTYPE platformlist(int index) const;
  void set_platformlist(int index, ::msg::PLATFORMTYPE value);
  void add_platformlist(::msg::PLATFORMTYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& platformlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_platformlist();

  // repeated string ExcludeDownload = 13;
  int excludedownload_size() const;
  private:
  int _internal_excludedownload_size() const;
  public:
  void clear_excludedownload();
  const std::string& excludedownload(int index) const;
  std::string* mutable_excludedownload(int index);
  void set_excludedownload(int index, const std::string& value);
  void set_excludedownload(int index, std::string&& value);
  void set_excludedownload(int index, const char* value);
  void set_excludedownload(int index, const char* value, size_t size);
  std::string* add_excludedownload();
  void add_excludedownload(const std::string& value);
  void add_excludedownload(std::string&& value);
  void add_excludedownload(const char* value);
  void add_excludedownload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedownload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedownload();
  private:
  const std::string& _internal_excludedownload(int index) const;
  std::string* _internal_add_excludedownload();
  public:

  // string Title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 Id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 StartTime = 5;
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // uint32 ShowLimit = 4;
  void clear_showlimit();
  uint32_t showlimit() const;
  void set_showlimit(uint32_t value);
  private:
  uint32_t _internal_showlimit() const;
  void _internal_set_showlimit(uint32_t value);
  public:

  // uint32 ShowCount = 7;
  void clear_showcount();
  uint32_t showcount() const;
  void set_showcount(uint32_t value);
  private:
  uint32_t _internal_showcount() const;
  void _internal_set_showcount(uint32_t value);
  public:

  // int64 EndTime = 6;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // .msg.ADSPAYTYPE IsPay = 8;
  void clear_ispay();
  ::msg::ADSPAYTYPE ispay() const;
  void set_ispay(::msg::ADSPAYTYPE value);
  private:
  ::msg::ADSPAYTYPE _internal_ispay() const;
  void _internal_set_ispay(::msg::ADSPAYTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTAds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> countrylist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whitelist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> downloadlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> platformlist_;
    mutable std::atomic<int> _platformlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedownload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t id_;
    int64_t starttime_;
    uint32_t showlimit_;
    uint32_t showcount_;
    int64_t endtime_;
    int ispay_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Contest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Contest) */ {
 public:
  inline Contest() : Contest(nullptr) {}
  ~Contest() override;
  explicit PROTOBUF_CONSTEXPR Contest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Contest(const Contest& from);
  Contest(Contest&& from) noexcept
    : Contest() {
    *this = ::std::move(from);
  }

  inline Contest& operator=(const Contest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contest& operator=(Contest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Contest* internal_default_instance() {
    return reinterpret_cast<const Contest*>(
               &_Contest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Contest& a, Contest& b) {
    a.Swap(&b);
  }
  inline void Swap(Contest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Contest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Contest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Contest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Contest& from) {
    Contest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Contest";
  }
  protected:
  explicit Contest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipFieldNumber = 4,
    kChessIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kChessmanCardTagFieldNumber = 5,
    kRace1FieldNumber = 6,
    kRace2FieldNumber = 7,
    kPro1FieldNumber = 8,
    kSkill1FieldNumber = 9,
    kSkill2FieldNumber = 10,
  };
  // repeated uint32 Equip = 4;
  int equip_size() const;
  private:
  int _internal_equip_size() const;
  public:
  void clear_equip();
  private:
  uint32_t _internal_equip(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_equip() const;
  void _internal_add_equip(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_equip();
  public:
  uint32_t equip(int index) const;
  void set_equip(int index, uint32_t value);
  void add_equip(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      equip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_equip();

  // uint32 ChessId = 1;
  void clear_chessid();
  uint32_t chessid() const;
  void set_chessid(uint32_t value);
  private:
  uint32_t _internal_chessid() const;
  void _internal_set_chessid(uint32_t value);
  public:

  // uint32 X = 2;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 Y = 3;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // uint32 ChessmanCardTag = 5;
  void clear_chessmancardtag();
  uint32_t chessmancardtag() const;
  void set_chessmancardtag(uint32_t value);
  private:
  uint32_t _internal_chessmancardtag() const;
  void _internal_set_chessmancardtag(uint32_t value);
  public:

  // uint32 Race1 = 6;
  void clear_race1();
  uint32_t race1() const;
  void set_race1(uint32_t value);
  private:
  uint32_t _internal_race1() const;
  void _internal_set_race1(uint32_t value);
  public:

  // uint32 Race2 = 7;
  void clear_race2();
  uint32_t race2() const;
  void set_race2(uint32_t value);
  private:
  uint32_t _internal_race2() const;
  void _internal_set_race2(uint32_t value);
  public:

  // uint32 Pro1 = 8;
  void clear_pro1();
  uint32_t pro1() const;
  void set_pro1(uint32_t value);
  private:
  uint32_t _internal_pro1() const;
  void _internal_set_pro1(uint32_t value);
  public:

  // uint32 Skill1 = 9;
  void clear_skill1();
  uint32_t skill1() const;
  void set_skill1(uint32_t value);
  private:
  uint32_t _internal_skill1() const;
  void _internal_set_skill1(uint32_t value);
  public:

  // uint32 Skill2 = 10;
  void clear_skill2();
  uint32_t skill2() const;
  void set_skill2(uint32_t value);
  private:
  uint32_t _internal_skill2() const;
  void _internal_set_skill2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Contest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > equip_;
    mutable std::atomic<int> _equip_cached_byte_size_;
    uint32_t chessid_;
    uint32_t x_;
    uint32_t y_;
    uint32_t chessmancardtag_;
    uint32_t race1_;
    uint32_t race2_;
    uint32_t pro1_;
    uint32_t skill1_;
    uint32_t skill2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Effect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Effect) */ {
 public:
  inline Effect() : Effect(nullptr) {}
  ~Effect() override;
  explicit PROTOBUF_CONSTEXPR Effect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Effect(const Effect& from);
  Effect(Effect&& from) noexcept
    : Effect() {
    *this = ::std::move(from);
  }

  inline Effect& operator=(const Effect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Effect& operator=(Effect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Effect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Effect* internal_default_instance() {
    return reinterpret_cast<const Effect*>(
               &_Effect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Effect& a, Effect& b) {
    a.Swap(&b);
  }
  inline void Swap(Effect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Effect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Effect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Effect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Effect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Effect& from) {
    Effect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Effect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Effect";
  }
  protected:
  explicit Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCurLevelFieldNumber = 2,
    kMaxLevelFieldNumber = 3,
  };
  // uint32 Type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 CurLevel = 2;
  void clear_curlevel();
  uint32_t curlevel() const;
  void set_curlevel(uint32_t value);
  private:
  uint32_t _internal_curlevel() const;
  void _internal_set_curlevel(uint32_t value);
  public:

  // uint32 MaxLevel = 3;
  void clear_maxlevel();
  uint32_t maxlevel() const;
  void set_maxlevel(uint32_t value);
  private:
  uint32_t _internal_maxlevel() const;
  void _internal_set_maxlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Effect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_;
    uint32_t curlevel_;
    uint32_t maxlevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChessDamageStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessDamageStat) */ {
 public:
  inline ChessDamageStat() : ChessDamageStat(nullptr) {}
  ~ChessDamageStat() override;
  explicit PROTOBUF_CONSTEXPR ChessDamageStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessDamageStat(const ChessDamageStat& from);
  ChessDamageStat(ChessDamageStat&& from) noexcept
    : ChessDamageStat() {
    *this = ::std::move(from);
  }

  inline ChessDamageStat& operator=(const ChessDamageStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessDamageStat& operator=(ChessDamageStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessDamageStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessDamageStat* internal_default_instance() {
    return reinterpret_cast<const ChessDamageStat*>(
               &_ChessDamageStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ChessDamageStat& a, ChessDamageStat& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessDamageStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessDamageStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessDamageStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessDamageStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessDamageStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessDamageStat& from) {
    ChessDamageStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessDamageStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessDamageStat";
  }
  protected:
  explicit ChessDamageStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessIdFieldNumber = 1,
    kTotalDamageFieldNumber = 2,
    kTotalSufferFieldNumber = 3,
    kPhysicalDamageFieldNumber = 4,
    kMagicalDamageFieldNumber = 5,
  };
  // uint32 ChessId = 1;
  void clear_chessid();
  uint32_t chessid() const;
  void set_chessid(uint32_t value);
  private:
  uint32_t _internal_chessid() const;
  void _internal_set_chessid(uint32_t value);
  public:

  // uint32 TotalDamage = 2;
  void clear_totaldamage();
  uint32_t totaldamage() const;
  void set_totaldamage(uint32_t value);
  private:
  uint32_t _internal_totaldamage() const;
  void _internal_set_totaldamage(uint32_t value);
  public:

  // uint32 TotalSuffer = 3;
  void clear_totalsuffer();
  uint32_t totalsuffer() const;
  void set_totalsuffer(uint32_t value);
  private:
  uint32_t _internal_totalsuffer() const;
  void _internal_set_totalsuffer(uint32_t value);
  public:

  // uint32 PhysicalDamage = 4;
  void clear_physicaldamage();
  uint32_t physicaldamage() const;
  void set_physicaldamage(uint32_t value);
  private:
  uint32_t _internal_physicaldamage() const;
  void _internal_set_physicaldamage(uint32_t value);
  public:

  // uint32 MagicalDamage = 5;
  void clear_magicaldamage();
  uint32_t magicaldamage() const;
  void set_magicaldamage(uint32_t value);
  private:
  uint32_t _internal_magicaldamage() const;
  void _internal_set_magicaldamage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChessDamageStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t chessid_;
    uint32_t totaldamage_;
    uint32_t totalsuffer_;
    uint32_t physicaldamage_;
    uint32_t magicaldamage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SelectEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.SelectEquip) */ {
 public:
  inline SelectEquip() : SelectEquip(nullptr) {}
  ~SelectEquip() override;
  explicit PROTOBUF_CONSTEXPR SelectEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectEquip(const SelectEquip& from);
  SelectEquip(SelectEquip&& from) noexcept
    : SelectEquip() {
    *this = ::std::move(from);
  }

  inline SelectEquip& operator=(const SelectEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectEquip& operator=(SelectEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectEquip* internal_default_instance() {
    return reinterpret_cast<const SelectEquip*>(
               &_SelectEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SelectEquip& a, SelectEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SelectEquip& from) {
    SelectEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.SelectEquip";
  }
  protected:
  explicit SelectEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundIdFieldNumber = 1,
    kEquipIdFieldNumber = 2,
  };
  // uint32 RoundId = 1;
  void clear_roundid();
  uint32_t roundid() const;
  void set_roundid(uint32_t value);
  private:
  uint32_t _internal_roundid() const;
  void _internal_set_roundid(uint32_t value);
  public:

  // uint32 EquipId = 2;
  void clear_equipid();
  uint32_t equipid() const;
  void set_equipid(uint32_t value);
  private:
  uint32_t _internal_equipid() const;
  void _internal_set_equipid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.SelectEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t roundid_;
    uint32_t equipid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Equip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Equip) */ {
 public:
  inline Equip() : Equip(nullptr) {}
  ~Equip() override;
  explicit PROTOBUF_CONSTEXPR Equip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Equip(const Equip& from);
  Equip(Equip&& from) noexcept
    : Equip() {
    *this = ::std::move(from);
  }

  inline Equip& operator=(const Equip& from) {
    CopyFrom(from);
    return *this;
  }
  inline Equip& operator=(Equip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Equip& default_instance() {
    return *internal_default_instance();
  }
  static inline const Equip* internal_default_instance() {
    return reinterpret_cast<const Equip*>(
               &_Equip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Equip& a, Equip& b) {
    a.Swap(&b);
  }
  inline void Swap(Equip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Equip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Equip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Equip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Equip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Equip& from) {
    Equip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Equip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Equip";
  }
  protected:
  explicit Equip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kQualityFieldNumber = 3,
  };
  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 Quality = 3;
  void clear_quality();
  uint32_t quality() const;
  void set_quality(uint32_t value);
  private:
  uint32_t _internal_quality() const;
  void _internal_set_quality(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Equip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t count_;
    uint32_t quality_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRoundItem_EnemyLeftChessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EnemyLeftChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EnemyLeftChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_EnemyLeftChessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_EnemyLeftChessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_EnemyLeftChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_EnemyLeftChessEntry_DoNotUse& other);
  static const CSDTRoundItem_EnemyLeftChessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_EnemyLeftChessEntry_DoNotUse*>(&_CSDTRoundItem_EnemyLeftChessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_SelfLeftChessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_SelfLeftChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_SelfLeftChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_SelfLeftChessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_SelfLeftChessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_SelfLeftChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_SelfLeftChessEntry_DoNotUse& other);
  static const CSDTRoundItem_SelfLeftChessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_SelfLeftChessEntry_DoNotUse*>(&_CSDTRoundItem_SelfLeftChessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_DropEquipEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_DropEquipEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_DropEquipEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_DropEquipEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_DropEquipEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_DropEquipEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_DropEquipEntry_DoNotUse& other);
  static const CSDTRoundItem_DropEquipEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_DropEquipEntry_DoNotUse*>(&_CSDTRoundItem_DropEquipEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_SelfBattleChessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_SelfBattleChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_SelfBattleChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_SelfBattleChessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_SelfBattleChessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_SelfBattleChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_SelfBattleChessEntry_DoNotUse& other);
  static const CSDTRoundItem_SelfBattleChessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_SelfBattleChessEntry_DoNotUse*>(&_CSDTRoundItem_SelfBattleChessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_EnemyBattleChessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EnemyBattleChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EnemyBattleChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_EnemyBattleChessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_EnemyBattleChessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_EnemyBattleChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_EnemyBattleChessEntry_DoNotUse& other);
  static const CSDTRoundItem_EnemyBattleChessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_EnemyBattleChessEntry_DoNotUse*>(&_CSDTRoundItem_EnemyBattleChessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_BuyChessListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_BuyChessListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_BuyChessListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_BuyChessListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_BuyChessListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_BuyChessListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_BuyChessListEntry_DoNotUse& other);
  static const CSDTRoundItem_BuyChessListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_BuyChessListEntry_DoNotUse*>(&_CSDTRoundItem_BuyChessListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_EquipComposeListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EquipComposeListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EquipComposeListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_EquipComposeListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_EquipComposeListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_EquipComposeListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_EquipComposeListEntry_DoNotUse& other);
  static const CSDTRoundItem_EquipComposeListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_EquipComposeListEntry_DoNotUse*>(&_CSDTRoundItem_EquipComposeListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse& other);
  static const CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse*>(&_CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_MoneySourceListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_MoneySourceListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_MoneySourceListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_MoneySourceListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_MoneySourceListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_MoneySourceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_MoneySourceListEntry_DoNotUse& other);
  static const CSDTRoundItem_MoneySourceListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_MoneySourceListEntry_DoNotUse*>(&_CSDTRoundItem_MoneySourceListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_MoneyPayListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_MoneyPayListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_MoneyPayListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_MoneyPayListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_MoneyPayListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_MoneyPayListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_MoneyPayListEntry_DoNotUse& other);
  static const CSDTRoundItem_MoneyPayListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_MoneyPayListEntry_DoNotUse*>(&_CSDTRoundItem_MoneyPayListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_SellChessListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_SellChessListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_SellChessListEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTRoundItem_SellChessListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_SellChessListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_SellChessListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_SellChessListEntry_DoNotUse& other);
  static const CSDTRoundItem_SellChessListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_SellChessListEntry_DoNotUse*>(&_CSDTRoundItem_SellChessListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem_EquipComposeStructListEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EquipComposeStructListEntry_DoNotUse, 
    uint32_t, ::msg::Equip,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRoundItem_EquipComposeStructListEntry_DoNotUse, 
    uint32_t, ::msg::Equip,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTRoundItem_EquipComposeStructListEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem_EquipComposeStructListEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRoundItem_EquipComposeStructListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRoundItem_EquipComposeStructListEntry_DoNotUse& other);
  static const CSDTRoundItem_EquipComposeStructListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRoundItem_EquipComposeStructListEntry_DoNotUse*>(&_CSDTRoundItem_EquipComposeStructListEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRoundItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRoundItem) */ {
 public:
  inline CSDTRoundItem() : CSDTRoundItem(nullptr) {}
  ~CSDTRoundItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTRoundItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRoundItem(const CSDTRoundItem& from);
  CSDTRoundItem(CSDTRoundItem&& from) noexcept
    : CSDTRoundItem() {
    *this = ::std::move(from);
  }

  inline CSDTRoundItem& operator=(const CSDTRoundItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRoundItem& operator=(CSDTRoundItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRoundItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRoundItem* internal_default_instance() {
    return reinterpret_cast<const CSDTRoundItem*>(
               &_CSDTRoundItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CSDTRoundItem& a, CSDTRoundItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRoundItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRoundItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRoundItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRoundItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRoundItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRoundItem& from) {
    CSDTRoundItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRoundItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRoundItem";
  }
  protected:
  explicit CSDTRoundItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnemyLeftChessFieldNumber = 8,
    kSelfLeftChessFieldNumber = 9,
    kDropEquipFieldNumber = 11,
    kSelfContestFieldNumber = 12,
    kTargetContestFieldNumber = 13,
    kSelfBattleChessFieldNumber = 14,
    kEnemyBattleChessFieldNumber = 15,
    kRoundStartContestFieldNumber = 16,
    kBattleStartContestFieldNumber = 17,
    kChessShopFreshListFieldNumber = 19,
    kBuyChessListFieldNumber = 20,
    kEquipComposeListFieldNumber = 21,
    kUpgradeStarChessListFieldNumber = 22,
    kMoneySourceListFieldNumber = 26,
    kMoneyPayListFieldNumber = 27,
    kSellChessListFieldNumber = 33,
    kSharedChessListFieldNumber = 38,
    kGiveEquipChessListFieldNumber = 39,
    kGiveChessListFieldNumber = 40,
    kRaceEffectListFieldNumber = 41,
    kProfessionEffectListFieldNumber = 42,
    kChessDamageListFieldNumber = 43,
    kRoundEquipSelectionsFieldNumber = 44,
    kSelectEquipsFieldNumber = 45,
    kEquipComposeStructListFieldNumber = 47,
    kTargetPlayerIdFieldNumber = 6,
    kTargetOpenIdFieldNumber = 46,
    kRoundFieldNumber = 1,
    kOldHpFieldNumber = 2,
    kHpFieldNumber = 3,
    kOldRankFieldNumber = 4,
    kRankFieldNumber = 5,
    kWinTypeFieldNumber = 7,
    kTimeFieldNumber = 10,
    kChessShopFreshCountFieldNumber = 18,
    kRoundStartMoneyFieldNumber = 23,
    kBattleStartMoneyFieldNumber = 24,
    kBattleEndMoneyFieldNumber = 25,
    kReadChessCountFieldNumber = 28,
    kRoundStartLvlFieldNumber = 29,
    kRoundStartExpFieldNumber = 30,
    kBattleStartLvlFieldNumber = 31,
    kBattleStartExpFieldNumber = 32,
    kWinConFieldNumber = 35,
    kIsMonsterFieldNumber = 34,
    kIsLastRoundFieldNumber = 37,
    kLoseConFieldNumber = 36,
  };
  // map<uint32, uint32> EnemyLeftChess = 8;
  int enemyleftchess_size() const;
  private:
  int _internal_enemyleftchess_size() const;
  public:
  void clear_enemyleftchess();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_enemyleftchess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_enemyleftchess();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      enemyleftchess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_enemyleftchess();

  // map<uint32, uint32> SelfLeftChess = 9;
  int selfleftchess_size() const;
  private:
  int _internal_selfleftchess_size() const;
  public:
  void clear_selfleftchess();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_selfleftchess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_selfleftchess();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      selfleftchess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_selfleftchess();

  // map<uint32, uint32> DropEquip = 11;
  int dropequip_size() const;
  private:
  int _internal_dropequip_size() const;
  public:
  void clear_dropequip();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_dropequip() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_dropequip();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      dropequip() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_dropequip();

  // repeated .msg.Contest SelfContest = 12;
  int selfcontest_size() const;
  private:
  int _internal_selfcontest_size() const;
  public:
  void clear_selfcontest();
  ::msg::Contest* mutable_selfcontest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_selfcontest();
  private:
  const ::msg::Contest& _internal_selfcontest(int index) const;
  ::msg::Contest* _internal_add_selfcontest();
  public:
  const ::msg::Contest& selfcontest(int index) const;
  ::msg::Contest* add_selfcontest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      selfcontest() const;

  // repeated .msg.Contest TargetContest = 13;
  int targetcontest_size() const;
  private:
  int _internal_targetcontest_size() const;
  public:
  void clear_targetcontest();
  ::msg::Contest* mutable_targetcontest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_targetcontest();
  private:
  const ::msg::Contest& _internal_targetcontest(int index) const;
  ::msg::Contest* _internal_add_targetcontest();
  public:
  const ::msg::Contest& targetcontest(int index) const;
  ::msg::Contest* add_targetcontest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      targetcontest() const;

  // map<uint32, uint32> SelfBattleChess = 14;
  int selfbattlechess_size() const;
  private:
  int _internal_selfbattlechess_size() const;
  public:
  void clear_selfbattlechess();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_selfbattlechess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_selfbattlechess();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      selfbattlechess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_selfbattlechess();

  // map<uint32, uint32> EnemyBattleChess = 15;
  int enemybattlechess_size() const;
  private:
  int _internal_enemybattlechess_size() const;
  public:
  void clear_enemybattlechess();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_enemybattlechess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_enemybattlechess();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      enemybattlechess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_enemybattlechess();

  // repeated .msg.Contest RoundStartContest = 16;
  int roundstartcontest_size() const;
  private:
  int _internal_roundstartcontest_size() const;
  public:
  void clear_roundstartcontest();
  ::msg::Contest* mutable_roundstartcontest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_roundstartcontest();
  private:
  const ::msg::Contest& _internal_roundstartcontest(int index) const;
  ::msg::Contest* _internal_add_roundstartcontest();
  public:
  const ::msg::Contest& roundstartcontest(int index) const;
  ::msg::Contest* add_roundstartcontest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      roundstartcontest() const;

  // repeated .msg.Contest BattleStartContest = 17;
  int battlestartcontest_size() const;
  private:
  int _internal_battlestartcontest_size() const;
  public:
  void clear_battlestartcontest();
  ::msg::Contest* mutable_battlestartcontest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_battlestartcontest();
  private:
  const ::msg::Contest& _internal_battlestartcontest(int index) const;
  ::msg::Contest* _internal_add_battlestartcontest();
  public:
  const ::msg::Contest& battlestartcontest(int index) const;
  ::msg::Contest* add_battlestartcontest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      battlestartcontest() const;

  // repeated uint32 ChessShopFreshList = 19;
  int chessshopfreshlist_size() const;
  private:
  int _internal_chessshopfreshlist_size() const;
  public:
  void clear_chessshopfreshlist();
  private:
  uint32_t _internal_chessshopfreshlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chessshopfreshlist() const;
  void _internal_add_chessshopfreshlist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chessshopfreshlist();
  public:
  uint32_t chessshopfreshlist(int index) const;
  void set_chessshopfreshlist(int index, uint32_t value);
  void add_chessshopfreshlist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chessshopfreshlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chessshopfreshlist();

  // map<uint32, uint32> BuyChessList = 20;
  int buychesslist_size() const;
  private:
  int _internal_buychesslist_size() const;
  public:
  void clear_buychesslist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_buychesslist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_buychesslist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      buychesslist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_buychesslist();

  // map<uint32, uint32> EquipComposeList = 21;
  int equipcomposelist_size() const;
  private:
  int _internal_equipcomposelist_size() const;
  public:
  void clear_equipcomposelist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_equipcomposelist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_equipcomposelist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      equipcomposelist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_equipcomposelist();

  // map<uint32, uint32> UpgradeStarChessList = 22;
  int upgradestarchesslist_size() const;
  private:
  int _internal_upgradestarchesslist_size() const;
  public:
  void clear_upgradestarchesslist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_upgradestarchesslist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_upgradestarchesslist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      upgradestarchesslist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_upgradestarchesslist();

  // map<uint32, uint32> MoneySourceList = 26;
  int moneysourcelist_size() const;
  private:
  int _internal_moneysourcelist_size() const;
  public:
  void clear_moneysourcelist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_moneysourcelist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_moneysourcelist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      moneysourcelist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_moneysourcelist();

  // map<uint32, uint32> MoneyPayList = 27;
  int moneypaylist_size() const;
  private:
  int _internal_moneypaylist_size() const;
  public:
  void clear_moneypaylist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_moneypaylist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_moneypaylist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      moneypaylist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_moneypaylist();

  // map<uint32, uint32> SellChessList = 33;
  int sellchesslist_size() const;
  private:
  int _internal_sellchesslist_size() const;
  public:
  void clear_sellchesslist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_sellchesslist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_sellchesslist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      sellchesslist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_sellchesslist();

  // repeated .msg.Contest SharedChessList = 38;
  int sharedchesslist_size() const;
  private:
  int _internal_sharedchesslist_size() const;
  public:
  void clear_sharedchesslist();
  ::msg::Contest* mutable_sharedchesslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_sharedchesslist();
  private:
  const ::msg::Contest& _internal_sharedchesslist(int index) const;
  ::msg::Contest* _internal_add_sharedchesslist();
  public:
  const ::msg::Contest& sharedchesslist(int index) const;
  ::msg::Contest* add_sharedchesslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      sharedchesslist() const;

  // repeated uint32 GiveEquipChessList = 39;
  int giveequipchesslist_size() const;
  private:
  int _internal_giveequipchesslist_size() const;
  public:
  void clear_giveequipchesslist();
  private:
  uint32_t _internal_giveequipchesslist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_giveequipchesslist() const;
  void _internal_add_giveequipchesslist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_giveequipchesslist();
  public:
  uint32_t giveequipchesslist(int index) const;
  void set_giveequipchesslist(int index, uint32_t value);
  void add_giveequipchesslist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      giveequipchesslist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_giveequipchesslist();

  // repeated .msg.Contest GiveChessList = 40;
  int givechesslist_size() const;
  private:
  int _internal_givechesslist_size() const;
  public:
  void clear_givechesslist();
  ::msg::Contest* mutable_givechesslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_givechesslist();
  private:
  const ::msg::Contest& _internal_givechesslist(int index) const;
  ::msg::Contest* _internal_add_givechesslist();
  public:
  const ::msg::Contest& givechesslist(int index) const;
  ::msg::Contest* add_givechesslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      givechesslist() const;

  // repeated .msg.Effect RaceEffectList = 41;
  int raceeffectlist_size() const;
  private:
  int _internal_raceeffectlist_size() const;
  public:
  void clear_raceeffectlist();
  ::msg::Effect* mutable_raceeffectlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >*
      mutable_raceeffectlist();
  private:
  const ::msg::Effect& _internal_raceeffectlist(int index) const;
  ::msg::Effect* _internal_add_raceeffectlist();
  public:
  const ::msg::Effect& raceeffectlist(int index) const;
  ::msg::Effect* add_raceeffectlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >&
      raceeffectlist() const;

  // repeated .msg.Effect ProfessionEffectList = 42;
  int professioneffectlist_size() const;
  private:
  int _internal_professioneffectlist_size() const;
  public:
  void clear_professioneffectlist();
  ::msg::Effect* mutable_professioneffectlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >*
      mutable_professioneffectlist();
  private:
  const ::msg::Effect& _internal_professioneffectlist(int index) const;
  ::msg::Effect* _internal_add_professioneffectlist();
  public:
  const ::msg::Effect& professioneffectlist(int index) const;
  ::msg::Effect* add_professioneffectlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >&
      professioneffectlist() const;

  // repeated .msg.ChessDamageStat ChessDamageList = 43;
  int chessdamagelist_size() const;
  private:
  int _internal_chessdamagelist_size() const;
  public:
  void clear_chessdamagelist();
  ::msg::ChessDamageStat* mutable_chessdamagelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessDamageStat >*
      mutable_chessdamagelist();
  private:
  const ::msg::ChessDamageStat& _internal_chessdamagelist(int index) const;
  ::msg::ChessDamageStat* _internal_add_chessdamagelist();
  public:
  const ::msg::ChessDamageStat& chessdamagelist(int index) const;
  ::msg::ChessDamageStat* add_chessdamagelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessDamageStat >&
      chessdamagelist() const;

  // repeated uint32 RoundEquipSelections = 44;
  int roundequipselections_size() const;
  private:
  int _internal_roundequipselections_size() const;
  public:
  void clear_roundequipselections();
  private:
  uint32_t _internal_roundequipselections(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_roundequipselections() const;
  void _internal_add_roundequipselections(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_roundequipselections();
  public:
  uint32_t roundequipselections(int index) const;
  void set_roundequipselections(int index, uint32_t value);
  void add_roundequipselections(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      roundequipselections() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_roundequipselections();

  // repeated .msg.SelectEquip SelectEquips = 45;
  int selectequips_size() const;
  private:
  int _internal_selectequips_size() const;
  public:
  void clear_selectequips();
  ::msg::SelectEquip* mutable_selectequips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SelectEquip >*
      mutable_selectequips();
  private:
  const ::msg::SelectEquip& _internal_selectequips(int index) const;
  ::msg::SelectEquip* _internal_add_selectequips();
  public:
  const ::msg::SelectEquip& selectequips(int index) const;
  ::msg::SelectEquip* add_selectequips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SelectEquip >&
      selectequips() const;

  // map<uint32, .msg.Equip> EquipComposeStructList = 47;
  int equipcomposestructlist_size() const;
  private:
  int _internal_equipcomposestructlist_size() const;
  public:
  void clear_equipcomposestructlist();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >&
      _internal_equipcomposestructlist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >*
      _internal_mutable_equipcomposestructlist();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >&
      equipcomposestructlist() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >*
      mutable_equipcomposestructlist();

  // string TargetPlayerId = 6;
  void clear_targetplayerid();
  const std::string& targetplayerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetplayerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetplayerid();
  PROTOBUF_NODISCARD std::string* release_targetplayerid();
  void set_allocated_targetplayerid(std::string* targetplayerid);
  private:
  const std::string& _internal_targetplayerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetplayerid(const std::string& value);
  std::string* _internal_mutable_targetplayerid();
  public:

  // string TargetOpenId = 46;
  void clear_targetopenid();
  const std::string& targetopenid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetopenid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetopenid();
  PROTOBUF_NODISCARD std::string* release_targetopenid();
  void set_allocated_targetopenid(std::string* targetopenid);
  private:
  const std::string& _internal_targetopenid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetopenid(const std::string& value);
  std::string* _internal_mutable_targetopenid();
  public:

  // uint32 Round = 1;
  void clear_round();
  uint32_t round() const;
  void set_round(uint32_t value);
  private:
  uint32_t _internal_round() const;
  void _internal_set_round(uint32_t value);
  public:

  // uint32 OldHp = 2;
  void clear_oldhp();
  uint32_t oldhp() const;
  void set_oldhp(uint32_t value);
  private:
  uint32_t _internal_oldhp() const;
  void _internal_set_oldhp(uint32_t value);
  public:

  // uint32 Hp = 3;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 OldRank = 4;
  void clear_oldrank();
  uint32_t oldrank() const;
  void set_oldrank(uint32_t value);
  private:
  uint32_t _internal_oldrank() const;
  void _internal_set_oldrank(uint32_t value);
  public:

  // uint32 Rank = 5;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // .msg.WINTYPE WinType = 7;
  void clear_wintype();
  ::msg::WINTYPE wintype() const;
  void set_wintype(::msg::WINTYPE value);
  private:
  ::msg::WINTYPE _internal_wintype() const;
  void _internal_set_wintype(::msg::WINTYPE value);
  public:

  // uint32 Time = 10;
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // uint32 ChessShopFreshCount = 18;
  void clear_chessshopfreshcount();
  uint32_t chessshopfreshcount() const;
  void set_chessshopfreshcount(uint32_t value);
  private:
  uint32_t _internal_chessshopfreshcount() const;
  void _internal_set_chessshopfreshcount(uint32_t value);
  public:

  // uint32 RoundStartMoney = 23;
  void clear_roundstartmoney();
  uint32_t roundstartmoney() const;
  void set_roundstartmoney(uint32_t value);
  private:
  uint32_t _internal_roundstartmoney() const;
  void _internal_set_roundstartmoney(uint32_t value);
  public:

  // uint32 BattleStartMoney = 24;
  void clear_battlestartmoney();
  uint32_t battlestartmoney() const;
  void set_battlestartmoney(uint32_t value);
  private:
  uint32_t _internal_battlestartmoney() const;
  void _internal_set_battlestartmoney(uint32_t value);
  public:

  // uint32 BattleEndMoney = 25;
  void clear_battleendmoney();
  uint32_t battleendmoney() const;
  void set_battleendmoney(uint32_t value);
  private:
  uint32_t _internal_battleendmoney() const;
  void _internal_set_battleendmoney(uint32_t value);
  public:

  // uint32 ReadChessCount = 28;
  void clear_readchesscount();
  uint32_t readchesscount() const;
  void set_readchesscount(uint32_t value);
  private:
  uint32_t _internal_readchesscount() const;
  void _internal_set_readchesscount(uint32_t value);
  public:

  // uint32 RoundStartLvl = 29;
  void clear_roundstartlvl();
  uint32_t roundstartlvl() const;
  void set_roundstartlvl(uint32_t value);
  private:
  uint32_t _internal_roundstartlvl() const;
  void _internal_set_roundstartlvl(uint32_t value);
  public:

  // uint32 RoundStartExp = 30;
  void clear_roundstartexp();
  uint32_t roundstartexp() const;
  void set_roundstartexp(uint32_t value);
  private:
  uint32_t _internal_roundstartexp() const;
  void _internal_set_roundstartexp(uint32_t value);
  public:

  // uint32 BattleStartLvl = 31;
  void clear_battlestartlvl();
  uint32_t battlestartlvl() const;
  void set_battlestartlvl(uint32_t value);
  private:
  uint32_t _internal_battlestartlvl() const;
  void _internal_set_battlestartlvl(uint32_t value);
  public:

  // uint32 BattleStartExp = 32;
  void clear_battlestartexp();
  uint32_t battlestartexp() const;
  void set_battlestartexp(uint32_t value);
  private:
  uint32_t _internal_battlestartexp() const;
  void _internal_set_battlestartexp(uint32_t value);
  public:

  // uint32 WinCon = 35;
  void clear_wincon();
  uint32_t wincon() const;
  void set_wincon(uint32_t value);
  private:
  uint32_t _internal_wincon() const;
  void _internal_set_wincon(uint32_t value);
  public:

  // bool IsMonster = 34;
  void clear_ismonster();
  bool ismonster() const;
  void set_ismonster(bool value);
  private:
  bool _internal_ismonster() const;
  void _internal_set_ismonster(bool value);
  public:

  // bool IsLastRound = 37;
  void clear_islastround();
  bool islastround() const;
  void set_islastround(bool value);
  private:
  bool _internal_islastround() const;
  void _internal_set_islastround(bool value);
  public:

  // uint32 LoseCon = 36;
  void clear_losecon();
  uint32_t losecon() const;
  void set_losecon(uint32_t value);
  private:
  uint32_t _internal_losecon() const;
  void _internal_set_losecon(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRoundItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_EnemyLeftChessEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> enemyleftchess_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_SelfLeftChessEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> selfleftchess_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_DropEquipEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> dropequip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > selfcontest_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > targetcontest_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_SelfBattleChessEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> selfbattlechess_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_EnemyBattleChessEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> enemybattlechess_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > roundstartcontest_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > battlestartcontest_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chessshopfreshlist_;
    mutable std::atomic<int> _chessshopfreshlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_BuyChessListEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> buychesslist_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_EquipComposeListEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> equipcomposelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> upgradestarchesslist_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_MoneySourceListEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> moneysourcelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_MoneyPayListEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> moneypaylist_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_SellChessListEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> sellchesslist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > sharedchesslist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > giveequipchesslist_;
    mutable std::atomic<int> _giveequipchesslist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > givechesslist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect > raceeffectlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect > professioneffectlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessDamageStat > chessdamagelist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > roundequipselections_;
    mutable std::atomic<int> _roundequipselections_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SelectEquip > selectequips_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRoundItem_EquipComposeStructListEntry_DoNotUse,
        uint32_t, ::msg::Equip,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> equipcomposestructlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetplayerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetopenid_;
    uint32_t round_;
    uint32_t oldhp_;
    uint32_t hp_;
    uint32_t oldrank_;
    uint32_t rank_;
    int wintype_;
    uint32_t time_;
    uint32_t chessshopfreshcount_;
    uint32_t roundstartmoney_;
    uint32_t battlestartmoney_;
    uint32_t battleendmoney_;
    uint32_t readchesscount_;
    uint32_t roundstartlvl_;
    uint32_t roundstartexp_;
    uint32_t battlestartlvl_;
    uint32_t battlestartexp_;
    uint32_t wincon_;
    bool ismonster_;
    bool islastround_;
    uint32_t losecon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRound final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRound) */ {
 public:
  inline CSDTRound() : CSDTRound(nullptr) {}
  ~CSDTRound() override;
  explicit PROTOBUF_CONSTEXPR CSDTRound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRound(const CSDTRound& from);
  CSDTRound(CSDTRound&& from) noexcept
    : CSDTRound() {
    *this = ::std::move(from);
  }

  inline CSDTRound& operator=(const CSDTRound& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRound& operator=(CSDTRound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRound& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRound* internal_default_instance() {
    return reinterpret_cast<const CSDTRound*>(
               &_CSDTRound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CSDTRound& a, CSDTRound& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRound>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRound& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRound& from) {
    CSDTRound::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRound";
  }
  protected:
  explicit CSDTRound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .msg.CSDTRoundItem List = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::msg::CSDTRoundItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoundItem >*
      mutable_list();
  private:
  const ::msg::CSDTRoundItem& _internal_list(int index) const;
  ::msg::CSDTRoundItem* _internal_add_list();
  public:
  const ::msg::CSDTRoundItem& list(int index) const;
  ::msg::CSDTRoundItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoundItem >&
      list() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTRound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoundItem > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRoundEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRoundEnd) */ {
 public:
  inline CSDTRoundEnd() : CSDTRoundEnd(nullptr) {}
  ~CSDTRoundEnd() override;
  explicit PROTOBUF_CONSTEXPR CSDTRoundEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRoundEnd(const CSDTRoundEnd& from);
  CSDTRoundEnd(CSDTRoundEnd&& from) noexcept
    : CSDTRoundEnd() {
    *this = ::std::move(from);
  }

  inline CSDTRoundEnd& operator=(const CSDTRoundEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRoundEnd& operator=(CSDTRoundEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRoundEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRoundEnd* internal_default_instance() {
    return reinterpret_cast<const CSDTRoundEnd*>(
               &_CSDTRoundEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CSDTRoundEnd& a, CSDTRoundEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRoundEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRoundEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRoundEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRoundEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRoundEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRoundEnd& from) {
    CSDTRoundEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRoundEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRoundEnd";
  }
  protected:
  explicit CSDTRoundEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRounItemFieldNumber = 2,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .msg.CSDTRoundItem RounItem = 2;
  bool has_rounitem() const;
  private:
  bool _internal_has_rounitem() const;
  public:
  void clear_rounitem();
  const ::msg::CSDTRoundItem& rounitem() const;
  PROTOBUF_NODISCARD ::msg::CSDTRoundItem* release_rounitem();
  ::msg::CSDTRoundItem* mutable_rounitem();
  void set_allocated_rounitem(::msg::CSDTRoundItem* rounitem);
  private:
  const ::msg::CSDTRoundItem& _internal_rounitem() const;
  ::msg::CSDTRoundItem* _internal_mutable_rounitem();
  public:
  void unsafe_arena_set_allocated_rounitem(
      ::msg::CSDTRoundItem* rounitem);
  ::msg::CSDTRoundItem* unsafe_arena_release_rounitem();

  // @@protoc_insertion_point(class_scope:msg.CSDTRoundEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::msg::CSDTRoundItem* rounitem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPvpStat_PlayerRoundEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpStat_PlayerRoundEntry_DoNotUse, 
    std::string, ::msg::CSDTRound,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpStat_PlayerRoundEntry_DoNotUse, 
    std::string, ::msg::CSDTRound,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTPvpStat_PlayerRoundEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPvpStat_PlayerRoundEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPvpStat_PlayerRoundEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPvpStat_PlayerRoundEntry_DoNotUse& other);
  static const CSDTPvpStat_PlayerRoundEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPvpStat_PlayerRoundEntry_DoNotUse*>(&_CSDTPvpStat_PlayerRoundEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTPvpStat.PlayerRoundEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPvpStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPvpStat) */ {
 public:
  inline CSDTPvpStat() : CSDTPvpStat(nullptr) {}
  ~CSDTPvpStat() override;
  explicit PROTOBUF_CONSTEXPR CSDTPvpStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPvpStat(const CSDTPvpStat& from);
  CSDTPvpStat(CSDTPvpStat&& from) noexcept
    : CSDTPvpStat() {
    *this = ::std::move(from);
  }

  inline CSDTPvpStat& operator=(const CSDTPvpStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPvpStat& operator=(CSDTPvpStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPvpStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPvpStat* internal_default_instance() {
    return reinterpret_cast<const CSDTPvpStat*>(
               &_CSDTPvpStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CSDTPvpStat& a, CSDTPvpStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPvpStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPvpStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPvpStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPvpStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPvpStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPvpStat& from) {
    CSDTPvpStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPvpStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPvpStat";
  }
  protected:
  explicit CSDTPvpStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWinRoleStatFieldNumber = 5,
    kFailRoleStatFieldNumber = 6,
    kDrawRoleStatFieldNumber = 7,
    kMvpSkillsFieldNumber = 9,
    kPlayerRoundFieldNumber = 10,
    kDeathNumFieldNumber = 1,
    kKillNumFieldNumber = 2,
    kWaterDeathNumFieldNumber = 3,
    kHurtGroundDeathNumFieldNumber = 4,
    kMvpRoleIdFieldNumber = 8,
  };
  // repeated .msg.CSDTRoleStat WinRoleStat = 5;
  int winrolestat_size() const;
  private:
  int _internal_winrolestat_size() const;
  public:
  void clear_winrolestat();
  ::msg::CSDTRoleStat* mutable_winrolestat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >*
      mutable_winrolestat();
  private:
  const ::msg::CSDTRoleStat& _internal_winrolestat(int index) const;
  ::msg::CSDTRoleStat* _internal_add_winrolestat();
  public:
  const ::msg::CSDTRoleStat& winrolestat(int index) const;
  ::msg::CSDTRoleStat* add_winrolestat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >&
      winrolestat() const;

  // repeated .msg.CSDTRoleStat FailRoleStat = 6;
  int failrolestat_size() const;
  private:
  int _internal_failrolestat_size() const;
  public:
  void clear_failrolestat();
  ::msg::CSDTRoleStat* mutable_failrolestat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >*
      mutable_failrolestat();
  private:
  const ::msg::CSDTRoleStat& _internal_failrolestat(int index) const;
  ::msg::CSDTRoleStat* _internal_add_failrolestat();
  public:
  const ::msg::CSDTRoleStat& failrolestat(int index) const;
  ::msg::CSDTRoleStat* add_failrolestat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >&
      failrolestat() const;

  // repeated .msg.CSDTRoleStat DrawRoleStat = 7;
  int drawrolestat_size() const;
  private:
  int _internal_drawrolestat_size() const;
  public:
  void clear_drawrolestat();
  ::msg::CSDTRoleStat* mutable_drawrolestat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >*
      mutable_drawrolestat();
  private:
  const ::msg::CSDTRoleStat& _internal_drawrolestat(int index) const;
  ::msg::CSDTRoleStat* _internal_add_drawrolestat();
  public:
  const ::msg::CSDTRoleStat& drawrolestat(int index) const;
  ::msg::CSDTRoleStat* add_drawrolestat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >&
      drawrolestat() const;

  // repeated uint32 MvpSkills = 9;
  int mvpskills_size() const;
  private:
  int _internal_mvpskills_size() const;
  public:
  void clear_mvpskills();
  private:
  uint32_t _internal_mvpskills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mvpskills() const;
  void _internal_add_mvpskills(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mvpskills();
  public:
  uint32_t mvpskills(int index) const;
  void set_mvpskills(int index, uint32_t value);
  void add_mvpskills(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mvpskills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mvpskills();

  // map<string, .msg.CSDTRound> PlayerRound = 10;
  int playerround_size() const;
  private:
  int _internal_playerround_size() const;
  public:
  void clear_playerround();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >&
      _internal_playerround() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >*
      _internal_mutable_playerround();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >&
      playerround() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >*
      mutable_playerround();

  // uint32 DeathNum = 1;
  void clear_deathnum();
  uint32_t deathnum() const;
  void set_deathnum(uint32_t value);
  private:
  uint32_t _internal_deathnum() const;
  void _internal_set_deathnum(uint32_t value);
  public:

  // uint32 KillNum = 2;
  void clear_killnum();
  uint32_t killnum() const;
  void set_killnum(uint32_t value);
  private:
  uint32_t _internal_killnum() const;
  void _internal_set_killnum(uint32_t value);
  public:

  // uint32 WaterDeathNum = 3;
  void clear_waterdeathnum();
  uint32_t waterdeathnum() const;
  void set_waterdeathnum(uint32_t value);
  private:
  uint32_t _internal_waterdeathnum() const;
  void _internal_set_waterdeathnum(uint32_t value);
  public:

  // uint32 HurtGroundDeathNum = 4;
  void clear_hurtgrounddeathnum();
  uint32_t hurtgrounddeathnum() const;
  void set_hurtgrounddeathnum(uint32_t value);
  private:
  uint32_t _internal_hurtgrounddeathnum() const;
  void _internal_set_hurtgrounddeathnum(uint32_t value);
  public:

  // uint32 MvpRoleId = 8;
  void clear_mvproleid();
  uint32_t mvproleid() const;
  void set_mvproleid(uint32_t value);
  private:
  uint32_t _internal_mvproleid() const;
  void _internal_set_mvproleid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPvpStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat > winrolestat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat > failrolestat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat > drawrolestat_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mvpskills_;
    mutable std::atomic<int> _mvpskills_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPvpStat_PlayerRoundEntry_DoNotUse,
        std::string, ::msg::CSDTRound,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> playerround_;
    uint32_t deathnum_;
    uint32_t killnum_;
    uint32_t waterdeathnum_;
    uint32_t hurtgrounddeathnum_;
    uint32_t mvproleid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPvpCampResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPvpCampResult) */ {
 public:
  inline CSDTPvpCampResult() : CSDTPvpCampResult(nullptr) {}
  ~CSDTPvpCampResult() override;
  explicit PROTOBUF_CONSTEXPR CSDTPvpCampResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPvpCampResult(const CSDTPvpCampResult& from);
  CSDTPvpCampResult(CSDTPvpCampResult&& from) noexcept
    : CSDTPvpCampResult() {
    *this = ::std::move(from);
  }

  inline CSDTPvpCampResult& operator=(const CSDTPvpCampResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPvpCampResult& operator=(CSDTPvpCampResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPvpCampResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPvpCampResult* internal_default_instance() {
    return reinterpret_cast<const CSDTPvpCampResult*>(
               &_CSDTPvpCampResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CSDTPvpCampResult& a, CSDTPvpCampResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPvpCampResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPvpCampResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPvpCampResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPvpCampResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPvpCampResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPvpCampResult& from) {
    CSDTPvpCampResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPvpCampResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPvpCampResult";
  }
  protected:
  explicit CSDTPvpCampResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampFieldNumber = 1,
    kRankFieldNumber = 2,
    kCamp1ScoreFieldNumber = 3,
    kCamp2ScoreFieldNumber = 4,
    kCurrencyIDFieldNumber = 5,
    kCurrencyCntFieldNumber = 6,
  };
  // repeated .msg.CSDTCampData Camp = 1;
  int camp_size() const;
  private:
  int _internal_camp_size() const;
  public:
  void clear_camp();
  ::msg::CSDTCampData* mutable_camp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >*
      mutable_camp();
  private:
  const ::msg::CSDTCampData& _internal_camp(int index) const;
  ::msg::CSDTCampData* _internal_add_camp();
  public:
  const ::msg::CSDTCampData& camp(int index) const;
  ::msg::CSDTCampData* add_camp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >&
      camp() const;

  // uint32 Rank = 2;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // uint32 Camp1Score = 3;
  void clear_camp1score();
  uint32_t camp1score() const;
  void set_camp1score(uint32_t value);
  private:
  uint32_t _internal_camp1score() const;
  void _internal_set_camp1score(uint32_t value);
  public:

  // uint32 Camp2Score = 4;
  void clear_camp2score();
  uint32_t camp2score() const;
  void set_camp2score(uint32_t value);
  private:
  uint32_t _internal_camp2score() const;
  void _internal_set_camp2score(uint32_t value);
  public:

  // int32 CurrencyID = 5;
  void clear_currencyid();
  int32_t currencyid() const;
  void set_currencyid(int32_t value);
  private:
  int32_t _internal_currencyid() const;
  void _internal_set_currencyid(int32_t value);
  public:

  // int32 CurrencyCnt = 6;
  void clear_currencycnt();
  int32_t currencycnt() const;
  void set_currencycnt(int32_t value);
  private:
  int32_t _internal_currencycnt() const;
  void _internal_set_currencycnt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPvpCampResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData > camp_;
    uint32_t rank_;
    uint32_t camp1score_;
    uint32_t camp2score_;
    int32_t currencyid_;
    int32_t currencycnt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTCampData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTCampData) */ {
 public:
  inline CSDTCampData() : CSDTCampData(nullptr) {}
  ~CSDTCampData() override;
  explicit PROTOBUF_CONSTEXPR CSDTCampData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTCampData(const CSDTCampData& from);
  CSDTCampData(CSDTCampData&& from) noexcept
    : CSDTCampData() {
    *this = ::std::move(from);
  }

  inline CSDTCampData& operator=(const CSDTCampData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTCampData& operator=(CSDTCampData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTCampData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTCampData* internal_default_instance() {
    return reinterpret_cast<const CSDTCampData*>(
               &_CSDTCampData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CSDTCampData& a, CSDTCampData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTCampData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTCampData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTCampData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTCampData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTCampData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTCampData& from) {
    CSDTCampData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTCampData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTCampData";
  }
  protected:
  explicit CSDTCampData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStatFieldNumber = 4,
    kCampFieldNumber = 1,
    kRankFieldNumber = 2,
    kWinTypeFieldNumber = 3,
    kSurrenderFieldNumber = 5,
  };
  // repeated .msg.CSDTPvpPlayerStat PlayerStat = 4;
  int playerstat_size() const;
  private:
  int _internal_playerstat_size() const;
  public:
  void clear_playerstat();
  ::msg::CSDTPvpPlayerStat* mutable_playerstat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpPlayerStat >*
      mutable_playerstat();
  private:
  const ::msg::CSDTPvpPlayerStat& _internal_playerstat(int index) const;
  ::msg::CSDTPvpPlayerStat* _internal_add_playerstat();
  public:
  const ::msg::CSDTPvpPlayerStat& playerstat(int index) const;
  ::msg::CSDTPvpPlayerStat* add_playerstat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpPlayerStat >&
      playerstat() const;

  // uint32 Camp = 1;
  void clear_camp();
  uint32_t camp() const;
  void set_camp(uint32_t value);
  private:
  uint32_t _internal_camp() const;
  void _internal_set_camp(uint32_t value);
  public:

  // uint32 Rank = 2;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // .msg.WINTYPE WinType = 3;
  void clear_wintype();
  ::msg::WINTYPE wintype() const;
  void set_wintype(::msg::WINTYPE value);
  private:
  ::msg::WINTYPE _internal_wintype() const;
  void _internal_set_wintype(::msg::WINTYPE value);
  public:

  // bool Surrender = 5;
  void clear_surrender();
  bool surrender() const;
  void set_surrender(bool value);
  private:
  bool _internal_surrender() const;
  void _internal_set_surrender(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTCampData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpPlayerStat > playerstat_;
    uint32_t camp_;
    uint32_t rank_;
    int wintype_;
    bool surrender_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRoleStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRoleStat) */ {
 public:
  inline CSDTRoleStat() : CSDTRoleStat(nullptr) {}
  ~CSDTRoleStat() override;
  explicit PROTOBUF_CONSTEXPR CSDTRoleStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRoleStat(const CSDTRoleStat& from);
  CSDTRoleStat(CSDTRoleStat&& from) noexcept
    : CSDTRoleStat() {
    *this = ::std::move(from);
  }

  inline CSDTRoleStat& operator=(const CSDTRoleStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRoleStat& operator=(CSDTRoleStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRoleStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRoleStat* internal_default_instance() {
    return reinterpret_cast<const CSDTRoleStat*>(
               &_CSDTRoleStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CSDTRoleStat& a, CSDTRoleStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRoleStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRoleStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRoleStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRoleStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRoleStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRoleStat& from) {
    CSDTRoleStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRoleStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRoleStat";
  }
  protected:
  explicit CSDTRoleStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTalentsFieldNumber = 6,
    kIdFieldNumber = 1,
    kUseTimeFieldNumber = 2,
    kKillCntFieldNumber = 3,
    kAssistKillCntFieldNumber = 4,
    kDeathCntFieldNumber = 5,
  };
  // repeated uint32 Talents = 6;
  int talents_size() const;
  private:
  int _internal_talents_size() const;
  public:
  void clear_talents();
  private:
  uint32_t _internal_talents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_talents() const;
  void _internal_add_talents(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_talents();
  public:
  uint32_t talents(int index) const;
  void set_talents(int index, uint32_t value);
  void add_talents(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      talents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_talents();

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 UseTime = 2;
  void clear_usetime();
  uint32_t usetime() const;
  void set_usetime(uint32_t value);
  private:
  uint32_t _internal_usetime() const;
  void _internal_set_usetime(uint32_t value);
  public:

  // uint32 KillCnt = 3;
  void clear_killcnt();
  uint32_t killcnt() const;
  void set_killcnt(uint32_t value);
  private:
  uint32_t _internal_killcnt() const;
  void _internal_set_killcnt(uint32_t value);
  public:

  // uint32 AssistKillCnt = 4;
  void clear_assistkillcnt();
  uint32_t assistkillcnt() const;
  void set_assistkillcnt(uint32_t value);
  private:
  uint32_t _internal_assistkillcnt() const;
  void _internal_set_assistkillcnt(uint32_t value);
  public:

  // uint32 DeathCnt = 5;
  void clear_deathcnt();
  uint32_t deathcnt() const;
  void set_deathcnt(uint32_t value);
  private:
  uint32_t _internal_deathcnt() const;
  void _internal_set_deathcnt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRoleStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > talents_;
    mutable std::atomic<int> _talents_cached_byte_size_;
    uint32_t id_;
    uint32_t usetime_;
    uint32_t killcnt_;
    uint32_t assistkillcnt_;
    uint32_t deathcnt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPvpMvp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPvpMvp) */ {
 public:
  inline CSDTPvpMvp() : CSDTPvpMvp(nullptr) {}
  ~CSDTPvpMvp() override;
  explicit PROTOBUF_CONSTEXPR CSDTPvpMvp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPvpMvp(const CSDTPvpMvp& from);
  CSDTPvpMvp(CSDTPvpMvp&& from) noexcept
    : CSDTPvpMvp() {
    *this = ::std::move(from);
  }

  inline CSDTPvpMvp& operator=(const CSDTPvpMvp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPvpMvp& operator=(CSDTPvpMvp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPvpMvp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPvpMvp* internal_default_instance() {
    return reinterpret_cast<const CSDTPvpMvp*>(
               &_CSDTPvpMvp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CSDTPvpMvp& a, CSDTPvpMvp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPvpMvp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPvpMvp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPvpMvp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPvpMvp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPvpMvp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPvpMvp& from) {
    CSDTPvpMvp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPvpMvp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPvpMvp";
  }
  protected:
  explicit CSDTPvpMvp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHurtMaxFieldNumber = 1,
    kBearHurtMaxFieldNumber = 2,
  };
  // uint32 HurtMax = 1;
  void clear_hurtmax();
  uint32_t hurtmax() const;
  void set_hurtmax(uint32_t value);
  private:
  uint32_t _internal_hurtmax() const;
  void _internal_set_hurtmax(uint32_t value);
  public:

  // uint32 BearHurtMax = 2;
  void clear_bearhurtmax();
  uint32_t bearhurtmax() const;
  void set_bearhurtmax(uint32_t value);
  private:
  uint32_t _internal_bearhurtmax() const;
  void _internal_set_bearhurtmax(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPvpMvp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t hurtmax_;
    uint32_t bearhurtmax_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse& other);
  static const CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse*>(&_CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse& other);
  static const CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse*>(&_CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPvpPlayerStat_ChessProEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_ChessProEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_ChessProEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTPvpPlayerStat_ChessProEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_ChessProEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPvpPlayerStat_ChessProEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPvpPlayerStat_ChessProEntry_DoNotUse& other);
  static const CSDTPvpPlayerStat_ChessProEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPvpPlayerStat_ChessProEntry_DoNotUse*>(&_CSDTPvpPlayerStat_ChessProEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse& other);
  static const CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse*>(&_CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPvpPlayerStat_PveItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_PveItemsEntry_DoNotUse, 
    uint32_t, ::msg::KernelItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTPvpPlayerStat_PveItemsEntry_DoNotUse, 
    uint32_t, ::msg::KernelItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTPvpPlayerStat_PveItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_PveItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTPvpPlayerStat_PveItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTPvpPlayerStat_PveItemsEntry_DoNotUse& other);
  static const CSDTPvpPlayerStat_PveItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTPvpPlayerStat_PveItemsEntry_DoNotUse*>(&_CSDTPvpPlayerStat_PveItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTPvpPlayerStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPvpPlayerStat) */ {
 public:
  inline CSDTPvpPlayerStat() : CSDTPvpPlayerStat(nullptr) {}
  ~CSDTPvpPlayerStat() override;
  explicit PROTOBUF_CONSTEXPR CSDTPvpPlayerStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPvpPlayerStat(const CSDTPvpPlayerStat& from);
  CSDTPvpPlayerStat(CSDTPvpPlayerStat&& from) noexcept
    : CSDTPvpPlayerStat() {
    *this = ::std::move(from);
  }

  inline CSDTPvpPlayerStat& operator=(const CSDTPvpPlayerStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPvpPlayerStat& operator=(CSDTPvpPlayerStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPvpPlayerStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPvpPlayerStat* internal_default_instance() {
    return reinterpret_cast<const CSDTPvpPlayerStat*>(
               &_CSDTPvpPlayerStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CSDTPvpPlayerStat& a, CSDTPvpPlayerStat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPvpPlayerStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPvpPlayerStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPvpPlayerStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPvpPlayerStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPvpPlayerStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPvpPlayerStat& from) {
    CSDTPvpPlayerStat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPvpPlayerStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPvpPlayerStat";
  }
  protected:
  explicit CSDTPvpPlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChessListFieldNumber = 8,
    kCurShowItemsFieldNumber = 23,
    kChessRaceFieldNumber = 24,
    kChessProFieldNumber = 25,
    kShareChessListFieldNumber = 27,
    kFettersFieldNumber = 28,
    kShowChessListFieldNumber = 29,
    kUnlockedChessFieldNumber = 36,
    kPassportTypeIdsFieldNumber = 37,
    kChoseCardGroupFieldNumber = 49,
    kPveItemsFieldNumber = 50,
    kAllChoseCardGroupFieldNumber = 51,
    kIdFieldNumber = 3,
    kUsrNameFieldNumber = 4,
    kCountryFieldNumber = 31,
    kChannelUsrIdFieldNumber = 43,
    kPvpMvpFieldNumber = 30,
    kHeadPicFieldNumber = 5,
    kMMRFieldNumber = 6,
    kChessPlayerFieldNumber = 7,
    kRoundFieldNumber = 9,
    kWinRoundFieldNumber = 10,
    kFailRoundFieldNumber = 11,
    kDrawRoundFieldNumber = 12,
    kKillNumFieldNumber = 13,
    kIsRobotFieldNumber = 1,
    kIsHookFieldNumber = 2,
    kIsDeathFieldNumber = 19,
    kLeaveInAdvanceFieldNumber = 32,
    kDeathNumFieldNumber = 14,
    kSurviveTimeFieldNumber = 15,
    kHpFieldNumber = 16,
    kChessPlayerLvlFieldNumber = 17,
    kAsynFieldNumber = 18,
    kTeamIdFieldNumber = 20,
    kTeamPlayerNumFieldNumber = 21,
    kMoneyFieldNumber = 22,
    kTotalValueFieldNumber = 26,
    kAFKTimeFieldNumber = 33,
    kProvinceFieldNumber = 34,
    kGroupFieldNumber = 35,
    kPlayerIndexFieldNumber = 38,
    kCurrencyIDFieldNumber = 39,
    kSurplusCurrencyFieldNumber = 40,
    kIncomeFieldNumber = 41,
    kChannelTypeFieldNumber = 42,
    kRestrictTypeFieldNumber = 44,
    kPlayerRankFieldNumber = 45,
    kMoneyCostFieldNumber = 46,
    kMoneyIncomeFieldNumber = 47,
    kScoreFieldNumber = 48,
    kExchangeStateFieldNumber = 52,
    kTaskIdFieldNumber = 53,
    kIsTaskCompleteFieldNumber = 54,
    kCurTaskProgressFieldNumber = 55,
    kMaxTaskProgressFieldNumber = 56,
  };
  // repeated uint32 ChessList = 8;
  int chesslist_size() const;
  private:
  int _internal_chesslist_size() const;
  public:
  void clear_chesslist();
  private:
  uint32_t _internal_chesslist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chesslist() const;
  void _internal_add_chesslist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chesslist();
  public:
  uint32_t chesslist(int index) const;
  void set_chesslist(int index, uint32_t value);
  void add_chesslist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chesslist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chesslist();

  // map<uint32, uint32> CurShowItems = 23;
  int curshowitems_size() const;
  private:
  int _internal_curshowitems_size() const;
  public:
  void clear_curshowitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_curshowitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_curshowitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      curshowitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_curshowitems();

  // map<uint32, uint32> ChessRace = 24;
  int chessrace_size() const;
  private:
  int _internal_chessrace_size() const;
  public:
  void clear_chessrace();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_chessrace() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_chessrace();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      chessrace() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_chessrace();

  // map<uint32, uint32> ChessPro = 25;
  int chesspro_size() const;
  private:
  int _internal_chesspro_size() const;
  public:
  void clear_chesspro();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_chesspro() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_chesspro();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      chesspro() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_chesspro();

  // repeated uint32 ShareChessList = 27;
  int sharechesslist_size() const;
  private:
  int _internal_sharechesslist_size() const;
  public:
  void clear_sharechesslist();
  private:
  uint32_t _internal_sharechesslist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_sharechesslist() const;
  void _internal_add_sharechesslist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_sharechesslist();
  public:
  uint32_t sharechesslist(int index) const;
  void set_sharechesslist(int index, uint32_t value);
  void add_sharechesslist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      sharechesslist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_sharechesslist();

  // repeated .msg.CSDTFetters Fetters = 28;
  int fetters_size() const;
  private:
  int _internal_fetters_size() const;
  public:
  void clear_fetters();
  ::msg::CSDTFetters* mutable_fetters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTFetters >*
      mutable_fetters();
  private:
  const ::msg::CSDTFetters& _internal_fetters(int index) const;
  ::msg::CSDTFetters* _internal_add_fetters();
  public:
  const ::msg::CSDTFetters& fetters(int index) const;
  ::msg::CSDTFetters* add_fetters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTFetters >&
      fetters() const;

  // repeated .msg.Contest ShowChessList = 29;
  int showchesslist_size() const;
  private:
  int _internal_showchesslist_size() const;
  public:
  void clear_showchesslist();
  ::msg::Contest* mutable_showchesslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
      mutable_showchesslist();
  private:
  const ::msg::Contest& _internal_showchesslist(int index) const;
  ::msg::Contest* _internal_add_showchesslist();
  public:
  const ::msg::Contest& showchesslist(int index) const;
  ::msg::Contest* add_showchesslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
      showchesslist() const;

  // map<uint32, uint32> UnlockedChess = 36;
  int unlockedchess_size() const;
  private:
  int _internal_unlockedchess_size() const;
  public:
  void clear_unlockedchess();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_unlockedchess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_unlockedchess();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      unlockedchess() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_unlockedchess();

  // repeated uint32 PassportTypeIds = 37;
  int passporttypeids_size() const;
  private:
  int _internal_passporttypeids_size() const;
  public:
  void clear_passporttypeids();
  private:
  uint32_t _internal_passporttypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passporttypeids() const;
  void _internal_add_passporttypeids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passporttypeids();
  public:
  uint32_t passporttypeids(int index) const;
  void set_passporttypeids(int index, uint32_t value);
  void add_passporttypeids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passporttypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passporttypeids();

  // repeated uint32 ChoseCardGroup = 49;
  int chosecardgroup_size() const;
  private:
  int _internal_chosecardgroup_size() const;
  public:
  void clear_chosecardgroup();
  private:
  uint32_t _internal_chosecardgroup(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chosecardgroup() const;
  void _internal_add_chosecardgroup(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chosecardgroup();
  public:
  uint32_t chosecardgroup(int index) const;
  void set_chosecardgroup(int index, uint32_t value);
  void add_chosecardgroup(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chosecardgroup() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chosecardgroup();

  // map<uint32, .msg.KernelItem> PveItems = 50;
  int pveitems_size() const;
  private:
  int _internal_pveitems_size() const;
  public:
  void clear_pveitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >&
      _internal_pveitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >*
      _internal_mutable_pveitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >&
      pveitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >*
      mutable_pveitems();

  // repeated uint32 AllChoseCardGroup = 51;
  int allchosecardgroup_size() const;
  private:
  int _internal_allchosecardgroup_size() const;
  public:
  void clear_allchosecardgroup();
  private:
  uint32_t _internal_allchosecardgroup(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allchosecardgroup() const;
  void _internal_add_allchosecardgroup(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allchosecardgroup();
  public:
  uint32_t allchosecardgroup(int index) const;
  void set_allchosecardgroup(int index, uint32_t value);
  void add_allchosecardgroup(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allchosecardgroup() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allchosecardgroup();

  // string Id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string UsrName = 4;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string Country = 31;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string channelUsrId = 43;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // .msg.CSDTPvpMvp PvpMvp = 30;
  bool has_pvpmvp() const;
  private:
  bool _internal_has_pvpmvp() const;
  public:
  void clear_pvpmvp();
  const ::msg::CSDTPvpMvp& pvpmvp() const;
  PROTOBUF_NODISCARD ::msg::CSDTPvpMvp* release_pvpmvp();
  ::msg::CSDTPvpMvp* mutable_pvpmvp();
  void set_allocated_pvpmvp(::msg::CSDTPvpMvp* pvpmvp);
  private:
  const ::msg::CSDTPvpMvp& _internal_pvpmvp() const;
  ::msg::CSDTPvpMvp* _internal_mutable_pvpmvp();
  public:
  void unsafe_arena_set_allocated_pvpmvp(
      ::msg::CSDTPvpMvp* pvpmvp);
  ::msg::CSDTPvpMvp* unsafe_arena_release_pvpmvp();

  // uint32 HeadPic = 5;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 MMR = 6;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 ChessPlayer = 7;
  void clear_chessplayer();
  uint32_t chessplayer() const;
  void set_chessplayer(uint32_t value);
  private:
  uint32_t _internal_chessplayer() const;
  void _internal_set_chessplayer(uint32_t value);
  public:

  // uint32 Round = 9;
  void clear_round();
  uint32_t round() const;
  void set_round(uint32_t value);
  private:
  uint32_t _internal_round() const;
  void _internal_set_round(uint32_t value);
  public:

  // uint32 WinRound = 10;
  void clear_winround();
  uint32_t winround() const;
  void set_winround(uint32_t value);
  private:
  uint32_t _internal_winround() const;
  void _internal_set_winround(uint32_t value);
  public:

  // uint32 FailRound = 11;
  void clear_failround();
  uint32_t failround() const;
  void set_failround(uint32_t value);
  private:
  uint32_t _internal_failround() const;
  void _internal_set_failround(uint32_t value);
  public:

  // uint32 DrawRound = 12;
  void clear_drawround();
  uint32_t drawround() const;
  void set_drawround(uint32_t value);
  private:
  uint32_t _internal_drawround() const;
  void _internal_set_drawround(uint32_t value);
  public:

  // uint32 KillNum = 13;
  void clear_killnum();
  uint32_t killnum() const;
  void set_killnum(uint32_t value);
  private:
  uint32_t _internal_killnum() const;
  void _internal_set_killnum(uint32_t value);
  public:

  // bool IsRobot = 1;
  void clear_isrobot();
  bool isrobot() const;
  void set_isrobot(bool value);
  private:
  bool _internal_isrobot() const;
  void _internal_set_isrobot(bool value);
  public:

  // bool IsHook = 2;
  void clear_ishook();
  bool ishook() const;
  void set_ishook(bool value);
  private:
  bool _internal_ishook() const;
  void _internal_set_ishook(bool value);
  public:

  // bool IsDeath = 19;
  void clear_isdeath();
  bool isdeath() const;
  void set_isdeath(bool value);
  private:
  bool _internal_isdeath() const;
  void _internal_set_isdeath(bool value);
  public:

  // bool LeaveInAdvance = 32;
  void clear_leaveinadvance();
  bool leaveinadvance() const;
  void set_leaveinadvance(bool value);
  private:
  bool _internal_leaveinadvance() const;
  void _internal_set_leaveinadvance(bool value);
  public:

  // uint32 DeathNum = 14;
  void clear_deathnum();
  uint32_t deathnum() const;
  void set_deathnum(uint32_t value);
  private:
  uint32_t _internal_deathnum() const;
  void _internal_set_deathnum(uint32_t value);
  public:

  // uint32 SurviveTime = 15;
  void clear_survivetime();
  uint32_t survivetime() const;
  void set_survivetime(uint32_t value);
  private:
  uint32_t _internal_survivetime() const;
  void _internal_set_survivetime(uint32_t value);
  public:

  // uint32 Hp = 16;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 ChessPlayerLvl = 17;
  void clear_chessplayerlvl();
  uint32_t chessplayerlvl() const;
  void set_chessplayerlvl(uint32_t value);
  private:
  uint32_t _internal_chessplayerlvl() const;
  void _internal_set_chessplayerlvl(uint32_t value);
  public:

  // uint32 Asyn = 18;
  void clear_asyn();
  uint32_t asyn() const;
  void set_asyn(uint32_t value);
  private:
  uint32_t _internal_asyn() const;
  void _internal_set_asyn(uint32_t value);
  public:

  // uint32 TeamId = 20;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // uint32 TeamPlayerNum = 21;
  void clear_teamplayernum();
  uint32_t teamplayernum() const;
  void set_teamplayernum(uint32_t value);
  private:
  uint32_t _internal_teamplayernum() const;
  void _internal_set_teamplayernum(uint32_t value);
  public:

  // uint32 Money = 22;
  void clear_money();
  uint32_t money() const;
  void set_money(uint32_t value);
  private:
  uint32_t _internal_money() const;
  void _internal_set_money(uint32_t value);
  public:

  // uint32 TotalValue = 26;
  void clear_totalvalue();
  uint32_t totalvalue() const;
  void set_totalvalue(uint32_t value);
  private:
  uint32_t _internal_totalvalue() const;
  void _internal_set_totalvalue(uint32_t value);
  public:

  // uint32 AFKTime = 33;
  void clear_afktime();
  uint32_t afktime() const;
  void set_afktime(uint32_t value);
  private:
  uint32_t _internal_afktime() const;
  void _internal_set_afktime(uint32_t value);
  public:

  // uint32 Province = 34;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // .msg.TEAMGROUP Group = 35;
  void clear_group();
  ::msg::TEAMGROUP group() const;
  void set_group(::msg::TEAMGROUP value);
  private:
  ::msg::TEAMGROUP _internal_group() const;
  void _internal_set_group(::msg::TEAMGROUP value);
  public:

  // uint32 PlayerIndex = 38;
  void clear_playerindex();
  uint32_t playerindex() const;
  void set_playerindex(uint32_t value);
  private:
  uint32_t _internal_playerindex() const;
  void _internal_set_playerindex(uint32_t value);
  public:

  // int32 CurrencyID = 39;
  void clear_currencyid();
  int32_t currencyid() const;
  void set_currencyid(int32_t value);
  private:
  int32_t _internal_currencyid() const;
  void _internal_set_currencyid(int32_t value);
  public:

  // int32 SurplusCurrency = 40;
  void clear_surpluscurrency();
  int32_t surpluscurrency() const;
  void set_surpluscurrency(int32_t value);
  private:
  int32_t _internal_surpluscurrency() const;
  void _internal_set_surpluscurrency(int32_t value);
  public:

  // int32 Income = 41;
  void clear_income();
  int32_t income() const;
  void set_income(int32_t value);
  private:
  int32_t _internal_income() const;
  void _internal_set_income(int32_t value);
  public:

  // .msg.CHANELTYPE ChannelType = 42;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // .msg.UserRestrictType RestrictType = 44;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // uint32 PlayerRank = 45;
  void clear_playerrank();
  uint32_t playerrank() const;
  void set_playerrank(uint32_t value);
  private:
  uint32_t _internal_playerrank() const;
  void _internal_set_playerrank(uint32_t value);
  public:

  // int32 MoneyCost = 46;
  void clear_moneycost();
  int32_t moneycost() const;
  void set_moneycost(int32_t value);
  private:
  int32_t _internal_moneycost() const;
  void _internal_set_moneycost(int32_t value);
  public:

  // int32 MoneyIncome = 47;
  void clear_moneyincome();
  int32_t moneyincome() const;
  void set_moneyincome(int32_t value);
  private:
  int32_t _internal_moneyincome() const;
  void _internal_set_moneyincome(int32_t value);
  public:

  // uint32 Score = 48;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // .msg.EXCHANGESTATE ExchangeState = 52;
  void clear_exchangestate();
  ::msg::EXCHANGESTATE exchangestate() const;
  void set_exchangestate(::msg::EXCHANGESTATE value);
  private:
  ::msg::EXCHANGESTATE _internal_exchangestate() const;
  void _internal_set_exchangestate(::msg::EXCHANGESTATE value);
  public:

  // int32 TaskId = 53;
  void clear_taskid();
  int32_t taskid() const;
  void set_taskid(int32_t value);
  private:
  int32_t _internal_taskid() const;
  void _internal_set_taskid(int32_t value);
  public:

  // bool IsTaskComplete = 54;
  void clear_istaskcomplete();
  bool istaskcomplete() const;
  void set_istaskcomplete(bool value);
  private:
  bool _internal_istaskcomplete() const;
  void _internal_set_istaskcomplete(bool value);
  public:

  // int32 CurTaskProgress = 55;
  void clear_curtaskprogress();
  int32_t curtaskprogress() const;
  void set_curtaskprogress(int32_t value);
  private:
  int32_t _internal_curtaskprogress() const;
  void _internal_set_curtaskprogress(int32_t value);
  public:

  // int32 MaxTaskProgress = 56;
  void clear_maxtaskprogress();
  int32_t maxtaskprogress() const;
  void set_maxtaskprogress(int32_t value);
  private:
  int32_t _internal_maxtaskprogress() const;
  void _internal_set_maxtaskprogress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPvpPlayerStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chesslist_;
    mutable std::atomic<int> _chesslist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> curshowitems_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> chessrace_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPvpPlayerStat_ChessProEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> chesspro_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > sharechesslist_;
    mutable std::atomic<int> _sharechesslist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTFetters > fetters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest > showchesslist_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> unlockedchess_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passporttypeids_;
    mutable std::atomic<int> _passporttypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chosecardgroup_;
    mutable std::atomic<int> _chosecardgroup_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTPvpPlayerStat_PveItemsEntry_DoNotUse,
        uint32_t, ::msg::KernelItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pveitems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allchosecardgroup_;
    mutable std::atomic<int> _allchosecardgroup_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::msg::CSDTPvpMvp* pvpmvp_;
    uint32_t headpic_;
    uint32_t mmr_;
    uint32_t chessplayer_;
    uint32_t round_;
    uint32_t winround_;
    uint32_t failround_;
    uint32_t drawround_;
    uint32_t killnum_;
    bool isrobot_;
    bool ishook_;
    bool isdeath_;
    bool leaveinadvance_;
    uint32_t deathnum_;
    uint32_t survivetime_;
    uint32_t hp_;
    uint32_t chessplayerlvl_;
    uint32_t asyn_;
    uint32_t teamid_;
    uint32_t teamplayernum_;
    uint32_t money_;
    uint32_t totalvalue_;
    uint32_t afktime_;
    uint32_t province_;
    int group_;
    uint32_t playerindex_;
    int32_t currencyid_;
    int32_t surpluscurrency_;
    int32_t income_;
    int channeltype_;
    int restricttype_;
    uint32_t playerrank_;
    int32_t moneycost_;
    int32_t moneyincome_;
    uint32_t score_;
    int exchangestate_;
    int32_t taskid_;
    bool istaskcomplete_;
    int32_t curtaskprogress_;
    int32_t maxtaskprogress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KernelItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.KernelItem) */ {
 public:
  inline KernelItem() : KernelItem(nullptr) {}
  ~KernelItem() override;
  explicit PROTOBUF_CONSTEXPR KernelItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KernelItem(const KernelItem& from);
  KernelItem(KernelItem&& from) noexcept
    : KernelItem() {
    *this = ::std::move(from);
  }

  inline KernelItem& operator=(const KernelItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelItem& operator=(KernelItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KernelItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const KernelItem* internal_default_instance() {
    return reinterpret_cast<const KernelItem*>(
               &_KernelItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(KernelItem& a, KernelItem& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KernelItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KernelItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KernelItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KernelItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KernelItem& from) {
    KernelItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KernelItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.KernelItem";
  }
  protected:
  explicit KernelItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.KernelItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTFetters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTFetters) */ {
 public:
  inline CSDTFetters() : CSDTFetters(nullptr) {}
  ~CSDTFetters() override;
  explicit PROTOBUF_CONSTEXPR CSDTFetters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTFetters(const CSDTFetters& from);
  CSDTFetters(CSDTFetters&& from) noexcept
    : CSDTFetters() {
    *this = ::std::move(from);
  }

  inline CSDTFetters& operator=(const CSDTFetters& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTFetters& operator=(CSDTFetters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTFetters& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTFetters* internal_default_instance() {
    return reinterpret_cast<const CSDTFetters*>(
               &_CSDTFetters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CSDTFetters& a, CSDTFetters& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTFetters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTFetters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTFetters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTFetters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTFetters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTFetters& from) {
    CSDTFetters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTFetters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTFetters";
  }
  protected:
  explicit CSDTFetters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResIdFieldNumber = 1,
    kEffectNumFieldNumber = 2,
    kMaxEffectNumFieldNumber = 3,
  };
  // uint32 ResId = 1;
  void clear_resid();
  uint32_t resid() const;
  void set_resid(uint32_t value);
  private:
  uint32_t _internal_resid() const;
  void _internal_set_resid(uint32_t value);
  public:

  // uint32 EffectNum = 2;
  void clear_effectnum();
  uint32_t effectnum() const;
  void set_effectnum(uint32_t value);
  private:
  uint32_t _internal_effectnum() const;
  void _internal_set_effectnum(uint32_t value);
  public:

  // uint32 MaxEffectNum = 3;
  void clear_maxeffectnum();
  uint32_t maxeffectnum() const;
  void set_maxeffectnum(uint32_t value);
  private:
  uint32_t _internal_maxeffectnum() const;
  void _internal_set_maxeffectnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTFetters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t resid_;
    uint32_t effectnum_;
    uint32_t maxeffectnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerFinish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerFinish) */ {
 public:
  inline CSDTPlayerFinish() : CSDTPlayerFinish(nullptr) {}
  ~CSDTPlayerFinish() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerFinish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerFinish(const CSDTPlayerFinish& from);
  CSDTPlayerFinish(CSDTPlayerFinish&& from) noexcept
    : CSDTPlayerFinish() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerFinish& operator=(const CSDTPlayerFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerFinish& operator=(CSDTPlayerFinish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerFinish& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerFinish* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerFinish*>(
               &_CSDTPlayerFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CSDTPlayerFinish& a, CSDTPlayerFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerFinish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerFinish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerFinish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerFinish& from) {
    CSDTPlayerFinish::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerFinish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerFinish";
  }
  protected:
  explicit CSDTPlayerFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampResultFieldNumber = 4,
    kStatFieldNumber = 5,
    kPlayerIndexFieldNumber = 1,
    kDeathIndexFieldNumber = 2,
    kFrameIndexFieldNumber = 3,
  };
  // .msg.CSDTPvpCampResult CampResult = 4;
  bool has_campresult() const;
  private:
  bool _internal_has_campresult() const;
  public:
  void clear_campresult();
  const ::msg::CSDTPvpCampResult& campresult() const;
  PROTOBUF_NODISCARD ::msg::CSDTPvpCampResult* release_campresult();
  ::msg::CSDTPvpCampResult* mutable_campresult();
  void set_allocated_campresult(::msg::CSDTPvpCampResult* campresult);
  private:
  const ::msg::CSDTPvpCampResult& _internal_campresult() const;
  ::msg::CSDTPvpCampResult* _internal_mutable_campresult();
  public:
  void unsafe_arena_set_allocated_campresult(
      ::msg::CSDTPvpCampResult* campresult);
  ::msg::CSDTPvpCampResult* unsafe_arena_release_campresult();

  // .msg.CSDTPvpStat Stat = 5;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::msg::CSDTPvpStat& stat() const;
  PROTOBUF_NODISCARD ::msg::CSDTPvpStat* release_stat();
  ::msg::CSDTPvpStat* mutable_stat();
  void set_allocated_stat(::msg::CSDTPvpStat* stat);
  private:
  const ::msg::CSDTPvpStat& _internal_stat() const;
  ::msg::CSDTPvpStat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::msg::CSDTPvpStat* stat);
  ::msg::CSDTPvpStat* unsafe_arena_release_stat();

  // uint32 PlayerIndex = 1;
  void clear_playerindex();
  uint32_t playerindex() const;
  void set_playerindex(uint32_t value);
  private:
  uint32_t _internal_playerindex() const;
  void _internal_set_playerindex(uint32_t value);
  public:

  // uint32 DeathIndex = 2;
  void clear_deathindex();
  uint32_t deathindex() const;
  void set_deathindex(uint32_t value);
  private:
  uint32_t _internal_deathindex() const;
  void _internal_set_deathindex(uint32_t value);
  public:

  // uint32 FrameIndex = 3;
  void clear_frameindex();
  uint32_t frameindex() const;
  void set_frameindex(uint32_t value);
  private:
  uint32_t _internal_frameindex() const;
  void _internal_set_frameindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::CSDTPvpCampResult* campresult_;
    ::msg::CSDTPvpStat* stat_;
    uint32_t playerindex_;
    uint32_t deathindex_;
    uint32_t frameindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMarqueeItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMarqueeItem) */ {
 public:
  inline CSDTMarqueeItem() : CSDTMarqueeItem(nullptr) {}
  ~CSDTMarqueeItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTMarqueeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMarqueeItem(const CSDTMarqueeItem& from);
  CSDTMarqueeItem(CSDTMarqueeItem&& from) noexcept
    : CSDTMarqueeItem() {
    *this = ::std::move(from);
  }

  inline CSDTMarqueeItem& operator=(const CSDTMarqueeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMarqueeItem& operator=(CSDTMarqueeItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMarqueeItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMarqueeItem* internal_default_instance() {
    return reinterpret_cast<const CSDTMarqueeItem*>(
               &_CSDTMarqueeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CSDTMarqueeItem& a, CSDTMarqueeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMarqueeItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMarqueeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMarqueeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMarqueeItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMarqueeItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMarqueeItem& from) {
    CSDTMarqueeItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMarqueeItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMarqueeItem";
  }
  protected:
  explicit CSDTMarqueeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kIdFieldNumber = 1,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kFrequencyFieldNumber = 5,
    kFlagFieldNumber = 6,
  };
  // string Content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 Id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 StartTime = 3;
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // int64 EndTime = 4;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // uint32 Frequency = 5;
  void clear_frequency();
  uint32_t frequency() const;
  void set_frequency(uint32_t value);
  private:
  uint32_t _internal_frequency() const;
  void _internal_set_frequency(uint32_t value);
  public:

  // uint32 Flag = 6;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMarqueeItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int64_t id_;
    int64_t starttime_;
    int64_t endtime_;
    uint32_t frequency_;
    uint32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMarquee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMarquee) */ {
 public:
  inline CSDTMarquee() : CSDTMarquee(nullptr) {}
  ~CSDTMarquee() override;
  explicit PROTOBUF_CONSTEXPR CSDTMarquee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMarquee(const CSDTMarquee& from);
  CSDTMarquee(CSDTMarquee&& from) noexcept
    : CSDTMarquee() {
    *this = ::std::move(from);
  }

  inline CSDTMarquee& operator=(const CSDTMarquee& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMarquee& operator=(CSDTMarquee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMarquee& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMarquee* internal_default_instance() {
    return reinterpret_cast<const CSDTMarquee*>(
               &_CSDTMarquee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CSDTMarquee& a, CSDTMarquee& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMarquee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMarquee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMarquee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMarquee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMarquee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMarquee& from) {
    CSDTMarquee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMarquee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMarquee";
  }
  protected:
  explicit CSDTMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .msg.CSDTMarqueeItem Items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::msg::CSDTMarqueeItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMarqueeItem >*
      mutable_items();
  private:
  const ::msg::CSDTMarqueeItem& _internal_items(int index) const;
  ::msg::CSDTMarqueeItem* _internal_add_items();
  public:
  const ::msg::CSDTMarqueeItem& items(int index) const;
  ::msg::CSDTMarqueeItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMarqueeItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTMarquee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMarqueeItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Cond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Cond) */ {
 public:
  inline Cond() : Cond(nullptr) {}
  ~Cond() override;
  explicit PROTOBUF_CONSTEXPR Cond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cond(const Cond& from);
  Cond(Cond&& from) noexcept
    : Cond() {
    *this = ::std::move(from);
  }

  inline Cond& operator=(const Cond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cond& operator=(Cond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cond* internal_default_instance() {
    return reinterpret_cast<const Cond*>(
               &_Cond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(Cond& a, Cond& b) {
    a.Swap(&b);
  }
  inline void Swap(Cond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cond& from) {
    Cond::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Cond";
  }
  protected:
  explicit Cond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 2,
    kModeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated int32 Para = 2;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  int32_t _internal_para(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_para() const;
  void _internal_add_para(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_para();
  public:
  int32_t para(int index) const;
  void set_para(int index, int32_t value);
  void add_para(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_para();

  // string Mode = 3;
  void clear_mode();
  const std::string& mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // .msg.CONDTYPE Type = 1;
  void clear_type();
  ::msg::CONDTYPE type() const;
  void set_type(::msg::CONDTYPE value);
  private:
  ::msg::CONDTYPE _internal_type() const;
  void _internal_set_type(::msg::CONDTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Cond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > para_;
    mutable std::atomic<int> _para_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTChessPlayerEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTChessPlayerEquip) */ {
 public:
  inline CSDTChessPlayerEquip() : CSDTChessPlayerEquip(nullptr) {}
  ~CSDTChessPlayerEquip() override;
  explicit PROTOBUF_CONSTEXPR CSDTChessPlayerEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTChessPlayerEquip(const CSDTChessPlayerEquip& from);
  CSDTChessPlayerEquip(CSDTChessPlayerEquip&& from) noexcept
    : CSDTChessPlayerEquip() {
    *this = ::std::move(from);
  }

  inline CSDTChessPlayerEquip& operator=(const CSDTChessPlayerEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTChessPlayerEquip& operator=(CSDTChessPlayerEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTChessPlayerEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTChessPlayerEquip* internal_default_instance() {
    return reinterpret_cast<const CSDTChessPlayerEquip*>(
               &_CSDTChessPlayerEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CSDTChessPlayerEquip& a, CSDTChessPlayerEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTChessPlayerEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTChessPlayerEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTChessPlayerEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTChessPlayerEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTChessPlayerEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTChessPlayerEquip& from) {
    CSDTChessPlayerEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTChessPlayerEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTChessPlayerEquip";
  }
  protected:
  explicit CSDTChessPlayerEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string InstanceId = 2;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTChessPlayerEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTChessPlayer_EquipsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTChessPlayer_EquipsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTChessPlayer_EquipsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTChessPlayer_EquipsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTChessPlayer_EquipsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTChessPlayer_EquipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTChessPlayer_EquipsEntry_DoNotUse& other);
  static const CSDTChessPlayer_EquipsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTChessPlayer_EquipsEntry_DoNotUse*>(&_CSDTChessPlayer_EquipsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTChessPlayer_EquipEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTChessPlayer_EquipEntry_DoNotUse, 
    uint32_t, ::msg::CSDTChessPlayerEquip,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTChessPlayer_EquipEntry_DoNotUse, 
    uint32_t, ::msg::CSDTChessPlayerEquip,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTChessPlayer_EquipEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTChessPlayer_EquipEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTChessPlayer_EquipEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTChessPlayer_EquipEntry_DoNotUse& other);
  static const CSDTChessPlayer_EquipEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTChessPlayer_EquipEntry_DoNotUse*>(&_CSDTChessPlayer_EquipEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTChessPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTChessPlayer) */ {
 public:
  inline CSDTChessPlayer() : CSDTChessPlayer(nullptr) {}
  ~CSDTChessPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTChessPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTChessPlayer(const CSDTChessPlayer& from);
  CSDTChessPlayer(CSDTChessPlayer&& from) noexcept
    : CSDTChessPlayer() {
    *this = ::std::move(from);
  }

  inline CSDTChessPlayer& operator=(const CSDTChessPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTChessPlayer& operator=(CSDTChessPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTChessPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTChessPlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTChessPlayer*>(
               &_CSDTChessPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CSDTChessPlayer& a, CSDTChessPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTChessPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTChessPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTChessPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTChessPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTChessPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTChessPlayer& from) {
    CSDTChessPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTChessPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTChessPlayer";
  }
  protected:
  explicit CSDTChessPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEquipsFieldNumber = 10,
    kEquipFieldNumber = 11,
    kInstanceIdFieldNumber = 12,
    kIdFieldNumber = 1,
    kSkinFieldNumber = 2,
    kActionFieldNumber = 3,
    kPictureFieldNumber = 4,
    kVoiceFieldNumber = 5,
  };
  // map<uint32, uint32> Equips = 10;
  int equips_size() const;
  private:
  int _internal_equips_size() const;
  public:
  void clear_equips();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_equips() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_equips();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      equips() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_equips();

  // map<uint32, .msg.CSDTChessPlayerEquip> Equip = 11;
  int equip_size() const;
  private:
  int _internal_equip_size() const;
  public:
  void clear_equip();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >&
      _internal_equip() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >*
      _internal_mutable_equip();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >&
      equip() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >*
      mutable_equip();

  // string InstanceId = 12;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Skin = 2;
  void clear_skin();
  uint32_t skin() const;
  void set_skin(uint32_t value);
  private:
  uint32_t _internal_skin() const;
  void _internal_set_skin(uint32_t value);
  public:

  // uint32 Action = 3;
  void clear_action();
  uint32_t action() const;
  void set_action(uint32_t value);
  private:
  uint32_t _internal_action() const;
  void _internal_set_action(uint32_t value);
  public:

  // uint32 Picture = 4;
  void clear_picture();
  uint32_t picture() const;
  void set_picture(uint32_t value);
  private:
  uint32_t _internal_picture() const;
  void _internal_set_picture(uint32_t value);
  public:

  // uint32 Voice = 5;
  void clear_voice();
  uint32_t voice() const;
  void set_voice(uint32_t value);
  private:
  uint32_t _internal_voice() const;
  void _internal_set_voice(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTChessPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTChessPlayer_EquipsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> equips_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTChessPlayer_EquipEntry_DoNotUse,
        uint32_t, ::msg::CSDTChessPlayerEquip,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> equip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    uint32_t id_;
    uint32_t skin_;
    uint32_t action_;
    uint32_t picture_;
    uint32_t voice_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTelBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTelBook) */ {
 public:
  inline CSDTTelBook() : CSDTTelBook(nullptr) {}
  ~CSDTTelBook() override;
  explicit PROTOBUF_CONSTEXPR CSDTTelBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTelBook(const CSDTTelBook& from);
  CSDTTelBook(CSDTTelBook&& from) noexcept
    : CSDTTelBook() {
    *this = ::std::move(from);
  }

  inline CSDTTelBook& operator=(const CSDTTelBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTelBook& operator=(CSDTTelBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTelBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTelBook* internal_default_instance() {
    return reinterpret_cast<const CSDTTelBook*>(
               &_CSDTTelBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CSDTTelBook& a, CSDTTelBook& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTelBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTelBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTelBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTelBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTelBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTelBook& from) {
    CSDTTelBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTelBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTelBook";
  }
  protected:
  explicit CSDTTelBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTelFieldNumber = 2,
    kNameFieldNumber = 3,
    kMmrFieldNumber = 4,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Tel = 2;
  void clear_tel();
  const std::string& tel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tel();
  PROTOBUF_NODISCARD std::string* release_tel();
  void set_allocated_tel(std::string* tel);
  private:
  const std::string& _internal_tel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tel(const std::string& value);
  std::string* _internal_mutable_tel();
  public:

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Mmr = 4;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTTelBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t mmr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class LanguageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.LanguageData) */ {
 public:
  inline LanguageData() : LanguageData(nullptr) {}
  ~LanguageData() override;
  explicit PROTOBUF_CONSTEXPR LanguageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LanguageData(const LanguageData& from);
  LanguageData(LanguageData&& from) noexcept
    : LanguageData() {
    *this = ::std::move(from);
  }

  inline LanguageData& operator=(const LanguageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanguageData& operator=(LanguageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LanguageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LanguageData* internal_default_instance() {
    return reinterpret_cast<const LanguageData*>(
               &_LanguageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(LanguageData& a, LanguageData& b) {
    a.Swap(&b);
  }
  inline void Swap(LanguageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LanguageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LanguageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LanguageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LanguageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LanguageData& from) {
    LanguageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanguageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.LanguageData";
  }
  protected:
  explicit LanguageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string Languages = 2;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  const std::string& languages(int index) const;
  std::string* mutable_languages(int index);
  void set_languages(int index, const std::string& value);
  void set_languages(int index, std::string&& value);
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  std::string* add_languages();
  void add_languages(const std::string& value);
  void add_languages(std::string&& value);
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_languages();
  private:
  const std::string& _internal_languages(int index) const;
  std::string* _internal_add_languages();
  public:

  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:msg.LanguageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> languages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GMLanguageData_LanguagesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GMLanguageData_LanguagesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GMLanguageData_LanguagesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GMLanguageData_LanguagesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GMLanguageData_LanguagesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GMLanguageData_LanguagesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GMLanguageData_LanguagesEntry_DoNotUse& other);
  static const GMLanguageData_LanguagesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GMLanguageData_LanguagesEntry_DoNotUse*>(&_GMLanguageData_LanguagesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.GMLanguageData.LanguagesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.GMLanguageData.LanguagesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class GMLanguageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GMLanguageData) */ {
 public:
  inline GMLanguageData() : GMLanguageData(nullptr) {}
  ~GMLanguageData() override;
  explicit PROTOBUF_CONSTEXPR GMLanguageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMLanguageData(const GMLanguageData& from);
  GMLanguageData(GMLanguageData&& from) noexcept
    : GMLanguageData() {
    *this = ::std::move(from);
  }

  inline GMLanguageData& operator=(const GMLanguageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMLanguageData& operator=(GMLanguageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMLanguageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMLanguageData* internal_default_instance() {
    return reinterpret_cast<const GMLanguageData*>(
               &_GMLanguageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(GMLanguageData& a, GMLanguageData& b) {
    a.Swap(&b);
  }
  inline void Swap(GMLanguageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMLanguageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMLanguageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMLanguageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMLanguageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GMLanguageData& from) {
    GMLanguageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMLanguageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GMLanguageData";
  }
  protected:
  explicit GMLanguageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // map<string, string> Languages = 2;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_languages() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_languages();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      languages() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_languages();

  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:msg.GMLanguageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GMLanguageData_LanguagesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> languages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CommonKVString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CommonKVString) */ {
 public:
  inline CommonKVString() : CommonKVString(nullptr) {}
  ~CommonKVString() override;
  explicit PROTOBUF_CONSTEXPR CommonKVString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonKVString(const CommonKVString& from);
  CommonKVString(CommonKVString&& from) noexcept
    : CommonKVString() {
    *this = ::std::move(from);
  }

  inline CommonKVString& operator=(const CommonKVString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonKVString& operator=(CommonKVString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonKVString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonKVString* internal_default_instance() {
    return reinterpret_cast<const CommonKVString*>(
               &_CommonKVString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CommonKVString& a, CommonKVString& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonKVString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonKVString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonKVString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonKVString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonKVString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonKVString& from) {
    CommonKVString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonKVString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CommonKVString";
  }
  protected:
  explicit CommonKVString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:msg.CommonKVString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CDNLanguageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CDNLanguageData) */ {
 public:
  inline CDNLanguageData() : CDNLanguageData(nullptr) {}
  ~CDNLanguageData() override;
  explicit PROTOBUF_CONSTEXPR CDNLanguageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDNLanguageData(const CDNLanguageData& from);
  CDNLanguageData(CDNLanguageData&& from) noexcept
    : CDNLanguageData() {
    *this = ::std::move(from);
  }

  inline CDNLanguageData& operator=(const CDNLanguageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDNLanguageData& operator=(CDNLanguageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDNLanguageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDNLanguageData* internal_default_instance() {
    return reinterpret_cast<const CDNLanguageData*>(
               &_CDNLanguageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CDNLanguageData& a, CDNLanguageData& b) {
    a.Swap(&b);
  }
  inline void Swap(CDNLanguageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDNLanguageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDNLanguageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDNLanguageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDNLanguageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDNLanguageData& from) {
    CDNLanguageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDNLanguageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CDNLanguageData";
  }
  protected:
  explicit CDNLanguageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguagesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .msg.CommonKVString Languages = 2;
  int languages_size() const;
  private:
  int _internal_languages_size() const;
  public:
  void clear_languages();
  ::msg::CommonKVString* mutable_languages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CommonKVString >*
      mutable_languages();
  private:
  const ::msg::CommonKVString& _internal_languages(int index) const;
  ::msg::CommonKVString* _internal_add_languages();
  public:
  const ::msg::CommonKVString& languages(int index) const;
  ::msg::CommonKVString* add_languages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CommonKVString >&
      languages() const;

  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:msg.CDNLanguageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CommonKVString > languages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTSeason final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTSeason) */ {
 public:
  inline CSDTSeason() : CSDTSeason(nullptr) {}
  ~CSDTSeason() override;
  explicit PROTOBUF_CONSTEXPR CSDTSeason(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTSeason(const CSDTSeason& from);
  CSDTSeason(CSDTSeason&& from) noexcept
    : CSDTSeason() {
    *this = ::std::move(from);
  }

  inline CSDTSeason& operator=(const CSDTSeason& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTSeason& operator=(CSDTSeason&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTSeason& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTSeason* internal_default_instance() {
    return reinterpret_cast<const CSDTSeason*>(
               &_CSDTSeason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(CSDTSeason& a, CSDTSeason& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTSeason* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTSeason* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTSeason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTSeason>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTSeason& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTSeason& from) {
    CSDTSeason::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTSeason* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTSeason";
  }
  protected:
  explicit CSDTSeason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurRankSeasonFieldNumber = 1,
    kSeasonAwardedFieldNumber = 2,
    kSeasonTaskProgressFieldNumber = 3,
  };
  // uint32 CurRankSeason = 1;
  void clear_currankseason();
  uint32_t currankseason() const;
  void set_currankseason(uint32_t value);
  private:
  uint32_t _internal_currankseason() const;
  void _internal_set_currankseason(uint32_t value);
  public:

  // bool SeasonAwarded = 2;
  void clear_seasonawarded();
  bool seasonawarded() const;
  void set_seasonawarded(bool value);
  private:
  bool _internal_seasonawarded() const;
  void _internal_set_seasonawarded(bool value);
  public:

  // uint32 SeasonTaskProgress = 3;
  void clear_seasontaskprogress();
  uint32_t seasontaskprogress() const;
  void set_seasontaskprogress(uint32_t value);
  private:
  uint32_t _internal_seasontaskprogress() const;
  void _internal_set_seasontaskprogress(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTSeason)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t currankseason_;
    bool seasonawarded_;
    uint32_t seasontaskprogress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActivity_GroupsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivity_GroupsEntry_DoNotUse, 
    uint32_t, ::msg::CSDTActivityGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivity_GroupsEntry_DoNotUse, 
    uint32_t, ::msg::CSDTActivityGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTActivity_GroupsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActivity_GroupsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActivity_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActivity_GroupsEntry_DoNotUse& other);
  static const CSDTActivity_GroupsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActivity_GroupsEntry_DoNotUse*>(&_CSDTActivity_GroupsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActivity) */ {
 public:
  inline CSDTActivity() : CSDTActivity(nullptr) {}
  ~CSDTActivity() override;
  explicit PROTOBUF_CONSTEXPR CSDTActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActivity(const CSDTActivity& from);
  CSDTActivity(CSDTActivity&& from) noexcept
    : CSDTActivity() {
    *this = ::std::move(from);
  }

  inline CSDTActivity& operator=(const CSDTActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActivity& operator=(CSDTActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActivity* internal_default_instance() {
    return reinterpret_cast<const CSDTActivity*>(
               &_CSDTActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(CSDTActivity& a, CSDTActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActivity& from) {
    CSDTActivity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActivity";
  }
  protected:
  explicit CSDTActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kQuestionnairesFieldNumber = 2,
    kUseExcelConfFieldNumber = 3,
  };
  // map<uint32, .msg.CSDTActivityGroup> Groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >&
      _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >*
      _internal_mutable_groups();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >*
      mutable_groups();

  // repeated uint32 Questionnaires = 2;
  int questionnaires_size() const;
  private:
  int _internal_questionnaires_size() const;
  public:
  void clear_questionnaires();
  private:
  uint32_t _internal_questionnaires(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_questionnaires() const;
  void _internal_add_questionnaires(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_questionnaires();
  public:
  uint32_t questionnaires(int index) const;
  void set_questionnaires(int index, uint32_t value);
  void add_questionnaires(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      questionnaires() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_questionnaires();

  // bool UseExcelConf = 3;
  void clear_useexcelconf();
  bool useexcelconf() const;
  void set_useexcelconf(bool value);
  private:
  bool _internal_useexcelconf() const;
  void _internal_set_useexcelconf(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActivity_GroupsEntry_DoNotUse,
        uint32_t, ::msg::CSDTActivityGroup,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> groups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > questionnaires_;
    mutable std::atomic<int> _questionnaires_cached_byte_size_;
    bool useexcelconf_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActivityGroup_ActivitiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityGroup_ActivitiesEntry_DoNotUse, 
    uint32_t, ::msg::CSDTActivityDetail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityGroup_ActivitiesEntry_DoNotUse, 
    uint32_t, ::msg::CSDTActivityDetail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTActivityGroup_ActivitiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActivityGroup_ActivitiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActivityGroup_ActivitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActivityGroup_ActivitiesEntry_DoNotUse& other);
  static const CSDTActivityGroup_ActivitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActivityGroup_ActivitiesEntry_DoNotUse*>(&_CSDTActivityGroup_ActivitiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActivityGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActivityGroup) */ {
 public:
  inline CSDTActivityGroup() : CSDTActivityGroup(nullptr) {}
  ~CSDTActivityGroup() override;
  explicit PROTOBUF_CONSTEXPR CSDTActivityGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActivityGroup(const CSDTActivityGroup& from);
  CSDTActivityGroup(CSDTActivityGroup&& from) noexcept
    : CSDTActivityGroup() {
    *this = ::std::move(from);
  }

  inline CSDTActivityGroup& operator=(const CSDTActivityGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActivityGroup& operator=(CSDTActivityGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActivityGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActivityGroup* internal_default_instance() {
    return reinterpret_cast<const CSDTActivityGroup*>(
               &_CSDTActivityGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(CSDTActivityGroup& a, CSDTActivityGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActivityGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActivityGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActivityGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActivityGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActivityGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActivityGroup& from) {
    CSDTActivityGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActivityGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActivityGroup";
  }
  protected:
  explicit CSDTActivityGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 1,
    kMd5SumFieldNumber = 2,
    kRecordFieldNumber = 4,
    kBeginTimeFieldNumber = 3,
    kLoginDaysFieldNumber = 5,
    kChestLevelFieldNumber = 6,
    kEndTimeFieldNumber = 7,
  };
  // map<uint32, .msg.CSDTActivityDetail> Activities = 1;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >&
      _internal_activities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >*
      _internal_mutable_activities();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >&
      activities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >*
      mutable_activities();

  // string Md5Sum = 2;
  void clear_md5sum();
  const std::string& md5sum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5sum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5sum();
  PROTOBUF_NODISCARD std::string* release_md5sum();
  void set_allocated_md5sum(std::string* md5sum);
  private:
  const std::string& _internal_md5sum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5sum(const std::string& value);
  std::string* _internal_mutable_md5sum();
  public:

  // .msg.CSDTActivityRecord Record = 4;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::msg::CSDTActivityRecord& record() const;
  PROTOBUF_NODISCARD ::msg::CSDTActivityRecord* release_record();
  ::msg::CSDTActivityRecord* mutable_record();
  void set_allocated_record(::msg::CSDTActivityRecord* record);
  private:
  const ::msg::CSDTActivityRecord& _internal_record() const;
  ::msg::CSDTActivityRecord* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::msg::CSDTActivityRecord* record);
  ::msg::CSDTActivityRecord* unsafe_arena_release_record();

  // int64 BeginTime = 3;
  void clear_begintime();
  int64_t begintime() const;
  void set_begintime(int64_t value);
  private:
  int64_t _internal_begintime() const;
  void _internal_set_begintime(int64_t value);
  public:

  // uint32 LoginDays = 5;
  void clear_logindays();
  uint32_t logindays() const;
  void set_logindays(uint32_t value);
  private:
  uint32_t _internal_logindays() const;
  void _internal_set_logindays(uint32_t value);
  public:

  // int32 ChestLevel = 6;
  void clear_chestlevel();
  int32_t chestlevel() const;
  void set_chestlevel(int32_t value);
  private:
  int32_t _internal_chestlevel() const;
  void _internal_set_chestlevel(int32_t value);
  public:

  // int64 EndTime = 7;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActivityGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActivityGroup_ActivitiesEntry_DoNotUse,
        uint32_t, ::msg::CSDTActivityDetail,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> activities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5sum_;
    ::msg::CSDTActivityRecord* record_;
    int64_t begintime_;
    uint32_t logindays_;
    int32_t chestlevel_;
    int64_t endtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActivityDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActivityDetail) */ {
 public:
  inline CSDTActivityDetail() : CSDTActivityDetail(nullptr) {}
  ~CSDTActivityDetail() override;
  explicit PROTOBUF_CONSTEXPR CSDTActivityDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActivityDetail(const CSDTActivityDetail& from);
  CSDTActivityDetail(CSDTActivityDetail&& from) noexcept
    : CSDTActivityDetail() {
    *this = ::std::move(from);
  }

  inline CSDTActivityDetail& operator=(const CSDTActivityDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActivityDetail& operator=(CSDTActivityDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActivityDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActivityDetail* internal_default_instance() {
    return reinterpret_cast<const CSDTActivityDetail*>(
               &_CSDTActivityDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(CSDTActivityDetail& a, CSDTActivityDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActivityDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActivityDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActivityDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActivityDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActivityDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActivityDetail& from) {
    CSDTActivityDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActivityDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActivityDetail";
  }
  protected:
  explicit CSDTActivityDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5SumFieldNumber = 4,
    kIdFieldNumber = 1,
    kProgressFieldNumber = 2,
    kGetAwardFieldNumber = 3,
    kUnlockFieldNumber = 5,
  };
  // string Md5Sum = 4;
  void clear_md5sum();
  const std::string& md5sum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5sum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5sum();
  PROTOBUF_NODISCARD std::string* release_md5sum();
  void set_allocated_md5sum(std::string* md5sum);
  private:
  const std::string& _internal_md5sum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5sum(const std::string& value);
  std::string* _internal_mutable_md5sum();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Progress = 2;
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // bool GetAward = 3;
  void clear_getaward();
  bool getaward() const;
  void set_getaward(bool value);
  private:
  bool _internal_getaward() const;
  void _internal_set_getaward(bool value);
  public:

  // bool Unlock = 5;
  void clear_unlock();
  bool unlock() const;
  void set_unlock(bool value);
  private:
  bool _internal_unlock() const;
  void _internal_set_unlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActivityDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5sum_;
    uint32_t id_;
    uint32_t progress_;
    bool getaward_;
    bool unlock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActivityRecord_ProcessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityRecord_ProcessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityRecord_ProcessEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTActivityRecord_ProcessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActivityRecord_ProcessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActivityRecord_ProcessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActivityRecord_ProcessEntry_DoNotUse& other);
  static const CSDTActivityRecord_ProcessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActivityRecord_ProcessEntry_DoNotUse*>(&_CSDTActivityRecord_ProcessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActivityRecord_RewardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityRecord_RewardEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityRecord_RewardEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTActivityRecord_RewardEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActivityRecord_RewardEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActivityRecord_RewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActivityRecord_RewardEntry_DoNotUse& other);
  static const CSDTActivityRecord_RewardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActivityRecord_RewardEntry_DoNotUse*>(&_CSDTActivityRecord_RewardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActivityRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActivityRecord) */ {
 public:
  inline CSDTActivityRecord() : CSDTActivityRecord(nullptr) {}
  ~CSDTActivityRecord() override;
  explicit PROTOBUF_CONSTEXPR CSDTActivityRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActivityRecord(const CSDTActivityRecord& from);
  CSDTActivityRecord(CSDTActivityRecord&& from) noexcept
    : CSDTActivityRecord() {
    *this = ::std::move(from);
  }

  inline CSDTActivityRecord& operator=(const CSDTActivityRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActivityRecord& operator=(CSDTActivityRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActivityRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActivityRecord* internal_default_instance() {
    return reinterpret_cast<const CSDTActivityRecord*>(
               &_CSDTActivityRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(CSDTActivityRecord& a, CSDTActivityRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActivityRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActivityRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActivityRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActivityRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActivityRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActivityRecord& from) {
    CSDTActivityRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActivityRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActivityRecord";
  }
  protected:
  explicit CSDTActivityRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
    kRewardFieldNumber = 2,
    kParamsFieldNumber = 3,
  };
  // map<uint32, uint32> Process = 1;
  int process_size() const;
  private:
  int _internal_process_size() const;
  public:
  void clear_process();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_process() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_process();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      process() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_process();

  // map<uint32, uint32> Reward = 2;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_reward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_reward();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      reward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_reward();

  // bytes Params = 3;
  void clear_params();
  const std::string& params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_params();
  PROTOBUF_NODISCARD std::string* release_params();
  void set_allocated_params(std::string* params);
  private:
  const std::string& _internal_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params(const std::string& value);
  std::string* _internal_mutable_params();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActivityRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActivityRecord_ProcessEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> process_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActivityRecord_RewardEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> reward_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRecruitData_IsRecruitedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRecruitData_IsRecruitedEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTRecruitData_IsRecruitedEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  CSDTRecruitData_IsRecruitedEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTRecruitData_IsRecruitedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTRecruitData_IsRecruitedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTRecruitData_IsRecruitedEntry_DoNotUse& other);
  static const CSDTRecruitData_IsRecruitedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTRecruitData_IsRecruitedEntry_DoNotUse*>(&_CSDTRecruitData_IsRecruitedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTRecruitData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRecruitData) */ {
 public:
  inline CSDTRecruitData() : CSDTRecruitData(nullptr) {}
  ~CSDTRecruitData() override;
  explicit PROTOBUF_CONSTEXPR CSDTRecruitData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRecruitData(const CSDTRecruitData& from);
  CSDTRecruitData(CSDTRecruitData&& from) noexcept
    : CSDTRecruitData() {
    *this = ::std::move(from);
  }

  inline CSDTRecruitData& operator=(const CSDTRecruitData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRecruitData& operator=(CSDTRecruitData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRecruitData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRecruitData* internal_default_instance() {
    return reinterpret_cast<const CSDTRecruitData*>(
               &_CSDTRecruitData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(CSDTRecruitData& a, CSDTRecruitData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRecruitData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRecruitData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRecruitData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRecruitData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRecruitData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRecruitData& from) {
    CSDTRecruitData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRecruitData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRecruitData";
  }
  protected:
  explicit CSDTRecruitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIsRecruitedFieldNumber = 1,
  };
  // map<uint32, bool> IsRecruited = 1;
  int isrecruited_size() const;
  private:
  int _internal_isrecruited_size() const;
  public:
  void clear_isrecruited();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      _internal_isrecruited() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      _internal_mutable_isrecruited();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      isrecruited() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      mutable_isrecruited();

  // @@protoc_insertion_point(class_scope:msg.CSDTRecruitData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTRecruitData_IsRecruitedEntry_DoNotUse,
        uint32_t, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> isrecruited_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRecruitPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRecruitPlayer) */ {
 public:
  inline CSDTRecruitPlayer() : CSDTRecruitPlayer(nullptr) {}
  ~CSDTRecruitPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTRecruitPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRecruitPlayer(const CSDTRecruitPlayer& from);
  CSDTRecruitPlayer(CSDTRecruitPlayer&& from) noexcept
    : CSDTRecruitPlayer() {
    *this = ::std::move(from);
  }

  inline CSDTRecruitPlayer& operator=(const CSDTRecruitPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRecruitPlayer& operator=(CSDTRecruitPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRecruitPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRecruitPlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTRecruitPlayer*>(
               &_CSDTRecruitPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(CSDTRecruitPlayer& a, CSDTRecruitPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRecruitPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRecruitPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRecruitPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRecruitPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRecruitPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRecruitPlayer& from) {
    CSDTRecruitPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRecruitPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRecruitPlayer";
  }
  protected:
  explicit CSDTRecruitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kBattleCountFieldNumber = 2,
  };
  // .msg.PlayerRecruitStatus Status = 1;
  void clear_status();
  ::msg::PlayerRecruitStatus status() const;
  void set_status(::msg::PlayerRecruitStatus value);
  private:
  ::msg::PlayerRecruitStatus _internal_status() const;
  void _internal_set_status(::msg::PlayerRecruitStatus value);
  public:

  // uint32 BattleCount = 2;
  void clear_battlecount();
  uint32_t battlecount() const;
  void set_battlecount(uint32_t value);
  private:
  uint32_t _internal_battlecount() const;
  void _internal_set_battlecount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRecruitPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    uint32_t battlecount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActivityRecruit_PlayersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityRecruit_PlayersEntry_DoNotUse, 
    std::string, ::msg::CSDTRecruitPlayer,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActivityRecruit_PlayersEntry_DoNotUse, 
    std::string, ::msg::CSDTRecruitPlayer,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTActivityRecruit_PlayersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActivityRecruit_PlayersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActivityRecruit_PlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActivityRecruit_PlayersEntry_DoNotUse& other);
  static const CSDTActivityRecruit_PlayersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActivityRecruit_PlayersEntry_DoNotUse*>(&_CSDTActivityRecruit_PlayersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTActivityRecruit.PlayersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActivityRecruit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActivityRecruit) */ {
 public:
  inline CSDTActivityRecruit() : CSDTActivityRecruit(nullptr) {}
  ~CSDTActivityRecruit() override;
  explicit PROTOBUF_CONSTEXPR CSDTActivityRecruit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActivityRecruit(const CSDTActivityRecruit& from);
  CSDTActivityRecruit(CSDTActivityRecruit&& from) noexcept
    : CSDTActivityRecruit() {
    *this = ::std::move(from);
  }

  inline CSDTActivityRecruit& operator=(const CSDTActivityRecruit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActivityRecruit& operator=(CSDTActivityRecruit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActivityRecruit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActivityRecruit* internal_default_instance() {
    return reinterpret_cast<const CSDTActivityRecruit*>(
               &_CSDTActivityRecruit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(CSDTActivityRecruit& a, CSDTActivityRecruit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActivityRecruit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActivityRecruit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActivityRecruit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActivityRecruit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActivityRecruit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActivityRecruit& from) {
    CSDTActivityRecruit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActivityRecruit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActivityRecruit";
  }
  protected:
  explicit CSDTActivityRecruit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // map<string, .msg.CSDTRecruitPlayer> Players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
      _internal_players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
      _internal_mutable_players();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
      players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:msg.CSDTActivityRecruit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActivityRecruit_PlayersEntry_DoNotUse,
        std::string, ::msg::CSDTRecruitPlayer,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActGroupBuy_ProcessEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActGroupBuy_ProcessEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActGroupBuy_ProcessEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTActGroupBuy_ProcessEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActGroupBuy_ProcessEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActGroupBuy_ProcessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActGroupBuy_ProcessEntry_DoNotUse& other);
  static const CSDTActGroupBuy_ProcessEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActGroupBuy_ProcessEntry_DoNotUse*>(&_CSDTActGroupBuy_ProcessEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTActGroupBuy.ProcessEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActGroupBuy_RewardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActGroupBuy_RewardEntry_DoNotUse, 
    std::string, ::msg::CSDTActGroupBuyRwd,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActGroupBuy_RewardEntry_DoNotUse, 
    std::string, ::msg::CSDTActGroupBuyRwd,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTActGroupBuy_RewardEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActGroupBuy_RewardEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActGroupBuy_RewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActGroupBuy_RewardEntry_DoNotUse& other);
  static const CSDTActGroupBuy_RewardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActGroupBuy_RewardEntry_DoNotUse*>(&_CSDTActGroupBuy_RewardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTActGroupBuy.RewardEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActGroupBuy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActGroupBuy) */ {
 public:
  inline CSDTActGroupBuy() : CSDTActGroupBuy(nullptr) {}
  ~CSDTActGroupBuy() override;
  explicit PROTOBUF_CONSTEXPR CSDTActGroupBuy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActGroupBuy(const CSDTActGroupBuy& from);
  CSDTActGroupBuy(CSDTActGroupBuy&& from) noexcept
    : CSDTActGroupBuy() {
    *this = ::std::move(from);
  }

  inline CSDTActGroupBuy& operator=(const CSDTActGroupBuy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActGroupBuy& operator=(CSDTActGroupBuy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActGroupBuy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActGroupBuy* internal_default_instance() {
    return reinterpret_cast<const CSDTActGroupBuy*>(
               &_CSDTActGroupBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CSDTActGroupBuy& a, CSDTActGroupBuy& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActGroupBuy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActGroupBuy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActGroupBuy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActGroupBuy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActGroupBuy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActGroupBuy& from) {
    CSDTActGroupBuy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActGroupBuy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActGroupBuy";
  }
  protected:
  explicit CSDTActGroupBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
    kRewardFieldNumber = 2,
  };
  // map<string, uint32> Process = 1;
  int process_size() const;
  private:
  int _internal_process_size() const;
  public:
  void clear_process();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_process() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_process();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      process() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_process();

  // map<string, .msg.CSDTActGroupBuyRwd> Reward = 2;
  int reward_size() const;
  private:
  int _internal_reward_size() const;
  public:
  void clear_reward();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >&
      _internal_reward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >*
      _internal_mutable_reward();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >&
      reward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:msg.CSDTActGroupBuy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActGroupBuy_ProcessEntry_DoNotUse,
        std::string, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> process_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActGroupBuy_RewardEntry_DoNotUse,
        std::string, ::msg::CSDTActGroupBuyRwd,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> reward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActGroupBuyRwd_RewardsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActGroupBuyRwd_RewardsEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActGroupBuyRwd_RewardsEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTActGroupBuyRwd_RewardsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActGroupBuyRwd_RewardsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActGroupBuyRwd_RewardsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActGroupBuyRwd_RewardsEntry_DoNotUse& other);
  static const CSDTActGroupBuyRwd_RewardsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActGroupBuyRwd_RewardsEntry_DoNotUse*>(&_CSDTActGroupBuyRwd_RewardsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTActGroupBuyRwd.RewardsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActGroupBuyRwd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActGroupBuyRwd) */ {
 public:
  inline CSDTActGroupBuyRwd() : CSDTActGroupBuyRwd(nullptr) {}
  ~CSDTActGroupBuyRwd() override;
  explicit PROTOBUF_CONSTEXPR CSDTActGroupBuyRwd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActGroupBuyRwd(const CSDTActGroupBuyRwd& from);
  CSDTActGroupBuyRwd(CSDTActGroupBuyRwd&& from) noexcept
    : CSDTActGroupBuyRwd() {
    *this = ::std::move(from);
  }

  inline CSDTActGroupBuyRwd& operator=(const CSDTActGroupBuyRwd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActGroupBuyRwd& operator=(CSDTActGroupBuyRwd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActGroupBuyRwd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActGroupBuyRwd* internal_default_instance() {
    return reinterpret_cast<const CSDTActGroupBuyRwd*>(
               &_CSDTActGroupBuyRwd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(CSDTActGroupBuyRwd& a, CSDTActGroupBuyRwd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActGroupBuyRwd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActGroupBuyRwd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActGroupBuyRwd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActGroupBuyRwd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActGroupBuyRwd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActGroupBuyRwd& from) {
    CSDTActGroupBuyRwd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActGroupBuyRwd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActGroupBuyRwd";
  }
  protected:
  explicit CSDTActGroupBuyRwd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 1,
  };
  // map<string, uint32> Rewards = 1;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_rewards() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_rewards();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      rewards() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:msg.CSDTActGroupBuyRwd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActGroupBuyRwd_RewardsEntry_DoNotUse,
        std::string, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> rewards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActRecruitData_PlayersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActRecruitData_PlayersEntry_DoNotUse, 
    std::string, ::msg::CSDTRecruitPlayer,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActRecruitData_PlayersEntry_DoNotUse, 
    std::string, ::msg::CSDTRecruitPlayer,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTActRecruitData_PlayersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActRecruitData_PlayersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActRecruitData_PlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActRecruitData_PlayersEntry_DoNotUse& other);
  static const CSDTActRecruitData_PlayersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActRecruitData_PlayersEntry_DoNotUse*>(&_CSDTActRecruitData_PlayersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTActRecruitData.PlayersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActRecruitData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActRecruitData) */ {
 public:
  inline CSDTActRecruitData() : CSDTActRecruitData(nullptr) {}
  ~CSDTActRecruitData() override;
  explicit PROTOBUF_CONSTEXPR CSDTActRecruitData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActRecruitData(const CSDTActRecruitData& from);
  CSDTActRecruitData(CSDTActRecruitData&& from) noexcept
    : CSDTActRecruitData() {
    *this = ::std::move(from);
  }

  inline CSDTActRecruitData& operator=(const CSDTActRecruitData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActRecruitData& operator=(CSDTActRecruitData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActRecruitData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActRecruitData* internal_default_instance() {
    return reinterpret_cast<const CSDTActRecruitData*>(
               &_CSDTActRecruitData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(CSDTActRecruitData& a, CSDTActRecruitData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActRecruitData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActRecruitData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActRecruitData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActRecruitData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActRecruitData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActRecruitData& from) {
    CSDTActRecruitData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActRecruitData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActRecruitData";
  }
  protected:
  explicit CSDTActRecruitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kInviterFieldNumber = 1,
  };
  // map<string, .msg.CSDTRecruitPlayer> Players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
      _internal_players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
      _internal_mutable_players();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
      players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
      mutable_players();

  // string Inviter = 1;
  void clear_inviter();
  const std::string& inviter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inviter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inviter();
  PROTOBUF_NODISCARD std::string* release_inviter();
  void set_allocated_inviter(std::string* inviter);
  private:
  const std::string& _internal_inviter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inviter(const std::string& value);
  std::string* _internal_mutable_inviter();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActRecruitData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActRecruitData_PlayersEntry_DoNotUse,
        std::string, ::msg::CSDTRecruitPlayer,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActLuckMallData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActLuckMallData) */ {
 public:
  inline CSDTActLuckMallData() : CSDTActLuckMallData(nullptr) {}
  ~CSDTActLuckMallData() override;
  explicit PROTOBUF_CONSTEXPR CSDTActLuckMallData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActLuckMallData(const CSDTActLuckMallData& from);
  CSDTActLuckMallData(CSDTActLuckMallData&& from) noexcept
    : CSDTActLuckMallData() {
    *this = ::std::move(from);
  }

  inline CSDTActLuckMallData& operator=(const CSDTActLuckMallData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActLuckMallData& operator=(CSDTActLuckMallData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActLuckMallData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActLuckMallData* internal_default_instance() {
    return reinterpret_cast<const CSDTActLuckMallData*>(
               &_CSDTActLuckMallData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(CSDTActLuckMallData& a, CSDTActLuckMallData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActLuckMallData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActLuckMallData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActLuckMallData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActLuckMallData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActLuckMallData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActLuckMallData& from) {
    CSDTActLuckMallData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActLuckMallData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActLuckMallData";
  }
  protected:
  explicit CSDTActLuckMallData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMallGoodsFieldNumber = 1,
    kTabIdFieldNumber = 2,
    kDiscountFieldNumber = 3,
  };
  // repeated uint32 MallGoods = 1;
  int mallgoods_size() const;
  private:
  int _internal_mallgoods_size() const;
  public:
  void clear_mallgoods();
  private:
  uint32_t _internal_mallgoods(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mallgoods() const;
  void _internal_add_mallgoods(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mallgoods();
  public:
  uint32_t mallgoods(int index) const;
  void set_mallgoods(int index, uint32_t value);
  void add_mallgoods(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mallgoods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mallgoods();

  // int32 TabId = 2;
  void clear_tabid();
  int32_t tabid() const;
  void set_tabid(int32_t value);
  private:
  int32_t _internal_tabid() const;
  void _internal_set_tabid(int32_t value);
  public:

  // uint32 Discount = 3;
  void clear_discount();
  uint32_t discount() const;
  void set_discount(uint32_t value);
  private:
  uint32_t _internal_discount() const;
  void _internal_set_discount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActLuckMallData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mallgoods_;
    mutable std::atomic<int> _mallgoods_cached_byte_size_;
    int32_t tabid_;
    uint32_t discount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMelee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMelee) */ {
 public:
  inline CSDTMelee() : CSDTMelee(nullptr) {}
  ~CSDTMelee() override;
  explicit PROTOBUF_CONSTEXPR CSDTMelee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMelee(const CSDTMelee& from);
  CSDTMelee(CSDTMelee&& from) noexcept
    : CSDTMelee() {
    *this = ::std::move(from);
  }

  inline CSDTMelee& operator=(const CSDTMelee& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMelee& operator=(CSDTMelee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMelee& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMelee* internal_default_instance() {
    return reinterpret_cast<const CSDTMelee*>(
               &_CSDTMelee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(CSDTMelee& a, CSDTMelee& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMelee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMelee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMelee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMelee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMelee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMelee& from) {
    CSDTMelee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMelee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMelee";
  }
  protected:
  explicit CSDTMelee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
    kGetAwardFieldNumber = 2,
    kMeleeBeginTimeFieldNumber = 3,
    kMeleeEndTimeFieldNumber = 4,
  };
  // uint32 Progress = 1;
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // bool GetAward = 2;
  void clear_getaward();
  bool getaward() const;
  void set_getaward(bool value);
  private:
  bool _internal_getaward() const;
  void _internal_set_getaward(bool value);
  public:

  // int64 MeleeBeginTime = 3;
  void clear_meleebegintime();
  int64_t meleebegintime() const;
  void set_meleebegintime(int64_t value);
  private:
  int64_t _internal_meleebegintime() const;
  void _internal_set_meleebegintime(int64_t value);
  public:

  // int64 MeleeEndTime = 4;
  void clear_meleeendtime();
  int64_t meleeendtime() const;
  void set_meleeendtime(int64_t value);
  private:
  int64_t _internal_meleeendtime() const;
  void _internal_set_meleeendtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMelee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t progress_;
    bool getaward_;
    int64_t meleebegintime_;
    int64_t meleeendtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTeamSlotPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTeamSlotPlayer) */ {
 public:
  inline CSDTTeamSlotPlayer() : CSDTTeamSlotPlayer(nullptr) {}
  ~CSDTTeamSlotPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTTeamSlotPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTeamSlotPlayer(const CSDTTeamSlotPlayer& from);
  CSDTTeamSlotPlayer(CSDTTeamSlotPlayer&& from) noexcept
    : CSDTTeamSlotPlayer() {
    *this = ::std::move(from);
  }

  inline CSDTTeamSlotPlayer& operator=(const CSDTTeamSlotPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTeamSlotPlayer& operator=(CSDTTeamSlotPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTeamSlotPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTeamSlotPlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTTeamSlotPlayer*>(
               &_CSDTTeamSlotPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(CSDTTeamSlotPlayer& a, CSDTTeamSlotPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTeamSlotPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTeamSlotPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTeamSlotPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTeamSlotPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTeamSlotPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTeamSlotPlayer& from) {
    CSDTTeamSlotPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTeamSlotPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTeamSlotPlayer";
  }
  protected:
  explicit CSDTTeamSlotPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUsrNameFieldNumber = 5,
    kRegionFieldNumber = 7,
    kCountryFieldNumber = 13,
    kIsAIFieldNumber = 2,
    kSlotFieldNumber = 3,
    kGroupFieldNumber = 4,
    kHeadPicFieldNumber = 6,
    kProvinceFieldNumber = 8,
    kHeadPicFrameFieldNumber = 9,
    kLvlFieldNumber = 10,
    kCupFieldNumber = 11,
    kPlatformTypeFieldNumber = 12,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string UsrName = 5;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string Region = 7;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string Country = 13;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // bool IsAI = 2;
  void clear_isai();
  bool isai() const;
  void set_isai(bool value);
  private:
  bool _internal_isai() const;
  void _internal_set_isai(bool value);
  public:

  // uint32 Slot = 3;
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // .msg.TEAMGROUP Group = 4;
  void clear_group();
  ::msg::TEAMGROUP group() const;
  void set_group(::msg::TEAMGROUP value);
  private:
  ::msg::TEAMGROUP _internal_group() const;
  void _internal_set_group(::msg::TEAMGROUP value);
  public:

  // uint32 HeadPic = 6;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 Province = 8;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // uint32 HeadPicFrame = 9;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // uint32 Lvl = 10;
  void clear_lvl();
  uint32_t lvl() const;
  void set_lvl(uint32_t value);
  private:
  uint32_t _internal_lvl() const;
  void _internal_set_lvl(uint32_t value);
  public:

  // uint32 Cup = 11;
  void clear_cup();
  uint32_t cup() const;
  void set_cup(uint32_t value);
  private:
  uint32_t _internal_cup() const;
  void _internal_set_cup(uint32_t value);
  public:

  // .msg.PLATFORMTYPE PlatformType = 12;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTTeamSlotPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    bool isai_;
    uint32_t slot_;
    int group_;
    uint32_t headpic_;
    uint32_t province_;
    uint32_t headpicframe_;
    uint32_t lvl_;
    uint32_t cup_;
    int platformtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTeamVoicePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTeamVoicePlayer) */ {
 public:
  inline CSDTTeamVoicePlayer() : CSDTTeamVoicePlayer(nullptr) {}
  ~CSDTTeamVoicePlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTTeamVoicePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTeamVoicePlayer(const CSDTTeamVoicePlayer& from);
  CSDTTeamVoicePlayer(CSDTTeamVoicePlayer&& from) noexcept
    : CSDTTeamVoicePlayer() {
    *this = ::std::move(from);
  }

  inline CSDTTeamVoicePlayer& operator=(const CSDTTeamVoicePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTeamVoicePlayer& operator=(CSDTTeamVoicePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTeamVoicePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTeamVoicePlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTTeamVoicePlayer*>(
               &_CSDTTeamVoicePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CSDTTeamVoicePlayer& a, CSDTTeamVoicePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTeamVoicePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTeamVoicePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTeamVoicePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTeamVoicePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTeamVoicePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTeamVoicePlayer& from) {
    CSDTTeamVoicePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTeamVoicePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTeamVoicePlayer";
  }
  protected:
  explicit CSDTTeamVoicePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVoiceIdFieldNumber = 2,
    kVoiceUserIdFieldNumber = 4,
    kVoiceMemIdFieldNumber = 3,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string VoiceId = 2;
  void clear_voiceid();
  const std::string& voiceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_voiceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_voiceid();
  PROTOBUF_NODISCARD std::string* release_voiceid();
  void set_allocated_voiceid(std::string* voiceid);
  private:
  const std::string& _internal_voiceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voiceid(const std::string& value);
  std::string* _internal_mutable_voiceid();
  public:

  // string VoiceUserId = 4;
  void clear_voiceuserid();
  const std::string& voiceuserid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_voiceuserid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_voiceuserid();
  PROTOBUF_NODISCARD std::string* release_voiceuserid();
  void set_allocated_voiceuserid(std::string* voiceuserid);
  private:
  const std::string& _internal_voiceuserid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voiceuserid(const std::string& value);
  std::string* _internal_mutable_voiceuserid();
  public:

  // uint32 VoiceMemId = 3;
  void clear_voicememid();
  uint32_t voicememid() const;
  void set_voicememid(uint32_t value);
  private:
  uint32_t _internal_voicememid() const;
  void _internal_set_voicememid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTTeamVoicePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voiceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voiceuserid_;
    uint32_t voicememid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ActivityGroupData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ActivityGroupData) */ {
 public:
  inline ActivityGroupData() : ActivityGroupData(nullptr) {}
  ~ActivityGroupData() override;
  explicit PROTOBUF_CONSTEXPR ActivityGroupData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityGroupData(const ActivityGroupData& from);
  ActivityGroupData(ActivityGroupData&& from) noexcept
    : ActivityGroupData() {
    *this = ::std::move(from);
  }

  inline ActivityGroupData& operator=(const ActivityGroupData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityGroupData& operator=(ActivityGroupData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityGroupData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityGroupData* internal_default_instance() {
    return reinterpret_cast<const ActivityGroupData*>(
               &_ActivityGroupData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(ActivityGroupData& a, ActivityGroupData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityGroupData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityGroupData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityGroupData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityGroupData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityGroupData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivityGroupData& from) {
    ActivityGroupData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityGroupData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ActivityGroupData";
  }
  protected:
  explicit ActivityGroupData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffEffectsFieldNumber = 15,
    kModesFieldNumber = 16,
    kChannelsFieldNumber = 34,
    kTabNameFieldNumber = 3,
    kTabIconFieldNumber = 4,
    kBeginShowTimeFieldNumber = 5,
    kBeginTimeFieldNumber = 6,
    kEndTimeFieldNumber = 7,
    kEndShowTimeFieldNumber = 8,
    kShowParamFieldNumber = 14,
    kPicNameFieldNumber = 18,
    kEffectWeekdayFieldNumber = 25,
    kTakeEffectDateFieldNumber = 26,
    kTakeEffectTimeFieldNumber = 27,
    kTakeEffectRankFieldNumber = 28,
    kTakeEffectModeFieldNumber = 29,
    kZoneFieldNumber = 33,
    kTakeEffectLevelFieldNumber = 35,
    kPlatformCloseFieldNumber = 38,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDurationFieldNumber = 9,
    kPrivateDataFieldNumber = 10,
    kActivityIdFieldNumber = 12,
    kRepeatTypeFieldNumber = 13,
    kOpenFieldNumber = 11,
    kPicOpenFieldNumber = 19,
    kPageTypeFieldNumber = 17,
    kSubscriptTypeFieldNumber = 20,
    kOrderIDFieldNumber = 21,
    kPicIntervalFieldNumber = 22,
    kPicSwitchOpenFieldNumber = 23,
    kEffectTimeTypeFieldNumber = 24,
    kTeamStateFieldNumber = 30,
    kUIStylePhoneFieldNumber = 31,
    kUIStylePCFieldNumber = 32,
    kLeastMachFieldNumber = 37,
    kMakeUpFieldNumber = 36,
  };
  // repeated .msg.BuffEffect BuffEffects = 15;
  int buffeffects_size() const;
  private:
  int _internal_buffeffects_size() const;
  public:
  void clear_buffeffects();
  ::msg::BuffEffect* mutable_buffeffects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BuffEffect >*
      mutable_buffeffects();
  private:
  const ::msg::BuffEffect& _internal_buffeffects(int index) const;
  ::msg::BuffEffect* _internal_add_buffeffects();
  public:
  const ::msg::BuffEffect& buffeffects(int index) const;
  ::msg::BuffEffect* add_buffeffects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BuffEffect >&
      buffeffects() const;

  // repeated uint32 Modes = 16;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  private:
  uint32_t _internal_modes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_modes() const;
  void _internal_add_modes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_modes();
  public:
  uint32_t modes(int index) const;
  void set_modes(int index, uint32_t value);
  void add_modes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_modes();

  // repeated string Channels = 34;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  const std::string& channels(int index) const;
  std::string* mutable_channels(int index);
  void set_channels(int index, const std::string& value);
  void set_channels(int index, std::string&& value);
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  std::string* add_channels();
  void add_channels(const std::string& value);
  void add_channels(std::string&& value);
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channels();
  private:
  const std::string& _internal_channels(int index) const;
  std::string* _internal_add_channels();
  public:

  // string TabName = 3;
  void clear_tabname();
  const std::string& tabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tabname();
  PROTOBUF_NODISCARD std::string* release_tabname();
  void set_allocated_tabname(std::string* tabname);
  private:
  const std::string& _internal_tabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tabname(const std::string& value);
  std::string* _internal_mutable_tabname();
  public:

  // string TabIcon = 4;
  void clear_tabicon();
  const std::string& tabicon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tabicon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tabicon();
  PROTOBUF_NODISCARD std::string* release_tabicon();
  void set_allocated_tabicon(std::string* tabicon);
  private:
  const std::string& _internal_tabicon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tabicon(const std::string& value);
  std::string* _internal_mutable_tabicon();
  public:

  // string BeginShowTime = 5;
  void clear_beginshowtime();
  const std::string& beginshowtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_beginshowtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_beginshowtime();
  PROTOBUF_NODISCARD std::string* release_beginshowtime();
  void set_allocated_beginshowtime(std::string* beginshowtime);
  private:
  const std::string& _internal_beginshowtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beginshowtime(const std::string& value);
  std::string* _internal_mutable_beginshowtime();
  public:

  // string BeginTime = 6;
  void clear_begintime();
  const std::string& begintime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_begintime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_begintime();
  PROTOBUF_NODISCARD std::string* release_begintime();
  void set_allocated_begintime(std::string* begintime);
  private:
  const std::string& _internal_begintime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_begintime(const std::string& value);
  std::string* _internal_mutable_begintime();
  public:

  // string EndTime = 7;
  void clear_endtime();
  const std::string& endtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endtime();
  PROTOBUF_NODISCARD std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // string EndShowTime = 8;
  void clear_endshowtime();
  const std::string& endshowtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endshowtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endshowtime();
  PROTOBUF_NODISCARD std::string* release_endshowtime();
  void set_allocated_endshowtime(std::string* endshowtime);
  private:
  const std::string& _internal_endshowtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endshowtime(const std::string& value);
  std::string* _internal_mutable_endshowtime();
  public:

  // string ShowParam = 14;
  void clear_showparam();
  const std::string& showparam() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_showparam(ArgT0&& arg0, ArgT... args);
  std::string* mutable_showparam();
  PROTOBUF_NODISCARD std::string* release_showparam();
  void set_allocated_showparam(std::string* showparam);
  private:
  const std::string& _internal_showparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_showparam(const std::string& value);
  std::string* _internal_mutable_showparam();
  public:

  // string PicName = 18;
  void clear_picname();
  const std::string& picname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picname();
  PROTOBUF_NODISCARD std::string* release_picname();
  void set_allocated_picname(std::string* picname);
  private:
  const std::string& _internal_picname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picname(const std::string& value);
  std::string* _internal_mutable_picname();
  public:

  // string EffectWeekday = 25;
  void clear_effectweekday();
  const std::string& effectweekday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effectweekday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effectweekday();
  PROTOBUF_NODISCARD std::string* release_effectweekday();
  void set_allocated_effectweekday(std::string* effectweekday);
  private:
  const std::string& _internal_effectweekday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effectweekday(const std::string& value);
  std::string* _internal_mutable_effectweekday();
  public:

  // string TakeEffectDate = 26;
  void clear_takeeffectdate();
  const std::string& takeeffectdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_takeeffectdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_takeeffectdate();
  PROTOBUF_NODISCARD std::string* release_takeeffectdate();
  void set_allocated_takeeffectdate(std::string* takeeffectdate);
  private:
  const std::string& _internal_takeeffectdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takeeffectdate(const std::string& value);
  std::string* _internal_mutable_takeeffectdate();
  public:

  // string TakeEffectTime = 27;
  void clear_takeeffecttime();
  const std::string& takeeffecttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_takeeffecttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_takeeffecttime();
  PROTOBUF_NODISCARD std::string* release_takeeffecttime();
  void set_allocated_takeeffecttime(std::string* takeeffecttime);
  private:
  const std::string& _internal_takeeffecttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takeeffecttime(const std::string& value);
  std::string* _internal_mutable_takeeffecttime();
  public:

  // string TakeEffectRank = 28;
  void clear_takeeffectrank();
  const std::string& takeeffectrank() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_takeeffectrank(ArgT0&& arg0, ArgT... args);
  std::string* mutable_takeeffectrank();
  PROTOBUF_NODISCARD std::string* release_takeeffectrank();
  void set_allocated_takeeffectrank(std::string* takeeffectrank);
  private:
  const std::string& _internal_takeeffectrank() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takeeffectrank(const std::string& value);
  std::string* _internal_mutable_takeeffectrank();
  public:

  // string TakeEffectMode = 29;
  void clear_takeeffectmode();
  const std::string& takeeffectmode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_takeeffectmode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_takeeffectmode();
  PROTOBUF_NODISCARD std::string* release_takeeffectmode();
  void set_allocated_takeeffectmode(std::string* takeeffectmode);
  private:
  const std::string& _internal_takeeffectmode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takeeffectmode(const std::string& value);
  std::string* _internal_mutable_takeeffectmode();
  public:

  // string Zone = 33;
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // string TakeEffectLevel = 35;
  void clear_takeeffectlevel();
  const std::string& takeeffectlevel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_takeeffectlevel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_takeeffectlevel();
  PROTOBUF_NODISCARD std::string* release_takeeffectlevel();
  void set_allocated_takeeffectlevel(std::string* takeeffectlevel);
  private:
  const std::string& _internal_takeeffectlevel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takeeffectlevel(const std::string& value);
  std::string* _internal_mutable_takeeffectlevel();
  public:

  // string PlatformClose = 38;
  void clear_platformclose();
  const std::string& platformclose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platformclose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platformclose();
  PROTOBUF_NODISCARD std::string* release_platformclose();
  void set_allocated_platformclose(std::string* platformclose);
  private:
  const std::string& _internal_platformclose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platformclose(const std::string& value);
  std::string* _internal_mutable_platformclose();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .msg.ACTIVITYTYPE Type = 2;
  void clear_type();
  ::msg::ACTIVITYTYPE type() const;
  void set_type(::msg::ACTIVITYTYPE value);
  private:
  ::msg::ACTIVITYTYPE _internal_type() const;
  void _internal_set_type(::msg::ACTIVITYTYPE value);
  public:

  // uint32 Duration = 9;
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // uint32 PrivateData = 10;
  void clear_privatedata();
  uint32_t privatedata() const;
  void set_privatedata(uint32_t value);
  private:
  uint32_t _internal_privatedata() const;
  void _internal_set_privatedata(uint32_t value);
  public:

  // uint32 ActivityId = 12;
  void clear_activityid();
  uint32_t activityid() const;
  void set_activityid(uint32_t value);
  private:
  uint32_t _internal_activityid() const;
  void _internal_set_activityid(uint32_t value);
  public:

  // uint32 RepeatType = 13;
  void clear_repeattype();
  uint32_t repeattype() const;
  void set_repeattype(uint32_t value);
  private:
  uint32_t _internal_repeattype() const;
  void _internal_set_repeattype(uint32_t value);
  public:

  // bool Open = 11;
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // bool PicOpen = 19;
  void clear_picopen();
  bool picopen() const;
  void set_picopen(bool value);
  private:
  bool _internal_picopen() const;
  void _internal_set_picopen(bool value);
  public:

  // uint32 PageType = 17;
  void clear_pagetype();
  uint32_t pagetype() const;
  void set_pagetype(uint32_t value);
  private:
  uint32_t _internal_pagetype() const;
  void _internal_set_pagetype(uint32_t value);
  public:

  // uint32 SubscriptType = 20;
  void clear_subscripttype();
  uint32_t subscripttype() const;
  void set_subscripttype(uint32_t value);
  private:
  uint32_t _internal_subscripttype() const;
  void _internal_set_subscripttype(uint32_t value);
  public:

  // uint32 OrderID = 21;
  void clear_orderid();
  uint32_t orderid() const;
  void set_orderid(uint32_t value);
  private:
  uint32_t _internal_orderid() const;
  void _internal_set_orderid(uint32_t value);
  public:

  // uint32 PicInterval = 22;
  void clear_picinterval();
  uint32_t picinterval() const;
  void set_picinterval(uint32_t value);
  private:
  uint32_t _internal_picinterval() const;
  void _internal_set_picinterval(uint32_t value);
  public:

  // uint32 PicSwitchOpen = 23;
  void clear_picswitchopen();
  uint32_t picswitchopen() const;
  void set_picswitchopen(uint32_t value);
  private:
  uint32_t _internal_picswitchopen() const;
  void _internal_set_picswitchopen(uint32_t value);
  public:

  // .msg.EFFECTTIMETYPE EffectTimeType = 24;
  void clear_effecttimetype();
  ::msg::EFFECTTIMETYPE effecttimetype() const;
  void set_effecttimetype(::msg::EFFECTTIMETYPE value);
  private:
  ::msg::EFFECTTIMETYPE _internal_effecttimetype() const;
  void _internal_set_effecttimetype(::msg::EFFECTTIMETYPE value);
  public:

  // .msg.ACTIVITYTEAMSTATE TeamState = 30;
  void clear_teamstate();
  ::msg::ACTIVITYTEAMSTATE teamstate() const;
  void set_teamstate(::msg::ACTIVITYTEAMSTATE value);
  private:
  ::msg::ACTIVITYTEAMSTATE _internal_teamstate() const;
  void _internal_set_teamstate(::msg::ACTIVITYTEAMSTATE value);
  public:

  // uint32 UIStylePhone = 31;
  void clear_uistylephone();
  uint32_t uistylephone() const;
  void set_uistylephone(uint32_t value);
  private:
  uint32_t _internal_uistylephone() const;
  void _internal_set_uistylephone(uint32_t value);
  public:

  // uint32 UIStylePC = 32;
  void clear_uistylepc();
  uint32_t uistylepc() const;
  void set_uistylepc(uint32_t value);
  private:
  uint32_t _internal_uistylepc() const;
  void _internal_set_uistylepc(uint32_t value);
  public:

  // int64 LeastMach = 37;
  void clear_leastmach();
  int64_t leastmach() const;
  void set_leastmach(int64_t value);
  private:
  int64_t _internal_leastmach() const;
  void _internal_set_leastmach(int64_t value);
  public:

  // int32 MakeUp = 36;
  void clear_makeup();
  int32_t makeup() const;
  void set_makeup(int32_t value);
  private:
  int32_t _internal_makeup() const;
  void _internal_set_makeup(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ActivityGroupData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BuffEffect > buffeffects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > modes_;
    mutable std::atomic<int> _modes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channels_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tabname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tabicon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beginshowtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begintime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endshowtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showparam_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectweekday_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takeeffectdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takeeffecttime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takeeffectrank_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takeeffectmode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takeeffectlevel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platformclose_;
    uint32_t id_;
    int type_;
    uint32_t duration_;
    uint32_t privatedata_;
    uint32_t activityid_;
    uint32_t repeattype_;
    bool open_;
    bool picopen_;
    uint32_t pagetype_;
    uint32_t subscripttype_;
    uint32_t orderid_;
    uint32_t picinterval_;
    uint32_t picswitchopen_;
    int effecttimetype_;
    int teamstate_;
    uint32_t uistylephone_;
    uint32_t uistylepc_;
    int64_t leastmach_;
    int32_t makeup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ActivityData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ActivityData) */ {
 public:
  inline ActivityData() : ActivityData(nullptr) {}
  ~ActivityData() override;
  explicit PROTOBUF_CONSTEXPR ActivityData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityData(const ActivityData& from);
  ActivityData(ActivityData&& from) noexcept
    : ActivityData() {
    *this = ::std::move(from);
  }

  inline ActivityData& operator=(const ActivityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityData& operator=(ActivityData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityData* internal_default_instance() {
    return reinterpret_cast<const ActivityData*>(
               &_ActivityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(ActivityData& a, ActivityData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivityData& from) {
    ActivityData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ActivityData";
  }
  protected:
  explicit ActivityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 6,
    kTitleFieldNumber = 3,
    kSkipInterfaceFieldNumber = 9,
    kDescFieldNumber = 12,
    kShowGiftPicFieldNumber = 14,
    kCondFieldNumber = 5,
    kGroupIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kUnitFieldNumber = 4,
    kCondGroupFieldNumber = 7,
    kPreCondGroupFieldNumber = 8,
    kSkipTabFieldNumber = 10,
    kDayFieldNumber = 11,
    kShowQualityFieldNumber = 13,
    kResetTypeFieldNumber = 15,
    kIsRecruiterFieldNumber = 16,
    kProgressInheritFieldNumber = 17,
    kShowOrderFieldNumber = 18,
  };
  // repeated .msg.Award Awards = 6;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  ::msg::Award* mutable_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
      mutable_awards();
  private:
  const ::msg::Award& _internal_awards(int index) const;
  ::msg::Award* _internal_add_awards();
  public:
  const ::msg::Award& awards(int index) const;
  ::msg::Award* add_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
      awards() const;

  // string Title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string SkipInterface = 9;
  void clear_skipinterface();
  const std::string& skipinterface() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skipinterface(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skipinterface();
  PROTOBUF_NODISCARD std::string* release_skipinterface();
  void set_allocated_skipinterface(std::string* skipinterface);
  private:
  const std::string& _internal_skipinterface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skipinterface(const std::string& value);
  std::string* _internal_mutable_skipinterface();
  public:

  // string Desc = 12;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string ShowGiftPic = 14;
  void clear_showgiftpic();
  const std::string& showgiftpic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_showgiftpic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_showgiftpic();
  PROTOBUF_NODISCARD std::string* release_showgiftpic();
  void set_allocated_showgiftpic(std::string* showgiftpic);
  private:
  const std::string& _internal_showgiftpic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_showgiftpic(const std::string& value);
  std::string* _internal_mutable_showgiftpic();
  public:

  // .msg.Cond Cond = 5;
  bool has_cond() const;
  private:
  bool _internal_has_cond() const;
  public:
  void clear_cond();
  const ::msg::Cond& cond() const;
  PROTOBUF_NODISCARD ::msg::Cond* release_cond();
  ::msg::Cond* mutable_cond();
  void set_allocated_cond(::msg::Cond* cond);
  private:
  const ::msg::Cond& _internal_cond() const;
  ::msg::Cond* _internal_mutable_cond();
  public:
  void unsafe_arena_set_allocated_cond(
      ::msg::Cond* cond);
  ::msg::Cond* unsafe_arena_release_cond();

  // uint32 GroupId = 1;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // uint32 Id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Unit = 4;
  void clear_unit();
  uint32_t unit() const;
  void set_unit(uint32_t value);
  private:
  uint32_t _internal_unit() const;
  void _internal_set_unit(uint32_t value);
  public:

  // uint32 CondGroup = 7;
  void clear_condgroup();
  uint32_t condgroup() const;
  void set_condgroup(uint32_t value);
  private:
  uint32_t _internal_condgroup() const;
  void _internal_set_condgroup(uint32_t value);
  public:

  // uint32 PreCondGroup = 8;
  void clear_precondgroup();
  uint32_t precondgroup() const;
  void set_precondgroup(uint32_t value);
  private:
  uint32_t _internal_precondgroup() const;
  void _internal_set_precondgroup(uint32_t value);
  public:

  // uint32 SkipTab = 10;
  void clear_skiptab();
  uint32_t skiptab() const;
  void set_skiptab(uint32_t value);
  private:
  uint32_t _internal_skiptab() const;
  void _internal_set_skiptab(uint32_t value);
  public:

  // uint32 Day = 11;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // uint32 ShowQuality = 13;
  void clear_showquality();
  uint32_t showquality() const;
  void set_showquality(uint32_t value);
  private:
  uint32_t _internal_showquality() const;
  void _internal_set_showquality(uint32_t value);
  public:

  // .msg.ActivityResetType ResetType = 15;
  void clear_resettype();
  ::msg::ActivityResetType resettype() const;
  void set_resettype(::msg::ActivityResetType value);
  private:
  ::msg::ActivityResetType _internal_resettype() const;
  void _internal_set_resettype(::msg::ActivityResetType value);
  public:

  // bool IsRecruiter = 16;
  void clear_isrecruiter();
  bool isrecruiter() const;
  void set_isrecruiter(bool value);
  private:
  bool _internal_isrecruiter() const;
  void _internal_set_isrecruiter(bool value);
  public:

  // uint32 ProgressInherit = 17;
  void clear_progressinherit();
  uint32_t progressinherit() const;
  void set_progressinherit(uint32_t value);
  private:
  uint32_t _internal_progressinherit() const;
  void _internal_set_progressinherit(uint32_t value);
  public:

  // uint32 ShowOrder = 18;
  void clear_showorder();
  uint32_t showorder() const;
  void set_showorder(uint32_t value);
  private:
  uint32_t _internal_showorder() const;
  void _internal_set_showorder(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ActivityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award > awards_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skipinterface_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showgiftpic_;
    ::msg::Cond* cond_;
    uint32_t groupid_;
    uint32_t id_;
    uint32_t unit_;
    uint32_t condgroup_;
    uint32_t precondgroup_;
    uint32_t skiptab_;
    uint32_t day_;
    uint32_t showquality_;
    int resettype_;
    bool isrecruiter_;
    uint32_t progressinherit_;
    uint32_t showorder_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ActivityAttrData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ActivityAttrData) */ {
 public:
  inline ActivityAttrData() : ActivityAttrData(nullptr) {}
  ~ActivityAttrData() override;
  explicit PROTOBUF_CONSTEXPR ActivityAttrData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityAttrData(const ActivityAttrData& from);
  ActivityAttrData(ActivityAttrData&& from) noexcept
    : ActivityAttrData() {
    *this = ::std::move(from);
  }

  inline ActivityAttrData& operator=(const ActivityAttrData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityAttrData& operator=(ActivityAttrData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityAttrData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityAttrData* internal_default_instance() {
    return reinterpret_cast<const ActivityAttrData*>(
               &_ActivityAttrData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(ActivityAttrData& a, ActivityAttrData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityAttrData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityAttrData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityAttrData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityAttrData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityAttrData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivityAttrData& from) {
    ActivityAttrData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityAttrData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ActivityAttrData";
  }
  protected:
  explicit ActivityAttrData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kABTestTypeFieldNumber = 2,
    kABTestValueFieldNumber = 3,
  };
  // uint32 ID = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .msg.ABTESTTYPE ABTestType = 2;
  void clear_abtesttype();
  ::msg::ABTESTTYPE abtesttype() const;
  void set_abtesttype(::msg::ABTESTTYPE value);
  private:
  ::msg::ABTESTTYPE _internal_abtesttype() const;
  void _internal_set_abtesttype(::msg::ABTESTTYPE value);
  public:

  // uint32 ABTestValue = 3;
  void clear_abtestvalue();
  uint32_t abtestvalue() const;
  void set_abtestvalue(uint32_t value);
  private:
  uint32_t _internal_abtestvalue() const;
  void _internal_set_abtestvalue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ActivityAttrData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    int abtesttype_;
    uint32_t abtestvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GMLanguageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GMLanguageInfo) */ {
 public:
  inline GMLanguageInfo() : GMLanguageInfo(nullptr) {}
  ~GMLanguageInfo() override;
  explicit PROTOBUF_CONSTEXPR GMLanguageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GMLanguageInfo(const GMLanguageInfo& from);
  GMLanguageInfo(GMLanguageInfo&& from) noexcept
    : GMLanguageInfo() {
    *this = ::std::move(from);
  }

  inline GMLanguageInfo& operator=(const GMLanguageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMLanguageInfo& operator=(GMLanguageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GMLanguageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GMLanguageInfo* internal_default_instance() {
    return reinterpret_cast<const GMLanguageInfo*>(
               &_GMLanguageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(GMLanguageInfo& a, GMLanguageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GMLanguageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMLanguageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GMLanguageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GMLanguageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GMLanguageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GMLanguageInfo& from) {
    GMLanguageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMLanguageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GMLanguageInfo";
  }
  protected:
  explicit GMLanguageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageTypeFieldNumber = 1,
    kTranslateFieldNumber = 2,
  };
  // string LanguageType = 1;
  void clear_languagetype();
  const std::string& languagetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_languagetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_languagetype();
  PROTOBUF_NODISCARD std::string* release_languagetype();
  void set_allocated_languagetype(std::string* languagetype);
  private:
  const std::string& _internal_languagetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_languagetype(const std::string& value);
  std::string* _internal_mutable_languagetype();
  public:

  // string Translate = 2;
  void clear_translate();
  const std::string& translate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_translate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_translate();
  PROTOBUF_NODISCARD std::string* release_translate();
  void set_allocated_translate(std::string* translate);
  private:
  const std::string& _internal_translate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_translate(const std::string& value);
  std::string* _internal_mutable_translate();
  public:

  // @@protoc_insertion_point(class_scope:msg.GMLanguageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr languagetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr translate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayLimit) */ {
 public:
  inline PlayLimit() : PlayLimit(nullptr) {}
  ~PlayLimit() override;
  explicit PROTOBUF_CONSTEXPR PlayLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayLimit(const PlayLimit& from);
  PlayLimit(PlayLimit&& from) noexcept
    : PlayLimit() {
    *this = ::std::move(from);
  }

  inline PlayLimit& operator=(const PlayLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayLimit& operator=(PlayLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayLimit* internal_default_instance() {
    return reinterpret_cast<const PlayLimit*>(
               &_PlayLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(PlayLimit& a, PlayLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayLimit& from) {
    PlayLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayLimit";
  }
  protected:
  explicit PlayLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint32 Age = 1;
  void clear_age();
  uint32_t age() const;
  void set_age(uint32_t value);
  private:
  uint32_t _internal_age() const;
  void _internal_set_age(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t age_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChannelFunctionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChannelFunctionData) */ {
 public:
  inline ChannelFunctionData() : ChannelFunctionData(nullptr) {}
  ~ChannelFunctionData() override;
  explicit PROTOBUF_CONSTEXPR ChannelFunctionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelFunctionData(const ChannelFunctionData& from);
  ChannelFunctionData(ChannelFunctionData&& from) noexcept
    : ChannelFunctionData() {
    *this = ::std::move(from);
  }

  inline ChannelFunctionData& operator=(const ChannelFunctionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelFunctionData& operator=(ChannelFunctionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelFunctionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelFunctionData* internal_default_instance() {
    return reinterpret_cast<const ChannelFunctionData*>(
               &_ChannelFunctionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(ChannelFunctionData& a, ChannelFunctionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelFunctionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelFunctionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelFunctionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelFunctionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelFunctionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelFunctionData& from) {
    ChannelFunctionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelFunctionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChannelFunctionData";
  }
  protected:
  explicit ChannelFunctionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayLimitsFieldNumber = 7,
    kChannelIdFieldNumber = 1,
    kForbiddenLogoFieldNumber = 2,
    kAgeJudgeFieldNumber = 3,
    kInformationInputFieldNumber = 4,
    kGameRestrictFieldNumber = 5,
    kForbiddenAgeFieldNumber = 6,
  };
  // repeated .msg.PlayLimit PlayLimits = 7;
  int playlimits_size() const;
  private:
  int _internal_playlimits_size() const;
  public:
  void clear_playlimits();
  ::msg::PlayLimit* mutable_playlimits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayLimit >*
      mutable_playlimits();
  private:
  const ::msg::PlayLimit& _internal_playlimits(int index) const;
  ::msg::PlayLimit* _internal_add_playlimits();
  public:
  const ::msg::PlayLimit& playlimits(int index) const;
  ::msg::PlayLimit* add_playlimits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayLimit >&
      playlimits() const;

  // string ChannelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelid();
  PROTOBUF_NODISCARD std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // bool ForbiddenLogo = 2;
  void clear_forbiddenlogo();
  bool forbiddenlogo() const;
  void set_forbiddenlogo(bool value);
  private:
  bool _internal_forbiddenlogo() const;
  void _internal_set_forbiddenlogo(bool value);
  public:

  // bool AgeJudge = 3;
  void clear_agejudge();
  bool agejudge() const;
  void set_agejudge(bool value);
  private:
  bool _internal_agejudge() const;
  void _internal_set_agejudge(bool value);
  public:

  // bool InformationInput = 4;
  void clear_informationinput();
  bool informationinput() const;
  void set_informationinput(bool value);
  private:
  bool _internal_informationinput() const;
  void _internal_set_informationinput(bool value);
  public:

  // bool GameRestrict = 5;
  void clear_gamerestrict();
  bool gamerestrict() const;
  void set_gamerestrict(bool value);
  private:
  bool _internal_gamerestrict() const;
  void _internal_set_gamerestrict(bool value);
  public:

  // uint32 ForbiddenAge = 6;
  void clear_forbiddenage();
  uint32_t forbiddenage() const;
  void set_forbiddenage(uint32_t value);
  private:
  uint32_t _internal_forbiddenage() const;
  void _internal_set_forbiddenage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChannelFunctionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayLimit > playlimits_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
    bool forbiddenlogo_;
    bool agejudge_;
    bool informationinput_;
    bool gamerestrict_;
    uint32_t forbiddenage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PvpHistoryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PvpHistoryData) */ {
 public:
  inline PvpHistoryData() : PvpHistoryData(nullptr) {}
  ~PvpHistoryData() override;
  explicit PROTOBUF_CONSTEXPR PvpHistoryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PvpHistoryData(const PvpHistoryData& from);
  PvpHistoryData(PvpHistoryData&& from) noexcept
    : PvpHistoryData() {
    *this = ::std::move(from);
  }

  inline PvpHistoryData& operator=(const PvpHistoryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvpHistoryData& operator=(PvpHistoryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PvpHistoryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PvpHistoryData* internal_default_instance() {
    return reinterpret_cast<const PvpHistoryData*>(
               &_PvpHistoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(PvpHistoryData& a, PvpHistoryData& b) {
    a.Swap(&b);
  }
  inline void Swap(PvpHistoryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PvpHistoryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PvpHistoryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PvpHistoryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PvpHistoryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PvpHistoryData& from) {
    PvpHistoryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpHistoryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PvpHistoryData";
  }
  protected:
  explicit PvpHistoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampResultFieldNumber = 4,
    kTeachResultFieldNumber = 9,
    kExtDataFieldNumber = 10,
    kPlayerExtDataFieldNumber = 11,
    kBattleExtFieldNumber = 12,
    kPvpIdFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
    kModeFieldNumber = 3,
    kMeleeRuleFieldNumber = 5,
    kTournamentIdFieldNumber = 7,
    kGameIdFieldNumber = 8,
    kCustomSubModeFieldNumber = 6,
  };
  // .msg.CSDTPvpCampResult CampResult = 4;
  bool has_campresult() const;
  private:
  bool _internal_has_campresult() const;
  public:
  void clear_campresult();
  const ::msg::CSDTPvpCampResult& campresult() const;
  PROTOBUF_NODISCARD ::msg::CSDTPvpCampResult* release_campresult();
  ::msg::CSDTPvpCampResult* mutable_campresult();
  void set_allocated_campresult(::msg::CSDTPvpCampResult* campresult);
  private:
  const ::msg::CSDTPvpCampResult& _internal_campresult() const;
  ::msg::CSDTPvpCampResult* _internal_mutable_campresult();
  public:
  void unsafe_arena_set_allocated_campresult(
      ::msg::CSDTPvpCampResult* campresult);
  ::msg::CSDTPvpCampResult* unsafe_arena_release_campresult();

  // .msg.PvpTeachResult TeachResult = 9;
  bool has_teachresult() const;
  private:
  bool _internal_has_teachresult() const;
  public:
  void clear_teachresult();
  const ::msg::PvpTeachResult& teachresult() const;
  PROTOBUF_NODISCARD ::msg::PvpTeachResult* release_teachresult();
  ::msg::PvpTeachResult* mutable_teachresult();
  void set_allocated_teachresult(::msg::PvpTeachResult* teachresult);
  private:
  const ::msg::PvpTeachResult& _internal_teachresult() const;
  ::msg::PvpTeachResult* _internal_mutable_teachresult();
  public:
  void unsafe_arena_set_allocated_teachresult(
      ::msg::PvpTeachResult* teachresult);
  ::msg::PvpTeachResult* unsafe_arena_release_teachresult();

  // .msg.PvpExtData ExtData = 10;
  bool has_extdata() const;
  private:
  bool _internal_has_extdata() const;
  public:
  void clear_extdata();
  const ::msg::PvpExtData& extdata() const;
  PROTOBUF_NODISCARD ::msg::PvpExtData* release_extdata();
  ::msg::PvpExtData* mutable_extdata();
  void set_allocated_extdata(::msg::PvpExtData* extdata);
  private:
  const ::msg::PvpExtData& _internal_extdata() const;
  ::msg::PvpExtData* _internal_mutable_extdata();
  public:
  void unsafe_arena_set_allocated_extdata(
      ::msg::PvpExtData* extdata);
  ::msg::PvpExtData* unsafe_arena_release_extdata();

  // .msg.PlayerExtMap PlayerExtData = 11;
  bool has_playerextdata() const;
  private:
  bool _internal_has_playerextdata() const;
  public:
  void clear_playerextdata();
  const ::msg::PlayerExtMap& playerextdata() const;
  PROTOBUF_NODISCARD ::msg::PlayerExtMap* release_playerextdata();
  ::msg::PlayerExtMap* mutable_playerextdata();
  void set_allocated_playerextdata(::msg::PlayerExtMap* playerextdata);
  private:
  const ::msg::PlayerExtMap& _internal_playerextdata() const;
  ::msg::PlayerExtMap* _internal_mutable_playerextdata();
  public:
  void unsafe_arena_set_allocated_playerextdata(
      ::msg::PlayerExtMap* playerextdata);
  ::msg::PlayerExtMap* unsafe_arena_release_playerextdata();

  // .msg.BattleExtData BattleExt = 12;
  bool has_battleext() const;
  private:
  bool _internal_has_battleext() const;
  public:
  void clear_battleext();
  const ::msg::BattleExtData& battleext() const;
  PROTOBUF_NODISCARD ::msg::BattleExtData* release_battleext();
  ::msg::BattleExtData* mutable_battleext();
  void set_allocated_battleext(::msg::BattleExtData* battleext);
  private:
  const ::msg::BattleExtData& _internal_battleext() const;
  ::msg::BattleExtData* _internal_mutable_battleext();
  public:
  void unsafe_arena_set_allocated_battleext(
      ::msg::BattleExtData* battleext);
  ::msg::BattleExtData* unsafe_arena_release_battleext();

  // uint64 PvpId = 1;
  void clear_pvpid();
  uint64_t pvpid() const;
  void set_pvpid(uint64_t value);
  private:
  uint64_t _internal_pvpid() const;
  void _internal_set_pvpid(uint64_t value);
  public:

  // int64 CreateTime = 2;
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // .msg.PVPMODE Mode = 3;
  void clear_mode();
  ::msg::PVPMODE mode() const;
  void set_mode(::msg::PVPMODE value);
  private:
  ::msg::PVPMODE _internal_mode() const;
  void _internal_set_mode(::msg::PVPMODE value);
  public:

  // uint32 MeleeRule = 5;
  void clear_meleerule();
  uint32_t meleerule() const;
  void set_meleerule(uint32_t value);
  private:
  uint32_t _internal_meleerule() const;
  void _internal_set_meleerule(uint32_t value);
  public:

  // uint64 TournamentId = 7;
  void clear_tournamentid();
  uint64_t tournamentid() const;
  void set_tournamentid(uint64_t value);
  private:
  uint64_t _internal_tournamentid() const;
  void _internal_set_tournamentid(uint64_t value);
  public:

  // uint64 GameId = 8;
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // uint32 CustomSubMode = 6;
  void clear_customsubmode();
  uint32_t customsubmode() const;
  void set_customsubmode(uint32_t value);
  private:
  uint32_t _internal_customsubmode() const;
  void _internal_set_customsubmode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PvpHistoryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::CSDTPvpCampResult* campresult_;
    ::msg::PvpTeachResult* teachresult_;
    ::msg::PvpExtData* extdata_;
    ::msg::PlayerExtMap* playerextdata_;
    ::msg::BattleExtData* battleext_;
    uint64_t pvpid_;
    int64_t createtime_;
    int mode_;
    uint32_t meleerule_;
    uint64_t tournamentid_;
    uint64_t gameid_;
    uint32_t customsubmode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTGuide final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTGuide) */ {
 public:
  inline CSDTGuide() : CSDTGuide(nullptr) {}
  ~CSDTGuide() override;
  explicit PROTOBUF_CONSTEXPR CSDTGuide(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTGuide(const CSDTGuide& from);
  CSDTGuide(CSDTGuide&& from) noexcept
    : CSDTGuide() {
    *this = ::std::move(from);
  }

  inline CSDTGuide& operator=(const CSDTGuide& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTGuide& operator=(CSDTGuide&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTGuide& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTGuide* internal_default_instance() {
    return reinterpret_cast<const CSDTGuide*>(
               &_CSDTGuide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(CSDTGuide& a, CSDTGuide& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTGuide* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTGuide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTGuide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTGuide>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTGuide& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTGuide& from) {
    CSDTGuide::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTGuide* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTGuide";
  }
  protected:
  explicit CSDTGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideNameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kGuideIDFieldNumber = 3,
    kSequenceFieldNumber = 4,
    kLastSeqFieldNumber = 5,
  };
  // string GuideName = 1;
  void clear_guidename();
  const std::string& guidename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guidename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guidename();
  PROTOBUF_NODISCARD std::string* release_guidename();
  void set_allocated_guidename(std::string* guidename);
  private:
  const std::string& _internal_guidename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guidename(const std::string& value);
  std::string* _internal_mutable_guidename();
  public:

  // uint32 Status = 2;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // uint32 GuideID = 3;
  void clear_guideid();
  uint32_t guideid() const;
  void set_guideid(uint32_t value);
  private:
  uint32_t _internal_guideid() const;
  void _internal_set_guideid(uint32_t value);
  public:

  // uint32 Sequence = 4;
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // uint32 LastSeq = 5;
  void clear_lastseq();
  uint32_t lastseq() const;
  void set_lastseq(uint32_t value);
  private:
  uint32_t _internal_lastseq() const;
  void _internal_set_lastseq(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTGuide)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guidename_;
    uint32_t status_;
    uint32_t guideid_;
    uint32_t sequence_;
    uint32_t lastseq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTChat) */ {
 public:
  inline CSDTChat() : CSDTChat(nullptr) {}
  ~CSDTChat() override;
  explicit PROTOBUF_CONSTEXPR CSDTChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTChat(const CSDTChat& from);
  CSDTChat(CSDTChat&& from) noexcept
    : CSDTChat() {
    *this = ::std::move(from);
  }

  inline CSDTChat& operator=(const CSDTChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTChat& operator=(CSDTChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTChat* internal_default_instance() {
    return reinterpret_cast<const CSDTChat*>(
               &_CSDTChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(CSDTChat& a, CSDTChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTChat& from) {
    CSDTChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTChat";
  }
  protected:
  explicit CSDTChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 2,
    kContentFieldNumber = 3,
    kChannelUsrIdFieldNumber = 5,
    kEmotionIdFieldNumber = 1,
    kChannelTypeFieldNumber = 4,
    kPS4OnlyFieldNumber = 6,
    kSourceTypeFieldNumber = 7,
    kRestrictTypeFieldNumber = 8,
  };
  // string SenderId = 2;
  void clear_senderid();
  const std::string& senderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_senderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_senderid();
  PROTOBUF_NODISCARD std::string* release_senderid();
  void set_allocated_senderid(std::string* senderid);
  private:
  const std::string& _internal_senderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderid(const std::string& value);
  std::string* _internal_mutable_senderid();
  public:

  // string Content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string ChannelUsrId = 5;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // uint32 EmotionId = 1;
  void clear_emotionid();
  uint32_t emotionid() const;
  void set_emotionid(uint32_t value);
  private:
  uint32_t _internal_emotionid() const;
  void _internal_set_emotionid(uint32_t value);
  public:

  // .msg.CHANELTYPE ChannelType = 4;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // bool PS4Only = 6;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // .msg.CHATSOURCETYPE SourceType = 7;
  void clear_sourcetype();
  ::msg::CHATSOURCETYPE sourcetype() const;
  void set_sourcetype(::msg::CHATSOURCETYPE value);
  private:
  ::msg::CHATSOURCETYPE _internal_sourcetype() const;
  void _internal_set_sourcetype(::msg::CHATSOURCETYPE value);
  public:

  // .msg.UserRestrictType RestrictType = 8;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    uint32_t emotionid_;
    int channeltype_;
    bool ps4only_;
    int sourcetype_;
    int restricttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTGoods final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTGoods) */ {
 public:
  inline CSDTGoods() : CSDTGoods(nullptr) {}
  ~CSDTGoods() override;
  explicit PROTOBUF_CONSTEXPR CSDTGoods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTGoods(const CSDTGoods& from);
  CSDTGoods(CSDTGoods&& from) noexcept
    : CSDTGoods() {
    *this = ::std::move(from);
  }

  inline CSDTGoods& operator=(const CSDTGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTGoods& operator=(CSDTGoods&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTGoods& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTGoods* internal_default_instance() {
    return reinterpret_cast<const CSDTGoods*>(
               &_CSDTGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(CSDTGoods& a, CSDTGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTGoods* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTGoods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTGoods>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTGoods& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTGoods& from) {
    CSDTGoods::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTGoods* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTGoods";
  }
  protected:
  explicit CSDTGoods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // uint32 Uid = 3;
  void clear_uid();
  uint32_t uid() const;
  void set_uid(uint32_t value);
  private:
  uint32_t _internal_uid() const;
  void _internal_set_uid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTGoods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t count_;
    uint32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTGoodsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTGoodsInfo) */ {
 public:
  inline CSDTGoodsInfo() : CSDTGoodsInfo(nullptr) {}
  ~CSDTGoodsInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTGoodsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTGoodsInfo(const CSDTGoodsInfo& from);
  CSDTGoodsInfo(CSDTGoodsInfo&& from) noexcept
    : CSDTGoodsInfo() {
    *this = ::std::move(from);
  }

  inline CSDTGoodsInfo& operator=(const CSDTGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTGoodsInfo& operator=(CSDTGoodsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTGoodsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTGoodsInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTGoodsInfo*>(
               &_CSDTGoodsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(CSDTGoodsInfo& a, CSDTGoodsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTGoodsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTGoodsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTGoodsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTGoodsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTGoodsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTGoodsInfo& from) {
    CSDTGoodsInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTGoodsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTGoodsInfo";
  }
  protected:
  explicit CSDTGoodsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsInfoFieldNumber = 2,
    kRefreshTimeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .msg.CSDTGoods GoodsInfo = 2;
  int goodsinfo_size() const;
  private:
  int _internal_goodsinfo_size() const;
  public:
  void clear_goodsinfo();
  ::msg::CSDTGoods* mutable_goodsinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTGoods >*
      mutable_goodsinfo();
  private:
  const ::msg::CSDTGoods& _internal_goodsinfo(int index) const;
  ::msg::CSDTGoods* _internal_add_goodsinfo();
  public:
  const ::msg::CSDTGoods& goodsinfo(int index) const;
  ::msg::CSDTGoods* add_goodsinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTGoods >&
      goodsinfo() const;

  // int64 RefreshTime = 3;
  void clear_refreshtime();
  int64_t refreshtime() const;
  void set_refreshtime(int64_t value);
  private:
  int64_t _internal_refreshtime() const;
  void _internal_set_refreshtime(int64_t value);
  public:

  // .msg.SHOPTYPE Type = 1;
  void clear_type();
  ::msg::SHOPTYPE type() const;
  void set_type(::msg::SHOPTYPE value);
  private:
  ::msg::SHOPTYPE _internal_type() const;
  void _internal_set_type(::msg::SHOPTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTGoodsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTGoods > goodsinfo_;
    int64_t refreshtime_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MallTabData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MallTabData) */ {
 public:
  inline MallTabData() : MallTabData(nullptr) {}
  ~MallTabData() override;
  explicit PROTOBUF_CONSTEXPR MallTabData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MallTabData(const MallTabData& from);
  MallTabData(MallTabData&& from) noexcept
    : MallTabData() {
    *this = ::std::move(from);
  }

  inline MallTabData& operator=(const MallTabData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MallTabData& operator=(MallTabData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MallTabData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MallTabData* internal_default_instance() {
    return reinterpret_cast<const MallTabData*>(
               &_MallTabData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(MallTabData& a, MallTabData& b) {
    a.Swap(&b);
  }
  inline void Swap(MallTabData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MallTabData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MallTabData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MallTabData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MallTabData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MallTabData& from) {
    MallTabData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MallTabData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MallTabData";
  }
  protected:
  explicit MallTabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kSortFieldNumber = 6,
    kSkipsInterfacePcFieldNumber = 11,
    kItemTypePageFieldNumber = 12,
  };
  // string Title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .msg.MALLTABTYPE Type = 3;
  void clear_type();
  ::msg::MALLTABTYPE type() const;
  void set_type(::msg::MALLTABTYPE value);
  private:
  ::msg::MALLTABTYPE _internal_type() const;
  void _internal_set_type(::msg::MALLTABTYPE value);
  public:

  // uint32 Sort = 6;
  void clear_sort();
  uint32_t sort() const;
  void set_sort(uint32_t value);
  private:
  uint32_t _internal_sort() const;
  void _internal_set_sort(uint32_t value);
  public:

  // uint32 Skips_Interface_pc = 11;
  void clear_skips_interface_pc();
  uint32_t skips_interface_pc() const;
  void set_skips_interface_pc(uint32_t value);
  private:
  uint32_t _internal_skips_interface_pc() const;
  void _internal_set_skips_interface_pc(uint32_t value);
  public:

  // uint32 ItemTypePage = 12;
  void clear_itemtypepage();
  uint32_t itemtypepage() const;
  void set_itemtypepage(uint32_t value);
  private:
  uint32_t _internal_itemtypepage() const;
  void _internal_set_itemtypepage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MallTabData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    uint32_t id_;
    int type_;
    uint32_t sort_;
    uint32_t skips_interface_pc_;
    uint32_t itemtypepage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Skip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Skip) */ {
 public:
  inline Skip() : Skip(nullptr) {}
  ~Skip() override;
  explicit PROTOBUF_CONSTEXPR Skip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Skip(const Skip& from);
  Skip(Skip&& from) noexcept
    : Skip() {
    *this = ::std::move(from);
  }

  inline Skip& operator=(const Skip& from) {
    CopyFrom(from);
    return *this;
  }
  inline Skip& operator=(Skip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Skip& default_instance() {
    return *internal_default_instance();
  }
  static inline const Skip* internal_default_instance() {
    return reinterpret_cast<const Skip*>(
               &_Skip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(Skip& a, Skip& b) {
    a.Swap(&b);
  }
  inline void Swap(Skip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Skip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Skip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Skip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Skip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Skip& from) {
    Skip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Skip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Skip";
  }
  protected:
  explicit Skip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kTabFieldNumber = 2,
  };
  // string Interface = 1;
  void clear_interface();
  const std::string& interface() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface();
  PROTOBUF_NODISCARD std::string* release_interface();
  void set_allocated_interface(std::string* interface);
  private:
  const std::string& _internal_interface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface(const std::string& value);
  std::string* _internal_mutable_interface();
  public:

  // uint32 Tab = 2;
  void clear_tab();
  uint32_t tab() const;
  void set_tab(uint32_t value);
  private:
  uint32_t _internal_tab() const;
  void _internal_set_tab(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Skip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_;
    uint32_t tab_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MallGoodsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MallGoodsData) */ {
 public:
  inline MallGoodsData() : MallGoodsData(nullptr) {}
  ~MallGoodsData() override;
  explicit PROTOBUF_CONSTEXPR MallGoodsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MallGoodsData(const MallGoodsData& from);
  MallGoodsData(MallGoodsData&& from) noexcept
    : MallGoodsData() {
    *this = ::std::move(from);
  }

  inline MallGoodsData& operator=(const MallGoodsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MallGoodsData& operator=(MallGoodsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MallGoodsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MallGoodsData* internal_default_instance() {
    return reinterpret_cast<const MallGoodsData*>(
               &_MallGoodsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(MallGoodsData& a, MallGoodsData& b) {
    a.Swap(&b);
  }
  inline void Swap(MallGoodsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MallGoodsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MallGoodsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MallGoodsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MallGoodsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MallGoodsData& from) {
    MallGoodsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MallGoodsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MallGoodsData";
  }
  protected:
  explicit MallGoodsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kConsumesFieldNumber = 3,
    kDownloadListFieldNumber = 29,
    kPlatformListFieldNumber = 30,
    kConsumes2NdFieldNumber = 31,
    kExcludeDownloadFieldNumber = 37,
    kCountryListFieldNumber = 38,
    kGiftsFieldNumber = 41,
    kConsumeIncFieldNumber = 49,
    kVersionFieldNumber = 36,
    kVideoUrlFieldNumber = 40,
    kConsumesUrlWebFieldNumber = 52,
    kConsumesUrlAppFieldNumber = 53,
    kIdFieldNumber = 1,
    kSellCountLimitFieldNumber = 6,
    kOnSaleBeginTimeFieldNumber = 4,
    kOnSaleEndTimeFieldNumber = 5,
    kSellCountResetIntervalFieldNumber = 7,
    kFlagFieldNumber = 8,
    kRecommendFieldNumber = 10,
    kSortFieldNumber = 11,
    kMallTabIdFieldNumber = 12,
    kGroupIdFieldNumber = 17,
    kShowBeginTimeFieldNumber = 15,
    kShowEndTimeFieldNumber = 16,
    kBulkBuyingFieldNumber = 9,
    kGroupShowFirstFieldNumber = 18,
    kShowResourceFieldNumber = 19,
    kRepeatedBuyFieldNumber = 28,
    kChargePrivateParaFieldNumber = 20,
    kSellCountStartTimeFieldNumber = 21,
    kSkipsInterfacePcFieldNumber = 22,
    kMoneyOffCountFieldNumber = 23,
    kMoneyOffFieldNumber = 24,
    kRecommend2NdFieldNumber = 25,
    kRecommend3RdFieldNumber = 26,
    kZoneFieldNumber = 27,
    kOnSale2NdBeginTimeFieldNumber = 32,
    kOnSale2NdEndTimeFieldNumber = 33,
    kMoneyOff2NdCountFieldNumber = 34,
    kMoneyOff2NdFieldNumber = 35,
    kRecommendBeginTimeFieldNumber = 42,
    kRecommendEndTimeFieldNumber = 43,
    kRecommend2NdBeginTimeFieldNumber = 44,
    kRecommend2NdEndTimeFieldNumber = 46,
    kDisableDeductionFieldNumber = 39,
    kConsumesUrlFieldNumber = 51,
    kConsumeIncRefreshFieldNumber = 50,
    kRecommend3RdBeginTimeFieldNumber = 47,
    kRecommend3RdEndTimeFieldNumber = 48,
    kSeriesFieldNumber = 54,
  };
  // repeated .msg.Award Contents = 2;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::msg::Award* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
      mutable_contents();
  private:
  const ::msg::Award& _internal_contents(int index) const;
  ::msg::Award* _internal_add_contents();
  public:
  const ::msg::Award& contents(int index) const;
  ::msg::Award* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
      contents() const;

  // repeated .msg.Consume Consumes = 3;
  int consumes_size() const;
  private:
  int _internal_consumes_size() const;
  public:
  void clear_consumes();
  ::msg::Consume* mutable_consumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >*
      mutable_consumes();
  private:
  const ::msg::Consume& _internal_consumes(int index) const;
  ::msg::Consume* _internal_add_consumes();
  public:
  const ::msg::Consume& consumes(int index) const;
  ::msg::Consume* add_consumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >&
      consumes() const;

  // repeated string DownloadList = 29;
  int downloadlist_size() const;
  private:
  int _internal_downloadlist_size() const;
  public:
  void clear_downloadlist();
  const std::string& downloadlist(int index) const;
  std::string* mutable_downloadlist(int index);
  void set_downloadlist(int index, const std::string& value);
  void set_downloadlist(int index, std::string&& value);
  void set_downloadlist(int index, const char* value);
  void set_downloadlist(int index, const char* value, size_t size);
  std::string* add_downloadlist();
  void add_downloadlist(const std::string& value);
  void add_downloadlist(std::string&& value);
  void add_downloadlist(const char* value);
  void add_downloadlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& downloadlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_downloadlist();
  private:
  const std::string& _internal_downloadlist(int index) const;
  std::string* _internal_add_downloadlist();
  public:

  // repeated .msg.PLATFORMTYPE PlatformList = 30;
  int platformlist_size() const;
  private:
  int _internal_platformlist_size() const;
  public:
  void clear_platformlist();
  private:
  ::msg::PLATFORMTYPE _internal_platformlist(int index) const;
  void _internal_add_platformlist(::msg::PLATFORMTYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_platformlist();
  public:
  ::msg::PLATFORMTYPE platformlist(int index) const;
  void set_platformlist(int index, ::msg::PLATFORMTYPE value);
  void add_platformlist(::msg::PLATFORMTYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& platformlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_platformlist();

  // repeated .msg.Consume Consumes2Nd = 31;
  int consumes2nd_size() const;
  private:
  int _internal_consumes2nd_size() const;
  public:
  void clear_consumes2nd();
  ::msg::Consume* mutable_consumes2nd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >*
      mutable_consumes2nd();
  private:
  const ::msg::Consume& _internal_consumes2nd(int index) const;
  ::msg::Consume* _internal_add_consumes2nd();
  public:
  const ::msg::Consume& consumes2nd(int index) const;
  ::msg::Consume* add_consumes2nd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >&
      consumes2nd() const;

  // repeated string ExcludeDownload = 37;
  int excludedownload_size() const;
  private:
  int _internal_excludedownload_size() const;
  public:
  void clear_excludedownload();
  const std::string& excludedownload(int index) const;
  std::string* mutable_excludedownload(int index);
  void set_excludedownload(int index, const std::string& value);
  void set_excludedownload(int index, std::string&& value);
  void set_excludedownload(int index, const char* value);
  void set_excludedownload(int index, const char* value, size_t size);
  std::string* add_excludedownload();
  void add_excludedownload(const std::string& value);
  void add_excludedownload(std::string&& value);
  void add_excludedownload(const char* value);
  void add_excludedownload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedownload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedownload();
  private:
  const std::string& _internal_excludedownload(int index) const;
  std::string* _internal_add_excludedownload();
  public:

  // repeated string CountryList = 38;
  int countrylist_size() const;
  private:
  int _internal_countrylist_size() const;
  public:
  void clear_countrylist();
  const std::string& countrylist(int index) const;
  std::string* mutable_countrylist(int index);
  void set_countrylist(int index, const std::string& value);
  void set_countrylist(int index, std::string&& value);
  void set_countrylist(int index, const char* value);
  void set_countrylist(int index, const char* value, size_t size);
  std::string* add_countrylist();
  void add_countrylist(const std::string& value);
  void add_countrylist(std::string&& value);
  void add_countrylist(const char* value);
  void add_countrylist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& countrylist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_countrylist();
  private:
  const std::string& _internal_countrylist(int index) const;
  std::string* _internal_add_countrylist();
  public:

  // repeated .msg.Award Gifts = 41;
  int gifts_size() const;
  private:
  int _internal_gifts_size() const;
  public:
  void clear_gifts();
  ::msg::Award* mutable_gifts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
      mutable_gifts();
  private:
  const ::msg::Award& _internal_gifts(int index) const;
  ::msg::Award* _internal_add_gifts();
  public:
  const ::msg::Award& gifts(int index) const;
  ::msg::Award* add_gifts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
      gifts() const;

  // repeated .msg.ConsumeIncrease ConsumeInc = 49;
  int consumeinc_size() const;
  private:
  int _internal_consumeinc_size() const;
  public:
  void clear_consumeinc();
  ::msg::ConsumeIncrease* mutable_consumeinc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ConsumeIncrease >*
      mutable_consumeinc();
  private:
  const ::msg::ConsumeIncrease& _internal_consumeinc(int index) const;
  ::msg::ConsumeIncrease* _internal_add_consumeinc();
  public:
  const ::msg::ConsumeIncrease& consumeinc(int index) const;
  ::msg::ConsumeIncrease* add_consumeinc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ConsumeIncrease >&
      consumeinc() const;

  // string Version = 36;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string VideoUrl = 40;
  void clear_videourl();
  const std::string& videourl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_videourl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_videourl();
  PROTOBUF_NODISCARD std::string* release_videourl();
  void set_allocated_videourl(std::string* videourl);
  private:
  const std::string& _internal_videourl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_videourl(const std::string& value);
  std::string* _internal_mutable_videourl();
  public:

  // string ConsumesUrlWeb = 52;
  void clear_consumesurlweb();
  const std::string& consumesurlweb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumesurlweb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumesurlweb();
  PROTOBUF_NODISCARD std::string* release_consumesurlweb();
  void set_allocated_consumesurlweb(std::string* consumesurlweb);
  private:
  const std::string& _internal_consumesurlweb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumesurlweb(const std::string& value);
  std::string* _internal_mutable_consumesurlweb();
  public:

  // string ConsumesUrlApp = 53;
  void clear_consumesurlapp();
  const std::string& consumesurlapp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consumesurlapp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consumesurlapp();
  PROTOBUF_NODISCARD std::string* release_consumesurlapp();
  void set_allocated_consumesurlapp(std::string* consumesurlapp);
  private:
  const std::string& _internal_consumesurlapp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consumesurlapp(const std::string& value);
  std::string* _internal_mutable_consumesurlapp();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 SellCountLimit = 6;
  void clear_sellcountlimit();
  uint32_t sellcountlimit() const;
  void set_sellcountlimit(uint32_t value);
  private:
  uint32_t _internal_sellcountlimit() const;
  void _internal_set_sellcountlimit(uint32_t value);
  public:

  // int64 OnSaleBeginTime = 4;
  void clear_onsalebegintime();
  int64_t onsalebegintime() const;
  void set_onsalebegintime(int64_t value);
  private:
  int64_t _internal_onsalebegintime() const;
  void _internal_set_onsalebegintime(int64_t value);
  public:

  // int64 OnSaleEndTime = 5;
  void clear_onsaleendtime();
  int64_t onsaleendtime() const;
  void set_onsaleendtime(int64_t value);
  private:
  int64_t _internal_onsaleendtime() const;
  void _internal_set_onsaleendtime(int64_t value);
  public:

  // uint32 SellCountResetInterval = 7;
  void clear_sellcountresetinterval();
  uint32_t sellcountresetinterval() const;
  void set_sellcountresetinterval(uint32_t value);
  private:
  uint32_t _internal_sellcountresetinterval() const;
  void _internal_set_sellcountresetinterval(uint32_t value);
  public:

  // .msg.MALL_GOODS_FLAG Flag = 8;
  void clear_flag();
  ::msg::MALL_GOODS_FLAG flag() const;
  void set_flag(::msg::MALL_GOODS_FLAG value);
  private:
  ::msg::MALL_GOODS_FLAG _internal_flag() const;
  void _internal_set_flag(::msg::MALL_GOODS_FLAG value);
  public:

  // uint32 Recommend = 10;
  void clear_recommend();
  uint32_t recommend() const;
  void set_recommend(uint32_t value);
  private:
  uint32_t _internal_recommend() const;
  void _internal_set_recommend(uint32_t value);
  public:

  // uint32 Sort = 11;
  void clear_sort();
  uint32_t sort() const;
  void set_sort(uint32_t value);
  private:
  uint32_t _internal_sort() const;
  void _internal_set_sort(uint32_t value);
  public:

  // uint32 MallTabId = 12;
  void clear_malltabid();
  uint32_t malltabid() const;
  void set_malltabid(uint32_t value);
  private:
  uint32_t _internal_malltabid() const;
  void _internal_set_malltabid(uint32_t value);
  public:

  // uint32 GroupId = 17;
  void clear_groupid();
  uint32_t groupid() const;
  void set_groupid(uint32_t value);
  private:
  uint32_t _internal_groupid() const;
  void _internal_set_groupid(uint32_t value);
  public:

  // int64 ShowBeginTime = 15;
  void clear_showbegintime();
  int64_t showbegintime() const;
  void set_showbegintime(int64_t value);
  private:
  int64_t _internal_showbegintime() const;
  void _internal_set_showbegintime(int64_t value);
  public:

  // int64 ShowEndTime = 16;
  void clear_showendtime();
  int64_t showendtime() const;
  void set_showendtime(int64_t value);
  private:
  int64_t _internal_showendtime() const;
  void _internal_set_showendtime(int64_t value);
  public:

  // bool BulkBuying = 9;
  void clear_bulkbuying();
  bool bulkbuying() const;
  void set_bulkbuying(bool value);
  private:
  bool _internal_bulkbuying() const;
  void _internal_set_bulkbuying(bool value);
  public:

  // bool GroupShowFirst = 18;
  void clear_groupshowfirst();
  bool groupshowfirst() const;
  void set_groupshowfirst(bool value);
  private:
  bool _internal_groupshowfirst() const;
  void _internal_set_groupshowfirst(bool value);
  public:

  // bool ShowResource = 19;
  void clear_showresource();
  bool showresource() const;
  void set_showresource(bool value);
  private:
  bool _internal_showresource() const;
  void _internal_set_showresource(bool value);
  public:

  // bool RepeatedBuy = 28;
  void clear_repeatedbuy();
  bool repeatedbuy() const;
  void set_repeatedbuy(bool value);
  private:
  bool _internal_repeatedbuy() const;
  void _internal_set_repeatedbuy(bool value);
  public:

  // uint32 ChargePrivatePara = 20;
  void clear_chargeprivatepara();
  uint32_t chargeprivatepara() const;
  void set_chargeprivatepara(uint32_t value);
  private:
  uint32_t _internal_chargeprivatepara() const;
  void _internal_set_chargeprivatepara(uint32_t value);
  public:

  // int64 SellCountStartTime = 21;
  void clear_sellcountstarttime();
  int64_t sellcountstarttime() const;
  void set_sellcountstarttime(int64_t value);
  private:
  int64_t _internal_sellcountstarttime() const;
  void _internal_set_sellcountstarttime(int64_t value);
  public:

  // int32 Skips_Interface_pc = 22;
  void clear_skips_interface_pc();
  int32_t skips_interface_pc() const;
  void set_skips_interface_pc(int32_t value);
  private:
  int32_t _internal_skips_interface_pc() const;
  void _internal_set_skips_interface_pc(int32_t value);
  public:

  // uint32 MoneyOffCount = 23;
  void clear_moneyoffcount();
  uint32_t moneyoffcount() const;
  void set_moneyoffcount(uint32_t value);
  private:
  uint32_t _internal_moneyoffcount() const;
  void _internal_set_moneyoffcount(uint32_t value);
  public:

  // uint32 MoneyOff = 24;
  void clear_moneyoff();
  uint32_t moneyoff() const;
  void set_moneyoff(uint32_t value);
  private:
  uint32_t _internal_moneyoff() const;
  void _internal_set_moneyoff(uint32_t value);
  public:

  // uint32 Recommend2Nd = 25;
  void clear_recommend2nd();
  uint32_t recommend2nd() const;
  void set_recommend2nd(uint32_t value);
  private:
  uint32_t _internal_recommend2nd() const;
  void _internal_set_recommend2nd(uint32_t value);
  public:

  // uint32 Recommend3Rd = 26;
  void clear_recommend3rd();
  uint32_t recommend3rd() const;
  void set_recommend3rd(uint32_t value);
  private:
  uint32_t _internal_recommend3rd() const;
  void _internal_set_recommend3rd(uint32_t value);
  public:

  // uint32 Zone = 27;
  void clear_zone();
  uint32_t zone() const;
  void set_zone(uint32_t value);
  private:
  uint32_t _internal_zone() const;
  void _internal_set_zone(uint32_t value);
  public:

  // int64 OnSale2NdBeginTime = 32;
  void clear_onsale2ndbegintime();
  int64_t onsale2ndbegintime() const;
  void set_onsale2ndbegintime(int64_t value);
  private:
  int64_t _internal_onsale2ndbegintime() const;
  void _internal_set_onsale2ndbegintime(int64_t value);
  public:

  // int64 OnSale2NdEndTime = 33;
  void clear_onsale2ndendtime();
  int64_t onsale2ndendtime() const;
  void set_onsale2ndendtime(int64_t value);
  private:
  int64_t _internal_onsale2ndendtime() const;
  void _internal_set_onsale2ndendtime(int64_t value);
  public:

  // uint32 MoneyOff2NdCount = 34;
  void clear_moneyoff2ndcount();
  uint32_t moneyoff2ndcount() const;
  void set_moneyoff2ndcount(uint32_t value);
  private:
  uint32_t _internal_moneyoff2ndcount() const;
  void _internal_set_moneyoff2ndcount(uint32_t value);
  public:

  // uint32 MoneyOff2Nd = 35;
  void clear_moneyoff2nd();
  uint32_t moneyoff2nd() const;
  void set_moneyoff2nd(uint32_t value);
  private:
  uint32_t _internal_moneyoff2nd() const;
  void _internal_set_moneyoff2nd(uint32_t value);
  public:

  // int64 RecommendBeginTime = 42;
  void clear_recommendbegintime();
  int64_t recommendbegintime() const;
  void set_recommendbegintime(int64_t value);
  private:
  int64_t _internal_recommendbegintime() const;
  void _internal_set_recommendbegintime(int64_t value);
  public:

  // int64 RecommendEndTime = 43;
  void clear_recommendendtime();
  int64_t recommendendtime() const;
  void set_recommendendtime(int64_t value);
  private:
  int64_t _internal_recommendendtime() const;
  void _internal_set_recommendendtime(int64_t value);
  public:

  // int64 Recommend2NdBeginTime = 44;
  void clear_recommend2ndbegintime();
  int64_t recommend2ndbegintime() const;
  void set_recommend2ndbegintime(int64_t value);
  private:
  int64_t _internal_recommend2ndbegintime() const;
  void _internal_set_recommend2ndbegintime(int64_t value);
  public:

  // int64 Recommend2NdEndTime = 46;
  void clear_recommend2ndendtime();
  int64_t recommend2ndendtime() const;
  void set_recommend2ndendtime(int64_t value);
  private:
  int64_t _internal_recommend2ndendtime() const;
  void _internal_set_recommend2ndendtime(int64_t value);
  public:

  // bool DisableDeduction = 39;
  void clear_disablededuction();
  bool disablededuction() const;
  void set_disablededuction(bool value);
  private:
  bool _internal_disablededuction() const;
  void _internal_set_disablededuction(bool value);
  public:

  // bool ConsumesUrl = 51;
  void clear_consumesurl();
  bool consumesurl() const;
  void set_consumesurl(bool value);
  private:
  bool _internal_consumesurl() const;
  void _internal_set_consumesurl(bool value);
  public:

  // .msg.ConsumeIncreaseRefresh ConsumeIncRefresh = 50;
  void clear_consumeincrefresh();
  ::msg::ConsumeIncreaseRefresh consumeincrefresh() const;
  void set_consumeincrefresh(::msg::ConsumeIncreaseRefresh value);
  private:
  ::msg::ConsumeIncreaseRefresh _internal_consumeincrefresh() const;
  void _internal_set_consumeincrefresh(::msg::ConsumeIncreaseRefresh value);
  public:

  // int64 Recommend3RdBeginTime = 47;
  void clear_recommend3rdbegintime();
  int64_t recommend3rdbegintime() const;
  void set_recommend3rdbegintime(int64_t value);
  private:
  int64_t _internal_recommend3rdbegintime() const;
  void _internal_set_recommend3rdbegintime(int64_t value);
  public:

  // int64 Recommend3RdEndTime = 48;
  void clear_recommend3rdendtime();
  int64_t recommend3rdendtime() const;
  void set_recommend3rdendtime(int64_t value);
  private:
  int64_t _internal_recommend3rdendtime() const;
  void _internal_set_recommend3rdendtime(int64_t value);
  public:

  // uint32 Series = 54;
  void clear_series();
  uint32_t series() const;
  void set_series(uint32_t value);
  private:
  uint32_t _internal_series() const;
  void _internal_set_series(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MallGoodsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award > contents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume > consumes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> downloadlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> platformlist_;
    mutable std::atomic<int> _platformlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume > consumes2nd_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedownload_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> countrylist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award > gifts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ConsumeIncrease > consumeinc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr videourl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumesurlweb_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumesurlapp_;
    uint32_t id_;
    uint32_t sellcountlimit_;
    int64_t onsalebegintime_;
    int64_t onsaleendtime_;
    uint32_t sellcountresetinterval_;
    int flag_;
    uint32_t recommend_;
    uint32_t sort_;
    uint32_t malltabid_;
    uint32_t groupid_;
    int64_t showbegintime_;
    int64_t showendtime_;
    bool bulkbuying_;
    bool groupshowfirst_;
    bool showresource_;
    bool repeatedbuy_;
    uint32_t chargeprivatepara_;
    int64_t sellcountstarttime_;
    int32_t skips_interface_pc_;
    uint32_t moneyoffcount_;
    uint32_t moneyoff_;
    uint32_t recommend2nd_;
    uint32_t recommend3rd_;
    uint32_t zone_;
    int64_t onsale2ndbegintime_;
    int64_t onsale2ndendtime_;
    uint32_t moneyoff2ndcount_;
    uint32_t moneyoff2nd_;
    int64_t recommendbegintime_;
    int64_t recommendendtime_;
    int64_t recommend2ndbegintime_;
    int64_t recommend2ndendtime_;
    bool disablededuction_;
    bool consumesurl_;
    int consumeincrefresh_;
    int64_t recommend3rdbegintime_;
    int64_t recommend3rdendtime_;
    uint32_t series_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ConsumeIncrease final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ConsumeIncrease) */ {
 public:
  inline ConsumeIncrease() : ConsumeIncrease(nullptr) {}
  ~ConsumeIncrease() override;
  explicit PROTOBUF_CONSTEXPR ConsumeIncrease(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsumeIncrease(const ConsumeIncrease& from);
  ConsumeIncrease(ConsumeIncrease&& from) noexcept
    : ConsumeIncrease() {
    *this = ::std::move(from);
  }

  inline ConsumeIncrease& operator=(const ConsumeIncrease& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeIncrease& operator=(ConsumeIncrease&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsumeIncrease& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsumeIncrease* internal_default_instance() {
    return reinterpret_cast<const ConsumeIncrease*>(
               &_ConsumeIncrease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(ConsumeIncrease& a, ConsumeIncrease& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumeIncrease* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumeIncrease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsumeIncrease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsumeIncrease>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsumeIncrease& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsumeIncrease& from) {
    ConsumeIncrease::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeIncrease* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ConsumeIncrease";
  }
  protected:
  explicit ConsumeIncrease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint32 Count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ConsumeIncrease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMallGoodsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMallGoodsData) */ {
 public:
  inline CSDTMallGoodsData() : CSDTMallGoodsData(nullptr) {}
  ~CSDTMallGoodsData() override;
  explicit PROTOBUF_CONSTEXPR CSDTMallGoodsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMallGoodsData(const CSDTMallGoodsData& from);
  CSDTMallGoodsData(CSDTMallGoodsData&& from) noexcept
    : CSDTMallGoodsData() {
    *this = ::std::move(from);
  }

  inline CSDTMallGoodsData& operator=(const CSDTMallGoodsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMallGoodsData& operator=(CSDTMallGoodsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMallGoodsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMallGoodsData* internal_default_instance() {
    return reinterpret_cast<const CSDTMallGoodsData*>(
               &_CSDTMallGoodsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(CSDTMallGoodsData& a, CSDTMallGoodsData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMallGoodsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMallGoodsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMallGoodsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMallGoodsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMallGoodsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMallGoodsData& from) {
    CSDTMallGoodsData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMallGoodsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMallGoodsData";
  }
  protected:
  explicit CSDTMallGoodsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMallGoodsFieldNumber = 1,
    kLastResetTimeFieldNumber = 3,
    kBuyCountFieldNumber = 2,
  };
  // .msg.MallGoodsData MallGoods = 1;
  bool has_mallgoods() const;
  private:
  bool _internal_has_mallgoods() const;
  public:
  void clear_mallgoods();
  const ::msg::MallGoodsData& mallgoods() const;
  PROTOBUF_NODISCARD ::msg::MallGoodsData* release_mallgoods();
  ::msg::MallGoodsData* mutable_mallgoods();
  void set_allocated_mallgoods(::msg::MallGoodsData* mallgoods);
  private:
  const ::msg::MallGoodsData& _internal_mallgoods() const;
  ::msg::MallGoodsData* _internal_mutable_mallgoods();
  public:
  void unsafe_arena_set_allocated_mallgoods(
      ::msg::MallGoodsData* mallgoods);
  ::msg::MallGoodsData* unsafe_arena_release_mallgoods();

  // int64 LastResetTime = 3;
  void clear_lastresettime();
  int64_t lastresettime() const;
  void set_lastresettime(int64_t value);
  private:
  int64_t _internal_lastresettime() const;
  void _internal_set_lastresettime(int64_t value);
  public:

  // uint32 BuyCount = 2;
  void clear_buycount();
  uint32_t buycount() const;
  void set_buycount(uint32_t value);
  private:
  uint32_t _internal_buycount() const;
  void _internal_set_buycount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMallGoodsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::MallGoodsData* mallgoods_;
    int64_t lastresettime_;
    uint32_t buycount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMallGoods final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMallGoods) */ {
 public:
  inline CSDTMallGoods() : CSDTMallGoods(nullptr) {}
  ~CSDTMallGoods() override;
  explicit PROTOBUF_CONSTEXPR CSDTMallGoods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMallGoods(const CSDTMallGoods& from);
  CSDTMallGoods(CSDTMallGoods&& from) noexcept
    : CSDTMallGoods() {
    *this = ::std::move(from);
  }

  inline CSDTMallGoods& operator=(const CSDTMallGoods& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMallGoods& operator=(CSDTMallGoods&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMallGoods& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMallGoods* internal_default_instance() {
    return reinterpret_cast<const CSDTMallGoods*>(
               &_CSDTMallGoods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(CSDTMallGoods& a, CSDTMallGoods& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMallGoods* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMallGoods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMallGoods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMallGoods>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMallGoods& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMallGoods& from) {
    CSDTMallGoods::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMallGoods* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMallGoods";
  }
  protected:
  explicit CSDTMallGoods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMallGoodsFieldNumber = 1,
  };
  // repeated .msg.CSDTMallGoodsData MallGoods = 1;
  int mallgoods_size() const;
  private:
  int _internal_mallgoods_size() const;
  public:
  void clear_mallgoods();
  ::msg::CSDTMallGoodsData* mutable_mallgoods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallGoodsData >*
      mutable_mallgoods();
  private:
  const ::msg::CSDTMallGoodsData& _internal_mallgoods(int index) const;
  ::msg::CSDTMallGoodsData* _internal_add_mallgoods();
  public:
  const ::msg::CSDTMallGoodsData& mallgoods(int index) const;
  ::msg::CSDTMallGoodsData* add_mallgoods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallGoodsData >&
      mallgoods() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTMallGoods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallGoodsData > mallgoods_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMallBuyCountData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMallBuyCountData) */ {
 public:
  inline CSDTMallBuyCountData() : CSDTMallBuyCountData(nullptr) {}
  ~CSDTMallBuyCountData() override;
  explicit PROTOBUF_CONSTEXPR CSDTMallBuyCountData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMallBuyCountData(const CSDTMallBuyCountData& from);
  CSDTMallBuyCountData(CSDTMallBuyCountData&& from) noexcept
    : CSDTMallBuyCountData() {
    *this = ::std::move(from);
  }

  inline CSDTMallBuyCountData& operator=(const CSDTMallBuyCountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMallBuyCountData& operator=(CSDTMallBuyCountData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMallBuyCountData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMallBuyCountData* internal_default_instance() {
    return reinterpret_cast<const CSDTMallBuyCountData*>(
               &_CSDTMallBuyCountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(CSDTMallBuyCountData& a, CSDTMallBuyCountData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMallBuyCountData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMallBuyCountData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMallBuyCountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMallBuyCountData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMallBuyCountData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMallBuyCountData& from) {
    CSDTMallBuyCountData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMallBuyCountData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMallBuyCountData";
  }
  protected:
  explicit CSDTMallBuyCountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBuyCountFieldNumber = 2,
    kLastResetTimeFieldNumber = 3,
  };
  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 BuyCount = 2;
  void clear_buycount();
  uint32_t buycount() const;
  void set_buycount(uint32_t value);
  private:
  uint32_t _internal_buycount() const;
  void _internal_set_buycount(uint32_t value);
  public:

  // int64 LastResetTime = 3;
  void clear_lastresettime();
  int64_t lastresettime() const;
  void set_lastresettime(int64_t value);
  private:
  int64_t _internal_lastresettime() const;
  void _internal_set_lastresettime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMallBuyCountData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t buycount_;
    int64_t lastresettime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMallBuyCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMallBuyCount) */ {
 public:
  inline CSDTMallBuyCount() : CSDTMallBuyCount(nullptr) {}
  ~CSDTMallBuyCount() override;
  explicit PROTOBUF_CONSTEXPR CSDTMallBuyCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMallBuyCount(const CSDTMallBuyCount& from);
  CSDTMallBuyCount(CSDTMallBuyCount&& from) noexcept
    : CSDTMallBuyCount() {
    *this = ::std::move(from);
  }

  inline CSDTMallBuyCount& operator=(const CSDTMallBuyCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMallBuyCount& operator=(CSDTMallBuyCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMallBuyCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMallBuyCount* internal_default_instance() {
    return reinterpret_cast<const CSDTMallBuyCount*>(
               &_CSDTMallBuyCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(CSDTMallBuyCount& a, CSDTMallBuyCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMallBuyCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMallBuyCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMallBuyCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMallBuyCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMallBuyCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMallBuyCount& from) {
    CSDTMallBuyCount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMallBuyCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMallBuyCount";
  }
  protected:
  explicit CSDTMallBuyCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMallGoodsFieldNumber = 1,
  };
  // repeated .msg.CSDTMallBuyCountData MallGoods = 1;
  int mallgoods_size() const;
  private:
  int _internal_mallgoods_size() const;
  public:
  void clear_mallgoods();
  ::msg::CSDTMallBuyCountData* mutable_mallgoods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallBuyCountData >*
      mutable_mallgoods();
  private:
  const ::msg::CSDTMallBuyCountData& _internal_mallgoods(int index) const;
  ::msg::CSDTMallBuyCountData* _internal_add_mallgoods();
  public:
  const ::msg::CSDTMallBuyCountData& mallgoods(int index) const;
  ::msg::CSDTMallBuyCountData* add_mallgoods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallBuyCountData >&
      mallgoods() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTMallBuyCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallBuyCountData > mallgoods_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MallNoticeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MallNoticeData) */ {
 public:
  inline MallNoticeData() : MallNoticeData(nullptr) {}
  ~MallNoticeData() override;
  explicit PROTOBUF_CONSTEXPR MallNoticeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MallNoticeData(const MallNoticeData& from);
  MallNoticeData(MallNoticeData&& from) noexcept
    : MallNoticeData() {
    *this = ::std::move(from);
  }

  inline MallNoticeData& operator=(const MallNoticeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MallNoticeData& operator=(MallNoticeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MallNoticeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MallNoticeData* internal_default_instance() {
    return reinterpret_cast<const MallNoticeData*>(
               &_MallNoticeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(MallNoticeData& a, MallNoticeData& b) {
    a.Swap(&b);
  }
  inline void Swap(MallNoticeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MallNoticeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MallNoticeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MallNoticeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MallNoticeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MallNoticeData& from) {
    MallNoticeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MallNoticeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MallNoticeData";
  }
  protected:
  explicit MallNoticeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicNameFieldNumber = 2,
    kSkipNameFieldNumber = 5,
    kCountryFieldNumber = 8,
    kShowBeginTimeFieldNumber = 9,
    kShowEndTimeFieldNumber = 10,
    kIdFieldNumber = 1,
    kSortIdFieldNumber = 3,
    kSkipTypeFieldNumber = 4,
    kSkipTapFieldNumber = 6,
    kMallGoodsIdFieldNumber = 7,
  };
  // string PicName = 2;
  void clear_picname();
  const std::string& picname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picname();
  PROTOBUF_NODISCARD std::string* release_picname();
  void set_allocated_picname(std::string* picname);
  private:
  const std::string& _internal_picname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picname(const std::string& value);
  std::string* _internal_mutable_picname();
  public:

  // string SkipName = 5;
  void clear_skipname();
  const std::string& skipname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skipname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skipname();
  PROTOBUF_NODISCARD std::string* release_skipname();
  void set_allocated_skipname(std::string* skipname);
  private:
  const std::string& _internal_skipname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skipname(const std::string& value);
  std::string* _internal_mutable_skipname();
  public:

  // string Country = 8;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string ShowBeginTime = 9;
  void clear_showbegintime();
  const std::string& showbegintime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_showbegintime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_showbegintime();
  PROTOBUF_NODISCARD std::string* release_showbegintime();
  void set_allocated_showbegintime(std::string* showbegintime);
  private:
  const std::string& _internal_showbegintime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_showbegintime(const std::string& value);
  std::string* _internal_mutable_showbegintime();
  public:

  // string ShowEndTime = 10;
  void clear_showendtime();
  const std::string& showendtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_showendtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_showendtime();
  PROTOBUF_NODISCARD std::string* release_showendtime();
  void set_allocated_showendtime(std::string* showendtime);
  private:
  const std::string& _internal_showendtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_showendtime(const std::string& value);
  std::string* _internal_mutable_showendtime();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 SortId = 3;
  void clear_sortid();
  uint32_t sortid() const;
  void set_sortid(uint32_t value);
  private:
  uint32_t _internal_sortid() const;
  void _internal_set_sortid(uint32_t value);
  public:

  // .msg.SKIPTYPE SkipType = 4;
  void clear_skiptype();
  ::msg::SKIPTYPE skiptype() const;
  void set_skiptype(::msg::SKIPTYPE value);
  private:
  ::msg::SKIPTYPE _internal_skiptype() const;
  void _internal_set_skiptype(::msg::SKIPTYPE value);
  public:

  // uint32 SkipTap = 6;
  void clear_skiptap();
  uint32_t skiptap() const;
  void set_skiptap(uint32_t value);
  private:
  uint32_t _internal_skiptap() const;
  void _internal_set_skiptap(uint32_t value);
  public:

  // uint32 MallGoodsId = 7;
  void clear_mallgoodsid();
  uint32_t mallgoodsid() const;
  void set_mallgoodsid(uint32_t value);
  private:
  uint32_t _internal_mallgoodsid() const;
  void _internal_set_mallgoodsid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MallNoticeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skipname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showbegintime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showendtime_;
    uint32_t id_;
    uint32_t sortid_;
    int skiptype_;
    uint32_t skiptap_;
    uint32_t mallgoodsid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTCommonRandList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTCommonRandList) */ {
 public:
  inline CSDTCommonRandList() : CSDTCommonRandList(nullptr) {}
  ~CSDTCommonRandList() override;
  explicit PROTOBUF_CONSTEXPR CSDTCommonRandList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTCommonRandList(const CSDTCommonRandList& from);
  CSDTCommonRandList(CSDTCommonRandList&& from) noexcept
    : CSDTCommonRandList() {
    *this = ::std::move(from);
  }

  inline CSDTCommonRandList& operator=(const CSDTCommonRandList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTCommonRandList& operator=(CSDTCommonRandList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTCommonRandList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTCommonRandList* internal_default_instance() {
    return reinterpret_cast<const CSDTCommonRandList*>(
               &_CSDTCommonRandList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(CSDTCommonRandList& a, CSDTCommonRandList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTCommonRandList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTCommonRandList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTCommonRandList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTCommonRandList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTCommonRandList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTCommonRandList& from) {
    CSDTCommonRandList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTCommonRandList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTCommonRandList";
  }
  protected:
  explicit CSDTCommonRandList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 List = 2;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  private:
  uint32_t _internal_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_list() const;
  void _internal_add_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_list();
  public:
  uint32_t list(int index) const;
  void set_list(int index, uint32_t value);
  void add_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_list();

  // .msg.ITEMTYPE Type = 1;
  void clear_type();
  ::msg::ITEMTYPE type() const;
  void set_type(::msg::ITEMTYPE value);
  private:
  ::msg::ITEMTYPE _internal_type() const;
  void _internal_set_type(::msg::ITEMTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTCommonRandList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > list_;
    mutable std::atomic<int> _list_cached_byte_size_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Sign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Sign) */ {
 public:
  inline Sign() : Sign(nullptr) {}
  ~Sign() override;
  explicit PROTOBUF_CONSTEXPR Sign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sign(const Sign& from);
  Sign(Sign&& from) noexcept
    : Sign() {
    *this = ::std::move(from);
  }

  inline Sign& operator=(const Sign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sign& operator=(Sign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sign& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sign* internal_default_instance() {
    return reinterpret_cast<const Sign*>(
               &_Sign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(Sign& a, Sign& b) {
    a.Swap(&b);
  }
  inline void Swap(Sign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sign& from) {
    Sign::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Sign";
  }
  protected:
  explicit Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kAwardDayFieldNumber = 2,
  };
  // uint32 Day = 1;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // uint32 AwardDay = 2;
  void clear_awardday();
  uint32_t awardday() const;
  void set_awardday(uint32_t value);
  private:
  uint32_t _internal_awardday() const;
  void _internal_set_awardday(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Sign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t day_;
    uint32_t awardday_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTSignData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTSignData) */ {
 public:
  inline CSDTSignData() : CSDTSignData(nullptr) {}
  ~CSDTSignData() override;
  explicit PROTOBUF_CONSTEXPR CSDTSignData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTSignData(const CSDTSignData& from);
  CSDTSignData(CSDTSignData&& from) noexcept
    : CSDTSignData() {
    *this = ::std::move(from);
  }

  inline CSDTSignData& operator=(const CSDTSignData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTSignData& operator=(CSDTSignData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTSignData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTSignData* internal_default_instance() {
    return reinterpret_cast<const CSDTSignData*>(
               &_CSDTSignData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(CSDTSignData& a, CSDTSignData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTSignData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTSignData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTSignData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTSignData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTSignData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTSignData& from) {
    CSDTSignData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTSignData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTSignData";
  }
  protected:
  explicit CSDTSignData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignListFieldNumber = 1,
    kShareAwardFieldNumber = 4,
    kFitFieldNumber = 5,
    kAvoidFieldNumber = 6,
    kTodayAwardDayFieldNumber = 2,
    kShareCountFieldNumber = 3,
    kLuckyChessFieldNumber = 7,
    kFortuneProverbFieldNumber = 8,
    kFitAvoidFieldNumber = 9,
  };
  // repeated .msg.Sign SignList = 1;
  int signlist_size() const;
  private:
  int _internal_signlist_size() const;
  public:
  void clear_signlist();
  ::msg::Sign* mutable_signlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Sign >*
      mutable_signlist();
  private:
  const ::msg::Sign& _internal_signlist(int index) const;
  ::msg::Sign* _internal_add_signlist();
  public:
  const ::msg::Sign& signlist(int index) const;
  ::msg::Sign* add_signlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Sign >&
      signlist() const;

  // repeated uint32 ShareAward = 4;
  int shareaward_size() const;
  private:
  int _internal_shareaward_size() const;
  public:
  void clear_shareaward();
  private:
  uint32_t _internal_shareaward(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_shareaward() const;
  void _internal_add_shareaward(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_shareaward();
  public:
  uint32_t shareaward(int index) const;
  void set_shareaward(int index, uint32_t value);
  void add_shareaward(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      shareaward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_shareaward();

  // repeated uint32 Fit = 5;
  int fit_size() const;
  private:
  int _internal_fit_size() const;
  public:
  void clear_fit();
  private:
  uint32_t _internal_fit(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_fit() const;
  void _internal_add_fit(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_fit();
  public:
  uint32_t fit(int index) const;
  void set_fit(int index, uint32_t value);
  void add_fit(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      fit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_fit();

  // repeated uint32 Avoid = 6;
  int avoid_size() const;
  private:
  int _internal_avoid_size() const;
  public:
  void clear_avoid();
  private:
  uint32_t _internal_avoid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_avoid() const;
  void _internal_add_avoid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_avoid();
  public:
  uint32_t avoid(int index) const;
  void set_avoid(int index, uint32_t value);
  void add_avoid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      avoid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_avoid();

  // uint32 TodayAwardDay = 2;
  void clear_todayawardday();
  uint32_t todayawardday() const;
  void set_todayawardday(uint32_t value);
  private:
  uint32_t _internal_todayawardday() const;
  void _internal_set_todayawardday(uint32_t value);
  public:

  // uint32 ShareCount = 3;
  void clear_sharecount();
  uint32_t sharecount() const;
  void set_sharecount(uint32_t value);
  private:
  uint32_t _internal_sharecount() const;
  void _internal_set_sharecount(uint32_t value);
  public:

  // uint32 LuckyChess = 7;
  void clear_luckychess();
  uint32_t luckychess() const;
  void set_luckychess(uint32_t value);
  private:
  uint32_t _internal_luckychess() const;
  void _internal_set_luckychess(uint32_t value);
  public:

  // uint32 FortuneProverb = 8;
  void clear_fortuneproverb();
  uint32_t fortuneproverb() const;
  void set_fortuneproverb(uint32_t value);
  private:
  uint32_t _internal_fortuneproverb() const;
  void _internal_set_fortuneproverb(uint32_t value);
  public:

  // uint32 FitAvoid = 9;
  void clear_fitavoid();
  uint32_t fitavoid() const;
  void set_fitavoid(uint32_t value);
  private:
  uint32_t _internal_fitavoid() const;
  void _internal_set_fitavoid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTSignData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Sign > signlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > shareaward_;
    mutable std::atomic<int> _shareaward_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > fit_;
    mutable std::atomic<int> _fit_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > avoid_;
    mutable std::atomic<int> _avoid_cached_byte_size_;
    uint32_t todayawardday_;
    uint32_t sharecount_;
    uint32_t luckychess_;
    uint32_t fortuneproverb_;
    uint32_t fitavoid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MatchTeamData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MatchTeamData) */ {
 public:
  inline MatchTeamData() : MatchTeamData(nullptr) {}
  ~MatchTeamData() override;
  explicit PROTOBUF_CONSTEXPR MatchTeamData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchTeamData(const MatchTeamData& from);
  MatchTeamData(MatchTeamData&& from) noexcept
    : MatchTeamData() {
    *this = ::std::move(from);
  }

  inline MatchTeamData& operator=(const MatchTeamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchTeamData& operator=(MatchTeamData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchTeamData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchTeamData* internal_default_instance() {
    return reinterpret_cast<const MatchTeamData*>(
               &_MatchTeamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(MatchTeamData& a, MatchTeamData& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchTeamData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchTeamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchTeamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchTeamData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchTeamData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchTeamData& from) {
    MatchTeamData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchTeamData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MatchTeamData";
  }
  protected:
  explicit MatchTeamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kEndTimeFieldNumber = 4,
    kStartTeamIdFieldNumber = 3,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int64 EndTime = 4;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // uint32 StartTeamId = 3;
  void clear_startteamid();
  uint32_t startteamid() const;
  void set_startteamid(uint32_t value);
  private:
  uint32_t _internal_startteamid() const;
  void _internal_set_startteamid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MatchTeamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t count_;
    int64_t endtime_;
    uint32_t startteamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRecommendPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRecommendPlayer) */ {
 public:
  inline CSDTRecommendPlayer() : CSDTRecommendPlayer(nullptr) {}
  ~CSDTRecommendPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTRecommendPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRecommendPlayer(const CSDTRecommendPlayer& from);
  CSDTRecommendPlayer(CSDTRecommendPlayer&& from) noexcept
    : CSDTRecommendPlayer() {
    *this = ::std::move(from);
  }

  inline CSDTRecommendPlayer& operator=(const CSDTRecommendPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRecommendPlayer& operator=(CSDTRecommendPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRecommendPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRecommendPlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTRecommendPlayer*>(
               &_CSDTRecommendPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(CSDTRecommendPlayer& a, CSDTRecommendPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRecommendPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRecommendPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRecommendPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRecommendPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRecommendPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRecommendPlayer& from) {
    CSDTRecommendPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRecommendPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRecommendPlayer";
  }
  protected:
  explicit CSDTRecommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 4,
    kCupFieldNumber = 2,
    kHeadPicFieldNumber = 3,
    kSceneFieldNumber = 5,
    kChessPlayerFieldNumber = 6,
    kRecommendScoreFieldNumber = 7,
    kHeadPicFrameFieldNumber = 8,
    kObservePrivilegeFieldNumber = 9,
    kPlatFormTypeFieldNumber = 10,
    kPs4OnlyFieldNumber = 11,
    kRestrictTypeFieldNumber = 12,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Cup = 2;
  void clear_cup();
  uint32_t cup() const;
  void set_cup(uint32_t value);
  private:
  uint32_t _internal_cup() const;
  void _internal_set_cup(uint32_t value);
  public:

  // uint32 HeadPic = 3;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 Scene = 5;
  void clear_scene();
  uint32_t scene() const;
  void set_scene(uint32_t value);
  private:
  uint32_t _internal_scene() const;
  void _internal_set_scene(uint32_t value);
  public:

  // uint32 ChessPlayer = 6;
  void clear_chessplayer();
  uint32_t chessplayer() const;
  void set_chessplayer(uint32_t value);
  private:
  uint32_t _internal_chessplayer() const;
  void _internal_set_chessplayer(uint32_t value);
  public:

  // uint32 RecommendScore = 7;
  void clear_recommendscore();
  uint32_t recommendscore() const;
  void set_recommendscore(uint32_t value);
  private:
  uint32_t _internal_recommendscore() const;
  void _internal_set_recommendscore(uint32_t value);
  public:

  // uint32 HeadPicFrame = 8;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // .msg.OBSERVEPRIVILEGE ObservePrivilege = 9;
  void clear_observeprivilege();
  ::msg::OBSERVEPRIVILEGE observeprivilege() const;
  void set_observeprivilege(::msg::OBSERVEPRIVILEGE value);
  private:
  ::msg::OBSERVEPRIVILEGE _internal_observeprivilege() const;
  void _internal_set_observeprivilege(::msg::OBSERVEPRIVILEGE value);
  public:

  // .msg.PLATFORMTYPE PlatFormType = 10;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // bool Ps4Only = 11;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // .msg.UserRestrictType RestrictType = 12;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRecommendPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t cup_;
    uint32_t headpic_;
    uint32_t scene_;
    uint32_t chessplayer_;
    uint32_t recommendscore_;
    uint32_t headpicframe_;
    int observeprivilege_;
    int platformtype_;
    bool ps4only_;
    int restricttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTThirdPvpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTThirdPvpInfo) */ {
 public:
  inline CSDTThirdPvpInfo() : CSDTThirdPvpInfo(nullptr) {}
  ~CSDTThirdPvpInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTThirdPvpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTThirdPvpInfo(const CSDTThirdPvpInfo& from);
  CSDTThirdPvpInfo(CSDTThirdPvpInfo&& from) noexcept
    : CSDTThirdPvpInfo() {
    *this = ::std::move(from);
  }

  inline CSDTThirdPvpInfo& operator=(const CSDTThirdPvpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTThirdPvpInfo& operator=(CSDTThirdPvpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTThirdPvpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTThirdPvpInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTThirdPvpInfo*>(
               &_CSDTThirdPvpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(CSDTThirdPvpInfo& a, CSDTThirdPvpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTThirdPvpInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTThirdPvpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTThirdPvpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTThirdPvpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTThirdPvpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTThirdPvpInfo& from) {
    CSDTThirdPvpInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTThirdPvpInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTThirdPvpInfo";
  }
  protected:
  explicit CSDTThirdPvpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kContentFieldNumber = 3,
    kBigPicFieldNumber = 4,
    kSmallPicFieldNumber = 5,
    kRecommendIconFieldNumber = 6,
    kPreShowPicFieldNumber = 9,
    kIDFieldNumber = 1,
    kPvpStartTimeFieldNumber = 7,
    kPvpEndTimeFieldNumber = 8,
  };
  // string Title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string BigPic = 4;
  void clear_bigpic();
  const std::string& bigpic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bigpic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bigpic();
  PROTOBUF_NODISCARD std::string* release_bigpic();
  void set_allocated_bigpic(std::string* bigpic);
  private:
  const std::string& _internal_bigpic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bigpic(const std::string& value);
  std::string* _internal_mutable_bigpic();
  public:

  // string SmallPic = 5;
  void clear_smallpic();
  const std::string& smallpic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smallpic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smallpic();
  PROTOBUF_NODISCARD std::string* release_smallpic();
  void set_allocated_smallpic(std::string* smallpic);
  private:
  const std::string& _internal_smallpic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smallpic(const std::string& value);
  std::string* _internal_mutable_smallpic();
  public:

  // string RecommendIcon = 6;
  void clear_recommendicon();
  const std::string& recommendicon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recommendicon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recommendicon();
  PROTOBUF_NODISCARD std::string* release_recommendicon();
  void set_allocated_recommendicon(std::string* recommendicon);
  private:
  const std::string& _internal_recommendicon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recommendicon(const std::string& value);
  std::string* _internal_mutable_recommendicon();
  public:

  // string PreShowPic = 9;
  void clear_preshowpic();
  const std::string& preshowpic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preshowpic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preshowpic();
  PROTOBUF_NODISCARD std::string* release_preshowpic();
  void set_allocated_preshowpic(std::string* preshowpic);
  private:
  const std::string& _internal_preshowpic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preshowpic(const std::string& value);
  std::string* _internal_mutable_preshowpic();
  public:

  // uint64 ID = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // int64 PvpStartTime = 7;
  void clear_pvpstarttime();
  int64_t pvpstarttime() const;
  void set_pvpstarttime(int64_t value);
  private:
  int64_t _internal_pvpstarttime() const;
  void _internal_set_pvpstarttime(int64_t value);
  public:

  // int64 PvpEndTime = 8;
  void clear_pvpendtime();
  int64_t pvpendtime() const;
  void set_pvpendtime(int64_t value);
  private:
  int64_t _internal_pvpendtime() const;
  void _internal_set_pvpendtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTThirdPvpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bigpic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smallpic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recommendicon_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preshowpic_;
    uint64_t id_;
    int64_t pvpstarttime_;
    int64_t pvpendtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRecommendPvpInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRecommendPvpInfo) */ {
 public:
  inline CSDTRecommendPvpInfo() : CSDTRecommendPvpInfo(nullptr) {}
  ~CSDTRecommendPvpInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTRecommendPvpInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRecommendPvpInfo(const CSDTRecommendPvpInfo& from);
  CSDTRecommendPvpInfo(CSDTRecommendPvpInfo&& from) noexcept
    : CSDTRecommendPvpInfo() {
    *this = ::std::move(from);
  }

  inline CSDTRecommendPvpInfo& operator=(const CSDTRecommendPvpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRecommendPvpInfo& operator=(CSDTRecommendPvpInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRecommendPvpInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRecommendPvpInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTRecommendPvpInfo*>(
               &_CSDTRecommendPvpInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(CSDTRecommendPvpInfo& a, CSDTRecommendPvpInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRecommendPvpInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRecommendPvpInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRecommendPvpInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRecommendPvpInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRecommendPvpInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRecommendPvpInfo& from) {
    CSDTRecommendPvpInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRecommendPvpInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRecommendPvpInfo";
  }
  protected:
  explicit CSDTRecommendPvpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
    kTournamentFieldNumber = 6,
    kAuthorityDataFieldNumber = 9,
    kPvpIdFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kObserveCountFieldNumber = 3,
    kModeFieldNumber = 5,
    kThirdPvpIDFieldNumber = 7,
    kSubModeFieldNumber = 8,
  };
  // .msg.CSDTRecommendPlayer PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::msg::CSDTRecommendPlayer& playerinfo() const;
  PROTOBUF_NODISCARD ::msg::CSDTRecommendPlayer* release_playerinfo();
  ::msg::CSDTRecommendPlayer* mutable_playerinfo();
  void set_allocated_playerinfo(::msg::CSDTRecommendPlayer* playerinfo);
  private:
  const ::msg::CSDTRecommendPlayer& _internal_playerinfo() const;
  ::msg::CSDTRecommendPlayer* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::msg::CSDTRecommendPlayer* playerinfo);
  ::msg::CSDTRecommendPlayer* unsafe_arena_release_playerinfo();

  // .msg.TournamentDesc Tournament = 6;
  bool has_tournament() const;
  private:
  bool _internal_has_tournament() const;
  public:
  void clear_tournament();
  const ::msg::TournamentDesc& tournament() const;
  PROTOBUF_NODISCARD ::msg::TournamentDesc* release_tournament();
  ::msg::TournamentDesc* mutable_tournament();
  void set_allocated_tournament(::msg::TournamentDesc* tournament);
  private:
  const ::msg::TournamentDesc& _internal_tournament() const;
  ::msg::TournamentDesc* _internal_mutable_tournament();
  public:
  void unsafe_arena_set_allocated_tournament(
      ::msg::TournamentDesc* tournament);
  ::msg::TournamentDesc* unsafe_arena_release_tournament();

  // .msg.Authority AuthorityData = 9;
  bool has_authoritydata() const;
  private:
  bool _internal_has_authoritydata() const;
  public:
  void clear_authoritydata();
  const ::msg::Authority& authoritydata() const;
  PROTOBUF_NODISCARD ::msg::Authority* release_authoritydata();
  ::msg::Authority* mutable_authoritydata();
  void set_allocated_authoritydata(::msg::Authority* authoritydata);
  private:
  const ::msg::Authority& _internal_authoritydata() const;
  ::msg::Authority* _internal_mutable_authoritydata();
  public:
  void unsafe_arena_set_allocated_authoritydata(
      ::msg::Authority* authoritydata);
  ::msg::Authority* unsafe_arena_release_authoritydata();

  // uint64 PvpId = 2;
  void clear_pvpid();
  uint64_t pvpid() const;
  void set_pvpid(uint64_t value);
  private:
  uint64_t _internal_pvpid() const;
  void _internal_set_pvpid(uint64_t value);
  public:

  // int64 StartTime = 4;
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // uint32 ObserveCount = 3;
  void clear_observecount();
  uint32_t observecount() const;
  void set_observecount(uint32_t value);
  private:
  uint32_t _internal_observecount() const;
  void _internal_set_observecount(uint32_t value);
  public:

  // .msg.PVPMODE Mode = 5;
  void clear_mode();
  ::msg::PVPMODE mode() const;
  void set_mode(::msg::PVPMODE value);
  private:
  ::msg::PVPMODE _internal_mode() const;
  void _internal_set_mode(::msg::PVPMODE value);
  public:

  // uint64 ThirdPvpID = 7;
  void clear_thirdpvpid();
  uint64_t thirdpvpid() const;
  void set_thirdpvpid(uint64_t value);
  private:
  uint64_t _internal_thirdpvpid() const;
  void _internal_set_thirdpvpid(uint64_t value);
  public:

  // uint32 SubMode = 8;
  void clear_submode();
  uint32_t submode() const;
  void set_submode(uint32_t value);
  private:
  uint32_t _internal_submode() const;
  void _internal_set_submode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRecommendPvpInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::CSDTRecommendPlayer* playerinfo_;
    ::msg::TournamentDesc* tournament_;
    ::msg::Authority* authoritydata_;
    uint64_t pvpid_;
    int64_t starttime_;
    uint32_t observecount_;
    int mode_;
    uint64_t thirdpvpid_;
    uint32_t submode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class WxVVipData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.WxVVipData) */ {
 public:
  inline WxVVipData() : WxVVipData(nullptr) {}
  ~WxVVipData() override;
  explicit PROTOBUF_CONSTEXPR WxVVipData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WxVVipData(const WxVVipData& from);
  WxVVipData(WxVVipData&& from) noexcept
    : WxVVipData() {
    *this = ::std::move(from);
  }

  inline WxVVipData& operator=(const WxVVipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WxVVipData& operator=(WxVVipData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WxVVipData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WxVVipData* internal_default_instance() {
    return reinterpret_cast<const WxVVipData*>(
               &_WxVVipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(WxVVipData& a, WxVVipData& b) {
    a.Swap(&b);
  }
  inline void Swap(WxVVipData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WxVVipData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WxVVipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WxVVipData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WxVVipData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WxVVipData& from) {
    WxVVipData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WxVVipData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.WxVVipData";
  }
  protected:
  explicit WxVVipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeeklyTAwardTFieldNumber = 2,
    kDailyVAwardTFieldNumber = 3,
    kDailyAwardTFieldNumber = 4,
    kLevelFieldNumber = 1,
  };
  // int64 WeeklyTAwardT = 2;
  void clear_weeklytawardt();
  int64_t weeklytawardt() const;
  void set_weeklytawardt(int64_t value);
  private:
  int64_t _internal_weeklytawardt() const;
  void _internal_set_weeklytawardt(int64_t value);
  public:

  // int64 DailyVAwardT = 3;
  void clear_dailyvawardt();
  int64_t dailyvawardt() const;
  void set_dailyvawardt(int64_t value);
  private:
  int64_t _internal_dailyvawardt() const;
  void _internal_set_dailyvawardt(int64_t value);
  public:

  // int64 DailyAwardT = 4;
  void clear_dailyawardt();
  int64_t dailyawardt() const;
  void set_dailyawardt(int64_t value);
  private:
  int64_t _internal_dailyawardt() const;
  void _internal_set_dailyawardt(int64_t value);
  public:

  // uint32 Level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.WxVVipData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t weeklytawardt_;
    int64_t dailyvawardt_;
    int64_t dailyawardt_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTWxRedPktItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTWxRedPktItem) */ {
 public:
  inline CSDTWxRedPktItem() : CSDTWxRedPktItem(nullptr) {}
  ~CSDTWxRedPktItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTWxRedPktItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTWxRedPktItem(const CSDTWxRedPktItem& from);
  CSDTWxRedPktItem(CSDTWxRedPktItem&& from) noexcept
    : CSDTWxRedPktItem() {
    *this = ::std::move(from);
  }

  inline CSDTWxRedPktItem& operator=(const CSDTWxRedPktItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTWxRedPktItem& operator=(CSDTWxRedPktItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTWxRedPktItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTWxRedPktItem* internal_default_instance() {
    return reinterpret_cast<const CSDTWxRedPktItem*>(
               &_CSDTWxRedPktItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(CSDTWxRedPktItem& a, CSDTWxRedPktItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTWxRedPktItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTWxRedPktItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTWxRedPktItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTWxRedPktItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTWxRedPktItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTWxRedPktItem& from) {
    CSDTWxRedPktItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTWxRedPktItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTWxRedPktItem";
  }
  protected:
  explicit CSDTWxRedPktItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedPktIdxFieldNumber = 1,
    kRedPktIdFieldNumber = 2,
  };
  // string RedPktIdx = 1;
  void clear_redpktidx();
  const std::string& redpktidx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redpktidx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redpktidx();
  PROTOBUF_NODISCARD std::string* release_redpktidx();
  void set_allocated_redpktidx(std::string* redpktidx);
  private:
  const std::string& _internal_redpktidx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redpktidx(const std::string& value);
  std::string* _internal_mutable_redpktidx();
  public:

  // uint32 RedPktId = 2;
  void clear_redpktid();
  uint32_t redpktid() const;
  void set_redpktid(uint32_t value);
  private:
  uint32_t _internal_redpktid() const;
  void _internal_set_redpktid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTWxRedPktItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redpktidx_;
    uint32_t redpktid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTWxRedPktProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTWxRedPktProfile) */ {
 public:
  inline CSDTWxRedPktProfile() : CSDTWxRedPktProfile(nullptr) {}
  ~CSDTWxRedPktProfile() override;
  explicit PROTOBUF_CONSTEXPR CSDTWxRedPktProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTWxRedPktProfile(const CSDTWxRedPktProfile& from);
  CSDTWxRedPktProfile(CSDTWxRedPktProfile&& from) noexcept
    : CSDTWxRedPktProfile() {
    *this = ::std::move(from);
  }

  inline CSDTWxRedPktProfile& operator=(const CSDTWxRedPktProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTWxRedPktProfile& operator=(CSDTWxRedPktProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTWxRedPktProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTWxRedPktProfile* internal_default_instance() {
    return reinterpret_cast<const CSDTWxRedPktProfile*>(
               &_CSDTWxRedPktProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(CSDTWxRedPktProfile& a, CSDTWxRedPktProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTWxRedPktProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTWxRedPktProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTWxRedPktProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTWxRedPktProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTWxRedPktProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTWxRedPktProfile& from) {
    CSDTWxRedPktProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTWxRedPktProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTWxRedPktProfile";
  }
  protected:
  explicit CSDTWxRedPktProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfRankFieldNumber = 1,
    kSelfLikeFieldNumber = 2,
  };
  // uint32 SelfRank = 1;
  void clear_selfrank();
  uint32_t selfrank() const;
  void set_selfrank(uint32_t value);
  private:
  uint32_t _internal_selfrank() const;
  void _internal_set_selfrank(uint32_t value);
  public:

  // uint32 SelfLike = 2;
  void clear_selflike();
  uint32_t selflike() const;
  void set_selflike(uint32_t value);
  private:
  uint32_t _internal_selflike() const;
  void _internal_set_selflike(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTWxRedPktProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t selfrank_;
    uint32_t selflike_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTWxVVipRankItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTWxVVipRankItem) */ {
 public:
  inline CSDTWxVVipRankItem() : CSDTWxVVipRankItem(nullptr) {}
  ~CSDTWxVVipRankItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTWxVVipRankItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTWxVVipRankItem(const CSDTWxVVipRankItem& from);
  CSDTWxVVipRankItem(CSDTWxVVipRankItem&& from) noexcept
    : CSDTWxVVipRankItem() {
    *this = ::std::move(from);
  }

  inline CSDTWxVVipRankItem& operator=(const CSDTWxVVipRankItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTWxVVipRankItem& operator=(CSDTWxVVipRankItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTWxVVipRankItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTWxVVipRankItem* internal_default_instance() {
    return reinterpret_cast<const CSDTWxVVipRankItem*>(
               &_CSDTWxVVipRankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(CSDTWxVVipRankItem& a, CSDTWxVVipRankItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTWxVVipRankItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTWxVVipRankItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTWxVVipRankItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTWxVVipRankItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTWxVVipRankItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTWxVVipRankItem& from) {
    CSDTWxVVipRankItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTWxVVipRankItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTWxVVipRankItem";
  }
  protected:
  explicit CSDTWxVVipRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVLvlFieldNumber = 3,
    kLikesFieldNumber = 4,
  };
  // string UId = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 VLvl = 3;
  void clear_vlvl();
  uint32_t vlvl() const;
  void set_vlvl(uint32_t value);
  private:
  uint32_t _internal_vlvl() const;
  void _internal_set_vlvl(uint32_t value);
  public:

  // uint32 Likes = 4;
  void clear_likes();
  uint32_t likes() const;
  void set_likes(uint32_t value);
  private:
  uint32_t _internal_likes() const;
  void _internal_set_likes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTWxVVipRankItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t vlvl_;
    uint32_t likes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTSlotInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTSlotInfo) */ {
 public:
  inline CSDTSlotInfo() : CSDTSlotInfo(nullptr) {}
  ~CSDTSlotInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTSlotInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTSlotInfo(const CSDTSlotInfo& from);
  CSDTSlotInfo(CSDTSlotInfo&& from) noexcept
    : CSDTSlotInfo() {
    *this = ::std::move(from);
  }

  inline CSDTSlotInfo& operator=(const CSDTSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTSlotInfo& operator=(CSDTSlotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTSlotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTSlotInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTSlotInfo*>(
               &_CSDTSlotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(CSDTSlotInfo& a, CSDTSlotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTSlotInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTSlotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTSlotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTSlotInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTSlotInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTSlotInfo& from) {
    CSDTSlotInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTSlotInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTSlotInfo";
  }
  protected:
  explicit CSDTSlotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 Slot = 2;
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTSlotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    uint32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRedPktData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRedPktData) */ {
 public:
  inline CSDTRedPktData() : CSDTRedPktData(nullptr) {}
  ~CSDTRedPktData() override;
  explicit PROTOBUF_CONSTEXPR CSDTRedPktData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRedPktData(const CSDTRedPktData& from);
  CSDTRedPktData(CSDTRedPktData&& from) noexcept
    : CSDTRedPktData() {
    *this = ::std::move(from);
  }

  inline CSDTRedPktData& operator=(const CSDTRedPktData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRedPktData& operator=(CSDTRedPktData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRedPktData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRedPktData* internal_default_instance() {
    return reinterpret_cast<const CSDTRedPktData*>(
               &_CSDTRedPktData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(CSDTRedPktData& a, CSDTRedPktData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRedPktData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRedPktData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRedPktData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRedPktData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRedPktData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRedPktData& from) {
    CSDTRedPktData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRedPktData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRedPktData";
  }
  protected:
  explicit CSDTRedPktData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAwardFieldNumber = 3,
  };
  // string UId = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Award = 3;
  void clear_award();
  uint32_t award() const;
  void set_award(uint32_t value);
  private:
  uint32_t _internal_award() const;
  void _internal_set_award(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRedPktData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t award_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTRedPktInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTRedPktInfo) */ {
 public:
  inline CSDTRedPktInfo() : CSDTRedPktInfo(nullptr) {}
  ~CSDTRedPktInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTRedPktInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTRedPktInfo(const CSDTRedPktInfo& from);
  CSDTRedPktInfo(CSDTRedPktInfo&& from) noexcept
    : CSDTRedPktInfo() {
    *this = ::std::move(from);
  }

  inline CSDTRedPktInfo& operator=(const CSDTRedPktInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTRedPktInfo& operator=(CSDTRedPktInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTRedPktInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTRedPktInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTRedPktInfo*>(
               &_CSDTRedPktInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(CSDTRedPktInfo& a, CSDTRedPktInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTRedPktInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTRedPktInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTRedPktInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTRedPktInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTRedPktInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTRedPktInfo& from) {
    CSDTRedPktInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTRedPktInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTRedPktInfo";
  }
  protected:
  explicit CSDTRedPktInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 3,
    kRankVerFieldNumber = 2,
    kRedPktIdFieldNumber = 1,
  };
  // repeated .msg.CSDTRedPktData Rank = 3;
  int rank_size() const;
  private:
  int _internal_rank_size() const;
  public:
  void clear_rank();
  ::msg::CSDTRedPktData* mutable_rank(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRedPktData >*
      mutable_rank();
  private:
  const ::msg::CSDTRedPktData& _internal_rank(int index) const;
  ::msg::CSDTRedPktData* _internal_add_rank();
  public:
  const ::msg::CSDTRedPktData& rank(int index) const;
  ::msg::CSDTRedPktData* add_rank();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRedPktData >&
      rank() const;

  // int64 RankVer = 2;
  void clear_rankver();
  int64_t rankver() const;
  void set_rankver(int64_t value);
  private:
  int64_t _internal_rankver() const;
  void _internal_set_rankver(int64_t value);
  public:

  // uint32 RedPktId = 1;
  void clear_redpktid();
  uint32_t redpktid() const;
  void set_redpktid(uint32_t value);
  private:
  uint32_t _internal_redpktid() const;
  void _internal_set_redpktid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTRedPktInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRedPktData > rank_;
    int64_t rankver_;
    uint32_t redpktid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SwitchItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.SwitchItem) */ {
 public:
  inline SwitchItem() : SwitchItem(nullptr) {}
  ~SwitchItem() override;
  explicit PROTOBUF_CONSTEXPR SwitchItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwitchItem(const SwitchItem& from);
  SwitchItem(SwitchItem&& from) noexcept
    : SwitchItem() {
    *this = ::std::move(from);
  }

  inline SwitchItem& operator=(const SwitchItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwitchItem& operator=(SwitchItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwitchItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwitchItem* internal_default_instance() {
    return reinterpret_cast<const SwitchItem*>(
               &_SwitchItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(SwitchItem& a, SwitchItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SwitchItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwitchItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwitchItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwitchItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwitchItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwitchItem& from) {
    SwitchItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.SwitchItem";
  }
  protected:
  explicit SwitchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchTypeFieldNumber = 1,
    kForbidFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // .msg.SWITCHTYPE SwitchType = 1;
  void clear_switchtype();
  ::msg::SWITCHTYPE switchtype() const;
  void set_switchtype(::msg::SWITCHTYPE value);
  private:
  ::msg::SWITCHTYPE _internal_switchtype() const;
  void _internal_set_switchtype(::msg::SWITCHTYPE value);
  public:

  // bool Forbid = 2;
  void clear_forbid();
  bool forbid() const;
  void set_forbid(bool value);
  private:
  bool _internal_forbid() const;
  void _internal_set_forbid(bool value);
  public:

  // int64 EndTime = 3;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.SwitchItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int switchtype_;
    bool forbid_;
    int64_t endtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CreditCfgItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CreditCfgItem) */ {
 public:
  inline CreditCfgItem() : CreditCfgItem(nullptr) {}
  ~CreditCfgItem() override;
  explicit PROTOBUF_CONSTEXPR CreditCfgItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreditCfgItem(const CreditCfgItem& from);
  CreditCfgItem(CreditCfgItem&& from) noexcept
    : CreditCfgItem() {
    *this = ::std::move(from);
  }

  inline CreditCfgItem& operator=(const CreditCfgItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditCfgItem& operator=(CreditCfgItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreditCfgItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreditCfgItem* internal_default_instance() {
    return reinterpret_cast<const CreditCfgItem*>(
               &_CreditCfgItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(CreditCfgItem& a, CreditCfgItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditCfgItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreditCfgItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreditCfgItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreditCfgItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreditCfgItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreditCfgItem& from) {
    CreditCfgItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditCfgItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CreditCfgItem";
  }
  protected:
  explicit CreditCfgItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActIdFieldNumber = 1,
    kThresholdHiFieldNumber = 2,
    kThresholdLoFieldNumber = 3,
    kLimitLvFieldNumber = 4,
  };
  // int32 ActId = 1;
  void clear_actid();
  int32_t actid() const;
  void set_actid(int32_t value);
  private:
  int32_t _internal_actid() const;
  void _internal_set_actid(int32_t value);
  public:

  // int32 ThresholdHi = 2;
  void clear_thresholdhi();
  int32_t thresholdhi() const;
  void set_thresholdhi(int32_t value);
  private:
  int32_t _internal_thresholdhi() const;
  void _internal_set_thresholdhi(int32_t value);
  public:

  // int32 ThresholdLo = 3;
  void clear_thresholdlo();
  int32_t thresholdlo() const;
  void set_thresholdlo(int32_t value);
  private:
  int32_t _internal_thresholdlo() const;
  void _internal_set_thresholdlo(int32_t value);
  public:

  // int32 LimitLv = 4;
  void clear_limitlv();
  int32_t limitlv() const;
  void set_limitlv(int32_t value);
  private:
  int32_t _internal_limitlv() const;
  void _internal_set_limitlv(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CreditCfgItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t actid_;
    int32_t thresholdhi_;
    int32_t thresholdlo_;
    int32_t limitlv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPunishment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPunishment) */ {
 public:
  inline CSDTPunishment() : CSDTPunishment(nullptr) {}
  ~CSDTPunishment() override;
  explicit PROTOBUF_CONSTEXPR CSDTPunishment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPunishment(const CSDTPunishment& from);
  CSDTPunishment(CSDTPunishment&& from) noexcept
    : CSDTPunishment() {
    *this = ::std::move(from);
  }

  inline CSDTPunishment& operator=(const CSDTPunishment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPunishment& operator=(CSDTPunishment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPunishment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPunishment* internal_default_instance() {
    return reinterpret_cast<const CSDTPunishment*>(
               &_CSDTPunishment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(CSDTPunishment& a, CSDTPunishment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPunishment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPunishment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPunishment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPunishment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPunishment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPunishment& from) {
    CSDTPunishment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPunishment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPunishment";
  }
  protected:
  explicit CSDTPunishment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kTriggersFieldNumber = 4,
    kExecuteDeadlineFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .msg.PUNISHMENTTYPE Types = 2;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::msg::PUNISHMENTTYPE _internal_types(int index) const;
  void _internal_add_types(::msg::PUNISHMENTTYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::msg::PUNISHMENTTYPE types(int index) const;
  void set_types(int index, ::msg::PUNISHMENTTYPE value);
  void add_types(::msg::PUNISHMENTTYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // repeated .msg.PUNISHMENTBEHAVIOR Triggers = 4;
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;
  public:
  void clear_triggers();
  private:
  ::msg::PUNISHMENTBEHAVIOR _internal_triggers(int index) const;
  void _internal_add_triggers(::msg::PUNISHMENTBEHAVIOR value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_triggers();
  public:
  ::msg::PUNISHMENTBEHAVIOR triggers(int index) const;
  void set_triggers(int index, ::msg::PUNISHMENTBEHAVIOR value);
  void add_triggers(::msg::PUNISHMENTBEHAVIOR value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_triggers();

  // int64 ExecuteDeadline = 3;
  void clear_executedeadline();
  int64_t executedeadline() const;
  void set_executedeadline(int64_t value);
  private:
  int64_t _internal_executedeadline() const;
  void _internal_set_executedeadline(int64_t value);
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPunishment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
    mutable std::atomic<int> _types_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> triggers_;
    mutable std::atomic<int> _triggers_cached_byte_size_;
    int64_t executedeadline_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayer) */ {
 public:
  inline CSDTPlayer() : CSDTPlayer(nullptr) {}
  ~CSDTPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayer(const CSDTPlayer& from);
  CSDTPlayer(CSDTPlayer&& from) noexcept
    : CSDTPlayer() {
    *this = ::std::move(from);
  }

  inline CSDTPlayer& operator=(const CSDTPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayer& operator=(CSDTPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayer*>(
               &_CSDTPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(CSDTPlayer& a, CSDTPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayer& from) {
    CSDTPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayer";
  }
  protected:
  explicit CSDTPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kUserNameFieldNumber = 2,
  };
  // string PlayerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_NODISCARD std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string UserName = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBriefPunishment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBriefPunishment) */ {
 public:
  inline CSDTBriefPunishment() : CSDTBriefPunishment(nullptr) {}
  ~CSDTBriefPunishment() override;
  explicit PROTOBUF_CONSTEXPR CSDTBriefPunishment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBriefPunishment(const CSDTBriefPunishment& from);
  CSDTBriefPunishment(CSDTBriefPunishment&& from) noexcept
    : CSDTBriefPunishment() {
    *this = ::std::move(from);
  }

  inline CSDTBriefPunishment& operator=(const CSDTBriefPunishment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBriefPunishment& operator=(CSDTBriefPunishment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBriefPunishment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBriefPunishment* internal_default_instance() {
    return reinterpret_cast<const CSDTBriefPunishment*>(
               &_CSDTBriefPunishment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(CSDTBriefPunishment& a, CSDTBriefPunishment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBriefPunishment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBriefPunishment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBriefPunishment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBriefPunishment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBriefPunishment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBriefPunishment& from) {
    CSDTBriefPunishment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBriefPunishment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBriefPunishment";
  }
  protected:
  explicit CSDTBriefPunishment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPunishmentDeadlineFieldNumber = 2,
  };
  // repeated .msg.CSDTPlayer UserName = 1;
  int username_size() const;
  private:
  int _internal_username_size() const;
  public:
  void clear_username();
  ::msg::CSDTPlayer* mutable_username(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPlayer >*
      mutable_username();
  private:
  const ::msg::CSDTPlayer& _internal_username(int index) const;
  ::msg::CSDTPlayer* _internal_add_username();
  public:
  const ::msg::CSDTPlayer& username(int index) const;
  ::msg::CSDTPlayer* add_username();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPlayer >&
      username() const;

  // int64 PunishmentDeadline = 2;
  void clear_punishmentdeadline();
  int64_t punishmentdeadline() const;
  void set_punishmentdeadline(int64_t value);
  private:
  int64_t _internal_punishmentdeadline() const;
  void _internal_set_punishmentdeadline(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTBriefPunishment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPlayer > username_;
    int64_t punishmentdeadline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerConfirmInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerConfirmInfo) */ {
 public:
  inline PlayerConfirmInfo() : PlayerConfirmInfo(nullptr) {}
  ~PlayerConfirmInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerConfirmInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerConfirmInfo(const PlayerConfirmInfo& from);
  PlayerConfirmInfo(PlayerConfirmInfo&& from) noexcept
    : PlayerConfirmInfo() {
    *this = ::std::move(from);
  }

  inline PlayerConfirmInfo& operator=(const PlayerConfirmInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerConfirmInfo& operator=(PlayerConfirmInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerConfirmInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerConfirmInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerConfirmInfo*>(
               &_PlayerConfirmInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(PlayerConfirmInfo& a, PlayerConfirmInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerConfirmInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerConfirmInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerConfirmInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerConfirmInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerConfirmInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerConfirmInfo& from) {
    PlayerConfirmInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerConfirmInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerConfirmInfo";
  }
  protected:
  explicit PlayerConfirmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kUserNameFieldNumber = 4,
    kHeadPicFieldNumber = 2,
    kHeadPicFrameFieldNumber = 3,
    kIsRobotFieldNumber = 5,
  };
  // string PlayerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_NODISCARD std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string UserName = 4;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint32 HeadPic = 2;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 HeadPicFrame = 3;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // bool IsRobot = 5;
  void clear_isrobot();
  bool isrobot() const;
  void set_isrobot(bool value);
  private:
  bool _internal_isrobot() const;
  void _internal_set_isrobot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerConfirmInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    uint32_t headpic_;
    uint32_t headpicframe_;
    bool isrobot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class AnswerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AnswerData) */ {
 public:
  inline AnswerData() : AnswerData(nullptr) {}
  ~AnswerData() override;
  explicit PROTOBUF_CONSTEXPR AnswerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnswerData(const AnswerData& from);
  AnswerData(AnswerData&& from) noexcept
    : AnswerData() {
    *this = ::std::move(from);
  }

  inline AnswerData& operator=(const AnswerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnswerData& operator=(AnswerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnswerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnswerData* internal_default_instance() {
    return reinterpret_cast<const AnswerData*>(
               &_AnswerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(AnswerData& a, AnswerData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnswerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnswerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnswerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnswerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnswerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnswerData& from) {
    AnswerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnswerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AnswerData";
  }
  protected:
  explicit AnswerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated string Contents = 2;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  const std::string& contents(int index) const;
  std::string* mutable_contents(int index);
  void set_contents(int index, const std::string& value);
  void set_contents(int index, std::string&& value);
  void set_contents(int index, const char* value);
  void set_contents(int index, const char* value, size_t size);
  std::string* add_contents();
  void add_contents(const std::string& value);
  void add_contents(std::string&& value);
  void add_contents(const char* value);
  void add_contents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contents();
  private:
  const std::string& _internal_contents(int index) const;
  std::string* _internal_add_contents();
  public:

  // uint32 Index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AnswerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contents_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class VideoInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.VideoInfo) */ {
 public:
  inline VideoInfo() : VideoInfo(nullptr) {}
  ~VideoInfo() override;
  explicit PROTOBUF_CONSTEXPR VideoInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoInfo(const VideoInfo& from);
  VideoInfo(VideoInfo&& from) noexcept
    : VideoInfo() {
    *this = ::std::move(from);
  }

  inline VideoInfo& operator=(const VideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoInfo& operator=(VideoInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoInfo* internal_default_instance() {
    return reinterpret_cast<const VideoInfo*>(
               &_VideoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(VideoInfo& a, VideoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoInfo& from) {
    VideoInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.VideoInfo";
  }
  protected:
  explicit VideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPicUrlFieldNumber = 4,
    kContentUrlFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kLanguageKeyFieldNumber = 6,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string PicUrl = 4;
  void clear_picurl();
  const std::string& picurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picurl();
  PROTOBUF_NODISCARD std::string* release_picurl();
  void set_allocated_picurl(std::string* picurl);
  private:
  const std::string& _internal_picurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picurl(const std::string& value);
  std::string* _internal_mutable_picurl();
  public:

  // string ContentUrl = 5;
  void clear_contenturl();
  const std::string& contenturl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contenturl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contenturl();
  PROTOBUF_NODISCARD std::string* release_contenturl();
  void set_allocated_contenturl(std::string* contenturl);
  private:
  const std::string& _internal_contenturl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contenturl(const std::string& value);
  std::string* _internal_mutable_contenturl();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .msg.VIDEO_TYPE Type = 3;
  void clear_type();
  ::msg::VIDEO_TYPE type() const;
  void set_type(::msg::VIDEO_TYPE value);
  private:
  ::msg::VIDEO_TYPE _internal_type() const;
  void _internal_set_type(::msg::VIDEO_TYPE value);
  public:

  // bool LanguageKey = 6;
  void clear_languagekey();
  bool languagekey() const;
  void set_languagekey(bool value);
  private:
  bool _internal_languagekey() const;
  void _internal_set_languagekey(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.VideoInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contenturl_;
    uint32_t id_;
    int type_;
    bool languagekey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTAddictionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTAddictionInfo) */ {
 public:
  inline CSDTAddictionInfo() : CSDTAddictionInfo(nullptr) {}
  ~CSDTAddictionInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTAddictionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTAddictionInfo(const CSDTAddictionInfo& from);
  CSDTAddictionInfo(CSDTAddictionInfo&& from) noexcept
    : CSDTAddictionInfo() {
    *this = ::std::move(from);
  }

  inline CSDTAddictionInfo& operator=(const CSDTAddictionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTAddictionInfo& operator=(CSDTAddictionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTAddictionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTAddictionInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTAddictionInfo*>(
               &_CSDTAddictionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(CSDTAddictionInfo& a, CSDTAddictionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTAddictionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTAddictionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTAddictionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTAddictionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTAddictionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTAddictionInfo& from) {
    CSDTAddictionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTAddictionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTAddictionInfo";
  }
  protected:
  explicit CSDTAddictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthAddictionTokenFieldNumber = 2,
    kIsAuthAddictionFieldNumber = 1,
    kIsVerifiedFieldNumber = 3,
  };
  // string AuthAddictionToken = 2;
  void clear_authaddictiontoken();
  const std::string& authaddictiontoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authaddictiontoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authaddictiontoken();
  PROTOBUF_NODISCARD std::string* release_authaddictiontoken();
  void set_allocated_authaddictiontoken(std::string* authaddictiontoken);
  private:
  const std::string& _internal_authaddictiontoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authaddictiontoken(const std::string& value);
  std::string* _internal_mutable_authaddictiontoken();
  public:

  // bool IsAuthAddiction = 1;
  void clear_isauthaddiction();
  bool isauthaddiction() const;
  void set_isauthaddiction(bool value);
  private:
  bool _internal_isauthaddiction() const;
  void _internal_set_isauthaddiction(bool value);
  public:

  // bool IsVerified = 3;
  void clear_isverified();
  bool isverified() const;
  void set_isverified(bool value);
  private:
  bool _internal_isverified() const;
  void _internal_set_isverified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTAddictionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authaddictiontoken_;
    bool isauthaddiction_;
    bool isverified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KrAddictionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.KrAddictionInfo) */ {
 public:
  inline KrAddictionInfo() : KrAddictionInfo(nullptr) {}
  ~KrAddictionInfo() override;
  explicit PROTOBUF_CONSTEXPR KrAddictionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KrAddictionInfo(const KrAddictionInfo& from);
  KrAddictionInfo(KrAddictionInfo&& from) noexcept
    : KrAddictionInfo() {
    *this = ::std::move(from);
  }

  inline KrAddictionInfo& operator=(const KrAddictionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KrAddictionInfo& operator=(KrAddictionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KrAddictionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const KrAddictionInfo* internal_default_instance() {
    return reinterpret_cast<const KrAddictionInfo*>(
               &_KrAddictionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(KrAddictionInfo& a, KrAddictionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KrAddictionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KrAddictionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KrAddictionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KrAddictionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KrAddictionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KrAddictionInfo& from) {
    KrAddictionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KrAddictionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.KrAddictionInfo";
  }
  protected:
  explicit KrAddictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginTimeFieldNumber = 1,
    kStartLimitTimeFieldNumber = 3,
    kEndLimitTimeFieldNumber = 4,
    kCountdown1FieldNumber = 5,
    kCountdown2FieldNumber = 6,
    kDurantionFieldNumber = 7,
    kIsCheckAddicFieldNumber = 2,
  };
  // int64 LoginTime = 1;
  void clear_logintime();
  int64_t logintime() const;
  void set_logintime(int64_t value);
  private:
  int64_t _internal_logintime() const;
  void _internal_set_logintime(int64_t value);
  public:

  // int64 StartLimitTime = 3;
  void clear_startlimittime();
  int64_t startlimittime() const;
  void set_startlimittime(int64_t value);
  private:
  int64_t _internal_startlimittime() const;
  void _internal_set_startlimittime(int64_t value);
  public:

  // int64 EndLimitTime = 4;
  void clear_endlimittime();
  int64_t endlimittime() const;
  void set_endlimittime(int64_t value);
  private:
  int64_t _internal_endlimittime() const;
  void _internal_set_endlimittime(int64_t value);
  public:

  // int64 Countdown1 = 5;
  void clear_countdown1();
  int64_t countdown1() const;
  void set_countdown1(int64_t value);
  private:
  int64_t _internal_countdown1() const;
  void _internal_set_countdown1(int64_t value);
  public:

  // int64 Countdown2 = 6;
  void clear_countdown2();
  int64_t countdown2() const;
  void set_countdown2(int64_t value);
  private:
  int64_t _internal_countdown2() const;
  void _internal_set_countdown2(int64_t value);
  public:

  // int64 durantion = 7;
  void clear_durantion();
  int64_t durantion() const;
  void set_durantion(int64_t value);
  private:
  int64_t _internal_durantion() const;
  void _internal_set_durantion(int64_t value);
  public:

  // bool IsCheckAddic = 2;
  void clear_ischeckaddic();
  bool ischeckaddic() const;
  void set_ischeckaddic(bool value);
  private:
  bool _internal_ischeckaddic() const;
  void _internal_set_ischeckaddic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.KrAddictionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t logintime_;
    int64_t startlimittime_;
    int64_t endlimittime_;
    int64_t countdown1_;
    int64_t countdown2_;
    int64_t durantion_;
    bool ischeckaddic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MultiPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MultiPlayer) */ {
 public:
  inline MultiPlayer() : MultiPlayer(nullptr) {}
  ~MultiPlayer() override;
  explicit PROTOBUF_CONSTEXPR MultiPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiPlayer(const MultiPlayer& from);
  MultiPlayer(MultiPlayer&& from) noexcept
    : MultiPlayer() {
    *this = ::std::move(from);
  }

  inline MultiPlayer& operator=(const MultiPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPlayer& operator=(MultiPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiPlayer* internal_default_instance() {
    return reinterpret_cast<const MultiPlayer*>(
               &_MultiPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(MultiPlayer& a, MultiPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MultiPlayer& from) {
    MultiPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MultiPlayer";
  }
  protected:
  explicit MultiPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kRegionFieldNumber = 8,
    kHeadPicFieldNumber = 3,
    kHeadPicFrameFieldNumber = 4,
    kLevelFieldNumber = 5,
    kMMRFieldNumber = 6,
    kDiamondFieldNumber = 7,
    kMoneyFieldNumber = 9,
    kPassportLevelFieldNumber = 10,
  };
  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Region = 8;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // uint32 HeadPic = 3;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // uint32 HeadPicFrame = 4;
  void clear_headpicframe();
  uint32_t headpicframe() const;
  void set_headpicframe(uint32_t value);
  private:
  uint32_t _internal_headpicframe() const;
  void _internal_set_headpicframe(uint32_t value);
  public:

  // uint32 Level = 5;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 MMR = 6;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 Diamond = 7;
  void clear_diamond();
  uint32_t diamond() const;
  void set_diamond(uint32_t value);
  private:
  uint32_t _internal_diamond() const;
  void _internal_set_diamond(uint32_t value);
  public:

  // uint32 Money = 9;
  void clear_money();
  uint32_t money() const;
  void set_money(uint32_t value);
  private:
  uint32_t _internal_money() const;
  void _internal_set_money(uint32_t value);
  public:

  // uint32 PassportLevel = 10;
  void clear_passportlevel();
  uint32_t passportlevel() const;
  void set_passportlevel(uint32_t value);
  private:
  uint32_t _internal_passportlevel() const;
  void _internal_set_passportlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MultiPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    uint32_t headpic_;
    uint32_t headpicframe_;
    uint32_t level_;
    uint32_t mmr_;
    uint32_t diamond_;
    uint32_t money_;
    uint32_t passportlevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBannerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBannerInfo) */ {
 public:
  inline CSDTBannerInfo() : CSDTBannerInfo(nullptr) {}
  ~CSDTBannerInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTBannerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBannerInfo(const CSDTBannerInfo& from);
  CSDTBannerInfo(CSDTBannerInfo&& from) noexcept
    : CSDTBannerInfo() {
    *this = ::std::move(from);
  }

  inline CSDTBannerInfo& operator=(const CSDTBannerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBannerInfo& operator=(CSDTBannerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBannerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBannerInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTBannerInfo*>(
               &_CSDTBannerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(CSDTBannerInfo& a, CSDTBannerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBannerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBannerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBannerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBannerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBannerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBannerInfo& from) {
    CSDTBannerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBannerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBannerInfo";
  }
  protected:
  explicit CSDTBannerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .msg.CSDTBanner Data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::msg::CSDTBanner* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTBanner >*
      mutable_data();
  private:
  const ::msg::CSDTBanner& _internal_data(int index) const;
  ::msg::CSDTBanner* _internal_add_data();
  public:
  const ::msg::CSDTBanner& data(int index) const;
  ::msg::CSDTBanner* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTBanner >&
      data() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTBannerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTBanner > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBanner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBanner) */ {
 public:
  inline CSDTBanner() : CSDTBanner(nullptr) {}
  ~CSDTBanner() override;
  explicit PROTOBUF_CONSTEXPR CSDTBanner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBanner(const CSDTBanner& from);
  CSDTBanner(CSDTBanner&& from) noexcept
    : CSDTBanner() {
    *this = ::std::move(from);
  }

  inline CSDTBanner& operator=(const CSDTBanner& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBanner& operator=(CSDTBanner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBanner& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBanner* internal_default_instance() {
    return reinterpret_cast<const CSDTBanner*>(
               &_CSDTBanner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(CSDTBanner& a, CSDTBanner& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBanner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBanner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBanner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBanner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBanner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBanner& from) {
    CSDTBanner::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBanner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBanner";
  }
  protected:
  explicit CSDTBanner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryListFieldNumber = 8,
    kZoneIdFieldNumber = 11,
    kDownloadListFieldNumber = 12,
    kPlatformListFieldNumber = 13,
    kHallModeListFieldNumber = 15,
    kExcludeDownloadFieldNumber = 17,
    kPicUrlFieldNumber = 2,
    kSkipNameFieldNumber = 5,
    kPCSkipUrlFieldNumber = 14,
    kIdFieldNumber = 1,
    kBannerTypeFieldNumber = 3,
    kSkipTypeFieldNumber = 4,
    kSkipTapFieldNumber = 6,
    kMallGoodsIdFieldNumber = 7,
    kShowBeginTimeFieldNumber = 9,
    kShowEndTimeFieldNumber = 10,
    kSortFieldNumber = 16,
  };
  // repeated string CountryList = 8;
  int countrylist_size() const;
  private:
  int _internal_countrylist_size() const;
  public:
  void clear_countrylist();
  const std::string& countrylist(int index) const;
  std::string* mutable_countrylist(int index);
  void set_countrylist(int index, const std::string& value);
  void set_countrylist(int index, std::string&& value);
  void set_countrylist(int index, const char* value);
  void set_countrylist(int index, const char* value, size_t size);
  std::string* add_countrylist();
  void add_countrylist(const std::string& value);
  void add_countrylist(std::string&& value);
  void add_countrylist(const char* value);
  void add_countrylist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& countrylist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_countrylist();
  private:
  const std::string& _internal_countrylist(int index) const;
  std::string* _internal_add_countrylist();
  public:

  // repeated uint32 ZoneId = 11;
  int zoneid_size() const;
  private:
  int _internal_zoneid_size() const;
  public:
  void clear_zoneid();
  private:
  uint32_t _internal_zoneid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_zoneid() const;
  void _internal_add_zoneid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_zoneid();
  public:
  uint32_t zoneid(int index) const;
  void set_zoneid(int index, uint32_t value);
  void add_zoneid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      zoneid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_zoneid();

  // repeated string DownloadList = 12;
  int downloadlist_size() const;
  private:
  int _internal_downloadlist_size() const;
  public:
  void clear_downloadlist();
  const std::string& downloadlist(int index) const;
  std::string* mutable_downloadlist(int index);
  void set_downloadlist(int index, const std::string& value);
  void set_downloadlist(int index, std::string&& value);
  void set_downloadlist(int index, const char* value);
  void set_downloadlist(int index, const char* value, size_t size);
  std::string* add_downloadlist();
  void add_downloadlist(const std::string& value);
  void add_downloadlist(std::string&& value);
  void add_downloadlist(const char* value);
  void add_downloadlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& downloadlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_downloadlist();
  private:
  const std::string& _internal_downloadlist(int index) const;
  std::string* _internal_add_downloadlist();
  public:

  // repeated .msg.PLATFORMTYPE PlatformList = 13;
  int platformlist_size() const;
  private:
  int _internal_platformlist_size() const;
  public:
  void clear_platformlist();
  private:
  ::msg::PLATFORMTYPE _internal_platformlist(int index) const;
  void _internal_add_platformlist(::msg::PLATFORMTYPE value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_platformlist();
  public:
  ::msg::PLATFORMTYPE platformlist(int index) const;
  void set_platformlist(int index, ::msg::PLATFORMTYPE value);
  void add_platformlist(::msg::PLATFORMTYPE value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& platformlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_platformlist();

  // repeated uint32 HallModeList = 15;
  int hallmodelist_size() const;
  private:
  int _internal_hallmodelist_size() const;
  public:
  void clear_hallmodelist();
  private:
  uint32_t _internal_hallmodelist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hallmodelist() const;
  void _internal_add_hallmodelist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hallmodelist();
  public:
  uint32_t hallmodelist(int index) const;
  void set_hallmodelist(int index, uint32_t value);
  void add_hallmodelist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hallmodelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hallmodelist();

  // repeated string ExcludeDownload = 17;
  int excludedownload_size() const;
  private:
  int _internal_excludedownload_size() const;
  public:
  void clear_excludedownload();
  const std::string& excludedownload(int index) const;
  std::string* mutable_excludedownload(int index);
  void set_excludedownload(int index, const std::string& value);
  void set_excludedownload(int index, std::string&& value);
  void set_excludedownload(int index, const char* value);
  void set_excludedownload(int index, const char* value, size_t size);
  std::string* add_excludedownload();
  void add_excludedownload(const std::string& value);
  void add_excludedownload(std::string&& value);
  void add_excludedownload(const char* value);
  void add_excludedownload(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedownload() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedownload();
  private:
  const std::string& _internal_excludedownload(int index) const;
  std::string* _internal_add_excludedownload();
  public:

  // string PicUrl = 2;
  void clear_picurl();
  const std::string& picurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picurl();
  PROTOBUF_NODISCARD std::string* release_picurl();
  void set_allocated_picurl(std::string* picurl);
  private:
  const std::string& _internal_picurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picurl(const std::string& value);
  std::string* _internal_mutable_picurl();
  public:

  // string SkipName = 5;
  void clear_skipname();
  const std::string& skipname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skipname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skipname();
  PROTOBUF_NODISCARD std::string* release_skipname();
  void set_allocated_skipname(std::string* skipname);
  private:
  const std::string& _internal_skipname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skipname(const std::string& value);
  std::string* _internal_mutable_skipname();
  public:

  // string PCSkipUrl = 14;
  void clear_pcskipurl();
  const std::string& pcskipurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcskipurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcskipurl();
  PROTOBUF_NODISCARD std::string* release_pcskipurl();
  void set_allocated_pcskipurl(std::string* pcskipurl);
  private:
  const std::string& _internal_pcskipurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcskipurl(const std::string& value);
  std::string* _internal_mutable_pcskipurl();
  public:

  // int64 Id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // .msg.BANNERTYPE BannerType = 3;
  void clear_bannertype();
  ::msg::BANNERTYPE bannertype() const;
  void set_bannertype(::msg::BANNERTYPE value);
  private:
  ::msg::BANNERTYPE _internal_bannertype() const;
  void _internal_set_bannertype(::msg::BANNERTYPE value);
  public:

  // .msg.SKIPTYPE SkipType = 4;
  void clear_skiptype();
  ::msg::SKIPTYPE skiptype() const;
  void set_skiptype(::msg::SKIPTYPE value);
  private:
  ::msg::SKIPTYPE _internal_skiptype() const;
  void _internal_set_skiptype(::msg::SKIPTYPE value);
  public:

  // uint32 SkipTap = 6;
  void clear_skiptap();
  uint32_t skiptap() const;
  void set_skiptap(uint32_t value);
  private:
  uint32_t _internal_skiptap() const;
  void _internal_set_skiptap(uint32_t value);
  public:

  // uint32 MallGoodsId = 7;
  void clear_mallgoodsid();
  uint32_t mallgoodsid() const;
  void set_mallgoodsid(uint32_t value);
  private:
  uint32_t _internal_mallgoodsid() const;
  void _internal_set_mallgoodsid(uint32_t value);
  public:

  // int64 ShowBeginTime = 9;
  void clear_showbegintime();
  int64_t showbegintime() const;
  void set_showbegintime(int64_t value);
  private:
  int64_t _internal_showbegintime() const;
  void _internal_set_showbegintime(int64_t value);
  public:

  // int64 ShowEndTime = 10;
  void clear_showendtime();
  int64_t showendtime() const;
  void set_showendtime(int64_t value);
  private:
  int64_t _internal_showendtime() const;
  void _internal_set_showendtime(int64_t value);
  public:

  // int64 Sort = 16;
  void clear_sort();
  int64_t sort() const;
  void set_sort(int64_t value);
  private:
  int64_t _internal_sort() const;
  void _internal_set_sort(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTBanner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> countrylist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > zoneid_;
    mutable std::atomic<int> _zoneid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> downloadlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> platformlist_;
    mutable std::atomic<int> _platformlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hallmodelist_;
    mutable std::atomic<int> _hallmodelist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedownload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skipname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcskipurl_;
    int64_t id_;
    int bannertype_;
    int skiptype_;
    uint32_t skiptap_;
    uint32_t mallgoodsid_;
    int64_t showbegintime_;
    int64_t showendtime_;
    int64_t sort_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTournament_RankInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournament_RankInfoEntry_DoNotUse, 
    uint64_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournament_RankInfoEntry_DoNotUse, 
    uint64_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTTournament_RankInfoEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTTournament_RankInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTTournament_RankInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTTournament_RankInfoEntry_DoNotUse& other);
  static const CSDTTournament_RankInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTTournament_RankInfoEntry_DoNotUse*>(&_CSDTTournament_RankInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTTournament_PointsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournament_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournament_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTTournament_PointsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTTournament_PointsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTTournament_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTTournament_PointsEntry_DoNotUse& other);
  static const CSDTTournament_PointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTTournament_PointsEntry_DoNotUse*>(&_CSDTTournament_PointsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTTournament_RoundPointsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournament_RoundPointsEntry_DoNotUse, 
    uint64_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournament_RoundPointsEntry_DoNotUse, 
    uint64_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSDTTournament_RoundPointsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTTournament_RoundPointsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTTournament_RoundPointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTTournament_RoundPointsEntry_DoNotUse& other);
  static const CSDTTournament_RoundPointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTTournament_RoundPointsEntry_DoNotUse*>(&_CSDTTournament_RoundPointsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTTournament final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTournament) */ {
 public:
  inline CSDTTournament() : CSDTTournament(nullptr) {}
  ~CSDTTournament() override;
  explicit PROTOBUF_CONSTEXPR CSDTTournament(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTournament(const CSDTTournament& from);
  CSDTTournament(CSDTTournament&& from) noexcept
    : CSDTTournament() {
    *this = ::std::move(from);
  }

  inline CSDTTournament& operator=(const CSDTTournament& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTournament& operator=(CSDTTournament&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTournament& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTournament* internal_default_instance() {
    return reinterpret_cast<const CSDTTournament*>(
               &_CSDTTournament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(CSDTTournament& a, CSDTTournament& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTournament* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTournament* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTournament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTournament>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTournament& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTournament& from) {
    CSDTTournament::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTournament* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTournament";
  }
  protected:
  explicit CSDTTournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 6,
    kRankInfoFieldNumber = 11,
    kPointAwardGetFieldNumber = 12,
    kPointsFieldNumber = 14,
    kRoundPointsFieldNumber = 16,
    kIdFieldNumber = 1,
    kEnrollCountFieldNumber = 2,
    kJoinCountFieldNumber = 5,
    kRoundFieldNumber = 7,
    kLastGameIdFieldNumber = 8,
    kEnrollClassFieldNumber = 9,
    kEnrollFieldNumber = 3,
    kOutFieldNumber = 4,
    kBattleFieldNumber = 13,
    kChallengeAgainFieldNumber = 15,
    kGroupIdxFieldNumber = 10,
    kStatusFieldNumber = 17,
  };
  // repeated .msg.CSDTTournamentClass Classes = 6;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::msg::CSDTTournamentClass* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >*
      mutable_classes();
  private:
  const ::msg::CSDTTournamentClass& _internal_classes(int index) const;
  ::msg::CSDTTournamentClass* _internal_add_classes();
  public:
  const ::msg::CSDTTournamentClass& classes(int index) const;
  ::msg::CSDTTournamentClass* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >&
      classes() const;

  // map<uint64, uint32> RankInfo = 11;
  int rankinfo_size() const;
  private:
  int _internal_rankinfo_size() const;
  public:
  void clear_rankinfo();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
      _internal_rankinfo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
      _internal_mutable_rankinfo();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
      rankinfo() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
      mutable_rankinfo();

  // repeated uint32 PointAwardGet = 12;
  int pointawardget_size() const;
  private:
  int _internal_pointawardget_size() const;
  public:
  void clear_pointawardget();
  private:
  uint32_t _internal_pointawardget(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_pointawardget() const;
  void _internal_add_pointawardget(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_pointawardget();
  public:
  uint32_t pointawardget(int index) const;
  void set_pointawardget(int index, uint32_t value);
  void add_pointawardget(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      pointawardget() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_pointawardget();

  // map<uint32, uint32> Points = 14;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_points();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_points();

  // map<uint64, uint32> RoundPoints = 16;
  int roundpoints_size() const;
  private:
  int _internal_roundpoints_size() const;
  public:
  void clear_roundpoints();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
      _internal_roundpoints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
      _internal_mutable_roundpoints();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
      roundpoints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
      mutable_roundpoints();

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 EnrollCount = 2;
  void clear_enrollcount();
  uint32_t enrollcount() const;
  void set_enrollcount(uint32_t value);
  private:
  uint32_t _internal_enrollcount() const;
  void _internal_set_enrollcount(uint32_t value);
  public:

  // uint32 JoinCount = 5;
  void clear_joincount();
  uint32_t joincount() const;
  void set_joincount(uint32_t value);
  private:
  uint32_t _internal_joincount() const;
  void _internal_set_joincount(uint32_t value);
  public:

  // uint64 Round = 7;
  void clear_round();
  uint64_t round() const;
  void set_round(uint64_t value);
  private:
  uint64_t _internal_round() const;
  void _internal_set_round(uint64_t value);
  public:

  // uint64 LastGameId = 8;
  void clear_lastgameid();
  uint64_t lastgameid() const;
  void set_lastgameid(uint64_t value);
  private:
  uint64_t _internal_lastgameid() const;
  void _internal_set_lastgameid(uint64_t value);
  public:

  // uint64 EnrollClass = 9;
  void clear_enrollclass();
  uint64_t enrollclass() const;
  void set_enrollclass(uint64_t value);
  private:
  uint64_t _internal_enrollclass() const;
  void _internal_set_enrollclass(uint64_t value);
  public:

  // bool Enroll = 3;
  void clear_enroll();
  bool enroll() const;
  void set_enroll(bool value);
  private:
  bool _internal_enroll() const;
  void _internal_set_enroll(bool value);
  public:

  // bool Out = 4;
  void clear_out();
  bool out() const;
  void set_out(bool value);
  private:
  bool _internal_out() const;
  void _internal_set_out(bool value);
  public:

  // bool Battle = 13;
  void clear_battle();
  bool battle() const;
  void set_battle(bool value);
  private:
  bool _internal_battle() const;
  void _internal_set_battle(bool value);
  public:

  // bool ChallengeAgain = 15;
  void clear_challengeagain();
  bool challengeagain() const;
  void set_challengeagain(bool value);
  private:
  bool _internal_challengeagain() const;
  void _internal_set_challengeagain(bool value);
  public:

  // int32 GroupIdx = 10;
  void clear_groupidx();
  int32_t groupidx() const;
  void set_groupidx(int32_t value);
  private:
  int32_t _internal_groupidx() const;
  void _internal_set_groupidx(int32_t value);
  public:

  // .msg.TOURNAMENTSTATUS Status = 17;
  void clear_status();
  ::msg::TOURNAMENTSTATUS status() const;
  void set_status(::msg::TOURNAMENTSTATUS value);
  private:
  ::msg::TOURNAMENTSTATUS _internal_status() const;
  void _internal_set_status(::msg::TOURNAMENTSTATUS value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTTournament)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass > classes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTTournament_RankInfoEntry_DoNotUse,
        uint64_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> rankinfo_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > pointawardget_;
    mutable std::atomic<int> _pointawardget_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTTournament_PointsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> points_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTTournament_RoundPointsEntry_DoNotUse,
        uint64_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> roundpoints_;
    uint64_t id_;
    uint32_t enrollcount_;
    uint32_t joincount_;
    uint64_t round_;
    uint64_t lastgameid_;
    uint64_t enrollclass_;
    bool enroll_;
    bool out_;
    bool battle_;
    bool challengeagain_;
    int32_t groupidx_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActDaySign_SignDayEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActDaySign_SignDayEntry_DoNotUse, 
    uint32_t, ::msg::CSDTActDaySignDetail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTActDaySign_SignDayEntry_DoNotUse, 
    uint32_t, ::msg::CSDTActDaySignDetail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTActDaySign_SignDayEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTActDaySign_SignDayEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTActDaySign_SignDayEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTActDaySign_SignDayEntry_DoNotUse& other);
  static const CSDTActDaySign_SignDayEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTActDaySign_SignDayEntry_DoNotUse*>(&_CSDTActDaySign_SignDayEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTActDaySign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActDaySign) */ {
 public:
  inline CSDTActDaySign() : CSDTActDaySign(nullptr) {}
  ~CSDTActDaySign() override;
  explicit PROTOBUF_CONSTEXPR CSDTActDaySign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActDaySign(const CSDTActDaySign& from);
  CSDTActDaySign(CSDTActDaySign&& from) noexcept
    : CSDTActDaySign() {
    *this = ::std::move(from);
  }

  inline CSDTActDaySign& operator=(const CSDTActDaySign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActDaySign& operator=(CSDTActDaySign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActDaySign& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActDaySign* internal_default_instance() {
    return reinterpret_cast<const CSDTActDaySign*>(
               &_CSDTActDaySign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(CSDTActDaySign& a, CSDTActDaySign& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActDaySign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActDaySign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActDaySign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActDaySign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActDaySign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActDaySign& from) {
    CSDTActDaySign::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActDaySign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActDaySign";
  }
  protected:
  explicit CSDTActDaySign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSignDayFieldNumber = 1,
    kLoopFieldNumber = 2,
    kDayFieldNumber = 3,
    kReSignTimesFieldNumber = 4,
    kCanSignFieldNumber = 5,
    kCanGetSpecialAwardFieldNumber = 6,
  };
  // map<uint32, .msg.CSDTActDaySignDetail> SignDay = 1;
  int signday_size() const;
  private:
  int _internal_signday_size() const;
  public:
  void clear_signday();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >&
      _internal_signday() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >*
      _internal_mutable_signday();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >&
      signday() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >*
      mutable_signday();

  // uint32 Loop = 2;
  void clear_loop();
  uint32_t loop() const;
  void set_loop(uint32_t value);
  private:
  uint32_t _internal_loop() const;
  void _internal_set_loop(uint32_t value);
  public:

  // uint32 Day = 3;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // uint32 ReSignTimes = 4;
  void clear_resigntimes();
  uint32_t resigntimes() const;
  void set_resigntimes(uint32_t value);
  private:
  uint32_t _internal_resigntimes() const;
  void _internal_set_resigntimes(uint32_t value);
  public:

  // bool CanSign = 5;
  void clear_cansign();
  bool cansign() const;
  void set_cansign(bool value);
  private:
  bool _internal_cansign() const;
  void _internal_set_cansign(bool value);
  public:

  // bool CanGetSpecialAward = 6;
  void clear_cangetspecialaward();
  bool cangetspecialaward() const;
  void set_cangetspecialaward(bool value);
  private:
  bool _internal_cangetspecialaward() const;
  void _internal_set_cangetspecialaward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActDaySign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTActDaySign_SignDayEntry_DoNotUse,
        uint32_t, ::msg::CSDTActDaySignDetail,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> signday_;
    uint32_t loop_;
    uint32_t day_;
    uint32_t resigntimes_;
    bool cansign_;
    bool cangetspecialaward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTActDaySignDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTActDaySignDetail) */ {
 public:
  inline CSDTActDaySignDetail() : CSDTActDaySignDetail(nullptr) {}
  ~CSDTActDaySignDetail() override;
  explicit PROTOBUF_CONSTEXPR CSDTActDaySignDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTActDaySignDetail(const CSDTActDaySignDetail& from);
  CSDTActDaySignDetail(CSDTActDaySignDetail&& from) noexcept
    : CSDTActDaySignDetail() {
    *this = ::std::move(from);
  }

  inline CSDTActDaySignDetail& operator=(const CSDTActDaySignDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTActDaySignDetail& operator=(CSDTActDaySignDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTActDaySignDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTActDaySignDetail* internal_default_instance() {
    return reinterpret_cast<const CSDTActDaySignDetail*>(
               &_CSDTActDaySignDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(CSDTActDaySignDetail& a, CSDTActDaySignDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTActDaySignDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTActDaySignDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTActDaySignDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTActDaySignDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTActDaySignDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTActDaySignDetail& from) {
    CSDTActDaySignDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTActDaySignDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTActDaySignDetail";
  }
  protected:
  explicit CSDTActDaySignDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // int64 Time = 2;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // .msg.ActSignType Type = 1;
  void clear_type();
  ::msg::ActSignType type() const;
  void set_type(::msg::ActSignType value);
  private:
  ::msg::ActSignType _internal_type() const;
  void _internal_set_type(::msg::ActSignType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTActDaySignDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTGDCommonBin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTGDCommonBin) */ {
 public:
  inline CSDTGDCommonBin() : CSDTGDCommonBin(nullptr) {}
  ~CSDTGDCommonBin() override;
  explicit PROTOBUF_CONSTEXPR CSDTGDCommonBin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTGDCommonBin(const CSDTGDCommonBin& from);
  CSDTGDCommonBin(CSDTGDCommonBin&& from) noexcept
    : CSDTGDCommonBin() {
    *this = ::std::move(from);
  }

  inline CSDTGDCommonBin& operator=(const CSDTGDCommonBin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTGDCommonBin& operator=(CSDTGDCommonBin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTGDCommonBin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTGDCommonBin* internal_default_instance() {
    return reinterpret_cast<const CSDTGDCommonBin*>(
               &_CSDTGDCommonBin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(CSDTGDCommonBin& a, CSDTGDCommonBin& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTGDCommonBin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTGDCommonBin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTGDCommonBin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTGDCommonBin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTGDCommonBin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTGDCommonBin& from) {
    CSDTGDCommonBin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTGDCommonBin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTGDCommonBin";
  }
  protected:
  explicit CSDTGDCommonBin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMd5SumFieldNumber = 2,
    kDatasFieldNumber = 4,
    kConfTypFieldNumber = 3,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Md5sum = 2;
  void clear_md5sum();
  const std::string& md5sum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5sum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5sum();
  PROTOBUF_NODISCARD std::string* release_md5sum();
  void set_allocated_md5sum(std::string* md5sum);
  private:
  const std::string& _internal_md5sum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5sum(const std::string& value);
  std::string* _internal_mutable_md5sum();
  public:

  // bytes Datas = 4;
  void clear_datas();
  const std::string& datas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datas();
  PROTOBUF_NODISCARD std::string* release_datas();
  void set_allocated_datas(std::string* datas);
  private:
  const std::string& _internal_datas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datas(const std::string& value);
  std::string* _internal_mutable_datas();
  public:

  // .msg.GDBinType ConfTyp = 3;
  void clear_conftyp();
  ::msg::GDBinType conftyp() const;
  void set_conftyp(::msg::GDBinType value);
  private:
  ::msg::GDBinType _internal_conftyp() const;
  void _internal_set_conftyp(::msg::GDBinType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTGDCommonBin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5sum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datas_;
    int conftyp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTournamentClass_GroupsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournamentClass_GroupsEntry_DoNotUse, 
    uint32_t, ::msg::CSDTBattleGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTTournamentClass_GroupsEntry_DoNotUse, 
    uint32_t, ::msg::CSDTBattleGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CSDTTournamentClass_GroupsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTTournamentClass_GroupsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTTournamentClass_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTTournamentClass_GroupsEntry_DoNotUse& other);
  static const CSDTTournamentClass_GroupsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTTournamentClass_GroupsEntry_DoNotUse*>(&_CSDTTournamentClass_GroupsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTTournamentClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTournamentClass) */ {
 public:
  inline CSDTTournamentClass() : CSDTTournamentClass(nullptr) {}
  ~CSDTTournamentClass() override;
  explicit PROTOBUF_CONSTEXPR CSDTTournamentClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTournamentClass(const CSDTTournamentClass& from);
  CSDTTournamentClass(CSDTTournamentClass&& from) noexcept
    : CSDTTournamentClass() {
    *this = ::std::move(from);
  }

  inline CSDTTournamentClass& operator=(const CSDTTournamentClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTournamentClass& operator=(CSDTTournamentClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTournamentClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTournamentClass* internal_default_instance() {
    return reinterpret_cast<const CSDTTournamentClass*>(
               &_CSDTTournamentClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(CSDTTournamentClass& a, CSDTTournamentClass& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTournamentClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTournamentClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTournamentClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTournamentClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTournamentClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTournamentClass& from) {
    CSDTTournamentClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTournamentClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTournamentClass";
  }
  protected:
  explicit CSDTTournamentClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kClassIdFieldNumber = 1,
    kMaxPlayerCountFieldNumber = 3,
    kCancelFieldNumber = 4,
  };
  // map<uint32, .msg.CSDTBattleGroup> Groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >&
      _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >*
      _internal_mutable_groups();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >*
      mutable_groups();

  // uint64 ClassId = 1;
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // int32 MaxPlayerCount = 3;
  void clear_maxplayercount();
  int32_t maxplayercount() const;
  void set_maxplayercount(int32_t value);
  private:
  int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(int32_t value);
  public:

  // bool Cancel = 4;
  void clear_cancel();
  bool cancel() const;
  void set_cancel(bool value);
  private:
  bool _internal_cancel() const;
  void _internal_set_cancel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTTournamentClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTTournamentClass_GroupsEntry_DoNotUse,
        uint32_t, ::msg::CSDTBattleGroup,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> groups_;
    uint64_t classid_;
    int32_t maxplayercount_;
    bool cancel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBattleGroup_PlayersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTBattleGroup_PlayersEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTBattleGroup_PlayersEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  CSDTBattleGroup_PlayersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTBattleGroup_PlayersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTBattleGroup_PlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTBattleGroup_PlayersEntry_DoNotUse& other);
  static const CSDTBattleGroup_PlayersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTBattleGroup_PlayersEntry_DoNotUse*>(&_CSDTBattleGroup_PlayersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTBattleGroup.PlayersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTBattleGroup_GameIDsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTBattleGroup_GameIDsEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTBattleGroup_GameIDsEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  CSDTBattleGroup_GameIDsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTBattleGroup_GameIDsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTBattleGroup_GameIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTBattleGroup_GameIDsEntry_DoNotUse& other);
  static const CSDTBattleGroup_GameIDsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTBattleGroup_GameIDsEntry_DoNotUse*>(&_CSDTBattleGroup_GameIDsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTBattleGroup.GameIDsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTBattleGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBattleGroup) */ {
 public:
  inline CSDTBattleGroup() : CSDTBattleGroup(nullptr) {}
  ~CSDTBattleGroup() override;
  explicit PROTOBUF_CONSTEXPR CSDTBattleGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBattleGroup(const CSDTBattleGroup& from);
  CSDTBattleGroup(CSDTBattleGroup&& from) noexcept
    : CSDTBattleGroup() {
    *this = ::std::move(from);
  }

  inline CSDTBattleGroup& operator=(const CSDTBattleGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBattleGroup& operator=(CSDTBattleGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBattleGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBattleGroup* internal_default_instance() {
    return reinterpret_cast<const CSDTBattleGroup*>(
               &_CSDTBattleGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(CSDTBattleGroup& a, CSDTBattleGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBattleGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBattleGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBattleGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBattleGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBattleGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBattleGroup& from) {
    CSDTBattleGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBattleGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBattleGroup";
  }
  protected:
  explicit CSDTBattleGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kGameIDsFieldNumber = 6,
    kLastPvpEndTimeFieldNumber = 2,
    kGameIDFieldNumber = 3,
    kRoundIDFieldNumber = 5,
    kIsFightingFieldNumber = 4,
  };
  // map<string, uint64> Players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_players();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_players();

  // map<string, uint64> GameIDs = 6;
  int gameids_size() const;
  private:
  int _internal_gameids_size() const;
  public:
  void clear_gameids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_gameids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_gameids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      gameids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_gameids();

  // int64 LastPvpEndTime = 2;
  void clear_lastpvpendtime();
  int64_t lastpvpendtime() const;
  void set_lastpvpendtime(int64_t value);
  private:
  int64_t _internal_lastpvpendtime() const;
  void _internal_set_lastpvpendtime(int64_t value);
  public:

  // uint64 GameID = 3;
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // uint64 RoundID = 5;
  void clear_roundid();
  uint64_t roundid() const;
  void set_roundid(uint64_t value);
  private:
  uint64_t _internal_roundid() const;
  void _internal_set_roundid(uint64_t value);
  public:

  // bool IsFighting = 4;
  void clear_isfighting();
  bool isfighting() const;
  void set_isfighting(bool value);
  private:
  bool _internal_isfighting() const;
  void _internal_set_isfighting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTBattleGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTBattleGroup_PlayersEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> players_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTBattleGroup_GameIDsEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> gameids_;
    int64_t lastpvpendtime_;
    uint64_t gameid_;
    uint64_t roundid_;
    bool isfighting_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTEnrollEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTEnrollEnd) */ {
 public:
  inline CSDTEnrollEnd() : CSDTEnrollEnd(nullptr) {}
  ~CSDTEnrollEnd() override;
  explicit PROTOBUF_CONSTEXPR CSDTEnrollEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTEnrollEnd(const CSDTEnrollEnd& from);
  CSDTEnrollEnd(CSDTEnrollEnd&& from) noexcept
    : CSDTEnrollEnd() {
    *this = ::std::move(from);
  }

  inline CSDTEnrollEnd& operator=(const CSDTEnrollEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTEnrollEnd& operator=(CSDTEnrollEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTEnrollEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTEnrollEnd* internal_default_instance() {
    return reinterpret_cast<const CSDTEnrollEnd*>(
               &_CSDTEnrollEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(CSDTEnrollEnd& a, CSDTEnrollEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTEnrollEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTEnrollEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTEnrollEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTEnrollEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTEnrollEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTEnrollEnd& from) {
    CSDTEnrollEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTEnrollEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTEnrollEnd";
  }
  protected:
  explicit CSDTEnrollEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCancelClassesFieldNumber = 2,
    kClassGroupsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated uint64 CancelClasses = 2;
  int cancelclasses_size() const;
  private:
  int _internal_cancelclasses_size() const;
  public:
  void clear_cancelclasses();
  private:
  uint64_t _internal_cancelclasses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_cancelclasses() const;
  void _internal_add_cancelclasses(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_cancelclasses();
  public:
  uint64_t cancelclasses(int index) const;
  void set_cancelclasses(int index, uint64_t value);
  void add_cancelclasses(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      cancelclasses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_cancelclasses();

  // repeated .msg.CSDTTournamentClass ClassGroups = 3;
  int classgroups_size() const;
  private:
  int _internal_classgroups_size() const;
  public:
  void clear_classgroups();
  ::msg::CSDTTournamentClass* mutable_classgroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >*
      mutable_classgroups();
  private:
  const ::msg::CSDTTournamentClass& _internal_classgroups(int index) const;
  ::msg::CSDTTournamentClass* _internal_add_classgroups();
  public:
  const ::msg::CSDTTournamentClass& classgroups(int index) const;
  ::msg::CSDTTournamentClass* add_classgroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >&
      classgroups() const;

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTEnrollEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > cancelclasses_;
    mutable std::atomic<int> _cancelclasses_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass > classgroups_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTNewTournament_ClassesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTNewTournament_ClassesEntry_DoNotUse, 
    uint64_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTNewTournament_ClassesEntry_DoNotUse, 
    uint64_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  CSDTNewTournament_ClassesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTNewTournament_ClassesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTNewTournament_ClassesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTNewTournament_ClassesEntry_DoNotUse& other);
  static const CSDTNewTournament_ClassesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTNewTournament_ClassesEntry_DoNotUse*>(&_CSDTNewTournament_ClassesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTNewTournament final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTNewTournament) */ {
 public:
  inline CSDTNewTournament() : CSDTNewTournament(nullptr) {}
  ~CSDTNewTournament() override;
  explicit PROTOBUF_CONSTEXPR CSDTNewTournament(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTNewTournament(const CSDTNewTournament& from);
  CSDTNewTournament(CSDTNewTournament&& from) noexcept
    : CSDTNewTournament() {
    *this = ::std::move(from);
  }

  inline CSDTNewTournament& operator=(const CSDTNewTournament& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTNewTournament& operator=(CSDTNewTournament&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTNewTournament& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTNewTournament* internal_default_instance() {
    return reinterpret_cast<const CSDTNewTournament*>(
               &_CSDTNewTournament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(CSDTNewTournament& a, CSDTNewTournament& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTNewTournament* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTNewTournament* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTNewTournament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTNewTournament>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTNewTournament& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTNewTournament& from) {
    CSDTNewTournament::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTNewTournament* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTNewTournament";
  }
  protected:
  explicit CSDTNewTournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<uint64, int32> Classes = 2;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
      _internal_classes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
      _internal_mutable_classes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
      classes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
      mutable_classes();

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTNewTournament)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTNewTournament_ClassesEntry_DoNotUse,
        uint64_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> classes_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TournamentDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TournamentDesc) */ {
 public:
  inline TournamentDesc() : TournamentDesc(nullptr) {}
  ~TournamentDesc() override;
  explicit PROTOBUF_CONSTEXPR TournamentDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentDesc(const TournamentDesc& from);
  TournamentDesc(TournamentDesc&& from) noexcept
    : TournamentDesc() {
    *this = ::std::move(from);
  }

  inline TournamentDesc& operator=(const TournamentDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentDesc& operator=(TournamentDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentDesc* internal_default_instance() {
    return reinterpret_cast<const TournamentDesc*>(
               &_TournamentDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(TournamentDesc& a, TournamentDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TournamentDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TournamentDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TournamentDesc& from) {
    TournamentDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TournamentDesc";
  }
  protected:
  explicit TournamentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTournamentIDFieldNumber = 1,
    kTNClassFieldNumber = 2,
    kTNClassRoundFieldNumber = 4,
    kGroupIndexFieldNumber = 3,
  };
  // uint64 TournamentID = 1;
  void clear_tournamentid();
  uint64_t tournamentid() const;
  void set_tournamentid(uint64_t value);
  private:
  uint64_t _internal_tournamentid() const;
  void _internal_set_tournamentid(uint64_t value);
  public:

  // uint64 TNClass = 2;
  void clear_tnclass();
  uint64_t tnclass() const;
  void set_tnclass(uint64_t value);
  private:
  uint64_t _internal_tnclass() const;
  void _internal_set_tnclass(uint64_t value);
  public:

  // uint64 TNClassRound = 4;
  void clear_tnclassround();
  uint64_t tnclassround() const;
  void set_tnclassround(uint64_t value);
  private:
  uint64_t _internal_tnclassround() const;
  void _internal_set_tnclassround(uint64_t value);
  public:

  // int32 GroupIndex = 3;
  void clear_groupindex();
  int32_t groupindex() const;
  void set_groupindex(int32_t value);
  private:
  int32_t _internal_groupindex() const;
  void _internal_set_groupindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TournamentDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t tournamentid_;
    uint64_t tnclass_;
    uint64_t tnclassround_;
    int32_t groupindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TournamentRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TournamentRoom) */ {
 public:
  inline TournamentRoom() : TournamentRoom(nullptr) {}
  ~TournamentRoom() override;
  explicit PROTOBUF_CONSTEXPR TournamentRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentRoom(const TournamentRoom& from);
  TournamentRoom(TournamentRoom&& from) noexcept
    : TournamentRoom() {
    *this = ::std::move(from);
  }

  inline TournamentRoom& operator=(const TournamentRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentRoom& operator=(TournamentRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentRoom* internal_default_instance() {
    return reinterpret_cast<const TournamentRoom*>(
               &_TournamentRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(TournamentRoom& a, TournamentRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TournamentRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TournamentRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TournamentRoom& from) {
    TournamentRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TournamentRoom";
  }
  protected:
  explicit TournamentRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyIdsFieldNumber = 2,
    kPlayerDatasFieldNumber = 4,
    kGameStartTimeFieldNumber = 1,
    kSelfSlotFieldNumber = 3,
    kMaxPlayerCountFieldNumber = 5,
    kTournamentIDFieldNumber = 6,
    kClassIDFieldNumber = 7,
    kRoundIDFieldNumber = 8,
    kGroupIndexFieldNumber = 9,
    kStatusFieldNumber = 10,
  };
  // repeated string ReadyIds = 2;
  int readyids_size() const;
  private:
  int _internal_readyids_size() const;
  public:
  void clear_readyids();
  const std::string& readyids(int index) const;
  std::string* mutable_readyids(int index);
  void set_readyids(int index, const std::string& value);
  void set_readyids(int index, std::string&& value);
  void set_readyids(int index, const char* value);
  void set_readyids(int index, const char* value, size_t size);
  std::string* add_readyids();
  void add_readyids(const std::string& value);
  void add_readyids(std::string&& value);
  void add_readyids(const char* value);
  void add_readyids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& readyids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_readyids();
  private:
  const std::string& _internal_readyids(int index) const;
  std::string* _internal_add_readyids();
  public:

  // repeated .msg.PvpPlayerData PlayerDatas = 4;
  int playerdatas_size() const;
  private:
  int _internal_playerdatas_size() const;
  public:
  void clear_playerdatas();
  ::msg::PvpPlayerData* mutable_playerdatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PvpPlayerData >*
      mutable_playerdatas();
  private:
  const ::msg::PvpPlayerData& _internal_playerdatas(int index) const;
  ::msg::PvpPlayerData* _internal_add_playerdatas();
  public:
  const ::msg::PvpPlayerData& playerdatas(int index) const;
  ::msg::PvpPlayerData* add_playerdatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PvpPlayerData >&
      playerdatas() const;

  // uint64 GameStartTime = 1;
  void clear_gamestarttime();
  uint64_t gamestarttime() const;
  void set_gamestarttime(uint64_t value);
  private:
  uint64_t _internal_gamestarttime() const;
  void _internal_set_gamestarttime(uint64_t value);
  public:

  // uint32 SelfSlot = 3;
  void clear_selfslot();
  uint32_t selfslot() const;
  void set_selfslot(uint32_t value);
  private:
  uint32_t _internal_selfslot() const;
  void _internal_set_selfslot(uint32_t value);
  public:

  // int32 MaxPlayerCount = 5;
  void clear_maxplayercount();
  int32_t maxplayercount() const;
  void set_maxplayercount(int32_t value);
  private:
  int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(int32_t value);
  public:

  // uint64 TournamentID = 6;
  void clear_tournamentid();
  uint64_t tournamentid() const;
  void set_tournamentid(uint64_t value);
  private:
  uint64_t _internal_tournamentid() const;
  void _internal_set_tournamentid(uint64_t value);
  public:

  // uint64 ClassID = 7;
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // uint64 RoundID = 8;
  void clear_roundid();
  uint64_t roundid() const;
  void set_roundid(uint64_t value);
  private:
  uint64_t _internal_roundid() const;
  void _internal_set_roundid(uint64_t value);
  public:

  // int32 GroupIndex = 9;
  void clear_groupindex();
  int32_t groupindex() const;
  void set_groupindex(int32_t value);
  private:
  int32_t _internal_groupindex() const;
  void _internal_set_groupindex(int32_t value);
  public:

  // .msg.TeamState Status = 10;
  void clear_status();
  ::msg::TeamState status() const;
  void set_status(::msg::TeamState value);
  private:
  ::msg::TeamState _internal_status() const;
  void _internal_set_status(::msg::TeamState value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TournamentRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> readyids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PvpPlayerData > playerdatas_;
    uint64_t gamestarttime_;
    uint32_t selfslot_;
    int32_t maxplayercount_;
    uint64_t tournamentid_;
    uint64_t classid_;
    uint64_t roundid_;
    int32_t groupindex_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerTournament_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournament_DataEntry_DoNotUse, 
    uint64_t, ::msg::PlayerTournamentData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournament_DataEntry_DoNotUse, 
    uint64_t, ::msg::PlayerTournamentData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PlayerTournament_DataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerTournament_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerTournament_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerTournament_DataEntry_DoNotUse& other);
  static const PlayerTournament_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerTournament_DataEntry_DoNotUse*>(&_PlayerTournament_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerTournament_PointsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournament_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournament_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PlayerTournament_PointsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerTournament_PointsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerTournament_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerTournament_PointsEntry_DoNotUse& other);
  static const PlayerTournament_PointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerTournament_PointsEntry_DoNotUse*>(&_PlayerTournament_PointsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerTournament_EnrollCountEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournament_EnrollCountEntry_DoNotUse, 
    uint64_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournament_EnrollCountEntry_DoNotUse, 
    uint64_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PlayerTournament_EnrollCountEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerTournament_EnrollCountEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerTournament_EnrollCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerTournament_EnrollCountEntry_DoNotUse& other);
  static const PlayerTournament_EnrollCountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerTournament_EnrollCountEntry_DoNotUse*>(&_PlayerTournament_EnrollCountEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerTournament final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerTournament) */ {
 public:
  inline PlayerTournament() : PlayerTournament(nullptr) {}
  ~PlayerTournament() override;
  explicit PROTOBUF_CONSTEXPR PlayerTournament(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerTournament(const PlayerTournament& from);
  PlayerTournament(PlayerTournament&& from) noexcept
    : PlayerTournament() {
    *this = ::std::move(from);
  }

  inline PlayerTournament& operator=(const PlayerTournament& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerTournament& operator=(PlayerTournament&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerTournament& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerTournament* internal_default_instance() {
    return reinterpret_cast<const PlayerTournament*>(
               &_PlayerTournament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(PlayerTournament& a, PlayerTournament& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerTournament* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerTournament* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerTournament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerTournament>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerTournament& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerTournament& from) {
    PlayerTournament::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTournament* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerTournament";
  }
  protected:
  explicit PlayerTournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPointsFieldNumber = 3,
    kEnrollCountFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // map<uint64, .msg.PlayerTournamentData> Data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >*
      mutable_data();

  // map<uint32, uint32> Points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_points();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_points();

  // map<uint64, uint32> EnrollCount = 4;
  int enrollcount_size() const;
  private:
  int _internal_enrollcount_size() const;
  public:
  void clear_enrollcount();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
      _internal_enrollcount() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
      _internal_mutable_enrollcount();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
      enrollcount() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
      mutable_enrollcount();

  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerTournament)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerTournament_DataEntry_DoNotUse,
        uint64_t, ::msg::PlayerTournamentData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerTournament_PointsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> points_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerTournament_EnrollCountEntry_DoNotUse,
        uint64_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> enrollcount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerTournamentData_GetRewardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournamentData_GetRewardEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournamentData_GetRewardEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  PlayerTournamentData_GetRewardEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerTournamentData_GetRewardEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerTournamentData_GetRewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerTournamentData_GetRewardEntry_DoNotUse& other);
  static const PlayerTournamentData_GetRewardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerTournamentData_GetRewardEntry_DoNotUse*>(&_PlayerTournamentData_GetRewardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerTournamentData_PointsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournamentData_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournamentData_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PlayerTournamentData_PointsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerTournamentData_PointsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerTournamentData_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerTournamentData_PointsEntry_DoNotUse& other);
  static const PlayerTournamentData_PointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerTournamentData_PointsEntry_DoNotUse*>(&_PlayerTournamentData_PointsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerTournamentData_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournamentData_DataEntry_DoNotUse, 
    uint64_t, ::msg::RoundData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerTournamentData_DataEntry_DoNotUse, 
    uint64_t, ::msg::RoundData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PlayerTournamentData_DataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerTournamentData_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerTournamentData_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerTournamentData_DataEntry_DoNotUse& other);
  static const PlayerTournamentData_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerTournamentData_DataEntry_DoNotUse*>(&_PlayerTournamentData_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerTournamentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerTournamentData) */ {
 public:
  inline PlayerTournamentData() : PlayerTournamentData(nullptr) {}
  ~PlayerTournamentData() override;
  explicit PROTOBUF_CONSTEXPR PlayerTournamentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerTournamentData(const PlayerTournamentData& from);
  PlayerTournamentData(PlayerTournamentData&& from) noexcept
    : PlayerTournamentData() {
    *this = ::std::move(from);
  }

  inline PlayerTournamentData& operator=(const PlayerTournamentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerTournamentData& operator=(PlayerTournamentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerTournamentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerTournamentData* internal_default_instance() {
    return reinterpret_cast<const PlayerTournamentData*>(
               &_PlayerTournamentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  friend void swap(PlayerTournamentData& a, PlayerTournamentData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerTournamentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerTournamentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerTournamentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerTournamentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerTournamentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerTournamentData& from) {
    PlayerTournamentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTournamentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerTournamentData";
  }
  protected:
  explicit PlayerTournamentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGetRewardFieldNumber = 3,
    kPointsFieldNumber = 4,
    kDataFieldNumber = 9,
    kIdFieldNumber = 1,
    kClassIdFieldNumber = 2,
    kCurRoundFieldNumber = 5,
    kGameIdFieldNumber = 6,
    kSignUpTimeFieldNumber = 8,
    kPvpIdFieldNumber = 10,
    kPvpEndTimeFieldNumber = 11,
    kOutFieldNumber = 7,
  };
  // map<uint32, bool> GetReward = 3;
  int getreward_size() const;
  private:
  int _internal_getreward_size() const;
  public:
  void clear_getreward();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      _internal_getreward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      _internal_mutable_getreward();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      getreward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      mutable_getreward();

  // map<uint32, uint32> Points = 4;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_points();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_points();

  // map<uint64, .msg.RoundData> Data = 9;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >*
      mutable_data();

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 ClassId = 2;
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // uint64 CurRound = 5;
  void clear_curround();
  uint64_t curround() const;
  void set_curround(uint64_t value);
  private:
  uint64_t _internal_curround() const;
  void _internal_set_curround(uint64_t value);
  public:

  // uint64 GameId = 6;
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // int64 SignUpTime = 8;
  void clear_signuptime();
  int64_t signuptime() const;
  void set_signuptime(int64_t value);
  private:
  int64_t _internal_signuptime() const;
  void _internal_set_signuptime(int64_t value);
  public:

  // uint64 PvpId = 10;
  void clear_pvpid();
  uint64_t pvpid() const;
  void set_pvpid(uint64_t value);
  private:
  uint64_t _internal_pvpid() const;
  void _internal_set_pvpid(uint64_t value);
  public:

  // int64 PvpEndTime = 11;
  void clear_pvpendtime();
  int64_t pvpendtime() const;
  void set_pvpendtime(int64_t value);
  private:
  int64_t _internal_pvpendtime() const;
  void _internal_set_pvpendtime(int64_t value);
  public:

  // bool Out = 7;
  void clear_out();
  bool out() const;
  void set_out(bool value);
  private:
  bool _internal_out() const;
  void _internal_set_out(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerTournamentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerTournamentData_GetRewardEntry_DoNotUse,
        uint32_t, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> getreward_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerTournamentData_PointsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> points_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerTournamentData_DataEntry_DoNotUse,
        uint64_t, ::msg::RoundData,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
    uint64_t id_;
    uint64_t classid_;
    uint64_t curround_;
    uint64_t gameid_;
    int64_t signuptime_;
    uint64_t pvpid_;
    int64_t pvpendtime_;
    bool out_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoundData_PointsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RoundData_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RoundData_PointsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  RoundData_PointsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RoundData_PointsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RoundData_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RoundData_PointsEntry_DoNotUse& other);
  static const RoundData_PointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RoundData_PointsEntry_DoNotUse*>(&_RoundData_PointsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class RoundData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RoundData) */ {
 public:
  inline RoundData() : RoundData(nullptr) {}
  ~RoundData() override;
  explicit PROTOBUF_CONSTEXPR RoundData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoundData(const RoundData& from);
  RoundData(RoundData&& from) noexcept
    : RoundData() {
    *this = ::std::move(from);
  }

  inline RoundData& operator=(const RoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundData& operator=(RoundData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoundData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoundData* internal_default_instance() {
    return reinterpret_cast<const RoundData*>(
               &_RoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  friend void swap(RoundData& a, RoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoundData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoundData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoundData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoundData& from) {
    RoundData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RoundData";
  }
  protected:
  explicit RoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kRoundFieldNumber = 1,
    kRankFieldNumber = 2,
    kFightTimesFieldNumber = 4,
    kTotalRankFieldNumber = 5,
    kTopCntFieldNumber = 6,
    kSecondCntFieldNumber = 7,
    kThirdCntFieldNumber = 8,
    kWinTimesFieldNumber = 9,
    kLostBloodFieldNumber = 10,
    kDamageFieldNumber = 11,
  };
  // map<uint32, uint32> Points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_points();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_points();

  // uint64 Round = 1;
  void clear_round();
  uint64_t round() const;
  void set_round(uint64_t value);
  private:
  uint64_t _internal_round() const;
  void _internal_set_round(uint64_t value);
  public:

  // uint32 Rank = 2;
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // uint32 FightTimes = 4;
  void clear_fighttimes();
  uint32_t fighttimes() const;
  void set_fighttimes(uint32_t value);
  private:
  uint32_t _internal_fighttimes() const;
  void _internal_set_fighttimes(uint32_t value);
  public:

  // uint32 TotalRank = 5;
  void clear_totalrank();
  uint32_t totalrank() const;
  void set_totalrank(uint32_t value);
  private:
  uint32_t _internal_totalrank() const;
  void _internal_set_totalrank(uint32_t value);
  public:

  // uint32 TopCnt = 6;
  void clear_topcnt();
  uint32_t topcnt() const;
  void set_topcnt(uint32_t value);
  private:
  uint32_t _internal_topcnt() const;
  void _internal_set_topcnt(uint32_t value);
  public:

  // uint32 SecondCnt = 7;
  void clear_secondcnt();
  uint32_t secondcnt() const;
  void set_secondcnt(uint32_t value);
  private:
  uint32_t _internal_secondcnt() const;
  void _internal_set_secondcnt(uint32_t value);
  public:

  // uint32 ThirdCnt = 8;
  void clear_thirdcnt();
  uint32_t thirdcnt() const;
  void set_thirdcnt(uint32_t value);
  private:
  uint32_t _internal_thirdcnt() const;
  void _internal_set_thirdcnt(uint32_t value);
  public:

  // uint32 WinTimes = 9;
  void clear_wintimes();
  uint32_t wintimes() const;
  void set_wintimes(uint32_t value);
  private:
  uint32_t _internal_wintimes() const;
  void _internal_set_wintimes(uint32_t value);
  public:

  // uint32 LostBlood = 10;
  void clear_lostblood();
  uint32_t lostblood() const;
  void set_lostblood(uint32_t value);
  private:
  uint32_t _internal_lostblood() const;
  void _internal_set_lostblood(uint32_t value);
  public:

  // uint32 Damage = 11;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.RoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RoundData_PointsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> points_;
    uint64_t round_;
    uint32_t rank_;
    uint32_t fighttimes_;
    uint32_t totalrank_;
    uint32_t topcnt_;
    uint32_t secondcnt_;
    uint32_t thirdcnt_;
    uint32_t wintimes_;
    uint32_t lostblood_;
    uint32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildBaseInfo) */ {
 public:
  inline GuildBaseInfo() : GuildBaseInfo(nullptr) {}
  ~GuildBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR GuildBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildBaseInfo(const GuildBaseInfo& from);
  GuildBaseInfo(GuildBaseInfo&& from) noexcept
    : GuildBaseInfo() {
    *this = ::std::move(from);
  }

  inline GuildBaseInfo& operator=(const GuildBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildBaseInfo& operator=(GuildBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildBaseInfo* internal_default_instance() {
    return reinterpret_cast<const GuildBaseInfo*>(
               &_GuildBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  friend void swap(GuildBaseInfo& a, GuildBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildBaseInfo& from) {
    GuildBaseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildBaseInfo";
  }
  protected:
  explicit GuildBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kNoticeFieldNumber = 4,
    kRecruitNoticeFieldNumber = 5,
    kCountryFieldNumber = 7,
    kLanguageFieldNumber = 8,
    kOwnerFieldNumber = 13,
    kOwnerNameFieldNumber = 14,
    kChannelUsrIDFieldNumber = 17,
    kSignFieldNumber = 3,
    kRequirePermitFieldNumber = 9,
    kRequireCupFieldNumber = 10,
    kMemberCountFieldNumber = 11,
    kProvinceFieldNumber = 12,
    kLevelFieldNumber = 15,
    kExpFieldNumber = 16,
  };
  // repeated int32 Tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  int32_t _internal_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_tags() const;
  void _internal_add_tags(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_tags();
  public:
  int32_t tags(int index) const;
  void set_tags(int index, int32_t value);
  void add_tags(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_tags();

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Notice = 4;
  void clear_notice();
  const std::string& notice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notice();
  PROTOBUF_NODISCARD std::string* release_notice();
  void set_allocated_notice(std::string* notice);
  private:
  const std::string& _internal_notice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notice(const std::string& value);
  std::string* _internal_mutable_notice();
  public:

  // string RecruitNotice = 5;
  void clear_recruitnotice();
  const std::string& recruitnotice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recruitnotice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recruitnotice();
  PROTOBUF_NODISCARD std::string* release_recruitnotice();
  void set_allocated_recruitnotice(std::string* recruitnotice);
  private:
  const std::string& _internal_recruitnotice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recruitnotice(const std::string& value);
  std::string* _internal_mutable_recruitnotice();
  public:

  // string Country = 7;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string Language = 8;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string Owner = 13;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string OwnerName = 14;
  void clear_ownername();
  const std::string& ownername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownername();
  PROTOBUF_NODISCARD std::string* release_ownername();
  void set_allocated_ownername(std::string* ownername);
  private:
  const std::string& _internal_ownername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownername(const std::string& value);
  std::string* _internal_mutable_ownername();
  public:

  // string ChannelUsrID = 17;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // int32 Sign = 3;
  void clear_sign();
  int32_t sign() const;
  void set_sign(int32_t value);
  private:
  int32_t _internal_sign() const;
  void _internal_set_sign(int32_t value);
  public:

  // bool RequirePermit = 9;
  void clear_requirepermit();
  bool requirepermit() const;
  void set_requirepermit(bool value);
  private:
  bool _internal_requirepermit() const;
  void _internal_set_requirepermit(bool value);
  public:

  // int32 RequireCup = 10;
  void clear_requirecup();
  int32_t requirecup() const;
  void set_requirecup(int32_t value);
  private:
  int32_t _internal_requirecup() const;
  void _internal_set_requirecup(int32_t value);
  public:

  // int32 MemberCount = 11;
  void clear_membercount();
  int32_t membercount() const;
  void set_membercount(int32_t value);
  private:
  int32_t _internal_membercount() const;
  void _internal_set_membercount(int32_t value);
  public:

  // uint32 Province = 12;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // int32 Level = 15;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 Exp = 16;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > tags_;
    mutable std::atomic<int> _tags_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recruitnotice_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    int32_t sign_;
    bool requirepermit_;
    int32_t requirecup_;
    int32_t membercount_;
    uint32_t province_;
    int32_t level_;
    int32_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildAttr) */ {
 public:
  inline GuildAttr() : GuildAttr(nullptr) {}
  ~GuildAttr() override;
  explicit PROTOBUF_CONSTEXPR GuildAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildAttr(const GuildAttr& from);
  GuildAttr(GuildAttr&& from) noexcept
    : GuildAttr() {
    *this = ::std::move(from);
  }

  inline GuildAttr& operator=(const GuildAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildAttr& operator=(GuildAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildAttr* internal_default_instance() {
    return reinterpret_cast<const GuildAttr*>(
               &_GuildAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    238;

  friend void swap(GuildAttr& a, GuildAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildAttr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildAttr& from) {
    GuildAttr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildAttr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildAttr";
  }
  protected:
  explicit GuildAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kNameFieldNumber = 1,
    kNoticeFieldNumber = 4,
    kRecruitNoticeFieldNumber = 5,
    kOwnerFieldNumber = 7,
    kOwnerNameFieldNumber = 8,
    kCountryFieldNumber = 11,
    kLanguageFieldNumber = 13,
    kSignFieldNumber = 2,
    kRequirePermitFieldNumber = 9,
    kRequireCupFieldNumber = 10,
    kProvinceFieldNumber = 12,
  };
  // repeated int32 Tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  int32_t _internal_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_tags() const;
  void _internal_add_tags(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_tags();
  public:
  int32_t tags(int index) const;
  void set_tags(int index, int32_t value);
  void add_tags(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_tags();

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Notice = 4;
  void clear_notice();
  const std::string& notice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notice();
  PROTOBUF_NODISCARD std::string* release_notice();
  void set_allocated_notice(std::string* notice);
  private:
  const std::string& _internal_notice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notice(const std::string& value);
  std::string* _internal_mutable_notice();
  public:

  // string RecruitNotice = 5;
  void clear_recruitnotice();
  const std::string& recruitnotice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recruitnotice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recruitnotice();
  PROTOBUF_NODISCARD std::string* release_recruitnotice();
  void set_allocated_recruitnotice(std::string* recruitnotice);
  private:
  const std::string& _internal_recruitnotice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recruitnotice(const std::string& value);
  std::string* _internal_mutable_recruitnotice();
  public:

  // string Owner = 7;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string OwnerName = 8;
  void clear_ownername();
  const std::string& ownername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownername();
  PROTOBUF_NODISCARD std::string* release_ownername();
  void set_allocated_ownername(std::string* ownername);
  private:
  const std::string& _internal_ownername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownername(const std::string& value);
  std::string* _internal_mutable_ownername();
  public:

  // string Country = 11;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string Language = 13;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // int32 Sign = 2;
  void clear_sign();
  int32_t sign() const;
  void set_sign(int32_t value);
  private:
  int32_t _internal_sign() const;
  void _internal_set_sign(int32_t value);
  public:

  // .msg.GUILDPERMITTYPE RequirePermit = 9;
  void clear_requirepermit();
  ::msg::GUILDPERMITTYPE requirepermit() const;
  void set_requirepermit(::msg::GUILDPERMITTYPE value);
  private:
  ::msg::GUILDPERMITTYPE _internal_requirepermit() const;
  void _internal_set_requirepermit(::msg::GUILDPERMITTYPE value);
  public:

  // int32 RequireCup = 10;
  void clear_requirecup();
  int32_t requirecup() const;
  void set_requirecup(int32_t value);
  private:
  int32_t _internal_requirecup() const;
  void _internal_set_requirecup(int32_t value);
  public:

  // uint32 Province = 12;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > tags_;
    mutable std::atomic<int> _tags_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recruitnotice_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    int32_t sign_;
    int requirepermit_;
    int32_t requirecup_;
    uint32_t province_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildApplicant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildApplicant) */ {
 public:
  inline GuildApplicant() : GuildApplicant(nullptr) {}
  ~GuildApplicant() override;
  explicit PROTOBUF_CONSTEXPR GuildApplicant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildApplicant(const GuildApplicant& from);
  GuildApplicant(GuildApplicant&& from) noexcept
    : GuildApplicant() {
    *this = ::std::move(from);
  }

  inline GuildApplicant& operator=(const GuildApplicant& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildApplicant& operator=(GuildApplicant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildApplicant& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildApplicant* internal_default_instance() {
    return reinterpret_cast<const GuildApplicant*>(
               &_GuildApplicant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    239;

  friend void swap(GuildApplicant& a, GuildApplicant& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildApplicant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildApplicant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildApplicant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildApplicant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildApplicant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildApplicant& from) {
    GuildApplicant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildApplicant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildApplicant";
  }
  protected:
  explicit GuildApplicant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kChannelUsrIDFieldNumber = 3,
    kTsFieldNumber = 2,
  };
  // string Player = 1;
  void clear_player();
  const std::string& player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player();
  PROTOBUF_NODISCARD std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // string ChannelUsrID = 3;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // int64 ts = 2;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildApplicant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    int64_t ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildMember) */ {
 public:
  inline GuildMember() : GuildMember(nullptr) {}
  ~GuildMember() override;
  explicit PROTOBUF_CONSTEXPR GuildMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildMember(const GuildMember& from);
  GuildMember(GuildMember&& from) noexcept
    : GuildMember() {
    *this = ::std::move(from);
  }

  inline GuildMember& operator=(const GuildMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildMember& operator=(GuildMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildMember* internal_default_instance() {
    return reinterpret_cast<const GuildMember*>(
               &_GuildMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    240;

  friend void swap(GuildMember& a, GuildMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildMember& from) {
    GuildMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildMember";
  }
  protected:
  explicit GuildMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kRoleFieldNumber = 2,
    kActiveScoreFieldNumber = 3,
  };
  // string Player = 1;
  void clear_player();
  const std::string& player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player();
  PROTOBUF_NODISCARD std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // .msg.GUILDROLETYPE Role = 2;
  void clear_role();
  ::msg::GUILDROLETYPE role() const;
  void set_role(::msg::GUILDROLETYPE value);
  private:
  ::msg::GUILDROLETYPE _internal_role() const;
  void _internal_set_role(::msg::GUILDROLETYPE value);
  public:

  // int32 ActiveScore = 3;
  void clear_activescore();
  int32_t activescore() const;
  void set_activescore(int32_t value);
  private:
  int32_t _internal_activescore() const;
  void _internal_set_activescore(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
    int role_;
    int32_t activescore_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildExtraInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildExtraInfo) */ {
 public:
  inline GuildExtraInfo() : GuildExtraInfo(nullptr) {}
  ~GuildExtraInfo() override;
  explicit PROTOBUF_CONSTEXPR GuildExtraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildExtraInfo(const GuildExtraInfo& from);
  GuildExtraInfo(GuildExtraInfo&& from) noexcept
    : GuildExtraInfo() {
    *this = ::std::move(from);
  }

  inline GuildExtraInfo& operator=(const GuildExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildExtraInfo& operator=(GuildExtraInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildExtraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildExtraInfo* internal_default_instance() {
    return reinterpret_cast<const GuildExtraInfo*>(
               &_GuildExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    241;

  friend void swap(GuildExtraInfo& a, GuildExtraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildExtraInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildExtraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildExtraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildExtraInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildExtraInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildExtraInfo& from) {
    GuildExtraInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildExtraInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildExtraInfo";
  }
  protected:
  explicit GuildExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kPlayersFieldNumber = 2,
    kLogsFieldNumber = 3,
  };
  // repeated .msg.GuildMember Members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::msg::GuildMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildMember >*
      mutable_members();
  private:
  const ::msg::GuildMember& _internal_members(int index) const;
  ::msg::GuildMember* _internal_add_members();
  public:
  const ::msg::GuildMember& members(int index) const;
  ::msg::GuildMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildMember >&
      members() const;

  // repeated .msg.GuildApplicant Players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::msg::GuildApplicant* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildApplicant >*
      mutable_players();
  private:
  const ::msg::GuildApplicant& _internal_players(int index) const;
  ::msg::GuildApplicant* _internal_add_players();
  public:
  const ::msg::GuildApplicant& players(int index) const;
  ::msg::GuildApplicant* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildApplicant >&
      players() const;

  // repeated .msg.GuildLog Logs = 3;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::msg::GuildLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildLog >*
      mutable_logs();
  private:
  const ::msg::GuildLog& _internal_logs(int index) const;
  ::msg::GuildLog* _internal_add_logs();
  public:
  const ::msg::GuildLog& logs(int index) const;
  ::msg::GuildLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildLog >&
      logs() const;

  // @@protoc_insertion_point(class_scope:msg.GuildExtraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildMember > members_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildApplicant > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildLog > logs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildChatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildChatInfo) */ {
 public:
  inline GuildChatInfo() : GuildChatInfo(nullptr) {}
  ~GuildChatInfo() override;
  explicit PROTOBUF_CONSTEXPR GuildChatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildChatInfo(const GuildChatInfo& from);
  GuildChatInfo(GuildChatInfo&& from) noexcept
    : GuildChatInfo() {
    *this = ::std::move(from);
  }

  inline GuildChatInfo& operator=(const GuildChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildChatInfo& operator=(GuildChatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildChatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildChatInfo* internal_default_instance() {
    return reinterpret_cast<const GuildChatInfo*>(
               &_GuildChatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    242;

  friend void swap(GuildChatInfo& a, GuildChatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildChatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildChatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildChatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildChatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildChatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildChatInfo& from) {
    GuildChatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildChatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildChatInfo";
  }
  protected:
  explicit GuildChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kPlayerFieldNumber = 1,
    kEmotionFieldNumber = 3,
    kNeedLocalizeFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kSourceTypeFieldNumber = 6,
  };
  // string Content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .msg.CSDTPlayerSimpleInfo Player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::msg::CSDTPlayerSimpleInfo& player() const;
  PROTOBUF_NODISCARD ::msg::CSDTPlayerSimpleInfo* release_player();
  ::msg::CSDTPlayerSimpleInfo* mutable_player();
  void set_allocated_player(::msg::CSDTPlayerSimpleInfo* player);
  private:
  const ::msg::CSDTPlayerSimpleInfo& _internal_player() const;
  ::msg::CSDTPlayerSimpleInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::msg::CSDTPlayerSimpleInfo* player);
  ::msg::CSDTPlayerSimpleInfo* unsafe_arena_release_player();

  // uint32 Emotion = 3;
  void clear_emotion();
  uint32_t emotion() const;
  void set_emotion(uint32_t value);
  private:
  uint32_t _internal_emotion() const;
  void _internal_set_emotion(uint32_t value);
  public:

  // bool NeedLocalize = 4;
  void clear_needlocalize();
  bool needlocalize() const;
  void set_needlocalize(bool value);
  private:
  bool _internal_needlocalize() const;
  void _internal_set_needlocalize(bool value);
  public:

  // int64 Timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .msg.CHATSOURCETYPE SourceType = 6;
  void clear_sourcetype();
  ::msg::CHATSOURCETYPE sourcetype() const;
  void set_sourcetype(::msg::CHATSOURCETYPE value);
  private:
  ::msg::CHATSOURCETYPE _internal_sourcetype() const;
  void _internal_set_sourcetype(::msg::CHATSOURCETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildChatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::msg::CSDTPlayerSimpleInfo* player_;
    uint32_t emotion_;
    bool needlocalize_;
    int64_t timestamp_;
    int sourcetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildLog_ParaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GuildLog_ParaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GuildLog_ParaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GuildLog_ParaEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GuildLog_ParaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GuildLog_ParaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GuildLog_ParaEntry_DoNotUse& other);
  static const GuildLog_ParaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GuildLog_ParaEntry_DoNotUse*>(&_GuildLog_ParaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.GuildLog.ParaEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.GuildLog.ParaEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class GuildLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildLog) */ {
 public:
  inline GuildLog() : GuildLog(nullptr) {}
  ~GuildLog() override;
  explicit PROTOBUF_CONSTEXPR GuildLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildLog(const GuildLog& from);
  GuildLog(GuildLog&& from) noexcept
    : GuildLog() {
    *this = ::std::move(from);
  }

  inline GuildLog& operator=(const GuildLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildLog& operator=(GuildLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildLog* internal_default_instance() {
    return reinterpret_cast<const GuildLog*>(
               &_GuildLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    244;

  friend void swap(GuildLog& a, GuildLog& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildLog& from) {
    GuildLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildLog";
  }
  protected:
  explicit GuildLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 2,
    kKeyFieldNumber = 1,
    kTsFieldNumber = 6,
    kPs4OnlyFieldNumber = 3,
    kPsFieldNumber = 4,
  };
  // map<string, string> Para = 2;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_para() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_para();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_para();

  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 Ts = 6;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // bool ps4Only = 3;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // bool ps = 4;
  void clear_ps();
  bool ps() const;
  void set_ps(bool value);
  private:
  bool _internal_ps() const;
  void _internal_set_ps(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GuildLog_ParaEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> para_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int64_t ts_;
    bool ps4only_;
    bool ps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildApplyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildApplyInfo) */ {
 public:
  inline GuildApplyInfo() : GuildApplyInfo(nullptr) {}
  ~GuildApplyInfo() override;
  explicit PROTOBUF_CONSTEXPR GuildApplyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildApplyInfo(const GuildApplyInfo& from);
  GuildApplyInfo(GuildApplyInfo&& from) noexcept
    : GuildApplyInfo() {
    *this = ::std::move(from);
  }

  inline GuildApplyInfo& operator=(const GuildApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildApplyInfo& operator=(GuildApplyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildApplyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildApplyInfo* internal_default_instance() {
    return reinterpret_cast<const GuildApplyInfo*>(
               &_GuildApplyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    245;

  friend void swap(GuildApplyInfo& a, GuildApplyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildApplyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildApplyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildApplyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildApplyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildApplyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildApplyInfo& from) {
    GuildApplyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildApplyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildApplyInfo";
  }
  protected:
  explicit GuildApplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kTsFieldNumber = 2,
  };
  // .msg.CSDTPlayerSimpleInfo Player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::msg::CSDTPlayerSimpleInfo& player() const;
  PROTOBUF_NODISCARD ::msg::CSDTPlayerSimpleInfo* release_player();
  ::msg::CSDTPlayerSimpleInfo* mutable_player();
  void set_allocated_player(::msg::CSDTPlayerSimpleInfo* player);
  private:
  const ::msg::CSDTPlayerSimpleInfo& _internal_player() const;
  ::msg::CSDTPlayerSimpleInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::msg::CSDTPlayerSimpleInfo* player);
  ::msg::CSDTPlayerSimpleInfo* unsafe_arena_release_player();

  // int64 Ts = 2;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildApplyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::CSDTPlayerSimpleInfo* player_;
    int64_t ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GuildPlayerRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GuildPlayerRole) */ {
 public:
  inline GuildPlayerRole() : GuildPlayerRole(nullptr) {}
  ~GuildPlayerRole() override;
  explicit PROTOBUF_CONSTEXPR GuildPlayerRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildPlayerRole(const GuildPlayerRole& from);
  GuildPlayerRole(GuildPlayerRole&& from) noexcept
    : GuildPlayerRole() {
    *this = ::std::move(from);
  }

  inline GuildPlayerRole& operator=(const GuildPlayerRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildPlayerRole& operator=(GuildPlayerRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildPlayerRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildPlayerRole* internal_default_instance() {
    return reinterpret_cast<const GuildPlayerRole*>(
               &_GuildPlayerRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    246;

  friend void swap(GuildPlayerRole& a, GuildPlayerRole& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildPlayerRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildPlayerRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuildPlayerRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuildPlayerRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuildPlayerRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuildPlayerRole& from) {
    GuildPlayerRole::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildPlayerRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GuildPlayerRole";
  }
  protected:
  explicit GuildPlayerRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kRoleFieldNumber = 2,
    kActiveFieldNumber = 3,
  };
  // string Player = 1;
  void clear_player();
  const std::string& player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player();
  PROTOBUF_NODISCARD std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // .msg.GUILDROLETYPE Role = 2;
  void clear_role();
  ::msg::GUILDROLETYPE role() const;
  void set_role(::msg::GUILDROLETYPE value);
  private:
  ::msg::GUILDROLETYPE _internal_role() const;
  void _internal_set_role(::msg::GUILDROLETYPE value);
  public:

  // uint32 Active = 3;
  void clear_active();
  uint32_t active() const;
  void set_active(uint32_t value);
  private:
  uint32_t _internal_active() const;
  void _internal_set_active(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GuildPlayerRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
    int role_;
    uint32_t active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChestRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChestRecord) */ {
 public:
  inline ChestRecord() : ChestRecord(nullptr) {}
  ~ChestRecord() override;
  explicit PROTOBUF_CONSTEXPR ChestRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChestRecord(const ChestRecord& from);
  ChestRecord(ChestRecord&& from) noexcept
    : ChestRecord() {
    *this = ::std::move(from);
  }

  inline ChestRecord& operator=(const ChestRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestRecord& operator=(ChestRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChestRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChestRecord* internal_default_instance() {
    return reinterpret_cast<const ChestRecord*>(
               &_ChestRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    247;

  friend void swap(ChestRecord& a, ChestRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChestRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChestRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChestRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChestRecord& from) {
    ChestRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChestRecord";
  }
  protected:
  explicit ChestRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardsFieldNumber = 1,
    kRoundFieldNumber = 2,
  };
  // repeated uint32 Awards = 1;
  int awards_size() const;
  private:
  int _internal_awards_size() const;
  public:
  void clear_awards();
  private:
  uint32_t _internal_awards(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_awards() const;
  void _internal_add_awards(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_awards();
  public:
  uint32_t awards(int index) const;
  void set_awards(int index, uint32_t value);
  void add_awards(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      awards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_awards();

  // uint32 Round = 2;
  void clear_round();
  uint32_t round() const;
  void set_round(uint32_t value);
  private:
  uint32_t _internal_round() const;
  void _internal_set_round(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChestRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > awards_;
    mutable std::atomic<int> _awards_cached_byte_size_;
    uint32_t round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TeamDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TeamDesc) */ {
 public:
  inline TeamDesc() : TeamDesc(nullptr) {}
  ~TeamDesc() override;
  explicit PROTOBUF_CONSTEXPR TeamDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamDesc(const TeamDesc& from);
  TeamDesc(TeamDesc&& from) noexcept
    : TeamDesc() {
    *this = ::std::move(from);
  }

  inline TeamDesc& operator=(const TeamDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamDesc& operator=(TeamDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamDesc* internal_default_instance() {
    return reinterpret_cast<const TeamDesc*>(
               &_TeamDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    248;

  friend void swap(TeamDesc& a, TeamDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamDesc& from) {
    TeamDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TeamDesc";
  }
  protected:
  explicit TeamDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupDescFieldNumber = 2,
    kTeamIDFieldNumber = 1,
  };
  // .msg.TournamentDesc GroupDesc = 2;
  bool has_groupdesc() const;
  private:
  bool _internal_has_groupdesc() const;
  public:
  void clear_groupdesc();
  const ::msg::TournamentDesc& groupdesc() const;
  PROTOBUF_NODISCARD ::msg::TournamentDesc* release_groupdesc();
  ::msg::TournamentDesc* mutable_groupdesc();
  void set_allocated_groupdesc(::msg::TournamentDesc* groupdesc);
  private:
  const ::msg::TournamentDesc& _internal_groupdesc() const;
  ::msg::TournamentDesc* _internal_mutable_groupdesc();
  public:
  void unsafe_arena_set_allocated_groupdesc(
      ::msg::TournamentDesc* groupdesc);
  ::msg::TournamentDesc* unsafe_arena_release_groupdesc();

  // uint32 TeamID = 1;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TeamDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TournamentDesc* groupdesc_;
    uint32_t teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTaskItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTaskItem) */ {
 public:
  inline CSDTTaskItem() : CSDTTaskItem(nullptr) {}
  ~CSDTTaskItem() override;
  explicit PROTOBUF_CONSTEXPR CSDTTaskItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTaskItem(const CSDTTaskItem& from);
  CSDTTaskItem(CSDTTaskItem&& from) noexcept
    : CSDTTaskItem() {
    *this = ::std::move(from);
  }

  inline CSDTTaskItem& operator=(const CSDTTaskItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTaskItem& operator=(CSDTTaskItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTaskItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTaskItem* internal_default_instance() {
    return reinterpret_cast<const CSDTTaskItem*>(
               &_CSDTTaskItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    249;

  friend void swap(CSDTTaskItem& a, CSDTTaskItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTaskItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTaskItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTaskItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTaskItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTaskItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTaskItem& from) {
    CSDTTaskItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTaskItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTaskItem";
  }
  protected:
  explicit CSDTTaskItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProgressFieldNumber = 2,
    kGetAwardFieldNumber = 3,
  };
  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Progress = 2;
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // bool GetAward = 3;
  void clear_getaward();
  bool getaward() const;
  void set_getaward(bool value);
  private:
  bool _internal_getaward() const;
  void _internal_set_getaward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTTaskItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t progress_;
    bool getaward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OssPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OssPlayerData) */ {
 public:
  inline OssPlayerData() : OssPlayerData(nullptr) {}
  ~OssPlayerData() override;
  explicit PROTOBUF_CONSTEXPR OssPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OssPlayerData(const OssPlayerData& from);
  OssPlayerData(OssPlayerData&& from) noexcept
    : OssPlayerData() {
    *this = ::std::move(from);
  }

  inline OssPlayerData& operator=(const OssPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OssPlayerData& operator=(OssPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OssPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OssPlayerData* internal_default_instance() {
    return reinterpret_cast<const OssPlayerData*>(
               &_OssPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    250;

  friend void swap(OssPlayerData& a, OssPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(OssPlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OssPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OssPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OssPlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OssPlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OssPlayerData& from) {
    OssPlayerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OssPlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OssPlayerData";
  }
  protected:
  explicit OssPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kInviteCodeFieldNumber = 2,
  };
  // string Data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string InviteCode = 2;
  void clear_invitecode();
  const std::string& invitecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitecode();
  PROTOBUF_NODISCARD std::string* release_invitecode();
  void set_allocated_invitecode(std::string* invitecode);
  private:
  const std::string& _internal_invitecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitecode(const std::string& value);
  std::string* _internal_mutable_invitecode();
  public:

  // @@protoc_insertion_point(class_scope:msg.OssPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitecode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse& other);
  static const BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse*>(&_BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.BattleExtData.PlayersBetCurrencyNumEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class BattleExtData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BattleExtData) */ {
 public:
  inline BattleExtData() : BattleExtData(nullptr) {}
  ~BattleExtData() override;
  explicit PROTOBUF_CONSTEXPR BattleExtData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleExtData(const BattleExtData& from);
  BattleExtData(BattleExtData&& from) noexcept
    : BattleExtData() {
    *this = ::std::move(from);
  }

  inline BattleExtData& operator=(const BattleExtData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleExtData& operator=(BattleExtData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleExtData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleExtData* internal_default_instance() {
    return reinterpret_cast<const BattleExtData*>(
               &_BattleExtData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    252;

  friend void swap(BattleExtData& a, BattleExtData& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleExtData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleExtData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleExtData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleExtData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleExtData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleExtData& from) {
    BattleExtData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleExtData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BattleExtData";
  }
  protected:
  explicit BattleExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRankRewardListFieldNumber = 3,
    kPlayersBetCurrencyNumFieldNumber = 9,
    kChessListFieldNumber = 14,
    kAuthorIdFieldNumber = 10,
    kMapKeyFieldNumber = 16,
    kTicketIDFieldNumber = 1,
    kTicketNumFieldNumber = 2,
    kMapIDFieldNumber = 4,
    kSubMapIDFieldNumber = 5,
    kCurrencyNumFieldNumber = 6,
    kVersionFieldNumber = 7,
    kBountyBaseCurrencyNumFieldNumber = 8,
    kSysPercentFieldNumber = 11,
    kSysDrawAuthorPercentFieldNumber = 12,
    kAuthorPercentFieldNumber = 13,
    kCustomCardFlagFieldNumber = 15,
  };
  // repeated int32 RankRewardList = 3;
  int rankrewardlist_size() const;
  private:
  int _internal_rankrewardlist_size() const;
  public:
  void clear_rankrewardlist();
  private:
  int32_t _internal_rankrewardlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rankrewardlist() const;
  void _internal_add_rankrewardlist(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rankrewardlist();
  public:
  int32_t rankrewardlist(int index) const;
  void set_rankrewardlist(int index, int32_t value);
  void add_rankrewardlist(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rankrewardlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rankrewardlist();

  // map<string, int32> PlayersBetCurrencyNum = 9;
  int playersbetcurrencynum_size() const;
  private:
  int _internal_playersbetcurrencynum_size() const;
  public:
  void clear_playersbetcurrencynum();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_playersbetcurrencynum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_playersbetcurrencynum();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      playersbetcurrencynum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_playersbetcurrencynum();

  // repeated .msg.KernelChessInfo ChessList = 14;
  int chesslist_size() const;
  private:
  int _internal_chesslist_size() const;
  public:
  void clear_chesslist();
  ::msg::KernelChessInfo* mutable_chesslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >*
      mutable_chesslist();
  private:
  const ::msg::KernelChessInfo& _internal_chesslist(int index) const;
  ::msg::KernelChessInfo* _internal_add_chesslist();
  public:
  const ::msg::KernelChessInfo& chesslist(int index) const;
  ::msg::KernelChessInfo* add_chesslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >&
      chesslist() const;

  // string AuthorId = 10;
  void clear_authorid();
  const std::string& authorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorid();
  PROTOBUF_NODISCARD std::string* release_authorid();
  void set_allocated_authorid(std::string* authorid);
  private:
  const std::string& _internal_authorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorid(const std::string& value);
  std::string* _internal_mutable_authorid();
  public:

  // string MapKey = 16;
  void clear_mapkey();
  const std::string& mapkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapkey();
  PROTOBUF_NODISCARD std::string* release_mapkey();
  void set_allocated_mapkey(std::string* mapkey);
  private:
  const std::string& _internal_mapkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapkey(const std::string& value);
  std::string* _internal_mutable_mapkey();
  public:

  // int32 TicketID = 1;
  void clear_ticketid();
  int32_t ticketid() const;
  void set_ticketid(int32_t value);
  private:
  int32_t _internal_ticketid() const;
  void _internal_set_ticketid(int32_t value);
  public:

  // int32 TicketNum = 2;
  void clear_ticketnum();
  int32_t ticketnum() const;
  void set_ticketnum(int32_t value);
  private:
  int32_t _internal_ticketnum() const;
  void _internal_set_ticketnum(int32_t value);
  public:

  // uint32 MapID = 4;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 SubMapID = 5;
  void clear_submapid();
  uint32_t submapid() const;
  void set_submapid(uint32_t value);
  private:
  uint32_t _internal_submapid() const;
  void _internal_set_submapid(uint32_t value);
  public:

  // int32 CurrencyNum = 6;
  void clear_currencynum();
  int32_t currencynum() const;
  void set_currencynum(int32_t value);
  private:
  int32_t _internal_currencynum() const;
  void _internal_set_currencynum(int32_t value);
  public:

  // int32 Version = 7;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // int32 BountyBaseCurrencyNum = 8;
  void clear_bountybasecurrencynum();
  int32_t bountybasecurrencynum() const;
  void set_bountybasecurrencynum(int32_t value);
  private:
  int32_t _internal_bountybasecurrencynum() const;
  void _internal_set_bountybasecurrencynum(int32_t value);
  public:

  // int32 sysPercent = 11;
  void clear_syspercent();
  int32_t syspercent() const;
  void set_syspercent(int32_t value);
  private:
  int32_t _internal_syspercent() const;
  void _internal_set_syspercent(int32_t value);
  public:

  // int32 sysDrawAuthorPercent = 12;
  void clear_sysdrawauthorpercent();
  int32_t sysdrawauthorpercent() const;
  void set_sysdrawauthorpercent(int32_t value);
  private:
  int32_t _internal_sysdrawauthorpercent() const;
  void _internal_set_sysdrawauthorpercent(int32_t value);
  public:

  // int32 authorPercent = 13;
  void clear_authorpercent();
  int32_t authorpercent() const;
  void set_authorpercent(int32_t value);
  private:
  int32_t _internal_authorpercent() const;
  void _internal_set_authorpercent(int32_t value);
  public:

  // bool CustomCardFlag = 15;
  void clear_customcardflag();
  bool customcardflag() const;
  void set_customcardflag(bool value);
  private:
  bool _internal_customcardflag() const;
  void _internal_set_customcardflag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BattleExtData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rankrewardlist_;
    mutable std::atomic<int> _rankrewardlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> playersbetcurrencynum_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo > chesslist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapkey_;
    int32_t ticketid_;
    int32_t ticketnum_;
    uint32_t mapid_;
    uint32_t submapid_;
    int32_t currencynum_;
    int32_t version_;
    int32_t bountybasecurrencynum_;
    int32_t syspercent_;
    int32_t sysdrawauthorpercent_;
    int32_t authorpercent_;
    bool customcardflag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PvpExtData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PvpExtData) */ {
 public:
  inline PvpExtData() : PvpExtData(nullptr) {}
  ~PvpExtData() override;
  explicit PROTOBUF_CONSTEXPR PvpExtData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PvpExtData(const PvpExtData& from);
  PvpExtData(PvpExtData&& from) noexcept
    : PvpExtData() {
    *this = ::std::move(from);
  }

  inline PvpExtData& operator=(const PvpExtData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvpExtData& operator=(PvpExtData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PvpExtData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PvpExtData* internal_default_instance() {
    return reinterpret_cast<const PvpExtData*>(
               &_PvpExtData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    253;

  friend void swap(PvpExtData& a, PvpExtData& b) {
    a.Swap(&b);
  }
  inline void Swap(PvpExtData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PvpExtData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PvpExtData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PvpExtData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PvpExtData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PvpExtData& from) {
    PvpExtData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpExtData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PvpExtData";
  }
  protected:
  explicit PvpExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPveDebuffFieldNumber = 4,
    kMapKeyFieldNumber = 5,
    kCaptainFieldNumber = 6,
    kBigWinnerFieldNumber = 1,
    kSubmodeFieldNumber = 2,
    kPvpChestVipLevelFieldNumber = 3,
    kIsCardGroupFieldNumber = 7,
    kTDStageFieldNumber = 8,
    kPveChallengeModeFieldNumber = 9,
  };
  // repeated uint32 PveDebuff = 4;
  int pvedebuff_size() const;
  private:
  int _internal_pvedebuff_size() const;
  public:
  void clear_pvedebuff();
  private:
  uint32_t _internal_pvedebuff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_pvedebuff() const;
  void _internal_add_pvedebuff(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_pvedebuff();
  public:
  uint32_t pvedebuff(int index) const;
  void set_pvedebuff(int index, uint32_t value);
  void add_pvedebuff(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      pvedebuff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_pvedebuff();

  // string MapKey = 5;
  void clear_mapkey();
  const std::string& mapkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapkey();
  PROTOBUF_NODISCARD std::string* release_mapkey();
  void set_allocated_mapkey(std::string* mapkey);
  private:
  const std::string& _internal_mapkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapkey(const std::string& value);
  std::string* _internal_mutable_mapkey();
  public:

  // string Captain = 6;
  void clear_captain();
  const std::string& captain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_captain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_captain();
  PROTOBUF_NODISCARD std::string* release_captain();
  void set_allocated_captain(std::string* captain);
  private:
  const std::string& _internal_captain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captain(const std::string& value);
  std::string* _internal_mutable_captain();
  public:

  // .msg.PvpBigWinnerData BigWinner = 1;
  bool has_bigwinner() const;
  private:
  bool _internal_has_bigwinner() const;
  public:
  void clear_bigwinner();
  const ::msg::PvpBigWinnerData& bigwinner() const;
  PROTOBUF_NODISCARD ::msg::PvpBigWinnerData* release_bigwinner();
  ::msg::PvpBigWinnerData* mutable_bigwinner();
  void set_allocated_bigwinner(::msg::PvpBigWinnerData* bigwinner);
  private:
  const ::msg::PvpBigWinnerData& _internal_bigwinner() const;
  ::msg::PvpBigWinnerData* _internal_mutable_bigwinner();
  public:
  void unsafe_arena_set_allocated_bigwinner(
      ::msg::PvpBigWinnerData* bigwinner);
  ::msg::PvpBigWinnerData* unsafe_arena_release_bigwinner();

  // uint32 Submode = 2;
  void clear_submode();
  uint32_t submode() const;
  void set_submode(uint32_t value);
  private:
  uint32_t _internal_submode() const;
  void _internal_set_submode(uint32_t value);
  public:

  // uint32 PvpChestVipLevel = 3;
  void clear_pvpchestviplevel();
  uint32_t pvpchestviplevel() const;
  void set_pvpchestviplevel(uint32_t value);
  private:
  uint32_t _internal_pvpchestviplevel() const;
  void _internal_set_pvpchestviplevel(uint32_t value);
  public:

  // bool IsCardGroup = 7;
  void clear_iscardgroup();
  bool iscardgroup() const;
  void set_iscardgroup(bool value);
  private:
  bool _internal_iscardgroup() const;
  void _internal_set_iscardgroup(bool value);
  public:

  // int32 TDStage = 8;
  void clear_tdstage();
  int32_t tdstage() const;
  void set_tdstage(int32_t value);
  private:
  int32_t _internal_tdstage() const;
  void _internal_set_tdstage(int32_t value);
  public:

  // .msg.PveMode PveChallengeMode = 9;
  void clear_pvechallengemode();
  ::msg::PveMode pvechallengemode() const;
  void set_pvechallengemode(::msg::PveMode value);
  private:
  ::msg::PveMode _internal_pvechallengemode() const;
  void _internal_set_pvechallengemode(::msg::PveMode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PvpExtData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > pvedebuff_;
    mutable std::atomic<int> _pvedebuff_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captain_;
    ::msg::PvpBigWinnerData* bigwinner_;
    uint32_t submode_;
    uint32_t pvpchestviplevel_;
    bool iscardgroup_;
    int32_t tdstage_;
    int pvechallengemode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerExtMap_AssistantMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_AssistantMapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_AssistantMapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  PlayerExtMap_AssistantMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerExtMap_AssistantMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerExtMap_AssistantMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerExtMap_AssistantMapEntry_DoNotUse& other);
  static const PlayerExtMap_AssistantMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerExtMap_AssistantMapEntry_DoNotUse*>(&_PlayerExtMap_AssistantMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PlayerExtMap.AssistantMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerExtMap_BattleTimeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_BattleTimeMapEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_BattleTimeMapEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PlayerExtMap_BattleTimeMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerExtMap_BattleTimeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerExtMap_BattleTimeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerExtMap_BattleTimeMapEntry_DoNotUse& other);
  static const PlayerExtMap_BattleTimeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerExtMap_BattleTimeMapEntry_DoNotUse*>(&_PlayerExtMap_BattleTimeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PlayerExtMap.BattleTimeMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerExtMap_PveBuffEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_PveBuffEntry_DoNotUse, 
    std::string, ::msg::Buffs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_PveBuffEntry_DoNotUse, 
    std::string, ::msg::Buffs,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PlayerExtMap_PveBuffEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerExtMap_PveBuffEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerExtMap_PveBuffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerExtMap_PveBuffEntry_DoNotUse& other);
  static const PlayerExtMap_PveBuffEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerExtMap_PveBuffEntry_DoNotUse*>(&_PlayerExtMap_PveBuffEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PlayerExtMap.PveBuffEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerExtMap_MsRelationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_MsRelationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_MsRelationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PlayerExtMap_MsRelationEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerExtMap_MsRelationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerExtMap_MsRelationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerExtMap_MsRelationEntry_DoNotUse& other);
  static const PlayerExtMap_MsRelationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerExtMap_MsRelationEntry_DoNotUse*>(&_PlayerExtMap_MsRelationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PlayerExtMap.MsRelationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PlayerExtMap.MsRelationEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerExtMap_PvpPlayerGroupEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_PvpPlayerGroupEntry_DoNotUse, 
    std::string, ::msg::TEAMGROUP,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerExtMap_PvpPlayerGroupEntry_DoNotUse, 
    std::string, ::msg::TEAMGROUP,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  PlayerExtMap_PvpPlayerGroupEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerExtMap_PvpPlayerGroupEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerExtMap_PvpPlayerGroupEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerExtMap_PvpPlayerGroupEntry_DoNotUse& other);
  static const PlayerExtMap_PvpPlayerGroupEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerExtMap_PvpPlayerGroupEntry_DoNotUse*>(&_PlayerExtMap_PvpPlayerGroupEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PlayerExtMap.PvpPlayerGroupEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerExtMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerExtMap) */ {
 public:
  inline PlayerExtMap() : PlayerExtMap(nullptr) {}
  ~PlayerExtMap() override;
  explicit PROTOBUF_CONSTEXPR PlayerExtMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerExtMap(const PlayerExtMap& from);
  PlayerExtMap(PlayerExtMap&& from) noexcept
    : PlayerExtMap() {
    *this = ::std::move(from);
  }

  inline PlayerExtMap& operator=(const PlayerExtMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerExtMap& operator=(PlayerExtMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerExtMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerExtMap* internal_default_instance() {
    return reinterpret_cast<const PlayerExtMap*>(
               &_PlayerExtMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    259;

  friend void swap(PlayerExtMap& a, PlayerExtMap& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerExtMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerExtMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerExtMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerExtMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerExtMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerExtMap& from) {
    PlayerExtMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerExtMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerExtMap";
  }
  protected:
  explicit PlayerExtMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAssistantMapFieldNumber = 1,
    kBattleTimeMapFieldNumber = 2,
    kPveBuffFieldNumber = 3,
    kMsRelationFieldNumber = 4,
    kPvpPlayerGroupFieldNumber = 5,
  };
  // map<string, int32> AssistantMap = 1;
  int assistantmap_size() const;
  private:
  int _internal_assistantmap_size() const;
  public:
  void clear_assistantmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_assistantmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_assistantmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      assistantmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_assistantmap();

  // map<string, uint32> BattleTimeMap = 2;
  int battletimemap_size() const;
  private:
  int _internal_battletimemap_size() const;
  public:
  void clear_battletimemap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_battletimemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_battletimemap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      battletimemap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_battletimemap();

  // map<string, .msg.Buffs> PveBuff = 3;
  int pvebuff_size() const;
  private:
  int _internal_pvebuff_size() const;
  public:
  void clear_pvebuff();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >&
      _internal_pvebuff() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >*
      _internal_mutable_pvebuff();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >&
      pvebuff() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >*
      mutable_pvebuff();

  // map<string, string> MsRelation = 4;
  int msrelation_size() const;
  private:
  int _internal_msrelation_size() const;
  public:
  void clear_msrelation();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_msrelation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_msrelation();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      msrelation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_msrelation();

  // map<string, .msg.TEAMGROUP> PvpPlayerGroup = 5;
  int pvpplayergroup_size() const;
  private:
  int _internal_pvpplayergroup_size() const;
  public:
  void clear_pvpplayergroup();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >&
      _internal_pvpplayergroup() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >*
      _internal_mutable_pvpplayergroup();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >&
      pvpplayergroup() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >*
      mutable_pvpplayergroup();

  // @@protoc_insertion_point(class_scope:msg.PlayerExtMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerExtMap_AssistantMapEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> assistantmap_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerExtMap_BattleTimeMapEntry_DoNotUse,
        std::string, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> battletimemap_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerExtMap_PveBuffEntry_DoNotUse,
        std::string, ::msg::Buffs,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pvebuff_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerExtMap_MsRelationEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> msrelation_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerExtMap_PvpPlayerGroupEntry_DoNotUse,
        std::string, ::msg::TEAMGROUP,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> pvpplayergroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Buffs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Buffs) */ {
 public:
  inline Buffs() : Buffs(nullptr) {}
  ~Buffs() override;
  explicit PROTOBUF_CONSTEXPR Buffs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Buffs(const Buffs& from);
  Buffs(Buffs&& from) noexcept
    : Buffs() {
    *this = ::std::move(from);
  }

  inline Buffs& operator=(const Buffs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Buffs& operator=(Buffs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Buffs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Buffs* internal_default_instance() {
    return reinterpret_cast<const Buffs*>(
               &_Buffs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    260;

  friend void swap(Buffs& a, Buffs& b) {
    a.Swap(&b);
  }
  inline void Swap(Buffs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Buffs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Buffs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Buffs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Buffs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Buffs& from) {
    Buffs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Buffs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Buffs";
  }
  protected:
  explicit Buffs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated uint32 Data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data() const;
  void _internal_add_data(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data();
  public:
  uint32_t data(int index) const;
  void set_data(int index, uint32_t value);
  void add_data(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:msg.Buffs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ActivityGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ActivityGroup) */ {
 public:
  inline ActivityGroup() : ActivityGroup(nullptr) {}
  ~ActivityGroup() override;
  explicit PROTOBUF_CONSTEXPR ActivityGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityGroup(const ActivityGroup& from);
  ActivityGroup(ActivityGroup&& from) noexcept
    : ActivityGroup() {
    *this = ::std::move(from);
  }

  inline ActivityGroup& operator=(const ActivityGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityGroup& operator=(ActivityGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityGroup* internal_default_instance() {
    return reinterpret_cast<const ActivityGroup*>(
               &_ActivityGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    261;

  friend void swap(ActivityGroup& a, ActivityGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActivityGroup& from) {
    ActivityGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ActivityGroup";
  }
  protected:
  explicit ActivityGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 2,
    kGroupFieldNumber = 1,
  };
  // repeated .msg.ActivityData Activities = 2;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  ::msg::ActivityData* mutable_activities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ActivityData >*
      mutable_activities();
  private:
  const ::msg::ActivityData& _internal_activities(int index) const;
  ::msg::ActivityData* _internal_add_activities();
  public:
  const ::msg::ActivityData& activities(int index) const;
  ::msg::ActivityData* add_activities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ActivityData >&
      activities() const;

  // .msg.ActivityGroupData Group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::msg::ActivityGroupData& group() const;
  PROTOBUF_NODISCARD ::msg::ActivityGroupData* release_group();
  ::msg::ActivityGroupData* mutable_group();
  void set_allocated_group(::msg::ActivityGroupData* group);
  private:
  const ::msg::ActivityGroupData& _internal_group() const;
  ::msg::ActivityGroupData* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::msg::ActivityGroupData* group);
  ::msg::ActivityGroupData* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:msg.ActivityGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ActivityData > activities_;
    ::msg::ActivityGroupData* group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ScoredMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ScoredMap) */ {
 public:
  inline ScoredMap() : ScoredMap(nullptr) {}
  ~ScoredMap() override;
  explicit PROTOBUF_CONSTEXPR ScoredMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScoredMap(const ScoredMap& from);
  ScoredMap(ScoredMap&& from) noexcept
    : ScoredMap() {
    *this = ::std::move(from);
  }

  inline ScoredMap& operator=(const ScoredMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoredMap& operator=(ScoredMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScoredMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScoredMap* internal_default_instance() {
    return reinterpret_cast<const ScoredMap*>(
               &_ScoredMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    262;

  friend void swap(ScoredMap& a, ScoredMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoredMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoredMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScoredMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScoredMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScoredMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScoredMap& from) {
    ScoredMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoredMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ScoredMap";
  }
  protected:
  explicit ScoredMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIDFieldNumber = 1,
    kIsLikeFieldNumber = 2,
  };
  // uint32 MapID = 1;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // bool IsLike = 2;
  void clear_islike();
  bool islike() const;
  void set_islike(bool value);
  private:
  bool _internal_islike() const;
  void _internal_set_islike(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ScoredMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t mapid_;
    bool islike_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TransferEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TransferEvent) */ {
 public:
  inline TransferEvent() : TransferEvent(nullptr) {}
  ~TransferEvent() override;
  explicit PROTOBUF_CONSTEXPR TransferEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferEvent(const TransferEvent& from);
  TransferEvent(TransferEvent&& from) noexcept
    : TransferEvent() {
    *this = ::std::move(from);
  }

  inline TransferEvent& operator=(const TransferEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferEvent& operator=(TransferEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferEvent* internal_default_instance() {
    return reinterpret_cast<const TransferEvent*>(
               &_TransferEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    263;

  friend void swap(TransferEvent& a, TransferEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferEvent& from) {
    TransferEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TransferEvent";
  }
  protected:
  explicit TransferEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayeeFieldNumber = 4,
    kRedHSetFieldFieldNumber = 5,
    kETypeFieldNumber = 1,
    kTokenIDFieldNumber = 2,
    kTokenCountFieldNumber = 3,
  };
  // string Payee = 4;
  void clear_payee();
  const std::string& payee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payee();
  PROTOBUF_NODISCARD std::string* release_payee();
  void set_allocated_payee(std::string* payee);
  private:
  const std::string& _internal_payee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payee(const std::string& value);
  std::string* _internal_mutable_payee();
  public:

  // string RedHSetField = 5;
  void clear_redhsetfield();
  const std::string& redhsetfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redhsetfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redhsetfield();
  PROTOBUF_NODISCARD std::string* release_redhsetfield();
  void set_allocated_redhsetfield(std::string* redhsetfield);
  private:
  const std::string& _internal_redhsetfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redhsetfield(const std::string& value);
  std::string* _internal_mutable_redhsetfield();
  public:

  // .msg.TransferEventType EType = 1;
  void clear_etype();
  ::msg::TransferEventType etype() const;
  void set_etype(::msg::TransferEventType value);
  private:
  ::msg::TransferEventType _internal_etype() const;
  void _internal_set_etype(::msg::TransferEventType value);
  public:

  // int32 TokenID = 2;
  void clear_tokenid();
  int32_t tokenid() const;
  void set_tokenid(int32_t value);
  private:
  int32_t _internal_tokenid() const;
  void _internal_set_tokenid(int32_t value);
  public:

  // int32 TokenCount = 3;
  void clear_tokencount();
  int32_t tokencount() const;
  void set_tokencount(int32_t value);
  private:
  int32_t _internal_tokencount() const;
  void _internal_set_tokencount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TransferEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redhsetfield_;
    int etype_;
    int32_t tokenid_;
    int32_t tokencount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TransferOP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TransferOP) */ {
 public:
  inline TransferOP() : TransferOP(nullptr) {}
  ~TransferOP() override;
  explicit PROTOBUF_CONSTEXPR TransferOP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferOP(const TransferOP& from);
  TransferOP(TransferOP&& from) noexcept
    : TransferOP() {
    *this = ::std::move(from);
  }

  inline TransferOP& operator=(const TransferOP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferOP& operator=(TransferOP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferOP& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferOP* internal_default_instance() {
    return reinterpret_cast<const TransferOP*>(
               &_TransferOP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    264;

  friend void swap(TransferOP& a, TransferOP& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferOP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferOP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferOP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferOP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferOP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferOP& from) {
    TransferOP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferOP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TransferOP";
  }
  protected:
  explicit TransferOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayeeIDFieldNumber = 1,
    kUUIDFieldNumber = 4,
    kTokenIDFieldNumber = 2,
    kChangeFieldNumber = 3,
  };
  // string PayeeID = 1;
  void clear_payeeid();
  const std::string& payeeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payeeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payeeid();
  PROTOBUF_NODISCARD std::string* release_payeeid();
  void set_allocated_payeeid(std::string* payeeid);
  private:
  const std::string& _internal_payeeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payeeid(const std::string& value);
  std::string* _internal_mutable_payeeid();
  public:

  // string UUID = 4;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // uint32 TokenID = 2;
  void clear_tokenid();
  uint32_t tokenid() const;
  void set_tokenid(uint32_t value);
  private:
  uint32_t _internal_tokenid() const;
  void _internal_set_tokenid(uint32_t value);
  public:

  // int32 Change = 3;
  void clear_change();
  int32_t change() const;
  void set_change(int32_t value);
  private:
  int32_t _internal_change() const;
  void _internal_set_change(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TransferOP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payeeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    uint32_t tokenid_;
    int32_t change_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTBetData_BetFromPlayersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTBetData_BetFromPlayersEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSDTBetData_BetFromPlayersEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  CSDTBetData_BetFromPlayersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSDTBetData_BetFromPlayersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSDTBetData_BetFromPlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSDTBetData_BetFromPlayersEntry_DoNotUse& other);
  static const CSDTBetData_BetFromPlayersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSDTBetData_BetFromPlayersEntry_DoNotUse*>(&_CSDTBetData_BetFromPlayersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSDTBetData.BetFromPlayersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSDTBetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTBetData) */ {
 public:
  inline CSDTBetData() : CSDTBetData(nullptr) {}
  ~CSDTBetData() override;
  explicit PROTOBUF_CONSTEXPR CSDTBetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTBetData(const CSDTBetData& from);
  CSDTBetData(CSDTBetData&& from) noexcept
    : CSDTBetData() {
    *this = ::std::move(from);
  }

  inline CSDTBetData& operator=(const CSDTBetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTBetData& operator=(CSDTBetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTBetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTBetData* internal_default_instance() {
    return reinterpret_cast<const CSDTBetData*>(
               &_CSDTBetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    266;

  friend void swap(CSDTBetData& a, CSDTBetData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTBetData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTBetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTBetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTBetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTBetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTBetData& from) {
    CSDTBetData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTBetData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTBetData";
  }
  protected:
  explicit CSDTBetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBetFromPlayersFieldNumber = 3,
    kAuthorIdFieldNumber = 2,
    kBetFromAuthorFieldNumber = 1,
  };
  // map<string, int32> BetFromPlayers = 3;
  int betfromplayers_size() const;
  private:
  int _internal_betfromplayers_size() const;
  public:
  void clear_betfromplayers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_betfromplayers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_betfromplayers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      betfromplayers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_betfromplayers();

  // string AuthorId = 2;
  void clear_authorid();
  const std::string& authorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorid();
  PROTOBUF_NODISCARD std::string* release_authorid();
  void set_allocated_authorid(std::string* authorid);
  private:
  const std::string& _internal_authorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorid(const std::string& value);
  std::string* _internal_mutable_authorid();
  public:

  // int32 BetFromAuthor = 1;
  void clear_betfromauthor();
  int32_t betfromauthor() const;
  void set_betfromauthor(int32_t value);
  private:
  int32_t _internal_betfromauthor() const;
  void _internal_set_betfromauthor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTBetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSDTBetData_BetFromPlayersEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> betfromplayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorid_;
    int32_t betfromauthor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MailExtData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MailExtData) */ {
 public:
  inline MailExtData() : MailExtData(nullptr) {}
  ~MailExtData() override;
  explicit PROTOBUF_CONSTEXPR MailExtData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailExtData(const MailExtData& from);
  MailExtData(MailExtData&& from) noexcept
    : MailExtData() {
    *this = ::std::move(from);
  }

  inline MailExtData& operator=(const MailExtData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailExtData& operator=(MailExtData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailExtData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailExtData* internal_default_instance() {
    return reinterpret_cast<const MailExtData*>(
               &_MailExtData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    267;

  friend void swap(MailExtData& a, MailExtData& b) {
    a.Swap(&b);
  }
  inline void Swap(MailExtData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailExtData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailExtData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailExtData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailExtData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MailExtData& from) {
    MailExtData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailExtData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MailExtData";
  }
  protected:
  explicit MailExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .msg.ExtItem Items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::msg::ExtItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ExtItem >*
      mutable_items();
  private:
  const ::msg::ExtItem& _internal_items(int index) const;
  ::msg::ExtItem* _internal_add_items();
  public:
  const ::msg::ExtItem& items(int index) const;
  ::msg::ExtItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ExtItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:msg.MailExtData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ExtItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ExtItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ExtItem) */ {
 public:
  inline ExtItem() : ExtItem(nullptr) {}
  ~ExtItem() override;
  explicit PROTOBUF_CONSTEXPR ExtItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtItem(const ExtItem& from);
  ExtItem(ExtItem&& from) noexcept
    : ExtItem() {
    *this = ::std::move(from);
  }

  inline ExtItem& operator=(const ExtItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtItem& operator=(ExtItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtItem* internal_default_instance() {
    return reinterpret_cast<const ExtItem*>(
               &_ExtItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    268;

  friend void swap(ExtItem& a, ExtItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtItem& from) {
    ExtItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ExtItem";
  }
  protected:
  explicit ExtItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 3,
    kInstanceIdFieldNumber = 4,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kWeightFieldNumber = 5,
    kPriceFieldNumber = 6,
    kSourceIdxFieldNumber = 7,
  };
  // repeated int64 Para = 3;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  int64_t _internal_para(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_para() const;
  void _internal_add_para(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_para();
  public:
  int64_t para(int index) const;
  void set_para(int index, int64_t value);
  void add_para(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_para();

  // string InstanceId = 4;
  void clear_instanceid();
  const std::string& instanceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instanceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instanceid();
  PROTOBUF_NODISCARD std::string* release_instanceid();
  void set_allocated_instanceid(std::string* instanceid);
  private:
  const std::string& _internal_instanceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instanceid(const std::string& value);
  std::string* _internal_mutable_instanceid();
  public:

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Count = 2;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 Weight = 5;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // int32 Price = 6;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 SourceIdx = 7;
  void clear_sourceidx();
  int32_t sourceidx() const;
  void set_sourceidx(int32_t value);
  private:
  int32_t _internal_sourceidx() const;
  void _internal_set_sourceidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ExtItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > para_;
    mutable std::atomic<int> _para_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instanceid_;
    int32_t id_;
    int32_t count_;
    int32_t weight_;
    int32_t price_;
    int32_t sourceidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTTasks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTTasks) */ {
 public:
  inline CSDTTasks() : CSDTTasks(nullptr) {}
  ~CSDTTasks() override;
  explicit PROTOBUF_CONSTEXPR CSDTTasks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTTasks(const CSDTTasks& from);
  CSDTTasks(CSDTTasks&& from) noexcept
    : CSDTTasks() {
    *this = ::std::move(from);
  }

  inline CSDTTasks& operator=(const CSDTTasks& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTTasks& operator=(CSDTTasks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTTasks& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTTasks* internal_default_instance() {
    return reinterpret_cast<const CSDTTasks*>(
               &_CSDTTasks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    269;

  friend void swap(CSDTTasks& a, CSDTTasks& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTTasks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTTasks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTTasks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTTasks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTTasks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTTasks& from) {
    CSDTTasks::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTTasks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTTasks";
  }
  protected:
  explicit CSDTTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyFieldNumber = 1,
    kAchieveFieldNumber = 2,
  };
  // repeated .msg.CSDTTaskItem Trophy = 1;
  int trophy_size() const;
  private:
  int _internal_trophy_size() const;
  public:
  void clear_trophy();
  ::msg::CSDTTaskItem* mutable_trophy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >*
      mutable_trophy();
  private:
  const ::msg::CSDTTaskItem& _internal_trophy(int index) const;
  ::msg::CSDTTaskItem* _internal_add_trophy();
  public:
  const ::msg::CSDTTaskItem& trophy(int index) const;
  ::msg::CSDTTaskItem* add_trophy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >&
      trophy() const;

  // repeated .msg.CSDTTaskItem Achieve = 2;
  int achieve_size() const;
  private:
  int _internal_achieve_size() const;
  public:
  void clear_achieve();
  ::msg::CSDTTaskItem* mutable_achieve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >*
      mutable_achieve();
  private:
  const ::msg::CSDTTaskItem& _internal_achieve(int index) const;
  ::msg::CSDTTaskItem* _internal_add_achieve();
  public:
  const ::msg::CSDTTaskItem& achieve(int index) const;
  ::msg::CSDTTaskItem* add_achieve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >&
      achieve() const;

  // @@protoc_insertion_point(class_scope:msg.CSDTTasks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem > trophy_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem > achieve_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PvpTeachResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PvpTeachResult) */ {
 public:
  inline PvpTeachResult() : PvpTeachResult(nullptr) {}
  ~PvpTeachResult() override;
  explicit PROTOBUF_CONSTEXPR PvpTeachResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PvpTeachResult(const PvpTeachResult& from);
  PvpTeachResult(PvpTeachResult&& from) noexcept
    : PvpTeachResult() {
    *this = ::std::move(from);
  }

  inline PvpTeachResult& operator=(const PvpTeachResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvpTeachResult& operator=(PvpTeachResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PvpTeachResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PvpTeachResult* internal_default_instance() {
    return reinterpret_cast<const PvpTeachResult*>(
               &_PvpTeachResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    270;

  friend void swap(PvpTeachResult& a, PvpTeachResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PvpTeachResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PvpTeachResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PvpTeachResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PvpTeachResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PvpTeachResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PvpTeachResult& from) {
    PvpTeachResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpTeachResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PvpTeachResult";
  }
  protected:
  explicit PvpTeachResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassIdFieldNumber = 1,
    kWinFieldNumber = 2,
  };
  // uint32 PassId = 1;
  void clear_passid();
  uint32_t passid() const;
  void set_passid(uint32_t value);
  private:
  uint32_t _internal_passid() const;
  void _internal_set_passid(uint32_t value);
  public:

  // bool Win = 2;
  void clear_win();
  bool win() const;
  void set_win(bool value);
  private:
  bool _internal_win() const;
  void _internal_set_win(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PvpTeachResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t passid_;
    bool win_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PvpBigWinnerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PvpBigWinnerData) */ {
 public:
  inline PvpBigWinnerData() : PvpBigWinnerData(nullptr) {}
  ~PvpBigWinnerData() override;
  explicit PROTOBUF_CONSTEXPR PvpBigWinnerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PvpBigWinnerData(const PvpBigWinnerData& from);
  PvpBigWinnerData(PvpBigWinnerData&& from) noexcept
    : PvpBigWinnerData() {
    *this = ::std::move(from);
  }

  inline PvpBigWinnerData& operator=(const PvpBigWinnerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvpBigWinnerData& operator=(PvpBigWinnerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PvpBigWinnerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PvpBigWinnerData* internal_default_instance() {
    return reinterpret_cast<const PvpBigWinnerData*>(
               &_PvpBigWinnerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    271;

  friend void swap(PvpBigWinnerData& a, PvpBigWinnerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PvpBigWinnerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PvpBigWinnerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PvpBigWinnerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PvpBigWinnerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PvpBigWinnerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PvpBigWinnerData& from) {
    PvpBigWinnerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvpBigWinnerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PvpBigWinnerData";
  }
  protected:
  explicit PvpBigWinnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankRewardListFieldNumber = 4,
    kConfigNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kSysPercentFieldNumber = 3,
  };
  // repeated uint32 RankRewardList = 4;
  int rankrewardlist_size() const;
  private:
  int _internal_rankrewardlist_size() const;
  public:
  void clear_rankrewardlist();
  private:
  uint32_t _internal_rankrewardlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rankrewardlist() const;
  void _internal_add_rankrewardlist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rankrewardlist();
  public:
  uint32_t rankrewardlist(int index) const;
  void set_rankrewardlist(int index, uint32_t value);
  void add_rankrewardlist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rankrewardlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rankrewardlist();

  // string ConfigName = 5;
  void clear_configname();
  const std::string& configname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_configname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_configname();
  PROTOBUF_NODISCARD std::string* release_configname();
  void set_allocated_configname(std::string* configname);
  private:
  const std::string& _internal_configname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configname(const std::string& value);
  std::string* _internal_mutable_configname();
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 MapId = 2;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 SysPercent = 3;
  void clear_syspercent();
  uint32_t syspercent() const;
  void set_syspercent(uint32_t value);
  private:
  uint32_t _internal_syspercent() const;
  void _internal_set_syspercent(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PvpBigWinnerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rankrewardlist_;
    mutable std::atomic<int> _rankrewardlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configname_;
    uint32_t id_;
    uint32_t mapid_;
    uint32_t syspercent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PveExData_TalentEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PveExData_TalentEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PveExData_TalentEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  PveExData_TalentEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PveExData_TalentEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PveExData_TalentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PveExData_TalentEntry_DoNotUse& other);
  static const PveExData_TalentEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PveExData_TalentEntry_DoNotUse*>(&_PveExData_TalentEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.PveExData.TalentEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PveExData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PveExData) */ {
 public:
  inline PveExData() : PveExData(nullptr) {}
  ~PveExData() override;
  explicit PROTOBUF_CONSTEXPR PveExData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PveExData(const PveExData& from);
  PveExData(PveExData&& from) noexcept
    : PveExData() {
    *this = ::std::move(from);
  }

  inline PveExData& operator=(const PveExData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PveExData& operator=(PveExData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PveExData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PveExData* internal_default_instance() {
    return reinterpret_cast<const PveExData*>(
               &_PveExData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    273;

  friend void swap(PveExData& a, PveExData& b) {
    a.Swap(&b);
  }
  inline void Swap(PveExData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PveExData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PveExData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PveExData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PveExData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PveExData& from) {
    PveExData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PveExData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PveExData";
  }
  protected:
  explicit PveExData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTalentFieldNumber = 1,
  };
  // map<string, int32> Talent = 1;
  int talent_size() const;
  private:
  int _internal_talent_size() const;
  public:
  void clear_talent();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_talent() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_talent();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      talent() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_talent();

  // @@protoc_insertion_point(class_scope:msg.PveExData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PveExData_TalentEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> talent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChampionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChampionInfo) */ {
 public:
  inline ChampionInfo() : ChampionInfo(nullptr) {}
  ~ChampionInfo() override;
  explicit PROTOBUF_CONSTEXPR ChampionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChampionInfo(const ChampionInfo& from);
  ChampionInfo(ChampionInfo&& from) noexcept
    : ChampionInfo() {
    *this = ::std::move(from);
  }

  inline ChampionInfo& operator=(const ChampionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChampionInfo& operator=(ChampionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChampionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChampionInfo* internal_default_instance() {
    return reinterpret_cast<const ChampionInfo*>(
               &_ChampionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    274;

  friend void swap(ChampionInfo& a, ChampionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChampionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChampionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChampionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChampionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChampionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChampionInfo& from) {
    ChampionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChampionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChampionInfo";
  }
  protected:
  explicit ChampionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kZoneFieldNumber = 1,
    kPeriodFieldNumber = 2,
  };
  // string Id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 Zone = 1;
  void clear_zone();
  uint32_t zone() const;
  void set_zone(uint32_t value);
  private:
  uint32_t _internal_zone() const;
  void _internal_set_zone(uint32_t value);
  public:

  // uint32 Period = 2;
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChampionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    uint32_t zone_;
    uint32_t period_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TopRank final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TopRank) */ {
 public:
  inline TopRank() : TopRank(nullptr) {}
  ~TopRank() override;
  explicit PROTOBUF_CONSTEXPR TopRank(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopRank(const TopRank& from);
  TopRank(TopRank&& from) noexcept
    : TopRank() {
    *this = ::std::move(from);
  }

  inline TopRank& operator=(const TopRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopRank& operator=(TopRank&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopRank& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopRank* internal_default_instance() {
    return reinterpret_cast<const TopRank*>(
               &_TopRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    275;

  friend void swap(TopRank& a, TopRank& b) {
    a.Swap(&b);
  }
  inline void Swap(TopRank* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopRank>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopRank& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopRank& from) {
    TopRank::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopRank* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TopRank";
  }
  protected:
  explicit TopRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 3,
    kZoneFieldNumber = 1,
    kPeriodFieldNumber = 2,
  };
  // repeated string Rank = 3;
  int rank_size() const;
  private:
  int _internal_rank_size() const;
  public:
  void clear_rank();
  const std::string& rank(int index) const;
  std::string* mutable_rank(int index);
  void set_rank(int index, const std::string& value);
  void set_rank(int index, std::string&& value);
  void set_rank(int index, const char* value);
  void set_rank(int index, const char* value, size_t size);
  std::string* add_rank();
  void add_rank(const std::string& value);
  void add_rank(std::string&& value);
  void add_rank(const char* value);
  void add_rank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rank();
  private:
  const std::string& _internal_rank(int index) const;
  std::string* _internal_add_rank();
  public:

  // uint32 Zone = 1;
  void clear_zone();
  uint32_t zone() const;
  void set_zone(uint32_t value);
  private:
  uint32_t _internal_zone() const;
  void _internal_set_zone(uint32_t value);
  public:

  // uint32 Period = 2;
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TopRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rank_;
    uint32_t zone_;
    uint32_t period_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChampionInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChampionInfoList) */ {
 public:
  inline ChampionInfoList() : ChampionInfoList(nullptr) {}
  ~ChampionInfoList() override;
  explicit PROTOBUF_CONSTEXPR ChampionInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChampionInfoList(const ChampionInfoList& from);
  ChampionInfoList(ChampionInfoList&& from) noexcept
    : ChampionInfoList() {
    *this = ::std::move(from);
  }

  inline ChampionInfoList& operator=(const ChampionInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChampionInfoList& operator=(ChampionInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChampionInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChampionInfoList* internal_default_instance() {
    return reinterpret_cast<const ChampionInfoList*>(
               &_ChampionInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    276;

  friend void swap(ChampionInfoList& a, ChampionInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChampionInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChampionInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChampionInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChampionInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChampionInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChampionInfoList& from) {
    ChampionInfoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChampionInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChampionInfoList";
  }
  protected:
  explicit ChampionInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .msg.ChampionInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::msg::ChampionInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChampionInfo >*
      mutable_list();
  private:
  const ::msg::ChampionInfo& _internal_list(int index) const;
  ::msg::ChampionInfo* _internal_add_list();
  public:
  const ::msg::ChampionInfo& list(int index) const;
  ::msg::ChampionInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChampionInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:msg.ChampionInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChampionInfo > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TournamentHistory_ChampionHistoryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TournamentHistory_ChampionHistoryEntry_DoNotUse, 
    uint32_t, ::msg::ChampionInfoList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TournamentHistory_ChampionHistoryEntry_DoNotUse, 
    uint32_t, ::msg::ChampionInfoList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TournamentHistory_ChampionHistoryEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TournamentHistory_ChampionHistoryEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TournamentHistory_ChampionHistoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TournamentHistory_ChampionHistoryEntry_DoNotUse& other);
  static const TournamentHistory_ChampionHistoryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TournamentHistory_ChampionHistoryEntry_DoNotUse*>(&_TournamentHistory_ChampionHistoryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class TournamentHistory_TopRankHistoryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TournamentHistory_TopRankHistoryEntry_DoNotUse, 
    uint32_t, ::msg::TopRank,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TournamentHistory_TopRankHistoryEntry_DoNotUse, 
    uint32_t, ::msg::TopRank,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TournamentHistory_TopRankHistoryEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TournamentHistory_TopRankHistoryEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TournamentHistory_TopRankHistoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TournamentHistory_TopRankHistoryEntry_DoNotUse& other);
  static const TournamentHistory_TopRankHistoryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TournamentHistory_TopRankHistoryEntry_DoNotUse*>(&_TournamentHistory_TopRankHistoryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class TournamentHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TournamentHistory) */ {
 public:
  inline TournamentHistory() : TournamentHistory(nullptr) {}
  ~TournamentHistory() override;
  explicit PROTOBUF_CONSTEXPR TournamentHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentHistory(const TournamentHistory& from);
  TournamentHistory(TournamentHistory&& from) noexcept
    : TournamentHistory() {
    *this = ::std::move(from);
  }

  inline TournamentHistory& operator=(const TournamentHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentHistory& operator=(TournamentHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentHistory* internal_default_instance() {
    return reinterpret_cast<const TournamentHistory*>(
               &_TournamentHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    279;

  friend void swap(TournamentHistory& a, TournamentHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TournamentHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TournamentHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TournamentHistory& from) {
    TournamentHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TournamentHistory";
  }
  protected:
  explicit TournamentHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChampionHistoryFieldNumber = 1,
    kTopRankHistoryFieldNumber = 2,
  };
  // map<uint32, .msg.ChampionInfoList> ChampionHistory = 1;
  int championhistory_size() const;
  private:
  int _internal_championhistory_size() const;
  public:
  void clear_championhistory();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >&
      _internal_championhistory() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >*
      _internal_mutable_championhistory();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >&
      championhistory() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >*
      mutable_championhistory();

  // map<uint32, .msg.TopRank> TopRankHistory = 2;
  int toprankhistory_size() const;
  private:
  int _internal_toprankhistory_size() const;
  public:
  void clear_toprankhistory();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >&
      _internal_toprankhistory() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >*
      _internal_mutable_toprankhistory();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >&
      toprankhistory() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >*
      mutable_toprankhistory();

  // @@protoc_insertion_point(class_scope:msg.TournamentHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TournamentHistory_ChampionHistoryEntry_DoNotUse,
        uint32_t, ::msg::ChampionInfoList,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> championhistory_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TournamentHistory_TopRankHistoryEntry_DoNotUse,
        uint32_t, ::msg::TopRank,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> toprankhistory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSReqLogin_AuthSDKCodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSReqLogin_AuthSDKCodeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSReqLogin_AuthSDKCodeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CSReqLogin_AuthSDKCodeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSReqLogin_AuthSDKCodeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSReqLogin_AuthSDKCodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSReqLogin_AuthSDKCodeEntry_DoNotUse& other);
  static const CSReqLogin_AuthSDKCodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSReqLogin_AuthSDKCodeEntry_DoNotUse*>(&_CSReqLogin_AuthSDKCodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSReqLogin.AuthSDKCodeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.CSReqLogin.AuthSDKCodeEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSReqLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqLogin) */ {
 public:
  inline CSReqLogin() : CSReqLogin(nullptr) {}
  ~CSReqLogin() override;
  explicit PROTOBUF_CONSTEXPR CSReqLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqLogin(const CSReqLogin& from);
  CSReqLogin(CSReqLogin&& from) noexcept
    : CSReqLogin() {
    *this = ::std::move(from);
  }

  inline CSReqLogin& operator=(const CSReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqLogin& operator=(CSReqLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqLogin* internal_default_instance() {
    return reinterpret_cast<const CSReqLogin*>(
               &_CSReqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    281;

  friend void swap(CSReqLogin& a, CSReqLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqLogin& from) {
    CSReqLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqLogin";
  }
  protected:
  explicit CSReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAuthSDKCodeFieldNumber = 14,
    kPSBlockedUsersFieldNumber = 29,
    kDeviceIdFieldNumber = 1,
    kOsVersionFieldNumber = 3,
    kDeviceTypeFieldNumber = 4,
    kIdFieldNumber = 7,
    kLySdkDeviceIdFieldNumber = 8,
    kChannelIdFieldNumber = 9,
    kPackageIdFieldNumber = 10,
    kApkVersionFieldNumber = 11,
    kResolutionFieldNumber = 12,
    kSessionIdFieldNumber = 15,
    kChannelUserIdFieldNumber = 16,
    kPvpResourceVersionFieldNumber = 17,
    kActiveCodeFieldNumber = 19,
    kLanguageFieldNumber = 20,
    kCountryFieldNumber = 21,
    kIpFieldNumber = 23,
    kPicUrlFieldNumber = 24,
    kFengkongDeviceIdFieldNumber = 25,
    kGameLanguageFieldNumber = 26,
    kAdvertisingIdFieldNumber = 28,
    kResultFieldNumber = 30,
    kPlatformTypeFieldNumber = 2,
    kNetTypeFieldNumber = 5,
    kLoginTypeFieldNumber = 6,
    kChannelTypeFieldNumber = 13,
    kPayChannelFieldNumber = 18,
    kLaunchTypeFieldNumber = 22,
    kGamelibVersionFieldNumber = 27,
    kLoginSourceFieldNumber = 31,
  };
  // map<string, string> AuthSDKCode = 14;
  int authsdkcode_size() const;
  private:
  int _internal_authsdkcode_size() const;
  public:
  void clear_authsdkcode();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_authsdkcode() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_authsdkcode();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      authsdkcode() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_authsdkcode();

  // repeated string PSBlockedUsers = 29;
  int psblockedusers_size() const;
  private:
  int _internal_psblockedusers_size() const;
  public:
  void clear_psblockedusers();
  const std::string& psblockedusers(int index) const;
  std::string* mutable_psblockedusers(int index);
  void set_psblockedusers(int index, const std::string& value);
  void set_psblockedusers(int index, std::string&& value);
  void set_psblockedusers(int index, const char* value);
  void set_psblockedusers(int index, const char* value, size_t size);
  std::string* add_psblockedusers();
  void add_psblockedusers(const std::string& value);
  void add_psblockedusers(std::string&& value);
  void add_psblockedusers(const char* value);
  void add_psblockedusers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& psblockedusers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_psblockedusers();
  private:
  const std::string& _internal_psblockedusers(int index) const;
  std::string* _internal_add_psblockedusers();
  public:

  // string DeviceId = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string OsVersion = 3;
  void clear_osversion();
  const std::string& osversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_osversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_osversion();
  PROTOBUF_NODISCARD std::string* release_osversion();
  void set_allocated_osversion(std::string* osversion);
  private:
  const std::string& _internal_osversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_osversion(const std::string& value);
  std::string* _internal_mutable_osversion();
  public:

  // string DeviceType = 4;
  void clear_devicetype();
  const std::string& devicetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicetype();
  PROTOBUF_NODISCARD std::string* release_devicetype();
  void set_allocated_devicetype(std::string* devicetype);
  private:
  const std::string& _internal_devicetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicetype(const std::string& value);
  std::string* _internal_mutable_devicetype();
  public:

  // string Id = 7;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string LySdkDeviceId = 8;
  void clear_lysdkdeviceid();
  const std::string& lysdkdeviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lysdkdeviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lysdkdeviceid();
  PROTOBUF_NODISCARD std::string* release_lysdkdeviceid();
  void set_allocated_lysdkdeviceid(std::string* lysdkdeviceid);
  private:
  const std::string& _internal_lysdkdeviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lysdkdeviceid(const std::string& value);
  std::string* _internal_mutable_lysdkdeviceid();
  public:

  // string ChannelId = 9;
  void clear_channelid();
  const std::string& channelid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelid();
  PROTOBUF_NODISCARD std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string PackageId = 10;
  void clear_packageid();
  const std::string& packageid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packageid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packageid();
  PROTOBUF_NODISCARD std::string* release_packageid();
  void set_allocated_packageid(std::string* packageid);
  private:
  const std::string& _internal_packageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packageid(const std::string& value);
  std::string* _internal_mutable_packageid();
  public:

  // string ApkVersion = 11;
  void clear_apkversion();
  const std::string& apkversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apkversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apkversion();
  PROTOBUF_NODISCARD std::string* release_apkversion();
  void set_allocated_apkversion(std::string* apkversion);
  private:
  const std::string& _internal_apkversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apkversion(const std::string& value);
  std::string* _internal_mutable_apkversion();
  public:

  // string Resolution = 12;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_NODISCARD std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // string SessionId = 15;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string ChannelUserId = 16;
  void clear_channeluserid();
  const std::string& channeluserid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channeluserid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channeluserid();
  PROTOBUF_NODISCARD std::string* release_channeluserid();
  void set_allocated_channeluserid(std::string* channeluserid);
  private:
  const std::string& _internal_channeluserid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channeluserid(const std::string& value);
  std::string* _internal_mutable_channeluserid();
  public:

  // string PvpResourceVersion = 17;
  void clear_pvpresourceversion();
  const std::string& pvpresourceversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvpresourceversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvpresourceversion();
  PROTOBUF_NODISCARD std::string* release_pvpresourceversion();
  void set_allocated_pvpresourceversion(std::string* pvpresourceversion);
  private:
  const std::string& _internal_pvpresourceversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvpresourceversion(const std::string& value);
  std::string* _internal_mutable_pvpresourceversion();
  public:

  // string ActiveCode = 19;
  void clear_activecode();
  const std::string& activecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activecode();
  PROTOBUF_NODISCARD std::string* release_activecode();
  void set_allocated_activecode(std::string* activecode);
  private:
  const std::string& _internal_activecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activecode(const std::string& value);
  std::string* _internal_mutable_activecode();
  public:

  // string Language = 20;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string Country = 21;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string Ip = 23;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string PicUrl = 24;
  void clear_picurl();
  const std::string& picurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picurl();
  PROTOBUF_NODISCARD std::string* release_picurl();
  void set_allocated_picurl(std::string* picurl);
  private:
  const std::string& _internal_picurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picurl(const std::string& value);
  std::string* _internal_mutable_picurl();
  public:

  // string FengkongDeviceId = 25;
  void clear_fengkongdeviceid();
  const std::string& fengkongdeviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fengkongdeviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fengkongdeviceid();
  PROTOBUF_NODISCARD std::string* release_fengkongdeviceid();
  void set_allocated_fengkongdeviceid(std::string* fengkongdeviceid);
  private:
  const std::string& _internal_fengkongdeviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fengkongdeviceid(const std::string& value);
  std::string* _internal_mutable_fengkongdeviceid();
  public:

  // string GameLanguage = 26;
  void clear_gamelanguage();
  const std::string& gamelanguage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamelanguage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamelanguage();
  PROTOBUF_NODISCARD std::string* release_gamelanguage();
  void set_allocated_gamelanguage(std::string* gamelanguage);
  private:
  const std::string& _internal_gamelanguage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamelanguage(const std::string& value);
  std::string* _internal_mutable_gamelanguage();
  public:

  // string AdvertisingId = 28;
  void clear_advertisingid();
  const std::string& advertisingid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_advertisingid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_advertisingid();
  PROTOBUF_NODISCARD std::string* release_advertisingid();
  void set_allocated_advertisingid(std::string* advertisingid);
  private:
  const std::string& _internal_advertisingid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_advertisingid(const std::string& value);
  std::string* _internal_mutable_advertisingid();
  public:

  // bytes Result = 30;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // .msg.PLATFORMTYPE PlatformType = 2;
  void clear_platformtype();
  ::msg::PLATFORMTYPE platformtype() const;
  void set_platformtype(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platformtype() const;
  void _internal_set_platformtype(::msg::PLATFORMTYPE value);
  public:

  // .msg.NETTYPE NetType = 5;
  void clear_nettype();
  ::msg::NETTYPE nettype() const;
  void set_nettype(::msg::NETTYPE value);
  private:
  ::msg::NETTYPE _internal_nettype() const;
  void _internal_set_nettype(::msg::NETTYPE value);
  public:

  // .msg.LOGINTYPE LoginType = 6;
  void clear_logintype();
  ::msg::LOGINTYPE logintype() const;
  void set_logintype(::msg::LOGINTYPE value);
  private:
  ::msg::LOGINTYPE _internal_logintype() const;
  void _internal_set_logintype(::msg::LOGINTYPE value);
  public:

  // .msg.CHANELTYPE ChannelType = 13;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // .msg.CHANELTYPE PayChannel = 18;
  void clear_paychannel();
  ::msg::CHANELTYPE paychannel() const;
  void set_paychannel(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_paychannel() const;
  void _internal_set_paychannel(::msg::CHANELTYPE value);
  public:

  // .msg.LAUNCHTYPE LaunchType = 22;
  void clear_launchtype();
  ::msg::LAUNCHTYPE launchtype() const;
  void set_launchtype(::msg::LAUNCHTYPE value);
  private:
  ::msg::LAUNCHTYPE _internal_launchtype() const;
  void _internal_set_launchtype(::msg::LAUNCHTYPE value);
  public:

  // int64 GamelibVersion = 27;
  void clear_gamelibversion();
  int64_t gamelibversion() const;
  void set_gamelibversion(int64_t value);
  private:
  int64_t _internal_gamelibversion() const;
  void _internal_set_gamelibversion(int64_t value);
  public:

  // .msg.LOGINSOURCE LoginSource = 31;
  void clear_loginsource();
  ::msg::LOGINSOURCE loginsource() const;
  void set_loginsource(::msg::LOGINSOURCE value);
  private:
  ::msg::LOGINSOURCE _internal_loginsource() const;
  void _internal_set_loginsource(::msg::LOGINSOURCE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSReqLogin_AuthSDKCodeEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> authsdkcode_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> psblockedusers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lysdkdeviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apkversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channeluserid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvpresourceversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fengkongdeviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamelanguage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr advertisingid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    int platformtype_;
    int nettype_;
    int logintype_;
    int channeltype_;
    int paychannel_;
    int launchtype_;
    int64_t gamelibversion_;
    int loginsource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Loc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Loc) */ {
 public:
  inline Loc() : Loc(nullptr) {}
  ~Loc() override;
  explicit PROTOBUF_CONSTEXPR Loc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Loc(const Loc& from);
  Loc(Loc&& from) noexcept
    : Loc() {
    *this = ::std::move(from);
  }

  inline Loc& operator=(const Loc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Loc& operator=(Loc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Loc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Loc* internal_default_instance() {
    return reinterpret_cast<const Loc*>(
               &_Loc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    282;

  friend void swap(Loc& a, Loc& b) {
    a.Swap(&b);
  }
  inline void Swap(Loc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Loc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Loc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Loc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Loc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Loc& from) {
    Loc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Loc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Loc";
  }
  protected:
  explicit Loc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // uint32 X = 1;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 Y = 2;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Loc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Authority final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Authority) */ {
 public:
  inline Authority() : Authority(nullptr) {}
  ~Authority() override;
  explicit PROTOBUF_CONSTEXPR Authority(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Authority(const Authority& from);
  Authority(Authority&& from) noexcept
    : Authority() {
    *this = ::std::move(from);
  }

  inline Authority& operator=(const Authority& from) {
    CopyFrom(from);
    return *this;
  }
  inline Authority& operator=(Authority&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Authority& default_instance() {
    return *internal_default_instance();
  }
  static inline const Authority* internal_default_instance() {
    return reinterpret_cast<const Authority*>(
               &_Authority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    283;

  friend void swap(Authority& a, Authority& b) {
    a.Swap(&b);
  }
  inline void Swap(Authority* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Authority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Authority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Authority>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Authority& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Authority& from) {
    Authority::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Authority* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Authority";
  }
  protected:
  explicit Authority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // bool Mark = 1;
  void clear_mark();
  bool mark() const;
  void set_mark(bool value);
  private:
  bool _internal_mark() const;
  void _internal_set_mark(bool value);
  public:

  // uint32 Level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Authority)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool mark_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GetNumRank final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetNumRank) */ {
 public:
  inline GetNumRank() : GetNumRank(nullptr) {}
  ~GetNumRank() override;
  explicit PROTOBUF_CONSTEXPR GetNumRank(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNumRank(const GetNumRank& from);
  GetNumRank(GetNumRank&& from) noexcept
    : GetNumRank() {
    *this = ::std::move(from);
  }

  inline GetNumRank& operator=(const GetNumRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNumRank& operator=(GetNumRank&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNumRank& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNumRank* internal_default_instance() {
    return reinterpret_cast<const GetNumRank*>(
               &_GetNumRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    284;

  friend void swap(GetNumRank& a, GetNumRank& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNumRank* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNumRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNumRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNumRank>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNumRank& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNumRank& from) {
    GetNumRank::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNumRank* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetNumRank";
  }
  protected:
  explicit GetNumRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 2,
    kTargetPlayerFieldNumber = 9,
    kTournamentIdFieldNumber = 3,
    kTypeFieldNumber = 1,
    kSelfRankFieldNumber = 6,
    kClassIdFieldNumber = 4,
    kRoundIdFieldNumber = 5,
    kGroupIndexFieldNumber = 7,
    kChannelTypeFieldNumber = 8,
  };
  // string Country = 2;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string TargetPlayer = 9;
  void clear_targetplayer();
  const std::string& targetplayer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetplayer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetplayer();
  PROTOBUF_NODISCARD std::string* release_targetplayer();
  void set_allocated_targetplayer(std::string* targetplayer);
  private:
  const std::string& _internal_targetplayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetplayer(const std::string& value);
  std::string* _internal_mutable_targetplayer();
  public:

  // uint64 TournamentId = 3;
  void clear_tournamentid();
  uint64_t tournamentid() const;
  void set_tournamentid(uint64_t value);
  private:
  uint64_t _internal_tournamentid() const;
  void _internal_set_tournamentid(uint64_t value);
  public:

  // .msg.RANKTYPE Type = 1;
  void clear_type();
  ::msg::RANKTYPE type() const;
  void set_type(::msg::RANKTYPE value);
  private:
  ::msg::RANKTYPE _internal_type() const;
  void _internal_set_type(::msg::RANKTYPE value);
  public:

  // bool SelfRank = 6;
  void clear_selfrank();
  bool selfrank() const;
  void set_selfrank(bool value);
  private:
  bool _internal_selfrank() const;
  void _internal_set_selfrank(bool value);
  public:

  // uint64 ClassId = 4;
  void clear_classid();
  uint64_t classid() const;
  void set_classid(uint64_t value);
  private:
  uint64_t _internal_classid() const;
  void _internal_set_classid(uint64_t value);
  public:

  // uint64 RoundId = 5;
  void clear_roundid();
  uint64_t roundid() const;
  void set_roundid(uint64_t value);
  private:
  uint64_t _internal_roundid() const;
  void _internal_set_roundid(uint64_t value);
  public:

  // uint32 GroupIndex = 7;
  void clear_groupindex();
  uint32_t groupindex() const;
  void set_groupindex(uint32_t value);
  private:
  uint32_t _internal_groupindex() const;
  void _internal_set_groupindex(uint32_t value);
  public:

  // .msg.CHANELTYPE ChannelType = 8;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GetNumRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetplayer_;
    uint64_t tournamentid_;
    int type_;
    bool selfrank_;
    uint64_t classid_;
    uint64_t roundid_;
    uint32_t groupindex_;
    int channeltype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPassportCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPassportCard) */ {
 public:
  inline CSDTPassportCard() : CSDTPassportCard(nullptr) {}
  ~CSDTPassportCard() override;
  explicit PROTOBUF_CONSTEXPR CSDTPassportCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPassportCard(const CSDTPassportCard& from);
  CSDTPassportCard(CSDTPassportCard&& from) noexcept
    : CSDTPassportCard() {
    *this = ::std::move(from);
  }

  inline CSDTPassportCard& operator=(const CSDTPassportCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPassportCard& operator=(CSDTPassportCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPassportCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPassportCard* internal_default_instance() {
    return reinterpret_cast<const CSDTPassportCard*>(
               &_CSDTPassportCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    285;

  friend void swap(CSDTPassportCard& a, CSDTPassportCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPassportCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPassportCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPassportCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPassportCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPassportCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPassportCard& from) {
    CSDTPassportCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPassportCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPassportCard";
  }
  protected:
  explicit CSDTPassportCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeIdListFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // repeated uint32 TypeIdList = 1;
  int typeidlist_size() const;
  private:
  int _internal_typeidlist_size() const;
  public:
  void clear_typeidlist();
  private:
  uint32_t _internal_typeidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_typeidlist() const;
  void _internal_add_typeidlist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_typeidlist();
  public:
  uint32_t typeidlist(int index) const;
  void set_typeidlist(int index, uint32_t value);
  void add_typeidlist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      typeidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_typeidlist();

  // uint32 Level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTPassportCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > typeidlist_;
    mutable std::atomic<int> _typeidlist_cached_byte_size_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PveDataInfo_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PveDataInfo_DataEntry_DoNotUse, 
    uint32_t, ::msg::Pve,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PveDataInfo_DataEntry_DoNotUse, 
    uint32_t, ::msg::Pve,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PveDataInfo_DataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PveDataInfo_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PveDataInfo_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PveDataInfo_DataEntry_DoNotUse& other);
  static const PveDataInfo_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PveDataInfo_DataEntry_DoNotUse*>(&_PveDataInfo_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PveDataInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PveDataInfo) */ {
 public:
  inline PveDataInfo() : PveDataInfo(nullptr) {}
  ~PveDataInfo() override;
  explicit PROTOBUF_CONSTEXPR PveDataInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PveDataInfo(const PveDataInfo& from);
  PveDataInfo(PveDataInfo&& from) noexcept
    : PveDataInfo() {
    *this = ::std::move(from);
  }

  inline PveDataInfo& operator=(const PveDataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PveDataInfo& operator=(PveDataInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PveDataInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PveDataInfo* internal_default_instance() {
    return reinterpret_cast<const PveDataInfo*>(
               &_PveDataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    287;

  friend void swap(PveDataInfo& a, PveDataInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PveDataInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PveDataInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PveDataInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PveDataInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PveDataInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PveDataInfo& from) {
    PveDataInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PveDataInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PveDataInfo";
  }
  protected:
  explicit PveDataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<uint32, .msg.Pve> Data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:msg.PveDataInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PveDataInfo_DataEntry_DoNotUse,
        uint32_t, ::msg::Pve,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Pve_ChessIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pve_ChessIdsEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pve_ChessIdsEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  Pve_ChessIdsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Pve_ChessIdsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pve_ChessIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pve_ChessIdsEntry_DoNotUse& other);
  static const Pve_ChessIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pve_ChessIdsEntry_DoNotUse*>(&_Pve_ChessIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class Pve_SkillsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pve_SkillsEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pve_SkillsEntry_DoNotUse, 
    uint32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  Pve_SkillsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Pve_SkillsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pve_SkillsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pve_SkillsEntry_DoNotUse& other);
  static const Pve_SkillsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pve_SkillsEntry_DoNotUse*>(&_Pve_SkillsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class Pve_BuffEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pve_BuffEntry_DoNotUse, 
    uint32_t, ::msg::PveBuff,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pve_BuffEntry_DoNotUse, 
    uint32_t, ::msg::PveBuff,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Pve_BuffEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Pve_BuffEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pve_BuffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pve_BuffEntry_DoNotUse& other);
  static const Pve_BuffEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pve_BuffEntry_DoNotUse*>(&_Pve_BuffEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class Pve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Pve) */ {
 public:
  inline Pve() : Pve(nullptr) {}
  ~Pve() override;
  explicit PROTOBUF_CONSTEXPR Pve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pve(const Pve& from);
  Pve(Pve&& from) noexcept
    : Pve() {
    *this = ::std::move(from);
  }

  inline Pve& operator=(const Pve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pve& operator=(Pve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pve& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pve* internal_default_instance() {
    return reinterpret_cast<const Pve*>(
               &_Pve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    291;

  friend void swap(Pve& a, Pve& b) {
    a.Swap(&b);
  }
  inline void Swap(Pve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pve& from) {
    Pve::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pve* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Pve";
  }
  protected:
  explicit Pve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChessIdsFieldNumber = 2,
    kSkillsFieldNumber = 3,
    kBuffFieldNumber = 4,
    kTeamNameFieldNumber = 6,
    kScoreFieldNumber = 1,
    kRankScoreFieldNumber = 5,
    kUnlockFieldNumber = 7,
  };
  // map<uint32, bool> ChessIds = 2;
  int chessids_size() const;
  private:
  int _internal_chessids_size() const;
  public:
  void clear_chessids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      _internal_chessids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      _internal_mutable_chessids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      chessids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      mutable_chessids();

  // map<uint32, bool> Skills = 3;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      _internal_skills() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      _internal_mutable_skills();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
      skills() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
      mutable_skills();

  // map<uint32, .msg.PveBuff> Buff = 4;
  int buff_size() const;
  private:
  int _internal_buff_size() const;
  public:
  void clear_buff();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >&
      _internal_buff() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >*
      _internal_mutable_buff();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >&
      buff() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >*
      mutable_buff();

  // string TeamName = 6;
  void clear_teamname();
  const std::string& teamname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teamname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teamname();
  PROTOBUF_NODISCARD std::string* release_teamname();
  void set_allocated_teamname(std::string* teamname);
  private:
  const std::string& _internal_teamname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teamname(const std::string& value);
  std::string* _internal_mutable_teamname();
  public:

  // uint32 Score = 1;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // uint32 RankScore = 5;
  void clear_rankscore();
  uint32_t rankscore() const;
  void set_rankscore(uint32_t value);
  private:
  uint32_t _internal_rankscore() const;
  void _internal_set_rankscore(uint32_t value);
  public:

  // bool Unlock = 7;
  void clear_unlock();
  bool unlock() const;
  void set_unlock(bool value);
  private:
  bool _internal_unlock() const;
  void _internal_set_unlock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Pve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Pve_ChessIdsEntry_DoNotUse,
        uint32_t, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> chessids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Pve_SkillsEntry_DoNotUse,
        uint32_t, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> skills_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Pve_BuffEntry_DoNotUse,
        uint32_t, ::msg::PveBuff,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> buff_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamname_;
    uint32_t score_;
    uint32_t rankscore_;
    bool unlock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PveBuff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PveBuff) */ {
 public:
  inline PveBuff() : PveBuff(nullptr) {}
  ~PveBuff() override;
  explicit PROTOBUF_CONSTEXPR PveBuff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PveBuff(const PveBuff& from);
  PveBuff(PveBuff&& from) noexcept
    : PveBuff() {
    *this = ::std::move(from);
  }

  inline PveBuff& operator=(const PveBuff& from) {
    CopyFrom(from);
    return *this;
  }
  inline PveBuff& operator=(PveBuff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PveBuff& default_instance() {
    return *internal_default_instance();
  }
  static inline const PveBuff* internal_default_instance() {
    return reinterpret_cast<const PveBuff*>(
               &_PveBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    292;

  friend void swap(PveBuff& a, PveBuff& b) {
    a.Swap(&b);
  }
  inline void Swap(PveBuff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PveBuff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PveBuff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PveBuff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PveBuff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PveBuff& from) {
    PveBuff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PveBuff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PveBuff";
  }
  protected:
  explicit PveBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEtimeFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // int64 Etime = 2;
  void clear_etime();
  int64_t etime() const;
  void set_etime(int64_t value);
  private:
  int64_t _internal_etime() const;
  void _internal_set_etime(int64_t value);
  public:

  // uint32 Count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PveBuff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t etime_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CardGroupData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CardGroupData) */ {
 public:
  inline CardGroupData() : CardGroupData(nullptr) {}
  ~CardGroupData() override;
  explicit PROTOBUF_CONSTEXPR CardGroupData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardGroupData(const CardGroupData& from);
  CardGroupData(CardGroupData&& from) noexcept
    : CardGroupData() {
    *this = ::std::move(from);
  }

  inline CardGroupData& operator=(const CardGroupData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardGroupData& operator=(CardGroupData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardGroupData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardGroupData* internal_default_instance() {
    return reinterpret_cast<const CardGroupData*>(
               &_CardGroupData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    293;

  friend void swap(CardGroupData& a, CardGroupData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardGroupData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardGroupData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardGroupData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardGroupData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardGroupData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CardGroupData& from) {
    CardGroupData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardGroupData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CardGroupData";
  }
  protected:
  explicit CardGroupData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessIdsFieldNumber = 1,
    kRemoveChessIdsFieldNumber = 5,
    kAutoAddCardTimesFieldNumber = 2,
    kIsAutoAddCardKernelFieldNumber = 3,
    kFlagFieldNumber = 4,
    kKernelFlagFieldNumber = 6,
  };
  // repeated .msg.CardGroupChess ChessIds = 1;
  int chessids_size() const;
  private:
  int _internal_chessids_size() const;
  public:
  void clear_chessids();
  ::msg::CardGroupChess* mutable_chessids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CardGroupChess >*
      mutable_chessids();
  private:
  const ::msg::CardGroupChess& _internal_chessids(int index) const;
  ::msg::CardGroupChess* _internal_add_chessids();
  public:
  const ::msg::CardGroupChess& chessids(int index) const;
  ::msg::CardGroupChess* add_chessids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CardGroupChess >&
      chessids() const;

  // repeated uint32 RemoveChessIds = 5;
  int removechessids_size() const;
  private:
  int _internal_removechessids_size() const;
  public:
  void clear_removechessids();
  private:
  uint32_t _internal_removechessids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_removechessids() const;
  void _internal_add_removechessids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_removechessids();
  public:
  uint32_t removechessids(int index) const;
  void set_removechessids(int index, uint32_t value);
  void add_removechessids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      removechessids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_removechessids();

  // uint32 AutoAddCardTimes = 2;
  void clear_autoaddcardtimes();
  uint32_t autoaddcardtimes() const;
  void set_autoaddcardtimes(uint32_t value);
  private:
  uint32_t _internal_autoaddcardtimes() const;
  void _internal_set_autoaddcardtimes(uint32_t value);
  public:

  // bool IsAutoAddCardKernel = 3;
  void clear_isautoaddcardkernel();
  bool isautoaddcardkernel() const;
  void set_isautoaddcardkernel(bool value);
  private:
  bool _internal_isautoaddcardkernel() const;
  void _internal_set_isautoaddcardkernel(bool value);
  public:

  // bool Flag = 4;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // bool KernelFlag = 6;
  void clear_kernelflag();
  bool kernelflag() const;
  void set_kernelflag(bool value);
  private:
  bool _internal_kernelflag() const;
  void _internal_set_kernelflag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CardGroupData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CardGroupChess > chessids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > removechessids_;
    mutable std::atomic<int> _removechessids_cached_byte_size_;
    uint32_t autoaddcardtimes_;
    bool isautoaddcardkernel_;
    bool flag_;
    bool kernelflag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CardGroupChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CardGroupChess) */ {
 public:
  inline CardGroupChess() : CardGroupChess(nullptr) {}
  ~CardGroupChess() override;
  explicit PROTOBUF_CONSTEXPR CardGroupChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardGroupChess(const CardGroupChess& from);
  CardGroupChess(CardGroupChess&& from) noexcept
    : CardGroupChess() {
    *this = ::std::move(from);
  }

  inline CardGroupChess& operator=(const CardGroupChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardGroupChess& operator=(CardGroupChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardGroupChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardGroupChess* internal_default_instance() {
    return reinterpret_cast<const CardGroupChess*>(
               &_CardGroupChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    294;

  friend void swap(CardGroupChess& a, CardGroupChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CardGroupChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardGroupChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardGroupChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardGroupChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardGroupChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CardGroupChess& from) {
    CardGroupChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardGroupChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CardGroupChess";
  }
  protected:
  explicit CardGroupChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtimeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // int64 Ctime = 2;
  void clear_ctime();
  int64_t ctime() const;
  void set_ctime(int64_t value);
  private:
  int64_t _internal_ctime() const;
  void _internal_set_ctime(int64_t value);
  public:

  // uint32 Id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CardGroupChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t ctime_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ChessIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessIds) */ {
 public:
  inline ChessIds() : ChessIds(nullptr) {}
  ~ChessIds() override;
  explicit PROTOBUF_CONSTEXPR ChessIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessIds(const ChessIds& from);
  ChessIds(ChessIds&& from) noexcept
    : ChessIds() {
    *this = ::std::move(from);
  }

  inline ChessIds& operator=(const ChessIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessIds& operator=(ChessIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessIds* internal_default_instance() {
    return reinterpret_cast<const ChessIds*>(
               &_ChessIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    295;

  friend void swap(ChessIds& a, ChessIds& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessIds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessIds& from) {
    ChessIds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessIds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessIds";
  }
  protected:
  explicit ChessIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated uint32 Ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  uint32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ids() const;
  void _internal_add_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ids();
  public:
  uint32_t ids(int index) const;
  void set_ids(int index, uint32_t value);
  void add_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:msg.ChessIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PveConsume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PveConsume) */ {
 public:
  inline PveConsume() : PveConsume(nullptr) {}
  ~PveConsume() override;
  explicit PROTOBUF_CONSTEXPR PveConsume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PveConsume(const PveConsume& from);
  PveConsume(PveConsume&& from) noexcept
    : PveConsume() {
    *this = ::std::move(from);
  }

  inline PveConsume& operator=(const PveConsume& from) {
    CopyFrom(from);
    return *this;
  }
  inline PveConsume& operator=(PveConsume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PveConsume& default_instance() {
    return *internal_default_instance();
  }
  static inline const PveConsume* internal_default_instance() {
    return reinterpret_cast<const PveConsume*>(
               &_PveConsume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    296;

  friend void swap(PveConsume& a, PveConsume& b) {
    a.Swap(&b);
  }
  inline void Swap(PveConsume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PveConsume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PveConsume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PveConsume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PveConsume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PveConsume& from) {
    PveConsume::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PveConsume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PveConsume";
  }
  protected:
  explicit PveConsume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // .msg.PVECONSUMETYPE Type = 1;
  void clear_type();
  ::msg::PVECONSUMETYPE type() const;
  void set_type(::msg::PVECONSUMETYPE value);
  private:
  ::msg::PVECONSUMETYPE _internal_type() const;
  void _internal_set_type(::msg::PVECONSUMETYPE value);
  public:

  // uint32 Id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 Count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PveConsume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    uint32_t id_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PveSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PveSetting) */ {
 public:
  inline PveSetting() : PveSetting(nullptr) {}
  ~PveSetting() override;
  explicit PROTOBUF_CONSTEXPR PveSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PveSetting(const PveSetting& from);
  PveSetting(PveSetting&& from) noexcept
    : PveSetting() {
    *this = ::std::move(from);
  }

  inline PveSetting& operator=(const PveSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline PveSetting& operator=(PveSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PveSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const PveSetting* internal_default_instance() {
    return reinterpret_cast<const PveSetting*>(
               &_PveSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    297;

  friend void swap(PveSetting& a, PveSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(PveSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PveSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PveSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PveSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PveSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PveSetting& from) {
    PveSetting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PveSetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PveSetting";
  }
  protected:
  explicit PveSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeBuffIdsFieldNumber = 1,
  };
  // repeated uint32 DeBuffIds = 1;
  int debuffids_size() const;
  private:
  int _internal_debuffids_size() const;
  public:
  void clear_debuffids();
  private:
  uint32_t _internal_debuffids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_debuffids() const;
  void _internal_add_debuffids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_debuffids();
  public:
  uint32_t debuffids(int index) const;
  void set_debuffids(int index, uint32_t value);
  void add_debuffids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      debuffids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_debuffids();

  // @@protoc_insertion_point(class_scope:msg.PveSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > debuffids_;
    mutable std::atomic<int> _debuffids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerTeamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerTeamInfo) */ {
 public:
  inline PlayerTeamInfo() : PlayerTeamInfo(nullptr) {}
  ~PlayerTeamInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerTeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerTeamInfo(const PlayerTeamInfo& from);
  PlayerTeamInfo(PlayerTeamInfo&& from) noexcept
    : PlayerTeamInfo() {
    *this = ::std::move(from);
  }

  inline PlayerTeamInfo& operator=(const PlayerTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerTeamInfo& operator=(PlayerTeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerTeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerTeamInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerTeamInfo*>(
               &_PlayerTeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    298;

  friend void swap(PlayerTeamInfo& a, PlayerTeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerTeamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerTeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerTeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerTeamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerTeamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerTeamInfo& from) {
    PlayerTeamInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTeamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerTeamInfo";
  }
  protected:
  explicit PlayerTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
  };
  // string MapKey = 1;
  void clear_mapkey();
  const std::string& mapkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapkey();
  PROTOBUF_NODISCARD std::string* release_mapkey();
  void set_allocated_mapkey(std::string* mapkey);
  private:
  const std::string& _internal_mapkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapkey(const std::string& value);
  std::string* _internal_mutable_mapkey();
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerTeamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapkey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PveRankRedisInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PveRankRedisInfo) */ {
 public:
  inline PveRankRedisInfo() : PveRankRedisInfo(nullptr) {}
  ~PveRankRedisInfo() override;
  explicit PROTOBUF_CONSTEXPR PveRankRedisInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PveRankRedisInfo(const PveRankRedisInfo& from);
  PveRankRedisInfo(PveRankRedisInfo&& from) noexcept
    : PveRankRedisInfo() {
    *this = ::std::move(from);
  }

  inline PveRankRedisInfo& operator=(const PveRankRedisInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PveRankRedisInfo& operator=(PveRankRedisInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PveRankRedisInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PveRankRedisInfo* internal_default_instance() {
    return reinterpret_cast<const PveRankRedisInfo*>(
               &_PveRankRedisInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    299;

  friend void swap(PveRankRedisInfo& a, PveRankRedisInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PveRankRedisInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PveRankRedisInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PveRankRedisInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PveRankRedisInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PveRankRedisInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PveRankRedisInfo& from) {
    PveRankRedisInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PveRankRedisInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PveRankRedisInfo";
  }
  protected:
  explicit PveRankRedisInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionFieldNumber = 1,
    kTeamNameFieldNumber = 2,
  };
  // string Caption = 1;
  void clear_caption();
  const std::string& caption() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_caption(ArgT0&& arg0, ArgT... args);
  std::string* mutable_caption();
  PROTOBUF_NODISCARD std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // string TeamName = 2;
  void clear_teamname();
  const std::string& teamname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teamname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teamname();
  PROTOBUF_NODISCARD std::string* release_teamname();
  void set_allocated_teamname(std::string* teamname);
  private:
  const std::string& _internal_teamname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teamname(const std::string& value);
  std::string* _internal_mutable_teamname();
  public:

  // @@protoc_insertion_point(class_scope:msg.PveRankRedisInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTPlayerPvpData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTPlayerPvpData) */ {
 public:
  inline CSDTPlayerPvpData() : CSDTPlayerPvpData(nullptr) {}
  ~CSDTPlayerPvpData() override;
  explicit PROTOBUF_CONSTEXPR CSDTPlayerPvpData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTPlayerPvpData(const CSDTPlayerPvpData& from);
  CSDTPlayerPvpData(CSDTPlayerPvpData&& from) noexcept
    : CSDTPlayerPvpData() {
    *this = ::std::move(from);
  }

  inline CSDTPlayerPvpData& operator=(const CSDTPlayerPvpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTPlayerPvpData& operator=(CSDTPlayerPvpData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTPlayerPvpData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTPlayerPvpData* internal_default_instance() {
    return reinterpret_cast<const CSDTPlayerPvpData*>(
               &_CSDTPlayerPvpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    300;

  friend void swap(CSDTPlayerPvpData& a, CSDTPlayerPvpData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTPlayerPvpData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTPlayerPvpData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTPlayerPvpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTPlayerPvpData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTPlayerPvpData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTPlayerPvpData& from) {
    CSDTPlayerPvpData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTPlayerPvpData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTPlayerPvpData";
  }
  protected:
  explicit CSDTPlayerPvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPveFieldNumber = 1,
    kCardGroupFieldNumber = 2,
  };
  // .msg.PveDataInfo Pve = 1;
  bool has_pve() const;
  private:
  bool _internal_has_pve() const;
  public:
  void clear_pve();
  const ::msg::PveDataInfo& pve() const;
  PROTOBUF_NODISCARD ::msg::PveDataInfo* release_pve();
  ::msg::PveDataInfo* mutable_pve();
  void set_allocated_pve(::msg::PveDataInfo* pve);
  private:
  const ::msg::PveDataInfo& _internal_pve() const;
  ::msg::PveDataInfo* _internal_mutable_pve();
  public:
  void unsafe_arena_set_allocated_pve(
      ::msg::PveDataInfo* pve);
  ::msg::PveDataInfo* unsafe_arena_release_pve();

  // .msg.CardGroupData CardGroup = 2;
  bool has_cardgroup() const;
  private:
  bool _internal_has_cardgroup() const;
  public:
  void clear_cardgroup();
  const ::msg::CardGroupData& cardgroup() const;
  PROTOBUF_NODISCARD ::msg::CardGroupData* release_cardgroup();
  ::msg::CardGroupData* mutable_cardgroup();
  void set_allocated_cardgroup(::msg::CardGroupData* cardgroup);
  private:
  const ::msg::CardGroupData& _internal_cardgroup() const;
  ::msg::CardGroupData* _internal_mutable_cardgroup();
  public:
  void unsafe_arena_set_allocated_cardgroup(
      ::msg::CardGroupData* cardgroup);
  ::msg::CardGroupData* unsafe_arena_release_cardgroup();

  // @@protoc_insertion_point(class_scope:msg.CSDTPlayerPvpData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PveDataInfo* pve_;
    ::msg::CardGroupData* cardgroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class GmBan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GmBan) */ {
 public:
  inline GmBan() : GmBan(nullptr) {}
  ~GmBan() override;
  explicit PROTOBUF_CONSTEXPR GmBan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GmBan(const GmBan& from);
  GmBan(GmBan&& from) noexcept
    : GmBan() {
    *this = ::std::move(from);
  }

  inline GmBan& operator=(const GmBan& from) {
    CopyFrom(from);
    return *this;
  }
  inline GmBan& operator=(GmBan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GmBan& default_instance() {
    return *internal_default_instance();
  }
  static inline const GmBan* internal_default_instance() {
    return reinterpret_cast<const GmBan*>(
               &_GmBan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    301;

  friend void swap(GmBan& a, GmBan& b) {
    a.Swap(&b);
  }
  inline void Swap(GmBan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GmBan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GmBan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GmBan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GmBan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GmBan& from) {
    GmBan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GmBan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GmBan";
  }
  protected:
  explicit GmBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 4,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kFTypeFieldNumber = 1,
  };
  // string Reason = 4;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int64 StartTime = 2;
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // int64 EndTime = 3;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // .msg.FROZEN_TYPE FType = 1;
  void clear_ftype();
  ::msg::FROZEN_TYPE ftype() const;
  void set_ftype(::msg::FROZEN_TYPE value);
  private:
  ::msg::FROZEN_TYPE _internal_ftype() const;
  void _internal_set_ftype(::msg::FROZEN_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GmBan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    int64_t starttime_;
    int64_t endtime_;
    int ftype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MentorInviteMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MentorInviteMsg) */ {
 public:
  inline MentorInviteMsg() : MentorInviteMsg(nullptr) {}
  ~MentorInviteMsg() override;
  explicit PROTOBUF_CONSTEXPR MentorInviteMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MentorInviteMsg(const MentorInviteMsg& from);
  MentorInviteMsg(MentorInviteMsg&& from) noexcept
    : MentorInviteMsg() {
    *this = ::std::move(from);
  }

  inline MentorInviteMsg& operator=(const MentorInviteMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MentorInviteMsg& operator=(MentorInviteMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MentorInviteMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MentorInviteMsg* internal_default_instance() {
    return reinterpret_cast<const MentorInviteMsg*>(
               &_MentorInviteMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    302;

  friend void swap(MentorInviteMsg& a, MentorInviteMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MentorInviteMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MentorInviteMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MentorInviteMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MentorInviteMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MentorInviteMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MentorInviteMsg& from) {
    MentorInviteMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MentorInviteMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MentorInviteMsg";
  }
  protected:
  explicit MentorInviteMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompleteTaskFieldNumber = 5,
    kIdFieldNumber = 2,
    kContentFieldNumber = 4,
    kCtimeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 CompleteTask = 5;
  int completetask_size() const;
  private:
  int _internal_completetask_size() const;
  public:
  void clear_completetask();
  private:
  uint32_t _internal_completetask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_completetask() const;
  void _internal_add_completetask(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_completetask();
  public:
  uint32_t completetask(int index) const;
  void set_completetask(int index, uint32_t value);
  void add_completetask(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      completetask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_completetask();

  // string Id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 Ctime = 3;
  void clear_ctime();
  int64_t ctime() const;
  void set_ctime(int64_t value);
  private:
  int64_t _internal_ctime() const;
  void _internal_set_ctime(int64_t value);
  public:

  // .msg.MENTORSHIP Type = 1;
  void clear_type();
  ::msg::MENTORSHIP type() const;
  void set_type(::msg::MENTORSHIP value);
  private:
  ::msg::MENTORSHIP _internal_type() const;
  void _internal_set_type(::msg::MENTORSHIP value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MentorInviteMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > completetask_;
    mutable std::atomic<int> _completetask_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int64_t ctime_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MentorInfo_TasksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MentorInfo_TasksEntry_DoNotUse, 
    uint32_t, ::msg::CSDTTaskItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MentorInfo_TasksEntry_DoNotUse, 
    uint32_t, ::msg::CSDTTaskItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MentorInfo_TasksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MentorInfo_TasksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MentorInfo_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MentorInfo_TasksEntry_DoNotUse& other);
  static const MentorInfo_TasksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MentorInfo_TasksEntry_DoNotUse*>(&_MentorInfo_TasksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class MentorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MentorInfo) */ {
 public:
  inline MentorInfo() : MentorInfo(nullptr) {}
  ~MentorInfo() override;
  explicit PROTOBUF_CONSTEXPR MentorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MentorInfo(const MentorInfo& from);
  MentorInfo(MentorInfo&& from) noexcept
    : MentorInfo() {
    *this = ::std::move(from);
  }

  inline MentorInfo& operator=(const MentorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MentorInfo& operator=(MentorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MentorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MentorInfo* internal_default_instance() {
    return reinterpret_cast<const MentorInfo*>(
               &_MentorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    304;

  friend void swap(MentorInfo& a, MentorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MentorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MentorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MentorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MentorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MentorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MentorInfo& from) {
    MentorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MentorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MentorInfo";
  }
  protected:
  explicit MentorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPupilsFieldNumber = 2,
    kPunishTimeFieldNumber = 4,
    kTasksFieldNumber = 5,
    kLevelFieldNumber = 1,
    kInviteTimesFieldNumber = 3,
    kGraduateNumFieldNumber = 6,
  };
  // repeated .msg.Pupil Pupils = 2;
  int pupils_size() const;
  private:
  int _internal_pupils_size() const;
  public:
  void clear_pupils();
  ::msg::Pupil* mutable_pupils(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Pupil >*
      mutable_pupils();
  private:
  const ::msg::Pupil& _internal_pupils(int index) const;
  ::msg::Pupil* _internal_add_pupils();
  public:
  const ::msg::Pupil& pupils(int index) const;
  ::msg::Pupil* add_pupils();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Pupil >&
      pupils() const;

  // repeated int64 PunishTime = 4;
  int punishtime_size() const;
  private:
  int _internal_punishtime_size() const;
  public:
  void clear_punishtime();
  private:
  int64_t _internal_punishtime(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_punishtime() const;
  void _internal_add_punishtime(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_punishtime();
  public:
  int64_t punishtime(int index) const;
  void set_punishtime(int index, int64_t value);
  void add_punishtime(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      punishtime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_punishtime();

  // map<uint32, .msg.CSDTTaskItem> Tasks = 5;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
      _internal_tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
      _internal_mutable_tasks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
      tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
      mutable_tasks();

  // .msg.MENTORLEVEL Level = 1;
  void clear_level();
  ::msg::MENTORLEVEL level() const;
  void set_level(::msg::MENTORLEVEL value);
  private:
  ::msg::MENTORLEVEL _internal_level() const;
  void _internal_set_level(::msg::MENTORLEVEL value);
  public:

  // uint32 InviteTimes = 3;
  void clear_invitetimes();
  uint32_t invitetimes() const;
  void set_invitetimes(uint32_t value);
  private:
  uint32_t _internal_invitetimes() const;
  void _internal_set_invitetimes(uint32_t value);
  public:

  // uint32 GraduateNum = 6;
  void clear_graduatenum();
  uint32_t graduatenum() const;
  void set_graduatenum(uint32_t value);
  private:
  uint32_t _internal_graduatenum() const;
  void _internal_set_graduatenum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MentorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Pupil > pupils_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > punishtime_;
    mutable std::atomic<int> _punishtime_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        MentorInfo_TasksEntry_DoNotUse,
        uint32_t, ::msg::CSDTTaskItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tasks_;
    int level_;
    uint32_t invitetimes_;
    uint32_t graduatenum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Pupil_TasksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pupil_TasksEntry_DoNotUse, 
    uint32_t, ::msg::CSDTTaskItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pupil_TasksEntry_DoNotUse, 
    uint32_t, ::msg::CSDTTaskItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Pupil_TasksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Pupil_TasksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pupil_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pupil_TasksEntry_DoNotUse& other);
  static const Pupil_TasksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pupil_TasksEntry_DoNotUse*>(&_Pupil_TasksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class Pupil final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Pupil) */ {
 public:
  inline Pupil() : Pupil(nullptr) {}
  ~Pupil() override;
  explicit PROTOBUF_CONSTEXPR Pupil(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pupil(const Pupil& from);
  Pupil(Pupil&& from) noexcept
    : Pupil() {
    *this = ::std::move(from);
  }

  inline Pupil& operator=(const Pupil& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pupil& operator=(Pupil&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pupil& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pupil* internal_default_instance() {
    return reinterpret_cast<const Pupil*>(
               &_Pupil_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    306;

  friend void swap(Pupil& a, Pupil& b) {
    a.Swap(&b);
  }
  inline void Swap(Pupil* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pupil* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pupil* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pupil>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pupil& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pupil& from) {
    Pupil::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pupil* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Pupil";
  }
  protected:
  explicit Pupil(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
    kIdFieldNumber = 3,
    kGraduateTimeFieldNumber = 2,
    kApplyGraduateTimeFieldNumber = 5,
    kIntimacyFieldNumber = 6,
    kStatFieldNumber = 4,
  };
  // map<uint32, .msg.CSDTTaskItem> Tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
      _internal_tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
      _internal_mutable_tasks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
      tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
      mutable_tasks();

  // string Id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 GraduateTime = 2;
  void clear_graduatetime();
  int64_t graduatetime() const;
  void set_graduatetime(int64_t value);
  private:
  int64_t _internal_graduatetime() const;
  void _internal_set_graduatetime(int64_t value);
  public:

  // int64 ApplyGraduateTime = 5;
  void clear_applygraduatetime();
  int64_t applygraduatetime() const;
  void set_applygraduatetime(int64_t value);
  private:
  int64_t _internal_applygraduatetime() const;
  void _internal_set_applygraduatetime(int64_t value);
  public:

  // int64 Intimacy = 6;
  void clear_intimacy();
  int64_t intimacy() const;
  void set_intimacy(int64_t value);
  private:
  int64_t _internal_intimacy() const;
  void _internal_set_intimacy(int64_t value);
  public:

  // .msg.PUPILSTAT Stat = 4;
  void clear_stat();
  ::msg::PUPILSTAT stat() const;
  void set_stat(::msg::PUPILSTAT value);
  private:
  ::msg::PUPILSTAT _internal_stat() const;
  void _internal_set_stat(::msg::PUPILSTAT value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Pupil)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Pupil_TasksEntry_DoNotUse,
        uint32_t, ::msg::CSDTTaskItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tasks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int64_t graduatetime_;
    int64_t applygraduatetime_;
    int64_t intimacy_;
    int stat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TDUnUse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDUnUse) */ {
 public:
  inline TDUnUse() : TDUnUse(nullptr) {}
  ~TDUnUse() override;
  explicit PROTOBUF_CONSTEXPR TDUnUse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDUnUse(const TDUnUse& from);
  TDUnUse(TDUnUse&& from) noexcept
    : TDUnUse() {
    *this = ::std::move(from);
  }

  inline TDUnUse& operator=(const TDUnUse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDUnUse& operator=(TDUnUse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDUnUse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDUnUse* internal_default_instance() {
    return reinterpret_cast<const TDUnUse*>(
               &_TDUnUse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    307;

  friend void swap(TDUnUse& a, TDUnUse& b) {
    a.Swap(&b);
  }
  inline void Swap(TDUnUse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDUnUse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDUnUse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDUnUse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDUnUse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDUnUse& from) {
    TDUnUse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDUnUse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDUnUse";
  }
  protected:
  explicit TDUnUse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kId1FieldNumber = 1,
    kId2FieldNumber = 2,
    kId3FieldNumber = 3,
    kItemGroup1FieldNumber = 4,
    kItemGroup2FieldNumber = 5,
  };
  // .msg.TDItemId Id1 = 1;
  bool has_id1() const;
  private:
  bool _internal_has_id1() const;
  public:
  void clear_id1();
  const ::msg::TDItemId& id1() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_id1();
  ::msg::TDItemId* mutable_id1();
  void set_allocated_id1(::msg::TDItemId* id1);
  private:
  const ::msg::TDItemId& _internal_id1() const;
  ::msg::TDItemId* _internal_mutable_id1();
  public:
  void unsafe_arena_set_allocated_id1(
      ::msg::TDItemId* id1);
  ::msg::TDItemId* unsafe_arena_release_id1();

  // .msg.TDItemId Id2 = 2;
  bool has_id2() const;
  private:
  bool _internal_has_id2() const;
  public:
  void clear_id2();
  const ::msg::TDItemId& id2() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_id2();
  ::msg::TDItemId* mutable_id2();
  void set_allocated_id2(::msg::TDItemId* id2);
  private:
  const ::msg::TDItemId& _internal_id2() const;
  ::msg::TDItemId* _internal_mutable_id2();
  public:
  void unsafe_arena_set_allocated_id2(
      ::msg::TDItemId* id2);
  ::msg::TDItemId* unsafe_arena_release_id2();

  // .msg.TDItemId Id3 = 3;
  bool has_id3() const;
  private:
  bool _internal_has_id3() const;
  public:
  void clear_id3();
  const ::msg::TDItemId& id3() const;
  PROTOBUF_NODISCARD ::msg::TDItemId* release_id3();
  ::msg::TDItemId* mutable_id3();
  void set_allocated_id3(::msg::TDItemId* id3);
  private:
  const ::msg::TDItemId& _internal_id3() const;
  ::msg::TDItemId* _internal_mutable_id3();
  public:
  void unsafe_arena_set_allocated_id3(
      ::msg::TDItemId* id3);
  ::msg::TDItemId* unsafe_arena_release_id3();

  // .msg.TDItemGroup ItemGroup1 = 4;
  bool has_itemgroup1() const;
  private:
  bool _internal_has_itemgroup1() const;
  public:
  void clear_itemgroup1();
  const ::msg::TDItemGroup& itemgroup1() const;
  PROTOBUF_NODISCARD ::msg::TDItemGroup* release_itemgroup1();
  ::msg::TDItemGroup* mutable_itemgroup1();
  void set_allocated_itemgroup1(::msg::TDItemGroup* itemgroup1);
  private:
  const ::msg::TDItemGroup& _internal_itemgroup1() const;
  ::msg::TDItemGroup* _internal_mutable_itemgroup1();
  public:
  void unsafe_arena_set_allocated_itemgroup1(
      ::msg::TDItemGroup* itemgroup1);
  ::msg::TDItemGroup* unsafe_arena_release_itemgroup1();

  // .msg.TDItemGroup ItemGroup2 = 5;
  bool has_itemgroup2() const;
  private:
  bool _internal_has_itemgroup2() const;
  public:
  void clear_itemgroup2();
  const ::msg::TDItemGroup& itemgroup2() const;
  PROTOBUF_NODISCARD ::msg::TDItemGroup* release_itemgroup2();
  ::msg::TDItemGroup* mutable_itemgroup2();
  void set_allocated_itemgroup2(::msg::TDItemGroup* itemgroup2);
  private:
  const ::msg::TDItemGroup& _internal_itemgroup2() const;
  ::msg::TDItemGroup* _internal_mutable_itemgroup2();
  public:
  void unsafe_arena_set_allocated_itemgroup2(
      ::msg::TDItemGroup* itemgroup2);
  ::msg::TDItemGroup* unsafe_arena_release_itemgroup2();

  // @@protoc_insertion_point(class_scope:msg.TDUnUse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::TDItemId* id1_;
    ::msg::TDItemId* id2_;
    ::msg::TDItemId* id3_;
    ::msg::TDItemGroup* itemgroup1_;
    ::msg::TDItemGroup* itemgroup2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TDItemId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDItemId) */ {
 public:
  inline TDItemId() : TDItemId(nullptr) {}
  ~TDItemId() override;
  explicit PROTOBUF_CONSTEXPR TDItemId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDItemId(const TDItemId& from);
  TDItemId(TDItemId&& from) noexcept
    : TDItemId() {
    *this = ::std::move(from);
  }

  inline TDItemId& operator=(const TDItemId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDItemId& operator=(TDItemId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDItemId& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDItemId* internal_default_instance() {
    return reinterpret_cast<const TDItemId*>(
               &_TDItemId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    308;

  friend void swap(TDItemId& a, TDItemId& b) {
    a.Swap(&b);
  }
  inline void Swap(TDItemId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDItemId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDItemId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDItemId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDItemId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDItemId& from) {
    TDItemId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDItemId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDItemId";
  }
  protected:
  explicit TDItemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDItemId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TDItem_EquipmentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TDItem_EquipmentsEntry_DoNotUse, 
    std::string, ::msg::TDItemId,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TDItem_EquipmentsEntry_DoNotUse, 
    std::string, ::msg::TDItemId,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TDItem_EquipmentsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TDItem_EquipmentsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TDItem_EquipmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TDItem_EquipmentsEntry_DoNotUse& other);
  static const TDItem_EquipmentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TDItem_EquipmentsEntry_DoNotUse*>(&_TDItem_EquipmentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "msg.TDItem.EquipmentsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class TDItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.TDItem) */ {
 public:
  inline TDItem() : TDItem(nullptr) {}
  ~TDItem() override;
  explicit PROTOBUF_CONSTEXPR TDItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDItem(const TDItem& from);
  TDItem(TDItem&& from) noexcept
    : TDItem() {
    *this = ::std::move(from);
  }

  inline TDItem& operator=(const TDItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDItem& operator=(TDItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDItem* internal_default_instance() {
    return reinterpret_cast<const TDItem*>(
               &_TDItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    310;

  friend void swap(TDItem& a, TDItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TDItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDItem& from) {
    TDItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.TDItem";
  }
  protected:
  explicit TDItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentsFieldNumber = 5,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kTalentLevelFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // map<string, .msg.TDItemId> Equipments = 5;
  int equipments_size() const;
  private:
  int _internal_equipments_size() const;
  public:
  void clear_equipments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >&
      _internal_equipments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >*
      _internal_mutable_equipments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >&
      equipments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >*
      mutable_equipments();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 TalentLevel = 3;
  void clear_talentlevel();
  int32_t talentlevel() const;
  void set_talentlevel(int32_t value);
  private:
  int32_t _internal_talentlevel() const;
  void _internal_set_talentlevel(int32_t value);
  public:

  // int32 Count = 4;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.TDItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TDItem_EquipmentsEntry_DoNotUse,
        std::string, ::msg::TDItemId,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> equipments_;
    int32_t id_;
    int32_t level_;
    int32_t talentlevel_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class AddRecommendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AddRecommendData) */ {
 public:
  inline AddRecommendData() : AddRecommendData(nullptr) {}
  ~AddRecommendData() override;
  explicit PROTOBUF_CONSTEXPR AddRecommendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRecommendData(const AddRecommendData& from);
  AddRecommendData(AddRecommendData&& from) noexcept
    : AddRecommendData() {
    *this = ::std::move(from);
  }

  inline AddRecommendData& operator=(const AddRecommendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecommendData& operator=(AddRecommendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecommendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecommendData* internal_default_instance() {
    return reinterpret_cast<const AddRecommendData*>(
               &_AddRecommendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    311;

  friend void swap(AddRecommendData& a, AddRecommendData& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecommendData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecommendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecommendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecommendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRecommendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRecommendData& from) {
    AddRecommendData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRecommendData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AddRecommendData";
  }
  protected:
  explicit AddRecommendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMmrFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // string PlayerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_NODISCARD std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // uint32 Mmr = 2;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 Level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AddRecommendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
    uint32_t mmr_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerMentorShipInfo_TasksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerMentorShipInfo_TasksEntry_DoNotUse, 
    uint32_t, ::msg::CSDTTaskItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlayerMentorShipInfo_TasksEntry_DoNotUse, 
    uint32_t, ::msg::CSDTTaskItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PlayerMentorShipInfo_TasksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PlayerMentorShipInfo_TasksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PlayerMentorShipInfo_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlayerMentorShipInfo_TasksEntry_DoNotUse& other);
  static const PlayerMentorShipInfo_TasksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerMentorShipInfo_TasksEntry_DoNotUse*>(&_PlayerMentorShipInfo_TasksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class PlayerMentorShipInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerMentorShipInfo) */ {
 public:
  inline PlayerMentorShipInfo() : PlayerMentorShipInfo(nullptr) {}
  ~PlayerMentorShipInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerMentorShipInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMentorShipInfo(const PlayerMentorShipInfo& from);
  PlayerMentorShipInfo(PlayerMentorShipInfo&& from) noexcept
    : PlayerMentorShipInfo() {
    *this = ::std::move(from);
  }

  inline PlayerMentorShipInfo& operator=(const PlayerMentorShipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMentorShipInfo& operator=(PlayerMentorShipInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMentorShipInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMentorShipInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerMentorShipInfo*>(
               &_PlayerMentorShipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    313;

  friend void swap(PlayerMentorShipInfo& a, PlayerMentorShipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMentorShipInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMentorShipInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMentorShipInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerMentorShipInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMentorShipInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerMentorShipInfo& from) {
    PlayerMentorShipInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMentorShipInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerMentorShipInfo";
  }
  protected:
  explicit PlayerMentorShipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 8,
    kMentorIdFieldNumber = 2,
    kSignFieldNumber = 3,
    kIsMentorFieldNumber = 1,
    kInviteSwitchFieldNumber = 4,
    kIsGraduateFieldNumber = 7,
    kTagFieldNumber = 5,
    kPunishTimeFieldNumber = 6,
    kInviteTimesFieldNumber = 9,
  };
  // map<uint32, .msg.CSDTTaskItem> Tasks = 8;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
      _internal_tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
      _internal_mutable_tasks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
      tasks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
      mutable_tasks();

  // string MentorId = 2;
  void clear_mentorid();
  const std::string& mentorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mentorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mentorid();
  PROTOBUF_NODISCARD std::string* release_mentorid();
  void set_allocated_mentorid(std::string* mentorid);
  private:
  const std::string& _internal_mentorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mentorid(const std::string& value);
  std::string* _internal_mutable_mentorid();
  public:

  // string Sign = 3;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bool IsMentor = 1;
  void clear_ismentor();
  bool ismentor() const;
  void set_ismentor(bool value);
  private:
  bool _internal_ismentor() const;
  void _internal_set_ismentor(bool value);
  public:

  // bool InviteSwitch = 4;
  void clear_inviteswitch();
  bool inviteswitch() const;
  void set_inviteswitch(bool value);
  private:
  bool _internal_inviteswitch() const;
  void _internal_set_inviteswitch(bool value);
  public:

  // bool IsGraduate = 7;
  void clear_isgraduate();
  bool isgraduate() const;
  void set_isgraduate(bool value);
  private:
  bool _internal_isgraduate() const;
  void _internal_set_isgraduate(bool value);
  public:

  // uint32 Tag = 5;
  void clear_tag();
  uint32_t tag() const;
  void set_tag(uint32_t value);
  private:
  uint32_t _internal_tag() const;
  void _internal_set_tag(uint32_t value);
  public:

  // int64 PunishTime = 6;
  void clear_punishtime();
  int64_t punishtime() const;
  void set_punishtime(int64_t value);
  private:
  int64_t _internal_punishtime() const;
  void _internal_set_punishtime(int64_t value);
  public:

  // uint32 InviteTimes = 9;
  void clear_invitetimes();
  uint32_t invitetimes() const;
  void set_invitetimes(uint32_t value);
  private:
  uint32_t _internal_invitetimes() const;
  void _internal_set_invitetimes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerMentorShipInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PlayerMentorShipInfo_TasksEntry_DoNotUse,
        uint32_t, ::msg::CSDTTaskItem,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tasks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mentorid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    bool ismentor_;
    bool inviteswitch_;
    bool isgraduate_;
    uint32_t tag_;
    int64_t punishtime_;
    uint32_t invitetimes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMentorRecommendPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMentorRecommendPlayer) */ {
 public:
  inline CSDTMentorRecommendPlayer() : CSDTMentorRecommendPlayer(nullptr) {}
  ~CSDTMentorRecommendPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSDTMentorRecommendPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMentorRecommendPlayer(const CSDTMentorRecommendPlayer& from);
  CSDTMentorRecommendPlayer(CSDTMentorRecommendPlayer&& from) noexcept
    : CSDTMentorRecommendPlayer() {
    *this = ::std::move(from);
  }

  inline CSDTMentorRecommendPlayer& operator=(const CSDTMentorRecommendPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMentorRecommendPlayer& operator=(CSDTMentorRecommendPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMentorRecommendPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMentorRecommendPlayer* internal_default_instance() {
    return reinterpret_cast<const CSDTMentorRecommendPlayer*>(
               &_CSDTMentorRecommendPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    314;

  friend void swap(CSDTMentorRecommendPlayer& a, CSDTMentorRecommendPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMentorRecommendPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMentorRecommendPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMentorRecommendPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMentorRecommendPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMentorRecommendPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMentorRecommendPlayer& from) {
    CSDTMentorRecommendPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMentorRecommendPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMentorRecommendPlayer";
  }
  protected:
  explicit CSDTMentorRecommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string PlayerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_NODISCARD std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMentorRecommendPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PFDTTaskDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PFDTTaskDetail) */ {
 public:
  inline PFDTTaskDetail() : PFDTTaskDetail(nullptr) {}
  ~PFDTTaskDetail() override;
  explicit PROTOBUF_CONSTEXPR PFDTTaskDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PFDTTaskDetail(const PFDTTaskDetail& from);
  PFDTTaskDetail(PFDTTaskDetail&& from) noexcept
    : PFDTTaskDetail() {
    *this = ::std::move(from);
  }

  inline PFDTTaskDetail& operator=(const PFDTTaskDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline PFDTTaskDetail& operator=(PFDTTaskDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PFDTTaskDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const PFDTTaskDetail* internal_default_instance() {
    return reinterpret_cast<const PFDTTaskDetail*>(
               &_PFDTTaskDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    315;

  friend void swap(PFDTTaskDetail& a, PFDTTaskDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(PFDTTaskDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PFDTTaskDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PFDTTaskDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PFDTTaskDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PFDTTaskDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PFDTTaskDetail& from) {
    PFDTTaskDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PFDTTaskDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PFDTTaskDetail";
  }
  protected:
  explicit PFDTTaskDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaFieldNumber = 2,
    kModeFieldNumber = 3,
    kCondTypeFieldNumber = 1,
  };
  // repeated int32 Para = 2;
  int para_size() const;
  private:
  int _internal_para_size() const;
  public:
  void clear_para();
  private:
  int32_t _internal_para(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_para() const;
  void _internal_add_para(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_para();
  public:
  int32_t para(int index) const;
  void set_para(int index, int32_t value);
  void add_para(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      para() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_para();

  // string Mode = 3;
  void clear_mode();
  const std::string& mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // .msg.CONDTYPE CondType = 1;
  void clear_condtype();
  ::msg::CONDTYPE condtype() const;
  void set_condtype(::msg::CONDTYPE value);
  private:
  ::msg::CONDTYPE _internal_condtype() const;
  void _internal_set_condtype(::msg::CONDTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PFDTTaskDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > para_;
    mutable std::atomic<int> _para_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
    int condtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSDTMentorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTMentorInfo) */ {
 public:
  inline CSDTMentorInfo() : CSDTMentorInfo(nullptr) {}
  ~CSDTMentorInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTMentorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTMentorInfo(const CSDTMentorInfo& from);
  CSDTMentorInfo(CSDTMentorInfo&& from) noexcept
    : CSDTMentorInfo() {
    *this = ::std::move(from);
  }

  inline CSDTMentorInfo& operator=(const CSDTMentorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTMentorInfo& operator=(CSDTMentorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTMentorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTMentorInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTMentorInfo*>(
               &_CSDTMentorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    316;

  friend void swap(CSDTMentorInfo& a, CSDTMentorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTMentorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTMentorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTMentorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTMentorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTMentorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTMentorInfo& from) {
    CSDTMentorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTMentorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTMentorInfo";
  }
  protected:
  explicit CSDTMentorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // .msg.MENTORLEVEL Level = 1;
  void clear_level();
  ::msg::MENTORLEVEL level() const;
  void set_level(::msg::MENTORLEVEL value);
  private:
  ::msg::MENTORLEVEL _internal_level() const;
  void _internal_set_level(::msg::MENTORLEVEL value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTMentorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OBPassThroughData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OBPassThroughData) */ {
 public:
  inline OBPassThroughData() : OBPassThroughData(nullptr) {}
  ~OBPassThroughData() override;
  explicit PROTOBUF_CONSTEXPR OBPassThroughData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OBPassThroughData(const OBPassThroughData& from);
  OBPassThroughData(OBPassThroughData&& from) noexcept
    : OBPassThroughData() {
    *this = ::std::move(from);
  }

  inline OBPassThroughData& operator=(const OBPassThroughData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBPassThroughData& operator=(OBPassThroughData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OBPassThroughData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OBPassThroughData* internal_default_instance() {
    return reinterpret_cast<const OBPassThroughData*>(
               &_OBPassThroughData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    317;

  friend void swap(OBPassThroughData& a, OBPassThroughData& b) {
    a.Swap(&b);
  }
  inline void Swap(OBPassThroughData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBPassThroughData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OBPassThroughData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OBPassThroughData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OBPassThroughData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OBPassThroughData& from) {
    OBPassThroughData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OBPassThroughData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OBPassThroughData";
  }
  protected:
  explicit OBPassThroughData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPvPPlayerIdFieldNumber = 3,
    kObPlayerIdFieldNumber = 4,
    kTypeFieldNumber = 1,
    kRoundFieldNumber = 2,
  };
  // string PvPPlayerId = 3;
  void clear_pvpplayerid();
  const std::string& pvpplayerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvpplayerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvpplayerid();
  PROTOBUF_NODISCARD std::string* release_pvpplayerid();
  void set_allocated_pvpplayerid(std::string* pvpplayerid);
  private:
  const std::string& _internal_pvpplayerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvpplayerid(const std::string& value);
  std::string* _internal_mutable_pvpplayerid();
  public:

  // string ObPlayerId = 4;
  void clear_obplayerid();
  const std::string& obplayerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obplayerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obplayerid();
  PROTOBUF_NODISCARD std::string* release_obplayerid();
  void set_allocated_obplayerid(std::string* obplayerid);
  private:
  const std::string& _internal_obplayerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obplayerid(const std::string& value);
  std::string* _internal_mutable_obplayerid();
  public:

  // .msg.KERNELJSONTYPE Type = 1;
  void clear_type();
  ::msg::KERNELJSONTYPE type() const;
  void set_type(::msg::KERNELJSONTYPE value);
  private:
  ::msg::KERNELJSONTYPE _internal_type() const;
  void _internal_set_type(::msg::KERNELJSONTYPE value);
  public:

  // uint32 Round = 2;
  void clear_round();
  uint32_t round() const;
  void set_round(uint32_t value);
  private:
  uint32_t _internal_round() const;
  void _internal_set_round(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.OBPassThroughData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvpplayerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obplayerid_;
    int type_;
    uint32_t round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class HistoryMaxCupMmr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.HistoryMaxCupMmr) */ {
 public:
  inline HistoryMaxCupMmr() : HistoryMaxCupMmr(nullptr) {}
  ~HistoryMaxCupMmr() override;
  explicit PROTOBUF_CONSTEXPR HistoryMaxCupMmr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoryMaxCupMmr(const HistoryMaxCupMmr& from);
  HistoryMaxCupMmr(HistoryMaxCupMmr&& from) noexcept
    : HistoryMaxCupMmr() {
    *this = ::std::move(from);
  }

  inline HistoryMaxCupMmr& operator=(const HistoryMaxCupMmr& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryMaxCupMmr& operator=(HistoryMaxCupMmr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoryMaxCupMmr& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoryMaxCupMmr* internal_default_instance() {
    return reinterpret_cast<const HistoryMaxCupMmr*>(
               &_HistoryMaxCupMmr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    318;

  friend void swap(HistoryMaxCupMmr& a, HistoryMaxCupMmr& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryMaxCupMmr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryMaxCupMmr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryMaxCupMmr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HistoryMaxCupMmr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HistoryMaxCupMmr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HistoryMaxCupMmr& from) {
    HistoryMaxCupMmr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryMaxCupMmr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.HistoryMaxCupMmr";
  }
  protected:
  explicit HistoryMaxCupMmr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kMmrFieldNumber = 2,
    kPeriodFieldNumber = 3,
  };
  // .msg.PVPMODE Mode = 1;
  void clear_mode();
  ::msg::PVPMODE mode() const;
  void set_mode(::msg::PVPMODE value);
  private:
  ::msg::PVPMODE _internal_mode() const;
  void _internal_set_mode(::msg::PVPMODE value);
  public:

  // uint32 Mmr = 2;
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // uint32 Period = 3;
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.HistoryMaxCupMmr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int mode_;
    uint32_t mmr_;
    uint32_t period_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpChat_ShowItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSNtfPvpChat_ShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CSNtfPvpChat_ShowItemsEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  CSNtfPvpChat_ShowItemsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CSNtfPvpChat_ShowItemsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CSNtfPvpChat_ShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CSNtfPvpChat_ShowItemsEntry_DoNotUse& other);
  static const CSNtfPvpChat_ShowItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CSNtfPvpChat_ShowItemsEntry_DoNotUse*>(&_CSNtfPvpChat_ShowItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CSNtfPvpChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpChat) */ {
 public:
  inline CSNtfPvpChat() : CSNtfPvpChat(nullptr) {}
  ~CSNtfPvpChat() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpChat(const CSNtfPvpChat& from);
  CSNtfPvpChat(CSNtfPvpChat&& from) noexcept
    : CSNtfPvpChat() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpChat& operator=(const CSNtfPvpChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpChat& operator=(CSNtfPvpChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpChat* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpChat*>(
               &_CSNtfPvpChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    320;

  friend void swap(CSNtfPvpChat& a, CSNtfPvpChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpChat& from) {
    CSNtfPvpChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpChat";
  }
  protected:
  explicit CSNtfPvpChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kShowItemsFieldNumber = 11,
    kPassportTypeIdsFieldNumber = 16,
    kIdFieldNumber = 1,
    kContentFieldNumber = 2,
    kUserNameFieldNumber = 8,
    kCountryFieldNumber = 10,
    kChannelUsrIdFieldNumber = 18,
    kGuildNameFieldNumber = 21,
    kEmotionFieldNumber = 3,
    kLevelFieldNumber = 4,
    kChatTypeFieldNumber = 5,
    kIndexFieldNumber = 6,
    kQuickChatFieldNumber = 7,
    kHeadPicFieldNumber = 9,
    kTimestampFieldNumber = 14,
    kProvinceFieldNumber = 13,
    kPlatformFieldNumber = 15,
    kIsWatcherFieldNumber = 12,
    kPS4OnlyFieldNumber = 19,
    kChannelTypeFieldNumber = 17,
    kRestrictTypeFieldNumber = 20,
    kGuildSignFieldNumber = 22,
    kSourceTypeFieldNumber = 23,
    kExchangeStateFieldNumber = 24,
  };
  // map<uint32, uint32> ShowItems = 11;
  int showitems_size() const;
  private:
  int _internal_showitems_size() const;
  public:
  void clear_showitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_showitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_showitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      showitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_showitems();

  // repeated uint32 PassportTypeIds = 16;
  int passporttypeids_size() const;
  private:
  int _internal_passporttypeids_size() const;
  public:
  void clear_passporttypeids();
  private:
  uint32_t _internal_passporttypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passporttypeids() const;
  void _internal_add_passporttypeids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passporttypeids();
  public:
  uint32_t passporttypeids(int index) const;
  void set_passporttypeids(int index, uint32_t value);
  void add_passporttypeids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passporttypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passporttypeids();

  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string UserName = 8;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Country = 10;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string ChannelUsrId = 18;
  void clear_channelusrid();
  const std::string& channelusrid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channelusrid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channelusrid();
  PROTOBUF_NODISCARD std::string* release_channelusrid();
  void set_allocated_channelusrid(std::string* channelusrid);
  private:
  const std::string& _internal_channelusrid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channelusrid(const std::string& value);
  std::string* _internal_mutable_channelusrid();
  public:

  // string GuildName = 21;
  void clear_guildname();
  const std::string& guildname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guildname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guildname();
  PROTOBUF_NODISCARD std::string* release_guildname();
  void set_allocated_guildname(std::string* guildname);
  private:
  const std::string& _internal_guildname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guildname(const std::string& value);
  std::string* _internal_mutable_guildname();
  public:

  // uint32 Emotion = 3;
  void clear_emotion();
  uint32_t emotion() const;
  void set_emotion(uint32_t value);
  private:
  uint32_t _internal_emotion() const;
  void _internal_set_emotion(uint32_t value);
  public:

  // uint32 Level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // .msg.CHATTYPE ChatType = 5;
  void clear_chattype();
  ::msg::CHATTYPE chattype() const;
  void set_chattype(::msg::CHATTYPE value);
  private:
  ::msg::CHATTYPE _internal_chattype() const;
  void _internal_set_chattype(::msg::CHATTYPE value);
  public:

  // uint32 Index = 6;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // int32 QuickChat = 7;
  void clear_quickchat();
  int32_t quickchat() const;
  void set_quickchat(int32_t value);
  private:
  int32_t _internal_quickchat() const;
  void _internal_set_quickchat(int32_t value);
  public:

  // uint32 HeadPic = 9;
  void clear_headpic();
  uint32_t headpic() const;
  void set_headpic(uint32_t value);
  private:
  uint32_t _internal_headpic() const;
  void _internal_set_headpic(uint32_t value);
  public:

  // int64 Timestamp = 14;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // uint32 Province = 13;
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // .msg.PLATFORMTYPE Platform = 15;
  void clear_platform();
  ::msg::PLATFORMTYPE platform() const;
  void set_platform(::msg::PLATFORMTYPE value);
  private:
  ::msg::PLATFORMTYPE _internal_platform() const;
  void _internal_set_platform(::msg::PLATFORMTYPE value);
  public:

  // bool IsWatcher = 12;
  void clear_iswatcher();
  bool iswatcher() const;
  void set_iswatcher(bool value);
  private:
  bool _internal_iswatcher() const;
  void _internal_set_iswatcher(bool value);
  public:

  // bool PS4Only = 19;
  void clear_ps4only();
  bool ps4only() const;
  void set_ps4only(bool value);
  private:
  bool _internal_ps4only() const;
  void _internal_set_ps4only(bool value);
  public:

  // .msg.CHANELTYPE ChannelType = 17;
  void clear_channeltype();
  ::msg::CHANELTYPE channeltype() const;
  void set_channeltype(::msg::CHANELTYPE value);
  private:
  ::msg::CHANELTYPE _internal_channeltype() const;
  void _internal_set_channeltype(::msg::CHANELTYPE value);
  public:

  // .msg.UserRestrictType RestrictType = 20;
  void clear_restricttype();
  ::msg::UserRestrictType restricttype() const;
  void set_restricttype(::msg::UserRestrictType value);
  private:
  ::msg::UserRestrictType _internal_restricttype() const;
  void _internal_set_restricttype(::msg::UserRestrictType value);
  public:

  // int32 GuildSign = 22;
  void clear_guildsign();
  int32_t guildsign() const;
  void set_guildsign(int32_t value);
  private:
  int32_t _internal_guildsign() const;
  void _internal_set_guildsign(int32_t value);
  public:

  // .msg.CHATSOURCETYPE SourceType = 23;
  void clear_sourcetype();
  ::msg::CHATSOURCETYPE sourcetype() const;
  void set_sourcetype(::msg::CHATSOURCETYPE value);
  private:
  ::msg::CHATSOURCETYPE _internal_sourcetype() const;
  void _internal_set_sourcetype(::msg::CHATSOURCETYPE value);
  public:

  // .msg.EXCHANGESTATE ExchangeState = 24;
  void clear_exchangestate();
  ::msg::EXCHANGESTATE exchangestate() const;
  void set_exchangestate(::msg::EXCHANGESTATE value);
  private:
  ::msg::EXCHANGESTATE _internal_exchangestate() const;
  void _internal_set_exchangestate(::msg::EXCHANGESTATE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CSNtfPvpChat_ShowItemsEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> showitems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passporttypeids_;
    mutable std::atomic<int> _passporttypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelusrid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guildname_;
    uint32_t emotion_;
    uint32_t level_;
    int chattype_;
    uint32_t index_;
    int32_t quickchat_;
    uint32_t headpic_;
    int64_t timestamp_;
    uint32_t province_;
    int platform_;
    bool iswatcher_;
    bool ps4only_;
    int channeltype_;
    int restricttype_;
    int32_t guildsign_;
    int sourcetype_;
    int exchangestate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PlayerObServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerObServerInfo) */ {
 public:
  inline PlayerObServerInfo() : PlayerObServerInfo(nullptr) {}
  ~PlayerObServerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerObServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerObServerInfo(const PlayerObServerInfo& from);
  PlayerObServerInfo(PlayerObServerInfo&& from) noexcept
    : PlayerObServerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerObServerInfo& operator=(const PlayerObServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerObServerInfo& operator=(PlayerObServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerObServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerObServerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerObServerInfo*>(
               &_PlayerObServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    321;

  friend void swap(PlayerObServerInfo& a, PlayerObServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerObServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerObServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerObServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerObServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerObServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerObServerInfo& from) {
    PlayerObServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerObServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerObServerInfo";
  }
  protected:
  explicit PlayerObServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObplayerIdFieldNumber = 3,
    kPvpIdFieldNumber = 1,
    kObSvrIdFieldNumber = 2,
    kPvpSvrIdFieldNumber = 4,
  };
  // string ObplayerId = 3;
  void clear_obplayerid();
  const std::string& obplayerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obplayerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obplayerid();
  PROTOBUF_NODISCARD std::string* release_obplayerid();
  void set_allocated_obplayerid(std::string* obplayerid);
  private:
  const std::string& _internal_obplayerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obplayerid(const std::string& value);
  std::string* _internal_mutable_obplayerid();
  public:

  // uint64 PvpId = 1;
  void clear_pvpid();
  uint64_t pvpid() const;
  void set_pvpid(uint64_t value);
  private:
  uint64_t _internal_pvpid() const;
  void _internal_set_pvpid(uint64_t value);
  public:

  // uint32 ObSvrId = 2;
  void clear_obsvrid();
  uint32_t obsvrid() const;
  void set_obsvrid(uint32_t value);
  private:
  uint32_t _internal_obsvrid() const;
  void _internal_set_obsvrid(uint32_t value);
  public:

  // uint32 PvpSvrId = 4;
  void clear_pvpsvrid();
  uint32_t pvpsvrid() const;
  void set_pvpsvrid(uint32_t value);
  private:
  uint32_t _internal_pvpsvrid() const;
  void _internal_set_pvpsvrid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerObServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obplayerid_;
    uint64_t pvpid_;
    uint32_t obsvrid_;
    uint32_t pvpsvrid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BountySetting

// int32 CurrencyId = 1;
inline void BountySetting::clear_currencyid() {
  _impl_.currencyid_ = 0;
}
inline int32_t BountySetting::_internal_currencyid() const {
  return _impl_.currencyid_;
}
inline int32_t BountySetting::currencyid() const {
  // @@protoc_insertion_point(field_get:msg.BountySetting.CurrencyId)
  return _internal_currencyid();
}
inline void BountySetting::_internal_set_currencyid(int32_t value) {
  
  _impl_.currencyid_ = value;
}
inline void BountySetting::set_currencyid(int32_t value) {
  _internal_set_currencyid(value);
  // @@protoc_insertion_point(field_set:msg.BountySetting.CurrencyId)
}

// int32 CurrencyMin = 2;
inline void BountySetting::clear_currencymin() {
  _impl_.currencymin_ = 0;
}
inline int32_t BountySetting::_internal_currencymin() const {
  return _impl_.currencymin_;
}
inline int32_t BountySetting::currencymin() const {
  // @@protoc_insertion_point(field_get:msg.BountySetting.CurrencyMin)
  return _internal_currencymin();
}
inline void BountySetting::_internal_set_currencymin(int32_t value) {
  
  _impl_.currencymin_ = value;
}
inline void BountySetting::set_currencymin(int32_t value) {
  _internal_set_currencymin(value);
  // @@protoc_insertion_point(field_set:msg.BountySetting.CurrencyMin)
}

// int32 CurrencyMax = 3;
inline void BountySetting::clear_currencymax() {
  _impl_.currencymax_ = 0;
}
inline int32_t BountySetting::_internal_currencymax() const {
  return _impl_.currencymax_;
}
inline int32_t BountySetting::currencymax() const {
  // @@protoc_insertion_point(field_get:msg.BountySetting.CurrencyMax)
  return _internal_currencymax();
}
inline void BountySetting::_internal_set_currencymax(int32_t value) {
  
  _impl_.currencymax_ = value;
}
inline void BountySetting::set_currencymax(int32_t value) {
  _internal_set_currencymax(value);
  // @@protoc_insertion_point(field_set:msg.BountySetting.CurrencyMax)
}

// -------------------------------------------------------------------

// TeamOPSetting

// string pwd = 1;
inline void TeamOPSetting::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
}
inline const std::string& TeamOPSetting::pwd() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPSetting::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.pwd)
}
inline std::string* TeamOPSetting::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSetting.pwd)
  return _s;
}
inline const std::string& TeamOPSetting::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void TeamOPSetting::_internal_set_pwd(const std::string& value) {
  
  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPSetting::_internal_mutable_pwd() {
  
  return _impl_.pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPSetting::release_pwd() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSetting.pwd)
  return _impl_.pwd_.Release();
}
inline void TeamOPSetting::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  _impl_.pwd_.SetAllocated(pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSetting.pwd)
}

// bool pwdOpen = 2;
inline void TeamOPSetting::clear_pwdopen() {
  _impl_.pwdopen_ = false;
}
inline bool TeamOPSetting::_internal_pwdopen() const {
  return _impl_.pwdopen_;
}
inline bool TeamOPSetting::pwdopen() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.pwdOpen)
  return _internal_pwdopen();
}
inline void TeamOPSetting::_internal_set_pwdopen(bool value) {
  
  _impl_.pwdopen_ = value;
}
inline void TeamOPSetting::set_pwdopen(bool value) {
  _internal_set_pwdopen(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.pwdOpen)
}

// bool visible = 3;
inline void TeamOPSetting::clear_visible() {
  _impl_.visible_ = false;
}
inline bool TeamOPSetting::_internal_visible() const {
  return _impl_.visible_;
}
inline bool TeamOPSetting::visible() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.visible)
  return _internal_visible();
}
inline void TeamOPSetting::_internal_set_visible(bool value) {
  
  _impl_.visible_ = value;
}
inline void TeamOPSetting::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.visible)
}

// int32 inviteAuthority = 4;
inline void TeamOPSetting::clear_inviteauthority() {
  _impl_.inviteauthority_ = 0;
}
inline int32_t TeamOPSetting::_internal_inviteauthority() const {
  return _impl_.inviteauthority_;
}
inline int32_t TeamOPSetting::inviteauthority() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.inviteAuthority)
  return _internal_inviteauthority();
}
inline void TeamOPSetting::_internal_set_inviteauthority(int32_t value) {
  
  _impl_.inviteauthority_ = value;
}
inline void TeamOPSetting::set_inviteauthority(int32_t value) {
  _internal_set_inviteauthority(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.inviteAuthority)
}

// .msg.TEAMTYPE teamType = 5;
inline void TeamOPSetting::clear_teamtype() {
  _impl_.teamtype_ = 0;
}
inline ::msg::TEAMTYPE TeamOPSetting::_internal_teamtype() const {
  return static_cast< ::msg::TEAMTYPE >(_impl_.teamtype_);
}
inline ::msg::TEAMTYPE TeamOPSetting::teamtype() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.teamType)
  return _internal_teamtype();
}
inline void TeamOPSetting::_internal_set_teamtype(::msg::TEAMTYPE value) {
  
  _impl_.teamtype_ = value;
}
inline void TeamOPSetting::set_teamtype(::msg::TEAMTYPE value) {
  _internal_set_teamtype(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.teamType)
}

// string name = 6;
inline void TeamOPSetting::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TeamOPSetting::name() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPSetting::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.name)
}
inline std::string* TeamOPSetting::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSetting.name)
  return _s;
}
inline const std::string& TeamOPSetting::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TeamOPSetting::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPSetting::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPSetting::release_name() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSetting.name)
  return _impl_.name_.Release();
}
inline void TeamOPSetting::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSetting.name)
}

// uint32 subMode = 7;
inline void TeamOPSetting::clear_submode() {
  _impl_.submode_ = 0u;
}
inline uint32_t TeamOPSetting::_internal_submode() const {
  return _impl_.submode_;
}
inline uint32_t TeamOPSetting::submode() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.subMode)
  return _internal_submode();
}
inline void TeamOPSetting::_internal_set_submode(uint32_t value) {
  
  _impl_.submode_ = value;
}
inline void TeamOPSetting::set_submode(uint32_t value) {
  _internal_set_submode(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.subMode)
}

// repeated bool lockGroups = 8;
inline int TeamOPSetting::_internal_lockgroups_size() const {
  return _impl_.lockgroups_.size();
}
inline int TeamOPSetting::lockgroups_size() const {
  return _internal_lockgroups_size();
}
inline void TeamOPSetting::clear_lockgroups() {
  _impl_.lockgroups_.Clear();
}
inline bool TeamOPSetting::_internal_lockgroups(int index) const {
  return _impl_.lockgroups_.Get(index);
}
inline bool TeamOPSetting::lockgroups(int index) const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.lockGroups)
  return _internal_lockgroups(index);
}
inline void TeamOPSetting::set_lockgroups(int index, bool value) {
  _impl_.lockgroups_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.lockGroups)
}
inline void TeamOPSetting::_internal_add_lockgroups(bool value) {
  _impl_.lockgroups_.Add(value);
}
inline void TeamOPSetting::add_lockgroups(bool value) {
  _internal_add_lockgroups(value);
  // @@protoc_insertion_point(field_add:msg.TeamOPSetting.lockGroups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TeamOPSetting::_internal_lockgroups() const {
  return _impl_.lockgroups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TeamOPSetting::lockgroups() const {
  // @@protoc_insertion_point(field_list:msg.TeamOPSetting.lockGroups)
  return _internal_lockgroups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TeamOPSetting::_internal_mutable_lockgroups() {
  return &_impl_.lockgroups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TeamOPSetting::mutable_lockgroups() {
  // @@protoc_insertion_point(field_mutable_list:msg.TeamOPSetting.lockGroups)
  return _internal_mutable_lockgroups();
}

// int32 customGameId = 9;
inline void TeamOPSetting::clear_customgameid() {
  _impl_.customgameid_ = 0;
}
inline int32_t TeamOPSetting::_internal_customgameid() const {
  return _impl_.customgameid_;
}
inline int32_t TeamOPSetting::customgameid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.customGameId)
  return _internal_customgameid();
}
inline void TeamOPSetting::_internal_set_customgameid(int32_t value) {
  
  _impl_.customgameid_ = value;
}
inline void TeamOPSetting::set_customgameid(int32_t value) {
  _internal_set_customgameid(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.customGameId)
}

// .msg.WorkshopSetting Workshop = 10;
inline bool TeamOPSetting::_internal_has_workshop() const {
  return this != internal_default_instance() && _impl_.workshop_ != nullptr;
}
inline bool TeamOPSetting::has_workshop() const {
  return _internal_has_workshop();
}
inline void TeamOPSetting::clear_workshop() {
  if (GetArenaForAllocation() == nullptr && _impl_.workshop_ != nullptr) {
    delete _impl_.workshop_;
  }
  _impl_.workshop_ = nullptr;
}
inline const ::msg::WorkshopSetting& TeamOPSetting::_internal_workshop() const {
  const ::msg::WorkshopSetting* p = _impl_.workshop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::WorkshopSetting&>(
      ::msg::_WorkshopSetting_default_instance_);
}
inline const ::msg::WorkshopSetting& TeamOPSetting::workshop() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.Workshop)
  return _internal_workshop();
}
inline void TeamOPSetting::unsafe_arena_set_allocated_workshop(
    ::msg::WorkshopSetting* workshop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshop_);
  }
  _impl_.workshop_ = workshop;
  if (workshop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOPSetting.Workshop)
}
inline ::msg::WorkshopSetting* TeamOPSetting::release_workshop() {
  
  ::msg::WorkshopSetting* temp = _impl_.workshop_;
  _impl_.workshop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::WorkshopSetting* TeamOPSetting::unsafe_arena_release_workshop() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSetting.Workshop)
  
  ::msg::WorkshopSetting* temp = _impl_.workshop_;
  _impl_.workshop_ = nullptr;
  return temp;
}
inline ::msg::WorkshopSetting* TeamOPSetting::_internal_mutable_workshop() {
  
  if (_impl_.workshop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::WorkshopSetting>(GetArenaForAllocation());
    _impl_.workshop_ = p;
  }
  return _impl_.workshop_;
}
inline ::msg::WorkshopSetting* TeamOPSetting::mutable_workshop() {
  ::msg::WorkshopSetting* _msg = _internal_mutable_workshop();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSetting.Workshop)
  return _msg;
}
inline void TeamOPSetting::set_allocated_workshop(::msg::WorkshopSetting* workshop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.workshop_;
  }
  if (workshop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workshop);
    if (message_arena != submessage_arena) {
      workshop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workshop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workshop_ = workshop;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSetting.Workshop)
}

// .msg.BountySetting Bounty = 11;
inline bool TeamOPSetting::_internal_has_bounty() const {
  return this != internal_default_instance() && _impl_.bounty_ != nullptr;
}
inline bool TeamOPSetting::has_bounty() const {
  return _internal_has_bounty();
}
inline void TeamOPSetting::clear_bounty() {
  if (GetArenaForAllocation() == nullptr && _impl_.bounty_ != nullptr) {
    delete _impl_.bounty_;
  }
  _impl_.bounty_ = nullptr;
}
inline const ::msg::BountySetting& TeamOPSetting::_internal_bounty() const {
  const ::msg::BountySetting* p = _impl_.bounty_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::BountySetting&>(
      ::msg::_BountySetting_default_instance_);
}
inline const ::msg::BountySetting& TeamOPSetting::bounty() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.Bounty)
  return _internal_bounty();
}
inline void TeamOPSetting::unsafe_arena_set_allocated_bounty(
    ::msg::BountySetting* bounty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounty_);
  }
  _impl_.bounty_ = bounty;
  if (bounty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOPSetting.Bounty)
}
inline ::msg::BountySetting* TeamOPSetting::release_bounty() {
  
  ::msg::BountySetting* temp = _impl_.bounty_;
  _impl_.bounty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::BountySetting* TeamOPSetting::unsafe_arena_release_bounty() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSetting.Bounty)
  
  ::msg::BountySetting* temp = _impl_.bounty_;
  _impl_.bounty_ = nullptr;
  return temp;
}
inline ::msg::BountySetting* TeamOPSetting::_internal_mutable_bounty() {
  
  if (_impl_.bounty_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::BountySetting>(GetArenaForAllocation());
    _impl_.bounty_ = p;
  }
  return _impl_.bounty_;
}
inline ::msg::BountySetting* TeamOPSetting::mutable_bounty() {
  ::msg::BountySetting* _msg = _internal_mutable_bounty();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSetting.Bounty)
  return _msg;
}
inline void TeamOPSetting::set_allocated_bounty(::msg::BountySetting* bounty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bounty_;
  }
  if (bounty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounty);
    if (message_arena != submessage_arena) {
      bounty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bounty_ = bounty;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSetting.Bounty)
}

// string channelUsrId = 12;
inline void TeamOPSetting::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& TeamOPSetting::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.channelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPSetting::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPSetting.channelUsrId)
}
inline std::string* TeamOPSetting::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSetting.channelUsrId)
  return _s;
}
inline const std::string& TeamOPSetting::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void TeamOPSetting::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPSetting::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPSetting::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSetting.channelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void TeamOPSetting::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSetting.channelUsrId)
}

// .msg.PveSetting PveSetting = 13;
inline bool TeamOPSetting::_internal_has_pvesetting() const {
  return this != internal_default_instance() && _impl_.pvesetting_ != nullptr;
}
inline bool TeamOPSetting::has_pvesetting() const {
  return _internal_has_pvesetting();
}
inline void TeamOPSetting::clear_pvesetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvesetting_ != nullptr) {
    delete _impl_.pvesetting_;
  }
  _impl_.pvesetting_ = nullptr;
}
inline const ::msg::PveSetting& TeamOPSetting::_internal_pvesetting() const {
  const ::msg::PveSetting* p = _impl_.pvesetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PveSetting&>(
      ::msg::_PveSetting_default_instance_);
}
inline const ::msg::PveSetting& TeamOPSetting::pvesetting() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSetting.PveSetting)
  return _internal_pvesetting();
}
inline void TeamOPSetting::unsafe_arena_set_allocated_pvesetting(
    ::msg::PveSetting* pvesetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvesetting_);
  }
  _impl_.pvesetting_ = pvesetting;
  if (pvesetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOPSetting.PveSetting)
}
inline ::msg::PveSetting* TeamOPSetting::release_pvesetting() {
  
  ::msg::PveSetting* temp = _impl_.pvesetting_;
  _impl_.pvesetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PveSetting* TeamOPSetting::unsafe_arena_release_pvesetting() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSetting.PveSetting)
  
  ::msg::PveSetting* temp = _impl_.pvesetting_;
  _impl_.pvesetting_ = nullptr;
  return temp;
}
inline ::msg::PveSetting* TeamOPSetting::_internal_mutable_pvesetting() {
  
  if (_impl_.pvesetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PveSetting>(GetArenaForAllocation());
    _impl_.pvesetting_ = p;
  }
  return _impl_.pvesetting_;
}
inline ::msg::PveSetting* TeamOPSetting::mutable_pvesetting() {
  ::msg::PveSetting* _msg = _internal_mutable_pvesetting();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSetting.PveSetting)
  return _msg;
}
inline void TeamOPSetting::set_allocated_pvesetting(::msg::PveSetting* pvesetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pvesetting_;
  }
  if (pvesetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pvesetting);
    if (message_arena != submessage_arena) {
      pvesetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvesetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvesetting_ = pvesetting;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSetting.PveSetting)
}

// -------------------------------------------------------------------

// WorkshopSetting

// int32 MapId = 1;
inline void WorkshopSetting::clear_mapid() {
  _impl_.mapid_ = 0;
}
inline int32_t WorkshopSetting::_internal_mapid() const {
  return _impl_.mapid_;
}
inline int32_t WorkshopSetting::mapid() const {
  // @@protoc_insertion_point(field_get:msg.WorkshopSetting.MapId)
  return _internal_mapid();
}
inline void WorkshopSetting::_internal_set_mapid(int32_t value) {
  
  _impl_.mapid_ = value;
}
inline void WorkshopSetting::set_mapid(int32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.WorkshopSetting.MapId)
}

// int32 SubMapId = 2;
inline void WorkshopSetting::clear_submapid() {
  _impl_.submapid_ = 0;
}
inline int32_t WorkshopSetting::_internal_submapid() const {
  return _impl_.submapid_;
}
inline int32_t WorkshopSetting::submapid() const {
  // @@protoc_insertion_point(field_get:msg.WorkshopSetting.SubMapId)
  return _internal_submapid();
}
inline void WorkshopSetting::_internal_set_submapid(int32_t value) {
  
  _impl_.submapid_ = value;
}
inline void WorkshopSetting::set_submapid(int32_t value) {
  _internal_set_submapid(value);
  // @@protoc_insertion_point(field_set:msg.WorkshopSetting.SubMapId)
}

// string MapName = 3;
inline void WorkshopSetting::clear_mapname() {
  _impl_.mapname_.ClearToEmpty();
}
inline const std::string& WorkshopSetting::mapname() const {
  // @@protoc_insertion_point(field_get:msg.WorkshopSetting.MapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkshopSetting::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.WorkshopSetting.MapName)
}
inline std::string* WorkshopSetting::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:msg.WorkshopSetting.MapName)
  return _s;
}
inline const std::string& WorkshopSetting::_internal_mapname() const {
  return _impl_.mapname_.Get();
}
inline void WorkshopSetting::_internal_set_mapname(const std::string& value) {
  
  _impl_.mapname_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkshopSetting::_internal_mutable_mapname() {
  
  return _impl_.mapname_.Mutable(GetArenaForAllocation());
}
inline std::string* WorkshopSetting::release_mapname() {
  // @@protoc_insertion_point(field_release:msg.WorkshopSetting.MapName)
  return _impl_.mapname_.Release();
}
inline void WorkshopSetting::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  _impl_.mapname_.SetAllocated(mapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapname_.IsDefault()) {
    _impl_.mapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.WorkshopSetting.MapName)
}

// bool joinAISwitch = 4;
inline void WorkshopSetting::clear_joinaiswitch() {
  _impl_.joinaiswitch_ = false;
}
inline bool WorkshopSetting::_internal_joinaiswitch() const {
  return _impl_.joinaiswitch_;
}
inline bool WorkshopSetting::joinaiswitch() const {
  // @@protoc_insertion_point(field_get:msg.WorkshopSetting.joinAISwitch)
  return _internal_joinaiswitch();
}
inline void WorkshopSetting::_internal_set_joinaiswitch(bool value) {
  
  _impl_.joinaiswitch_ = value;
}
inline void WorkshopSetting::set_joinaiswitch(bool value) {
  _internal_set_joinaiswitch(value);
  // @@protoc_insertion_point(field_set:msg.WorkshopSetting.joinAISwitch)
}

// -------------------------------------------------------------------

// TeamOPChangeGroup

// string pid = 1;
inline void TeamOPChangeGroup::clear_pid() {
  _impl_.pid_.ClearToEmpty();
}
inline const std::string& TeamOPChangeGroup::pid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPChangeGroup.pid)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPChangeGroup::set_pid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPChangeGroup.pid)
}
inline std::string* TeamOPChangeGroup::mutable_pid() {
  std::string* _s = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPChangeGroup.pid)
  return _s;
}
inline const std::string& TeamOPChangeGroup::_internal_pid() const {
  return _impl_.pid_.Get();
}
inline void TeamOPChangeGroup::_internal_set_pid(const std::string& value) {
  
  _impl_.pid_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPChangeGroup::_internal_mutable_pid() {
  
  return _impl_.pid_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPChangeGroup::release_pid() {
  // @@protoc_insertion_point(field_release:msg.TeamOPChangeGroup.pid)
  return _impl_.pid_.Release();
}
inline void TeamOPChangeGroup::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    
  } else {
    
  }
  _impl_.pid_.SetAllocated(pid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPChangeGroup.pid)
}

// int32 groupId = 2;
inline void TeamOPChangeGroup::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t TeamOPChangeGroup::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t TeamOPChangeGroup::groupid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPChangeGroup.groupId)
  return _internal_groupid();
}
inline void TeamOPChangeGroup::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void TeamOPChangeGroup::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPChangeGroup.groupId)
}

// int32 slot = 3;
inline void TeamOPChangeGroup::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t TeamOPChangeGroup::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t TeamOPChangeGroup::slot() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPChangeGroup.slot)
  return _internal_slot();
}
inline void TeamOPChangeGroup::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void TeamOPChangeGroup::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPChangeGroup.slot)
}

// -------------------------------------------------------------------

// TeamOPSelfChangeGroup

// int32 groupId = 1;
inline void TeamOPSelfChangeGroup::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t TeamOPSelfChangeGroup::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t TeamOPSelfChangeGroup::groupid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSelfChangeGroup.groupId)
  return _internal_groupid();
}
inline void TeamOPSelfChangeGroup::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void TeamOPSelfChangeGroup::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSelfChangeGroup.groupId)
}

// int32 slot = 2;
inline void TeamOPSelfChangeGroup::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t TeamOPSelfChangeGroup::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t TeamOPSelfChangeGroup::slot() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSelfChangeGroup.slot)
  return _internal_slot();
}
inline void TeamOPSelfChangeGroup::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void TeamOPSelfChangeGroup::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSelfChangeGroup.slot)
}

// -------------------------------------------------------------------

// TeamOPAppointLeader

// string pid = 1;
inline void TeamOPAppointLeader::clear_pid() {
  _impl_.pid_.ClearToEmpty();
}
inline const std::string& TeamOPAppointLeader::pid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPAppointLeader.pid)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPAppointLeader::set_pid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPAppointLeader.pid)
}
inline std::string* TeamOPAppointLeader::mutable_pid() {
  std::string* _s = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPAppointLeader.pid)
  return _s;
}
inline const std::string& TeamOPAppointLeader::_internal_pid() const {
  return _impl_.pid_.Get();
}
inline void TeamOPAppointLeader::_internal_set_pid(const std::string& value) {
  
  _impl_.pid_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPAppointLeader::_internal_mutable_pid() {
  
  return _impl_.pid_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPAppointLeader::release_pid() {
  // @@protoc_insertion_point(field_release:msg.TeamOPAppointLeader.pid)
  return _impl_.pid_.Release();
}
inline void TeamOPAppointLeader::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    
  } else {
    
  }
  _impl_.pid_.SetAllocated(pid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPAppointLeader.pid)
}

// -------------------------------------------------------------------

// TeamOPChangeName

// string name = 1;
inline void TeamOPChangeName::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TeamOPChangeName::name() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPChangeName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPChangeName::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPChangeName.name)
}
inline std::string* TeamOPChangeName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPChangeName.name)
  return _s;
}
inline const std::string& TeamOPChangeName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TeamOPChangeName::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPChangeName::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPChangeName::release_name() {
  // @@protoc_insertion_point(field_release:msg.TeamOPChangeName.name)
  return _impl_.name_.Release();
}
inline void TeamOPChangeName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPChangeName.name)
}

// -------------------------------------------------------------------

// TeamOPSwitchSlot

// int32 groupOne = 1;
inline void TeamOPSwitchSlot::clear_groupone() {
  _impl_.groupone_ = 0;
}
inline int32_t TeamOPSwitchSlot::_internal_groupone() const {
  return _impl_.groupone_;
}
inline int32_t TeamOPSwitchSlot::groupone() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSwitchSlot.groupOne)
  return _internal_groupone();
}
inline void TeamOPSwitchSlot::_internal_set_groupone(int32_t value) {
  
  _impl_.groupone_ = value;
}
inline void TeamOPSwitchSlot::set_groupone(int32_t value) {
  _internal_set_groupone(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSwitchSlot.groupOne)
}

// int32 groupTwo = 2;
inline void TeamOPSwitchSlot::clear_grouptwo() {
  _impl_.grouptwo_ = 0;
}
inline int32_t TeamOPSwitchSlot::_internal_grouptwo() const {
  return _impl_.grouptwo_;
}
inline int32_t TeamOPSwitchSlot::grouptwo() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSwitchSlot.groupTwo)
  return _internal_grouptwo();
}
inline void TeamOPSwitchSlot::_internal_set_grouptwo(int32_t value) {
  
  _impl_.grouptwo_ = value;
}
inline void TeamOPSwitchSlot::set_grouptwo(int32_t value) {
  _internal_set_grouptwo(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSwitchSlot.groupTwo)
}

// string playerOne = 3;
inline void TeamOPSwitchSlot::clear_playerone() {
  _impl_.playerone_.ClearToEmpty();
}
inline const std::string& TeamOPSwitchSlot::playerone() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSwitchSlot.playerOne)
  return _internal_playerone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPSwitchSlot::set_playerone(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPSwitchSlot.playerOne)
}
inline std::string* TeamOPSwitchSlot::mutable_playerone() {
  std::string* _s = _internal_mutable_playerone();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSwitchSlot.playerOne)
  return _s;
}
inline const std::string& TeamOPSwitchSlot::_internal_playerone() const {
  return _impl_.playerone_.Get();
}
inline void TeamOPSwitchSlot::_internal_set_playerone(const std::string& value) {
  
  _impl_.playerone_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPSwitchSlot::_internal_mutable_playerone() {
  
  return _impl_.playerone_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPSwitchSlot::release_playerone() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSwitchSlot.playerOne)
  return _impl_.playerone_.Release();
}
inline void TeamOPSwitchSlot::set_allocated_playerone(std::string* playerone) {
  if (playerone != nullptr) {
    
  } else {
    
  }
  _impl_.playerone_.SetAllocated(playerone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerone_.IsDefault()) {
    _impl_.playerone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSwitchSlot.playerOne)
}

// string playerTwo = 4;
inline void TeamOPSwitchSlot::clear_playertwo() {
  _impl_.playertwo_.ClearToEmpty();
}
inline const std::string& TeamOPSwitchSlot::playertwo() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSwitchSlot.playerTwo)
  return _internal_playertwo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOPSwitchSlot::set_playertwo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playertwo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOPSwitchSlot.playerTwo)
}
inline std::string* TeamOPSwitchSlot::mutable_playertwo() {
  std::string* _s = _internal_mutable_playertwo();
  // @@protoc_insertion_point(field_mutable:msg.TeamOPSwitchSlot.playerTwo)
  return _s;
}
inline const std::string& TeamOPSwitchSlot::_internal_playertwo() const {
  return _impl_.playertwo_.Get();
}
inline void TeamOPSwitchSlot::_internal_set_playertwo(const std::string& value) {
  
  _impl_.playertwo_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOPSwitchSlot::_internal_mutable_playertwo() {
  
  return _impl_.playertwo_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOPSwitchSlot::release_playertwo() {
  // @@protoc_insertion_point(field_release:msg.TeamOPSwitchSlot.playerTwo)
  return _impl_.playertwo_.Release();
}
inline void TeamOPSwitchSlot::set_allocated_playertwo(std::string* playertwo) {
  if (playertwo != nullptr) {
    
  } else {
    
  }
  _impl_.playertwo_.SetAllocated(playertwo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playertwo_.IsDefault()) {
    _impl_.playertwo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOPSwitchSlot.playerTwo)
}

// int32 slotOne = 5;
inline void TeamOPSwitchSlot::clear_slotone() {
  _impl_.slotone_ = 0;
}
inline int32_t TeamOPSwitchSlot::_internal_slotone() const {
  return _impl_.slotone_;
}
inline int32_t TeamOPSwitchSlot::slotone() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSwitchSlot.slotOne)
  return _internal_slotone();
}
inline void TeamOPSwitchSlot::_internal_set_slotone(int32_t value) {
  
  _impl_.slotone_ = value;
}
inline void TeamOPSwitchSlot::set_slotone(int32_t value) {
  _internal_set_slotone(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSwitchSlot.slotOne)
}

// int32 slotTwo = 6;
inline void TeamOPSwitchSlot::clear_slottwo() {
  _impl_.slottwo_ = 0;
}
inline int32_t TeamOPSwitchSlot::_internal_slottwo() const {
  return _impl_.slottwo_;
}
inline int32_t TeamOPSwitchSlot::slottwo() const {
  // @@protoc_insertion_point(field_get:msg.TeamOPSwitchSlot.slotTwo)
  return _internal_slottwo();
}
inline void TeamOPSwitchSlot::_internal_set_slottwo(int32_t value) {
  
  _impl_.slottwo_ = value;
}
inline void TeamOPSwitchSlot::set_slottwo(int32_t value) {
  _internal_set_slottwo(value);
  // @@protoc_insertion_point(field_set:msg.TeamOPSwitchSlot.slotTwo)
}

// -------------------------------------------------------------------

// TeamBetOnBounty

// int32 Num = 1;
inline void TeamBetOnBounty::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t TeamBetOnBounty::_internal_num() const {
  return _impl_.num_;
}
inline int32_t TeamBetOnBounty::num() const {
  // @@protoc_insertion_point(field_get:msg.TeamBetOnBounty.Num)
  return _internal_num();
}
inline void TeamBetOnBounty::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void TeamBetOnBounty::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:msg.TeamBetOnBounty.Num)
}

// -------------------------------------------------------------------

// TeamOP

// string PID = 1;
inline void TeamOP::clear_pid() {
  _impl_.pid_.ClearToEmpty();
}
inline const std::string& TeamOP::pid() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.PID)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamOP::set_pid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamOP.PID)
}
inline std::string* TeamOP::mutable_pid() {
  std::string* _s = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.PID)
  return _s;
}
inline const std::string& TeamOP::_internal_pid() const {
  return _impl_.pid_.Get();
}
inline void TeamOP::_internal_set_pid(const std::string& value) {
  
  _impl_.pid_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamOP::_internal_mutable_pid() {
  
  return _impl_.pid_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamOP::release_pid() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.PID)
  return _impl_.pid_.Release();
}
inline void TeamOP::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    
  } else {
    
  }
  _impl_.pid_.SetAllocated(pid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.PID)
}

// .msg.TEAMOP type = 2;
inline void TeamOP::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::TEAMOP TeamOP::_internal_type() const {
  return static_cast< ::msg::TEAMOP >(_impl_.type_);
}
inline ::msg::TEAMOP TeamOP::type() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.type)
  return _internal_type();
}
inline void TeamOP::_internal_set_type(::msg::TEAMOP value) {
  
  _impl_.type_ = value;
}
inline void TeamOP::set_type(::msg::TEAMOP value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.TeamOP.type)
}

// .msg.TeamOPSetting setting = 3;
inline bool TeamOP::_internal_has_setting() const {
  return this != internal_default_instance() && _impl_.setting_ != nullptr;
}
inline bool TeamOP::has_setting() const {
  return _internal_has_setting();
}
inline void TeamOP::clear_setting() {
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
}
inline const ::msg::TeamOPSetting& TeamOP::_internal_setting() const {
  const ::msg::TeamOPSetting* p = _impl_.setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamOPSetting&>(
      ::msg::_TeamOPSetting_default_instance_);
}
inline const ::msg::TeamOPSetting& TeamOP::setting() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.setting)
  return _internal_setting();
}
inline void TeamOP::unsafe_arena_set_allocated_setting(
    ::msg::TeamOPSetting* setting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setting_);
  }
  _impl_.setting_ = setting;
  if (setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.setting)
}
inline ::msg::TeamOPSetting* TeamOP::release_setting() {
  
  ::msg::TeamOPSetting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamOPSetting* TeamOP::unsafe_arena_release_setting() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.setting)
  
  ::msg::TeamOPSetting* temp = _impl_.setting_;
  _impl_.setting_ = nullptr;
  return temp;
}
inline ::msg::TeamOPSetting* TeamOP::_internal_mutable_setting() {
  
  if (_impl_.setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamOPSetting>(GetArenaForAllocation());
    _impl_.setting_ = p;
  }
  return _impl_.setting_;
}
inline ::msg::TeamOPSetting* TeamOP::mutable_setting() {
  ::msg::TeamOPSetting* _msg = _internal_mutable_setting();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.setting)
  return _msg;
}
inline void TeamOP::set_allocated_setting(::msg::TeamOPSetting* setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.setting_;
  }
  if (setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setting);
    if (message_arena != submessage_arena) {
      setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setting_ = setting;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.setting)
}

// .msg.TeamOPChangeGroup changeGroup = 4;
inline bool TeamOP::_internal_has_changegroup() const {
  return this != internal_default_instance() && _impl_.changegroup_ != nullptr;
}
inline bool TeamOP::has_changegroup() const {
  return _internal_has_changegroup();
}
inline void TeamOP::clear_changegroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.changegroup_ != nullptr) {
    delete _impl_.changegroup_;
  }
  _impl_.changegroup_ = nullptr;
}
inline const ::msg::TeamOPChangeGroup& TeamOP::_internal_changegroup() const {
  const ::msg::TeamOPChangeGroup* p = _impl_.changegroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamOPChangeGroup&>(
      ::msg::_TeamOPChangeGroup_default_instance_);
}
inline const ::msg::TeamOPChangeGroup& TeamOP::changegroup() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.changeGroup)
  return _internal_changegroup();
}
inline void TeamOP::unsafe_arena_set_allocated_changegroup(
    ::msg::TeamOPChangeGroup* changegroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changegroup_);
  }
  _impl_.changegroup_ = changegroup;
  if (changegroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.changeGroup)
}
inline ::msg::TeamOPChangeGroup* TeamOP::release_changegroup() {
  
  ::msg::TeamOPChangeGroup* temp = _impl_.changegroup_;
  _impl_.changegroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamOPChangeGroup* TeamOP::unsafe_arena_release_changegroup() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.changeGroup)
  
  ::msg::TeamOPChangeGroup* temp = _impl_.changegroup_;
  _impl_.changegroup_ = nullptr;
  return temp;
}
inline ::msg::TeamOPChangeGroup* TeamOP::_internal_mutable_changegroup() {
  
  if (_impl_.changegroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamOPChangeGroup>(GetArenaForAllocation());
    _impl_.changegroup_ = p;
  }
  return _impl_.changegroup_;
}
inline ::msg::TeamOPChangeGroup* TeamOP::mutable_changegroup() {
  ::msg::TeamOPChangeGroup* _msg = _internal_mutable_changegroup();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.changeGroup)
  return _msg;
}
inline void TeamOP::set_allocated_changegroup(::msg::TeamOPChangeGroup* changegroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.changegroup_;
  }
  if (changegroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(changegroup);
    if (message_arena != submessage_arena) {
      changegroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changegroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changegroup_ = changegroup;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.changeGroup)
}

// .msg.TeamOPAppointLeader appointLeader = 5;
inline bool TeamOP::_internal_has_appointleader() const {
  return this != internal_default_instance() && _impl_.appointleader_ != nullptr;
}
inline bool TeamOP::has_appointleader() const {
  return _internal_has_appointleader();
}
inline void TeamOP::clear_appointleader() {
  if (GetArenaForAllocation() == nullptr && _impl_.appointleader_ != nullptr) {
    delete _impl_.appointleader_;
  }
  _impl_.appointleader_ = nullptr;
}
inline const ::msg::TeamOPAppointLeader& TeamOP::_internal_appointleader() const {
  const ::msg::TeamOPAppointLeader* p = _impl_.appointleader_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamOPAppointLeader&>(
      ::msg::_TeamOPAppointLeader_default_instance_);
}
inline const ::msg::TeamOPAppointLeader& TeamOP::appointleader() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.appointLeader)
  return _internal_appointleader();
}
inline void TeamOP::unsafe_arena_set_allocated_appointleader(
    ::msg::TeamOPAppointLeader* appointleader) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appointleader_);
  }
  _impl_.appointleader_ = appointleader;
  if (appointleader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.appointLeader)
}
inline ::msg::TeamOPAppointLeader* TeamOP::release_appointleader() {
  
  ::msg::TeamOPAppointLeader* temp = _impl_.appointleader_;
  _impl_.appointleader_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamOPAppointLeader* TeamOP::unsafe_arena_release_appointleader() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.appointLeader)
  
  ::msg::TeamOPAppointLeader* temp = _impl_.appointleader_;
  _impl_.appointleader_ = nullptr;
  return temp;
}
inline ::msg::TeamOPAppointLeader* TeamOP::_internal_mutable_appointleader() {
  
  if (_impl_.appointleader_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamOPAppointLeader>(GetArenaForAllocation());
    _impl_.appointleader_ = p;
  }
  return _impl_.appointleader_;
}
inline ::msg::TeamOPAppointLeader* TeamOP::mutable_appointleader() {
  ::msg::TeamOPAppointLeader* _msg = _internal_mutable_appointleader();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.appointLeader)
  return _msg;
}
inline void TeamOP::set_allocated_appointleader(::msg::TeamOPAppointLeader* appointleader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.appointleader_;
  }
  if (appointleader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(appointleader);
    if (message_arena != submessage_arena) {
      appointleader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appointleader, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.appointleader_ = appointleader;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.appointLeader)
}

// .msg.TeamOPSelfChangeGroup selfChangeGroup = 6;
inline bool TeamOP::_internal_has_selfchangegroup() const {
  return this != internal_default_instance() && _impl_.selfchangegroup_ != nullptr;
}
inline bool TeamOP::has_selfchangegroup() const {
  return _internal_has_selfchangegroup();
}
inline void TeamOP::clear_selfchangegroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.selfchangegroup_ != nullptr) {
    delete _impl_.selfchangegroup_;
  }
  _impl_.selfchangegroup_ = nullptr;
}
inline const ::msg::TeamOPSelfChangeGroup& TeamOP::_internal_selfchangegroup() const {
  const ::msg::TeamOPSelfChangeGroup* p = _impl_.selfchangegroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamOPSelfChangeGroup&>(
      ::msg::_TeamOPSelfChangeGroup_default_instance_);
}
inline const ::msg::TeamOPSelfChangeGroup& TeamOP::selfchangegroup() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.selfChangeGroup)
  return _internal_selfchangegroup();
}
inline void TeamOP::unsafe_arena_set_allocated_selfchangegroup(
    ::msg::TeamOPSelfChangeGroup* selfchangegroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selfchangegroup_);
  }
  _impl_.selfchangegroup_ = selfchangegroup;
  if (selfchangegroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.selfChangeGroup)
}
inline ::msg::TeamOPSelfChangeGroup* TeamOP::release_selfchangegroup() {
  
  ::msg::TeamOPSelfChangeGroup* temp = _impl_.selfchangegroup_;
  _impl_.selfchangegroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamOPSelfChangeGroup* TeamOP::unsafe_arena_release_selfchangegroup() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.selfChangeGroup)
  
  ::msg::TeamOPSelfChangeGroup* temp = _impl_.selfchangegroup_;
  _impl_.selfchangegroup_ = nullptr;
  return temp;
}
inline ::msg::TeamOPSelfChangeGroup* TeamOP::_internal_mutable_selfchangegroup() {
  
  if (_impl_.selfchangegroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamOPSelfChangeGroup>(GetArenaForAllocation());
    _impl_.selfchangegroup_ = p;
  }
  return _impl_.selfchangegroup_;
}
inline ::msg::TeamOPSelfChangeGroup* TeamOP::mutable_selfchangegroup() {
  ::msg::TeamOPSelfChangeGroup* _msg = _internal_mutable_selfchangegroup();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.selfChangeGroup)
  return _msg;
}
inline void TeamOP::set_allocated_selfchangegroup(::msg::TeamOPSelfChangeGroup* selfchangegroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.selfchangegroup_;
  }
  if (selfchangegroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(selfchangegroup);
    if (message_arena != submessage_arena) {
      selfchangegroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selfchangegroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.selfchangegroup_ = selfchangegroup;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.selfChangeGroup)
}

// .msg.TeamOPChangeName changeName = 7;
inline bool TeamOP::_internal_has_changename() const {
  return this != internal_default_instance() && _impl_.changename_ != nullptr;
}
inline bool TeamOP::has_changename() const {
  return _internal_has_changename();
}
inline void TeamOP::clear_changename() {
  if (GetArenaForAllocation() == nullptr && _impl_.changename_ != nullptr) {
    delete _impl_.changename_;
  }
  _impl_.changename_ = nullptr;
}
inline const ::msg::TeamOPChangeName& TeamOP::_internal_changename() const {
  const ::msg::TeamOPChangeName* p = _impl_.changename_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamOPChangeName&>(
      ::msg::_TeamOPChangeName_default_instance_);
}
inline const ::msg::TeamOPChangeName& TeamOP::changename() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.changeName)
  return _internal_changename();
}
inline void TeamOP::unsafe_arena_set_allocated_changename(
    ::msg::TeamOPChangeName* changename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changename_);
  }
  _impl_.changename_ = changename;
  if (changename) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.changeName)
}
inline ::msg::TeamOPChangeName* TeamOP::release_changename() {
  
  ::msg::TeamOPChangeName* temp = _impl_.changename_;
  _impl_.changename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamOPChangeName* TeamOP::unsafe_arena_release_changename() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.changeName)
  
  ::msg::TeamOPChangeName* temp = _impl_.changename_;
  _impl_.changename_ = nullptr;
  return temp;
}
inline ::msg::TeamOPChangeName* TeamOP::_internal_mutable_changename() {
  
  if (_impl_.changename_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamOPChangeName>(GetArenaForAllocation());
    _impl_.changename_ = p;
  }
  return _impl_.changename_;
}
inline ::msg::TeamOPChangeName* TeamOP::mutable_changename() {
  ::msg::TeamOPChangeName* _msg = _internal_mutable_changename();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.changeName)
  return _msg;
}
inline void TeamOP::set_allocated_changename(::msg::TeamOPChangeName* changename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.changename_;
  }
  if (changename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(changename);
    if (message_arena != submessage_arena) {
      changename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changename, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changename_ = changename;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.changeName)
}

// .msg.TeamOPSwitchSlot switchSlot = 8;
inline bool TeamOP::_internal_has_switchslot() const {
  return this != internal_default_instance() && _impl_.switchslot_ != nullptr;
}
inline bool TeamOP::has_switchslot() const {
  return _internal_has_switchslot();
}
inline void TeamOP::clear_switchslot() {
  if (GetArenaForAllocation() == nullptr && _impl_.switchslot_ != nullptr) {
    delete _impl_.switchslot_;
  }
  _impl_.switchslot_ = nullptr;
}
inline const ::msg::TeamOPSwitchSlot& TeamOP::_internal_switchslot() const {
  const ::msg::TeamOPSwitchSlot* p = _impl_.switchslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamOPSwitchSlot&>(
      ::msg::_TeamOPSwitchSlot_default_instance_);
}
inline const ::msg::TeamOPSwitchSlot& TeamOP::switchslot() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.switchSlot)
  return _internal_switchslot();
}
inline void TeamOP::unsafe_arena_set_allocated_switchslot(
    ::msg::TeamOPSwitchSlot* switchslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchslot_);
  }
  _impl_.switchslot_ = switchslot;
  if (switchslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.switchSlot)
}
inline ::msg::TeamOPSwitchSlot* TeamOP::release_switchslot() {
  
  ::msg::TeamOPSwitchSlot* temp = _impl_.switchslot_;
  _impl_.switchslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamOPSwitchSlot* TeamOP::unsafe_arena_release_switchslot() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.switchSlot)
  
  ::msg::TeamOPSwitchSlot* temp = _impl_.switchslot_;
  _impl_.switchslot_ = nullptr;
  return temp;
}
inline ::msg::TeamOPSwitchSlot* TeamOP::_internal_mutable_switchslot() {
  
  if (_impl_.switchslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamOPSwitchSlot>(GetArenaForAllocation());
    _impl_.switchslot_ = p;
  }
  return _impl_.switchslot_;
}
inline ::msg::TeamOPSwitchSlot* TeamOP::mutable_switchslot() {
  ::msg::TeamOPSwitchSlot* _msg = _internal_mutable_switchslot();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.switchSlot)
  return _msg;
}
inline void TeamOP::set_allocated_switchslot(::msg::TeamOPSwitchSlot* switchslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.switchslot_;
  }
  if (switchslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(switchslot);
    if (message_arena != submessage_arena) {
      switchslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchslot_ = switchslot;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.switchSlot)
}

// .msg.TeamBetOnBounty betOnBounty = 9;
inline bool TeamOP::_internal_has_betonbounty() const {
  return this != internal_default_instance() && _impl_.betonbounty_ != nullptr;
}
inline bool TeamOP::has_betonbounty() const {
  return _internal_has_betonbounty();
}
inline void TeamOP::clear_betonbounty() {
  if (GetArenaForAllocation() == nullptr && _impl_.betonbounty_ != nullptr) {
    delete _impl_.betonbounty_;
  }
  _impl_.betonbounty_ = nullptr;
}
inline const ::msg::TeamBetOnBounty& TeamOP::_internal_betonbounty() const {
  const ::msg::TeamBetOnBounty* p = _impl_.betonbounty_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TeamBetOnBounty&>(
      ::msg::_TeamBetOnBounty_default_instance_);
}
inline const ::msg::TeamBetOnBounty& TeamOP::betonbounty() const {
  // @@protoc_insertion_point(field_get:msg.TeamOP.betOnBounty)
  return _internal_betonbounty();
}
inline void TeamOP::unsafe_arena_set_allocated_betonbounty(
    ::msg::TeamBetOnBounty* betonbounty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.betonbounty_);
  }
  _impl_.betonbounty_ = betonbounty;
  if (betonbounty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamOP.betOnBounty)
}
inline ::msg::TeamBetOnBounty* TeamOP::release_betonbounty() {
  
  ::msg::TeamBetOnBounty* temp = _impl_.betonbounty_;
  _impl_.betonbounty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TeamBetOnBounty* TeamOP::unsafe_arena_release_betonbounty() {
  // @@protoc_insertion_point(field_release:msg.TeamOP.betOnBounty)
  
  ::msg::TeamBetOnBounty* temp = _impl_.betonbounty_;
  _impl_.betonbounty_ = nullptr;
  return temp;
}
inline ::msg::TeamBetOnBounty* TeamOP::_internal_mutable_betonbounty() {
  
  if (_impl_.betonbounty_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TeamBetOnBounty>(GetArenaForAllocation());
    _impl_.betonbounty_ = p;
  }
  return _impl_.betonbounty_;
}
inline ::msg::TeamBetOnBounty* TeamOP::mutable_betonbounty() {
  ::msg::TeamBetOnBounty* _msg = _internal_mutable_betonbounty();
  // @@protoc_insertion_point(field_mutable:msg.TeamOP.betOnBounty)
  return _msg;
}
inline void TeamOP::set_allocated_betonbounty(::msg::TeamBetOnBounty* betonbounty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.betonbounty_;
  }
  if (betonbounty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(betonbounty);
    if (message_arena != submessage_arena) {
      betonbounty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, betonbounty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.betonbounty_ = betonbounty;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamOP.betOnBounty)
}

// -------------------------------------------------------------------

// TeamBaseInfo

// string Name = 1;
inline void TeamBaseInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TeamBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamBaseInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.Name)
}
inline std::string* TeamBaseInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.TeamBaseInfo.Name)
  return _s;
}
inline const std::string& TeamBaseInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TeamBaseInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamBaseInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.TeamBaseInfo.Name)
  return _impl_.name_.Release();
}
inline void TeamBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamBaseInfo.Name)
}

// uint64 TeamId = 2;
inline void TeamBaseInfo::clear_teamid() {
  _impl_.teamid_ = uint64_t{0u};
}
inline uint64_t TeamBaseInfo::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint64_t TeamBaseInfo::teamid() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.TeamId)
  return _internal_teamid();
}
inline void TeamBaseInfo::_internal_set_teamid(uint64_t value) {
  
  _impl_.teamid_ = value;
}
inline void TeamBaseInfo::set_teamid(uint64_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.TeamId)
}

// .msg.PVPMODE Mode = 3;
inline void TeamBaseInfo::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::msg::PVPMODE TeamBaseInfo::_internal_mode() const {
  return static_cast< ::msg::PVPMODE >(_impl_.mode_);
}
inline ::msg::PVPMODE TeamBaseInfo::mode() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.Mode)
  return _internal_mode();
}
inline void TeamBaseInfo::_internal_set_mode(::msg::PVPMODE value) {
  
  _impl_.mode_ = value;
}
inline void TeamBaseInfo::set_mode(::msg::PVPMODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.Mode)
}

// int32 CompetotperNum = 4;
inline void TeamBaseInfo::clear_competotpernum() {
  _impl_.competotpernum_ = 0;
}
inline int32_t TeamBaseInfo::_internal_competotpernum() const {
  return _impl_.competotpernum_;
}
inline int32_t TeamBaseInfo::competotpernum() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.CompetotperNum)
  return _internal_competotpernum();
}
inline void TeamBaseInfo::_internal_set_competotpernum(int32_t value) {
  
  _impl_.competotpernum_ = value;
}
inline void TeamBaseInfo::set_competotpernum(int32_t value) {
  _internal_set_competotpernum(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.CompetotperNum)
}

// int32 CompetotperTotalNum = 5;
inline void TeamBaseInfo::clear_competotpertotalnum() {
  _impl_.competotpertotalnum_ = 0;
}
inline int32_t TeamBaseInfo::_internal_competotpertotalnum() const {
  return _impl_.competotpertotalnum_;
}
inline int32_t TeamBaseInfo::competotpertotalnum() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.CompetotperTotalNum)
  return _internal_competotpertotalnum();
}
inline void TeamBaseInfo::_internal_set_competotpertotalnum(int32_t value) {
  
  _impl_.competotpertotalnum_ = value;
}
inline void TeamBaseInfo::set_competotpertotalnum(int32_t value) {
  _internal_set_competotpertotalnum(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.CompetotperTotalNum)
}

// bool HasPwd = 6;
inline void TeamBaseInfo::clear_haspwd() {
  _impl_.haspwd_ = false;
}
inline bool TeamBaseInfo::_internal_haspwd() const {
  return _impl_.haspwd_;
}
inline bool TeamBaseInfo::haspwd() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.HasPwd)
  return _internal_haspwd();
}
inline void TeamBaseInfo::_internal_set_haspwd(bool value) {
  
  _impl_.haspwd_ = value;
}
inline void TeamBaseInfo::set_haspwd(bool value) {
  _internal_set_haspwd(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.HasPwd)
}

// int32 SubMode = 7;
inline void TeamBaseInfo::clear_submode() {
  _impl_.submode_ = 0;
}
inline int32_t TeamBaseInfo::_internal_submode() const {
  return _impl_.submode_;
}
inline int32_t TeamBaseInfo::submode() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.SubMode)
  return _internal_submode();
}
inline void TeamBaseInfo::_internal_set_submode(int32_t value) {
  
  _impl_.submode_ = value;
}
inline void TeamBaseInfo::set_submode(int32_t value) {
  _internal_set_submode(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.SubMode)
}

// .msg.WorkshopSetting WSSetting = 8;
inline bool TeamBaseInfo::_internal_has_wssetting() const {
  return this != internal_default_instance() && _impl_.wssetting_ != nullptr;
}
inline bool TeamBaseInfo::has_wssetting() const {
  return _internal_has_wssetting();
}
inline void TeamBaseInfo::clear_wssetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.wssetting_ != nullptr) {
    delete _impl_.wssetting_;
  }
  _impl_.wssetting_ = nullptr;
}
inline const ::msg::WorkshopSetting& TeamBaseInfo::_internal_wssetting() const {
  const ::msg::WorkshopSetting* p = _impl_.wssetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::WorkshopSetting&>(
      ::msg::_WorkshopSetting_default_instance_);
}
inline const ::msg::WorkshopSetting& TeamBaseInfo::wssetting() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.WSSetting)
  return _internal_wssetting();
}
inline void TeamBaseInfo::unsafe_arena_set_allocated_wssetting(
    ::msg::WorkshopSetting* wssetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wssetting_);
  }
  _impl_.wssetting_ = wssetting;
  if (wssetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamBaseInfo.WSSetting)
}
inline ::msg::WorkshopSetting* TeamBaseInfo::release_wssetting() {
  
  ::msg::WorkshopSetting* temp = _impl_.wssetting_;
  _impl_.wssetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::WorkshopSetting* TeamBaseInfo::unsafe_arena_release_wssetting() {
  // @@protoc_insertion_point(field_release:msg.TeamBaseInfo.WSSetting)
  
  ::msg::WorkshopSetting* temp = _impl_.wssetting_;
  _impl_.wssetting_ = nullptr;
  return temp;
}
inline ::msg::WorkshopSetting* TeamBaseInfo::_internal_mutable_wssetting() {
  
  if (_impl_.wssetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::WorkshopSetting>(GetArenaForAllocation());
    _impl_.wssetting_ = p;
  }
  return _impl_.wssetting_;
}
inline ::msg::WorkshopSetting* TeamBaseInfo::mutable_wssetting() {
  ::msg::WorkshopSetting* _msg = _internal_mutable_wssetting();
  // @@protoc_insertion_point(field_mutable:msg.TeamBaseInfo.WSSetting)
  return _msg;
}
inline void TeamBaseInfo::set_allocated_wssetting(::msg::WorkshopSetting* wssetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wssetting_;
  }
  if (wssetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wssetting);
    if (message_arena != submessage_arena) {
      wssetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wssetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wssetting_ = wssetting;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamBaseInfo.WSSetting)
}

// .msg.BountySetting Bounty = 9;
inline bool TeamBaseInfo::_internal_has_bounty() const {
  return this != internal_default_instance() && _impl_.bounty_ != nullptr;
}
inline bool TeamBaseInfo::has_bounty() const {
  return _internal_has_bounty();
}
inline void TeamBaseInfo::clear_bounty() {
  if (GetArenaForAllocation() == nullptr && _impl_.bounty_ != nullptr) {
    delete _impl_.bounty_;
  }
  _impl_.bounty_ = nullptr;
}
inline const ::msg::BountySetting& TeamBaseInfo::_internal_bounty() const {
  const ::msg::BountySetting* p = _impl_.bounty_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::BountySetting&>(
      ::msg::_BountySetting_default_instance_);
}
inline const ::msg::BountySetting& TeamBaseInfo::bounty() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.Bounty)
  return _internal_bounty();
}
inline void TeamBaseInfo::unsafe_arena_set_allocated_bounty(
    ::msg::BountySetting* bounty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bounty_);
  }
  _impl_.bounty_ = bounty;
  if (bounty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamBaseInfo.Bounty)
}
inline ::msg::BountySetting* TeamBaseInfo::release_bounty() {
  
  ::msg::BountySetting* temp = _impl_.bounty_;
  _impl_.bounty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::BountySetting* TeamBaseInfo::unsafe_arena_release_bounty() {
  // @@protoc_insertion_point(field_release:msg.TeamBaseInfo.Bounty)
  
  ::msg::BountySetting* temp = _impl_.bounty_;
  _impl_.bounty_ = nullptr;
  return temp;
}
inline ::msg::BountySetting* TeamBaseInfo::_internal_mutable_bounty() {
  
  if (_impl_.bounty_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::BountySetting>(GetArenaForAllocation());
    _impl_.bounty_ = p;
  }
  return _impl_.bounty_;
}
inline ::msg::BountySetting* TeamBaseInfo::mutable_bounty() {
  ::msg::BountySetting* _msg = _internal_mutable_bounty();
  // @@protoc_insertion_point(field_mutable:msg.TeamBaseInfo.Bounty)
  return _msg;
}
inline void TeamBaseInfo::set_allocated_bounty(::msg::BountySetting* bounty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bounty_;
  }
  if (bounty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounty);
    if (message_arena != submessage_arena) {
      bounty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bounty_ = bounty;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamBaseInfo.Bounty)
}

// int32 BountyTotal = 10;
inline void TeamBaseInfo::clear_bountytotal() {
  _impl_.bountytotal_ = 0;
}
inline int32_t TeamBaseInfo::_internal_bountytotal() const {
  return _impl_.bountytotal_;
}
inline int32_t TeamBaseInfo::bountytotal() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.BountyTotal)
  return _internal_bountytotal();
}
inline void TeamBaseInfo::_internal_set_bountytotal(int32_t value) {
  
  _impl_.bountytotal_ = value;
}
inline void TeamBaseInfo::set_bountytotal(int32_t value) {
  _internal_set_bountytotal(value);
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.BountyTotal)
}

// string channelUsrId = 11;
inline void TeamBaseInfo::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& TeamBaseInfo::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.TeamBaseInfo.channelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamBaseInfo::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TeamBaseInfo.channelUsrId)
}
inline std::string* TeamBaseInfo::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.TeamBaseInfo.channelUsrId)
  return _s;
}
inline const std::string& TeamBaseInfo::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void TeamBaseInfo::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamBaseInfo::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamBaseInfo::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.TeamBaseInfo.channelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void TeamBaseInfo::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TeamBaseInfo.channelUsrId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Award

// uint32 Id = 1;
inline void Award::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Award::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Award::id() const {
  // @@protoc_insertion_point(field_get:msg.Award.Id)
  return _internal_id();
}
inline void Award::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Award::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Award.Id)
}

// uint32 Count = 2;
inline void Award::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t Award::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t Award::count() const {
  // @@protoc_insertion_point(field_get:msg.Award.Count)
  return _internal_count();
}
inline void Award::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void Award::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.Award.Count)
}

// repeated int64 Para = 3;
inline int Award::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int Award::para_size() const {
  return _internal_para_size();
}
inline void Award::clear_para() {
  _impl_.para_.Clear();
}
inline int64_t Award::_internal_para(int index) const {
  return _impl_.para_.Get(index);
}
inline int64_t Award::para(int index) const {
  // @@protoc_insertion_point(field_get:msg.Award.Para)
  return _internal_para(index);
}
inline void Award::set_para(int index, int64_t value) {
  _impl_.para_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.Award.Para)
}
inline void Award::_internal_add_para(int64_t value) {
  _impl_.para_.Add(value);
}
inline void Award::add_para(int64_t value) {
  _internal_add_para(value);
  // @@protoc_insertion_point(field_add:msg.Award.Para)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Award::_internal_para() const {
  return _impl_.para_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Award::para() const {
  // @@protoc_insertion_point(field_list:msg.Award.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Award::_internal_mutable_para() {
  return &_impl_.para_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Award::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:msg.Award.Para)
  return _internal_mutable_para();
}

// string InstanceId = 4;
inline void Award::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& Award::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.Award.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Award::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Award.InstanceId)
}
inline std::string* Award::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.Award.InstanceId)
  return _s;
}
inline const std::string& Award::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void Award::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* Award::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* Award::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.Award.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void Award::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Award.InstanceId)
}

// uint32 Weight = 5;
inline void Award::clear_weight() {
  _impl_.weight_ = 0u;
}
inline uint32_t Award::_internal_weight() const {
  return _impl_.weight_;
}
inline uint32_t Award::weight() const {
  // @@protoc_insertion_point(field_get:msg.Award.Weight)
  return _internal_weight();
}
inline void Award::_internal_set_weight(uint32_t value) {
  
  _impl_.weight_ = value;
}
inline void Award::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:msg.Award.Weight)
}

// uint32 Price = 6;
inline void Award::clear_price() {
  _impl_.price_ = 0u;
}
inline uint32_t Award::_internal_price() const {
  return _impl_.price_;
}
inline uint32_t Award::price() const {
  // @@protoc_insertion_point(field_get:msg.Award.Price)
  return _internal_price();
}
inline void Award::_internal_set_price(uint32_t value) {
  
  _impl_.price_ = value;
}
inline void Award::set_price(uint32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:msg.Award.Price)
}

// uint32 SourceIdx = 7;
inline void Award::clear_sourceidx() {
  _impl_.sourceidx_ = 0u;
}
inline uint32_t Award::_internal_sourceidx() const {
  return _impl_.sourceidx_;
}
inline uint32_t Award::sourceidx() const {
  // @@protoc_insertion_point(field_get:msg.Award.SourceIdx)
  return _internal_sourceidx();
}
inline void Award::_internal_set_sourceidx(uint32_t value) {
  
  _impl_.sourceidx_ = value;
}
inline void Award::set_sourceidx(uint32_t value) {
  _internal_set_sourceidx(value);
  // @@protoc_insertion_point(field_set:msg.Award.SourceIdx)
}

// int64 SurviveTime = 8;
inline void Award::clear_survivetime() {
  _impl_.survivetime_ = int64_t{0};
}
inline int64_t Award::_internal_survivetime() const {
  return _impl_.survivetime_;
}
inline int64_t Award::survivetime() const {
  // @@protoc_insertion_point(field_get:msg.Award.SurviveTime)
  return _internal_survivetime();
}
inline void Award::_internal_set_survivetime(int64_t value) {
  
  _impl_.survivetime_ = value;
}
inline void Award::set_survivetime(int64_t value) {
  _internal_set_survivetime(value);
  // @@protoc_insertion_point(field_set:msg.Award.SurviveTime)
}

// .msg.CSDTItemMedal Medal = 9;
inline bool Award::_internal_has_medal() const {
  return this != internal_default_instance() && _impl_.medal_ != nullptr;
}
inline bool Award::has_medal() const {
  return _internal_has_medal();
}
inline void Award::clear_medal() {
  if (GetArenaForAllocation() == nullptr && _impl_.medal_ != nullptr) {
    delete _impl_.medal_;
  }
  _impl_.medal_ = nullptr;
}
inline const ::msg::CSDTItemMedal& Award::_internal_medal() const {
  const ::msg::CSDTItemMedal* p = _impl_.medal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTItemMedal&>(
      ::msg::_CSDTItemMedal_default_instance_);
}
inline const ::msg::CSDTItemMedal& Award::medal() const {
  // @@protoc_insertion_point(field_get:msg.Award.Medal)
  return _internal_medal();
}
inline void Award::unsafe_arena_set_allocated_medal(
    ::msg::CSDTItemMedal* medal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medal_);
  }
  _impl_.medal_ = medal;
  if (medal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Award.Medal)
}
inline ::msg::CSDTItemMedal* Award::release_medal() {
  
  ::msg::CSDTItemMedal* temp = _impl_.medal_;
  _impl_.medal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTItemMedal* Award::unsafe_arena_release_medal() {
  // @@protoc_insertion_point(field_release:msg.Award.Medal)
  
  ::msg::CSDTItemMedal* temp = _impl_.medal_;
  _impl_.medal_ = nullptr;
  return temp;
}
inline ::msg::CSDTItemMedal* Award::_internal_mutable_medal() {
  
  if (_impl_.medal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTItemMedal>(GetArenaForAllocation());
    _impl_.medal_ = p;
  }
  return _impl_.medal_;
}
inline ::msg::CSDTItemMedal* Award::mutable_medal() {
  ::msg::CSDTItemMedal* _msg = _internal_mutable_medal();
  // @@protoc_insertion_point(field_mutable:msg.Award.Medal)
  return _msg;
}
inline void Award::set_allocated_medal(::msg::CSDTItemMedal* medal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.medal_;
  }
  if (medal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(medal);
    if (message_arena != submessage_arena) {
      medal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.medal_ = medal;
  // @@protoc_insertion_point(field_set_allocated:msg.Award.Medal)
}

// string Number = 10;
inline void Award::clear_number() {
  _impl_.number_.ClearToEmpty();
}
inline const std::string& Award::number() const {
  // @@protoc_insertion_point(field_get:msg.Award.Number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Award::set_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Award.Number)
}
inline std::string* Award::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:msg.Award.Number)
  return _s;
}
inline const std::string& Award::_internal_number() const {
  return _impl_.number_.Get();
}
inline void Award::_internal_set_number(const std::string& value) {
  
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* Award::_internal_mutable_number() {
  
  return _impl_.number_.Mutable(GetArenaForAllocation());
}
inline std::string* Award::release_number() {
  // @@protoc_insertion_point(field_release:msg.Award.Number)
  return _impl_.number_.Release();
}
inline void Award::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Award.Number)
}

// string Abrasion = 11;
inline void Award::clear_abrasion() {
  _impl_.abrasion_.ClearToEmpty();
}
inline const std::string& Award::abrasion() const {
  // @@protoc_insertion_point(field_get:msg.Award.Abrasion)
  return _internal_abrasion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Award::set_abrasion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.abrasion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Award.Abrasion)
}
inline std::string* Award::mutable_abrasion() {
  std::string* _s = _internal_mutable_abrasion();
  // @@protoc_insertion_point(field_mutable:msg.Award.Abrasion)
  return _s;
}
inline const std::string& Award::_internal_abrasion() const {
  return _impl_.abrasion_.Get();
}
inline void Award::_internal_set_abrasion(const std::string& value) {
  
  _impl_.abrasion_.Set(value, GetArenaForAllocation());
}
inline std::string* Award::_internal_mutable_abrasion() {
  
  return _impl_.abrasion_.Mutable(GetArenaForAllocation());
}
inline std::string* Award::release_abrasion() {
  // @@protoc_insertion_point(field_release:msg.Award.Abrasion)
  return _impl_.abrasion_.Release();
}
inline void Award::set_allocated_abrasion(std::string* abrasion) {
  if (abrasion != nullptr) {
    
  } else {
    
  }
  _impl_.abrasion_.SetAllocated(abrasion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abrasion_.IsDefault()) {
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Award.Abrasion)
}

// map<string, .msg.ItemAffix> Affixs = 12;
inline int Award::_internal_affixs_size() const {
  return _impl_.affixs_.size();
}
inline int Award::affixs_size() const {
  return _internal_affixs_size();
}
inline void Award::clear_affixs() {
  _impl_.affixs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
Award::_internal_affixs() const {
  return _impl_.affixs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
Award::affixs() const {
  // @@protoc_insertion_point(field_map:msg.Award.Affixs)
  return _internal_affixs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
Award::_internal_mutable_affixs() {
  return _impl_.affixs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
Award::mutable_affixs() {
  // @@protoc_insertion_point(field_mutable_map:msg.Award.Affixs)
  return _internal_mutable_affixs();
}

// bool Identified = 13;
inline void Award::clear_identified() {
  _impl_.identified_ = false;
}
inline bool Award::_internal_identified() const {
  return _impl_.identified_;
}
inline bool Award::identified() const {
  // @@protoc_insertion_point(field_get:msg.Award.Identified)
  return _internal_identified();
}
inline void Award::_internal_set_identified(bool value) {
  
  _impl_.identified_ = value;
}
inline void Award::set_identified(bool value) {
  _internal_set_identified(value);
  // @@protoc_insertion_point(field_set:msg.Award.Identified)
}

// uint32 TextureId = 14;
inline void Award::clear_textureid() {
  _impl_.textureid_ = 0u;
}
inline uint32_t Award::_internal_textureid() const {
  return _impl_.textureid_;
}
inline uint32_t Award::textureid() const {
  // @@protoc_insertion_point(field_get:msg.Award.TextureId)
  return _internal_textureid();
}
inline void Award::_internal_set_textureid(uint32_t value) {
  
  _impl_.textureid_ = value;
}
inline void Award::set_textureid(uint32_t value) {
  _internal_set_textureid(value);
  // @@protoc_insertion_point(field_set:msg.Award.TextureId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdatePlayerData

// string UserName = 1;
inline void UpdatePlayerData::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UpdatePlayerData::username() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePlayerData::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.UpdatePlayerData.UserName)
}
inline std::string* UpdatePlayerData::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:msg.UpdatePlayerData.UserName)
  return _s;
}
inline const std::string& UpdatePlayerData::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UpdatePlayerData::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePlayerData::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePlayerData::release_username() {
  // @@protoc_insertion_point(field_release:msg.UpdatePlayerData.UserName)
  return _impl_.username_.Release();
}
inline void UpdatePlayerData::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.UpdatePlayerData.UserName)
}

// repeated uint32 PassportType = 2;
inline int UpdatePlayerData::_internal_passporttype_size() const {
  return _impl_.passporttype_.size();
}
inline int UpdatePlayerData::passporttype_size() const {
  return _internal_passporttype_size();
}
inline void UpdatePlayerData::clear_passporttype() {
  _impl_.passporttype_.Clear();
}
inline uint32_t UpdatePlayerData::_internal_passporttype(int index) const {
  return _impl_.passporttype_.Get(index);
}
inline uint32_t UpdatePlayerData::passporttype(int index) const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.PassportType)
  return _internal_passporttype(index);
}
inline void UpdatePlayerData::set_passporttype(int index, uint32_t value) {
  _impl_.passporttype_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.UpdatePlayerData.PassportType)
}
inline void UpdatePlayerData::_internal_add_passporttype(uint32_t value) {
  _impl_.passporttype_.Add(value);
}
inline void UpdatePlayerData::add_passporttype(uint32_t value) {
  _internal_add_passporttype(value);
  // @@protoc_insertion_point(field_add:msg.UpdatePlayerData.PassportType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UpdatePlayerData::_internal_passporttype() const {
  return _impl_.passporttype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UpdatePlayerData::passporttype() const {
  // @@protoc_insertion_point(field_list:msg.UpdatePlayerData.PassportType)
  return _internal_passporttype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UpdatePlayerData::_internal_mutable_passporttype() {
  return &_impl_.passporttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UpdatePlayerData::mutable_passporttype() {
  // @@protoc_insertion_point(field_mutable_list:msg.UpdatePlayerData.PassportType)
  return _internal_mutable_passporttype();
}

// .msg.CSDTChessPlrInfo ChessPlayer = 4;
inline bool UpdatePlayerData::_internal_has_chessplayer() const {
  return this != internal_default_instance() && _impl_.chessplayer_ != nullptr;
}
inline bool UpdatePlayerData::has_chessplayer() const {
  return _internal_has_chessplayer();
}
inline void UpdatePlayerData::clear_chessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessplayer_ != nullptr) {
    delete _impl_.chessplayer_;
  }
  _impl_.chessplayer_ = nullptr;
}
inline const ::msg::CSDTChessPlrInfo& UpdatePlayerData::_internal_chessplayer() const {
  const ::msg::CSDTChessPlrInfo* p = _impl_.chessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTChessPlrInfo&>(
      ::msg::_CSDTChessPlrInfo_default_instance_);
}
inline const ::msg::CSDTChessPlrInfo& UpdatePlayerData::chessplayer() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.ChessPlayer)
  return _internal_chessplayer();
}
inline void UpdatePlayerData::unsafe_arena_set_allocated_chessplayer(
    ::msg::CSDTChessPlrInfo* chessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessplayer_);
  }
  _impl_.chessplayer_ = chessplayer;
  if (chessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UpdatePlayerData.ChessPlayer)
}
inline ::msg::CSDTChessPlrInfo* UpdatePlayerData::release_chessplayer() {
  
  ::msg::CSDTChessPlrInfo* temp = _impl_.chessplayer_;
  _impl_.chessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTChessPlrInfo* UpdatePlayerData::unsafe_arena_release_chessplayer() {
  // @@protoc_insertion_point(field_release:msg.UpdatePlayerData.ChessPlayer)
  
  ::msg::CSDTChessPlrInfo* temp = _impl_.chessplayer_;
  _impl_.chessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSDTChessPlrInfo* UpdatePlayerData::_internal_mutable_chessplayer() {
  
  if (_impl_.chessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTChessPlrInfo>(GetArenaForAllocation());
    _impl_.chessplayer_ = p;
  }
  return _impl_.chessplayer_;
}
inline ::msg::CSDTChessPlrInfo* UpdatePlayerData::mutable_chessplayer() {
  ::msg::CSDTChessPlrInfo* _msg = _internal_mutable_chessplayer();
  // @@protoc_insertion_point(field_mutable:msg.UpdatePlayerData.ChessPlayer)
  return _msg;
}
inline void UpdatePlayerData::set_allocated_chessplayer(::msg::CSDTChessPlrInfo* chessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chessplayer_;
  }
  if (chessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chessplayer);
    if (message_arena != submessage_arena) {
      chessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessplayer_ = chessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.UpdatePlayerData.ChessPlayer)
}

// uint32 SceneId = 5;
inline void UpdatePlayerData::clear_sceneid() {
  _impl_.sceneid_ = 0u;
}
inline uint32_t UpdatePlayerData::_internal_sceneid() const {
  return _impl_.sceneid_;
}
inline uint32_t UpdatePlayerData::sceneid() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.SceneId)
  return _internal_sceneid();
}
inline void UpdatePlayerData::_internal_set_sceneid(uint32_t value) {
  
  _impl_.sceneid_ = value;
}
inline void UpdatePlayerData::set_sceneid(uint32_t value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:msg.UpdatePlayerData.SceneId)
}

// map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 6;
inline int UpdatePlayerData::_internal_chessskindata_size() const {
  return _impl_.chessskindata_.size();
}
inline int UpdatePlayerData::chessskindata_size() const {
  return _internal_chessskindata_size();
}
inline void UpdatePlayerData::clear_chessskindata() {
  _impl_.chessskindata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
UpdatePlayerData::_internal_chessskindata() const {
  return _impl_.chessskindata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
UpdatePlayerData::chessskindata() const {
  // @@protoc_insertion_point(field_map:msg.UpdatePlayerData.ChessSkinData)
  return _internal_chessskindata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
UpdatePlayerData::_internal_mutable_chessskindata() {
  return _impl_.chessskindata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
UpdatePlayerData::mutable_chessskindata() {
  // @@protoc_insertion_point(field_mutable_map:msg.UpdatePlayerData.ChessSkinData)
  return _internal_mutable_chessskindata();
}

// uint32 HeadPic = 7;
inline void UpdatePlayerData::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t UpdatePlayerData::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t UpdatePlayerData::headpic() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.HeadPic)
  return _internal_headpic();
}
inline void UpdatePlayerData::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void UpdatePlayerData::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.UpdatePlayerData.HeadPic)
}

// map<uint32, uint32> ShowItems = 8;
inline int UpdatePlayerData::_internal_showitems_size() const {
  return _impl_.showitems_.size();
}
inline int UpdatePlayerData::showitems_size() const {
  return _internal_showitems_size();
}
inline void UpdatePlayerData::clear_showitems() {
  _impl_.showitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
UpdatePlayerData::_internal_showitems() const {
  return _impl_.showitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
UpdatePlayerData::showitems() const {
  // @@protoc_insertion_point(field_map:msg.UpdatePlayerData.ShowItems)
  return _internal_showitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
UpdatePlayerData::_internal_mutable_showitems() {
  return _impl_.showitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
UpdatePlayerData::mutable_showitems() {
  // @@protoc_insertion_point(field_mutable_map:msg.UpdatePlayerData.ShowItems)
  return _internal_mutable_showitems();
}

// .msg.CSDTCommonRandList EmotionList = 9;
inline bool UpdatePlayerData::_internal_has_emotionlist() const {
  return this != internal_default_instance() && _impl_.emotionlist_ != nullptr;
}
inline bool UpdatePlayerData::has_emotionlist() const {
  return _internal_has_emotionlist();
}
inline void UpdatePlayerData::clear_emotionlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.emotionlist_ != nullptr) {
    delete _impl_.emotionlist_;
  }
  _impl_.emotionlist_ = nullptr;
}
inline const ::msg::CSDTCommonRandList& UpdatePlayerData::_internal_emotionlist() const {
  const ::msg::CSDTCommonRandList* p = _impl_.emotionlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTCommonRandList&>(
      ::msg::_CSDTCommonRandList_default_instance_);
}
inline const ::msg::CSDTCommonRandList& UpdatePlayerData::emotionlist() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.EmotionList)
  return _internal_emotionlist();
}
inline void UpdatePlayerData::unsafe_arena_set_allocated_emotionlist(
    ::msg::CSDTCommonRandList* emotionlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emotionlist_);
  }
  _impl_.emotionlist_ = emotionlist;
  if (emotionlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UpdatePlayerData.EmotionList)
}
inline ::msg::CSDTCommonRandList* UpdatePlayerData::release_emotionlist() {
  
  ::msg::CSDTCommonRandList* temp = _impl_.emotionlist_;
  _impl_.emotionlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTCommonRandList* UpdatePlayerData::unsafe_arena_release_emotionlist() {
  // @@protoc_insertion_point(field_release:msg.UpdatePlayerData.EmotionList)
  
  ::msg::CSDTCommonRandList* temp = _impl_.emotionlist_;
  _impl_.emotionlist_ = nullptr;
  return temp;
}
inline ::msg::CSDTCommonRandList* UpdatePlayerData::_internal_mutable_emotionlist() {
  
  if (_impl_.emotionlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTCommonRandList>(GetArenaForAllocation());
    _impl_.emotionlist_ = p;
  }
  return _impl_.emotionlist_;
}
inline ::msg::CSDTCommonRandList* UpdatePlayerData::mutable_emotionlist() {
  ::msg::CSDTCommonRandList* _msg = _internal_mutable_emotionlist();
  // @@protoc_insertion_point(field_mutable:msg.UpdatePlayerData.EmotionList)
  return _msg;
}
inline void UpdatePlayerData::set_allocated_emotionlist(::msg::CSDTCommonRandList* emotionlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.emotionlist_;
  }
  if (emotionlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emotionlist);
    if (message_arena != submessage_arena) {
      emotionlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotionlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.emotionlist_ = emotionlist;
  // @@protoc_insertion_point(field_set_allocated:msg.UpdatePlayerData.EmotionList)
}

// .msg.PveExData Pve = 10;
inline bool UpdatePlayerData::_internal_has_pve() const {
  return this != internal_default_instance() && _impl_.pve_ != nullptr;
}
inline bool UpdatePlayerData::has_pve() const {
  return _internal_has_pve();
}
inline void UpdatePlayerData::clear_pve() {
  if (GetArenaForAllocation() == nullptr && _impl_.pve_ != nullptr) {
    delete _impl_.pve_;
  }
  _impl_.pve_ = nullptr;
}
inline const ::msg::PveExData& UpdatePlayerData::_internal_pve() const {
  const ::msg::PveExData* p = _impl_.pve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PveExData&>(
      ::msg::_PveExData_default_instance_);
}
inline const ::msg::PveExData& UpdatePlayerData::pve() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.Pve)
  return _internal_pve();
}
inline void UpdatePlayerData::unsafe_arena_set_allocated_pve(
    ::msg::PveExData* pve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pve_);
  }
  _impl_.pve_ = pve;
  if (pve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UpdatePlayerData.Pve)
}
inline ::msg::PveExData* UpdatePlayerData::release_pve() {
  
  ::msg::PveExData* temp = _impl_.pve_;
  _impl_.pve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PveExData* UpdatePlayerData::unsafe_arena_release_pve() {
  // @@protoc_insertion_point(field_release:msg.UpdatePlayerData.Pve)
  
  ::msg::PveExData* temp = _impl_.pve_;
  _impl_.pve_ = nullptr;
  return temp;
}
inline ::msg::PveExData* UpdatePlayerData::_internal_mutable_pve() {
  
  if (_impl_.pve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PveExData>(GetArenaForAllocation());
    _impl_.pve_ = p;
  }
  return _impl_.pve_;
}
inline ::msg::PveExData* UpdatePlayerData::mutable_pve() {
  ::msg::PveExData* _msg = _internal_mutable_pve();
  // @@protoc_insertion_point(field_mutable:msg.UpdatePlayerData.Pve)
  return _msg;
}
inline void UpdatePlayerData::set_allocated_pve(::msg::PveExData* pve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pve_;
  }
  if (pve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pve);
    if (message_arena != submessage_arena) {
      pve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pve_ = pve;
  // @@protoc_insertion_point(field_set_allocated:msg.UpdatePlayerData.Pve)
}

// map<uint32, .msg.CSDTItem> SkinData = 11;
inline int UpdatePlayerData::_internal_skindata_size() const {
  return _impl_.skindata_.size();
}
inline int UpdatePlayerData::skindata_size() const {
  return _internal_skindata_size();
}
inline void UpdatePlayerData::clear_skindata() {
  _impl_.skindata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
UpdatePlayerData::_internal_skindata() const {
  return _impl_.skindata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
UpdatePlayerData::skindata() const {
  // @@protoc_insertion_point(field_map:msg.UpdatePlayerData.SkinData)
  return _internal_skindata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
UpdatePlayerData::_internal_mutable_skindata() {
  return _impl_.skindata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
UpdatePlayerData::mutable_skindata() {
  // @@protoc_insertion_point(field_mutable_map:msg.UpdatePlayerData.SkinData)
  return _internal_mutable_skindata();
}

// .msg.CardGroupData CardGroupData = 12;
inline bool UpdatePlayerData::_internal_has_cardgroupdata() const {
  return this != internal_default_instance() && _impl_.cardgroupdata_ != nullptr;
}
inline bool UpdatePlayerData::has_cardgroupdata() const {
  return _internal_has_cardgroupdata();
}
inline void UpdatePlayerData::clear_cardgroupdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroupdata_ != nullptr) {
    delete _impl_.cardgroupdata_;
  }
  _impl_.cardgroupdata_ = nullptr;
}
inline const ::msg::CardGroupData& UpdatePlayerData::_internal_cardgroupdata() const {
  const ::msg::CardGroupData* p = _impl_.cardgroupdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CardGroupData&>(
      ::msg::_CardGroupData_default_instance_);
}
inline const ::msg::CardGroupData& UpdatePlayerData::cardgroupdata() const {
  // @@protoc_insertion_point(field_get:msg.UpdatePlayerData.CardGroupData)
  return _internal_cardgroupdata();
}
inline void UpdatePlayerData::unsafe_arena_set_allocated_cardgroupdata(
    ::msg::CardGroupData* cardgroupdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cardgroupdata_);
  }
  _impl_.cardgroupdata_ = cardgroupdata;
  if (cardgroupdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UpdatePlayerData.CardGroupData)
}
inline ::msg::CardGroupData* UpdatePlayerData::release_cardgroupdata() {
  
  ::msg::CardGroupData* temp = _impl_.cardgroupdata_;
  _impl_.cardgroupdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CardGroupData* UpdatePlayerData::unsafe_arena_release_cardgroupdata() {
  // @@protoc_insertion_point(field_release:msg.UpdatePlayerData.CardGroupData)
  
  ::msg::CardGroupData* temp = _impl_.cardgroupdata_;
  _impl_.cardgroupdata_ = nullptr;
  return temp;
}
inline ::msg::CardGroupData* UpdatePlayerData::_internal_mutable_cardgroupdata() {
  
  if (_impl_.cardgroupdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CardGroupData>(GetArenaForAllocation());
    _impl_.cardgroupdata_ = p;
  }
  return _impl_.cardgroupdata_;
}
inline ::msg::CardGroupData* UpdatePlayerData::mutable_cardgroupdata() {
  ::msg::CardGroupData* _msg = _internal_mutable_cardgroupdata();
  // @@protoc_insertion_point(field_mutable:msg.UpdatePlayerData.CardGroupData)
  return _msg;
}
inline void UpdatePlayerData::set_allocated_cardgroupdata(::msg::CardGroupData* cardgroupdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cardgroupdata_;
  }
  if (cardgroupdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cardgroupdata);
    if (message_arena != submessage_arena) {
      cardgroupdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardgroupdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cardgroupdata_ = cardgroupdata;
  // @@protoc_insertion_point(field_set_allocated:msg.UpdatePlayerData.CardGroupData)
}

// -------------------------------------------------------------------

// SkipType

// string Skip = 1;
inline void SkipType::clear_skip() {
  _impl_.skip_.ClearToEmpty();
}
inline const std::string& SkipType::skip() const {
  // @@protoc_insertion_point(field_get:msg.SkipType.Skip)
  return _internal_skip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkipType::set_skip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.SkipType.Skip)
}
inline std::string* SkipType::mutable_skip() {
  std::string* _s = _internal_mutable_skip();
  // @@protoc_insertion_point(field_mutable:msg.SkipType.Skip)
  return _s;
}
inline const std::string& SkipType::_internal_skip() const {
  return _impl_.skip_.Get();
}
inline void SkipType::_internal_set_skip(const std::string& value) {
  
  _impl_.skip_.Set(value, GetArenaForAllocation());
}
inline std::string* SkipType::_internal_mutable_skip() {
  
  return _impl_.skip_.Mutable(GetArenaForAllocation());
}
inline std::string* SkipType::release_skip() {
  // @@protoc_insertion_point(field_release:msg.SkipType.Skip)
  return _impl_.skip_.Release();
}
inline void SkipType::set_allocated_skip(std::string* skip) {
  if (skip != nullptr) {
    
  } else {
    
  }
  _impl_.skip_.SetAllocated(skip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skip_.IsDefault()) {
    _impl_.skip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.SkipType.Skip)
}

// string Tap = 2;
inline void SkipType::clear_tap() {
  _impl_.tap_.ClearToEmpty();
}
inline const std::string& SkipType::tap() const {
  // @@protoc_insertion_point(field_get:msg.SkipType.Tap)
  return _internal_tap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkipType::set_tap(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tap_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.SkipType.Tap)
}
inline std::string* SkipType::mutable_tap() {
  std::string* _s = _internal_mutable_tap();
  // @@protoc_insertion_point(field_mutable:msg.SkipType.Tap)
  return _s;
}
inline const std::string& SkipType::_internal_tap() const {
  return _impl_.tap_.Get();
}
inline void SkipType::_internal_set_tap(const std::string& value) {
  
  _impl_.tap_.Set(value, GetArenaForAllocation());
}
inline std::string* SkipType::_internal_mutable_tap() {
  
  return _impl_.tap_.Mutable(GetArenaForAllocation());
}
inline std::string* SkipType::release_tap() {
  // @@protoc_insertion_point(field_release:msg.SkipType.Tap)
  return _impl_.tap_.Release();
}
inline void SkipType::set_allocated_tap(std::string* tap) {
  if (tap != nullptr) {
    
  } else {
    
  }
  _impl_.tap_.SetAllocated(tap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tap_.IsDefault()) {
    _impl_.tap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.SkipType.Tap)
}

// -------------------------------------------------------------------

// BuffEffect

// uint32 Type = 1;
inline void BuffEffect::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t BuffEffect::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t BuffEffect::type() const {
  // @@protoc_insertion_point(field_get:msg.BuffEffect.Type)
  return _internal_type();
}
inline void BuffEffect::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void BuffEffect::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.BuffEffect.Type)
}

// uint32 Value = 2;
inline void BuffEffect::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t BuffEffect::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t BuffEffect::value() const {
  // @@protoc_insertion_point(field_get:msg.BuffEffect.Value)
  return _internal_value();
}
inline void BuffEffect::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void BuffEffect::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:msg.BuffEffect.Value)
}

// -------------------------------------------------------------------

// Consume

// uint32 Id = 1;
inline void Consume::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Consume::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Consume::id() const {
  // @@protoc_insertion_point(field_get:msg.Consume.Id)
  return _internal_id();
}
inline void Consume::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Consume::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Consume.Id)
}

// uint32 Count = 2;
inline void Consume::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t Consume::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t Consume::count() const {
  // @@protoc_insertion_point(field_get:msg.Consume.Count)
  return _internal_count();
}
inline void Consume::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void Consume::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.Consume.Count)
}

// repeated int64 Para = 3;
inline int Consume::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int Consume::para_size() const {
  return _internal_para_size();
}
inline void Consume::clear_para() {
  _impl_.para_.Clear();
}
inline int64_t Consume::_internal_para(int index) const {
  return _impl_.para_.Get(index);
}
inline int64_t Consume::para(int index) const {
  // @@protoc_insertion_point(field_get:msg.Consume.Para)
  return _internal_para(index);
}
inline void Consume::set_para(int index, int64_t value) {
  _impl_.para_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.Consume.Para)
}
inline void Consume::_internal_add_para(int64_t value) {
  _impl_.para_.Add(value);
}
inline void Consume::add_para(int64_t value) {
  _internal_add_para(value);
  // @@protoc_insertion_point(field_add:msg.Consume.Para)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Consume::_internal_para() const {
  return _impl_.para_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Consume::para() const {
  // @@protoc_insertion_point(field_list:msg.Consume.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Consume::_internal_mutable_para() {
  return &_impl_.para_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Consume::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:msg.Consume.Para)
  return _internal_mutable_para();
}

// string InstanceId = 4;
inline void Consume::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& Consume::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.Consume.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Consume::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Consume.InstanceId)
}
inline std::string* Consume::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.Consume.InstanceId)
  return _s;
}
inline const std::string& Consume::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void Consume::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* Consume::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* Consume::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.Consume.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void Consume::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Consume.InstanceId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTItem

// uint32 Id = 1;
inline void CSDTItem::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTItem::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTItem::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Id)
  return _internal_id();
}
inline void CSDTItem::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTItem::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.Id)
}

// uint32 Count = 2;
inline void CSDTItem::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t CSDTItem::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CSDTItem::count() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Count)
  return _internal_count();
}
inline void CSDTItem::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void CSDTItem::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.Count)
}

// string InstanceId = 3;
inline void CSDTItem::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& CSDTItem::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTItem::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTItem.InstanceId)
}
inline std::string* CSDTItem::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItem.InstanceId)
  return _s;
}
inline const std::string& CSDTItem::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void CSDTItem::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTItem::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTItem::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.CSDTItem.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void CSDTItem::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItem.InstanceId)
}

// repeated int64 Para = 4;
inline int CSDTItem::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int CSDTItem::para_size() const {
  return _internal_para_size();
}
inline void CSDTItem::clear_para() {
  _impl_.para_.Clear();
}
inline int64_t CSDTItem::_internal_para(int index) const {
  return _impl_.para_.Get(index);
}
inline int64_t CSDTItem::para(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Para)
  return _internal_para(index);
}
inline void CSDTItem::set_para(int index, int64_t value) {
  _impl_.para_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.Para)
}
inline void CSDTItem::_internal_add_para(int64_t value) {
  _impl_.para_.Add(value);
}
inline void CSDTItem::add_para(int64_t value) {
  _internal_add_para(value);
  // @@protoc_insertion_point(field_add:msg.CSDTItem.Para)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
CSDTItem::_internal_para() const {
  return _impl_.para_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
CSDTItem::para() const {
  // @@protoc_insertion_point(field_list:msg.CSDTItem.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
CSDTItem::_internal_mutable_para() {
  return &_impl_.para_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
CSDTItem::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTItem.Para)
  return _internal_mutable_para();
}

// int64 SurviveTime = 5;
inline void CSDTItem::clear_survivetime() {
  _impl_.survivetime_ = int64_t{0};
}
inline int64_t CSDTItem::_internal_survivetime() const {
  return _impl_.survivetime_;
}
inline int64_t CSDTItem::survivetime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.SurviveTime)
  return _internal_survivetime();
}
inline void CSDTItem::_internal_set_survivetime(int64_t value) {
  
  _impl_.survivetime_ = value;
}
inline void CSDTItem::set_survivetime(int64_t value) {
  _internal_set_survivetime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.SurviveTime)
}

// .msg.CSDTItemMedal Medal = 6;
inline bool CSDTItem::_internal_has_medal() const {
  return this != internal_default_instance() && _impl_.medal_ != nullptr;
}
inline bool CSDTItem::has_medal() const {
  return _internal_has_medal();
}
inline void CSDTItem::clear_medal() {
  if (GetArenaForAllocation() == nullptr && _impl_.medal_ != nullptr) {
    delete _impl_.medal_;
  }
  _impl_.medal_ = nullptr;
}
inline const ::msg::CSDTItemMedal& CSDTItem::_internal_medal() const {
  const ::msg::CSDTItemMedal* p = _impl_.medal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTItemMedal&>(
      ::msg::_CSDTItemMedal_default_instance_);
}
inline const ::msg::CSDTItemMedal& CSDTItem::medal() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Medal)
  return _internal_medal();
}
inline void CSDTItem::unsafe_arena_set_allocated_medal(
    ::msg::CSDTItemMedal* medal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medal_);
  }
  _impl_.medal_ = medal;
  if (medal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTItem.Medal)
}
inline ::msg::CSDTItemMedal* CSDTItem::release_medal() {
  
  ::msg::CSDTItemMedal* temp = _impl_.medal_;
  _impl_.medal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTItemMedal* CSDTItem::unsafe_arena_release_medal() {
  // @@protoc_insertion_point(field_release:msg.CSDTItem.Medal)
  
  ::msg::CSDTItemMedal* temp = _impl_.medal_;
  _impl_.medal_ = nullptr;
  return temp;
}
inline ::msg::CSDTItemMedal* CSDTItem::_internal_mutable_medal() {
  
  if (_impl_.medal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTItemMedal>(GetArenaForAllocation());
    _impl_.medal_ = p;
  }
  return _impl_.medal_;
}
inline ::msg::CSDTItemMedal* CSDTItem::mutable_medal() {
  ::msg::CSDTItemMedal* _msg = _internal_mutable_medal();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItem.Medal)
  return _msg;
}
inline void CSDTItem::set_allocated_medal(::msg::CSDTItemMedal* medal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.medal_;
  }
  if (medal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(medal);
    if (message_arena != submessage_arena) {
      medal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.medal_ = medal;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItem.Medal)
}

// int64 CreateTime = 7;
inline void CSDTItem::clear_createtime() {
  _impl_.createtime_ = int64_t{0};
}
inline int64_t CSDTItem::_internal_createtime() const {
  return _impl_.createtime_;
}
inline int64_t CSDTItem::createtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.CreateTime)
  return _internal_createtime();
}
inline void CSDTItem::_internal_set_createtime(int64_t value) {
  
  _impl_.createtime_ = value;
}
inline void CSDTItem::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.CreateTime)
}

// int64 GetTime = 8;
inline void CSDTItem::clear_gettime() {
  _impl_.gettime_ = int64_t{0};
}
inline int64_t CSDTItem::_internal_gettime() const {
  return _impl_.gettime_;
}
inline int64_t CSDTItem::gettime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.GetTime)
  return _internal_gettime();
}
inline void CSDTItem::_internal_set_gettime(int64_t value) {
  
  _impl_.gettime_ = value;
}
inline void CSDTItem::set_gettime(int64_t value) {
  _internal_set_gettime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.GetTime)
}

// string Number = 9;
inline void CSDTItem::clear_number() {
  _impl_.number_.ClearToEmpty();
}
inline const std::string& CSDTItem::number() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTItem::set_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTItem.Number)
}
inline std::string* CSDTItem::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItem.Number)
  return _s;
}
inline const std::string& CSDTItem::_internal_number() const {
  return _impl_.number_.Get();
}
inline void CSDTItem::_internal_set_number(const std::string& value) {
  
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTItem::_internal_mutable_number() {
  
  return _impl_.number_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTItem::release_number() {
  // @@protoc_insertion_point(field_release:msg.CSDTItem.Number)
  return _impl_.number_.Release();
}
inline void CSDTItem::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItem.Number)
}

// string Abrasion = 10;
inline void CSDTItem::clear_abrasion() {
  _impl_.abrasion_.ClearToEmpty();
}
inline const std::string& CSDTItem::abrasion() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Abrasion)
  return _internal_abrasion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTItem::set_abrasion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.abrasion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTItem.Abrasion)
}
inline std::string* CSDTItem::mutable_abrasion() {
  std::string* _s = _internal_mutable_abrasion();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItem.Abrasion)
  return _s;
}
inline const std::string& CSDTItem::_internal_abrasion() const {
  return _impl_.abrasion_.Get();
}
inline void CSDTItem::_internal_set_abrasion(const std::string& value) {
  
  _impl_.abrasion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTItem::_internal_mutable_abrasion() {
  
  return _impl_.abrasion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTItem::release_abrasion() {
  // @@protoc_insertion_point(field_release:msg.CSDTItem.Abrasion)
  return _impl_.abrasion_.Release();
}
inline void CSDTItem::set_allocated_abrasion(std::string* abrasion) {
  if (abrasion != nullptr) {
    
  } else {
    
  }
  _impl_.abrasion_.SetAllocated(abrasion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abrasion_.IsDefault()) {
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItem.Abrasion)
}

// map<string, .msg.ItemAffix> Affixs = 11;
inline int CSDTItem::_internal_affixs_size() const {
  return _impl_.affixs_.size();
}
inline int CSDTItem::affixs_size() const {
  return _internal_affixs_size();
}
inline void CSDTItem::clear_affixs() {
  _impl_.affixs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
CSDTItem::_internal_affixs() const {
  return _impl_.affixs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >&
CSDTItem::affixs() const {
  // @@protoc_insertion_point(field_map:msg.CSDTItem.Affixs)
  return _internal_affixs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
CSDTItem::_internal_mutable_affixs() {
  return _impl_.affixs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >*
CSDTItem::mutable_affixs() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTItem.Affixs)
  return _internal_mutable_affixs();
}

// bool Identified = 12;
inline void CSDTItem::clear_identified() {
  _impl_.identified_ = false;
}
inline bool CSDTItem::_internal_identified() const {
  return _impl_.identified_;
}
inline bool CSDTItem::identified() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.Identified)
  return _internal_identified();
}
inline void CSDTItem::_internal_set_identified(bool value) {
  
  _impl_.identified_ = value;
}
inline void CSDTItem::set_identified(bool value) {
  _internal_set_identified(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.Identified)
}

// uint32 TextureId = 13;
inline void CSDTItem::clear_textureid() {
  _impl_.textureid_ = 0u;
}
inline uint32_t CSDTItem::_internal_textureid() const {
  return _impl_.textureid_;
}
inline uint32_t CSDTItem::textureid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItem.TextureId)
  return _internal_textureid();
}
inline void CSDTItem::_internal_set_textureid(uint32_t value) {
  
  _impl_.textureid_ = value;
}
inline void CSDTItem::set_textureid(uint32_t value) {
  _internal_set_textureid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItem.TextureId)
}

// -------------------------------------------------------------------

// ItemAffix

// uint32 Id = 1;
inline void ItemAffix::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ItemAffix::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ItemAffix::id() const {
  // @@protoc_insertion_point(field_get:msg.ItemAffix.Id)
  return _internal_id();
}
inline void ItemAffix::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ItemAffix::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ItemAffix.Id)
}

// float Value = 2;
inline void ItemAffix::clear_value() {
  _impl_.value_ = 0;
}
inline float ItemAffix::_internal_value() const {
  return _impl_.value_;
}
inline float ItemAffix::value() const {
  // @@protoc_insertion_point(field_get:msg.ItemAffix.Value)
  return _internal_value();
}
inline void ItemAffix::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void ItemAffix::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:msg.ItemAffix.Value)
}

// uint32 SourceItemId = 3;
inline void ItemAffix::clear_sourceitemid() {
  _impl_.sourceitemid_ = 0u;
}
inline uint32_t ItemAffix::_internal_sourceitemid() const {
  return _impl_.sourceitemid_;
}
inline uint32_t ItemAffix::sourceitemid() const {
  // @@protoc_insertion_point(field_get:msg.ItemAffix.SourceItemId)
  return _internal_sourceitemid();
}
inline void ItemAffix::_internal_set_sourceitemid(uint32_t value) {
  
  _impl_.sourceitemid_ = value;
}
inline void ItemAffix::set_sourceitemid(uint32_t value) {
  _internal_set_sourceitemid(value);
  // @@protoc_insertion_point(field_set:msg.ItemAffix.SourceItemId)
}

// .msg.ITEMTYPE SourceItemType = 4;
inline void ItemAffix::clear_sourceitemtype() {
  _impl_.sourceitemtype_ = 0;
}
inline ::msg::ITEMTYPE ItemAffix::_internal_sourceitemtype() const {
  return static_cast< ::msg::ITEMTYPE >(_impl_.sourceitemtype_);
}
inline ::msg::ITEMTYPE ItemAffix::sourceitemtype() const {
  // @@protoc_insertion_point(field_get:msg.ItemAffix.SourceItemType)
  return _internal_sourceitemtype();
}
inline void ItemAffix::_internal_set_sourceitemtype(::msg::ITEMTYPE value) {
  
  _impl_.sourceitemtype_ = value;
}
inline void ItemAffix::set_sourceitemtype(::msg::ITEMTYPE value) {
  _internal_set_sourceitemtype(value);
  // @@protoc_insertion_point(field_set:msg.ItemAffix.SourceItemType)
}

// -------------------------------------------------------------------

// CSDTItemMedal

// int64 CreateTime = 1;
inline void CSDTItemMedal::clear_createtime() {
  _impl_.createtime_ = int64_t{0};
}
inline int64_t CSDTItemMedal::_internal_createtime() const {
  return _impl_.createtime_;
}
inline int64_t CSDTItemMedal::createtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemMedal.CreateTime)
  return _internal_createtime();
}
inline void CSDTItemMedal::_internal_set_createtime(int64_t value) {
  
  _impl_.createtime_ = value;
}
inline void CSDTItemMedal::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItemMedal.CreateTime)
}

// int64 Score = 2;
inline void CSDTItemMedal::clear_score() {
  _impl_.score_ = int64_t{0};
}
inline int64_t CSDTItemMedal::_internal_score() const {
  return _impl_.score_;
}
inline int64_t CSDTItemMedal::score() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemMedal.Score)
  return _internal_score();
}
inline void CSDTItemMedal::_internal_set_score(int64_t value) {
  
  _impl_.score_ = value;
}
inline void CSDTItemMedal::set_score(int64_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItemMedal.Score)
}

// string Number = 3;
inline void CSDTItemMedal::clear_number() {
  _impl_.number_.ClearToEmpty();
}
inline const std::string& CSDTItemMedal::number() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemMedal.Number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTItemMedal::set_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTItemMedal.Number)
}
inline std::string* CSDTItemMedal::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItemMedal.Number)
  return _s;
}
inline const std::string& CSDTItemMedal::_internal_number() const {
  return _impl_.number_.Get();
}
inline void CSDTItemMedal::_internal_set_number(const std::string& value) {
  
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTItemMedal::_internal_mutable_number() {
  
  return _impl_.number_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTItemMedal::release_number() {
  // @@protoc_insertion_point(field_release:msg.CSDTItemMedal.Number)
  return _impl_.number_.Release();
}
inline void CSDTItemMedal::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItemMedal.Number)
}

// int64 SeasonId = 4;
inline void CSDTItemMedal::clear_seasonid() {
  _impl_.seasonid_ = int64_t{0};
}
inline int64_t CSDTItemMedal::_internal_seasonid() const {
  return _impl_.seasonid_;
}
inline int64_t CSDTItemMedal::seasonid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemMedal.SeasonId)
  return _internal_seasonid();
}
inline void CSDTItemMedal::_internal_set_seasonid(int64_t value) {
  
  _impl_.seasonid_ = value;
}
inline void CSDTItemMedal::set_seasonid(int64_t value) {
  _internal_set_seasonid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItemMedal.SeasonId)
}

// -------------------------------------------------------------------

// CSDTItemID

// uint32 Id = 1;
inline void CSDTItemID::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTItemID::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTItemID::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemID.Id)
  return _internal_id();
}
inline void CSDTItemID::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTItemID::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItemID.Id)
}

// string InstanceId = 2;
inline void CSDTItemID::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& CSDTItemID::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemID.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTItemID::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTItemID.InstanceId)
}
inline std::string* CSDTItemID::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItemID.InstanceId)
  return _s;
}
inline const std::string& CSDTItemID::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void CSDTItemID::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTItemID::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTItemID::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.CSDTItemID.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void CSDTItemID::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItemID.InstanceId)
}

// bool IsMedal = 3;
inline void CSDTItemID::clear_ismedal() {
  _impl_.ismedal_ = false;
}
inline bool CSDTItemID::_internal_ismedal() const {
  return _impl_.ismedal_;
}
inline bool CSDTItemID::ismedal() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemID.IsMedal)
  return _internal_ismedal();
}
inline void CSDTItemID::_internal_set_ismedal(bool value) {
  
  _impl_.ismedal_ = value;
}
inline void CSDTItemID::set_ismedal(bool value) {
  _internal_set_ismedal(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItemID.IsMedal)
}

// uint32 Count = 4;
inline void CSDTItemID::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t CSDTItemID::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CSDTItemID::count() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemID.Count)
  return _internal_count();
}
inline void CSDTItemID::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void CSDTItemID::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.CSDTItemID.Count)
}

// string Abrasion = 5;
inline void CSDTItemID::clear_abrasion() {
  _impl_.abrasion_.ClearToEmpty();
}
inline const std::string& CSDTItemID::abrasion() const {
  // @@protoc_insertion_point(field_get:msg.CSDTItemID.Abrasion)
  return _internal_abrasion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTItemID::set_abrasion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.abrasion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTItemID.Abrasion)
}
inline std::string* CSDTItemID::mutable_abrasion() {
  std::string* _s = _internal_mutable_abrasion();
  // @@protoc_insertion_point(field_mutable:msg.CSDTItemID.Abrasion)
  return _s;
}
inline const std::string& CSDTItemID::_internal_abrasion() const {
  return _impl_.abrasion_.Get();
}
inline void CSDTItemID::_internal_set_abrasion(const std::string& value) {
  
  _impl_.abrasion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTItemID::_internal_mutable_abrasion() {
  
  return _impl_.abrasion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTItemID::release_abrasion() {
  // @@protoc_insertion_point(field_release:msg.CSDTItemID.Abrasion)
  return _impl_.abrasion_.Release();
}
inline void CSDTItemID::set_allocated_abrasion(std::string* abrasion) {
  if (abrasion != nullptr) {
    
  } else {
    
  }
  _impl_.abrasion_.SetAllocated(abrasion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abrasion_.IsDefault()) {
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTItemID.Abrasion)
}

// -------------------------------------------------------------------

// CSDTBagPara

// .msg.SOURCE Source = 1;
inline void CSDTBagPara::clear_source() {
  _impl_.source_ = 0;
}
inline ::msg::SOURCE CSDTBagPara::_internal_source() const {
  return static_cast< ::msg::SOURCE >(_impl_.source_);
}
inline ::msg::SOURCE CSDTBagPara::source() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagPara.Source)
  return _internal_source();
}
inline void CSDTBagPara::_internal_set_source(::msg::SOURCE value) {
  
  _impl_.source_ = value;
}
inline void CSDTBagPara::set_source(::msg::SOURCE value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBagPara.Source)
}

// uint32 SubSource = 2;
inline void CSDTBagPara::clear_subsource() {
  _impl_.subsource_ = 0u;
}
inline uint32_t CSDTBagPara::_internal_subsource() const {
  return _impl_.subsource_;
}
inline uint32_t CSDTBagPara::subsource() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagPara.SubSource)
  return _internal_subsource();
}
inline void CSDTBagPara::_internal_set_subsource(uint32_t value) {
  
  _impl_.subsource_ = value;
}
inline void CSDTBagPara::set_subsource(uint32_t value) {
  _internal_set_subsource(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBagPara.SubSource)
}

// bool TriggerEvent = 3;
inline void CSDTBagPara::clear_triggerevent() {
  _impl_.triggerevent_ = false;
}
inline bool CSDTBagPara::_internal_triggerevent() const {
  return _impl_.triggerevent_;
}
inline bool CSDTBagPara::triggerevent() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagPara.TriggerEvent)
  return _internal_triggerevent();
}
inline void CSDTBagPara::_internal_set_triggerevent(bool value) {
  
  _impl_.triggerevent_ = value;
}
inline void CSDTBagPara::set_triggerevent(bool value) {
  _internal_set_triggerevent(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBagPara.TriggerEvent)
}

// bool NewGet = 4;
inline void CSDTBagPara::clear_newget() {
  _impl_.newget_ = false;
}
inline bool CSDTBagPara::_internal_newget() const {
  return _impl_.newget_;
}
inline bool CSDTBagPara::newget() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagPara.NewGet)
  return _internal_newget();
}
inline void CSDTBagPara::_internal_set_newget(bool value) {
  
  _impl_.newget_ = value;
}
inline void CSDTBagPara::set_newget(bool value) {
  _internal_set_newget(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBagPara.NewGet)
}

// string OrderId = 5;
inline void CSDTBagPara::clear_orderid() {
  _impl_.orderid_.ClearToEmpty();
}
inline const std::string& CSDTBagPara::orderid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagPara.OrderId)
  return _internal_orderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTBagPara::set_orderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.orderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTBagPara.OrderId)
}
inline std::string* CSDTBagPara::mutable_orderid() {
  std::string* _s = _internal_mutable_orderid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBagPara.OrderId)
  return _s;
}
inline const std::string& CSDTBagPara::_internal_orderid() const {
  return _impl_.orderid_.Get();
}
inline void CSDTBagPara::_internal_set_orderid(const std::string& value) {
  
  _impl_.orderid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTBagPara::_internal_mutable_orderid() {
  
  return _impl_.orderid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTBagPara::release_orderid() {
  // @@protoc_insertion_point(field_release:msg.CSDTBagPara.OrderId)
  return _impl_.orderid_.Release();
}
inline void CSDTBagPara::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  _impl_.orderid_.SetAllocated(orderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.orderid_.IsDefault()) {
    _impl_.orderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBagPara.OrderId)
}

// int64 AddTime = 6;
inline void CSDTBagPara::clear_addtime() {
  _impl_.addtime_ = int64_t{0};
}
inline int64_t CSDTBagPara::_internal_addtime() const {
  return _impl_.addtime_;
}
inline int64_t CSDTBagPara::addtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagPara.AddTime)
  return _internal_addtime();
}
inline void CSDTBagPara::_internal_set_addtime(int64_t value) {
  
  _impl_.addtime_ = value;
}
inline void CSDTBagPara::set_addtime(int64_t value) {
  _internal_set_addtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBagPara.AddTime)
}

// -------------------------------------------------------------------

// CSDTBagItem

// .msg.CSDTItem Item = 1;
inline bool CSDTBagItem::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool CSDTBagItem::has_item() const {
  return _internal_has_item();
}
inline void CSDTBagItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
inline const ::msg::CSDTItem& CSDTBagItem::_internal_item() const {
  const ::msg::CSDTItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTItem&>(
      ::msg::_CSDTItem_default_instance_);
}
inline const ::msg::CSDTItem& CSDTBagItem::item() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagItem.Item)
  return _internal_item();
}
inline void CSDTBagItem::unsafe_arena_set_allocated_item(
    ::msg::CSDTItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTBagItem.Item)
}
inline ::msg::CSDTItem* CSDTBagItem::release_item() {
  
  ::msg::CSDTItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTItem* CSDTBagItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:msg.CSDTBagItem.Item)
  
  ::msg::CSDTItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::msg::CSDTItem* CSDTBagItem::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::msg::CSDTItem* CSDTBagItem::mutable_item() {
  ::msg::CSDTItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBagItem.Item)
  return _msg;
}
inline void CSDTBagItem::set_allocated_item(::msg::CSDTItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBagItem.Item)
}

// .msg.CSDTBagPara Para = 2;
inline bool CSDTBagItem::_internal_has_para() const {
  return this != internal_default_instance() && _impl_.para_ != nullptr;
}
inline bool CSDTBagItem::has_para() const {
  return _internal_has_para();
}
inline void CSDTBagItem::clear_para() {
  if (GetArenaForAllocation() == nullptr && _impl_.para_ != nullptr) {
    delete _impl_.para_;
  }
  _impl_.para_ = nullptr;
}
inline const ::msg::CSDTBagPara& CSDTBagItem::_internal_para() const {
  const ::msg::CSDTBagPara* p = _impl_.para_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTBagPara&>(
      ::msg::_CSDTBagPara_default_instance_);
}
inline const ::msg::CSDTBagPara& CSDTBagItem::para() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBagItem.Para)
  return _internal_para();
}
inline void CSDTBagItem::unsafe_arena_set_allocated_para(
    ::msg::CSDTBagPara* para) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.para_);
  }
  _impl_.para_ = para;
  if (para) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTBagItem.Para)
}
inline ::msg::CSDTBagPara* CSDTBagItem::release_para() {
  
  ::msg::CSDTBagPara* temp = _impl_.para_;
  _impl_.para_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTBagPara* CSDTBagItem::unsafe_arena_release_para() {
  // @@protoc_insertion_point(field_release:msg.CSDTBagItem.Para)
  
  ::msg::CSDTBagPara* temp = _impl_.para_;
  _impl_.para_ = nullptr;
  return temp;
}
inline ::msg::CSDTBagPara* CSDTBagItem::_internal_mutable_para() {
  
  if (_impl_.para_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTBagPara>(GetArenaForAllocation());
    _impl_.para_ = p;
  }
  return _impl_.para_;
}
inline ::msg::CSDTBagPara* CSDTBagItem::mutable_para() {
  ::msg::CSDTBagPara* _msg = _internal_mutable_para();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBagItem.Para)
  return _msg;
}
inline void CSDTBagItem::set_allocated_para(::msg::CSDTBagPara* para) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.para_;
  }
  if (para) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(para);
    if (message_arena != submessage_arena) {
      para = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, para, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.para_ = para;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBagItem.Para)
}

// -------------------------------------------------------------------

// CSDTPlayerStatusInfo

// string Id = 1;
inline void CSDTPlayerStatusInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTPlayerStatusInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerStatusInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.Id)
}
inline std::string* CSDTPlayerStatusInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerStatusInfo.Id)
  return _s;
}
inline const std::string& CSDTPlayerStatusInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTPlayerStatusInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerStatusInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerStatusInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerStatusInfo.Id)
  return _impl_.id_.Release();
}
inline void CSDTPlayerStatusInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerStatusInfo.Id)
}

// .msg.PLAYERSTATUS PlayerStatus = 2;
inline void CSDTPlayerStatusInfo::clear_playerstatus() {
  _impl_.playerstatus_ = 0;
}
inline ::msg::PLAYERSTATUS CSDTPlayerStatusInfo::_internal_playerstatus() const {
  return static_cast< ::msg::PLAYERSTATUS >(_impl_.playerstatus_);
}
inline ::msg::PLAYERSTATUS CSDTPlayerStatusInfo::playerstatus() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.PlayerStatus)
  return _internal_playerstatus();
}
inline void CSDTPlayerStatusInfo::_internal_set_playerstatus(::msg::PLAYERSTATUS value) {
  
  _impl_.playerstatus_ = value;
}
inline void CSDTPlayerStatusInfo::set_playerstatus(::msg::PLAYERSTATUS value) {
  _internal_set_playerstatus(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.PlayerStatus)
}

// uint32 MapId = 3;
inline void CSDTPlayerStatusInfo::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t CSDTPlayerStatusInfo::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t CSDTPlayerStatusInfo::mapid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.MapId)
  return _internal_mapid();
}
inline void CSDTPlayerStatusInfo::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void CSDTPlayerStatusInfo::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.MapId)
}

// string ApkVersion = 4;
inline void CSDTPlayerStatusInfo::clear_apkversion() {
  _impl_.apkversion_.ClearToEmpty();
}
inline const std::string& CSDTPlayerStatusInfo::apkversion() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.ApkVersion)
  return _internal_apkversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerStatusInfo::set_apkversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apkversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.ApkVersion)
}
inline std::string* CSDTPlayerStatusInfo::mutable_apkversion() {
  std::string* _s = _internal_mutable_apkversion();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerStatusInfo.ApkVersion)
  return _s;
}
inline const std::string& CSDTPlayerStatusInfo::_internal_apkversion() const {
  return _impl_.apkversion_.Get();
}
inline void CSDTPlayerStatusInfo::_internal_set_apkversion(const std::string& value) {
  
  _impl_.apkversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerStatusInfo::_internal_mutable_apkversion() {
  
  return _impl_.apkversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerStatusInfo::release_apkversion() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerStatusInfo.ApkVersion)
  return _impl_.apkversion_.Release();
}
inline void CSDTPlayerStatusInfo::set_allocated_apkversion(std::string* apkversion) {
  if (apkversion != nullptr) {
    
  } else {
    
  }
  _impl_.apkversion_.SetAllocated(apkversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apkversion_.IsDefault()) {
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerStatusInfo.ApkVersion)
}

// .msg.PLATFORMTYPE PlatFormType = 5;
inline void CSDTPlayerStatusInfo::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE CSDTPlayerStatusInfo::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE CSDTPlayerStatusInfo::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.PlatFormType)
  return _internal_platformtype();
}
inline void CSDTPlayerStatusInfo::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void CSDTPlayerStatusInfo::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.PlatFormType)
}

// uint32 HallServerId = 6;
inline void CSDTPlayerStatusInfo::clear_hallserverid() {
  _impl_.hallserverid_ = 0u;
}
inline uint32_t CSDTPlayerStatusInfo::_internal_hallserverid() const {
  return _impl_.hallserverid_;
}
inline uint32_t CSDTPlayerStatusInfo::hallserverid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.HallServerId)
  return _internal_hallserverid();
}
inline void CSDTPlayerStatusInfo::_internal_set_hallserverid(uint32_t value) {
  
  _impl_.hallserverid_ = value;
}
inline void CSDTPlayerStatusInfo::set_hallserverid(uint32_t value) {
  _internal_set_hallserverid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.HallServerId)
}

// .msg.FRIENDINVISIBLE FriendInvisible = 7;
inline void CSDTPlayerStatusInfo::clear_friendinvisible() {
  _impl_.friendinvisible_ = 0;
}
inline ::msg::FRIENDINVISIBLE CSDTPlayerStatusInfo::_internal_friendinvisible() const {
  return static_cast< ::msg::FRIENDINVISIBLE >(_impl_.friendinvisible_);
}
inline ::msg::FRIENDINVISIBLE CSDTPlayerStatusInfo::friendinvisible() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.FriendInvisible)
  return _internal_friendinvisible();
}
inline void CSDTPlayerStatusInfo::_internal_set_friendinvisible(::msg::FRIENDINVISIBLE value) {
  
  _impl_.friendinvisible_ = value;
}
inline void CSDTPlayerStatusInfo::set_friendinvisible(::msg::FRIENDINVISIBLE value) {
  _internal_set_friendinvisible(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.FriendInvisible)
}

// uint64 ObservePvpId = 8;
inline void CSDTPlayerStatusInfo::clear_observepvpid() {
  _impl_.observepvpid_ = uint64_t{0u};
}
inline uint64_t CSDTPlayerStatusInfo::_internal_observepvpid() const {
  return _impl_.observepvpid_;
}
inline uint64_t CSDTPlayerStatusInfo::observepvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.ObservePvpId)
  return _internal_observepvpid();
}
inline void CSDTPlayerStatusInfo::_internal_set_observepvpid(uint64_t value) {
  
  _impl_.observepvpid_ = value;
}
inline void CSDTPlayerStatusInfo::set_observepvpid(uint64_t value) {
  _internal_set_observepvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.ObservePvpId)
}

// .msg.PVPMODE ObservePvpMod = 20;
inline void CSDTPlayerStatusInfo::clear_observepvpmod() {
  _impl_.observepvpmod_ = 0;
}
inline ::msg::PVPMODE CSDTPlayerStatusInfo::_internal_observepvpmod() const {
  return static_cast< ::msg::PVPMODE >(_impl_.observepvpmod_);
}
inline ::msg::PVPMODE CSDTPlayerStatusInfo::observepvpmod() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.ObservePvpMod)
  return _internal_observepvpmod();
}
inline void CSDTPlayerStatusInfo::_internal_set_observepvpmod(::msg::PVPMODE value) {
  
  _impl_.observepvpmod_ = value;
}
inline void CSDTPlayerStatusInfo::set_observepvpmod(::msg::PVPMODE value) {
  _internal_set_observepvpmod(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.ObservePvpMod)
}

// bool ChangeFriendInvisible = 9;
inline void CSDTPlayerStatusInfo::clear_changefriendinvisible() {
  _impl_.changefriendinvisible_ = false;
}
inline bool CSDTPlayerStatusInfo::_internal_changefriendinvisible() const {
  return _impl_.changefriendinvisible_;
}
inline bool CSDTPlayerStatusInfo::changefriendinvisible() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.ChangeFriendInvisible)
  return _internal_changefriendinvisible();
}
inline void CSDTPlayerStatusInfo::_internal_set_changefriendinvisible(bool value) {
  
  _impl_.changefriendinvisible_ = value;
}
inline void CSDTPlayerStatusInfo::set_changefriendinvisible(bool value) {
  _internal_set_changefriendinvisible(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.ChangeFriendInvisible)
}

// uint32 MapPlaying = 10;
inline void CSDTPlayerStatusInfo::clear_mapplaying() {
  _impl_.mapplaying_ = 0u;
}
inline uint32_t CSDTPlayerStatusInfo::_internal_mapplaying() const {
  return _impl_.mapplaying_;
}
inline uint32_t CSDTPlayerStatusInfo::mapplaying() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.MapPlaying)
  return _internal_mapplaying();
}
inline void CSDTPlayerStatusInfo::_internal_set_mapplaying(uint32_t value) {
  
  _impl_.mapplaying_ = value;
}
inline void CSDTPlayerStatusInfo::set_mapplaying(uint32_t value) {
  _internal_set_mapplaying(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.MapPlaying)
}

// bool ChangePsOnly = 11;
inline void CSDTPlayerStatusInfo::clear_changepsonly() {
  _impl_.changepsonly_ = false;
}
inline bool CSDTPlayerStatusInfo::_internal_changepsonly() const {
  return _impl_.changepsonly_;
}
inline bool CSDTPlayerStatusInfo::changepsonly() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.ChangePsOnly)
  return _internal_changepsonly();
}
inline void CSDTPlayerStatusInfo::_internal_set_changepsonly(bool value) {
  
  _impl_.changepsonly_ = value;
}
inline void CSDTPlayerStatusInfo::set_changepsonly(bool value) {
  _internal_set_changepsonly(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.ChangePsOnly)
}

// bool PsOnly = 12;
inline void CSDTPlayerStatusInfo::clear_psonly() {
  _impl_.psonly_ = false;
}
inline bool CSDTPlayerStatusInfo::_internal_psonly() const {
  return _impl_.psonly_;
}
inline bool CSDTPlayerStatusInfo::psonly() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.PsOnly)
  return _internal_psonly();
}
inline void CSDTPlayerStatusInfo::_internal_set_psonly(bool value) {
  
  _impl_.psonly_ = value;
}
inline void CSDTPlayerStatusInfo::set_psonly(bool value) {
  _internal_set_psonly(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.PsOnly)
}

// string ServiceVersion = 13;
inline void CSDTPlayerStatusInfo::clear_serviceversion() {
  _impl_.serviceversion_.ClearToEmpty();
}
inline const std::string& CSDTPlayerStatusInfo::serviceversion() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.ServiceVersion)
  return _internal_serviceversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerStatusInfo::set_serviceversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.ServiceVersion)
}
inline std::string* CSDTPlayerStatusInfo::mutable_serviceversion() {
  std::string* _s = _internal_mutable_serviceversion();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerStatusInfo.ServiceVersion)
  return _s;
}
inline const std::string& CSDTPlayerStatusInfo::_internal_serviceversion() const {
  return _impl_.serviceversion_.Get();
}
inline void CSDTPlayerStatusInfo::_internal_set_serviceversion(const std::string& value) {
  
  _impl_.serviceversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerStatusInfo::_internal_mutable_serviceversion() {
  
  return _impl_.serviceversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerStatusInfo::release_serviceversion() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerStatusInfo.ServiceVersion)
  return _impl_.serviceversion_.Release();
}
inline void CSDTPlayerStatusInfo::set_allocated_serviceversion(std::string* serviceversion) {
  if (serviceversion != nullptr) {
    
  } else {
    
  }
  _impl_.serviceversion_.SetAllocated(serviceversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceversion_.IsDefault()) {
    _impl_.serviceversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerStatusInfo.ServiceVersion)
}

// .msg.LOGINSOURCE LoginSource = 14;
inline void CSDTPlayerStatusInfo::clear_loginsource() {
  _impl_.loginsource_ = 0;
}
inline ::msg::LOGINSOURCE CSDTPlayerStatusInfo::_internal_loginsource() const {
  return static_cast< ::msg::LOGINSOURCE >(_impl_.loginsource_);
}
inline ::msg::LOGINSOURCE CSDTPlayerStatusInfo::loginsource() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerStatusInfo.LoginSource)
  return _internal_loginsource();
}
inline void CSDTPlayerStatusInfo::_internal_set_loginsource(::msg::LOGINSOURCE value) {
  
  _impl_.loginsource_ = value;
}
inline void CSDTPlayerStatusInfo::set_loginsource(::msg::LOGINSOURCE value) {
  _internal_set_loginsource(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerStatusInfo.LoginSource)
}

// -------------------------------------------------------------------

// CSDTPvpWinData

// .msg.WINTYPE WinType = 1;
inline void CSDTPvpWinData::clear_wintype() {
  _impl_.wintype_ = 0;
}
inline ::msg::WINTYPE CSDTPvpWinData::_internal_wintype() const {
  return static_cast< ::msg::WINTYPE >(_impl_.wintype_);
}
inline ::msg::WINTYPE CSDTPvpWinData::wintype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpWinData.WinType)
  return _internal_wintype();
}
inline void CSDTPvpWinData::_internal_set_wintype(::msg::WINTYPE value) {
  
  _impl_.wintype_ = value;
}
inline void CSDTPvpWinData::set_wintype(::msg::WINTYPE value) {
  _internal_set_wintype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpWinData.WinType)
}

// uint32 ResultCnt = 2;
inline void CSDTPvpWinData::clear_resultcnt() {
  _impl_.resultcnt_ = 0u;
}
inline uint32_t CSDTPvpWinData::_internal_resultcnt() const {
  return _impl_.resultcnt_;
}
inline uint32_t CSDTPvpWinData::resultcnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpWinData.ResultCnt)
  return _internal_resultcnt();
}
inline void CSDTPvpWinData::_internal_set_resultcnt(uint32_t value) {
  
  _impl_.resultcnt_ = value;
}
inline void CSDTPvpWinData::set_resultcnt(uint32_t value) {
  _internal_set_resultcnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpWinData.ResultCnt)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTChessPlrInfo

// uint32 Id = 1;
inline void CSDTChessPlrInfo::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTChessPlrInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTChessPlrInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlrInfo.Id)
  return _internal_id();
}
inline void CSDTChessPlrInfo::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTChessPlrInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlrInfo.Id)
}

// map<uint32, uint32> Equips = 2;
inline int CSDTChessPlrInfo::_internal_equips_size() const {
  return _impl_.equips_.size();
}
inline int CSDTChessPlrInfo::equips_size() const {
  return _internal_equips_size();
}
inline void CSDTChessPlrInfo::clear_equips() {
  _impl_.equips_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTChessPlrInfo::_internal_equips() const {
  return _impl_.equips_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTChessPlrInfo::equips() const {
  // @@protoc_insertion_point(field_map:msg.CSDTChessPlrInfo.Equips)
  return _internal_equips();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTChessPlrInfo::_internal_mutable_equips() {
  return _impl_.equips_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTChessPlrInfo::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTChessPlrInfo.Equips)
  return _internal_mutable_equips();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTPuzzle

// repeated uint32 OpenMap = 1;
inline int CSDTPuzzle::_internal_openmap_size() const {
  return _impl_.openmap_.size();
}
inline int CSDTPuzzle::openmap_size() const {
  return _internal_openmap_size();
}
inline void CSDTPuzzle::clear_openmap() {
  _impl_.openmap_.Clear();
}
inline uint32_t CSDTPuzzle::_internal_openmap(int index) const {
  return _impl_.openmap_.Get(index);
}
inline uint32_t CSDTPuzzle::openmap(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPuzzle.OpenMap)
  return _internal_openmap(index);
}
inline void CSDTPuzzle::set_openmap(int index, uint32_t value) {
  _impl_.openmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPuzzle.OpenMap)
}
inline void CSDTPuzzle::_internal_add_openmap(uint32_t value) {
  _impl_.openmap_.Add(value);
}
inline void CSDTPuzzle::add_openmap(uint32_t value) {
  _internal_add_openmap(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPuzzle.OpenMap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPuzzle::_internal_openmap() const {
  return _impl_.openmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPuzzle::openmap() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPuzzle.OpenMap)
  return _internal_openmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPuzzle::_internal_mutable_openmap() {
  return &_impl_.openmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPuzzle::mutable_openmap() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPuzzle.OpenMap)
  return _internal_mutable_openmap();
}

// repeated uint32 GroupAward = 2;
inline int CSDTPuzzle::_internal_groupaward_size() const {
  return _impl_.groupaward_.size();
}
inline int CSDTPuzzle::groupaward_size() const {
  return _internal_groupaward_size();
}
inline void CSDTPuzzle::clear_groupaward() {
  _impl_.groupaward_.Clear();
}
inline uint32_t CSDTPuzzle::_internal_groupaward(int index) const {
  return _impl_.groupaward_.Get(index);
}
inline uint32_t CSDTPuzzle::groupaward(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPuzzle.GroupAward)
  return _internal_groupaward(index);
}
inline void CSDTPuzzle::set_groupaward(int index, uint32_t value) {
  _impl_.groupaward_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPuzzle.GroupAward)
}
inline void CSDTPuzzle::_internal_add_groupaward(uint32_t value) {
  _impl_.groupaward_.Add(value);
}
inline void CSDTPuzzle::add_groupaward(uint32_t value) {
  _internal_add_groupaward(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPuzzle.GroupAward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPuzzle::_internal_groupaward() const {
  return _impl_.groupaward_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPuzzle::groupaward() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPuzzle.GroupAward)
  return _internal_groupaward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPuzzle::_internal_mutable_groupaward() {
  return &_impl_.groupaward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPuzzle::mutable_groupaward() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPuzzle.GroupAward)
  return _internal_mutable_groupaward();
}

// map<uint32, int32> ItemMap = 3;
inline int CSDTPuzzle::_internal_itemmap_size() const {
  return _impl_.itemmap_.size();
}
inline int CSDTPuzzle::itemmap_size() const {
  return _internal_itemmap_size();
}
inline void CSDTPuzzle::clear_itemmap() {
  _impl_.itemmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
CSDTPuzzle::_internal_itemmap() const {
  return _impl_.itemmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
CSDTPuzzle::itemmap() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPuzzle.ItemMap)
  return _internal_itemmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
CSDTPuzzle::_internal_mutable_itemmap() {
  return _impl_.itemmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
CSDTPuzzle::mutable_itemmap() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPuzzle.ItemMap)
  return _internal_mutable_itemmap();
}

// repeated uint32 AwardPool = 4;
inline int CSDTPuzzle::_internal_awardpool_size() const {
  return _impl_.awardpool_.size();
}
inline int CSDTPuzzle::awardpool_size() const {
  return _internal_awardpool_size();
}
inline void CSDTPuzzle::clear_awardpool() {
  _impl_.awardpool_.Clear();
}
inline uint32_t CSDTPuzzle::_internal_awardpool(int index) const {
  return _impl_.awardpool_.Get(index);
}
inline uint32_t CSDTPuzzle::awardpool(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPuzzle.AwardPool)
  return _internal_awardpool(index);
}
inline void CSDTPuzzle::set_awardpool(int index, uint32_t value) {
  _impl_.awardpool_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPuzzle.AwardPool)
}
inline void CSDTPuzzle::_internal_add_awardpool(uint32_t value) {
  _impl_.awardpool_.Add(value);
}
inline void CSDTPuzzle::add_awardpool(uint32_t value) {
  _internal_add_awardpool(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPuzzle.AwardPool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPuzzle::_internal_awardpool() const {
  return _impl_.awardpool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPuzzle::awardpool() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPuzzle.AwardPool)
  return _internal_awardpool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPuzzle::_internal_mutable_awardpool() {
  return &_impl_.awardpool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPuzzle::mutable_awardpool() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPuzzle.AwardPool)
  return _internal_mutable_awardpool();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChessSkinSlotData

// map<string, .msg.CSDTItem> Slots = 1;
inline int ChessSkinSlotData::_internal_slots_size() const {
  return _impl_.slots_.size();
}
inline int ChessSkinSlotData::slots_size() const {
  return _internal_slots_size();
}
inline void ChessSkinSlotData::clear_slots() {
  _impl_.slots_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >&
ChessSkinSlotData::_internal_slots() const {
  return _impl_.slots_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >&
ChessSkinSlotData::slots() const {
  // @@protoc_insertion_point(field_map:msg.ChessSkinSlotData.Slots)
  return _internal_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >*
ChessSkinSlotData::_internal_mutable_slots() {
  return _impl_.slots_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >*
ChessSkinSlotData::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_map:msg.ChessSkinSlotData.Slots)
  return _internal_mutable_slots();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PvpPlayerData

// string Id = 1;
inline void PvpPlayerData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::id() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Id)
}
inline std::string* PvpPlayerData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.Id)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PvpPlayerData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_id() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.Id)
  return _impl_.id_.Release();
}
inline void PvpPlayerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.Id)
}

// string UsrName = 2;
inline void PvpPlayerData::clear_usrname() {
  _impl_.usrname_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::usrname() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.UsrName)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usrname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.UsrName)
}
inline std::string* PvpPlayerData::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.UsrName)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_usrname() const {
  return _impl_.usrname_.Get();
}
inline void PvpPlayerData::_internal_set_usrname(const std::string& value) {
  
  _impl_.usrname_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_usrname() {
  
  return _impl_.usrname_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_usrname() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.UsrName)
  return _impl_.usrname_.Release();
}
inline void PvpPlayerData::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  _impl_.usrname_.SetAllocated(usrname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usrname_.IsDefault()) {
    _impl_.usrname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.UsrName)
}

// uint32 Index = 3;
inline void PvpPlayerData::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t PvpPlayerData::index() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Index)
  return _internal_index();
}
inline void PvpPlayerData::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void PvpPlayerData::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Index)
}

// uint32 Camp = 4;
inline void PvpPlayerData::clear_camp() {
  _impl_.camp_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_camp() const {
  return _impl_.camp_;
}
inline uint32_t PvpPlayerData::camp() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Camp)
  return _internal_camp();
}
inline void PvpPlayerData::_internal_set_camp(uint32_t value) {
  
  _impl_.camp_ = value;
}
inline void PvpPlayerData::set_camp(uint32_t value) {
  _internal_set_camp(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Camp)
}

// bool IsRobot = 5;
inline void PvpPlayerData::clear_isrobot() {
  _impl_.isrobot_ = false;
}
inline bool PvpPlayerData::_internal_isrobot() const {
  return _impl_.isrobot_;
}
inline bool PvpPlayerData::isrobot() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.IsRobot)
  return _internal_isrobot();
}
inline void PvpPlayerData::_internal_set_isrobot(bool value) {
  
  _impl_.isrobot_ = value;
}
inline void PvpPlayerData::set_isrobot(bool value) {
  _internal_set_isrobot(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.IsRobot)
}

// uint32 CompetitionCnt = 6;
inline void PvpPlayerData::clear_competitioncnt() {
  _impl_.competitioncnt_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_competitioncnt() const {
  return _impl_.competitioncnt_;
}
inline uint32_t PvpPlayerData::competitioncnt() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CompetitionCnt)
  return _internal_competitioncnt();
}
inline void PvpPlayerData::_internal_set_competitioncnt(uint32_t value) {
  
  _impl_.competitioncnt_ = value;
}
inline void PvpPlayerData::set_competitioncnt(uint32_t value) {
  _internal_set_competitioncnt(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.CompetitionCnt)
}

// uint32 HeadPic = 7;
inline void PvpPlayerData::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t PvpPlayerData::headpic() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.HeadPic)
  return _internal_headpic();
}
inline void PvpPlayerData::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void PvpPlayerData::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.HeadPic)
}

// uint32 TeamPlayerNum = 8;
inline void PvpPlayerData::clear_teamplayernum() {
  _impl_.teamplayernum_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_teamplayernum() const {
  return _impl_.teamplayernum_;
}
inline uint32_t PvpPlayerData::teamplayernum() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamPlayerNum)
  return _internal_teamplayernum();
}
inline void PvpPlayerData::_internal_set_teamplayernum(uint32_t value) {
  
  _impl_.teamplayernum_ = value;
}
inline void PvpPlayerData::set_teamplayernum(uint32_t value) {
  _internal_set_teamplayernum(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamPlayerNum)
}

// uint32 MMR = 9;
inline void PvpPlayerData::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t PvpPlayerData::mmr() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.MMR)
  return _internal_mmr();
}
inline void PvpPlayerData::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void PvpPlayerData::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.MMR)
}

// uint32 Lvl = 10;
inline void PvpPlayerData::clear_lvl() {
  _impl_.lvl_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_lvl() const {
  return _impl_.lvl_;
}
inline uint32_t PvpPlayerData::lvl() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Lvl)
  return _internal_lvl();
}
inline void PvpPlayerData::_internal_set_lvl(uint32_t value) {
  
  _impl_.lvl_ = value;
}
inline void PvpPlayerData::set_lvl(uint32_t value) {
  _internal_set_lvl(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Lvl)
}

// int64 ReqTime = 11;
inline void PvpPlayerData::clear_reqtime() {
  _impl_.reqtime_ = int64_t{0};
}
inline int64_t PvpPlayerData::_internal_reqtime() const {
  return _impl_.reqtime_;
}
inline int64_t PvpPlayerData::reqtime() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ReqTime)
  return _internal_reqtime();
}
inline void PvpPlayerData::_internal_set_reqtime(int64_t value) {
  
  _impl_.reqtime_ = value;
}
inline void PvpPlayerData::set_reqtime(int64_t value) {
  _internal_set_reqtime(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ReqTime)
}

// .msg.PLATFORMTYPE PlatformType = 12;
inline void PvpPlayerData::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE PvpPlayerData::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE PvpPlayerData::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PlatformType)
  return _internal_platformtype();
}
inline void PvpPlayerData::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void PvpPlayerData::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PlatformType)
}

// uint32 TeamId = 13;
inline void PvpPlayerData::clear_teamid() {
  _impl_.teamid_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint32_t PvpPlayerData::teamid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamId)
  return _internal_teamid();
}
inline void PvpPlayerData::_internal_set_teamid(uint32_t value) {
  
  _impl_.teamid_ = value;
}
inline void PvpPlayerData::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamId)
}

// uint32 Cup = 14;
inline void PvpPlayerData::clear_cup() {
  _impl_.cup_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_cup() const {
  return _impl_.cup_;
}
inline uint32_t PvpPlayerData::cup() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Cup)
  return _internal_cup();
}
inline void PvpPlayerData::_internal_set_cup(uint32_t value) {
  
  _impl_.cup_ = value;
}
inline void PvpPlayerData::set_cup(uint32_t value) {
  _internal_set_cup(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Cup)
}

// string ApkVersion = 15;
inline void PvpPlayerData::clear_apkversion() {
  _impl_.apkversion_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::apkversion() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ApkVersion)
  return _internal_apkversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_apkversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apkversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ApkVersion)
}
inline std::string* PvpPlayerData::mutable_apkversion() {
  std::string* _s = _internal_mutable_apkversion();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.ApkVersion)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_apkversion() const {
  return _impl_.apkversion_.Get();
}
inline void PvpPlayerData::_internal_set_apkversion(const std::string& value) {
  
  _impl_.apkversion_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_apkversion() {
  
  return _impl_.apkversion_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_apkversion() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.ApkVersion)
  return _impl_.apkversion_.Release();
}
inline void PvpPlayerData::set_allocated_apkversion(std::string* apkversion) {
  if (apkversion != nullptr) {
    
  } else {
    
  }
  _impl_.apkversion_.SetAllocated(apkversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apkversion_.IsDefault()) {
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.ApkVersion)
}

// string PvpResourceVersion = 16;
inline void PvpPlayerData::clear_pvpresourceversion() {
  _impl_.pvpresourceversion_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::pvpresourceversion() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PvpResourceVersion)
  return _internal_pvpresourceversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_pvpresourceversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pvpresourceversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PvpResourceVersion)
}
inline std::string* PvpPlayerData::mutable_pvpresourceversion() {
  std::string* _s = _internal_mutable_pvpresourceversion();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.PvpResourceVersion)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_pvpresourceversion() const {
  return _impl_.pvpresourceversion_.Get();
}
inline void PvpPlayerData::_internal_set_pvpresourceversion(const std::string& value) {
  
  _impl_.pvpresourceversion_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_pvpresourceversion() {
  
  return _impl_.pvpresourceversion_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_pvpresourceversion() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.PvpResourceVersion)
  return _impl_.pvpresourceversion_.Release();
}
inline void PvpPlayerData::set_allocated_pvpresourceversion(std::string* pvpresourceversion) {
  if (pvpresourceversion != nullptr) {
    
  } else {
    
  }
  _impl_.pvpresourceversion_.SetAllocated(pvpresourceversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pvpresourceversion_.IsDefault()) {
    _impl_.pvpresourceversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.PvpResourceVersion)
}

// uint32 Asyn = 17;
inline void PvpPlayerData::clear_asyn() {
  _impl_.asyn_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_asyn() const {
  return _impl_.asyn_;
}
inline uint32_t PvpPlayerData::asyn() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Asyn)
  return _internal_asyn();
}
inline void PvpPlayerData::_internal_set_asyn(uint32_t value) {
  
  _impl_.asyn_ = value;
}
inline void PvpPlayerData::set_asyn(uint32_t value) {
  _internal_set_asyn(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Asyn)
}

// uint32 ChessPlayerSkin = 18;
inline void PvpPlayerData::clear_chessplayerskin() {
  _impl_.chessplayerskin_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_chessplayerskin() const {
  return _impl_.chessplayerskin_;
}
inline uint32_t PvpPlayerData::chessplayerskin() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ChessPlayerSkin)
  return _internal_chessplayerskin();
}
inline void PvpPlayerData::_internal_set_chessplayerskin(uint32_t value) {
  
  _impl_.chessplayerskin_ = value;
}
inline void PvpPlayerData::set_chessplayerskin(uint32_t value) {
  _internal_set_chessplayerskin(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ChessPlayerSkin)
}

// uint32 SceneSkin = 19;
inline void PvpPlayerData::clear_sceneskin() {
  _impl_.sceneskin_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_sceneskin() const {
  return _impl_.sceneskin_;
}
inline uint32_t PvpPlayerData::sceneskin() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.SceneSkin)
  return _internal_sceneskin();
}
inline void PvpPlayerData::_internal_set_sceneskin(uint32_t value) {
  
  _impl_.sceneskin_ = value;
}
inline void PvpPlayerData::set_sceneskin(uint32_t value) {
  _internal_set_sceneskin(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.SceneSkin)
}

// string DeviceType = 20;
inline void PvpPlayerData::clear_devicetype() {
  _impl_.devicetype_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::devicetype() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.DeviceType)
  return _internal_devicetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_devicetype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.devicetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.DeviceType)
}
inline std::string* PvpPlayerData::mutable_devicetype() {
  std::string* _s = _internal_mutable_devicetype();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.DeviceType)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_devicetype() const {
  return _impl_.devicetype_.Get();
}
inline void PvpPlayerData::_internal_set_devicetype(const std::string& value) {
  
  _impl_.devicetype_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_devicetype() {
  
  return _impl_.devicetype_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_devicetype() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.DeviceType)
  return _impl_.devicetype_.Release();
}
inline void PvpPlayerData::set_allocated_devicetype(std::string* devicetype) {
  if (devicetype != nullptr) {
    
  } else {
    
  }
  _impl_.devicetype_.SetAllocated(devicetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicetype_.IsDefault()) {
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.DeviceType)
}

// uint32 DamageEffect = 21;
inline void PvpPlayerData::clear_damageeffect() {
  _impl_.damageeffect_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_damageeffect() const {
  return _impl_.damageeffect_;
}
inline uint32_t PvpPlayerData::damageeffect() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.DamageEffect)
  return _internal_damageeffect();
}
inline void PvpPlayerData::_internal_set_damageeffect(uint32_t value) {
  
  _impl_.damageeffect_ = value;
}
inline void PvpPlayerData::set_damageeffect(uint32_t value) {
  _internal_set_damageeffect(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.DamageEffect)
}

// map<uint32, .msg.CSDTPvpWinData> ModeWinDatas = 22;
inline int PvpPlayerData::_internal_modewindatas_size() const {
  return _impl_.modewindatas_.size();
}
inline int PvpPlayerData::modewindatas_size() const {
  return _internal_modewindatas_size();
}
inline void PvpPlayerData::clear_modewindatas() {
  _impl_.modewindatas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >&
PvpPlayerData::_internal_modewindatas() const {
  return _impl_.modewindatas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >&
PvpPlayerData::modewindatas() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.ModeWinDatas)
  return _internal_modewindatas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >*
PvpPlayerData::_internal_mutable_modewindatas() {
  return _impl_.modewindatas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >*
PvpPlayerData::mutable_modewindatas() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.ModeWinDatas)
  return _internal_mutable_modewindatas();
}

// uint32 CurRankSeason = 24;
inline void PvpPlayerData::clear_currankseason() {
  _impl_.currankseason_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_currankseason() const {
  return _impl_.currankseason_;
}
inline uint32_t PvpPlayerData::currankseason() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CurRankSeason)
  return _internal_currankseason();
}
inline void PvpPlayerData::_internal_set_currankseason(uint32_t value) {
  
  _impl_.currankseason_ = value;
}
inline void PvpPlayerData::set_currankseason(uint32_t value) {
  _internal_set_currankseason(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.CurRankSeason)
}

// uint32 MeleeRule = 25;
inline void PvpPlayerData::clear_meleerule() {
  _impl_.meleerule_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_meleerule() const {
  return _impl_.meleerule_;
}
inline uint32_t PvpPlayerData::meleerule() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.MeleeRule)
  return _internal_meleerule();
}
inline void PvpPlayerData::_internal_set_meleerule(uint32_t value) {
  
  _impl_.meleerule_ = value;
}
inline void PvpPlayerData::set_meleerule(uint32_t value) {
  _internal_set_meleerule(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.MeleeRule)
}

// map<uint32, uint32> CurShowItems = 26;
inline int PvpPlayerData::_internal_curshowitems_size() const {
  return _impl_.curshowitems_.size();
}
inline int PvpPlayerData::curshowitems_size() const {
  return _internal_curshowitems_size();
}
inline void PvpPlayerData::clear_curshowitems() {
  _impl_.curshowitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PvpPlayerData::_internal_curshowitems() const {
  return _impl_.curshowitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PvpPlayerData::curshowitems() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.CurShowItems)
  return _internal_curshowitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PvpPlayerData::_internal_mutable_curshowitems() {
  return _impl_.curshowitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PvpPlayerData::mutable_curshowitems() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.CurShowItems)
  return _internal_mutable_curshowitems();
}

// .msg.CSDTCommonRandList EmotionList = 28;
inline bool PvpPlayerData::_internal_has_emotionlist() const {
  return this != internal_default_instance() && _impl_.emotionlist_ != nullptr;
}
inline bool PvpPlayerData::has_emotionlist() const {
  return _internal_has_emotionlist();
}
inline void PvpPlayerData::clear_emotionlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.emotionlist_ != nullptr) {
    delete _impl_.emotionlist_;
  }
  _impl_.emotionlist_ = nullptr;
}
inline const ::msg::CSDTCommonRandList& PvpPlayerData::_internal_emotionlist() const {
  const ::msg::CSDTCommonRandList* p = _impl_.emotionlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTCommonRandList&>(
      ::msg::_CSDTCommonRandList_default_instance_);
}
inline const ::msg::CSDTCommonRandList& PvpPlayerData::emotionlist() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.EmotionList)
  return _internal_emotionlist();
}
inline void PvpPlayerData::unsafe_arena_set_allocated_emotionlist(
    ::msg::CSDTCommonRandList* emotionlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emotionlist_);
  }
  _impl_.emotionlist_ = emotionlist;
  if (emotionlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpPlayerData.EmotionList)
}
inline ::msg::CSDTCommonRandList* PvpPlayerData::release_emotionlist() {
  
  ::msg::CSDTCommonRandList* temp = _impl_.emotionlist_;
  _impl_.emotionlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTCommonRandList* PvpPlayerData::unsafe_arena_release_emotionlist() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.EmotionList)
  
  ::msg::CSDTCommonRandList* temp = _impl_.emotionlist_;
  _impl_.emotionlist_ = nullptr;
  return temp;
}
inline ::msg::CSDTCommonRandList* PvpPlayerData::_internal_mutable_emotionlist() {
  
  if (_impl_.emotionlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTCommonRandList>(GetArenaForAllocation());
    _impl_.emotionlist_ = p;
  }
  return _impl_.emotionlist_;
}
inline ::msg::CSDTCommonRandList* PvpPlayerData::mutable_emotionlist() {
  ::msg::CSDTCommonRandList* _msg = _internal_mutable_emotionlist();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.EmotionList)
  return _msg;
}
inline void PvpPlayerData::set_allocated_emotionlist(::msg::CSDTCommonRandList* emotionlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.emotionlist_;
  }
  if (emotionlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emotionlist);
    if (message_arena != submessage_arena) {
      emotionlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotionlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.emotionlist_ = emotionlist;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.EmotionList)
}

// string ChannelUsrId = 30;
inline void PvpPlayerData::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ChannelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ChannelUsrId)
}
inline std::string* PvpPlayerData::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.ChannelUsrId)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void PvpPlayerData::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.ChannelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void PvpPlayerData::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.ChannelUsrId)
}

// .msg.CHANELTYPE ChannelType = 31;
inline void PvpPlayerData::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE PvpPlayerData::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE PvpPlayerData::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ChannelType)
  return _internal_channeltype();
}
inline void PvpPlayerData::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void PvpPlayerData::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ChannelType)
}

// map<uint32, uint32> Settings = 32;
inline int PvpPlayerData::_internal_settings_size() const {
  return _impl_.settings_.size();
}
inline int PvpPlayerData::settings_size() const {
  return _internal_settings_size();
}
inline void PvpPlayerData::clear_settings() {
  _impl_.settings_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PvpPlayerData::_internal_settings() const {
  return _impl_.settings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PvpPlayerData::settings() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.Settings)
  return _internal_settings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PvpPlayerData::_internal_mutable_settings() {
  return _impl_.settings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PvpPlayerData::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.Settings)
  return _internal_mutable_settings();
}

// int32 AssistantId = 33;
inline void PvpPlayerData::clear_assistantid() {
  _impl_.assistantid_ = 0;
}
inline int32_t PvpPlayerData::_internal_assistantid() const {
  return _impl_.assistantid_;
}
inline int32_t PvpPlayerData::assistantid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.AssistantId)
  return _internal_assistantid();
}
inline void PvpPlayerData::_internal_set_assistantid(int32_t value) {
  
  _impl_.assistantid_ = value;
}
inline void PvpPlayerData::set_assistantid(int32_t value) {
  _internal_set_assistantid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.AssistantId)
}

// uint32 CreditScore = 34;
inline void PvpPlayerData::clear_creditscore() {
  _impl_.creditscore_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_creditscore() const {
  return _impl_.creditscore_;
}
inline uint32_t PvpPlayerData::creditscore() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CreditScore)
  return _internal_creditscore();
}
inline void PvpPlayerData::_internal_set_creditscore(uint32_t value) {
  
  _impl_.creditscore_ = value;
}
inline void PvpPlayerData::set_creditscore(uint32_t value) {
  _internal_set_creditscore(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.CreditScore)
}

// uint32 TMMR = 35;
inline void PvpPlayerData::clear_tmmr() {
  _impl_.tmmr_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_tmmr() const {
  return _impl_.tmmr_;
}
inline uint32_t PvpPlayerData::tmmr() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TMMR)
  return _internal_tmmr();
}
inline void PvpPlayerData::_internal_set_tmmr(uint32_t value) {
  
  _impl_.tmmr_ = value;
}
inline void PvpPlayerData::set_tmmr(uint32_t value) {
  _internal_set_tmmr(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TMMR)
}

// uint32 TCup = 36;
inline void PvpPlayerData::clear_tcup() {
  _impl_.tcup_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_tcup() const {
  return _impl_.tcup_;
}
inline uint32_t PvpPlayerData::tcup() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TCup)
  return _internal_tcup();
}
inline void PvpPlayerData::_internal_set_tcup(uint32_t value) {
  
  _impl_.tcup_ = value;
}
inline void PvpPlayerData::set_tcup(uint32_t value) {
  _internal_set_tcup(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TCup)
}

// string TeamVoiceId = 37;
inline void PvpPlayerData::clear_teamvoiceid() {
  _impl_.teamvoiceid_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::teamvoiceid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamVoiceId)
  return _internal_teamvoiceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_teamvoiceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teamvoiceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamVoiceId)
}
inline std::string* PvpPlayerData::mutable_teamvoiceid() {
  std::string* _s = _internal_mutable_teamvoiceid();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.TeamVoiceId)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_teamvoiceid() const {
  return _impl_.teamvoiceid_.Get();
}
inline void PvpPlayerData::_internal_set_teamvoiceid(const std::string& value) {
  
  _impl_.teamvoiceid_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_teamvoiceid() {
  
  return _impl_.teamvoiceid_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_teamvoiceid() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.TeamVoiceId)
  return _impl_.teamvoiceid_.Release();
}
inline void PvpPlayerData::set_allocated_teamvoiceid(std::string* teamvoiceid) {
  if (teamvoiceid != nullptr) {
    
  } else {
    
  }
  _impl_.teamvoiceid_.SetAllocated(teamvoiceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teamvoiceid_.IsDefault()) {
    _impl_.teamvoiceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.TeamVoiceId)
}

// uint32 TeamVoiceMemId = 38;
inline void PvpPlayerData::clear_teamvoicememid() {
  _impl_.teamvoicememid_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_teamvoicememid() const {
  return _impl_.teamvoicememid_;
}
inline uint32_t PvpPlayerData::teamvoicememid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamVoiceMemId)
  return _internal_teamvoicememid();
}
inline void PvpPlayerData::_internal_set_teamvoicememid(uint32_t value) {
  
  _impl_.teamvoicememid_ = value;
}
inline void PvpPlayerData::set_teamvoicememid(uint32_t value) {
  _internal_set_teamvoicememid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamVoiceMemId)
}

// string PicUrl = 39;
inline void PvpPlayerData::clear_picurl() {
  _impl_.picurl_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::picurl() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PicUrl)
  return _internal_picurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_picurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PicUrl)
}
inline std::string* PvpPlayerData::mutable_picurl() {
  std::string* _s = _internal_mutable_picurl();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.PicUrl)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_picurl() const {
  return _impl_.picurl_.Get();
}
inline void PvpPlayerData::_internal_set_picurl(const std::string& value) {
  
  _impl_.picurl_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_picurl() {
  
  return _impl_.picurl_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_picurl() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.PicUrl)
  return _impl_.picurl_.Release();
}
inline void PvpPlayerData::set_allocated_picurl(std::string* picurl) {
  if (picurl != nullptr) {
    
  } else {
    
  }
  _impl_.picurl_.SetAllocated(picurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picurl_.IsDefault()) {
    _impl_.picurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.PicUrl)
}

// uint32 TeamBattleCount = 40;
inline void PvpPlayerData::clear_teambattlecount() {
  _impl_.teambattlecount_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_teambattlecount() const {
  return _impl_.teambattlecount_;
}
inline uint32_t PvpPlayerData::teambattlecount() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamBattleCount)
  return _internal_teambattlecount();
}
inline void PvpPlayerData::_internal_set_teambattlecount(uint32_t value) {
  
  _impl_.teambattlecount_ = value;
}
inline void PvpPlayerData::set_teambattlecount(uint32_t value) {
  _internal_set_teambattlecount(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamBattleCount)
}

// uint32 TeamBattleMvpCount = 41;
inline void PvpPlayerData::clear_teambattlemvpcount() {
  _impl_.teambattlemvpcount_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_teambattlemvpcount() const {
  return _impl_.teambattlemvpcount_;
}
inline uint32_t PvpPlayerData::teambattlemvpcount() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamBattleMvpCount)
  return _internal_teambattlemvpcount();
}
inline void PvpPlayerData::_internal_set_teambattlemvpcount(uint32_t value) {
  
  _impl_.teambattlemvpcount_ = value;
}
inline void PvpPlayerData::set_teambattlemvpcount(uint32_t value) {
  _internal_set_teambattlemvpcount(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamBattleMvpCount)
}

// uint32 RecommendScore = 42;
inline void PvpPlayerData::clear_recommendscore() {
  _impl_.recommendscore_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_recommendscore() const {
  return _impl_.recommendscore_;
}
inline uint32_t PvpPlayerData::recommendscore() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.RecommendScore)
  return _internal_recommendscore();
}
inline void PvpPlayerData::_internal_set_recommendscore(uint32_t value) {
  
  _impl_.recommendscore_ = value;
}
inline void PvpPlayerData::set_recommendscore(uint32_t value) {
  _internal_set_recommendscore(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.RecommendScore)
}

// uint32 WxVVipLevel = 43;
inline void PvpPlayerData::clear_wxvviplevel() {
  _impl_.wxvviplevel_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_wxvviplevel() const {
  return _impl_.wxvviplevel_;
}
inline uint32_t PvpPlayerData::wxvviplevel() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.WxVVipLevel)
  return _internal_wxvviplevel();
}
inline void PvpPlayerData::_internal_set_wxvviplevel(uint32_t value) {
  
  _impl_.wxvviplevel_ = value;
}
inline void PvpPlayerData::set_wxvviplevel(uint32_t value) {
  _internal_set_wxvviplevel(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.WxVVipLevel)
}

// int32 TeamBattleAvgRank = 44;
inline void PvpPlayerData::clear_teambattleavgrank() {
  _impl_.teambattleavgrank_ = 0;
}
inline int32_t PvpPlayerData::_internal_teambattleavgrank() const {
  return _impl_.teambattleavgrank_;
}
inline int32_t PvpPlayerData::teambattleavgrank() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamBattleAvgRank)
  return _internal_teambattleavgrank();
}
inline void PvpPlayerData::_internal_set_teambattleavgrank(int32_t value) {
  
  _impl_.teambattleavgrank_ = value;
}
inline void PvpPlayerData::set_teambattleavgrank(int32_t value) {
  _internal_set_teambattleavgrank(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamBattleAvgRank)
}

// string CupNameChina = 45;
inline void PvpPlayerData::clear_cupnamechina() {
  _impl_.cupnamechina_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::cupnamechina() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CupNameChina)
  return _internal_cupnamechina();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_cupnamechina(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cupnamechina_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.CupNameChina)
}
inline std::string* PvpPlayerData::mutable_cupnamechina() {
  std::string* _s = _internal_mutable_cupnamechina();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.CupNameChina)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_cupnamechina() const {
  return _impl_.cupnamechina_.Get();
}
inline void PvpPlayerData::_internal_set_cupnamechina(const std::string& value) {
  
  _impl_.cupnamechina_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_cupnamechina() {
  
  return _impl_.cupnamechina_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_cupnamechina() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.CupNameChina)
  return _impl_.cupnamechina_.Release();
}
inline void PvpPlayerData::set_allocated_cupnamechina(std::string* cupnamechina) {
  if (cupnamechina != nullptr) {
    
  } else {
    
  }
  _impl_.cupnamechina_.SetAllocated(cupnamechina, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cupnamechina_.IsDefault()) {
    _impl_.cupnamechina_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.CupNameChina)
}

// string Language = 46;
inline void PvpPlayerData::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::language() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Language)
}
inline std::string* PvpPlayerData::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.Language)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_language() const {
  return _impl_.language_.Get();
}
inline void PvpPlayerData::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_language() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.Language)
  return _impl_.language_.Release();
}
inline void PvpPlayerData::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.Language)
}

// string Country = 47;
inline void PvpPlayerData::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::country() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Country)
}
inline std::string* PvpPlayerData::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.Country)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_country() const {
  return _impl_.country_.Get();
}
inline void PvpPlayerData::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_country() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.Country)
  return _impl_.country_.Release();
}
inline void PvpPlayerData::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.Country)
}

// string CupIconUrl = 48;
inline void PvpPlayerData::clear_cupiconurl() {
  _impl_.cupiconurl_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::cupiconurl() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CupIconUrl)
  return _internal_cupiconurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_cupiconurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cupiconurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.CupIconUrl)
}
inline std::string* PvpPlayerData::mutable_cupiconurl() {
  std::string* _s = _internal_mutable_cupiconurl();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.CupIconUrl)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_cupiconurl() const {
  return _impl_.cupiconurl_.Get();
}
inline void PvpPlayerData::_internal_set_cupiconurl(const std::string& value) {
  
  _impl_.cupiconurl_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_cupiconurl() {
  
  return _impl_.cupiconurl_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_cupiconurl() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.CupIconUrl)
  return _impl_.cupiconurl_.Release();
}
inline void PvpPlayerData::set_allocated_cupiconurl(std::string* cupiconurl) {
  if (cupiconurl != nullptr) {
    
  } else {
    
  }
  _impl_.cupiconurl_.SetAllocated(cupiconurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cupiconurl_.IsDefault()) {
    _impl_.cupiconurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.CupIconUrl)
}

// int32 PersonalAvgMvp = 49;
inline void PvpPlayerData::clear_personalavgmvp() {
  _impl_.personalavgmvp_ = 0;
}
inline int32_t PvpPlayerData::_internal_personalavgmvp() const {
  return _impl_.personalavgmvp_;
}
inline int32_t PvpPlayerData::personalavgmvp() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PersonalAvgMvp)
  return _internal_personalavgmvp();
}
inline void PvpPlayerData::_internal_set_personalavgmvp(int32_t value) {
  
  _impl_.personalavgmvp_ = value;
}
inline void PvpPlayerData::set_personalavgmvp(int32_t value) {
  _internal_set_personalavgmvp(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PersonalAvgMvp)
}

// map<string, .msg.SwitchItem> SwitchItems = 50;
inline int PvpPlayerData::_internal_switchitems_size() const {
  return _impl_.switchitems_.size();
}
inline int PvpPlayerData::switchitems_size() const {
  return _internal_switchitems_size();
}
inline void PvpPlayerData::clear_switchitems() {
  _impl_.switchitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >&
PvpPlayerData::_internal_switchitems() const {
  return _impl_.switchitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >&
PvpPlayerData::switchitems() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.SwitchItems)
  return _internal_switchitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >*
PvpPlayerData::_internal_mutable_switchitems() {
  return _impl_.switchitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >*
PvpPlayerData::mutable_switchitems() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.SwitchItems)
  return _internal_mutable_switchitems();
}

// .msg.OBSERVEPRIVILEGE ObservePrivilege = 51;
inline void PvpPlayerData::clear_observeprivilege() {
  _impl_.observeprivilege_ = 0;
}
inline ::msg::OBSERVEPRIVILEGE PvpPlayerData::_internal_observeprivilege() const {
  return static_cast< ::msg::OBSERVEPRIVILEGE >(_impl_.observeprivilege_);
}
inline ::msg::OBSERVEPRIVILEGE PvpPlayerData::observeprivilege() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ObservePrivilege)
  return _internal_observeprivilege();
}
inline void PvpPlayerData::_internal_set_observeprivilege(::msg::OBSERVEPRIVILEGE value) {
  
  _impl_.observeprivilege_ = value;
}
inline void PvpPlayerData::set_observeprivilege(::msg::OBSERVEPRIVILEGE value) {
  _internal_set_observeprivilege(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ObservePrivilege)
}

// map<uint32, int64> Punishment = 52;
inline int PvpPlayerData::_internal_punishment_size() const {
  return _impl_.punishment_.size();
}
inline int PvpPlayerData::punishment_size() const {
  return _internal_punishment_size();
}
inline void PvpPlayerData::clear_punishment() {
  _impl_.punishment_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >&
PvpPlayerData::_internal_punishment() const {
  return _impl_.punishment_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >&
PvpPlayerData::punishment() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.Punishment)
  return _internal_punishment();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >*
PvpPlayerData::_internal_mutable_punishment() {
  return _impl_.punishment_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >*
PvpPlayerData::mutable_punishment() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.Punishment)
  return _internal_mutable_punishment();
}

// uint32 Slot = 53;
inline void PvpPlayerData::clear_slot() {
  _impl_.slot_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t PvpPlayerData::slot() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Slot)
  return _internal_slot();
}
inline void PvpPlayerData::_internal_set_slot(uint32_t value) {
  
  _impl_.slot_ = value;
}
inline void PvpPlayerData::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Slot)
}

// .msg.CSDTChessPlrInfo CurChessPlr = 55;
inline bool PvpPlayerData::_internal_has_curchessplr() const {
  return this != internal_default_instance() && _impl_.curchessplr_ != nullptr;
}
inline bool PvpPlayerData::has_curchessplr() const {
  return _internal_has_curchessplr();
}
inline void PvpPlayerData::clear_curchessplr() {
  if (GetArenaForAllocation() == nullptr && _impl_.curchessplr_ != nullptr) {
    delete _impl_.curchessplr_;
  }
  _impl_.curchessplr_ = nullptr;
}
inline const ::msg::CSDTChessPlrInfo& PvpPlayerData::_internal_curchessplr() const {
  const ::msg::CSDTChessPlrInfo* p = _impl_.curchessplr_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTChessPlrInfo&>(
      ::msg::_CSDTChessPlrInfo_default_instance_);
}
inline const ::msg::CSDTChessPlrInfo& PvpPlayerData::curchessplr() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CurChessPlr)
  return _internal_curchessplr();
}
inline void PvpPlayerData::unsafe_arena_set_allocated_curchessplr(
    ::msg::CSDTChessPlrInfo* curchessplr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curchessplr_);
  }
  _impl_.curchessplr_ = curchessplr;
  if (curchessplr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpPlayerData.CurChessPlr)
}
inline ::msg::CSDTChessPlrInfo* PvpPlayerData::release_curchessplr() {
  
  ::msg::CSDTChessPlrInfo* temp = _impl_.curchessplr_;
  _impl_.curchessplr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTChessPlrInfo* PvpPlayerData::unsafe_arena_release_curchessplr() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.CurChessPlr)
  
  ::msg::CSDTChessPlrInfo* temp = _impl_.curchessplr_;
  _impl_.curchessplr_ = nullptr;
  return temp;
}
inline ::msg::CSDTChessPlrInfo* PvpPlayerData::_internal_mutable_curchessplr() {
  
  if (_impl_.curchessplr_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTChessPlrInfo>(GetArenaForAllocation());
    _impl_.curchessplr_ = p;
  }
  return _impl_.curchessplr_;
}
inline ::msg::CSDTChessPlrInfo* PvpPlayerData::mutable_curchessplr() {
  ::msg::CSDTChessPlrInfo* _msg = _internal_mutable_curchessplr();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.CurChessPlr)
  return _msg;
}
inline void PvpPlayerData::set_allocated_curchessplr(::msg::CSDTChessPlrInfo* curchessplr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.curchessplr_;
  }
  if (curchessplr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(curchessplr);
    if (message_arena != submessage_arena) {
      curchessplr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curchessplr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.curchessplr_ = curchessplr;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.CurChessPlr)
}

// .msg.TEAMGROUP TeamGroup = 56;
inline void PvpPlayerData::clear_teamgroup() {
  _impl_.teamgroup_ = 0;
}
inline ::msg::TEAMGROUP PvpPlayerData::_internal_teamgroup() const {
  return static_cast< ::msg::TEAMGROUP >(_impl_.teamgroup_);
}
inline ::msg::TEAMGROUP PvpPlayerData::teamgroup() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamGroup)
  return _internal_teamgroup();
}
inline void PvpPlayerData::_internal_set_teamgroup(::msg::TEAMGROUP value) {
  
  _impl_.teamgroup_ = value;
}
inline void PvpPlayerData::set_teamgroup(::msg::TEAMGROUP value) {
  _internal_set_teamgroup(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamGroup)
}

// string PvpServerGroup = 57;
inline void PvpPlayerData::clear_pvpservergroup() {
  _impl_.pvpservergroup_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::pvpservergroup() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PvpServerGroup)
  return _internal_pvpservergroup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_pvpservergroup(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pvpservergroup_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PvpServerGroup)
}
inline std::string* PvpPlayerData::mutable_pvpservergroup() {
  std::string* _s = _internal_mutable_pvpservergroup();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.PvpServerGroup)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_pvpservergroup() const {
  return _impl_.pvpservergroup_.Get();
}
inline void PvpPlayerData::_internal_set_pvpservergroup(const std::string& value) {
  
  _impl_.pvpservergroup_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_pvpservergroup() {
  
  return _impl_.pvpservergroup_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_pvpservergroup() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.PvpServerGroup)
  return _impl_.pvpservergroup_.Release();
}
inline void PvpPlayerData::set_allocated_pvpservergroup(std::string* pvpservergroup) {
  if (pvpservergroup != nullptr) {
    
  } else {
    
  }
  _impl_.pvpservergroup_.SetAllocated(pvpservergroup, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pvpservergroup_.IsDefault()) {
    _impl_.pvpservergroup_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.PvpServerGroup)
}

// uint32 Ping = 58;
inline void PvpPlayerData::clear_ping() {
  _impl_.ping_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_ping() const {
  return _impl_.ping_;
}
inline uint32_t PvpPlayerData::ping() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Ping)
  return _internal_ping();
}
inline void PvpPlayerData::_internal_set_ping(uint32_t value) {
  
  _impl_.ping_ = value;
}
inline void PvpPlayerData::set_ping(uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Ping)
}

// uint32 Province = 59;
inline void PvpPlayerData::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t PvpPlayerData::province() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Province)
  return _internal_province();
}
inline void PvpPlayerData::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void PvpPlayerData::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Province)
}

// string TeamVoiceUserId = 60;
inline void PvpPlayerData::clear_teamvoiceuserid() {
  _impl_.teamvoiceuserid_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::teamvoiceuserid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TeamVoiceUserId)
  return _internal_teamvoiceuserid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_teamvoiceuserid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teamvoiceuserid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TeamVoiceUserId)
}
inline std::string* PvpPlayerData::mutable_teamvoiceuserid() {
  std::string* _s = _internal_mutable_teamvoiceuserid();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.TeamVoiceUserId)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_teamvoiceuserid() const {
  return _impl_.teamvoiceuserid_.Get();
}
inline void PvpPlayerData::_internal_set_teamvoiceuserid(const std::string& value) {
  
  _impl_.teamvoiceuserid_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_teamvoiceuserid() {
  
  return _impl_.teamvoiceuserid_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_teamvoiceuserid() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.TeamVoiceUserId)
  return _impl_.teamvoiceuserid_.Release();
}
inline void PvpPlayerData::set_allocated_teamvoiceuserid(std::string* teamvoiceuserid) {
  if (teamvoiceuserid != nullptr) {
    
  } else {
    
  }
  _impl_.teamvoiceuserid_.SetAllocated(teamvoiceuserid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teamvoiceuserid_.IsDefault()) {
    _impl_.teamvoiceuserid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.TeamVoiceUserId)
}

// map<string, uint32> RegionDelays = 61;
inline int PvpPlayerData::_internal_regiondelays_size() const {
  return _impl_.regiondelays_.size();
}
inline int PvpPlayerData::regiondelays_size() const {
  return _internal_regiondelays_size();
}
inline void PvpPlayerData::clear_regiondelays() {
  _impl_.regiondelays_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
PvpPlayerData::_internal_regiondelays() const {
  return _impl_.regiondelays_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
PvpPlayerData::regiondelays() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.RegionDelays)
  return _internal_regiondelays();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
PvpPlayerData::_internal_mutable_regiondelays() {
  return _impl_.regiondelays_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
PvpPlayerData::mutable_regiondelays() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.RegionDelays)
  return _internal_mutable_regiondelays();
}

// .msg.KrAddictionInfo Addiction = 62;
inline bool PvpPlayerData::_internal_has_addiction() const {
  return this != internal_default_instance() && _impl_.addiction_ != nullptr;
}
inline bool PvpPlayerData::has_addiction() const {
  return _internal_has_addiction();
}
inline void PvpPlayerData::clear_addiction() {
  if (GetArenaForAllocation() == nullptr && _impl_.addiction_ != nullptr) {
    delete _impl_.addiction_;
  }
  _impl_.addiction_ = nullptr;
}
inline const ::msg::KrAddictionInfo& PvpPlayerData::_internal_addiction() const {
  const ::msg::KrAddictionInfo* p = _impl_.addiction_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::KrAddictionInfo&>(
      ::msg::_KrAddictionInfo_default_instance_);
}
inline const ::msg::KrAddictionInfo& PvpPlayerData::addiction() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Addiction)
  return _internal_addiction();
}
inline void PvpPlayerData::unsafe_arena_set_allocated_addiction(
    ::msg::KrAddictionInfo* addiction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addiction_);
  }
  _impl_.addiction_ = addiction;
  if (addiction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpPlayerData.Addiction)
}
inline ::msg::KrAddictionInfo* PvpPlayerData::release_addiction() {
  
  ::msg::KrAddictionInfo* temp = _impl_.addiction_;
  _impl_.addiction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::KrAddictionInfo* PvpPlayerData::unsafe_arena_release_addiction() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.Addiction)
  
  ::msg::KrAddictionInfo* temp = _impl_.addiction_;
  _impl_.addiction_ = nullptr;
  return temp;
}
inline ::msg::KrAddictionInfo* PvpPlayerData::_internal_mutable_addiction() {
  
  if (_impl_.addiction_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::KrAddictionInfo>(GetArenaForAllocation());
    _impl_.addiction_ = p;
  }
  return _impl_.addiction_;
}
inline ::msg::KrAddictionInfo* PvpPlayerData::mutable_addiction() {
  ::msg::KrAddictionInfo* _msg = _internal_mutable_addiction();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.Addiction)
  return _msg;
}
inline void PvpPlayerData::set_allocated_addiction(::msg::KrAddictionInfo* addiction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.addiction_;
  }
  if (addiction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addiction);
    if (message_arena != submessage_arena) {
      addiction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addiction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addiction_ = addiction;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.Addiction)
}

// string Region = 63;
inline void PvpPlayerData::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::region() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Region)
}
inline std::string* PvpPlayerData::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.Region)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_region() const {
  return _impl_.region_.Get();
}
inline void PvpPlayerData::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_region() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.Region)
  return _impl_.region_.Release();
}
inline void PvpPlayerData::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.Region)
}

// uint32 FirstMatchSuccessWaitTime = 64;
inline void PvpPlayerData::clear_firstmatchsuccesswaittime() {
  _impl_.firstmatchsuccesswaittime_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_firstmatchsuccesswaittime() const {
  return _impl_.firstmatchsuccesswaittime_;
}
inline uint32_t PvpPlayerData::firstmatchsuccesswaittime() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.FirstMatchSuccessWaitTime)
  return _internal_firstmatchsuccesswaittime();
}
inline void PvpPlayerData::_internal_set_firstmatchsuccesswaittime(uint32_t value) {
  
  _impl_.firstmatchsuccesswaittime_ = value;
}
inline void PvpPlayerData::set_firstmatchsuccesswaittime(uint32_t value) {
  _internal_set_firstmatchsuccesswaittime(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.FirstMatchSuccessWaitTime)
}

// string PackageName = 65;
inline void PvpPlayerData::clear_packagename() {
  _impl_.packagename_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::packagename() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PackageName)
  return _internal_packagename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_packagename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packagename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PackageName)
}
inline std::string* PvpPlayerData::mutable_packagename() {
  std::string* _s = _internal_mutable_packagename();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.PackageName)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_packagename() const {
  return _impl_.packagename_.Get();
}
inline void PvpPlayerData::_internal_set_packagename(const std::string& value) {
  
  _impl_.packagename_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_packagename() {
  
  return _impl_.packagename_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_packagename() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.PackageName)
  return _impl_.packagename_.Release();
}
inline void PvpPlayerData::set_allocated_packagename(std::string* packagename) {
  if (packagename != nullptr) {
    
  } else {
    
  }
  _impl_.packagename_.SetAllocated(packagename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packagename_.IsDefault()) {
    _impl_.packagename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.PackageName)
}

// uint64 TournamentID = 66;
inline void PvpPlayerData::clear_tournamentid() {
  _impl_.tournamentid_ = uint64_t{0u};
}
inline uint64_t PvpPlayerData::_internal_tournamentid() const {
  return _impl_.tournamentid_;
}
inline uint64_t PvpPlayerData::tournamentid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TournamentID)
  return _internal_tournamentid();
}
inline void PvpPlayerData::_internal_set_tournamentid(uint64_t value) {
  
  _impl_.tournamentid_ = value;
}
inline void PvpPlayerData::set_tournamentid(uint64_t value) {
  _internal_set_tournamentid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TournamentID)
}

// uint64 TournamClass = 67;
inline void PvpPlayerData::clear_tournamclass() {
  _impl_.tournamclass_ = uint64_t{0u};
}
inline uint64_t PvpPlayerData::_internal_tournamclass() const {
  return _impl_.tournamclass_;
}
inline uint64_t PvpPlayerData::tournamclass() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TournamClass)
  return _internal_tournamclass();
}
inline void PvpPlayerData::_internal_set_tournamclass(uint64_t value) {
  
  _impl_.tournamclass_ = value;
}
inline void PvpPlayerData::set_tournamclass(uint64_t value) {
  _internal_set_tournamclass(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TournamClass)
}

// uint64 TournamClassRound = 68;
inline void PvpPlayerData::clear_tournamclassround() {
  _impl_.tournamclassround_ = uint64_t{0u};
}
inline uint64_t PvpPlayerData::_internal_tournamclassround() const {
  return _impl_.tournamclassround_;
}
inline uint64_t PvpPlayerData::tournamclassround() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TournamClassRound)
  return _internal_tournamclassround();
}
inline void PvpPlayerData::_internal_set_tournamclassround(uint64_t value) {
  
  _impl_.tournamclassround_ = value;
}
inline void PvpPlayerData::set_tournamclassround(uint64_t value) {
  _internal_set_tournamclassround(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TournamClassRound)
}

// uint64 TournamChessID = 69;
inline void PvpPlayerData::clear_tournamchessid() {
  _impl_.tournamchessid_ = uint64_t{0u};
}
inline uint64_t PvpPlayerData::_internal_tournamchessid() const {
  return _impl_.tournamchessid_;
}
inline uint64_t PvpPlayerData::tournamchessid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.TournamChessID)
  return _internal_tournamchessid();
}
inline void PvpPlayerData::_internal_set_tournamchessid(uint64_t value) {
  
  _impl_.tournamchessid_ = value;
}
inline void PvpPlayerData::set_tournamchessid(uint64_t value) {
  _internal_set_tournamchessid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.TournamChessID)
}

// repeated uint32 PassportTypeIds = 70;
inline int PvpPlayerData::_internal_passporttypeids_size() const {
  return _impl_.passporttypeids_.size();
}
inline int PvpPlayerData::passporttypeids_size() const {
  return _internal_passporttypeids_size();
}
inline void PvpPlayerData::clear_passporttypeids() {
  _impl_.passporttypeids_.Clear();
}
inline uint32_t PvpPlayerData::_internal_passporttypeids(int index) const {
  return _impl_.passporttypeids_.Get(index);
}
inline uint32_t PvpPlayerData::passporttypeids(int index) const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PassportTypeIds)
  return _internal_passporttypeids(index);
}
inline void PvpPlayerData::set_passporttypeids(int index, uint32_t value) {
  _impl_.passporttypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PassportTypeIds)
}
inline void PvpPlayerData::_internal_add_passporttypeids(uint32_t value) {
  _impl_.passporttypeids_.Add(value);
}
inline void PvpPlayerData::add_passporttypeids(uint32_t value) {
  _internal_add_passporttypeids(value);
  // @@protoc_insertion_point(field_add:msg.PvpPlayerData.PassportTypeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpPlayerData::_internal_passporttypeids() const {
  return _impl_.passporttypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpPlayerData::passporttypeids() const {
  // @@protoc_insertion_point(field_list:msg.PvpPlayerData.PassportTypeIds)
  return _internal_passporttypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpPlayerData::_internal_mutable_passporttypeids() {
  return &_impl_.passporttypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpPlayerData::mutable_passporttypeids() {
  // @@protoc_insertion_point(field_mutable_list:msg.PvpPlayerData.PassportTypeIds)
  return _internal_mutable_passporttypeids();
}

// map<uint32, uint32> Tickets = 71;
inline int PvpPlayerData::_internal_tickets_size() const {
  return _impl_.tickets_.size();
}
inline int PvpPlayerData::tickets_size() const {
  return _internal_tickets_size();
}
inline void PvpPlayerData::clear_tickets() {
  _impl_.tickets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PvpPlayerData::_internal_tickets() const {
  return _impl_.tickets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PvpPlayerData::tickets() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.Tickets)
  return _internal_tickets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PvpPlayerData::_internal_mutable_tickets() {
  return _impl_.tickets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PvpPlayerData::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.Tickets)
  return _internal_mutable_tickets();
}

// string SdkCountry = 72;
inline void PvpPlayerData::clear_sdkcountry() {
  _impl_.sdkcountry_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::sdkcountry() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.SdkCountry)
  return _internal_sdkcountry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_sdkcountry(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sdkcountry_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.SdkCountry)
}
inline std::string* PvpPlayerData::mutable_sdkcountry() {
  std::string* _s = _internal_mutable_sdkcountry();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.SdkCountry)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_sdkcountry() const {
  return _impl_.sdkcountry_.Get();
}
inline void PvpPlayerData::_internal_set_sdkcountry(const std::string& value) {
  
  _impl_.sdkcountry_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_sdkcountry() {
  
  return _impl_.sdkcountry_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_sdkcountry() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.SdkCountry)
  return _impl_.sdkcountry_.Release();
}
inline void PvpPlayerData::set_allocated_sdkcountry(std::string* sdkcountry) {
  if (sdkcountry != nullptr) {
    
  } else {
    
  }
  _impl_.sdkcountry_.SetAllocated(sdkcountry, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sdkcountry_.IsDefault()) {
    _impl_.sdkcountry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.SdkCountry)
}

// bool Ps4Only = 73;
inline void PvpPlayerData::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool PvpPlayerData::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool PvpPlayerData::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.Ps4Only)
  return _internal_ps4only();
}
inline void PvpPlayerData::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void PvpPlayerData::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.Ps4Only)
}

// .msg.UserRestrictType RestrictType = 74;
inline void PvpPlayerData::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType PvpPlayerData::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType PvpPlayerData::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.RestrictType)
  return _internal_restricttype();
}
inline void PvpPlayerData::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void PvpPlayerData::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.RestrictType)
}

// map<int32, int32> Currencys = 75;
inline int PvpPlayerData::_internal_currencys_size() const {
  return _impl_.currencys_.size();
}
inline int PvpPlayerData::currencys_size() const {
  return _internal_currencys_size();
}
inline void PvpPlayerData::clear_currencys() {
  _impl_.currencys_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
PvpPlayerData::_internal_currencys() const {
  return _impl_.currencys_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
PvpPlayerData::currencys() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.Currencys)
  return _internal_currencys();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
PvpPlayerData::_internal_mutable_currencys() {
  return _impl_.currencys_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
PvpPlayerData::mutable_currencys() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.Currencys)
  return _internal_mutable_currencys();
}

// string GuildName = 76;
inline void PvpPlayerData::clear_guildname() {
  _impl_.guildname_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::guildname() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.GuildName)
  return _internal_guildname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_guildname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guildname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.GuildName)
}
inline std::string* PvpPlayerData::mutable_guildname() {
  std::string* _s = _internal_mutable_guildname();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.GuildName)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_guildname() const {
  return _impl_.guildname_.Get();
}
inline void PvpPlayerData::_internal_set_guildname(const std::string& value) {
  
  _impl_.guildname_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_guildname() {
  
  return _impl_.guildname_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_guildname() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.GuildName)
  return _impl_.guildname_.Release();
}
inline void PvpPlayerData::set_allocated_guildname(std::string* guildname) {
  if (guildname != nullptr) {
    
  } else {
    
  }
  _impl_.guildname_.SetAllocated(guildname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guildname_.IsDefault()) {
    _impl_.guildname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.GuildName)
}

// int32 GuildSign = 77;
inline void PvpPlayerData::clear_guildsign() {
  _impl_.guildsign_ = 0;
}
inline int32_t PvpPlayerData::_internal_guildsign() const {
  return _impl_.guildsign_;
}
inline int32_t PvpPlayerData::guildsign() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.GuildSign)
  return _internal_guildsign();
}
inline void PvpPlayerData::_internal_set_guildsign(int32_t value) {
  
  _impl_.guildsign_ = value;
}
inline void PvpPlayerData::set_guildsign(int32_t value) {
  _internal_set_guildsign(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.GuildSign)
}

// repeated string PSBlockedUsers = 78;
inline int PvpPlayerData::_internal_psblockedusers_size() const {
  return _impl_.psblockedusers_.size();
}
inline int PvpPlayerData::psblockedusers_size() const {
  return _internal_psblockedusers_size();
}
inline void PvpPlayerData::clear_psblockedusers() {
  _impl_.psblockedusers_.Clear();
}
inline std::string* PvpPlayerData::add_psblockedusers() {
  std::string* _s = _internal_add_psblockedusers();
  // @@protoc_insertion_point(field_add_mutable:msg.PvpPlayerData.PSBlockedUsers)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_psblockedusers(int index) const {
  return _impl_.psblockedusers_.Get(index);
}
inline const std::string& PvpPlayerData::psblockedusers(int index) const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PSBlockedUsers)
  return _internal_psblockedusers(index);
}
inline std::string* PvpPlayerData::mutable_psblockedusers(int index) {
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.PSBlockedUsers)
  return _impl_.psblockedusers_.Mutable(index);
}
inline void PvpPlayerData::set_psblockedusers(int index, const std::string& value) {
  _impl_.psblockedusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PSBlockedUsers)
}
inline void PvpPlayerData::set_psblockedusers(int index, std::string&& value) {
  _impl_.psblockedusers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PSBlockedUsers)
}
inline void PvpPlayerData::set_psblockedusers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.psblockedusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.PvpPlayerData.PSBlockedUsers)
}
inline void PvpPlayerData::set_psblockedusers(int index, const char* value, size_t size) {
  _impl_.psblockedusers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.PvpPlayerData.PSBlockedUsers)
}
inline std::string* PvpPlayerData::_internal_add_psblockedusers() {
  return _impl_.psblockedusers_.Add();
}
inline void PvpPlayerData::add_psblockedusers(const std::string& value) {
  _impl_.psblockedusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.PvpPlayerData.PSBlockedUsers)
}
inline void PvpPlayerData::add_psblockedusers(std::string&& value) {
  _impl_.psblockedusers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.PvpPlayerData.PSBlockedUsers)
}
inline void PvpPlayerData::add_psblockedusers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.psblockedusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.PvpPlayerData.PSBlockedUsers)
}
inline void PvpPlayerData::add_psblockedusers(const char* value, size_t size) {
  _impl_.psblockedusers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.PvpPlayerData.PSBlockedUsers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PvpPlayerData::psblockedusers() const {
  // @@protoc_insertion_point(field_list:msg.PvpPlayerData.PSBlockedUsers)
  return _impl_.psblockedusers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PvpPlayerData::mutable_psblockedusers() {
  // @@protoc_insertion_point(field_mutable_list:msg.PvpPlayerData.PSBlockedUsers)
  return &_impl_.psblockedusers_;
}

// repeated .msg.KernelChessInfo ChessList = 79;
inline int PvpPlayerData::_internal_chesslist_size() const {
  return _impl_.chesslist_.size();
}
inline int PvpPlayerData::chesslist_size() const {
  return _internal_chesslist_size();
}
inline void PvpPlayerData::clear_chesslist() {
  _impl_.chesslist_.Clear();
}
inline ::msg::KernelChessInfo* PvpPlayerData::mutable_chesslist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.ChessList)
  return _impl_.chesslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >*
PvpPlayerData::mutable_chesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.PvpPlayerData.ChessList)
  return &_impl_.chesslist_;
}
inline const ::msg::KernelChessInfo& PvpPlayerData::_internal_chesslist(int index) const {
  return _impl_.chesslist_.Get(index);
}
inline const ::msg::KernelChessInfo& PvpPlayerData::chesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ChessList)
  return _internal_chesslist(index);
}
inline ::msg::KernelChessInfo* PvpPlayerData::_internal_add_chesslist() {
  return _impl_.chesslist_.Add();
}
inline ::msg::KernelChessInfo* PvpPlayerData::add_chesslist() {
  ::msg::KernelChessInfo* _add = _internal_add_chesslist();
  // @@protoc_insertion_point(field_add:msg.PvpPlayerData.ChessList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >&
PvpPlayerData::chesslist() const {
  // @@protoc_insertion_point(field_list:msg.PvpPlayerData.ChessList)
  return _impl_.chesslist_;
}

// string ChannelID = 80;
inline void PvpPlayerData::clear_channelid() {
  _impl_.channelid_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::channelid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ChannelID)
  return _internal_channelid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_channelid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ChannelID)
}
inline std::string* PvpPlayerData::mutable_channelid() {
  std::string* _s = _internal_mutable_channelid();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.ChannelID)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_channelid() const {
  return _impl_.channelid_.Get();
}
inline void PvpPlayerData::_internal_set_channelid(const std::string& value) {
  
  _impl_.channelid_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_channelid() {
  
  return _impl_.channelid_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_channelid() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.ChannelID)
  return _impl_.channelid_.Release();
}
inline void PvpPlayerData::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  _impl_.channelid_.SetAllocated(channelid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelid_.IsDefault()) {
    _impl_.channelid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.ChannelID)
}

// repeated uint32 SkinSuitID = 81;
inline int PvpPlayerData::_internal_skinsuitid_size() const {
  return _impl_.skinsuitid_.size();
}
inline int PvpPlayerData::skinsuitid_size() const {
  return _internal_skinsuitid_size();
}
inline void PvpPlayerData::clear_skinsuitid() {
  _impl_.skinsuitid_.Clear();
}
inline uint32_t PvpPlayerData::_internal_skinsuitid(int index) const {
  return _impl_.skinsuitid_.Get(index);
}
inline uint32_t PvpPlayerData::skinsuitid(int index) const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.SkinSuitID)
  return _internal_skinsuitid(index);
}
inline void PvpPlayerData::set_skinsuitid(int index, uint32_t value) {
  _impl_.skinsuitid_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.SkinSuitID)
}
inline void PvpPlayerData::_internal_add_skinsuitid(uint32_t value) {
  _impl_.skinsuitid_.Add(value);
}
inline void PvpPlayerData::add_skinsuitid(uint32_t value) {
  _internal_add_skinsuitid(value);
  // @@protoc_insertion_point(field_add:msg.PvpPlayerData.SkinSuitID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpPlayerData::_internal_skinsuitid() const {
  return _impl_.skinsuitid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpPlayerData::skinsuitid() const {
  // @@protoc_insertion_point(field_list:msg.PvpPlayerData.SkinSuitID)
  return _internal_skinsuitid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpPlayerData::_internal_mutable_skinsuitid() {
  return &_impl_.skinsuitid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpPlayerData::mutable_skinsuitid() {
  // @@protoc_insertion_point(field_mutable_list:msg.PvpPlayerData.SkinSuitID)
  return _internal_mutable_skinsuitid();
}

// uint32 FFMMR = 82;
inline void PvpPlayerData::clear_ffmmr() {
  _impl_.ffmmr_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_ffmmr() const {
  return _impl_.ffmmr_;
}
inline uint32_t PvpPlayerData::ffmmr() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.FFMMR)
  return _internal_ffmmr();
}
inline void PvpPlayerData::_internal_set_ffmmr(uint32_t value) {
  
  _impl_.ffmmr_ = value;
}
inline void PvpPlayerData::set_ffmmr(uint32_t value) {
  _internal_set_ffmmr(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.FFMMR)
}

// uint32 FFCup = 83;
inline void PvpPlayerData::clear_ffcup() {
  _impl_.ffcup_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_ffcup() const {
  return _impl_.ffcup_;
}
inline uint32_t PvpPlayerData::ffcup() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.FFCup)
  return _internal_ffcup();
}
inline void PvpPlayerData::_internal_set_ffcup(uint32_t value) {
  
  _impl_.ffcup_ = value;
}
inline void PvpPlayerData::set_ffcup(uint32_t value) {
  _internal_set_ffcup(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.FFCup)
}

// uint32 BattleTime = 84;
inline void PvpPlayerData::clear_battletime() {
  _impl_.battletime_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_battletime() const {
  return _impl_.battletime_;
}
inline uint32_t PvpPlayerData::battletime() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.BattleTime)
  return _internal_battletime();
}
inline void PvpPlayerData::_internal_set_battletime(uint32_t value) {
  
  _impl_.battletime_ = value;
}
inline void PvpPlayerData::set_battletime(uint32_t value) {
  _internal_set_battletime(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.BattleTime)
}

// map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 85;
inline int PvpPlayerData::_internal_chessskindata_size() const {
  return _impl_.chessskindata_.size();
}
inline int PvpPlayerData::chessskindata_size() const {
  return _internal_chessskindata_size();
}
inline void PvpPlayerData::clear_chessskindata() {
  _impl_.chessskindata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
PvpPlayerData::_internal_chessskindata() const {
  return _impl_.chessskindata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >&
PvpPlayerData::chessskindata() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.ChessSkinData)
  return _internal_chessskindata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
PvpPlayerData::_internal_mutable_chessskindata() {
  return _impl_.chessskindata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >*
PvpPlayerData::mutable_chessskindata() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.ChessSkinData)
  return _internal_mutable_chessskindata();
}

// map<uint32, .msg.CSDTItem> SkinData = 86;
inline int PvpPlayerData::_internal_skindata_size() const {
  return _impl_.skindata_.size();
}
inline int PvpPlayerData::skindata_size() const {
  return _internal_skindata_size();
}
inline void PvpPlayerData::clear_skindata() {
  _impl_.skindata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
PvpPlayerData::_internal_skindata() const {
  return _impl_.skindata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >&
PvpPlayerData::skindata() const {
  // @@protoc_insertion_point(field_map:msg.PvpPlayerData.SkinData)
  return _internal_skindata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
PvpPlayerData::_internal_mutable_skindata() {
  return _impl_.skindata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >*
PvpPlayerData::mutable_skindata() {
  // @@protoc_insertion_point(field_mutable_map:msg.PvpPlayerData.SkinData)
  return _internal_mutable_skindata();
}

// .msg.PvpData PvpData = 87;
inline bool PvpPlayerData::_internal_has_pvpdata() const {
  return this != internal_default_instance() && _impl_.pvpdata_ != nullptr;
}
inline bool PvpPlayerData::has_pvpdata() const {
  return _internal_has_pvpdata();
}
inline void PvpPlayerData::clear_pvpdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpdata_ != nullptr) {
    delete _impl_.pvpdata_;
  }
  _impl_.pvpdata_ = nullptr;
}
inline const ::msg::PvpData& PvpPlayerData::_internal_pvpdata() const {
  const ::msg::PvpData* p = _impl_.pvpdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PvpData&>(
      ::msg::_PvpData_default_instance_);
}
inline const ::msg::PvpData& PvpPlayerData::pvpdata() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PvpData)
  return _internal_pvpdata();
}
inline void PvpPlayerData::unsafe_arena_set_allocated_pvpdata(
    ::msg::PvpData* pvpdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpdata_);
  }
  _impl_.pvpdata_ = pvpdata;
  if (pvpdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpPlayerData.PvpData)
}
inline ::msg::PvpData* PvpPlayerData::release_pvpdata() {
  
  ::msg::PvpData* temp = _impl_.pvpdata_;
  _impl_.pvpdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PvpData* PvpPlayerData::unsafe_arena_release_pvpdata() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.PvpData)
  
  ::msg::PvpData* temp = _impl_.pvpdata_;
  _impl_.pvpdata_ = nullptr;
  return temp;
}
inline ::msg::PvpData* PvpPlayerData::_internal_mutable_pvpdata() {
  
  if (_impl_.pvpdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PvpData>(GetArenaForAllocation());
    _impl_.pvpdata_ = p;
  }
  return _impl_.pvpdata_;
}
inline ::msg::PvpData* PvpPlayerData::mutable_pvpdata() {
  ::msg::PvpData* _msg = _internal_mutable_pvpdata();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.PvpData)
  return _msg;
}
inline void PvpPlayerData::set_allocated_pvpdata(::msg::PvpData* pvpdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pvpdata_;
  }
  if (pvpdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pvpdata);
    if (message_arena != submessage_arena) {
      pvpdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpdata_ = pvpdata;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.PvpData)
}

// uint32 PvpVoiceMemId = 88;
inline void PvpPlayerData::clear_pvpvoicememid() {
  _impl_.pvpvoicememid_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_pvpvoicememid() const {
  return _impl_.pvpvoicememid_;
}
inline uint32_t PvpPlayerData::pvpvoicememid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.PvpVoiceMemId)
  return _internal_pvpvoicememid();
}
inline void PvpPlayerData::_internal_set_pvpvoicememid(uint32_t value) {
  
  _impl_.pvpvoicememid_ = value;
}
inline void PvpPlayerData::set_pvpvoicememid(uint32_t value) {
  _internal_set_pvpvoicememid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.PvpVoiceMemId)
}

// uint32 CampVoiceMemId = 89;
inline void PvpPlayerData::clear_campvoicememid() {
  _impl_.campvoicememid_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_campvoicememid() const {
  return _impl_.campvoicememid_;
}
inline uint32_t PvpPlayerData::campvoicememid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.CampVoiceMemId)
  return _internal_campvoicememid();
}
inline void PvpPlayerData::_internal_set_campvoicememid(uint32_t value) {
  
  _impl_.campvoicememid_ = value;
}
inline void PvpPlayerData::set_campvoicememid(uint32_t value) {
  _internal_set_campvoicememid(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.CampVoiceMemId)
}

// uint32 ChoseCardGroup = 90;
inline void PvpPlayerData::clear_chosecardgroup() {
  _impl_.chosecardgroup_ = 0u;
}
inline uint32_t PvpPlayerData::_internal_chosecardgroup() const {
  return _impl_.chosecardgroup_;
}
inline uint32_t PvpPlayerData::chosecardgroup() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ChoseCardGroup)
  return _internal_chosecardgroup();
}
inline void PvpPlayerData::_internal_set_chosecardgroup(uint32_t value) {
  
  _impl_.chosecardgroup_ = value;
}
inline void PvpPlayerData::set_chosecardgroup(uint32_t value) {
  _internal_set_chosecardgroup(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ChoseCardGroup)
}

// string MentorId = 91;
inline void PvpPlayerData::clear_mentorid() {
  _impl_.mentorid_.ClearToEmpty();
}
inline const std::string& PvpPlayerData::mentorid() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.MentorId)
  return _internal_mentorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpPlayerData::set_mentorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mentorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.MentorId)
}
inline std::string* PvpPlayerData::mutable_mentorid() {
  std::string* _s = _internal_mutable_mentorid();
  // @@protoc_insertion_point(field_mutable:msg.PvpPlayerData.MentorId)
  return _s;
}
inline const std::string& PvpPlayerData::_internal_mentorid() const {
  return _impl_.mentorid_.Get();
}
inline void PvpPlayerData::_internal_set_mentorid(const std::string& value) {
  
  _impl_.mentorid_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpPlayerData::_internal_mutable_mentorid() {
  
  return _impl_.mentorid_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpPlayerData::release_mentorid() {
  // @@protoc_insertion_point(field_release:msg.PvpPlayerData.MentorId)
  return _impl_.mentorid_.Release();
}
inline void PvpPlayerData::set_allocated_mentorid(std::string* mentorid) {
  if (mentorid != nullptr) {
    
  } else {
    
  }
  _impl_.mentorid_.SetAllocated(mentorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mentorid_.IsDefault()) {
    _impl_.mentorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpPlayerData.MentorId)
}

// .msg.EXCHANGESTATE ExchangeState = 92;
inline void PvpPlayerData::clear_exchangestate() {
  _impl_.exchangestate_ = 0;
}
inline ::msg::EXCHANGESTATE PvpPlayerData::_internal_exchangestate() const {
  return static_cast< ::msg::EXCHANGESTATE >(_impl_.exchangestate_);
}
inline ::msg::EXCHANGESTATE PvpPlayerData::exchangestate() const {
  // @@protoc_insertion_point(field_get:msg.PvpPlayerData.ExchangeState)
  return _internal_exchangestate();
}
inline void PvpPlayerData::_internal_set_exchangestate(::msg::EXCHANGESTATE value) {
  
  _impl_.exchangestate_ = value;
}
inline void PvpPlayerData::set_exchangestate(::msg::EXCHANGESTATE value) {
  _internal_set_exchangestate(value);
  // @@protoc_insertion_point(field_set:msg.PvpPlayerData.ExchangeState)
}

// -------------------------------------------------------------------

// PvpData

// .msg.PveDataInfo Pve = 1;
inline bool PvpData::_internal_has_pve() const {
  return this != internal_default_instance() && _impl_.pve_ != nullptr;
}
inline bool PvpData::has_pve() const {
  return _internal_has_pve();
}
inline void PvpData::clear_pve() {
  if (GetArenaForAllocation() == nullptr && _impl_.pve_ != nullptr) {
    delete _impl_.pve_;
  }
  _impl_.pve_ = nullptr;
}
inline const ::msg::PveDataInfo& PvpData::_internal_pve() const {
  const ::msg::PveDataInfo* p = _impl_.pve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PveDataInfo&>(
      ::msg::_PveDataInfo_default_instance_);
}
inline const ::msg::PveDataInfo& PvpData::pve() const {
  // @@protoc_insertion_point(field_get:msg.PvpData.Pve)
  return _internal_pve();
}
inline void PvpData::unsafe_arena_set_allocated_pve(
    ::msg::PveDataInfo* pve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pve_);
  }
  _impl_.pve_ = pve;
  if (pve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpData.Pve)
}
inline ::msg::PveDataInfo* PvpData::release_pve() {
  
  ::msg::PveDataInfo* temp = _impl_.pve_;
  _impl_.pve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PveDataInfo* PvpData::unsafe_arena_release_pve() {
  // @@protoc_insertion_point(field_release:msg.PvpData.Pve)
  
  ::msg::PveDataInfo* temp = _impl_.pve_;
  _impl_.pve_ = nullptr;
  return temp;
}
inline ::msg::PveDataInfo* PvpData::_internal_mutable_pve() {
  
  if (_impl_.pve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PveDataInfo>(GetArenaForAllocation());
    _impl_.pve_ = p;
  }
  return _impl_.pve_;
}
inline ::msg::PveDataInfo* PvpData::mutable_pve() {
  ::msg::PveDataInfo* _msg = _internal_mutable_pve();
  // @@protoc_insertion_point(field_mutable:msg.PvpData.Pve)
  return _msg;
}
inline void PvpData::set_allocated_pve(::msg::PveDataInfo* pve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pve_;
  }
  if (pve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pve);
    if (message_arena != submessage_arena) {
      pve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pve_ = pve;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpData.Pve)
}

// .msg.CardGroupData CardGroup = 2;
inline bool PvpData::_internal_has_cardgroup() const {
  return this != internal_default_instance() && _impl_.cardgroup_ != nullptr;
}
inline bool PvpData::has_cardgroup() const {
  return _internal_has_cardgroup();
}
inline void PvpData::clear_cardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroup_ != nullptr) {
    delete _impl_.cardgroup_;
  }
  _impl_.cardgroup_ = nullptr;
}
inline const ::msg::CardGroupData& PvpData::_internal_cardgroup() const {
  const ::msg::CardGroupData* p = _impl_.cardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CardGroupData&>(
      ::msg::_CardGroupData_default_instance_);
}
inline const ::msg::CardGroupData& PvpData::cardgroup() const {
  // @@protoc_insertion_point(field_get:msg.PvpData.CardGroup)
  return _internal_cardgroup();
}
inline void PvpData::unsafe_arena_set_allocated_cardgroup(
    ::msg::CardGroupData* cardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cardgroup_);
  }
  _impl_.cardgroup_ = cardgroup;
  if (cardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpData.CardGroup)
}
inline ::msg::CardGroupData* PvpData::release_cardgroup() {
  
  ::msg::CardGroupData* temp = _impl_.cardgroup_;
  _impl_.cardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CardGroupData* PvpData::unsafe_arena_release_cardgroup() {
  // @@protoc_insertion_point(field_release:msg.PvpData.CardGroup)
  
  ::msg::CardGroupData* temp = _impl_.cardgroup_;
  _impl_.cardgroup_ = nullptr;
  return temp;
}
inline ::msg::CardGroupData* PvpData::_internal_mutable_cardgroup() {
  
  if (_impl_.cardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CardGroupData>(GetArenaForAllocation());
    _impl_.cardgroup_ = p;
  }
  return _impl_.cardgroup_;
}
inline ::msg::CardGroupData* PvpData::mutable_cardgroup() {
  ::msg::CardGroupData* _msg = _internal_mutable_cardgroup();
  // @@protoc_insertion_point(field_mutable:msg.PvpData.CardGroup)
  return _msg;
}
inline void PvpData::set_allocated_cardgroup(::msg::CardGroupData* cardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cardgroup_;
  }
  if (cardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cardgroup);
    if (message_arena != submessage_arena) {
      cardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cardgroup_ = cardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpData.CardGroup)
}

// .msg.TowerDefenseData TowerDefense = 3;
inline bool PvpData::_internal_has_towerdefense() const {
  return this != internal_default_instance() && _impl_.towerdefense_ != nullptr;
}
inline bool PvpData::has_towerdefense() const {
  return _internal_has_towerdefense();
}
inline void PvpData::clear_towerdefense() {
  if (GetArenaForAllocation() == nullptr && _impl_.towerdefense_ != nullptr) {
    delete _impl_.towerdefense_;
  }
  _impl_.towerdefense_ = nullptr;
}
inline const ::msg::TowerDefenseData& PvpData::_internal_towerdefense() const {
  const ::msg::TowerDefenseData* p = _impl_.towerdefense_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TowerDefenseData&>(
      ::msg::_TowerDefenseData_default_instance_);
}
inline const ::msg::TowerDefenseData& PvpData::towerdefense() const {
  // @@protoc_insertion_point(field_get:msg.PvpData.TowerDefense)
  return _internal_towerdefense();
}
inline void PvpData::unsafe_arena_set_allocated_towerdefense(
    ::msg::TowerDefenseData* towerdefense) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.towerdefense_);
  }
  _impl_.towerdefense_ = towerdefense;
  if (towerdefense) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpData.TowerDefense)
}
inline ::msg::TowerDefenseData* PvpData::release_towerdefense() {
  
  ::msg::TowerDefenseData* temp = _impl_.towerdefense_;
  _impl_.towerdefense_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TowerDefenseData* PvpData::unsafe_arena_release_towerdefense() {
  // @@protoc_insertion_point(field_release:msg.PvpData.TowerDefense)
  
  ::msg::TowerDefenseData* temp = _impl_.towerdefense_;
  _impl_.towerdefense_ = nullptr;
  return temp;
}
inline ::msg::TowerDefenseData* PvpData::_internal_mutable_towerdefense() {
  
  if (_impl_.towerdefense_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TowerDefenseData>(GetArenaForAllocation());
    _impl_.towerdefense_ = p;
  }
  return _impl_.towerdefense_;
}
inline ::msg::TowerDefenseData* PvpData::mutable_towerdefense() {
  ::msg::TowerDefenseData* _msg = _internal_mutable_towerdefense();
  // @@protoc_insertion_point(field_mutable:msg.PvpData.TowerDefense)
  return _msg;
}
inline void PvpData::set_allocated_towerdefense(::msg::TowerDefenseData* towerdefense) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.towerdefense_;
  }
  if (towerdefense) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(towerdefense);
    if (message_arena != submessage_arena) {
      towerdefense = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, towerdefense, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.towerdefense_ = towerdefense;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpData.TowerDefense)
}

// -------------------------------------------------------------------

// TDCardGroup

// repeated int32 Ids = 1;
inline int TDCardGroup::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int TDCardGroup::ids_size() const {
  return _internal_ids_size();
}
inline void TDCardGroup::clear_ids() {
  _impl_.ids_.Clear();
}
inline int32_t TDCardGroup::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int32_t TDCardGroup::ids(int index) const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroup.Ids)
  return _internal_ids(index);
}
inline void TDCardGroup::set_ids(int index, int32_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.TDCardGroup.Ids)
}
inline void TDCardGroup::_internal_add_ids(int32_t value) {
  _impl_.ids_.Add(value);
}
inline void TDCardGroup::add_ids(int32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:msg.TDCardGroup.Ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroup::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TDCardGroup::ids() const {
  // @@protoc_insertion_point(field_list:msg.TDCardGroup.Ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroup::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TDCardGroup::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:msg.TDCardGroup.Ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// TDCardGroups

// .msg.TDCardGroup ChessBoard = 1;
inline bool TDCardGroups::_internal_has_chessboard() const {
  return this != internal_default_instance() && _impl_.chessboard_ != nullptr;
}
inline bool TDCardGroups::has_chessboard() const {
  return _internal_has_chessboard();
}
inline void TDCardGroups::clear_chessboard() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessboard_ != nullptr) {
    delete _impl_.chessboard_;
  }
  _impl_.chessboard_ = nullptr;
}
inline const ::msg::TDCardGroup& TDCardGroups::_internal_chessboard() const {
  const ::msg::TDCardGroup* p = _impl_.chessboard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDCardGroup&>(
      ::msg::_TDCardGroup_default_instance_);
}
inline const ::msg::TDCardGroup& TDCardGroups::chessboard() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroups.ChessBoard)
  return _internal_chessboard();
}
inline void TDCardGroups::unsafe_arena_set_allocated_chessboard(
    ::msg::TDCardGroup* chessboard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessboard_);
  }
  _impl_.chessboard_ = chessboard;
  if (chessboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDCardGroups.ChessBoard)
}
inline ::msg::TDCardGroup* TDCardGroups::release_chessboard() {
  
  ::msg::TDCardGroup* temp = _impl_.chessboard_;
  _impl_.chessboard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDCardGroup* TDCardGroups::unsafe_arena_release_chessboard() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroups.ChessBoard)
  
  ::msg::TDCardGroup* temp = _impl_.chessboard_;
  _impl_.chessboard_ = nullptr;
  return temp;
}
inline ::msg::TDCardGroup* TDCardGroups::_internal_mutable_chessboard() {
  
  if (_impl_.chessboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDCardGroup>(GetArenaForAllocation());
    _impl_.chessboard_ = p;
  }
  return _impl_.chessboard_;
}
inline ::msg::TDCardGroup* TDCardGroups::mutable_chessboard() {
  ::msg::TDCardGroup* _msg = _internal_mutable_chessboard();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroups.ChessBoard)
  return _msg;
}
inline void TDCardGroups::set_allocated_chessboard(::msg::TDCardGroup* chessboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chessboard_;
  }
  if (chessboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chessboard);
    if (message_arena != submessage_arena) {
      chessboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessboard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessboard_ = chessboard;
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroups.ChessBoard)
}

// .msg.TDCardGroup ChessPlayer = 2;
inline bool TDCardGroups::_internal_has_chessplayer() const {
  return this != internal_default_instance() && _impl_.chessplayer_ != nullptr;
}
inline bool TDCardGroups::has_chessplayer() const {
  return _internal_has_chessplayer();
}
inline void TDCardGroups::clear_chessplayer() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessplayer_ != nullptr) {
    delete _impl_.chessplayer_;
  }
  _impl_.chessplayer_ = nullptr;
}
inline const ::msg::TDCardGroup& TDCardGroups::_internal_chessplayer() const {
  const ::msg::TDCardGroup* p = _impl_.chessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDCardGroup&>(
      ::msg::_TDCardGroup_default_instance_);
}
inline const ::msg::TDCardGroup& TDCardGroups::chessplayer() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroups.ChessPlayer)
  return _internal_chessplayer();
}
inline void TDCardGroups::unsafe_arena_set_allocated_chessplayer(
    ::msg::TDCardGroup* chessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessplayer_);
  }
  _impl_.chessplayer_ = chessplayer;
  if (chessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDCardGroups.ChessPlayer)
}
inline ::msg::TDCardGroup* TDCardGroups::release_chessplayer() {
  
  ::msg::TDCardGroup* temp = _impl_.chessplayer_;
  _impl_.chessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDCardGroup* TDCardGroups::unsafe_arena_release_chessplayer() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroups.ChessPlayer)
  
  ::msg::TDCardGroup* temp = _impl_.chessplayer_;
  _impl_.chessplayer_ = nullptr;
  return temp;
}
inline ::msg::TDCardGroup* TDCardGroups::_internal_mutable_chessplayer() {
  
  if (_impl_.chessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDCardGroup>(GetArenaForAllocation());
    _impl_.chessplayer_ = p;
  }
  return _impl_.chessplayer_;
}
inline ::msg::TDCardGroup* TDCardGroups::mutable_chessplayer() {
  ::msg::TDCardGroup* _msg = _internal_mutable_chessplayer();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroups.ChessPlayer)
  return _msg;
}
inline void TDCardGroups::set_allocated_chessplayer(::msg::TDCardGroup* chessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chessplayer_;
  }
  if (chessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chessplayer);
    if (message_arena != submessage_arena) {
      chessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessplayer_ = chessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroups.ChessPlayer)
}

// .msg.TDCardGroup ChessMan = 3;
inline bool TDCardGroups::_internal_has_chessman() const {
  return this != internal_default_instance() && _impl_.chessman_ != nullptr;
}
inline bool TDCardGroups::has_chessman() const {
  return _internal_has_chessman();
}
inline void TDCardGroups::clear_chessman() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessman_ != nullptr) {
    delete _impl_.chessman_;
  }
  _impl_.chessman_ = nullptr;
}
inline const ::msg::TDCardGroup& TDCardGroups::_internal_chessman() const {
  const ::msg::TDCardGroup* p = _impl_.chessman_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDCardGroup&>(
      ::msg::_TDCardGroup_default_instance_);
}
inline const ::msg::TDCardGroup& TDCardGroups::chessman() const {
  // @@protoc_insertion_point(field_get:msg.TDCardGroups.ChessMan)
  return _internal_chessman();
}
inline void TDCardGroups::unsafe_arena_set_allocated_chessman(
    ::msg::TDCardGroup* chessman) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessman_);
  }
  _impl_.chessman_ = chessman;
  if (chessman) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDCardGroups.ChessMan)
}
inline ::msg::TDCardGroup* TDCardGroups::release_chessman() {
  
  ::msg::TDCardGroup* temp = _impl_.chessman_;
  _impl_.chessman_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDCardGroup* TDCardGroups::unsafe_arena_release_chessman() {
  // @@protoc_insertion_point(field_release:msg.TDCardGroups.ChessMan)
  
  ::msg::TDCardGroup* temp = _impl_.chessman_;
  _impl_.chessman_ = nullptr;
  return temp;
}
inline ::msg::TDCardGroup* TDCardGroups::_internal_mutable_chessman() {
  
  if (_impl_.chessman_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDCardGroup>(GetArenaForAllocation());
    _impl_.chessman_ = p;
  }
  return _impl_.chessman_;
}
inline ::msg::TDCardGroup* TDCardGroups::mutable_chessman() {
  ::msg::TDCardGroup* _msg = _internal_mutable_chessman();
  // @@protoc_insertion_point(field_mutable:msg.TDCardGroups.ChessMan)
  return _msg;
}
inline void TDCardGroups::set_allocated_chessman(::msg::TDCardGroup* chessman) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chessman_;
  }
  if (chessman) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chessman);
    if (message_arena != submessage_arena) {
      chessman = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessman, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessman_ = chessman;
  // @@protoc_insertion_point(field_set_allocated:msg.TDCardGroups.ChessMan)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TDItemGroup

// .msg.TDCardGroups CardGroups = 1;
inline bool TDItemGroup::_internal_has_cardgroups() const {
  return this != internal_default_instance() && _impl_.cardgroups_ != nullptr;
}
inline bool TDItemGroup::has_cardgroups() const {
  return _internal_has_cardgroups();
}
inline void TDItemGroup::clear_cardgroups() {
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroups_ != nullptr) {
    delete _impl_.cardgroups_;
  }
  _impl_.cardgroups_ = nullptr;
}
inline const ::msg::TDCardGroups& TDItemGroup::_internal_cardgroups() const {
  const ::msg::TDCardGroups* p = _impl_.cardgroups_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDCardGroups&>(
      ::msg::_TDCardGroups_default_instance_);
}
inline const ::msg::TDCardGroups& TDItemGroup::cardgroups() const {
  // @@protoc_insertion_point(field_get:msg.TDItemGroup.CardGroups)
  return _internal_cardgroups();
}
inline void TDItemGroup::unsafe_arena_set_allocated_cardgroups(
    ::msg::TDCardGroups* cardgroups) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cardgroups_);
  }
  _impl_.cardgroups_ = cardgroups;
  if (cardgroups) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDItemGroup.CardGroups)
}
inline ::msg::TDCardGroups* TDItemGroup::release_cardgroups() {
  
  ::msg::TDCardGroups* temp = _impl_.cardgroups_;
  _impl_.cardgroups_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDCardGroups* TDItemGroup::unsafe_arena_release_cardgroups() {
  // @@protoc_insertion_point(field_release:msg.TDItemGroup.CardGroups)
  
  ::msg::TDCardGroups* temp = _impl_.cardgroups_;
  _impl_.cardgroups_ = nullptr;
  return temp;
}
inline ::msg::TDCardGroups* TDItemGroup::_internal_mutable_cardgroups() {
  
  if (_impl_.cardgroups_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDCardGroups>(GetArenaForAllocation());
    _impl_.cardgroups_ = p;
  }
  return _impl_.cardgroups_;
}
inline ::msg::TDCardGroups* TDItemGroup::mutable_cardgroups() {
  ::msg::TDCardGroups* _msg = _internal_mutable_cardgroups();
  // @@protoc_insertion_point(field_mutable:msg.TDItemGroup.CardGroups)
  return _msg;
}
inline void TDItemGroup::set_allocated_cardgroups(::msg::TDCardGroups* cardgroups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cardgroups_;
  }
  if (cardgroups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cardgroups);
    if (message_arena != submessage_arena) {
      cardgroups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardgroups, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cardgroups_ = cardgroups;
  // @@protoc_insertion_point(field_set_allocated:msg.TDItemGroup.CardGroups)
}

// map<int32, .msg.TDItem> Items = 2;
inline int TDItemGroup::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int TDItemGroup::items_size() const {
  return _internal_items_size();
}
inline void TDItemGroup::clear_items() {
  _impl_.items_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >&
TDItemGroup::_internal_items() const {
  return _impl_.items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >&
TDItemGroup::items() const {
  // @@protoc_insertion_point(field_map:msg.TDItemGroup.Items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >*
TDItemGroup::_internal_mutable_items() {
  return _impl_.items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >*
TDItemGroup::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:msg.TDItemGroup.Items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// TowerDefenseData

// .msg.TDItemGroup ItemGroup = 1;
inline bool TowerDefenseData::_internal_has_itemgroup() const {
  return this != internal_default_instance() && _impl_.itemgroup_ != nullptr;
}
inline bool TowerDefenseData::has_itemgroup() const {
  return _internal_has_itemgroup();
}
inline void TowerDefenseData::clear_itemgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup_ != nullptr) {
    delete _impl_.itemgroup_;
  }
  _impl_.itemgroup_ = nullptr;
}
inline const ::msg::TDItemGroup& TowerDefenseData::_internal_itemgroup() const {
  const ::msg::TDItemGroup* p = _impl_.itemgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemGroup&>(
      ::msg::_TDItemGroup_default_instance_);
}
inline const ::msg::TDItemGroup& TowerDefenseData::itemgroup() const {
  // @@protoc_insertion_point(field_get:msg.TowerDefenseData.ItemGroup)
  return _internal_itemgroup();
}
inline void TowerDefenseData::unsafe_arena_set_allocated_itemgroup(
    ::msg::TDItemGroup* itemgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemgroup_);
  }
  _impl_.itemgroup_ = itemgroup;
  if (itemgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TowerDefenseData.ItemGroup)
}
inline ::msg::TDItemGroup* TowerDefenseData::release_itemgroup() {
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup_;
  _impl_.itemgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemGroup* TowerDefenseData::unsafe_arena_release_itemgroup() {
  // @@protoc_insertion_point(field_release:msg.TowerDefenseData.ItemGroup)
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup_;
  _impl_.itemgroup_ = nullptr;
  return temp;
}
inline ::msg::TDItemGroup* TowerDefenseData::_internal_mutable_itemgroup() {
  
  if (_impl_.itemgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemGroup>(GetArenaForAllocation());
    _impl_.itemgroup_ = p;
  }
  return _impl_.itemgroup_;
}
inline ::msg::TDItemGroup* TowerDefenseData::mutable_itemgroup() {
  ::msg::TDItemGroup* _msg = _internal_mutable_itemgroup();
  // @@protoc_insertion_point(field_mutable:msg.TowerDefenseData.ItemGroup)
  return _msg;
}
inline void TowerDefenseData::set_allocated_itemgroup(::msg::TDItemGroup* itemgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.itemgroup_;
  }
  if (itemgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(itemgroup);
    if (message_arena != submessage_arena) {
      itemgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, itemgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.itemgroup_ = itemgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.TowerDefenseData.ItemGroup)
}

// -------------------------------------------------------------------

// KernelCardGroup

// repeated uint32 ChessIds = 1;
inline int KernelCardGroup::_internal_chessids_size() const {
  return _impl_.chessids_.size();
}
inline int KernelCardGroup::chessids_size() const {
  return _internal_chessids_size();
}
inline void KernelCardGroup::clear_chessids() {
  _impl_.chessids_.Clear();
}
inline uint32_t KernelCardGroup::_internal_chessids(int index) const {
  return _impl_.chessids_.Get(index);
}
inline uint32_t KernelCardGroup::chessids(int index) const {
  // @@protoc_insertion_point(field_get:msg.KernelCardGroup.ChessIds)
  return _internal_chessids(index);
}
inline void KernelCardGroup::set_chessids(int index, uint32_t value) {
  _impl_.chessids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.KernelCardGroup.ChessIds)
}
inline void KernelCardGroup::_internal_add_chessids(uint32_t value) {
  _impl_.chessids_.Add(value);
}
inline void KernelCardGroup::add_chessids(uint32_t value) {
  _internal_add_chessids(value);
  // @@protoc_insertion_point(field_add:msg.KernelCardGroup.ChessIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
KernelCardGroup::_internal_chessids() const {
  return _impl_.chessids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
KernelCardGroup::chessids() const {
  // @@protoc_insertion_point(field_list:msg.KernelCardGroup.ChessIds)
  return _internal_chessids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
KernelCardGroup::_internal_mutable_chessids() {
  return &_impl_.chessids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
KernelCardGroup::mutable_chessids() {
  // @@protoc_insertion_point(field_mutable_list:msg.KernelCardGroup.ChessIds)
  return _internal_mutable_chessids();
}

// -------------------------------------------------------------------

// KernelChessInfo

// int32 Id = 1;
inline void KernelChessInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t KernelChessInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t KernelChessInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.KernelChessInfo.Id)
  return _internal_id();
}
inline void KernelChessInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void KernelChessInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.KernelChessInfo.Id)
}

// int32 Level = 2;
inline void KernelChessInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t KernelChessInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t KernelChessInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.KernelChessInfo.Level)
  return _internal_level();
}
inline void KernelChessInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void KernelChessInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.KernelChessInfo.Level)
}

// int32 Quantity = 3;
inline void KernelChessInfo::clear_quantity() {
  _impl_.quantity_ = 0;
}
inline int32_t KernelChessInfo::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int32_t KernelChessInfo::quantity() const {
  // @@protoc_insertion_point(field_get:msg.KernelChessInfo.Quantity)
  return _internal_quantity();
}
inline void KernelChessInfo::_internal_set_quantity(int32_t value) {
  
  _impl_.quantity_ = value;
}
inline void KernelChessInfo::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:msg.KernelChessInfo.Quantity)
}

// -------------------------------------------------------------------

// ApplyWorkshopRule

// .msg.BattleExtData ExtData = 1;
inline bool ApplyWorkshopRule::_internal_has_extdata() const {
  return this != internal_default_instance() && _impl_.extdata_ != nullptr;
}
inline bool ApplyWorkshopRule::has_extdata() const {
  return _internal_has_extdata();
}
inline void ApplyWorkshopRule::clear_extdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.extdata_ != nullptr) {
    delete _impl_.extdata_;
  }
  _impl_.extdata_ = nullptr;
}
inline const ::msg::BattleExtData& ApplyWorkshopRule::_internal_extdata() const {
  const ::msg::BattleExtData* p = _impl_.extdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::BattleExtData&>(
      ::msg::_BattleExtData_default_instance_);
}
inline const ::msg::BattleExtData& ApplyWorkshopRule::extdata() const {
  // @@protoc_insertion_point(field_get:msg.ApplyWorkshopRule.ExtData)
  return _internal_extdata();
}
inline void ApplyWorkshopRule::unsafe_arena_set_allocated_extdata(
    ::msg::BattleExtData* extdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extdata_);
  }
  _impl_.extdata_ = extdata;
  if (extdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ApplyWorkshopRule.ExtData)
}
inline ::msg::BattleExtData* ApplyWorkshopRule::release_extdata() {
  
  ::msg::BattleExtData* temp = _impl_.extdata_;
  _impl_.extdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::BattleExtData* ApplyWorkshopRule::unsafe_arena_release_extdata() {
  // @@protoc_insertion_point(field_release:msg.ApplyWorkshopRule.ExtData)
  
  ::msg::BattleExtData* temp = _impl_.extdata_;
  _impl_.extdata_ = nullptr;
  return temp;
}
inline ::msg::BattleExtData* ApplyWorkshopRule::_internal_mutable_extdata() {
  
  if (_impl_.extdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::BattleExtData>(GetArenaForAllocation());
    _impl_.extdata_ = p;
  }
  return _impl_.extdata_;
}
inline ::msg::BattleExtData* ApplyWorkshopRule::mutable_extdata() {
  ::msg::BattleExtData* _msg = _internal_mutable_extdata();
  // @@protoc_insertion_point(field_mutable:msg.ApplyWorkshopRule.ExtData)
  return _msg;
}
inline void ApplyWorkshopRule::set_allocated_extdata(::msg::BattleExtData* extdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.extdata_;
  }
  if (extdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extdata);
    if (message_arena != submessage_arena) {
      extdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extdata_ = extdata;
  // @@protoc_insertion_point(field_set_allocated:msg.ApplyWorkshopRule.ExtData)
}

// -------------------------------------------------------------------

// CSDTVisitedMap

// int64 TimeStamp = 1;
inline void CSDTVisitedMap::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t CSDTVisitedMap::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t CSDTVisitedMap::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTVisitedMap.TimeStamp)
  return _internal_timestamp();
}
inline void CSDTVisitedMap::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void CSDTVisitedMap::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTVisitedMap.TimeStamp)
}

// uint32 MapID = 2;
inline void CSDTVisitedMap::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t CSDTVisitedMap::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t CSDTVisitedMap::mapid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTVisitedMap.MapID)
  return _internal_mapid();
}
inline void CSDTVisitedMap::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void CSDTVisitedMap::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTVisitedMap.MapID)
}

// uint32 SubMapID = 3;
inline void CSDTVisitedMap::clear_submapid() {
  _impl_.submapid_ = 0u;
}
inline uint32_t CSDTVisitedMap::_internal_submapid() const {
  return _impl_.submapid_;
}
inline uint32_t CSDTVisitedMap::submapid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTVisitedMap.SubMapID)
  return _internal_submapid();
}
inline void CSDTVisitedMap::_internal_set_submapid(uint32_t value) {
  
  _impl_.submapid_ = value;
}
inline void CSDTVisitedMap::set_submapid(uint32_t value) {
  _internal_set_submapid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTVisitedMap.SubMapID)
}

// bool IsPlaying = 4;
inline void CSDTVisitedMap::clear_isplaying() {
  _impl_.isplaying_ = false;
}
inline bool CSDTVisitedMap::_internal_isplaying() const {
  return _impl_.isplaying_;
}
inline bool CSDTVisitedMap::isplaying() const {
  // @@protoc_insertion_point(field_get:msg.CSDTVisitedMap.IsPlaying)
  return _internal_isplaying();
}
inline void CSDTVisitedMap::_internal_set_isplaying(bool value) {
  
  _impl_.isplaying_ = value;
}
inline void CSDTVisitedMap::set_isplaying(bool value) {
  _internal_set_isplaying(value);
  // @@protoc_insertion_point(field_set:msg.CSDTVisitedMap.IsPlaying)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VisitedMaps

// string PlayerID = 1;
inline void VisitedMaps::clear_playerid() {
  _impl_.playerid_.ClearToEmpty();
}
inline const std::string& VisitedMaps::playerid() const {
  // @@protoc_insertion_point(field_get:msg.VisitedMaps.PlayerID)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisitedMaps::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.VisitedMaps.PlayerID)
}
inline std::string* VisitedMaps::mutable_playerid() {
  std::string* _s = _internal_mutable_playerid();
  // @@protoc_insertion_point(field_mutable:msg.VisitedMaps.PlayerID)
  return _s;
}
inline const std::string& VisitedMaps::_internal_playerid() const {
  return _impl_.playerid_.Get();
}
inline void VisitedMaps::_internal_set_playerid(const std::string& value) {
  
  _impl_.playerid_.Set(value, GetArenaForAllocation());
}
inline std::string* VisitedMaps::_internal_mutable_playerid() {
  
  return _impl_.playerid_.Mutable(GetArenaForAllocation());
}
inline std::string* VisitedMaps::release_playerid() {
  // @@protoc_insertion_point(field_release:msg.VisitedMaps.PlayerID)
  return _impl_.playerid_.Release();
}
inline void VisitedMaps::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  _impl_.playerid_.SetAllocated(playerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerid_.IsDefault()) {
    _impl_.playerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.VisitedMaps.PlayerID)
}

// map<uint32, .msg.CSDTVisitedMap> Maps = 2;
inline int VisitedMaps::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int VisitedMaps::maps_size() const {
  return _internal_maps_size();
}
inline void VisitedMaps::clear_maps() {
  _impl_.maps_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >&
VisitedMaps::_internal_maps() const {
  return _impl_.maps_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >&
VisitedMaps::maps() const {
  // @@protoc_insertion_point(field_map:msg.VisitedMaps.Maps)
  return _internal_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >*
VisitedMaps::_internal_mutable_maps() {
  return _impl_.maps_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >*
VisitedMaps::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_map:msg.VisitedMaps.Maps)
  return _internal_mutable_maps();
}

// -------------------------------------------------------------------

// CSDTCurShowItem

// uint32 Id = 1;
inline void CSDTCurShowItem::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTCurShowItem::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTCurShowItem::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCurShowItem.Id)
  return _internal_id();
}
inline void CSDTCurShowItem::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTCurShowItem::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTCurShowItem.Id)
}

// string InstanceId = 2;
inline void CSDTCurShowItem::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& CSDTCurShowItem::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCurShowItem.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTCurShowItem::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTCurShowItem.InstanceId)
}
inline std::string* CSDTCurShowItem::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTCurShowItem.InstanceId)
  return _s;
}
inline const std::string& CSDTCurShowItem::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void CSDTCurShowItem::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTCurShowItem::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTCurShowItem::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.CSDTCurShowItem.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void CSDTCurShowItem::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTCurShowItem.InstanceId)
}

// -------------------------------------------------------------------

// CSDTPassportHistory

// .msg.PASSPORTTYPE Type = 1;
inline void CSDTPassportHistory::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::PASSPORTTYPE CSDTPassportHistory::_internal_type() const {
  return static_cast< ::msg::PASSPORTTYPE >(_impl_.type_);
}
inline ::msg::PASSPORTTYPE CSDTPassportHistory::type() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPassportHistory.Type)
  return _internal_type();
}
inline void CSDTPassportHistory::_internal_set_type(::msg::PASSPORTTYPE value) {
  
  _impl_.type_ = value;
}
inline void CSDTPassportHistory::set_type(::msg::PASSPORTTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPassportHistory.Type)
}

// uint32 Season = 2;
inline void CSDTPassportHistory::clear_season() {
  _impl_.season_ = 0u;
}
inline uint32_t CSDTPassportHistory::_internal_season() const {
  return _impl_.season_;
}
inline uint32_t CSDTPassportHistory::season() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPassportHistory.Season)
  return _internal_season();
}
inline void CSDTPassportHistory::_internal_set_season(uint32_t value) {
  
  _impl_.season_ = value;
}
inline void CSDTPassportHistory::set_season(uint32_t value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPassportHistory.Season)
}

// uint32 Level = 3;
inline void CSDTPassportHistory::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t CSDTPassportHistory::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CSDTPassportHistory::level() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPassportHistory.Level)
  return _internal_level();
}
inline void CSDTPassportHistory::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void CSDTPassportHistory::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPassportHistory.Level)
}

// -------------------------------------------------------------------

// ExchangeRecord

// bool Init = 1;
inline void ExchangeRecord::clear_init() {
  _impl_.init_ = false;
}
inline bool ExchangeRecord::_internal_init() const {
  return _impl_.init_;
}
inline bool ExchangeRecord::init() const {
  // @@protoc_insertion_point(field_get:msg.ExchangeRecord.Init)
  return _internal_init();
}
inline void ExchangeRecord::_internal_set_init(bool value) {
  
  _impl_.init_ = value;
}
inline void ExchangeRecord::set_init(bool value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:msg.ExchangeRecord.Init)
}

// int32 BalanceCount = 2;
inline void ExchangeRecord::clear_balancecount() {
  _impl_.balancecount_ = 0;
}
inline int32_t ExchangeRecord::_internal_balancecount() const {
  return _impl_.balancecount_;
}
inline int32_t ExchangeRecord::balancecount() const {
  // @@protoc_insertion_point(field_get:msg.ExchangeRecord.BalanceCount)
  return _internal_balancecount();
}
inline void ExchangeRecord::_internal_set_balancecount(int32_t value) {
  
  _impl_.balancecount_ = value;
}
inline void ExchangeRecord::set_balancecount(int32_t value) {
  _internal_set_balancecount(value);
  // @@protoc_insertion_point(field_set:msg.ExchangeRecord.BalanceCount)
}

// int32 SaleCount = 3;
inline void ExchangeRecord::clear_salecount() {
  _impl_.salecount_ = 0;
}
inline int32_t ExchangeRecord::_internal_salecount() const {
  return _impl_.salecount_;
}
inline int32_t ExchangeRecord::salecount() const {
  // @@protoc_insertion_point(field_get:msg.ExchangeRecord.SaleCount)
  return _internal_salecount();
}
inline void ExchangeRecord::_internal_set_salecount(int32_t value) {
  
  _impl_.salecount_ = value;
}
inline void ExchangeRecord::set_salecount(int32_t value) {
  _internal_set_salecount(value);
  // @@protoc_insertion_point(field_set:msg.ExchangeRecord.SaleCount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTPlayerBaseInfo

// string Id = 1;
inline void CSDTPlayerBaseInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTPlayerBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerBaseInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Id)
}
inline std::string* CSDTPlayerBaseInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.Id)
  return _s;
}
inline const std::string& CSDTPlayerBaseInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTPlayerBaseInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.Id)
  return _impl_.id_.Release();
}
inline void CSDTPlayerBaseInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.Id)
}

// string UsrName = 2;
inline void CSDTPlayerBaseInfo::clear_usrname() {
  _impl_.usrname_.ClearToEmpty();
}
inline const std::string& CSDTPlayerBaseInfo::usrname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.UsrName)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerBaseInfo::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usrname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.UsrName)
}
inline std::string* CSDTPlayerBaseInfo::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.UsrName)
  return _s;
}
inline const std::string& CSDTPlayerBaseInfo::_internal_usrname() const {
  return _impl_.usrname_.Get();
}
inline void CSDTPlayerBaseInfo::_internal_set_usrname(const std::string& value) {
  
  _impl_.usrname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::_internal_mutable_usrname() {
  
  return _impl_.usrname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::release_usrname() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.UsrName)
  return _impl_.usrname_.Release();
}
inline void CSDTPlayerBaseInfo::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  _impl_.usrname_.SetAllocated(usrname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usrname_.IsDefault()) {
    _impl_.usrname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.UsrName)
}

// uint32 HeadPic = 3;
inline void CSDTPlayerBaseInfo::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSDTPlayerBaseInfo::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.HeadPic)
  return _internal_headpic();
}
inline void CSDTPlayerBaseInfo::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSDTPlayerBaseInfo::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.HeadPic)
}

// uint32 ChatBubble = 4;
inline void CSDTPlayerBaseInfo::clear_chatbubble() {
  _impl_.chatbubble_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_chatbubble() const {
  return _impl_.chatbubble_;
}
inline uint32_t CSDTPlayerBaseInfo::chatbubble() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ChatBubble)
  return _internal_chatbubble();
}
inline void CSDTPlayerBaseInfo::_internal_set_chatbubble(uint32_t value) {
  
  _impl_.chatbubble_ = value;
}
inline void CSDTPlayerBaseInfo::set_chatbubble(uint32_t value) {
  _internal_set_chatbubble(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ChatBubble)
}

// uint32 MMR = 5;
inline void CSDTPlayerBaseInfo::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CSDTPlayerBaseInfo::mmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.MMR)
  return _internal_mmr();
}
inline void CSDTPlayerBaseInfo::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void CSDTPlayerBaseInfo::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.MMR)
}

// uint32 Level = 6;
inline void CSDTPlayerBaseInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CSDTPlayerBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Level)
  return _internal_level();
}
inline void CSDTPlayerBaseInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void CSDTPlayerBaseInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Level)
}

// uint32 Exp = 7;
inline void CSDTPlayerBaseInfo::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t CSDTPlayerBaseInfo::exp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Exp)
  return _internal_exp();
}
inline void CSDTPlayerBaseInfo::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void CSDTPlayerBaseInfo::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Exp)
}

// uint32 CurRankSeason = 8;
inline void CSDTPlayerBaseInfo::clear_currankseason() {
  _impl_.currankseason_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_currankseason() const {
  return _impl_.currankseason_;
}
inline uint32_t CSDTPlayerBaseInfo::currankseason() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.CurRankSeason)
  return _internal_currankseason();
}
inline void CSDTPlayerBaseInfo::_internal_set_currankseason(uint32_t value) {
  
  _impl_.currankseason_ = value;
}
inline void CSDTPlayerBaseInfo::set_currankseason(uint32_t value) {
  _internal_set_currankseason(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.CurRankSeason)
}

// .msg.HISTORYPVPSHOWPERMISSION HistoryPvpShowPermission = 9;
inline void CSDTPlayerBaseInfo::clear_historypvpshowpermission() {
  _impl_.historypvpshowpermission_ = 0;
}
inline ::msg::HISTORYPVPSHOWPERMISSION CSDTPlayerBaseInfo::_internal_historypvpshowpermission() const {
  return static_cast< ::msg::HISTORYPVPSHOWPERMISSION >(_impl_.historypvpshowpermission_);
}
inline ::msg::HISTORYPVPSHOWPERMISSION CSDTPlayerBaseInfo::historypvpshowpermission() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.HistoryPvpShowPermission)
  return _internal_historypvpshowpermission();
}
inline void CSDTPlayerBaseInfo::_internal_set_historypvpshowpermission(::msg::HISTORYPVPSHOWPERMISSION value) {
  
  _impl_.historypvpshowpermission_ = value;
}
inline void CSDTPlayerBaseInfo::set_historypvpshowpermission(::msg::HISTORYPVPSHOWPERMISSION value) {
  _internal_set_historypvpshowpermission(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.HistoryPvpShowPermission)
}

// map<uint64, string> PvpHistory = 10;
inline int CSDTPlayerBaseInfo::_internal_pvphistory_size() const {
  return _impl_.pvphistory_.size();
}
inline int CSDTPlayerBaseInfo::pvphistory_size() const {
  return _internal_pvphistory_size();
}
inline void CSDTPlayerBaseInfo::clear_pvphistory() {
  _impl_.pvphistory_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
CSDTPlayerBaseInfo::_internal_pvphistory() const {
  return _impl_.pvphistory_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >&
CSDTPlayerBaseInfo::pvphistory() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPlayerBaseInfo.PvpHistory)
  return _internal_pvphistory();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
CSDTPlayerBaseInfo::_internal_mutable_pvphistory() {
  return _impl_.pvphistory_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >*
CSDTPlayerBaseInfo::mutable_pvphistory() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPlayerBaseInfo.PvpHistory)
  return _internal_mutable_pvphistory();
}

// uint32 HeadPicFrame = 11;
inline void CSDTPlayerBaseInfo::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t CSDTPlayerBaseInfo::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.HeadPicFrame)
  return _internal_headpicframe();
}
inline void CSDTPlayerBaseInfo::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void CSDTPlayerBaseInfo::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.HeadPicFrame)
}

// uint32 HeadPicPendant = 12;
inline void CSDTPlayerBaseInfo::clear_headpicpendant() {
  _impl_.headpicpendant_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_headpicpendant() const {
  return _impl_.headpicpendant_;
}
inline uint32_t CSDTPlayerBaseInfo::headpicpendant() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.HeadPicPendant)
  return _internal_headpicpendant();
}
inline void CSDTPlayerBaseInfo::_internal_set_headpicpendant(uint32_t value) {
  
  _impl_.headpicpendant_ = value;
}
inline void CSDTPlayerBaseInfo::set_headpicpendant(uint32_t value) {
  _internal_set_headpicpendant(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.HeadPicPendant)
}

// uint32 Scene = 13;
inline void CSDTPlayerBaseInfo::clear_scene() {
  _impl_.scene_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_scene() const {
  return _impl_.scene_;
}
inline uint32_t CSDTPlayerBaseInfo::scene() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Scene)
  return _internal_scene();
}
inline void CSDTPlayerBaseInfo::_internal_set_scene(uint32_t value) {
  
  _impl_.scene_ = value;
}
inline void CSDTPlayerBaseInfo::set_scene(uint32_t value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Scene)
}

// string ChannelUsrId = 14;
inline void CSDTPlayerBaseInfo::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& CSDTPlayerBaseInfo::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ChannelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerBaseInfo::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ChannelUsrId)
}
inline std::string* CSDTPlayerBaseInfo::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.ChannelUsrId)
  return _s;
}
inline const std::string& CSDTPlayerBaseInfo::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void CSDTPlayerBaseInfo::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.ChannelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void CSDTPlayerBaseInfo::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.ChannelUsrId)
}

// repeated .msg.SWITCHTYPE SwitchPlayerSet = 15;
inline int CSDTPlayerBaseInfo::_internal_switchplayerset_size() const {
  return _impl_.switchplayerset_.size();
}
inline int CSDTPlayerBaseInfo::switchplayerset_size() const {
  return _internal_switchplayerset_size();
}
inline void CSDTPlayerBaseInfo::clear_switchplayerset() {
  _impl_.switchplayerset_.Clear();
}
inline ::msg::SWITCHTYPE CSDTPlayerBaseInfo::_internal_switchplayerset(int index) const {
  return static_cast< ::msg::SWITCHTYPE >(_impl_.switchplayerset_.Get(index));
}
inline ::msg::SWITCHTYPE CSDTPlayerBaseInfo::switchplayerset(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.SwitchPlayerSet)
  return _internal_switchplayerset(index);
}
inline void CSDTPlayerBaseInfo::set_switchplayerset(int index, ::msg::SWITCHTYPE value) {
  _impl_.switchplayerset_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.SwitchPlayerSet)
}
inline void CSDTPlayerBaseInfo::_internal_add_switchplayerset(::msg::SWITCHTYPE value) {
  _impl_.switchplayerset_.Add(value);
}
inline void CSDTPlayerBaseInfo::add_switchplayerset(::msg::SWITCHTYPE value) {
  _internal_add_switchplayerset(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerBaseInfo.SwitchPlayerSet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSDTPlayerBaseInfo::switchplayerset() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerBaseInfo.SwitchPlayerSet)
  return _impl_.switchplayerset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTPlayerBaseInfo::_internal_mutable_switchplayerset() {
  return &_impl_.switchplayerset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTPlayerBaseInfo::mutable_switchplayerset() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerBaseInfo.SwitchPlayerSet)
  return _internal_mutable_switchplayerset();
}

// .msg.CHANNELVIPTYPE ChannelVipType = 16;
inline void CSDTPlayerBaseInfo::clear_channelviptype() {
  _impl_.channelviptype_ = 0;
}
inline ::msg::CHANNELVIPTYPE CSDTPlayerBaseInfo::_internal_channelviptype() const {
  return static_cast< ::msg::CHANNELVIPTYPE >(_impl_.channelviptype_);
}
inline ::msg::CHANNELVIPTYPE CSDTPlayerBaseInfo::channelviptype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ChannelVipType)
  return _internal_channelviptype();
}
inline void CSDTPlayerBaseInfo::_internal_set_channelviptype(::msg::CHANNELVIPTYPE value) {
  
  _impl_.channelviptype_ = value;
}
inline void CSDTPlayerBaseInfo::set_channelviptype(::msg::CHANNELVIPTYPE value) {
  _internal_set_channelviptype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ChannelVipType)
}

// .msg.LAUNCHTYPE LaunchType = 17;
inline void CSDTPlayerBaseInfo::clear_launchtype() {
  _impl_.launchtype_ = 0;
}
inline ::msg::LAUNCHTYPE CSDTPlayerBaseInfo::_internal_launchtype() const {
  return static_cast< ::msg::LAUNCHTYPE >(_impl_.launchtype_);
}
inline ::msg::LAUNCHTYPE CSDTPlayerBaseInfo::launchtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.LaunchType)
  return _internal_launchtype();
}
inline void CSDTPlayerBaseInfo::_internal_set_launchtype(::msg::LAUNCHTYPE value) {
  
  _impl_.launchtype_ = value;
}
inline void CSDTPlayerBaseInfo::set_launchtype(::msg::LAUNCHTYPE value) {
  _internal_set_launchtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.LaunchType)
}

// .msg.PLATFORMTYPE PlatFormType = 18;
inline void CSDTPlayerBaseInfo::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE CSDTPlayerBaseInfo::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE CSDTPlayerBaseInfo::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.PlatFormType)
  return _internal_platformtype();
}
inline void CSDTPlayerBaseInfo::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void CSDTPlayerBaseInfo::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.PlatFormType)
}

// uint32 TMMR = 19;
inline void CSDTPlayerBaseInfo::clear_tmmr() {
  _impl_.tmmr_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_tmmr() const {
  return _impl_.tmmr_;
}
inline uint32_t CSDTPlayerBaseInfo::tmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.TMMR)
  return _internal_tmmr();
}
inline void CSDTPlayerBaseInfo::_internal_set_tmmr(uint32_t value) {
  
  _impl_.tmmr_ = value;
}
inline void CSDTPlayerBaseInfo::set_tmmr(uint32_t value) {
  _internal_set_tmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.TMMR)
}

// uint32 PassportLevel = 20;
inline void CSDTPlayerBaseInfo::clear_passportlevel() {
  _impl_.passportlevel_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_passportlevel() const {
  return _impl_.passportlevel_;
}
inline uint32_t CSDTPlayerBaseInfo::passportlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.PassportLevel)
  return _internal_passportlevel();
}
inline void CSDTPlayerBaseInfo::_internal_set_passportlevel(uint32_t value) {
  
  _impl_.passportlevel_ = value;
}
inline void CSDTPlayerBaseInfo::set_passportlevel(uint32_t value) {
  _internal_set_passportlevel(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.PassportLevel)
}

// uint32 Star = 21;
inline void CSDTPlayerBaseInfo::clear_star() {
  _impl_.star_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_star() const {
  return _impl_.star_;
}
inline uint32_t CSDTPlayerBaseInfo::star() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Star)
  return _internal_star();
}
inline void CSDTPlayerBaseInfo::_internal_set_star(uint32_t value) {
  
  _impl_.star_ = value;
}
inline void CSDTPlayerBaseInfo::set_star(uint32_t value) {
  _internal_set_star(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Star)
}

// string Country = 22;
inline void CSDTPlayerBaseInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSDTPlayerBaseInfo::country() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerBaseInfo::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Country)
}
inline std::string* CSDTPlayerBaseInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.Country)
  return _s;
}
inline const std::string& CSDTPlayerBaseInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSDTPlayerBaseInfo::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.Country)
  return _impl_.country_.Release();
}
inline void CSDTPlayerBaseInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.Country)
}

// int64 LastLoginTime = 23;
inline void CSDTPlayerBaseInfo::clear_lastlogintime() {
  _impl_.lastlogintime_ = int64_t{0};
}
inline int64_t CSDTPlayerBaseInfo::_internal_lastlogintime() const {
  return _impl_.lastlogintime_;
}
inline int64_t CSDTPlayerBaseInfo::lastlogintime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.LastLoginTime)
  return _internal_lastlogintime();
}
inline void CSDTPlayerBaseInfo::_internal_set_lastlogintime(int64_t value) {
  
  _impl_.lastlogintime_ = value;
}
inline void CSDTPlayerBaseInfo::set_lastlogintime(int64_t value) {
  _internal_set_lastlogintime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.LastLoginTime)
}

// string NativeCountry = 24;
inline void CSDTPlayerBaseInfo::clear_nativecountry() {
  _impl_.nativecountry_.ClearToEmpty();
}
inline const std::string& CSDTPlayerBaseInfo::nativecountry() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.NativeCountry)
  return _internal_nativecountry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerBaseInfo::set_nativecountry(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nativecountry_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.NativeCountry)
}
inline std::string* CSDTPlayerBaseInfo::mutable_nativecountry() {
  std::string* _s = _internal_mutable_nativecountry();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.NativeCountry)
  return _s;
}
inline const std::string& CSDTPlayerBaseInfo::_internal_nativecountry() const {
  return _impl_.nativecountry_.Get();
}
inline void CSDTPlayerBaseInfo::_internal_set_nativecountry(const std::string& value) {
  
  _impl_.nativecountry_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::_internal_mutable_nativecountry() {
  
  return _impl_.nativecountry_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::release_nativecountry() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.NativeCountry)
  return _impl_.nativecountry_.Release();
}
inline void CSDTPlayerBaseInfo::set_allocated_nativecountry(std::string* nativecountry) {
  if (nativecountry != nullptr) {
    
  } else {
    
  }
  _impl_.nativecountry_.SetAllocated(nativecountry, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nativecountry_.IsDefault()) {
    _impl_.nativecountry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.NativeCountry)
}

// .msg.CHANELTYPE ChannelType = 25;
inline void CSDTPlayerBaseInfo::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE CSDTPlayerBaseInfo::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE CSDTPlayerBaseInfo::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ChannelType)
  return _internal_channeltype();
}
inline void CSDTPlayerBaseInfo::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void CSDTPlayerBaseInfo::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ChannelType)
}

// int64 ResetHeadPicTime = 26;
inline void CSDTPlayerBaseInfo::clear_resetheadpictime() {
  _impl_.resetheadpictime_ = int64_t{0};
}
inline int64_t CSDTPlayerBaseInfo::_internal_resetheadpictime() const {
  return _impl_.resetheadpictime_;
}
inline int64_t CSDTPlayerBaseInfo::resetheadpictime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ResetHeadPicTime)
  return _internal_resetheadpictime();
}
inline void CSDTPlayerBaseInfo::_internal_set_resetheadpictime(int64_t value) {
  
  _impl_.resetheadpictime_ = value;
}
inline void CSDTPlayerBaseInfo::set_resetheadpictime(int64_t value) {
  _internal_set_resetheadpictime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ResetHeadPicTime)
}

// repeated .msg.CSDTPunishment Punishment = 27;
inline int CSDTPlayerBaseInfo::_internal_punishment_size() const {
  return _impl_.punishment_.size();
}
inline int CSDTPlayerBaseInfo::punishment_size() const {
  return _internal_punishment_size();
}
inline void CSDTPlayerBaseInfo::clear_punishment() {
  _impl_.punishment_.Clear();
}
inline ::msg::CSDTPunishment* CSDTPlayerBaseInfo::mutable_punishment(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.Punishment)
  return _impl_.punishment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPunishment >*
CSDTPlayerBaseInfo::mutable_punishment() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerBaseInfo.Punishment)
  return &_impl_.punishment_;
}
inline const ::msg::CSDTPunishment& CSDTPlayerBaseInfo::_internal_punishment(int index) const {
  return _impl_.punishment_.Get(index);
}
inline const ::msg::CSDTPunishment& CSDTPlayerBaseInfo::punishment(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Punishment)
  return _internal_punishment(index);
}
inline ::msg::CSDTPunishment* CSDTPlayerBaseInfo::_internal_add_punishment() {
  return _impl_.punishment_.Add();
}
inline ::msg::CSDTPunishment* CSDTPlayerBaseInfo::add_punishment() {
  ::msg::CSDTPunishment* _add = _internal_add_punishment();
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerBaseInfo.Punishment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPunishment >&
CSDTPlayerBaseInfo::punishment() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerBaseInfo.Punishment)
  return _impl_.punishment_;
}

// uint32 Period = 28;
inline void CSDTPlayerBaseInfo::clear_period() {
  _impl_.period_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_period() const {
  return _impl_.period_;
}
inline uint32_t CSDTPlayerBaseInfo::period() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Period)
  return _internal_period();
}
inline void CSDTPlayerBaseInfo::_internal_set_period(uint32_t value) {
  
  _impl_.period_ = value;
}
inline void CSDTPlayerBaseInfo::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Period)
}

// uint32 Province = 29;
inline void CSDTPlayerBaseInfo::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t CSDTPlayerBaseInfo::province() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Province)
  return _internal_province();
}
inline void CSDTPlayerBaseInfo::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void CSDTPlayerBaseInfo::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Province)
}

// uint32 MvpCount = 30;
inline void CSDTPlayerBaseInfo::clear_mvpcount() {
  _impl_.mvpcount_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_mvpcount() const {
  return _impl_.mvpcount_;
}
inline uint32_t CSDTPlayerBaseInfo::mvpcount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.MvpCount)
  return _internal_mvpcount();
}
inline void CSDTPlayerBaseInfo::_internal_set_mvpcount(uint32_t value) {
  
  _impl_.mvpcount_ = value;
}
inline void CSDTPlayerBaseInfo::set_mvpcount(uint32_t value) {
  _internal_set_mvpcount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.MvpCount)
}

// repeated uint32 PassportTypeIds = 31;
inline int CSDTPlayerBaseInfo::_internal_passporttypeids_size() const {
  return _impl_.passporttypeids_.size();
}
inline int CSDTPlayerBaseInfo::passporttypeids_size() const {
  return _internal_passporttypeids_size();
}
inline void CSDTPlayerBaseInfo::clear_passporttypeids() {
  _impl_.passporttypeids_.Clear();
}
inline uint32_t CSDTPlayerBaseInfo::_internal_passporttypeids(int index) const {
  return _impl_.passporttypeids_.Get(index);
}
inline uint32_t CSDTPlayerBaseInfo::passporttypeids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.PassportTypeIds)
  return _internal_passporttypeids(index);
}
inline void CSDTPlayerBaseInfo::set_passporttypeids(int index, uint32_t value) {
  _impl_.passporttypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.PassportTypeIds)
}
inline void CSDTPlayerBaseInfo::_internal_add_passporttypeids(uint32_t value) {
  _impl_.passporttypeids_.Add(value);
}
inline void CSDTPlayerBaseInfo::add_passporttypeids(uint32_t value) {
  _internal_add_passporttypeids(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerBaseInfo.PassportTypeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPlayerBaseInfo::_internal_passporttypeids() const {
  return _impl_.passporttypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPlayerBaseInfo::passporttypeids() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerBaseInfo.PassportTypeIds)
  return _internal_passporttypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPlayerBaseInfo::_internal_mutable_passporttypeids() {
  return &_impl_.passporttypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPlayerBaseInfo::mutable_passporttypeids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerBaseInfo.PassportTypeIds)
  return _internal_mutable_passporttypeids();
}

// map<uint32, uint32> MvpInfos = 32;
inline int CSDTPlayerBaseInfo::_internal_mvpinfos_size() const {
  return _impl_.mvpinfos_.size();
}
inline int CSDTPlayerBaseInfo::mvpinfos_size() const {
  return _internal_mvpinfos_size();
}
inline void CSDTPlayerBaseInfo::clear_mvpinfos() {
  _impl_.mvpinfos_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPlayerBaseInfo::_internal_mvpinfos() const {
  return _impl_.mvpinfos_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPlayerBaseInfo::mvpinfos() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPlayerBaseInfo.MvpInfos)
  return _internal_mvpinfos();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPlayerBaseInfo::_internal_mutable_mvpinfos() {
  return _impl_.mvpinfos_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPlayerBaseInfo::mutable_mvpinfos() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPlayerBaseInfo.MvpInfos)
  return _internal_mutable_mvpinfos();
}

// uint64 ObservePvpId = 33;
inline void CSDTPlayerBaseInfo::clear_observepvpid() {
  _impl_.observepvpid_ = uint64_t{0u};
}
inline uint64_t CSDTPlayerBaseInfo::_internal_observepvpid() const {
  return _impl_.observepvpid_;
}
inline uint64_t CSDTPlayerBaseInfo::observepvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ObservePvpId)
  return _internal_observepvpid();
}
inline void CSDTPlayerBaseInfo::_internal_set_observepvpid(uint64_t value) {
  
  _impl_.observepvpid_ = value;
}
inline void CSDTPlayerBaseInfo::set_observepvpid(uint64_t value) {
  _internal_set_observepvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ObservePvpId)
}

// bool Ps4Only = 34;
inline void CSDTPlayerBaseInfo::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool CSDTPlayerBaseInfo::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool CSDTPlayerBaseInfo::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.Ps4Only)
  return _internal_ps4only();
}
inline void CSDTPlayerBaseInfo::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void CSDTPlayerBaseInfo::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.Ps4Only)
}

// .msg.UserRestrictType RestrictType = 35;
inline void CSDTPlayerBaseInfo::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType CSDTPlayerBaseInfo::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType CSDTPlayerBaseInfo::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.RestrictType)
  return _internal_restricttype();
}
inline void CSDTPlayerBaseInfo::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void CSDTPlayerBaseInfo::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.RestrictType)
}

// .msg.PlayerGuildInfo GuildInfo = 36;
inline bool CSDTPlayerBaseInfo::_internal_has_guildinfo() const {
  return this != internal_default_instance() && _impl_.guildinfo_ != nullptr;
}
inline bool CSDTPlayerBaseInfo::has_guildinfo() const {
  return _internal_has_guildinfo();
}
inline void CSDTPlayerBaseInfo::clear_guildinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
}
inline const ::msg::PlayerGuildInfo& CSDTPlayerBaseInfo::_internal_guildinfo() const {
  const ::msg::PlayerGuildInfo* p = _impl_.guildinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PlayerGuildInfo&>(
      ::msg::_PlayerGuildInfo_default_instance_);
}
inline const ::msg::PlayerGuildInfo& CSDTPlayerBaseInfo::guildinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.GuildInfo)
  return _internal_guildinfo();
}
inline void CSDTPlayerBaseInfo::unsafe_arena_set_allocated_guildinfo(
    ::msg::PlayerGuildInfo* guildinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  _impl_.guildinfo_ = guildinfo;
  if (guildinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerBaseInfo.GuildInfo)
}
inline ::msg::PlayerGuildInfo* CSDTPlayerBaseInfo::release_guildinfo() {
  
  ::msg::PlayerGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PlayerGuildInfo* CSDTPlayerBaseInfo::unsafe_arena_release_guildinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.GuildInfo)
  
  ::msg::PlayerGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
  return temp;
}
inline ::msg::PlayerGuildInfo* CSDTPlayerBaseInfo::_internal_mutable_guildinfo() {
  
  if (_impl_.guildinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PlayerGuildInfo>(GetArenaForAllocation());
    _impl_.guildinfo_ = p;
  }
  return _impl_.guildinfo_;
}
inline ::msg::PlayerGuildInfo* CSDTPlayerBaseInfo::mutable_guildinfo() {
  ::msg::PlayerGuildInfo* _msg = _internal_mutable_guildinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.GuildInfo)
  return _msg;
}
inline void CSDTPlayerBaseInfo::set_allocated_guildinfo(::msg::PlayerGuildInfo* guildinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.guildinfo_;
  }
  if (guildinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(guildinfo);
    if (message_arena != submessage_arena) {
      guildinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinfo_ = guildinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.GuildInfo)
}

// .msg.CSDTItem medal = 37;
inline bool CSDTPlayerBaseInfo::_internal_has_medal() const {
  return this != internal_default_instance() && _impl_.medal_ != nullptr;
}
inline bool CSDTPlayerBaseInfo::has_medal() const {
  return _internal_has_medal();
}
inline void CSDTPlayerBaseInfo::clear_medal() {
  if (GetArenaForAllocation() == nullptr && _impl_.medal_ != nullptr) {
    delete _impl_.medal_;
  }
  _impl_.medal_ = nullptr;
}
inline const ::msg::CSDTItem& CSDTPlayerBaseInfo::_internal_medal() const {
  const ::msg::CSDTItem* p = _impl_.medal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTItem&>(
      ::msg::_CSDTItem_default_instance_);
}
inline const ::msg::CSDTItem& CSDTPlayerBaseInfo::medal() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.medal)
  return _internal_medal();
}
inline void CSDTPlayerBaseInfo::unsafe_arena_set_allocated_medal(
    ::msg::CSDTItem* medal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medal_);
  }
  _impl_.medal_ = medal;
  if (medal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerBaseInfo.medal)
}
inline ::msg::CSDTItem* CSDTPlayerBaseInfo::release_medal() {
  
  ::msg::CSDTItem* temp = _impl_.medal_;
  _impl_.medal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTItem* CSDTPlayerBaseInfo::unsafe_arena_release_medal() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.medal)
  
  ::msg::CSDTItem* temp = _impl_.medal_;
  _impl_.medal_ = nullptr;
  return temp;
}
inline ::msg::CSDTItem* CSDTPlayerBaseInfo::_internal_mutable_medal() {
  
  if (_impl_.medal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTItem>(GetArenaForAllocation());
    _impl_.medal_ = p;
  }
  return _impl_.medal_;
}
inline ::msg::CSDTItem* CSDTPlayerBaseInfo::mutable_medal() {
  ::msg::CSDTItem* _msg = _internal_mutable_medal();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.medal)
  return _msg;
}
inline void CSDTPlayerBaseInfo::set_allocated_medal(::msg::CSDTItem* medal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.medal_;
  }
  if (medal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(medal);
    if (message_arena != submessage_arena) {
      medal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.medal_ = medal;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.medal)
}

// string OriRegion = 38;
inline void CSDTPlayerBaseInfo::clear_oriregion() {
  _impl_.oriregion_.ClearToEmpty();
}
inline const std::string& CSDTPlayerBaseInfo::oriregion() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.OriRegion)
  return _internal_oriregion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerBaseInfo::set_oriregion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.oriregion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.OriRegion)
}
inline std::string* CSDTPlayerBaseInfo::mutable_oriregion() {
  std::string* _s = _internal_mutable_oriregion();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.OriRegion)
  return _s;
}
inline const std::string& CSDTPlayerBaseInfo::_internal_oriregion() const {
  return _impl_.oriregion_.Get();
}
inline void CSDTPlayerBaseInfo::_internal_set_oriregion(const std::string& value) {
  
  _impl_.oriregion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::_internal_mutable_oriregion() {
  
  return _impl_.oriregion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerBaseInfo::release_oriregion() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.OriRegion)
  return _impl_.oriregion_.Release();
}
inline void CSDTPlayerBaseInfo::set_allocated_oriregion(std::string* oriregion) {
  if (oriregion != nullptr) {
    
  } else {
    
  }
  _impl_.oriregion_.SetAllocated(oriregion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.oriregion_.IsDefault()) {
    _impl_.oriregion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.OriRegion)
}

// uint32 FFMMR = 39;
inline void CSDTPlayerBaseInfo::clear_ffmmr() {
  _impl_.ffmmr_ = 0u;
}
inline uint32_t CSDTPlayerBaseInfo::_internal_ffmmr() const {
  return _impl_.ffmmr_;
}
inline uint32_t CSDTPlayerBaseInfo::ffmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.FFMMR)
  return _internal_ffmmr();
}
inline void CSDTPlayerBaseInfo::_internal_set_ffmmr(uint32_t value) {
  
  _impl_.ffmmr_ = value;
}
inline void CSDTPlayerBaseInfo::set_ffmmr(uint32_t value) {
  _internal_set_ffmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.FFMMR)
}

// map<string, .msg.CSDTPassportCard> AdvancePassport = 43;
inline int CSDTPlayerBaseInfo::_internal_advancepassport_size() const {
  return _impl_.advancepassport_.size();
}
inline int CSDTPlayerBaseInfo::advancepassport_size() const {
  return _internal_advancepassport_size();
}
inline void CSDTPlayerBaseInfo::clear_advancepassport() {
  _impl_.advancepassport_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >&
CSDTPlayerBaseInfo::_internal_advancepassport() const {
  return _impl_.advancepassport_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >&
CSDTPlayerBaseInfo::advancepassport() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPlayerBaseInfo.AdvancePassport)
  return _internal_advancepassport();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >*
CSDTPlayerBaseInfo::_internal_mutable_advancepassport() {
  return _impl_.advancepassport_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >*
CSDTPlayerBaseInfo::mutable_advancepassport() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPlayerBaseInfo.AdvancePassport)
  return _internal_mutable_advancepassport();
}

// map<string, uint32> PassportCardNum = 44;
inline int CSDTPlayerBaseInfo::_internal_passportcardnum_size() const {
  return _impl_.passportcardnum_.size();
}
inline int CSDTPlayerBaseInfo::passportcardnum_size() const {
  return _internal_passportcardnum_size();
}
inline void CSDTPlayerBaseInfo::clear_passportcardnum() {
  _impl_.passportcardnum_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
CSDTPlayerBaseInfo::_internal_passportcardnum() const {
  return _impl_.passportcardnum_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
CSDTPlayerBaseInfo::passportcardnum() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPlayerBaseInfo.PassportCardNum)
  return _internal_passportcardnum();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
CSDTPlayerBaseInfo::_internal_mutable_passportcardnum() {
  return _impl_.passportcardnum_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
CSDTPlayerBaseInfo::mutable_passportcardnum() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPlayerBaseInfo.PassportCardNum)
  return _internal_mutable_passportcardnum();
}

// .msg.CSDTPlayerPvpData PvpData = 45;
inline bool CSDTPlayerBaseInfo::_internal_has_pvpdata() const {
  return this != internal_default_instance() && _impl_.pvpdata_ != nullptr;
}
inline bool CSDTPlayerBaseInfo::has_pvpdata() const {
  return _internal_has_pvpdata();
}
inline void CSDTPlayerBaseInfo::clear_pvpdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpdata_ != nullptr) {
    delete _impl_.pvpdata_;
  }
  _impl_.pvpdata_ = nullptr;
}
inline const ::msg::CSDTPlayerPvpData& CSDTPlayerBaseInfo::_internal_pvpdata() const {
  const ::msg::CSDTPlayerPvpData* p = _impl_.pvpdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPlayerPvpData&>(
      ::msg::_CSDTPlayerPvpData_default_instance_);
}
inline const ::msg::CSDTPlayerPvpData& CSDTPlayerBaseInfo::pvpdata() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.PvpData)
  return _internal_pvpdata();
}
inline void CSDTPlayerBaseInfo::unsafe_arena_set_allocated_pvpdata(
    ::msg::CSDTPlayerPvpData* pvpdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpdata_);
  }
  _impl_.pvpdata_ = pvpdata;
  if (pvpdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerBaseInfo.PvpData)
}
inline ::msg::CSDTPlayerPvpData* CSDTPlayerBaseInfo::release_pvpdata() {
  
  ::msg::CSDTPlayerPvpData* temp = _impl_.pvpdata_;
  _impl_.pvpdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPlayerPvpData* CSDTPlayerBaseInfo::unsafe_arena_release_pvpdata() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.PvpData)
  
  ::msg::CSDTPlayerPvpData* temp = _impl_.pvpdata_;
  _impl_.pvpdata_ = nullptr;
  return temp;
}
inline ::msg::CSDTPlayerPvpData* CSDTPlayerBaseInfo::_internal_mutable_pvpdata() {
  
  if (_impl_.pvpdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPlayerPvpData>(GetArenaForAllocation());
    _impl_.pvpdata_ = p;
  }
  return _impl_.pvpdata_;
}
inline ::msg::CSDTPlayerPvpData* CSDTPlayerBaseInfo::mutable_pvpdata() {
  ::msg::CSDTPlayerPvpData* _msg = _internal_mutable_pvpdata();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.PvpData)
  return _msg;
}
inline void CSDTPlayerBaseInfo::set_allocated_pvpdata(::msg::CSDTPlayerPvpData* pvpdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pvpdata_;
  }
  if (pvpdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pvpdata);
    if (message_arena != submessage_arena) {
      pvpdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpdata_ = pvpdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.PvpData)
}

// .msg.PlayerMentorShipInfo MentorShipInfo = 46;
inline bool CSDTPlayerBaseInfo::_internal_has_mentorshipinfo() const {
  return this != internal_default_instance() && _impl_.mentorshipinfo_ != nullptr;
}
inline bool CSDTPlayerBaseInfo::has_mentorshipinfo() const {
  return _internal_has_mentorshipinfo();
}
inline void CSDTPlayerBaseInfo::clear_mentorshipinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorshipinfo_ != nullptr) {
    delete _impl_.mentorshipinfo_;
  }
  _impl_.mentorshipinfo_ = nullptr;
}
inline const ::msg::PlayerMentorShipInfo& CSDTPlayerBaseInfo::_internal_mentorshipinfo() const {
  const ::msg::PlayerMentorShipInfo* p = _impl_.mentorshipinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PlayerMentorShipInfo&>(
      ::msg::_PlayerMentorShipInfo_default_instance_);
}
inline const ::msg::PlayerMentorShipInfo& CSDTPlayerBaseInfo::mentorshipinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.MentorShipInfo)
  return _internal_mentorshipinfo();
}
inline void CSDTPlayerBaseInfo::unsafe_arena_set_allocated_mentorshipinfo(
    ::msg::PlayerMentorShipInfo* mentorshipinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorshipinfo_);
  }
  _impl_.mentorshipinfo_ = mentorshipinfo;
  if (mentorshipinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerBaseInfo.MentorShipInfo)
}
inline ::msg::PlayerMentorShipInfo* CSDTPlayerBaseInfo::release_mentorshipinfo() {
  
  ::msg::PlayerMentorShipInfo* temp = _impl_.mentorshipinfo_;
  _impl_.mentorshipinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PlayerMentorShipInfo* CSDTPlayerBaseInfo::unsafe_arena_release_mentorshipinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.MentorShipInfo)
  
  ::msg::PlayerMentorShipInfo* temp = _impl_.mentorshipinfo_;
  _impl_.mentorshipinfo_ = nullptr;
  return temp;
}
inline ::msg::PlayerMentorShipInfo* CSDTPlayerBaseInfo::_internal_mutable_mentorshipinfo() {
  
  if (_impl_.mentorshipinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PlayerMentorShipInfo>(GetArenaForAllocation());
    _impl_.mentorshipinfo_ = p;
  }
  return _impl_.mentorshipinfo_;
}
inline ::msg::PlayerMentorShipInfo* CSDTPlayerBaseInfo::mutable_mentorshipinfo() {
  ::msg::PlayerMentorShipInfo* _msg = _internal_mutable_mentorshipinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.MentorShipInfo)
  return _msg;
}
inline void CSDTPlayerBaseInfo::set_allocated_mentorshipinfo(::msg::PlayerMentorShipInfo* mentorshipinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mentorshipinfo_;
  }
  if (mentorshipinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mentorshipinfo);
    if (message_arena != submessage_arena) {
      mentorshipinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorshipinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorshipinfo_ = mentorshipinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.MentorShipInfo)
}

// int64 TotalDuration = 47;
inline void CSDTPlayerBaseInfo::clear_totalduration() {
  _impl_.totalduration_ = int64_t{0};
}
inline int64_t CSDTPlayerBaseInfo::_internal_totalduration() const {
  return _impl_.totalduration_;
}
inline int64_t CSDTPlayerBaseInfo::totalduration() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.TotalDuration)
  return _internal_totalduration();
}
inline void CSDTPlayerBaseInfo::_internal_set_totalduration(int64_t value) {
  
  _impl_.totalduration_ = value;
}
inline void CSDTPlayerBaseInfo::set_totalduration(int64_t value) {
  _internal_set_totalduration(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.TotalDuration)
}

// .msg.CSDTMentorInfo MentorInfo = 48;
inline bool CSDTPlayerBaseInfo::_internal_has_mentorinfo() const {
  return this != internal_default_instance() && _impl_.mentorinfo_ != nullptr;
}
inline bool CSDTPlayerBaseInfo::has_mentorinfo() const {
  return _internal_has_mentorinfo();
}
inline void CSDTPlayerBaseInfo::clear_mentorinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinfo_ != nullptr) {
    delete _impl_.mentorinfo_;
  }
  _impl_.mentorinfo_ = nullptr;
}
inline const ::msg::CSDTMentorInfo& CSDTPlayerBaseInfo::_internal_mentorinfo() const {
  const ::msg::CSDTMentorInfo* p = _impl_.mentorinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTMentorInfo&>(
      ::msg::_CSDTMentorInfo_default_instance_);
}
inline const ::msg::CSDTMentorInfo& CSDTPlayerBaseInfo::mentorinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.MentorInfo)
  return _internal_mentorinfo();
}
inline void CSDTPlayerBaseInfo::unsafe_arena_set_allocated_mentorinfo(
    ::msg::CSDTMentorInfo* mentorinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinfo_);
  }
  _impl_.mentorinfo_ = mentorinfo;
  if (mentorinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerBaseInfo.MentorInfo)
}
inline ::msg::CSDTMentorInfo* CSDTPlayerBaseInfo::release_mentorinfo() {
  
  ::msg::CSDTMentorInfo* temp = _impl_.mentorinfo_;
  _impl_.mentorinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTMentorInfo* CSDTPlayerBaseInfo::unsafe_arena_release_mentorinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.MentorInfo)
  
  ::msg::CSDTMentorInfo* temp = _impl_.mentorinfo_;
  _impl_.mentorinfo_ = nullptr;
  return temp;
}
inline ::msg::CSDTMentorInfo* CSDTPlayerBaseInfo::_internal_mutable_mentorinfo() {
  
  if (_impl_.mentorinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTMentorInfo>(GetArenaForAllocation());
    _impl_.mentorinfo_ = p;
  }
  return _impl_.mentorinfo_;
}
inline ::msg::CSDTMentorInfo* CSDTPlayerBaseInfo::mutable_mentorinfo() {
  ::msg::CSDTMentorInfo* _msg = _internal_mutable_mentorinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.MentorInfo)
  return _msg;
}
inline void CSDTPlayerBaseInfo::set_allocated_mentorinfo(::msg::CSDTMentorInfo* mentorinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mentorinfo_;
  }
  if (mentorinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mentorinfo);
    if (message_arena != submessage_arena) {
      mentorinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorinfo_ = mentorinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.MentorInfo)
}

// .msg.EXCHANGESTATE ExchangeState = 49;
inline void CSDTPlayerBaseInfo::clear_exchangestate() {
  _impl_.exchangestate_ = 0;
}
inline ::msg::EXCHANGESTATE CSDTPlayerBaseInfo::_internal_exchangestate() const {
  return static_cast< ::msg::EXCHANGESTATE >(_impl_.exchangestate_);
}
inline ::msg::EXCHANGESTATE CSDTPlayerBaseInfo::exchangestate() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ExchangeState)
  return _internal_exchangestate();
}
inline void CSDTPlayerBaseInfo::_internal_set_exchangestate(::msg::EXCHANGESTATE value) {
  
  _impl_.exchangestate_ = value;
}
inline void CSDTPlayerBaseInfo::set_exchangestate(::msg::EXCHANGESTATE value) {
  _internal_set_exchangestate(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerBaseInfo.ExchangeState)
}

// repeated .msg.CSDTPassportHistory PassportHistory = 50;
inline int CSDTPlayerBaseInfo::_internal_passporthistory_size() const {
  return _impl_.passporthistory_.size();
}
inline int CSDTPlayerBaseInfo::passporthistory_size() const {
  return _internal_passporthistory_size();
}
inline void CSDTPlayerBaseInfo::clear_passporthistory() {
  _impl_.passporthistory_.Clear();
}
inline ::msg::CSDTPassportHistory* CSDTPlayerBaseInfo::mutable_passporthistory(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.PassportHistory)
  return _impl_.passporthistory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPassportHistory >*
CSDTPlayerBaseInfo::mutable_passporthistory() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerBaseInfo.PassportHistory)
  return &_impl_.passporthistory_;
}
inline const ::msg::CSDTPassportHistory& CSDTPlayerBaseInfo::_internal_passporthistory(int index) const {
  return _impl_.passporthistory_.Get(index);
}
inline const ::msg::CSDTPassportHistory& CSDTPlayerBaseInfo::passporthistory(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.PassportHistory)
  return _internal_passporthistory(index);
}
inline ::msg::CSDTPassportHistory* CSDTPlayerBaseInfo::_internal_add_passporthistory() {
  return _impl_.passporthistory_.Add();
}
inline ::msg::CSDTPassportHistory* CSDTPlayerBaseInfo::add_passporthistory() {
  ::msg::CSDTPassportHistory* _add = _internal_add_passporthistory();
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerBaseInfo.PassportHistory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPassportHistory >&
CSDTPlayerBaseInfo::passporthistory() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerBaseInfo.PassportHistory)
  return _impl_.passporthistory_;
}

// .msg.ExchangeRecord ExchangeRecord = 51;
inline bool CSDTPlayerBaseInfo::_internal_has_exchangerecord() const {
  return this != internal_default_instance() && _impl_.exchangerecord_ != nullptr;
}
inline bool CSDTPlayerBaseInfo::has_exchangerecord() const {
  return _internal_has_exchangerecord();
}
inline void CSDTPlayerBaseInfo::clear_exchangerecord() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchangerecord_ != nullptr) {
    delete _impl_.exchangerecord_;
  }
  _impl_.exchangerecord_ = nullptr;
}
inline const ::msg::ExchangeRecord& CSDTPlayerBaseInfo::_internal_exchangerecord() const {
  const ::msg::ExchangeRecord* p = _impl_.exchangerecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::ExchangeRecord&>(
      ::msg::_ExchangeRecord_default_instance_);
}
inline const ::msg::ExchangeRecord& CSDTPlayerBaseInfo::exchangerecord() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerBaseInfo.ExchangeRecord)
  return _internal_exchangerecord();
}
inline void CSDTPlayerBaseInfo::unsafe_arena_set_allocated_exchangerecord(
    ::msg::ExchangeRecord* exchangerecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangerecord_);
  }
  _impl_.exchangerecord_ = exchangerecord;
  if (exchangerecord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerBaseInfo.ExchangeRecord)
}
inline ::msg::ExchangeRecord* CSDTPlayerBaseInfo::release_exchangerecord() {
  
  ::msg::ExchangeRecord* temp = _impl_.exchangerecord_;
  _impl_.exchangerecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::ExchangeRecord* CSDTPlayerBaseInfo::unsafe_arena_release_exchangerecord() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerBaseInfo.ExchangeRecord)
  
  ::msg::ExchangeRecord* temp = _impl_.exchangerecord_;
  _impl_.exchangerecord_ = nullptr;
  return temp;
}
inline ::msg::ExchangeRecord* CSDTPlayerBaseInfo::_internal_mutable_exchangerecord() {
  
  if (_impl_.exchangerecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ExchangeRecord>(GetArenaForAllocation());
    _impl_.exchangerecord_ = p;
  }
  return _impl_.exchangerecord_;
}
inline ::msg::ExchangeRecord* CSDTPlayerBaseInfo::mutable_exchangerecord() {
  ::msg::ExchangeRecord* _msg = _internal_mutable_exchangerecord();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerBaseInfo.ExchangeRecord)
  return _msg;
}
inline void CSDTPlayerBaseInfo::set_allocated_exchangerecord(::msg::ExchangeRecord* exchangerecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.exchangerecord_;
  }
  if (exchangerecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exchangerecord);
    if (message_arena != submessage_arena) {
      exchangerecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchangerecord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchangerecord_ = exchangerecord;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerBaseInfo.ExchangeRecord)
}

// -------------------------------------------------------------------

// PlayerGuildInfo

// string ID = 1;
inline void PlayerGuildInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PlayerGuildInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.PlayerGuildInfo.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerGuildInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerGuildInfo.ID)
}
inline std::string* PlayerGuildInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.PlayerGuildInfo.ID)
  return _s;
}
inline const std::string& PlayerGuildInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PlayerGuildInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerGuildInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerGuildInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.PlayerGuildInfo.ID)
  return _impl_.id_.Release();
}
inline void PlayerGuildInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerGuildInfo.ID)
}

// string Name = 2;
inline void PlayerGuildInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PlayerGuildInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.PlayerGuildInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerGuildInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerGuildInfo.Name)
}
inline std::string* PlayerGuildInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.PlayerGuildInfo.Name)
  return _s;
}
inline const std::string& PlayerGuildInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PlayerGuildInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerGuildInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerGuildInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.PlayerGuildInfo.Name)
  return _impl_.name_.Release();
}
inline void PlayerGuildInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerGuildInfo.Name)
}

// int32 Sign = 3;
inline void PlayerGuildInfo::clear_sign() {
  _impl_.sign_ = 0;
}
inline int32_t PlayerGuildInfo::_internal_sign() const {
  return _impl_.sign_;
}
inline int32_t PlayerGuildInfo::sign() const {
  // @@protoc_insertion_point(field_get:msg.PlayerGuildInfo.Sign)
  return _internal_sign();
}
inline void PlayerGuildInfo::_internal_set_sign(int32_t value) {
  
  _impl_.sign_ = value;
}
inline void PlayerGuildInfo::set_sign(int32_t value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:msg.PlayerGuildInfo.Sign)
}

// .msg.GUILDROLETYPE Role = 4;
inline void PlayerGuildInfo::clear_role() {
  _impl_.role_ = 0;
}
inline ::msg::GUILDROLETYPE PlayerGuildInfo::_internal_role() const {
  return static_cast< ::msg::GUILDROLETYPE >(_impl_.role_);
}
inline ::msg::GUILDROLETYPE PlayerGuildInfo::role() const {
  // @@protoc_insertion_point(field_get:msg.PlayerGuildInfo.Role)
  return _internal_role();
}
inline void PlayerGuildInfo::_internal_set_role(::msg::GUILDROLETYPE value) {
  
  _impl_.role_ = value;
}
inline void PlayerGuildInfo::set_role(::msg::GUILDROLETYPE value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:msg.PlayerGuildInfo.Role)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTPlayerSimpleInfo

// string Id = 1;
inline void CSDTPlayerSimpleInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTPlayerSimpleInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerSimpleInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.Id)
}
inline std::string* CSDTPlayerSimpleInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerSimpleInfo.Id)
  return _s;
}
inline const std::string& CSDTPlayerSimpleInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTPlayerSimpleInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerSimpleInfo.Id)
  return _impl_.id_.Release();
}
inline void CSDTPlayerSimpleInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerSimpleInfo.Id)
}

// string UsrName = 2;
inline void CSDTPlayerSimpleInfo::clear_usrname() {
  _impl_.usrname_.ClearToEmpty();
}
inline const std::string& CSDTPlayerSimpleInfo::usrname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.UsrName)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerSimpleInfo::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usrname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.UsrName)
}
inline std::string* CSDTPlayerSimpleInfo::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerSimpleInfo.UsrName)
  return _s;
}
inline const std::string& CSDTPlayerSimpleInfo::_internal_usrname() const {
  return _impl_.usrname_.Get();
}
inline void CSDTPlayerSimpleInfo::_internal_set_usrname(const std::string& value) {
  
  _impl_.usrname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::_internal_mutable_usrname() {
  
  return _impl_.usrname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::release_usrname() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerSimpleInfo.UsrName)
  return _impl_.usrname_.Release();
}
inline void CSDTPlayerSimpleInfo::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  _impl_.usrname_.SetAllocated(usrname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usrname_.IsDefault()) {
    _impl_.usrname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerSimpleInfo.UsrName)
}

// uint32 HeadPic = 3;
inline void CSDTPlayerSimpleInfo::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSDTPlayerSimpleInfo::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.HeadPic)
  return _internal_headpic();
}
inline void CSDTPlayerSimpleInfo::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSDTPlayerSimpleInfo::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.HeadPic)
}

// uint32 HeadPicFrame = 4;
inline void CSDTPlayerSimpleInfo::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t CSDTPlayerSimpleInfo::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.HeadPicFrame)
  return _internal_headpicframe();
}
inline void CSDTPlayerSimpleInfo::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void CSDTPlayerSimpleInfo::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.HeadPicFrame)
}

// uint32 HeadPicPendant = 5;
inline void CSDTPlayerSimpleInfo::clear_headpicpendant() {
  _impl_.headpicpendant_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_headpicpendant() const {
  return _impl_.headpicpendant_;
}
inline uint32_t CSDTPlayerSimpleInfo::headpicpendant() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.HeadPicPendant)
  return _internal_headpicpendant();
}
inline void CSDTPlayerSimpleInfo::_internal_set_headpicpendant(uint32_t value) {
  
  _impl_.headpicpendant_ = value;
}
inline void CSDTPlayerSimpleInfo::set_headpicpendant(uint32_t value) {
  _internal_set_headpicpendant(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.HeadPicPendant)
}

// uint32 ChatBubble = 6;
inline void CSDTPlayerSimpleInfo::clear_chatbubble() {
  _impl_.chatbubble_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_chatbubble() const {
  return _impl_.chatbubble_;
}
inline uint32_t CSDTPlayerSimpleInfo::chatbubble() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.ChatBubble)
  return _internal_chatbubble();
}
inline void CSDTPlayerSimpleInfo::_internal_set_chatbubble(uint32_t value) {
  
  _impl_.chatbubble_ = value;
}
inline void CSDTPlayerSimpleInfo::set_chatbubble(uint32_t value) {
  _internal_set_chatbubble(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.ChatBubble)
}

// uint32 MMR = 7;
inline void CSDTPlayerSimpleInfo::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CSDTPlayerSimpleInfo::mmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.MMR)
  return _internal_mmr();
}
inline void CSDTPlayerSimpleInfo::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void CSDTPlayerSimpleInfo::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.MMR)
}

// uint32 TMMR = 8;
inline void CSDTPlayerSimpleInfo::clear_tmmr() {
  _impl_.tmmr_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_tmmr() const {
  return _impl_.tmmr_;
}
inline uint32_t CSDTPlayerSimpleInfo::tmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.TMMR)
  return _internal_tmmr();
}
inline void CSDTPlayerSimpleInfo::_internal_set_tmmr(uint32_t value) {
  
  _impl_.tmmr_ = value;
}
inline void CSDTPlayerSimpleInfo::set_tmmr(uint32_t value) {
  _internal_set_tmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.TMMR)
}

// uint32 Cup = 9;
inline void CSDTPlayerSimpleInfo::clear_cup() {
  _impl_.cup_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_cup() const {
  return _impl_.cup_;
}
inline uint32_t CSDTPlayerSimpleInfo::cup() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.Cup)
  return _internal_cup();
}
inline void CSDTPlayerSimpleInfo::_internal_set_cup(uint32_t value) {
  
  _impl_.cup_ = value;
}
inline void CSDTPlayerSimpleInfo::set_cup(uint32_t value) {
  _internal_set_cup(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.Cup)
}

// uint32 Level = 10;
inline void CSDTPlayerSimpleInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CSDTPlayerSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.Level)
  return _internal_level();
}
inline void CSDTPlayerSimpleInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void CSDTPlayerSimpleInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.Level)
}

// string Country = 11;
inline void CSDTPlayerSimpleInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSDTPlayerSimpleInfo::country() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerSimpleInfo::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.Country)
}
inline std::string* CSDTPlayerSimpleInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerSimpleInfo.Country)
  return _s;
}
inline const std::string& CSDTPlayerSimpleInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSDTPlayerSimpleInfo::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerSimpleInfo.Country)
  return _impl_.country_.Release();
}
inline void CSDTPlayerSimpleInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerSimpleInfo.Country)
}

// uint32 Province = 12;
inline void CSDTPlayerSimpleInfo::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t CSDTPlayerSimpleInfo::province() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.Province)
  return _internal_province();
}
inline void CSDTPlayerSimpleInfo::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void CSDTPlayerSimpleInfo::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.Province)
}

// .msg.PLATFORMTYPE PlatFormType = 13;
inline void CSDTPlayerSimpleInfo::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE CSDTPlayerSimpleInfo::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE CSDTPlayerSimpleInfo::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.PlatFormType)
  return _internal_platformtype();
}
inline void CSDTPlayerSimpleInfo::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void CSDTPlayerSimpleInfo::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.PlatFormType)
}

// uint32 Period = 14;
inline void CSDTPlayerSimpleInfo::clear_period() {
  _impl_.period_ = 0u;
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_period() const {
  return _impl_.period_;
}
inline uint32_t CSDTPlayerSimpleInfo::period() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.Period)
  return _internal_period();
}
inline void CSDTPlayerSimpleInfo::_internal_set_period(uint32_t value) {
  
  _impl_.period_ = value;
}
inline void CSDTPlayerSimpleInfo::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.Period)
}

// repeated uint32 PassportTypeIds = 15;
inline int CSDTPlayerSimpleInfo::_internal_passporttypeids_size() const {
  return _impl_.passporttypeids_.size();
}
inline int CSDTPlayerSimpleInfo::passporttypeids_size() const {
  return _internal_passporttypeids_size();
}
inline void CSDTPlayerSimpleInfo::clear_passporttypeids() {
  _impl_.passporttypeids_.Clear();
}
inline uint32_t CSDTPlayerSimpleInfo::_internal_passporttypeids(int index) const {
  return _impl_.passporttypeids_.Get(index);
}
inline uint32_t CSDTPlayerSimpleInfo::passporttypeids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.PassportTypeIds)
  return _internal_passporttypeids(index);
}
inline void CSDTPlayerSimpleInfo::set_passporttypeids(int index, uint32_t value) {
  _impl_.passporttypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.PassportTypeIds)
}
inline void CSDTPlayerSimpleInfo::_internal_add_passporttypeids(uint32_t value) {
  _impl_.passporttypeids_.Add(value);
}
inline void CSDTPlayerSimpleInfo::add_passporttypeids(uint32_t value) {
  _internal_add_passporttypeids(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerSimpleInfo.PassportTypeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPlayerSimpleInfo::_internal_passporttypeids() const {
  return _impl_.passporttypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPlayerSimpleInfo::passporttypeids() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerSimpleInfo.PassportTypeIds)
  return _internal_passporttypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPlayerSimpleInfo::_internal_mutable_passporttypeids() {
  return &_impl_.passporttypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPlayerSimpleInfo::mutable_passporttypeids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerSimpleInfo.PassportTypeIds)
  return _internal_mutable_passporttypeids();
}

// uint64 ObservePvpId = 16;
inline void CSDTPlayerSimpleInfo::clear_observepvpid() {
  _impl_.observepvpid_ = uint64_t{0u};
}
inline uint64_t CSDTPlayerSimpleInfo::_internal_observepvpid() const {
  return _impl_.observepvpid_;
}
inline uint64_t CSDTPlayerSimpleInfo::observepvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.ObservePvpId)
  return _internal_observepvpid();
}
inline void CSDTPlayerSimpleInfo::_internal_set_observepvpid(uint64_t value) {
  
  _impl_.observepvpid_ = value;
}
inline void CSDTPlayerSimpleInfo::set_observepvpid(uint64_t value) {
  _internal_set_observepvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.ObservePvpId)
}

// bool PS4Only = 19;
inline void CSDTPlayerSimpleInfo::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool CSDTPlayerSimpleInfo::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool CSDTPlayerSimpleInfo::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.PS4Only)
  return _internal_ps4only();
}
inline void CSDTPlayerSimpleInfo::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void CSDTPlayerSimpleInfo::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.PS4Only)
}

// .msg.CHANELTYPE ChannelType = 20;
inline void CSDTPlayerSimpleInfo::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE CSDTPlayerSimpleInfo::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE CSDTPlayerSimpleInfo::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.ChannelType)
  return _internal_channeltype();
}
inline void CSDTPlayerSimpleInfo::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void CSDTPlayerSimpleInfo::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.ChannelType)
}

// string ChannelUsrId = 21;
inline void CSDTPlayerSimpleInfo::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& CSDTPlayerSimpleInfo::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.ChannelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerSimpleInfo::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.ChannelUsrId)
}
inline std::string* CSDTPlayerSimpleInfo::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerSimpleInfo.ChannelUsrId)
  return _s;
}
inline const std::string& CSDTPlayerSimpleInfo::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void CSDTPlayerSimpleInfo::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerSimpleInfo::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerSimpleInfo.ChannelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void CSDTPlayerSimpleInfo::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerSimpleInfo.ChannelUsrId)
}

// .msg.PlayerGuildInfo GuildInfo = 22;
inline bool CSDTPlayerSimpleInfo::_internal_has_guildinfo() const {
  return this != internal_default_instance() && _impl_.guildinfo_ != nullptr;
}
inline bool CSDTPlayerSimpleInfo::has_guildinfo() const {
  return _internal_has_guildinfo();
}
inline void CSDTPlayerSimpleInfo::clear_guildinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
}
inline const ::msg::PlayerGuildInfo& CSDTPlayerSimpleInfo::_internal_guildinfo() const {
  const ::msg::PlayerGuildInfo* p = _impl_.guildinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PlayerGuildInfo&>(
      ::msg::_PlayerGuildInfo_default_instance_);
}
inline const ::msg::PlayerGuildInfo& CSDTPlayerSimpleInfo::guildinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.GuildInfo)
  return _internal_guildinfo();
}
inline void CSDTPlayerSimpleInfo::unsafe_arena_set_allocated_guildinfo(
    ::msg::PlayerGuildInfo* guildinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  _impl_.guildinfo_ = guildinfo;
  if (guildinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerSimpleInfo.GuildInfo)
}
inline ::msg::PlayerGuildInfo* CSDTPlayerSimpleInfo::release_guildinfo() {
  
  ::msg::PlayerGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PlayerGuildInfo* CSDTPlayerSimpleInfo::unsafe_arena_release_guildinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerSimpleInfo.GuildInfo)
  
  ::msg::PlayerGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
  return temp;
}
inline ::msg::PlayerGuildInfo* CSDTPlayerSimpleInfo::_internal_mutable_guildinfo() {
  
  if (_impl_.guildinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PlayerGuildInfo>(GetArenaForAllocation());
    _impl_.guildinfo_ = p;
  }
  return _impl_.guildinfo_;
}
inline ::msg::PlayerGuildInfo* CSDTPlayerSimpleInfo::mutable_guildinfo() {
  ::msg::PlayerGuildInfo* _msg = _internal_mutable_guildinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerSimpleInfo.GuildInfo)
  return _msg;
}
inline void CSDTPlayerSimpleInfo::set_allocated_guildinfo(::msg::PlayerGuildInfo* guildinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.guildinfo_;
  }
  if (guildinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(guildinfo);
    if (message_arena != submessage_arena) {
      guildinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinfo_ = guildinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerSimpleInfo.GuildInfo)
}

// .msg.UserRestrictType RestrictType = 23;
inline void CSDTPlayerSimpleInfo::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType CSDTPlayerSimpleInfo::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType CSDTPlayerSimpleInfo::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.RestrictType)
  return _internal_restricttype();
}
inline void CSDTPlayerSimpleInfo::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void CSDTPlayerSimpleInfo::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.RestrictType)
}

// .msg.EXCHANGESTATE ExchangeState = 24;
inline void CSDTPlayerSimpleInfo::clear_exchangestate() {
  _impl_.exchangestate_ = 0;
}
inline ::msg::EXCHANGESTATE CSDTPlayerSimpleInfo::_internal_exchangestate() const {
  return static_cast< ::msg::EXCHANGESTATE >(_impl_.exchangestate_);
}
inline ::msg::EXCHANGESTATE CSDTPlayerSimpleInfo::exchangestate() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerSimpleInfo.ExchangeState)
  return _internal_exchangestate();
}
inline void CSDTPlayerSimpleInfo::_internal_set_exchangestate(::msg::EXCHANGESTATE value) {
  
  _impl_.exchangestate_ = value;
}
inline void CSDTPlayerSimpleInfo::set_exchangestate(::msg::EXCHANGESTATE value) {
  _internal_set_exchangestate(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerSimpleInfo.ExchangeState)
}

// map<int32, .msg.HistoryMaxCupMmr> HisToryMaxStat = 25;
inline int CSDTPlayerSimpleInfo::_internal_historymaxstat_size() const {
  return _impl_.historymaxstat_.size();
}
inline int CSDTPlayerSimpleInfo::historymaxstat_size() const {
  return _internal_historymaxstat_size();
}
inline void CSDTPlayerSimpleInfo::clear_historymaxstat() {
  _impl_.historymaxstat_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >&
CSDTPlayerSimpleInfo::_internal_historymaxstat() const {
  return _impl_.historymaxstat_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >&
CSDTPlayerSimpleInfo::historymaxstat() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPlayerSimpleInfo.HisToryMaxStat)
  return _internal_historymaxstat();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >*
CSDTPlayerSimpleInfo::_internal_mutable_historymaxstat() {
  return _impl_.historymaxstat_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >*
CSDTPlayerSimpleInfo::mutable_historymaxstat() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPlayerSimpleInfo.HisToryMaxStat)
  return _internal_mutable_historymaxstat();
}

// -------------------------------------------------------------------

// CSDTPlayerRankInfo

// string Id = 1;
inline void CSDTPlayerRankInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTPlayerRankInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerRankInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerRankInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerRankInfo.Id)
}
inline std::string* CSDTPlayerRankInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerRankInfo.Id)
  return _s;
}
inline const std::string& CSDTPlayerRankInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTPlayerRankInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerRankInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerRankInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerRankInfo.Id)
  return _impl_.id_.Release();
}
inline void CSDTPlayerRankInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerRankInfo.Id)
}

// string UsrName = 2;
inline void CSDTPlayerRankInfo::clear_usrname() {
  _impl_.usrname_.ClearToEmpty();
}
inline const std::string& CSDTPlayerRankInfo::usrname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerRankInfo.UsrName)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerRankInfo::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usrname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerRankInfo.UsrName)
}
inline std::string* CSDTPlayerRankInfo::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerRankInfo.UsrName)
  return _s;
}
inline const std::string& CSDTPlayerRankInfo::_internal_usrname() const {
  return _impl_.usrname_.Get();
}
inline void CSDTPlayerRankInfo::_internal_set_usrname(const std::string& value) {
  
  _impl_.usrname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerRankInfo::_internal_mutable_usrname() {
  
  return _impl_.usrname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerRankInfo::release_usrname() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerRankInfo.UsrName)
  return _impl_.usrname_.Release();
}
inline void CSDTPlayerRankInfo::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  _impl_.usrname_.SetAllocated(usrname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usrname_.IsDefault()) {
    _impl_.usrname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerRankInfo.UsrName)
}

// uint32 HeadPic = 3;
inline void CSDTPlayerRankInfo::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSDTPlayerRankInfo::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSDTPlayerRankInfo::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerRankInfo.HeadPic)
  return _internal_headpic();
}
inline void CSDTPlayerRankInfo::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSDTPlayerRankInfo::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerRankInfo.HeadPic)
}

// uint32 HeadPicFrame = 4;
inline void CSDTPlayerRankInfo::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t CSDTPlayerRankInfo::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t CSDTPlayerRankInfo::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerRankInfo.HeadPicFrame)
  return _internal_headpicframe();
}
inline void CSDTPlayerRankInfo::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void CSDTPlayerRankInfo::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerRankInfo.HeadPicFrame)
}

// string Country = 5;
inline void CSDTPlayerRankInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSDTPlayerRankInfo::country() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerRankInfo.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerRankInfo::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerRankInfo.Country)
}
inline std::string* CSDTPlayerRankInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerRankInfo.Country)
  return _s;
}
inline const std::string& CSDTPlayerRankInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSDTPlayerRankInfo::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerRankInfo::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerRankInfo::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerRankInfo.Country)
  return _impl_.country_.Release();
}
inline void CSDTPlayerRankInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerRankInfo.Country)
}

// uint32 Cup = 6;
inline void CSDTPlayerRankInfo::clear_cup() {
  _impl_.cup_ = 0u;
}
inline uint32_t CSDTPlayerRankInfo::_internal_cup() const {
  return _impl_.cup_;
}
inline uint32_t CSDTPlayerRankInfo::cup() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerRankInfo.Cup)
  return _internal_cup();
}
inline void CSDTPlayerRankInfo::_internal_set_cup(uint32_t value) {
  
  _impl_.cup_ = value;
}
inline void CSDTPlayerRankInfo::set_cup(uint32_t value) {
  _internal_set_cup(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerRankInfo.Cup)
}

// -------------------------------------------------------------------

// CSDTPlayerTournamentInfo

// string Id = 1;
inline void CSDTPlayerTournamentInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTPlayerTournamentInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerTournamentInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayerTournamentInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerTournamentInfo.Id)
}
inline std::string* CSDTPlayerTournamentInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerTournamentInfo.Id)
  return _s;
}
inline const std::string& CSDTPlayerTournamentInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTPlayerTournamentInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayerTournamentInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayerTournamentInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerTournamentInfo.Id)
  return _impl_.id_.Release();
}
inline void CSDTPlayerTournamentInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerTournamentInfo.Id)
}

// uint32 Score = 2;
inline void CSDTPlayerTournamentInfo::clear_score() {
  _impl_.score_ = 0u;
}
inline uint32_t CSDTPlayerTournamentInfo::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t CSDTPlayerTournamentInfo::score() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerTournamentInfo.Score)
  return _internal_score();
}
inline void CSDTPlayerTournamentInfo::_internal_set_score(uint32_t value) {
  
  _impl_.score_ = value;
}
inline void CSDTPlayerTournamentInfo::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerTournamentInfo.Score)
}

// -------------------------------------------------------------------

// CSDTPvpHistory

// uint64 PvpId = 1;
inline void CSDTPvpHistory::clear_pvpid() {
  _impl_.pvpid_ = uint64_t{0u};
}
inline uint64_t CSDTPvpHistory::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline uint64_t CSDTPvpHistory::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpHistory.PvpId)
  return _internal_pvpid();
}
inline void CSDTPvpHistory::_internal_set_pvpid(uint64_t value) {
  
  _impl_.pvpid_ = value;
}
inline void CSDTPvpHistory::set_pvpid(uint64_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpHistory.PvpId)
}

// int32 ChangeMmr = 2;
inline void CSDTPvpHistory::clear_changemmr() {
  _impl_.changemmr_ = 0;
}
inline int32_t CSDTPvpHistory::_internal_changemmr() const {
  return _impl_.changemmr_;
}
inline int32_t CSDTPvpHistory::changemmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpHistory.ChangeMmr)
  return _internal_changemmr();
}
inline void CSDTPvpHistory::_internal_set_changemmr(int32_t value) {
  
  _impl_.changemmr_ = value;
}
inline void CSDTPvpHistory::set_changemmr(int32_t value) {
  _internal_set_changemmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpHistory.ChangeMmr)
}

// bool DailyFirstWin = 3;
inline void CSDTPvpHistory::clear_dailyfirstwin() {
  _impl_.dailyfirstwin_ = false;
}
inline bool CSDTPvpHistory::_internal_dailyfirstwin() const {
  return _impl_.dailyfirstwin_;
}
inline bool CSDTPvpHistory::dailyfirstwin() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpHistory.DailyFirstWin)
  return _internal_dailyfirstwin();
}
inline void CSDTPvpHistory::_internal_set_dailyfirstwin(bool value) {
  
  _impl_.dailyfirstwin_ = value;
}
inline void CSDTPvpHistory::set_dailyfirstwin(bool value) {
  _internal_set_dailyfirstwin(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpHistory.DailyFirstWin)
}

// repeated .msg.Award DailyFirstWinAward = 4;
inline int CSDTPvpHistory::_internal_dailyfirstwinaward_size() const {
  return _impl_.dailyfirstwinaward_.size();
}
inline int CSDTPvpHistory::dailyfirstwinaward_size() const {
  return _internal_dailyfirstwinaward_size();
}
inline void CSDTPvpHistory::clear_dailyfirstwinaward() {
  _impl_.dailyfirstwinaward_.Clear();
}
inline ::msg::Award* CSDTPvpHistory::mutable_dailyfirstwinaward(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpHistory.DailyFirstWinAward)
  return _impl_.dailyfirstwinaward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
CSDTPvpHistory::mutable_dailyfirstwinaward() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpHistory.DailyFirstWinAward)
  return &_impl_.dailyfirstwinaward_;
}
inline const ::msg::Award& CSDTPvpHistory::_internal_dailyfirstwinaward(int index) const {
  return _impl_.dailyfirstwinaward_.Get(index);
}
inline const ::msg::Award& CSDTPvpHistory::dailyfirstwinaward(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpHistory.DailyFirstWinAward)
  return _internal_dailyfirstwinaward(index);
}
inline ::msg::Award* CSDTPvpHistory::_internal_add_dailyfirstwinaward() {
  return _impl_.dailyfirstwinaward_.Add();
}
inline ::msg::Award* CSDTPvpHistory::add_dailyfirstwinaward() {
  ::msg::Award* _add = _internal_add_dailyfirstwinaward();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpHistory.DailyFirstWinAward)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
CSDTPvpHistory::dailyfirstwinaward() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpHistory.DailyFirstWinAward)
  return _impl_.dailyfirstwinaward_;
}

// -------------------------------------------------------------------

// CSDTPlayerPvpInfo

// repeated .msg.CSDTPvpHistory PvpHistory = 1;
inline int CSDTPlayerPvpInfo::_internal_pvphistory_size() const {
  return _impl_.pvphistory_.size();
}
inline int CSDTPlayerPvpInfo::pvphistory_size() const {
  return _internal_pvphistory_size();
}
inline void CSDTPlayerPvpInfo::clear_pvphistory() {
  _impl_.pvphistory_.Clear();
}
inline ::msg::CSDTPvpHistory* CSDTPlayerPvpInfo::mutable_pvphistory(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerPvpInfo.PvpHistory)
  return _impl_.pvphistory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpHistory >*
CSDTPlayerPvpInfo::mutable_pvphistory() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerPvpInfo.PvpHistory)
  return &_impl_.pvphistory_;
}
inline const ::msg::CSDTPvpHistory& CSDTPlayerPvpInfo::_internal_pvphistory(int index) const {
  return _impl_.pvphistory_.Get(index);
}
inline const ::msg::CSDTPvpHistory& CSDTPlayerPvpInfo::pvphistory(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerPvpInfo.PvpHistory)
  return _internal_pvphistory(index);
}
inline ::msg::CSDTPvpHistory* CSDTPlayerPvpInfo::_internal_add_pvphistory() {
  return _impl_.pvphistory_.Add();
}
inline ::msg::CSDTPvpHistory* CSDTPlayerPvpInfo::add_pvphistory() {
  ::msg::CSDTPvpHistory* _add = _internal_add_pvphistory();
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerPvpInfo.PvpHistory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpHistory >&
CSDTPlayerPvpInfo::pvphistory() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerPvpInfo.PvpHistory)
  return _impl_.pvphistory_;
}

// -------------------------------------------------------------------

// CSDTPlayerDetailInfo

// .msg.CSDTPlayerBaseInfo BaseInfo = 1;
inline bool CSDTPlayerDetailInfo::_internal_has_baseinfo() const {
  return this != internal_default_instance() && _impl_.baseinfo_ != nullptr;
}
inline bool CSDTPlayerDetailInfo::has_baseinfo() const {
  return _internal_has_baseinfo();
}
inline void CSDTPlayerDetailInfo::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
}
inline const ::msg::CSDTPlayerBaseInfo& CSDTPlayerDetailInfo::_internal_baseinfo() const {
  const ::msg::CSDTPlayerBaseInfo* p = _impl_.baseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPlayerBaseInfo&>(
      ::msg::_CSDTPlayerBaseInfo_default_instance_);
}
inline const ::msg::CSDTPlayerBaseInfo& CSDTPlayerDetailInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerDetailInfo.BaseInfo)
  return _internal_baseinfo();
}
inline void CSDTPlayerDetailInfo::unsafe_arena_set_allocated_baseinfo(
    ::msg::CSDTPlayerBaseInfo* baseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseinfo_);
  }
  _impl_.baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerDetailInfo.BaseInfo)
}
inline ::msg::CSDTPlayerBaseInfo* CSDTPlayerDetailInfo::release_baseinfo() {
  
  ::msg::CSDTPlayerBaseInfo* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPlayerBaseInfo* CSDTPlayerDetailInfo::unsafe_arena_release_baseinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerDetailInfo.BaseInfo)
  
  ::msg::CSDTPlayerBaseInfo* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
  return temp;
}
inline ::msg::CSDTPlayerBaseInfo* CSDTPlayerDetailInfo::_internal_mutable_baseinfo() {
  
  if (_impl_.baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPlayerBaseInfo>(GetArenaForAllocation());
    _impl_.baseinfo_ = p;
  }
  return _impl_.baseinfo_;
}
inline ::msg::CSDTPlayerBaseInfo* CSDTPlayerDetailInfo::mutable_baseinfo() {
  ::msg::CSDTPlayerBaseInfo* _msg = _internal_mutable_baseinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerDetailInfo.BaseInfo)
  return _msg;
}
inline void CSDTPlayerDetailInfo::set_allocated_baseinfo(::msg::CSDTPlayerBaseInfo* baseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.baseinfo_;
  }
  if (baseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(baseinfo);
    if (message_arena != submessage_arena) {
      baseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerDetailInfo.BaseInfo)
}

// .msg.CSDTStat Stat = 2;
inline bool CSDTPlayerDetailInfo::_internal_has_stat() const {
  return this != internal_default_instance() && _impl_.stat_ != nullptr;
}
inline bool CSDTPlayerDetailInfo::has_stat() const {
  return _internal_has_stat();
}
inline void CSDTPlayerDetailInfo::clear_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
}
inline const ::msg::CSDTStat& CSDTPlayerDetailInfo::_internal_stat() const {
  const ::msg::CSDTStat* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTStat&>(
      ::msg::_CSDTStat_default_instance_);
}
inline const ::msg::CSDTStat& CSDTPlayerDetailInfo::stat() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerDetailInfo.Stat)
  return _internal_stat();
}
inline void CSDTPlayerDetailInfo::unsafe_arena_set_allocated_stat(
    ::msg::CSDTStat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerDetailInfo.Stat)
}
inline ::msg::CSDTStat* CSDTPlayerDetailInfo::release_stat() {
  
  ::msg::CSDTStat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTStat* CSDTPlayerDetailInfo::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerDetailInfo.Stat)
  
  ::msg::CSDTStat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::msg::CSDTStat* CSDTPlayerDetailInfo::_internal_mutable_stat() {
  
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTStat>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::msg::CSDTStat* CSDTPlayerDetailInfo::mutable_stat() {
  ::msg::CSDTStat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerDetailInfo.Stat)
  return _msg;
}
inline void CSDTPlayerDetailInfo::set_allocated_stat(::msg::CSDTStat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerDetailInfo.Stat)
}

// repeated .msg.CSDTItem Items = 3;
inline int CSDTPlayerDetailInfo::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CSDTPlayerDetailInfo::items_size() const {
  return _internal_items_size();
}
inline void CSDTPlayerDetailInfo::clear_items() {
  _impl_.items_.Clear();
}
inline ::msg::CSDTItem* CSDTPlayerDetailInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerDetailInfo.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >*
CSDTPlayerDetailInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerDetailInfo.Items)
  return &_impl_.items_;
}
inline const ::msg::CSDTItem& CSDTPlayerDetailInfo::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::msg::CSDTItem& CSDTPlayerDetailInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerDetailInfo.Items)
  return _internal_items(index);
}
inline ::msg::CSDTItem* CSDTPlayerDetailInfo::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::msg::CSDTItem* CSDTPlayerDetailInfo::add_items() {
  ::msg::CSDTItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerDetailInfo.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >&
CSDTPlayerDetailInfo::items() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerDetailInfo.Items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// CSDTPlayerItems

// bool Cache = 1;
inline void CSDTPlayerItems::clear_cache() {
  _impl_.cache_ = false;
}
inline bool CSDTPlayerItems::_internal_cache() const {
  return _impl_.cache_;
}
inline bool CSDTPlayerItems::cache() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerItems.Cache)
  return _internal_cache();
}
inline void CSDTPlayerItems::_internal_set_cache(bool value) {
  
  _impl_.cache_ = value;
}
inline void CSDTPlayerItems::set_cache(bool value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerItems.Cache)
}

// repeated .msg.CSDTItem Medals = 2;
inline int CSDTPlayerItems::_internal_medals_size() const {
  return _impl_.medals_.size();
}
inline int CSDTPlayerItems::medals_size() const {
  return _internal_medals_size();
}
inline void CSDTPlayerItems::clear_medals() {
  _impl_.medals_.Clear();
}
inline ::msg::CSDTItem* CSDTPlayerItems::mutable_medals(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerItems.Medals)
  return _impl_.medals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >*
CSDTPlayerItems::mutable_medals() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPlayerItems.Medals)
  return &_impl_.medals_;
}
inline const ::msg::CSDTItem& CSDTPlayerItems::_internal_medals(int index) const {
  return _impl_.medals_.Get(index);
}
inline const ::msg::CSDTItem& CSDTPlayerItems::medals(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerItems.Medals)
  return _internal_medals(index);
}
inline ::msg::CSDTItem* CSDTPlayerItems::_internal_add_medals() {
  return _impl_.medals_.Add();
}
inline ::msg::CSDTItem* CSDTPlayerItems::add_medals() {
  ::msg::CSDTItem* _add = _internal_add_medals();
  // @@protoc_insertion_point(field_add:msg.CSDTPlayerItems.Medals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTItem >&
CSDTPlayerItems::medals() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPlayerItems.Medals)
  return _impl_.medals_;
}

// -------------------------------------------------------------------

// CSDTRankSeasonData

// uint32 CompetitionCnt = 1;
inline void CSDTRankSeasonData::clear_competitioncnt() {
  _impl_.competitioncnt_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_competitioncnt() const {
  return _impl_.competitioncnt_;
}
inline uint32_t CSDTRankSeasonData::competitioncnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.CompetitionCnt)
  return _internal_competitioncnt();
}
inline void CSDTRankSeasonData::_internal_set_competitioncnt(uint32_t value) {
  
  _impl_.competitioncnt_ = value;
}
inline void CSDTRankSeasonData::set_competitioncnt(uint32_t value) {
  _internal_set_competitioncnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.CompetitionCnt)
}

// uint32 AvgRank = 2;
inline void CSDTRankSeasonData::clear_avgrank() {
  _impl_.avgrank_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_avgrank() const {
  return _impl_.avgrank_;
}
inline uint32_t CSDTRankSeasonData::avgrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.AvgRank)
  return _internal_avgrank();
}
inline void CSDTRankSeasonData::_internal_set_avgrank(uint32_t value) {
  
  _impl_.avgrank_ = value;
}
inline void CSDTRankSeasonData::set_avgrank(uint32_t value) {
  _internal_set_avgrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.AvgRank)
}

// uint32 MvpCount = 3;
inline void CSDTRankSeasonData::clear_mvpcount() {
  _impl_.mvpcount_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_mvpcount() const {
  return _impl_.mvpcount_;
}
inline uint32_t CSDTRankSeasonData::mvpcount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.MvpCount)
  return _internal_mvpcount();
}
inline void CSDTRankSeasonData::_internal_set_mvpcount(uint32_t value) {
  
  _impl_.mvpcount_ = value;
}
inline void CSDTRankSeasonData::set_mvpcount(uint32_t value) {
  _internal_set_mvpcount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.MvpCount)
}

// uint32 MvpProbability = 4;
inline void CSDTRankSeasonData::clear_mvpprobability() {
  _impl_.mvpprobability_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_mvpprobability() const {
  return _impl_.mvpprobability_;
}
inline uint32_t CSDTRankSeasonData::mvpprobability() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.MvpProbability)
  return _internal_mvpprobability();
}
inline void CSDTRankSeasonData::_internal_set_mvpprobability(uint32_t value) {
  
  _impl_.mvpprobability_ = value;
}
inline void CSDTRankSeasonData::set_mvpprobability(uint32_t value) {
  _internal_set_mvpprobability(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.MvpProbability)
}

// uint32 Top3Count = 5;
inline void CSDTRankSeasonData::clear_top3count() {
  _impl_.top3count_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_top3count() const {
  return _impl_.top3count_;
}
inline uint32_t CSDTRankSeasonData::top3count() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.Top3Count)
  return _internal_top3count();
}
inline void CSDTRankSeasonData::_internal_set_top3count(uint32_t value) {
  
  _impl_.top3count_ = value;
}
inline void CSDTRankSeasonData::set_top3count(uint32_t value) {
  _internal_set_top3count(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.Top3Count)
}

// uint32 Top3Probability = 6;
inline void CSDTRankSeasonData::clear_top3probability() {
  _impl_.top3probability_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_top3probability() const {
  return _impl_.top3probability_;
}
inline uint32_t CSDTRankSeasonData::top3probability() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.Top3Probability)
  return _internal_top3probability();
}
inline void CSDTRankSeasonData::_internal_set_top3probability(uint32_t value) {
  
  _impl_.top3probability_ = value;
}
inline void CSDTRankSeasonData::set_top3probability(uint32_t value) {
  _internal_set_top3probability(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.Top3Probability)
}

// uint32 AvgRound = 7;
inline void CSDTRankSeasonData::clear_avground() {
  _impl_.avground_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_avground() const {
  return _impl_.avground_;
}
inline uint32_t CSDTRankSeasonData::avground() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.AvgRound)
  return _internal_avground();
}
inline void CSDTRankSeasonData::_internal_set_avground(uint32_t value) {
  
  _impl_.avground_ = value;
}
inline void CSDTRankSeasonData::set_avground(uint32_t value) {
  _internal_set_avground(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.AvgRound)
}

// uint32 WinTimes = 8;
inline void CSDTRankSeasonData::clear_wintimes() {
  _impl_.wintimes_ = 0u;
}
inline uint32_t CSDTRankSeasonData::_internal_wintimes() const {
  return _impl_.wintimes_;
}
inline uint32_t CSDTRankSeasonData::wintimes() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonData.WinTimes)
  return _internal_wintimes();
}
inline void CSDTRankSeasonData::_internal_set_wintimes(uint32_t value) {
  
  _impl_.wintimes_ = value;
}
inline void CSDTRankSeasonData::set_wintimes(uint32_t value) {
  _internal_set_wintimes(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonData.WinTimes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTRankSeasonInfo

// uint32 Id = 1;
inline void CSDTRankSeasonInfo::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTRankSeasonInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTRankSeasonInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.Id)
  return _internal_id();
}
inline void CSDTRankSeasonInfo::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTRankSeasonInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.Id)
}

// uint32 MaxMMR = 2;
inline void CSDTRankSeasonInfo::clear_maxmmr() {
  _impl_.maxmmr_ = 0u;
}
inline uint32_t CSDTRankSeasonInfo::_internal_maxmmr() const {
  return _impl_.maxmmr_;
}
inline uint32_t CSDTRankSeasonInfo::maxmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.MaxMMR)
  return _internal_maxmmr();
}
inline void CSDTRankSeasonInfo::_internal_set_maxmmr(uint32_t value) {
  
  _impl_.maxmmr_ = value;
}
inline void CSDTRankSeasonInfo::set_maxmmr(uint32_t value) {
  _internal_set_maxmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.MaxMMR)
}

// map<uint32, .msg.CSDTRankSeasonData> Modes = 3;
inline int CSDTRankSeasonInfo::_internal_modes_size() const {
  return _impl_.modes_.size();
}
inline int CSDTRankSeasonInfo::modes_size() const {
  return _internal_modes_size();
}
inline void CSDTRankSeasonInfo::clear_modes() {
  _impl_.modes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >&
CSDTRankSeasonInfo::_internal_modes() const {
  return _impl_.modes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >&
CSDTRankSeasonInfo::modes() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRankSeasonInfo.Modes)
  return _internal_modes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >*
CSDTRankSeasonInfo::_internal_mutable_modes() {
  return _impl_.modes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >*
CSDTRankSeasonInfo::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRankSeasonInfo.Modes)
  return _internal_mutable_modes();
}

// uint32 MaxTMMR = 4;
inline void CSDTRankSeasonInfo::clear_maxtmmr() {
  _impl_.maxtmmr_ = 0u;
}
inline uint32_t CSDTRankSeasonInfo::_internal_maxtmmr() const {
  return _impl_.maxtmmr_;
}
inline uint32_t CSDTRankSeasonInfo::maxtmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.MaxTMMR)
  return _internal_maxtmmr();
}
inline void CSDTRankSeasonInfo::_internal_set_maxtmmr(uint32_t value) {
  
  _impl_.maxtmmr_ = value;
}
inline void CSDTRankSeasonInfo::set_maxtmmr(uint32_t value) {
  _internal_set_maxtmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.MaxTMMR)
}

// uint32 MaxFFMMR = 5;
inline void CSDTRankSeasonInfo::clear_maxffmmr() {
  _impl_.maxffmmr_ = 0u;
}
inline uint32_t CSDTRankSeasonInfo::_internal_maxffmmr() const {
  return _impl_.maxffmmr_;
}
inline uint32_t CSDTRankSeasonInfo::maxffmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.MaxFFMMR)
  return _internal_maxffmmr();
}
inline void CSDTRankSeasonInfo::_internal_set_maxffmmr(uint32_t value) {
  
  _impl_.maxffmmr_ = value;
}
inline void CSDTRankSeasonInfo::set_maxffmmr(uint32_t value) {
  _internal_set_maxffmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.MaxFFMMR)
}

// int32 MaxQueenRank = 6;
inline void CSDTRankSeasonInfo::clear_maxqueenrank() {
  _impl_.maxqueenrank_ = 0;
}
inline int32_t CSDTRankSeasonInfo::_internal_maxqueenrank() const {
  return _impl_.maxqueenrank_;
}
inline int32_t CSDTRankSeasonInfo::maxqueenrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.MaxQueenRank)
  return _internal_maxqueenrank();
}
inline void CSDTRankSeasonInfo::_internal_set_maxqueenrank(int32_t value) {
  
  _impl_.maxqueenrank_ = value;
}
inline void CSDTRankSeasonInfo::set_maxqueenrank(int32_t value) {
  _internal_set_maxqueenrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.MaxQueenRank)
}

// int32 MaxTQueenRank = 7;
inline void CSDTRankSeasonInfo::clear_maxtqueenrank() {
  _impl_.maxtqueenrank_ = 0;
}
inline int32_t CSDTRankSeasonInfo::_internal_maxtqueenrank() const {
  return _impl_.maxtqueenrank_;
}
inline int32_t CSDTRankSeasonInfo::maxtqueenrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.MaxTQueenRank)
  return _internal_maxtqueenrank();
}
inline void CSDTRankSeasonInfo::_internal_set_maxtqueenrank(int32_t value) {
  
  _impl_.maxtqueenrank_ = value;
}
inline void CSDTRankSeasonInfo::set_maxtqueenrank(int32_t value) {
  _internal_set_maxtqueenrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.MaxTQueenRank)
}

// int32 MaxFQueenRank = 8;
inline void CSDTRankSeasonInfo::clear_maxfqueenrank() {
  _impl_.maxfqueenrank_ = 0;
}
inline int32_t CSDTRankSeasonInfo::_internal_maxfqueenrank() const {
  return _impl_.maxfqueenrank_;
}
inline int32_t CSDTRankSeasonInfo::maxfqueenrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRankSeasonInfo.MaxFQueenRank)
  return _internal_maxfqueenrank();
}
inline void CSDTRankSeasonInfo::_internal_set_maxfqueenrank(int32_t value) {
  
  _impl_.maxfqueenrank_ = value;
}
inline void CSDTRankSeasonInfo::set_maxfqueenrank(int32_t value) {
  _internal_set_maxfqueenrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRankSeasonInfo.MaxFQueenRank)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTStat

// uint32 MMR = 1;
inline void CSDTStat::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t CSDTStat::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CSDTStat::mmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.MMR)
  return _internal_mmr();
}
inline void CSDTStat::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void CSDTStat::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.MMR)
}

// uint32 CompetitionCnt = 2;
inline void CSDTStat::clear_competitioncnt() {
  _impl_.competitioncnt_ = 0u;
}
inline uint32_t CSDTStat::_internal_competitioncnt() const {
  return _impl_.competitioncnt_;
}
inline uint32_t CSDTStat::competitioncnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.CompetitionCnt)
  return _internal_competitioncnt();
}
inline void CSDTStat::_internal_set_competitioncnt(uint32_t value) {
  
  _impl_.competitioncnt_ = value;
}
inline void CSDTStat::set_competitioncnt(uint32_t value) {
  _internal_set_competitioncnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.CompetitionCnt)
}

// uint32 MvpCnt = 3;
inline void CSDTStat::clear_mvpcnt() {
  _impl_.mvpcnt_ = 0u;
}
inline uint32_t CSDTStat::_internal_mvpcnt() const {
  return _impl_.mvpcnt_;
}
inline uint32_t CSDTStat::mvpcnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.MvpCnt)
  return _internal_mvpcnt();
}
inline void CSDTStat::_internal_set_mvpcnt(uint32_t value) {
  
  _impl_.mvpcnt_ = value;
}
inline void CSDTStat::set_mvpcnt(uint32_t value) {
  _internal_set_mvpcnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.MvpCnt)
}

// int64 RegisterTime = 4;
inline void CSDTStat::clear_registertime() {
  _impl_.registertime_ = int64_t{0};
}
inline int64_t CSDTStat::_internal_registertime() const {
  return _impl_.registertime_;
}
inline int64_t CSDTStat::registertime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.RegisterTime)
  return _internal_registertime();
}
inline void CSDTStat::_internal_set_registertime(int64_t value) {
  
  _impl_.registertime_ = value;
}
inline void CSDTStat::set_registertime(int64_t value) {
  _internal_set_registertime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.RegisterTime)
}

// uint32 ChessPlayerSkin = 5;
inline void CSDTStat::clear_chessplayerskin() {
  _impl_.chessplayerskin_ = 0u;
}
inline uint32_t CSDTStat::_internal_chessplayerskin() const {
  return _impl_.chessplayerskin_;
}
inline uint32_t CSDTStat::chessplayerskin() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.ChessPlayerSkin)
  return _internal_chessplayerskin();
}
inline void CSDTStat::_internal_set_chessplayerskin(uint32_t value) {
  
  _impl_.chessplayerskin_ = value;
}
inline void CSDTStat::set_chessplayerskin(uint32_t value) {
  _internal_set_chessplayerskin(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.ChessPlayerSkin)
}

// uint32 FollowCount = 6;
inline void CSDTStat::clear_followcount() {
  _impl_.followcount_ = 0u;
}
inline uint32_t CSDTStat::_internal_followcount() const {
  return _impl_.followcount_;
}
inline uint32_t CSDTStat::followcount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.FollowCount)
  return _internal_followcount();
}
inline void CSDTStat::_internal_set_followcount(uint32_t value) {
  
  _impl_.followcount_ = value;
}
inline void CSDTStat::set_followcount(uint32_t value) {
  _internal_set_followcount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.FollowCount)
}

// uint32 FansCount = 7;
inline void CSDTStat::clear_fanscount() {
  _impl_.fanscount_ = 0u;
}
inline uint32_t CSDTStat::_internal_fanscount() const {
  return _impl_.fanscount_;
}
inline uint32_t CSDTStat::fanscount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.FansCount)
  return _internal_fanscount();
}
inline void CSDTStat::_internal_set_fanscount(uint32_t value) {
  
  _impl_.fanscount_ = value;
}
inline void CSDTStat::set_fanscount(uint32_t value) {
  _internal_set_fanscount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.FansCount)
}

// map<uint32, .msg.CSDTRankSeasonInfo> SeasonInfo = 8;
inline int CSDTStat::_internal_seasoninfo_size() const {
  return _impl_.seasoninfo_.size();
}
inline int CSDTStat::seasoninfo_size() const {
  return _internal_seasoninfo_size();
}
inline void CSDTStat::clear_seasoninfo() {
  _impl_.seasoninfo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >&
CSDTStat::_internal_seasoninfo() const {
  return _impl_.seasoninfo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >&
CSDTStat::seasoninfo() const {
  // @@protoc_insertion_point(field_map:msg.CSDTStat.SeasonInfo)
  return _internal_seasoninfo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >*
CSDTStat::_internal_mutable_seasoninfo() {
  return _impl_.seasoninfo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >*
CSDTStat::mutable_seasoninfo() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTStat.SeasonInfo)
  return _internal_mutable_seasoninfo();
}

// .msg.CSDTRankSeasonData UnSeasonData = 9;
inline bool CSDTStat::_internal_has_unseasondata() const {
  return this != internal_default_instance() && _impl_.unseasondata_ != nullptr;
}
inline bool CSDTStat::has_unseasondata() const {
  return _internal_has_unseasondata();
}
inline void CSDTStat::clear_unseasondata() {
  if (GetArenaForAllocation() == nullptr && _impl_.unseasondata_ != nullptr) {
    delete _impl_.unseasondata_;
  }
  _impl_.unseasondata_ = nullptr;
}
inline const ::msg::CSDTRankSeasonData& CSDTStat::_internal_unseasondata() const {
  const ::msg::CSDTRankSeasonData* p = _impl_.unseasondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTRankSeasonData&>(
      ::msg::_CSDTRankSeasonData_default_instance_);
}
inline const ::msg::CSDTRankSeasonData& CSDTStat::unseasondata() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.UnSeasonData)
  return _internal_unseasondata();
}
inline void CSDTStat::unsafe_arena_set_allocated_unseasondata(
    ::msg::CSDTRankSeasonData* unseasondata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unseasondata_);
  }
  _impl_.unseasondata_ = unseasondata;
  if (unseasondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTStat.UnSeasonData)
}
inline ::msg::CSDTRankSeasonData* CSDTStat::release_unseasondata() {
  
  ::msg::CSDTRankSeasonData* temp = _impl_.unseasondata_;
  _impl_.unseasondata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTRankSeasonData* CSDTStat::unsafe_arena_release_unseasondata() {
  // @@protoc_insertion_point(field_release:msg.CSDTStat.UnSeasonData)
  
  ::msg::CSDTRankSeasonData* temp = _impl_.unseasondata_;
  _impl_.unseasondata_ = nullptr;
  return temp;
}
inline ::msg::CSDTRankSeasonData* CSDTStat::_internal_mutable_unseasondata() {
  
  if (_impl_.unseasondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTRankSeasonData>(GetArenaForAllocation());
    _impl_.unseasondata_ = p;
  }
  return _impl_.unseasondata_;
}
inline ::msg::CSDTRankSeasonData* CSDTStat::mutable_unseasondata() {
  ::msg::CSDTRankSeasonData* _msg = _internal_mutable_unseasondata();
  // @@protoc_insertion_point(field_mutable:msg.CSDTStat.UnSeasonData)
  return _msg;
}
inline void CSDTStat::set_allocated_unseasondata(::msg::CSDTRankSeasonData* unseasondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unseasondata_;
  }
  if (unseasondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unseasondata);
    if (message_arena != submessage_arena) {
      unseasondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unseasondata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unseasondata_ = unseasondata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTStat.UnSeasonData)
}

// uint32 CompetitionCntDaily = 10;
inline void CSDTStat::clear_competitioncntdaily() {
  _impl_.competitioncntdaily_ = 0u;
}
inline uint32_t CSDTStat::_internal_competitioncntdaily() const {
  return _impl_.competitioncntdaily_;
}
inline uint32_t CSDTStat::competitioncntdaily() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.CompetitionCntDaily)
  return _internal_competitioncntdaily();
}
inline void CSDTStat::_internal_set_competitioncntdaily(uint32_t value) {
  
  _impl_.competitioncntdaily_ = value;
}
inline void CSDTStat::set_competitioncntdaily(uint32_t value) {
  _internal_set_competitioncntdaily(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.CompetitionCntDaily)
}

// uint32 BindOldPlayerCount = 11;
inline void CSDTStat::clear_bindoldplayercount() {
  _impl_.bindoldplayercount_ = 0u;
}
inline uint32_t CSDTStat::_internal_bindoldplayercount() const {
  return _impl_.bindoldplayercount_;
}
inline uint32_t CSDTStat::bindoldplayercount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.BindOldPlayerCount)
  return _internal_bindoldplayercount();
}
inline void CSDTStat::_internal_set_bindoldplayercount(uint32_t value) {
  
  _impl_.bindoldplayercount_ = value;
}
inline void CSDTStat::set_bindoldplayercount(uint32_t value) {
  _internal_set_bindoldplayercount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.BindOldPlayerCount)
}

// uint32 TMMR = 12;
inline void CSDTStat::clear_tmmr() {
  _impl_.tmmr_ = 0u;
}
inline uint32_t CSDTStat::_internal_tmmr() const {
  return _impl_.tmmr_;
}
inline uint32_t CSDTStat::tmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.TMMR)
  return _internal_tmmr();
}
inline void CSDTStat::_internal_set_tmmr(uint32_t value) {
  
  _impl_.tmmr_ = value;
}
inline void CSDTStat::set_tmmr(uint32_t value) {
  _internal_set_tmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.TMMR)
}

// .msg.CSDTChessPlayer CurChessPlr = 13;
inline bool CSDTStat::_internal_has_curchessplr() const {
  return this != internal_default_instance() && _impl_.curchessplr_ != nullptr;
}
inline bool CSDTStat::has_curchessplr() const {
  return _internal_has_curchessplr();
}
inline void CSDTStat::clear_curchessplr() {
  if (GetArenaForAllocation() == nullptr && _impl_.curchessplr_ != nullptr) {
    delete _impl_.curchessplr_;
  }
  _impl_.curchessplr_ = nullptr;
}
inline const ::msg::CSDTChessPlayer& CSDTStat::_internal_curchessplr() const {
  const ::msg::CSDTChessPlayer* p = _impl_.curchessplr_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTChessPlayer&>(
      ::msg::_CSDTChessPlayer_default_instance_);
}
inline const ::msg::CSDTChessPlayer& CSDTStat::curchessplr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.CurChessPlr)
  return _internal_curchessplr();
}
inline void CSDTStat::unsafe_arena_set_allocated_curchessplr(
    ::msg::CSDTChessPlayer* curchessplr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curchessplr_);
  }
  _impl_.curchessplr_ = curchessplr;
  if (curchessplr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTStat.CurChessPlr)
}
inline ::msg::CSDTChessPlayer* CSDTStat::release_curchessplr() {
  
  ::msg::CSDTChessPlayer* temp = _impl_.curchessplr_;
  _impl_.curchessplr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTChessPlayer* CSDTStat::unsafe_arena_release_curchessplr() {
  // @@protoc_insertion_point(field_release:msg.CSDTStat.CurChessPlr)
  
  ::msg::CSDTChessPlayer* temp = _impl_.curchessplr_;
  _impl_.curchessplr_ = nullptr;
  return temp;
}
inline ::msg::CSDTChessPlayer* CSDTStat::_internal_mutable_curchessplr() {
  
  if (_impl_.curchessplr_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTChessPlayer>(GetArenaForAllocation());
    _impl_.curchessplr_ = p;
  }
  return _impl_.curchessplr_;
}
inline ::msg::CSDTChessPlayer* CSDTStat::mutable_curchessplr() {
  ::msg::CSDTChessPlayer* _msg = _internal_mutable_curchessplr();
  // @@protoc_insertion_point(field_mutable:msg.CSDTStat.CurChessPlr)
  return _msg;
}
inline void CSDTStat::set_allocated_curchessplr(::msg::CSDTChessPlayer* curchessplr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.curchessplr_;
  }
  if (curchessplr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(curchessplr);
    if (message_arena != submessage_arena) {
      curchessplr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curchessplr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.curchessplr_ = curchessplr;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTStat.CurChessPlr)
}

// uint32 Cup = 14;
inline void CSDTStat::clear_cup() {
  _impl_.cup_ = 0u;
}
inline uint32_t CSDTStat::_internal_cup() const {
  return _impl_.cup_;
}
inline uint32_t CSDTStat::cup() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.Cup)
  return _internal_cup();
}
inline void CSDTStat::_internal_set_cup(uint32_t value) {
  
  _impl_.cup_ = value;
}
inline void CSDTStat::set_cup(uint32_t value) {
  _internal_set_cup(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.Cup)
}

// uint32 FFMMR = 15;
inline void CSDTStat::clear_ffmmr() {
  _impl_.ffmmr_ = 0u;
}
inline uint32_t CSDTStat::_internal_ffmmr() const {
  return _impl_.ffmmr_;
}
inline uint32_t CSDTStat::ffmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.FFMMR)
  return _internal_ffmmr();
}
inline void CSDTStat::_internal_set_ffmmr(uint32_t value) {
  
  _impl_.ffmmr_ = value;
}
inline void CSDTStat::set_ffmmr(uint32_t value) {
  _internal_set_ffmmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.FFMMR)
}

// int32 MaxQueenRank = 16;
inline void CSDTStat::clear_maxqueenrank() {
  _impl_.maxqueenrank_ = 0;
}
inline int32_t CSDTStat::_internal_maxqueenrank() const {
  return _impl_.maxqueenrank_;
}
inline int32_t CSDTStat::maxqueenrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.MaxQueenRank)
  return _internal_maxqueenrank();
}
inline void CSDTStat::_internal_set_maxqueenrank(int32_t value) {
  
  _impl_.maxqueenrank_ = value;
}
inline void CSDTStat::set_maxqueenrank(int32_t value) {
  _internal_set_maxqueenrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.MaxQueenRank)
}

// int32 MaxTQueenRank = 17;
inline void CSDTStat::clear_maxtqueenrank() {
  _impl_.maxtqueenrank_ = 0;
}
inline int32_t CSDTStat::_internal_maxtqueenrank() const {
  return _impl_.maxtqueenrank_;
}
inline int32_t CSDTStat::maxtqueenrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.MaxTQueenRank)
  return _internal_maxtqueenrank();
}
inline void CSDTStat::_internal_set_maxtqueenrank(int32_t value) {
  
  _impl_.maxtqueenrank_ = value;
}
inline void CSDTStat::set_maxtqueenrank(int32_t value) {
  _internal_set_maxtqueenrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.MaxTQueenRank)
}

// int32 MaxFQueenRank = 18;
inline void CSDTStat::clear_maxfqueenrank() {
  _impl_.maxfqueenrank_ = 0;
}
inline int32_t CSDTStat::_internal_maxfqueenrank() const {
  return _impl_.maxfqueenrank_;
}
inline int32_t CSDTStat::maxfqueenrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTStat.MaxFQueenRank)
  return _internal_maxfqueenrank();
}
inline void CSDTStat::_internal_set_maxfqueenrank(int32_t value) {
  
  _impl_.maxfqueenrank_ = value;
}
inline void CSDTStat::set_maxfqueenrank(int32_t value) {
  _internal_set_maxfqueenrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTStat.MaxFQueenRank)
}

// -------------------------------------------------------------------

// CSDTNumRankItem

// string Id = 1;
inline void CSDTNumRankItem::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTNumRankItem::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNumRankItem.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNumRankItem::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNumRankItem.Id)
}
inline std::string* CSDTNumRankItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNumRankItem.Id)
  return _s;
}
inline const std::string& CSDTNumRankItem::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTNumRankItem::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNumRankItem::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNumRankItem::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTNumRankItem.Id)
  return _impl_.id_.Release();
}
inline void CSDTNumRankItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNumRankItem.Id)
}

// uint32 Number = 4;
inline void CSDTNumRankItem::clear_number() {
  _impl_.number_ = 0u;
}
inline uint32_t CSDTNumRankItem::_internal_number() const {
  return _impl_.number_;
}
inline uint32_t CSDTNumRankItem::number() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNumRankItem.Number)
  return _internal_number();
}
inline void CSDTNumRankItem::_internal_set_number(uint32_t value) {
  
  _impl_.number_ = value;
}
inline void CSDTNumRankItem::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNumRankItem.Number)
}

// int32 Rank = 5;
inline void CSDTNumRankItem::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t CSDTNumRankItem::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t CSDTNumRankItem::rank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNumRankItem.Rank)
  return _internal_rank();
}
inline void CSDTNumRankItem::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void CSDTNumRankItem::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNumRankItem.Rank)
}

// string Captain = 6;
inline void CSDTNumRankItem::clear_captain() {
  _impl_.captain_.ClearToEmpty();
}
inline const std::string& CSDTNumRankItem::captain() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNumRankItem.Captain)
  return _internal_captain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNumRankItem::set_captain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.captain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNumRankItem.Captain)
}
inline std::string* CSDTNumRankItem::mutable_captain() {
  std::string* _s = _internal_mutable_captain();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNumRankItem.Captain)
  return _s;
}
inline const std::string& CSDTNumRankItem::_internal_captain() const {
  return _impl_.captain_.Get();
}
inline void CSDTNumRankItem::_internal_set_captain(const std::string& value) {
  
  _impl_.captain_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNumRankItem::_internal_mutable_captain() {
  
  return _impl_.captain_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNumRankItem::release_captain() {
  // @@protoc_insertion_point(field_release:msg.CSDTNumRankItem.Captain)
  return _impl_.captain_.Release();
}
inline void CSDTNumRankItem::set_allocated_captain(std::string* captain) {
  if (captain != nullptr) {
    
  } else {
    
  }
  _impl_.captain_.SetAllocated(captain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captain_.IsDefault()) {
    _impl_.captain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNumRankItem.Captain)
}

// int64 Score = 7;
inline void CSDTNumRankItem::clear_score() {
  _impl_.score_ = int64_t{0};
}
inline int64_t CSDTNumRankItem::_internal_score() const {
  return _impl_.score_;
}
inline int64_t CSDTNumRankItem::score() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNumRankItem.Score)
  return _internal_score();
}
inline void CSDTNumRankItem::_internal_set_score(int64_t value) {
  
  _impl_.score_ = value;
}
inline void CSDTNumRankItem::set_score(int64_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNumRankItem.Score)
}

// -------------------------------------------------------------------

// CSDTWorldChat

// .msg.CSDTPlayerSimpleInfo BaseInfo = 1;
inline bool CSDTWorldChat::_internal_has_baseinfo() const {
  return this != internal_default_instance() && _impl_.baseinfo_ != nullptr;
}
inline bool CSDTWorldChat::has_baseinfo() const {
  return _internal_has_baseinfo();
}
inline void CSDTWorldChat::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
}
inline const ::msg::CSDTPlayerSimpleInfo& CSDTWorldChat::_internal_baseinfo() const {
  const ::msg::CSDTPlayerSimpleInfo* p = _impl_.baseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPlayerSimpleInfo&>(
      ::msg::_CSDTPlayerSimpleInfo_default_instance_);
}
inline const ::msg::CSDTPlayerSimpleInfo& CSDTWorldChat::baseinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.BaseInfo)
  return _internal_baseinfo();
}
inline void CSDTWorldChat::unsafe_arena_set_allocated_baseinfo(
    ::msg::CSDTPlayerSimpleInfo* baseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseinfo_);
  }
  _impl_.baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTWorldChat.BaseInfo)
}
inline ::msg::CSDTPlayerSimpleInfo* CSDTWorldChat::release_baseinfo() {
  
  ::msg::CSDTPlayerSimpleInfo* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPlayerSimpleInfo* CSDTWorldChat::unsafe_arena_release_baseinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTWorldChat.BaseInfo)
  
  ::msg::CSDTPlayerSimpleInfo* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
  return temp;
}
inline ::msg::CSDTPlayerSimpleInfo* CSDTWorldChat::_internal_mutable_baseinfo() {
  
  if (_impl_.baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPlayerSimpleInfo>(GetArenaForAllocation());
    _impl_.baseinfo_ = p;
  }
  return _impl_.baseinfo_;
}
inline ::msg::CSDTPlayerSimpleInfo* CSDTWorldChat::mutable_baseinfo() {
  ::msg::CSDTPlayerSimpleInfo* _msg = _internal_mutable_baseinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWorldChat.BaseInfo)
  return _msg;
}
inline void CSDTWorldChat::set_allocated_baseinfo(::msg::CSDTPlayerSimpleInfo* baseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.baseinfo_;
  }
  if (baseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(baseinfo);
    if (message_arena != submessage_arena) {
      baseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWorldChat.BaseInfo)
}

// string Content = 2;
inline void CSDTWorldChat::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSDTWorldChat::content() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTWorldChat::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.Content)
}
inline std::string* CSDTWorldChat::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWorldChat.Content)
  return _s;
}
inline const std::string& CSDTWorldChat::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSDTWorldChat::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTWorldChat::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTWorldChat::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSDTWorldChat.Content)
  return _impl_.content_.Release();
}
inline void CSDTWorldChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWorldChat.Content)
}

// uint32 EmotionId = 3;
inline void CSDTWorldChat::clear_emotionid() {
  _impl_.emotionid_ = 0u;
}
inline uint32_t CSDTWorldChat::_internal_emotionid() const {
  return _impl_.emotionid_;
}
inline uint32_t CSDTWorldChat::emotionid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.EmotionId)
  return _internal_emotionid();
}
inline void CSDTWorldChat::_internal_set_emotionid(uint32_t value) {
  
  _impl_.emotionid_ = value;
}
inline void CSDTWorldChat::set_emotionid(uint32_t value) {
  _internal_set_emotionid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.EmotionId)
}

// bool NeedLocalize = 4;
inline void CSDTWorldChat::clear_needlocalize() {
  _impl_.needlocalize_ = false;
}
inline bool CSDTWorldChat::_internal_needlocalize() const {
  return _impl_.needlocalize_;
}
inline bool CSDTWorldChat::needlocalize() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.NeedLocalize)
  return _internal_needlocalize();
}
inline void CSDTWorldChat::_internal_set_needlocalize(bool value) {
  
  _impl_.needlocalize_ = value;
}
inline void CSDTWorldChat::set_needlocalize(bool value) {
  _internal_set_needlocalize(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.NeedLocalize)
}

// int64 Timestamp = 5;
inline void CSDTWorldChat::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t CSDTWorldChat::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t CSDTWorldChat::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.Timestamp)
  return _internal_timestamp();
}
inline void CSDTWorldChat::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void CSDTWorldChat::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.Timestamp)
}

// .msg.WORDCHAT WorldChatType = 6;
inline void CSDTWorldChat::clear_worldchattype() {
  _impl_.worldchattype_ = 0;
}
inline ::msg::WORDCHAT CSDTWorldChat::_internal_worldchattype() const {
  return static_cast< ::msg::WORDCHAT >(_impl_.worldchattype_);
}
inline ::msg::WORDCHAT CSDTWorldChat::worldchattype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.WorldChatType)
  return _internal_worldchattype();
}
inline void CSDTWorldChat::_internal_set_worldchattype(::msg::WORDCHAT value) {
  
  _impl_.worldchattype_ = value;
}
inline void CSDTWorldChat::set_worldchattype(::msg::WORDCHAT value) {
  _internal_set_worldchattype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.WorldChatType)
}

// string WorkshopMapName = 7;
inline void CSDTWorldChat::clear_workshopmapname() {
  _impl_.workshopmapname_.ClearToEmpty();
}
inline const std::string& CSDTWorldChat::workshopmapname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.WorkshopMapName)
  return _internal_workshopmapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTWorldChat::set_workshopmapname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.workshopmapname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.WorkshopMapName)
}
inline std::string* CSDTWorldChat::mutable_workshopmapname() {
  std::string* _s = _internal_mutable_workshopmapname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWorldChat.WorkshopMapName)
  return _s;
}
inline const std::string& CSDTWorldChat::_internal_workshopmapname() const {
  return _impl_.workshopmapname_.Get();
}
inline void CSDTWorldChat::_internal_set_workshopmapname(const std::string& value) {
  
  _impl_.workshopmapname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTWorldChat::_internal_mutable_workshopmapname() {
  
  return _impl_.workshopmapname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTWorldChat::release_workshopmapname() {
  // @@protoc_insertion_point(field_release:msg.CSDTWorldChat.WorkshopMapName)
  return _impl_.workshopmapname_.Release();
}
inline void CSDTWorldChat::set_allocated_workshopmapname(std::string* workshopmapname) {
  if (workshopmapname != nullptr) {
    
  } else {
    
  }
  _impl_.workshopmapname_.SetAllocated(workshopmapname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.workshopmapname_.IsDefault()) {
    _impl_.workshopmapname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWorldChat.WorkshopMapName)
}

// .msg.WorkshopSetting WSSetting = 8;
inline bool CSDTWorldChat::_internal_has_wssetting() const {
  return this != internal_default_instance() && _impl_.wssetting_ != nullptr;
}
inline bool CSDTWorldChat::has_wssetting() const {
  return _internal_has_wssetting();
}
inline void CSDTWorldChat::clear_wssetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.wssetting_ != nullptr) {
    delete _impl_.wssetting_;
  }
  _impl_.wssetting_ = nullptr;
}
inline const ::msg::WorkshopSetting& CSDTWorldChat::_internal_wssetting() const {
  const ::msg::WorkshopSetting* p = _impl_.wssetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::WorkshopSetting&>(
      ::msg::_WorkshopSetting_default_instance_);
}
inline const ::msg::WorkshopSetting& CSDTWorldChat::wssetting() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.WSSetting)
  return _internal_wssetting();
}
inline void CSDTWorldChat::unsafe_arena_set_allocated_wssetting(
    ::msg::WorkshopSetting* wssetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wssetting_);
  }
  _impl_.wssetting_ = wssetting;
  if (wssetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTWorldChat.WSSetting)
}
inline ::msg::WorkshopSetting* CSDTWorldChat::release_wssetting() {
  
  ::msg::WorkshopSetting* temp = _impl_.wssetting_;
  _impl_.wssetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::WorkshopSetting* CSDTWorldChat::unsafe_arena_release_wssetting() {
  // @@protoc_insertion_point(field_release:msg.CSDTWorldChat.WSSetting)
  
  ::msg::WorkshopSetting* temp = _impl_.wssetting_;
  _impl_.wssetting_ = nullptr;
  return temp;
}
inline ::msg::WorkshopSetting* CSDTWorldChat::_internal_mutable_wssetting() {
  
  if (_impl_.wssetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::WorkshopSetting>(GetArenaForAllocation());
    _impl_.wssetting_ = p;
  }
  return _impl_.wssetting_;
}
inline ::msg::WorkshopSetting* CSDTWorldChat::mutable_wssetting() {
  ::msg::WorkshopSetting* _msg = _internal_mutable_wssetting();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWorldChat.WSSetting)
  return _msg;
}
inline void CSDTWorldChat::set_allocated_wssetting(::msg::WorkshopSetting* wssetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wssetting_;
  }
  if (wssetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wssetting);
    if (message_arena != submessage_arena) {
      wssetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wssetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wssetting_ = wssetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWorldChat.WSSetting)
}

// .msg.CHATSOURCETYPE SourceType = 9;
inline void CSDTWorldChat::clear_sourcetype() {
  _impl_.sourcetype_ = 0;
}
inline ::msg::CHATSOURCETYPE CSDTWorldChat::_internal_sourcetype() const {
  return static_cast< ::msg::CHATSOURCETYPE >(_impl_.sourcetype_);
}
inline ::msg::CHATSOURCETYPE CSDTWorldChat::sourcetype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.SourceType)
  return _internal_sourcetype();
}
inline void CSDTWorldChat::_internal_set_sourcetype(::msg::CHATSOURCETYPE value) {
  
  _impl_.sourcetype_ = value;
}
inline void CSDTWorldChat::set_sourcetype(::msg::CHATSOURCETYPE value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.SourceType)
}

// string ChannelID = 10;
inline void CSDTWorldChat::clear_channelid() {
  _impl_.channelid_.ClearToEmpty();
}
inline const std::string& CSDTWorldChat::channelid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.ChannelID)
  return _internal_channelid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTWorldChat::set_channelid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTWorldChat.ChannelID)
}
inline std::string* CSDTWorldChat::mutable_channelid() {
  std::string* _s = _internal_mutable_channelid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWorldChat.ChannelID)
  return _s;
}
inline const std::string& CSDTWorldChat::_internal_channelid() const {
  return _impl_.channelid_.Get();
}
inline void CSDTWorldChat::_internal_set_channelid(const std::string& value) {
  
  _impl_.channelid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTWorldChat::_internal_mutable_channelid() {
  
  return _impl_.channelid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTWorldChat::release_channelid() {
  // @@protoc_insertion_point(field_release:msg.CSDTWorldChat.ChannelID)
  return _impl_.channelid_.Release();
}
inline void CSDTWorldChat::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  _impl_.channelid_.SetAllocated(channelid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelid_.IsDefault()) {
    _impl_.channelid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWorldChat.ChannelID)
}

// .msg.CSDTItemMedal MedalInfo = 11;
inline bool CSDTWorldChat::_internal_has_medalinfo() const {
  return this != internal_default_instance() && _impl_.medalinfo_ != nullptr;
}
inline bool CSDTWorldChat::has_medalinfo() const {
  return _internal_has_medalinfo();
}
inline void CSDTWorldChat::clear_medalinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.medalinfo_ != nullptr) {
    delete _impl_.medalinfo_;
  }
  _impl_.medalinfo_ = nullptr;
}
inline const ::msg::CSDTItemMedal& CSDTWorldChat::_internal_medalinfo() const {
  const ::msg::CSDTItemMedal* p = _impl_.medalinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTItemMedal&>(
      ::msg::_CSDTItemMedal_default_instance_);
}
inline const ::msg::CSDTItemMedal& CSDTWorldChat::medalinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWorldChat.MedalInfo)
  return _internal_medalinfo();
}
inline void CSDTWorldChat::unsafe_arena_set_allocated_medalinfo(
    ::msg::CSDTItemMedal* medalinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medalinfo_);
  }
  _impl_.medalinfo_ = medalinfo;
  if (medalinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTWorldChat.MedalInfo)
}
inline ::msg::CSDTItemMedal* CSDTWorldChat::release_medalinfo() {
  
  ::msg::CSDTItemMedal* temp = _impl_.medalinfo_;
  _impl_.medalinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTItemMedal* CSDTWorldChat::unsafe_arena_release_medalinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTWorldChat.MedalInfo)
  
  ::msg::CSDTItemMedal* temp = _impl_.medalinfo_;
  _impl_.medalinfo_ = nullptr;
  return temp;
}
inline ::msg::CSDTItemMedal* CSDTWorldChat::_internal_mutable_medalinfo() {
  
  if (_impl_.medalinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTItemMedal>(GetArenaForAllocation());
    _impl_.medalinfo_ = p;
  }
  return _impl_.medalinfo_;
}
inline ::msg::CSDTItemMedal* CSDTWorldChat::mutable_medalinfo() {
  ::msg::CSDTItemMedal* _msg = _internal_mutable_medalinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWorldChat.MedalInfo)
  return _msg;
}
inline void CSDTWorldChat::set_allocated_medalinfo(::msg::CSDTItemMedal* medalinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.medalinfo_;
  }
  if (medalinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(medalinfo);
    if (message_arena != submessage_arena) {
      medalinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medalinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.medalinfo_ = medalinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWorldChat.MedalInfo)
}

// -------------------------------------------------------------------

// CSDTBuffAct

// uint32 GroupId = 1;
inline void CSDTBuffAct::clear_groupid() {
  _impl_.groupid_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint32_t CSDTBuffAct::groupid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.GroupId)
  return _internal_groupid();
}
inline void CSDTBuffAct::_internal_set_groupid(uint32_t value) {
  
  _impl_.groupid_ = value;
}
inline void CSDTBuffAct::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.GroupId)
}

// uint32 ActId = 2;
inline void CSDTBuffAct::clear_actid() {
  _impl_.actid_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_actid() const {
  return _impl_.actid_;
}
inline uint32_t CSDTBuffAct::actid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.ActId)
  return _internal_actid();
}
inline void CSDTBuffAct::_internal_set_actid(uint32_t value) {
  
  _impl_.actid_ = value;
}
inline void CSDTBuffAct::set_actid(uint32_t value) {
  _internal_set_actid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.ActId)
}

// .msg.BUFFACTSTATUS ActStatus = 3;
inline void CSDTBuffAct::clear_actstatus() {
  _impl_.actstatus_ = 0;
}
inline ::msg::BUFFACTSTATUS CSDTBuffAct::_internal_actstatus() const {
  return static_cast< ::msg::BUFFACTSTATUS >(_impl_.actstatus_);
}
inline ::msg::BUFFACTSTATUS CSDTBuffAct::actstatus() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.ActStatus)
  return _internal_actstatus();
}
inline void CSDTBuffAct::_internal_set_actstatus(::msg::BUFFACTSTATUS value) {
  
  _impl_.actstatus_ = value;
}
inline void CSDTBuffAct::set_actstatus(::msg::BUFFACTSTATUS value) {
  _internal_set_actstatus(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.ActStatus)
}

// uint32 ShowTime = 4;
inline void CSDTBuffAct::clear_showtime() {
  _impl_.showtime_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_showtime() const {
  return _impl_.showtime_;
}
inline uint32_t CSDTBuffAct::showtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.ShowTime)
  return _internal_showtime();
}
inline void CSDTBuffAct::_internal_set_showtime(uint32_t value) {
  
  _impl_.showtime_ = value;
}
inline void CSDTBuffAct::set_showtime(uint32_t value) {
  _internal_set_showtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.ShowTime)
}

// uint32 EndShowTime = 5;
inline void CSDTBuffAct::clear_endshowtime() {
  _impl_.endshowtime_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_endshowtime() const {
  return _impl_.endshowtime_;
}
inline uint32_t CSDTBuffAct::endshowtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.EndShowTime)
  return _internal_endshowtime();
}
inline void CSDTBuffAct::_internal_set_endshowtime(uint32_t value) {
  
  _impl_.endshowtime_ = value;
}
inline void CSDTBuffAct::set_endshowtime(uint32_t value) {
  _internal_set_endshowtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.EndShowTime)
}

// uint32 StartTime = 6;
inline void CSDTBuffAct::clear_starttime() {
  _impl_.starttime_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_starttime() const {
  return _impl_.starttime_;
}
inline uint32_t CSDTBuffAct::starttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.StartTime)
  return _internal_starttime();
}
inline void CSDTBuffAct::_internal_set_starttime(uint32_t value) {
  
  _impl_.starttime_ = value;
}
inline void CSDTBuffAct::set_starttime(uint32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.StartTime)
}

// uint32 EndTime = 7;
inline void CSDTBuffAct::clear_endtime() {
  _impl_.endtime_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_endtime() const {
  return _impl_.endtime_;
}
inline uint32_t CSDTBuffAct::endtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.EndTime)
  return _internal_endtime();
}
inline void CSDTBuffAct::_internal_set_endtime(uint32_t value) {
  
  _impl_.endtime_ = value;
}
inline void CSDTBuffAct::set_endtime(uint32_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.EndTime)
}

// uint32 BuffStartTime = 8;
inline void CSDTBuffAct::clear_buffstarttime() {
  _impl_.buffstarttime_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_buffstarttime() const {
  return _impl_.buffstarttime_;
}
inline uint32_t CSDTBuffAct::buffstarttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.BuffStartTime)
  return _internal_buffstarttime();
}
inline void CSDTBuffAct::_internal_set_buffstarttime(uint32_t value) {
  
  _impl_.buffstarttime_ = value;
}
inline void CSDTBuffAct::set_buffstarttime(uint32_t value) {
  _internal_set_buffstarttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.BuffStartTime)
}

// uint32 BuffEndTime = 9;
inline void CSDTBuffAct::clear_buffendtime() {
  _impl_.buffendtime_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_buffendtime() const {
  return _impl_.buffendtime_;
}
inline uint32_t CSDTBuffAct::buffendtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.BuffEndTime)
  return _internal_buffendtime();
}
inline void CSDTBuffAct::_internal_set_buffendtime(uint32_t value) {
  
  _impl_.buffendtime_ = value;
}
inline void CSDTBuffAct::set_buffendtime(uint32_t value) {
  _internal_set_buffendtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.BuffEndTime)
}

// .msg.ACTIVITYTYPE ActType = 10;
inline void CSDTBuffAct::clear_acttype() {
  _impl_.acttype_ = 0;
}
inline ::msg::ACTIVITYTYPE CSDTBuffAct::_internal_acttype() const {
  return static_cast< ::msg::ACTIVITYTYPE >(_impl_.acttype_);
}
inline ::msg::ACTIVITYTYPE CSDTBuffAct::acttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.ActType)
  return _internal_acttype();
}
inline void CSDTBuffAct::_internal_set_acttype(::msg::ACTIVITYTYPE value) {
  
  _impl_.acttype_ = value;
}
inline void CSDTBuffAct::set_acttype(::msg::ACTIVITYTYPE value) {
  _internal_set_acttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.ActType)
}

// .msg.BuffEffectType BuffType = 11;
inline void CSDTBuffAct::clear_bufftype() {
  _impl_.bufftype_ = 0;
}
inline ::msg::BuffEffectType CSDTBuffAct::_internal_bufftype() const {
  return static_cast< ::msg::BuffEffectType >(_impl_.bufftype_);
}
inline ::msg::BuffEffectType CSDTBuffAct::bufftype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.BuffType)
  return _internal_bufftype();
}
inline void CSDTBuffAct::_internal_set_bufftype(::msg::BuffEffectType value) {
  
  _impl_.bufftype_ = value;
}
inline void CSDTBuffAct::set_bufftype(::msg::BuffEffectType value) {
  _internal_set_bufftype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.BuffType)
}

// uint32 BuffStartLv = 12;
inline void CSDTBuffAct::clear_buffstartlv() {
  _impl_.buffstartlv_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_buffstartlv() const {
  return _impl_.buffstartlv_;
}
inline uint32_t CSDTBuffAct::buffstartlv() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.BuffStartLv)
  return _internal_buffstartlv();
}
inline void CSDTBuffAct::_internal_set_buffstartlv(uint32_t value) {
  
  _impl_.buffstartlv_ = value;
}
inline void CSDTBuffAct::set_buffstartlv(uint32_t value) {
  _internal_set_buffstartlv(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.BuffStartLv)
}

// uint32 BuffEndLv = 13;
inline void CSDTBuffAct::clear_buffendlv() {
  _impl_.buffendlv_ = 0u;
}
inline uint32_t CSDTBuffAct::_internal_buffendlv() const {
  return _impl_.buffendlv_;
}
inline uint32_t CSDTBuffAct::buffendlv() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBuffAct.BuffEndLv)
  return _internal_buffendlv();
}
inline void CSDTBuffAct::_internal_set_buffendlv(uint32_t value) {
  
  _impl_.buffendlv_ = value;
}
inline void CSDTBuffAct::set_buffendlv(uint32_t value) {
  _internal_set_buffendlv(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBuffAct.BuffEndLv)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTMail

// uint64 Id = 1;
inline void CSDTMail::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CSDTMail::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CSDTMail::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.Id)
  return _internal_id();
}
inline void CSDTMail::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTMail::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.Id)
}

// string Title = 2;
inline void CSDTMail::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CSDTMail::title() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTMail::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTMail.Title)
}
inline std::string* CSDTMail::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMail.Title)
  return _s;
}
inline const std::string& CSDTMail::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CSDTMail::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTMail::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTMail::release_title() {
  // @@protoc_insertion_point(field_release:msg.CSDTMail.Title)
  return _impl_.title_.Release();
}
inline void CSDTMail::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMail.Title)
}

// string Content = 3;
inline void CSDTMail::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSDTMail::content() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTMail::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTMail.Content)
}
inline std::string* CSDTMail::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMail.Content)
  return _s;
}
inline const std::string& CSDTMail::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSDTMail::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTMail::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTMail::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSDTMail.Content)
  return _impl_.content_.Release();
}
inline void CSDTMail::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMail.Content)
}

// repeated .msg.Award Awards = 4;
inline int CSDTMail::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int CSDTMail::awards_size() const {
  return _internal_awards_size();
}
inline void CSDTMail::clear_awards() {
  _impl_.awards_.Clear();
}
inline ::msg::Award* CSDTMail::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTMail.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
CSDTMail::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTMail.Awards)
  return &_impl_.awards_;
}
inline const ::msg::Award& CSDTMail::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::Award& CSDTMail::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.Awards)
  return _internal_awards(index);
}
inline ::msg::Award* CSDTMail::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::Award* CSDTMail::add_awards() {
  ::msg::Award* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.CSDTMail.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
CSDTMail::awards() const {
  // @@protoc_insertion_point(field_list:msg.CSDTMail.Awards)
  return _impl_.awards_;
}

// int64 Ts = 5;
inline void CSDTMail::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t CSDTMail::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t CSDTMail::ts() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.Ts)
  return _internal_ts();
}
inline void CSDTMail::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void CSDTMail::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.Ts)
}

// bool IsRead = 6;
inline void CSDTMail::clear_isread() {
  _impl_.isread_ = false;
}
inline bool CSDTMail::_internal_isread() const {
  return _impl_.isread_;
}
inline bool CSDTMail::isread() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.IsRead)
  return _internal_isread();
}
inline void CSDTMail::_internal_set_isread(bool value) {
  
  _impl_.isread_ = value;
}
inline void CSDTMail::set_isread(bool value) {
  _internal_set_isread(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.IsRead)
}

// bool IsGetAward = 7;
inline void CSDTMail::clear_isgetaward() {
  _impl_.isgetaward_ = false;
}
inline bool CSDTMail::_internal_isgetaward() const {
  return _impl_.isgetaward_;
}
inline bool CSDTMail::isgetaward() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.IsGetAward)
  return _internal_isgetaward();
}
inline void CSDTMail::_internal_set_isgetaward(bool value) {
  
  _impl_.isgetaward_ = value;
}
inline void CSDTMail::set_isgetaward(bool value) {
  _internal_set_isgetaward(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.IsGetAward)
}

// uint32 Flag = 8;
inline void CSDTMail::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t CSDTMail::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t CSDTMail::flag() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.Flag)
  return _internal_flag();
}
inline void CSDTMail::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void CSDTMail::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.Flag)
}

// .msg.SOURCE AwardSource = 9;
inline void CSDTMail::clear_awardsource() {
  _impl_.awardsource_ = 0;
}
inline ::msg::SOURCE CSDTMail::_internal_awardsource() const {
  return static_cast< ::msg::SOURCE >(_impl_.awardsource_);
}
inline ::msg::SOURCE CSDTMail::awardsource() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.AwardSource)
  return _internal_awardsource();
}
inline void CSDTMail::_internal_set_awardsource(::msg::SOURCE value) {
  
  _impl_.awardsource_ = value;
}
inline void CSDTMail::set_awardsource(::msg::SOURCE value) {
  _internal_set_awardsource(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.AwardSource)
}

// map<string, string> Dict = 10;
inline int CSDTMail::_internal_dict_size() const {
  return _impl_.dict_.size();
}
inline int CSDTMail::dict_size() const {
  return _internal_dict_size();
}
inline void CSDTMail::clear_dict() {
  _impl_.dict_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CSDTMail::_internal_dict() const {
  return _impl_.dict_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CSDTMail::dict() const {
  // @@protoc_insertion_point(field_map:msg.CSDTMail.Dict)
  return _internal_dict();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CSDTMail::_internal_mutable_dict() {
  return _impl_.dict_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CSDTMail::mutable_dict() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTMail.Dict)
  return _internal_mutable_dict();
}

// .msg.MailExtData ExtData = 11;
inline bool CSDTMail::_internal_has_extdata() const {
  return this != internal_default_instance() && _impl_.extdata_ != nullptr;
}
inline bool CSDTMail::has_extdata() const {
  return _internal_has_extdata();
}
inline void CSDTMail::clear_extdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.extdata_ != nullptr) {
    delete _impl_.extdata_;
  }
  _impl_.extdata_ = nullptr;
}
inline const ::msg::MailExtData& CSDTMail::_internal_extdata() const {
  const ::msg::MailExtData* p = _impl_.extdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::MailExtData&>(
      ::msg::_MailExtData_default_instance_);
}
inline const ::msg::MailExtData& CSDTMail::extdata() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.ExtData)
  return _internal_extdata();
}
inline void CSDTMail::unsafe_arena_set_allocated_extdata(
    ::msg::MailExtData* extdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extdata_);
  }
  _impl_.extdata_ = extdata;
  if (extdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTMail.ExtData)
}
inline ::msg::MailExtData* CSDTMail::release_extdata() {
  
  ::msg::MailExtData* temp = _impl_.extdata_;
  _impl_.extdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::MailExtData* CSDTMail::unsafe_arena_release_extdata() {
  // @@protoc_insertion_point(field_release:msg.CSDTMail.ExtData)
  
  ::msg::MailExtData* temp = _impl_.extdata_;
  _impl_.extdata_ = nullptr;
  return temp;
}
inline ::msg::MailExtData* CSDTMail::_internal_mutable_extdata() {
  
  if (_impl_.extdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::MailExtData>(GetArenaForAllocation());
    _impl_.extdata_ = p;
  }
  return _impl_.extdata_;
}
inline ::msg::MailExtData* CSDTMail::mutable_extdata() {
  ::msg::MailExtData* _msg = _internal_mutable_extdata();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMail.ExtData)
  return _msg;
}
inline void CSDTMail::set_allocated_extdata(::msg::MailExtData* extdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.extdata_;
  }
  if (extdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extdata);
    if (message_arena != submessage_arena) {
      extdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extdata_ = extdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMail.ExtData)
}

// int64 EndTime = 12;
inline void CSDTMail::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t CSDTMail::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t CSDTMail::endtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.EndTime)
  return _internal_endtime();
}
inline void CSDTMail::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void CSDTMail::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.EndTime)
}

// .msg.WEBOP WebOp = 30;
inline void CSDTMail::clear_webop() {
  _impl_.webop_ = 0;
}
inline ::msg::WEBOP CSDTMail::_internal_webop() const {
  return static_cast< ::msg::WEBOP >(_impl_.webop_);
}
inline ::msg::WEBOP CSDTMail::webop() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.WebOp)
  return _internal_webop();
}
inline void CSDTMail::_internal_set_webop(::msg::WEBOP value) {
  
  _impl_.webop_ = value;
}
inline void CSDTMail::set_webop(::msg::WEBOP value) {
  _internal_set_webop(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.WebOp)
}

// string WebOpenData = 31;
inline void CSDTMail::clear_webopendata() {
  _impl_.webopendata_.ClearToEmpty();
}
inline const std::string& CSDTMail::webopendata() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.WebOpenData)
  return _internal_webopendata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTMail::set_webopendata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.webopendata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTMail.WebOpenData)
}
inline std::string* CSDTMail::mutable_webopendata() {
  std::string* _s = _internal_mutable_webopendata();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMail.WebOpenData)
  return _s;
}
inline const std::string& CSDTMail::_internal_webopendata() const {
  return _impl_.webopendata_.Get();
}
inline void CSDTMail::_internal_set_webopendata(const std::string& value) {
  
  _impl_.webopendata_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTMail::_internal_mutable_webopendata() {
  
  return _impl_.webopendata_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTMail::release_webopendata() {
  // @@protoc_insertion_point(field_release:msg.CSDTMail.WebOpenData)
  return _impl_.webopendata_.Release();
}
inline void CSDTMail::set_allocated_webopendata(std::string* webopendata) {
  if (webopendata != nullptr) {
    
  } else {
    
  }
  _impl_.webopendata_.SetAllocated(webopendata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.webopendata_.IsDefault()) {
    _impl_.webopendata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMail.WebOpenData)
}

// int64 MustWaitTime = 32;
inline void CSDTMail::clear_mustwaittime() {
  _impl_.mustwaittime_ = int64_t{0};
}
inline int64_t CSDTMail::_internal_mustwaittime() const {
  return _impl_.mustwaittime_;
}
inline int64_t CSDTMail::mustwaittime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMail.MustWaitTime)
  return _internal_mustwaittime();
}
inline void CSDTMail::_internal_set_mustwaittime(int64_t value) {
  
  _impl_.mustwaittime_ = value;
}
inline void CSDTMail::set_mustwaittime(int64_t value) {
  _internal_set_mustwaittime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMail.MustWaitTime)
}

// -------------------------------------------------------------------

// CSDTNoticeInfo

// repeated .msg.CSDTNotice Data = 1;
inline int CSDTNoticeInfo::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CSDTNoticeInfo::data_size() const {
  return _internal_data_size();
}
inline void CSDTNoticeInfo::clear_data() {
  _impl_.data_.Clear();
}
inline ::msg::CSDTNotice* CSDTNoticeInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTNoticeInfo.Data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTNotice >*
CSDTNoticeInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNoticeInfo.Data)
  return &_impl_.data_;
}
inline const ::msg::CSDTNotice& CSDTNoticeInfo::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::msg::CSDTNotice& CSDTNoticeInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNoticeInfo.Data)
  return _internal_data(index);
}
inline ::msg::CSDTNotice* CSDTNoticeInfo::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::msg::CSDTNotice* CSDTNoticeInfo::add_data() {
  ::msg::CSDTNotice* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:msg.CSDTNoticeInfo.Data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTNotice >&
CSDTNoticeInfo::data() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNoticeInfo.Data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// CSDTNotice

// int64 Id = 1;
inline void CSDTNotice::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t CSDTNotice::_internal_id() const {
  return _impl_.id_;
}
inline int64_t CSDTNotice::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Id)
  return _internal_id();
}
inline void CSDTNotice::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTNotice::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Id)
}

// string Title = 2;
inline void CSDTNotice::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CSDTNotice::title() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Title)
}
inline std::string* CSDTNotice::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.Title)
  return _s;
}
inline const std::string& CSDTNotice::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CSDTNotice::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_title() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.Title)
  return _impl_.title_.Release();
}
inline void CSDTNotice::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.Title)
}

// string Content = 3;
inline void CSDTNotice::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSDTNotice::content() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Content)
}
inline std::string* CSDTNotice::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.Content)
  return _s;
}
inline const std::string& CSDTNotice::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSDTNotice::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.Content)
  return _impl_.content_.Release();
}
inline void CSDTNotice::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.Content)
}

// string Label = 4;
inline void CSDTNotice::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& CSDTNotice::label() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Label)
}
inline std::string* CSDTNotice::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.Label)
  return _s;
}
inline const std::string& CSDTNotice::_internal_label() const {
  return _impl_.label_.Get();
}
inline void CSDTNotice::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_label() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.Label)
  return _impl_.label_.Release();
}
inline void CSDTNotice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.Label)
}

// .msg.LABELTYPE LabelType = 5;
inline void CSDTNotice::clear_labeltype() {
  _impl_.labeltype_ = 0;
}
inline ::msg::LABELTYPE CSDTNotice::_internal_labeltype() const {
  return static_cast< ::msg::LABELTYPE >(_impl_.labeltype_);
}
inline ::msg::LABELTYPE CSDTNotice::labeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.LabelType)
  return _internal_labeltype();
}
inline void CSDTNotice::_internal_set_labeltype(::msg::LABELTYPE value) {
  
  _impl_.labeltype_ = value;
}
inline void CSDTNotice::set_labeltype(::msg::LABELTYPE value) {
  _internal_set_labeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.LabelType)
}

// int64 Ts = 6;
inline void CSDTNotice::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t CSDTNotice::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t CSDTNotice::ts() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Ts)
  return _internal_ts();
}
inline void CSDTNotice::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void CSDTNotice::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Ts)
}

// .msg.NOTICESHOWTYPE ShowType = 7;
inline void CSDTNotice::clear_showtype() {
  _impl_.showtype_ = 0;
}
inline ::msg::NOTICESHOWTYPE CSDTNotice::_internal_showtype() const {
  return static_cast< ::msg::NOTICESHOWTYPE >(_impl_.showtype_);
}
inline ::msg::NOTICESHOWTYPE CSDTNotice::showtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.ShowType)
  return _internal_showtype();
}
inline void CSDTNotice::_internal_set_showtype(::msg::NOTICESHOWTYPE value) {
  
  _impl_.showtype_ = value;
}
inline void CSDTNotice::set_showtype(::msg::NOTICESHOWTYPE value) {
  _internal_set_showtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.ShowType)
}

// .msg.NOTICECONTENTTYPE ContentType = 8;
inline void CSDTNotice::clear_contenttype() {
  _impl_.contenttype_ = 0;
}
inline ::msg::NOTICECONTENTTYPE CSDTNotice::_internal_contenttype() const {
  return static_cast< ::msg::NOTICECONTENTTYPE >(_impl_.contenttype_);
}
inline ::msg::NOTICECONTENTTYPE CSDTNotice::contenttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.ContentType)
  return _internal_contenttype();
}
inline void CSDTNotice::_internal_set_contenttype(::msg::NOTICECONTENTTYPE value) {
  
  _impl_.contenttype_ = value;
}
inline void CSDTNotice::set_contenttype(::msg::NOTICECONTENTTYPE value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.ContentType)
}

// string PicUrl = 9;
inline void CSDTNotice::clear_picurl() {
  _impl_.picurl_.ClearToEmpty();
}
inline const std::string& CSDTNotice::picurl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.PicUrl)
  return _internal_picurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_picurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.PicUrl)
}
inline std::string* CSDTNotice::mutable_picurl() {
  std::string* _s = _internal_mutable_picurl();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.PicUrl)
  return _s;
}
inline const std::string& CSDTNotice::_internal_picurl() const {
  return _impl_.picurl_.Get();
}
inline void CSDTNotice::_internal_set_picurl(const std::string& value) {
  
  _impl_.picurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_picurl() {
  
  return _impl_.picurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_picurl() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.PicUrl)
  return _impl_.picurl_.Release();
}
inline void CSDTNotice::set_allocated_picurl(std::string* picurl) {
  if (picurl != nullptr) {
    
  } else {
    
  }
  _impl_.picurl_.SetAllocated(picurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picurl_.IsDefault()) {
    _impl_.picurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.PicUrl)
}

// string SkipUrl = 10;
inline void CSDTNotice::clear_skipurl() {
  _impl_.skipurl_.ClearToEmpty();
}
inline const std::string& CSDTNotice::skipurl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.SkipUrl)
  return _internal_skipurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_skipurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skipurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.SkipUrl)
}
inline std::string* CSDTNotice::mutable_skipurl() {
  std::string* _s = _internal_mutable_skipurl();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.SkipUrl)
  return _s;
}
inline const std::string& CSDTNotice::_internal_skipurl() const {
  return _impl_.skipurl_.Get();
}
inline void CSDTNotice::_internal_set_skipurl(const std::string& value) {
  
  _impl_.skipurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_skipurl() {
  
  return _impl_.skipurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_skipurl() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.SkipUrl)
  return _impl_.skipurl_.Release();
}
inline void CSDTNotice::set_allocated_skipurl(std::string* skipurl) {
  if (skipurl != nullptr) {
    
  } else {
    
  }
  _impl_.skipurl_.SetAllocated(skipurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skipurl_.IsDefault()) {
    _impl_.skipurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.SkipUrl)
}

// uint32 Flag = 11;
inline void CSDTNotice::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t CSDTNotice::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t CSDTNotice::flag() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Flag)
  return _internal_flag();
}
inline void CSDTNotice::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void CSDTNotice::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Flag)
}

// int64 EndTime = 12;
inline void CSDTNotice::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t CSDTNotice::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t CSDTNotice::endtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.EndTime)
  return _internal_endtime();
}
inline void CSDTNotice::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void CSDTNotice::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.EndTime)
}

// .msg.NOTICETYPE NoticeType = 13;
inline void CSDTNotice::clear_noticetype() {
  _impl_.noticetype_ = 0;
}
inline ::msg::NOTICETYPE CSDTNotice::_internal_noticetype() const {
  return static_cast< ::msg::NOTICETYPE >(_impl_.noticetype_);
}
inline ::msg::NOTICETYPE CSDTNotice::noticetype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.NoticeType)
  return _internal_noticetype();
}
inline void CSDTNotice::_internal_set_noticetype(::msg::NOTICETYPE value) {
  
  _impl_.noticetype_ = value;
}
inline void CSDTNotice::set_noticetype(::msg::NOTICETYPE value) {
  _internal_set_noticetype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.NoticeType)
}

// repeated string CountryList = 14;
inline int CSDTNotice::_internal_countrylist_size() const {
  return _impl_.countrylist_.size();
}
inline int CSDTNotice::countrylist_size() const {
  return _internal_countrylist_size();
}
inline void CSDTNotice::clear_countrylist() {
  _impl_.countrylist_.Clear();
}
inline std::string* CSDTNotice::add_countrylist() {
  std::string* _s = _internal_add_countrylist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTNotice.CountryList)
  return _s;
}
inline const std::string& CSDTNotice::_internal_countrylist(int index) const {
  return _impl_.countrylist_.Get(index);
}
inline const std::string& CSDTNotice::countrylist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.CountryList)
  return _internal_countrylist(index);
}
inline std::string* CSDTNotice::mutable_countrylist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.CountryList)
  return _impl_.countrylist_.Mutable(index);
}
inline void CSDTNotice::set_countrylist(int index, const std::string& value) {
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.CountryList)
}
inline void CSDTNotice::set_countrylist(int index, std::string&& value) {
  _impl_.countrylist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.CountryList)
}
inline void CSDTNotice::set_countrylist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTNotice.CountryList)
}
inline void CSDTNotice::set_countrylist(int index, const char* value, size_t size) {
  _impl_.countrylist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTNotice.CountryList)
}
inline std::string* CSDTNotice::_internal_add_countrylist() {
  return _impl_.countrylist_.Add();
}
inline void CSDTNotice::add_countrylist(const std::string& value) {
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.CountryList)
}
inline void CSDTNotice::add_countrylist(std::string&& value) {
  _impl_.countrylist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.CountryList)
}
inline void CSDTNotice::add_countrylist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTNotice.CountryList)
}
inline void CSDTNotice::add_countrylist(const char* value, size_t size) {
  _impl_.countrylist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTNotice.CountryList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTNotice::countrylist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNotice.CountryList)
  return _impl_.countrylist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTNotice::mutable_countrylist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNotice.CountryList)
  return &_impl_.countrylist_;
}

// .msg.NOTICETAP Tap = 15;
inline void CSDTNotice::clear_tap() {
  _impl_.tap_ = 0;
}
inline ::msg::NOTICETAP CSDTNotice::_internal_tap() const {
  return static_cast< ::msg::NOTICETAP >(_impl_.tap_);
}
inline ::msg::NOTICETAP CSDTNotice::tap() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Tap)
  return _internal_tap();
}
inline void CSDTNotice::_internal_set_tap(::msg::NOTICETAP value) {
  
  _impl_.tap_ = value;
}
inline void CSDTNotice::set_tap(::msg::NOTICETAP value) {
  _internal_set_tap(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Tap)
}

// string SkipInterface = 16;
inline void CSDTNotice::clear_skipinterface() {
  _impl_.skipinterface_.ClearToEmpty();
}
inline const std::string& CSDTNotice::skipinterface() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.SkipInterface)
  return _internal_skipinterface();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_skipinterface(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skipinterface_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.SkipInterface)
}
inline std::string* CSDTNotice::mutable_skipinterface() {
  std::string* _s = _internal_mutable_skipinterface();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.SkipInterface)
  return _s;
}
inline const std::string& CSDTNotice::_internal_skipinterface() const {
  return _impl_.skipinterface_.Get();
}
inline void CSDTNotice::_internal_set_skipinterface(const std::string& value) {
  
  _impl_.skipinterface_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_skipinterface() {
  
  return _impl_.skipinterface_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_skipinterface() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.SkipInterface)
  return _impl_.skipinterface_.Release();
}
inline void CSDTNotice::set_allocated_skipinterface(std::string* skipinterface) {
  if (skipinterface != nullptr) {
    
  } else {
    
  }
  _impl_.skipinterface_.SetAllocated(skipinterface, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skipinterface_.IsDefault()) {
    _impl_.skipinterface_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.SkipInterface)
}

// uint32 SkipTab = 17;
inline void CSDTNotice::clear_skiptab() {
  _impl_.skiptab_ = 0u;
}
inline uint32_t CSDTNotice::_internal_skiptab() const {
  return _impl_.skiptab_;
}
inline uint32_t CSDTNotice::skiptab() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.SkipTab)
  return _internal_skiptab();
}
inline void CSDTNotice::_internal_set_skiptab(uint32_t value) {
  
  _impl_.skiptab_ = value;
}
inline void CSDTNotice::set_skiptab(uint32_t value) {
  _internal_set_skiptab(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.SkipTab)
}

// .msg.PICNOTICEJUMPTYPE PicJumpType = 18;
inline void CSDTNotice::clear_picjumptype() {
  _impl_.picjumptype_ = 0;
}
inline ::msg::PICNOTICEJUMPTYPE CSDTNotice::_internal_picjumptype() const {
  return static_cast< ::msg::PICNOTICEJUMPTYPE >(_impl_.picjumptype_);
}
inline ::msg::PICNOTICEJUMPTYPE CSDTNotice::picjumptype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.PicJumpType)
  return _internal_picjumptype();
}
inline void CSDTNotice::_internal_set_picjumptype(::msg::PICNOTICEJUMPTYPE value) {
  
  _impl_.picjumptype_ = value;
}
inline void CSDTNotice::set_picjumptype(::msg::PICNOTICEJUMPTYPE value) {
  _internal_set_picjumptype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.PicJumpType)
}

// repeated .msg.GMLanguageInfo WebContent = 19;
inline int CSDTNotice::_internal_webcontent_size() const {
  return _impl_.webcontent_.size();
}
inline int CSDTNotice::webcontent_size() const {
  return _internal_webcontent_size();
}
inline void CSDTNotice::clear_webcontent() {
  _impl_.webcontent_.Clear();
}
inline ::msg::GMLanguageInfo* CSDTNotice::mutable_webcontent(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.WebContent)
  return _impl_.webcontent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GMLanguageInfo >*
CSDTNotice::mutable_webcontent() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNotice.WebContent)
  return &_impl_.webcontent_;
}
inline const ::msg::GMLanguageInfo& CSDTNotice::_internal_webcontent(int index) const {
  return _impl_.webcontent_.Get(index);
}
inline const ::msg::GMLanguageInfo& CSDTNotice::webcontent(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.WebContent)
  return _internal_webcontent(index);
}
inline ::msg::GMLanguageInfo* CSDTNotice::_internal_add_webcontent() {
  return _impl_.webcontent_.Add();
}
inline ::msg::GMLanguageInfo* CSDTNotice::add_webcontent() {
  ::msg::GMLanguageInfo* _add = _internal_add_webcontent();
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.WebContent)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GMLanguageInfo >&
CSDTNotice::webcontent() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNotice.WebContent)
  return _impl_.webcontent_;
}

// repeated string DownloadList = 20;
inline int CSDTNotice::_internal_downloadlist_size() const {
  return _impl_.downloadlist_.size();
}
inline int CSDTNotice::downloadlist_size() const {
  return _internal_downloadlist_size();
}
inline void CSDTNotice::clear_downloadlist() {
  _impl_.downloadlist_.Clear();
}
inline std::string* CSDTNotice::add_downloadlist() {
  std::string* _s = _internal_add_downloadlist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTNotice.DownloadList)
  return _s;
}
inline const std::string& CSDTNotice::_internal_downloadlist(int index) const {
  return _impl_.downloadlist_.Get(index);
}
inline const std::string& CSDTNotice::downloadlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.DownloadList)
  return _internal_downloadlist(index);
}
inline std::string* CSDTNotice::mutable_downloadlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.DownloadList)
  return _impl_.downloadlist_.Mutable(index);
}
inline void CSDTNotice::set_downloadlist(int index, const std::string& value) {
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.DownloadList)
}
inline void CSDTNotice::set_downloadlist(int index, std::string&& value) {
  _impl_.downloadlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.DownloadList)
}
inline void CSDTNotice::set_downloadlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTNotice.DownloadList)
}
inline void CSDTNotice::set_downloadlist(int index, const char* value, size_t size) {
  _impl_.downloadlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTNotice.DownloadList)
}
inline std::string* CSDTNotice::_internal_add_downloadlist() {
  return _impl_.downloadlist_.Add();
}
inline void CSDTNotice::add_downloadlist(const std::string& value) {
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.DownloadList)
}
inline void CSDTNotice::add_downloadlist(std::string&& value) {
  _impl_.downloadlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.DownloadList)
}
inline void CSDTNotice::add_downloadlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTNotice.DownloadList)
}
inline void CSDTNotice::add_downloadlist(const char* value, size_t size) {
  _impl_.downloadlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTNotice.DownloadList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTNotice::downloadlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNotice.DownloadList)
  return _impl_.downloadlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTNotice::mutable_downloadlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNotice.DownloadList)
  return &_impl_.downloadlist_;
}

// repeated .msg.PLATFORMTYPE PlatformList = 21;
inline int CSDTNotice::_internal_platformlist_size() const {
  return _impl_.platformlist_.size();
}
inline int CSDTNotice::platformlist_size() const {
  return _internal_platformlist_size();
}
inline void CSDTNotice::clear_platformlist() {
  _impl_.platformlist_.Clear();
}
inline ::msg::PLATFORMTYPE CSDTNotice::_internal_platformlist(int index) const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformlist_.Get(index));
}
inline ::msg::PLATFORMTYPE CSDTNotice::platformlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.PlatformList)
  return _internal_platformlist(index);
}
inline void CSDTNotice::set_platformlist(int index, ::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.PlatformList)
}
inline void CSDTNotice::_internal_add_platformlist(::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Add(value);
}
inline void CSDTNotice::add_platformlist(::msg::PLATFORMTYPE value) {
  _internal_add_platformlist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.PlatformList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSDTNotice::platformlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNotice.PlatformList)
  return _impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTNotice::_internal_mutable_platformlist() {
  return &_impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTNotice::mutable_platformlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNotice.PlatformList)
  return _internal_mutable_platformlist();
}

// .msg.MAGNETISMTYPE MagnetismType = 22;
inline void CSDTNotice::clear_magnetismtype() {
  _impl_.magnetismtype_ = 0;
}
inline ::msg::MAGNETISMTYPE CSDTNotice::_internal_magnetismtype() const {
  return static_cast< ::msg::MAGNETISMTYPE >(_impl_.magnetismtype_);
}
inline ::msg::MAGNETISMTYPE CSDTNotice::magnetismtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.MagnetismType)
  return _internal_magnetismtype();
}
inline void CSDTNotice::_internal_set_magnetismtype(::msg::MAGNETISMTYPE value) {
  
  _impl_.magnetismtype_ = value;
}
inline void CSDTNotice::set_magnetismtype(::msg::MAGNETISMTYPE value) {
  _internal_set_magnetismtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.MagnetismType)
}

// string CoverPicUrl = 23;
inline void CSDTNotice::clear_coverpicurl() {
  _impl_.coverpicurl_.ClearToEmpty();
}
inline const std::string& CSDTNotice::coverpicurl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.CoverPicUrl)
  return _internal_coverpicurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_coverpicurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coverpicurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.CoverPicUrl)
}
inline std::string* CSDTNotice::mutable_coverpicurl() {
  std::string* _s = _internal_mutable_coverpicurl();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.CoverPicUrl)
  return _s;
}
inline const std::string& CSDTNotice::_internal_coverpicurl() const {
  return _impl_.coverpicurl_.Get();
}
inline void CSDTNotice::_internal_set_coverpicurl(const std::string& value) {
  
  _impl_.coverpicurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_coverpicurl() {
  
  return _impl_.coverpicurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_coverpicurl() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.CoverPicUrl)
  return _impl_.coverpicurl_.Release();
}
inline void CSDTNotice::set_allocated_coverpicurl(std::string* coverpicurl) {
  if (coverpicurl != nullptr) {
    
  } else {
    
  }
  _impl_.coverpicurl_.SetAllocated(coverpicurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coverpicurl_.IsDefault()) {
    _impl_.coverpicurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.CoverPicUrl)
}

// string Subtitle = 24;
inline void CSDTNotice::clear_subtitle() {
  _impl_.subtitle_.ClearToEmpty();
}
inline const std::string& CSDTNotice::subtitle() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Subtitle)
}
inline std::string* CSDTNotice::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.Subtitle)
  return _s;
}
inline const std::string& CSDTNotice::_internal_subtitle() const {
  return _impl_.subtitle_.Get();
}
inline void CSDTNotice::_internal_set_subtitle(const std::string& value) {
  
  _impl_.subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_subtitle() {
  
  return _impl_.subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_subtitle() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.Subtitle)
  return _impl_.subtitle_.Release();
}
inline void CSDTNotice::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_.IsDefault()) {
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.Subtitle)
}

// uint32 JumpGoodsId = 25;
inline void CSDTNotice::clear_jumpgoodsid() {
  _impl_.jumpgoodsid_ = 0u;
}
inline uint32_t CSDTNotice::_internal_jumpgoodsid() const {
  return _impl_.jumpgoodsid_;
}
inline uint32_t CSDTNotice::jumpgoodsid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.JumpGoodsId)
  return _internal_jumpgoodsid();
}
inline void CSDTNotice::_internal_set_jumpgoodsid(uint32_t value) {
  
  _impl_.jumpgoodsid_ = value;
}
inline void CSDTNotice::set_jumpgoodsid(uint32_t value) {
  _internal_set_jumpgoodsid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.JumpGoodsId)
}

// repeated string ApkVersionList = 26;
inline int CSDTNotice::_internal_apkversionlist_size() const {
  return _impl_.apkversionlist_.size();
}
inline int CSDTNotice::apkversionlist_size() const {
  return _internal_apkversionlist_size();
}
inline void CSDTNotice::clear_apkversionlist() {
  _impl_.apkversionlist_.Clear();
}
inline std::string* CSDTNotice::add_apkversionlist() {
  std::string* _s = _internal_add_apkversionlist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTNotice.ApkVersionList)
  return _s;
}
inline const std::string& CSDTNotice::_internal_apkversionlist(int index) const {
  return _impl_.apkversionlist_.Get(index);
}
inline const std::string& CSDTNotice::apkversionlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.ApkVersionList)
  return _internal_apkversionlist(index);
}
inline std::string* CSDTNotice::mutable_apkversionlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.ApkVersionList)
  return _impl_.apkversionlist_.Mutable(index);
}
inline void CSDTNotice::set_apkversionlist(int index, const std::string& value) {
  _impl_.apkversionlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.ApkVersionList)
}
inline void CSDTNotice::set_apkversionlist(int index, std::string&& value) {
  _impl_.apkversionlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.ApkVersionList)
}
inline void CSDTNotice::set_apkversionlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apkversionlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTNotice.ApkVersionList)
}
inline void CSDTNotice::set_apkversionlist(int index, const char* value, size_t size) {
  _impl_.apkversionlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTNotice.ApkVersionList)
}
inline std::string* CSDTNotice::_internal_add_apkversionlist() {
  return _impl_.apkversionlist_.Add();
}
inline void CSDTNotice::add_apkversionlist(const std::string& value) {
  _impl_.apkversionlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.ApkVersionList)
}
inline void CSDTNotice::add_apkversionlist(std::string&& value) {
  _impl_.apkversionlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.ApkVersionList)
}
inline void CSDTNotice::add_apkversionlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apkversionlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTNotice.ApkVersionList)
}
inline void CSDTNotice::add_apkversionlist(const char* value, size_t size) {
  _impl_.apkversionlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTNotice.ApkVersionList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTNotice::apkversionlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNotice.ApkVersionList)
  return _impl_.apkversionlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTNotice::mutable_apkversionlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNotice.ApkVersionList)
  return &_impl_.apkversionlist_;
}

// string PCSkipUrl = 27;
inline void CSDTNotice::clear_pcskipurl() {
  _impl_.pcskipurl_.ClearToEmpty();
}
inline const std::string& CSDTNotice::pcskipurl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.PCSkipUrl)
  return _internal_pcskipurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTNotice::set_pcskipurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pcskipurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.PCSkipUrl)
}
inline std::string* CSDTNotice::mutable_pcskipurl() {
  std::string* _s = _internal_mutable_pcskipurl();
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.PCSkipUrl)
  return _s;
}
inline const std::string& CSDTNotice::_internal_pcskipurl() const {
  return _impl_.pcskipurl_.Get();
}
inline void CSDTNotice::_internal_set_pcskipurl(const std::string& value) {
  
  _impl_.pcskipurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTNotice::_internal_mutable_pcskipurl() {
  
  return _impl_.pcskipurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTNotice::release_pcskipurl() {
  // @@protoc_insertion_point(field_release:msg.CSDTNotice.PCSkipUrl)
  return _impl_.pcskipurl_.Release();
}
inline void CSDTNotice::set_allocated_pcskipurl(std::string* pcskipurl) {
  if (pcskipurl != nullptr) {
    
  } else {
    
  }
  _impl_.pcskipurl_.SetAllocated(pcskipurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pcskipurl_.IsDefault()) {
    _impl_.pcskipurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTNotice.PCSkipUrl)
}

// int64 Sort = 28;
inline void CSDTNotice::clear_sort() {
  _impl_.sort_ = int64_t{0};
}
inline int64_t CSDTNotice::_internal_sort() const {
  return _impl_.sort_;
}
inline int64_t CSDTNotice::sort() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.Sort)
  return _internal_sort();
}
inline void CSDTNotice::_internal_set_sort(int64_t value) {
  
  _impl_.sort_ = value;
}
inline void CSDTNotice::set_sort(int64_t value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.Sort)
}

// bool NeedRedPoint = 29;
inline void CSDTNotice::clear_needredpoint() {
  _impl_.needredpoint_ = false;
}
inline bool CSDTNotice::_internal_needredpoint() const {
  return _impl_.needredpoint_;
}
inline bool CSDTNotice::needredpoint() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.NeedRedPoint)
  return _internal_needredpoint();
}
inline void CSDTNotice::_internal_set_needredpoint(bool value) {
  
  _impl_.needredpoint_ = value;
}
inline void CSDTNotice::set_needredpoint(bool value) {
  _internal_set_needredpoint(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.NeedRedPoint)
}

// repeated string ExcludeDownload = 30;
inline int CSDTNotice::_internal_excludedownload_size() const {
  return _impl_.excludedownload_.size();
}
inline int CSDTNotice::excludedownload_size() const {
  return _internal_excludedownload_size();
}
inline void CSDTNotice::clear_excludedownload() {
  _impl_.excludedownload_.Clear();
}
inline std::string* CSDTNotice::add_excludedownload() {
  std::string* _s = _internal_add_excludedownload();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTNotice.ExcludeDownload)
  return _s;
}
inline const std::string& CSDTNotice::_internal_excludedownload(int index) const {
  return _impl_.excludedownload_.Get(index);
}
inline const std::string& CSDTNotice::excludedownload(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.ExcludeDownload)
  return _internal_excludedownload(index);
}
inline std::string* CSDTNotice::mutable_excludedownload(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTNotice.ExcludeDownload)
  return _impl_.excludedownload_.Mutable(index);
}
inline void CSDTNotice::set_excludedownload(int index, const std::string& value) {
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.ExcludeDownload)
}
inline void CSDTNotice::set_excludedownload(int index, std::string&& value) {
  _impl_.excludedownload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.ExcludeDownload)
}
inline void CSDTNotice::set_excludedownload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTNotice.ExcludeDownload)
}
inline void CSDTNotice::set_excludedownload(int index, const char* value, size_t size) {
  _impl_.excludedownload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTNotice.ExcludeDownload)
}
inline std::string* CSDTNotice::_internal_add_excludedownload() {
  return _impl_.excludedownload_.Add();
}
inline void CSDTNotice::add_excludedownload(const std::string& value) {
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.ExcludeDownload)
}
inline void CSDTNotice::add_excludedownload(std::string&& value) {
  _impl_.excludedownload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTNotice.ExcludeDownload)
}
inline void CSDTNotice::add_excludedownload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTNotice.ExcludeDownload)
}
inline void CSDTNotice::add_excludedownload(const char* value, size_t size) {
  _impl_.excludedownload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTNotice.ExcludeDownload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTNotice::excludedownload() const {
  // @@protoc_insertion_point(field_list:msg.CSDTNotice.ExcludeDownload)
  return _impl_.excludedownload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTNotice::mutable_excludedownload() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTNotice.ExcludeDownload)
  return &_impl_.excludedownload_;
}

// int64 StartTime = 31;
inline void CSDTNotice::clear_starttime() {
  _impl_.starttime_ = int64_t{0};
}
inline int64_t CSDTNotice::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int64_t CSDTNotice::starttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNotice.StartTime)
  return _internal_starttime();
}
inline void CSDTNotice::_internal_set_starttime(int64_t value) {
  
  _impl_.starttime_ = value;
}
inline void CSDTNotice::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNotice.StartTime)
}

// -------------------------------------------------------------------

// CSDTAdsInfo

// repeated .msg.CSDTAds Data = 1;
inline int CSDTAdsInfo::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CSDTAdsInfo::data_size() const {
  return _internal_data_size();
}
inline void CSDTAdsInfo::clear_data() {
  _impl_.data_.Clear();
}
inline ::msg::CSDTAds* CSDTAdsInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTAdsInfo.Data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTAds >*
CSDTAdsInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTAdsInfo.Data)
  return &_impl_.data_;
}
inline const ::msg::CSDTAds& CSDTAdsInfo::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::msg::CSDTAds& CSDTAdsInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTAdsInfo.Data)
  return _internal_data(index);
}
inline ::msg::CSDTAds* CSDTAdsInfo::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::msg::CSDTAds* CSDTAdsInfo::add_data() {
  ::msg::CSDTAds* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:msg.CSDTAdsInfo.Data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTAds >&
CSDTAdsInfo::data() const {
  // @@protoc_insertion_point(field_list:msg.CSDTAdsInfo.Data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// CSDTAds

// int64 Id = 1;
inline void CSDTAds::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t CSDTAds::_internal_id() const {
  return _impl_.id_;
}
inline int64_t CSDTAds::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.Id)
  return _internal_id();
}
inline void CSDTAds::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTAds::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.Id)
}

// string Title = 2;
inline void CSDTAds::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CSDTAds::title() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTAds::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTAds.Title)
}
inline std::string* CSDTAds::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:msg.CSDTAds.Title)
  return _s;
}
inline const std::string& CSDTAds::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CSDTAds::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTAds::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTAds::release_title() {
  // @@protoc_insertion_point(field_release:msg.CSDTAds.Title)
  return _impl_.title_.Release();
}
inline void CSDTAds::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTAds.Title)
}

// string Name = 3;
inline void CSDTAds::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CSDTAds::name() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTAds::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTAds.Name)
}
inline std::string* CSDTAds::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.CSDTAds.Name)
  return _s;
}
inline const std::string& CSDTAds::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSDTAds::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTAds::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTAds::release_name() {
  // @@protoc_insertion_point(field_release:msg.CSDTAds.Name)
  return _impl_.name_.Release();
}
inline void CSDTAds::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTAds.Name)
}

// uint32 ShowLimit = 4;
inline void CSDTAds::clear_showlimit() {
  _impl_.showlimit_ = 0u;
}
inline uint32_t CSDTAds::_internal_showlimit() const {
  return _impl_.showlimit_;
}
inline uint32_t CSDTAds::showlimit() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.ShowLimit)
  return _internal_showlimit();
}
inline void CSDTAds::_internal_set_showlimit(uint32_t value) {
  
  _impl_.showlimit_ = value;
}
inline void CSDTAds::set_showlimit(uint32_t value) {
  _internal_set_showlimit(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.ShowLimit)
}

// int64 StartTime = 5;
inline void CSDTAds::clear_starttime() {
  _impl_.starttime_ = int64_t{0};
}
inline int64_t CSDTAds::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int64_t CSDTAds::starttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.StartTime)
  return _internal_starttime();
}
inline void CSDTAds::_internal_set_starttime(int64_t value) {
  
  _impl_.starttime_ = value;
}
inline void CSDTAds::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.StartTime)
}

// int64 EndTime = 6;
inline void CSDTAds::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t CSDTAds::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t CSDTAds::endtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.EndTime)
  return _internal_endtime();
}
inline void CSDTAds::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void CSDTAds::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.EndTime)
}

// uint32 ShowCount = 7;
inline void CSDTAds::clear_showcount() {
  _impl_.showcount_ = 0u;
}
inline uint32_t CSDTAds::_internal_showcount() const {
  return _impl_.showcount_;
}
inline uint32_t CSDTAds::showcount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.ShowCount)
  return _internal_showcount();
}
inline void CSDTAds::_internal_set_showcount(uint32_t value) {
  
  _impl_.showcount_ = value;
}
inline void CSDTAds::set_showcount(uint32_t value) {
  _internal_set_showcount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.ShowCount)
}

// .msg.ADSPAYTYPE IsPay = 8;
inline void CSDTAds::clear_ispay() {
  _impl_.ispay_ = 0;
}
inline ::msg::ADSPAYTYPE CSDTAds::_internal_ispay() const {
  return static_cast< ::msg::ADSPAYTYPE >(_impl_.ispay_);
}
inline ::msg::ADSPAYTYPE CSDTAds::ispay() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.IsPay)
  return _internal_ispay();
}
inline void CSDTAds::_internal_set_ispay(::msg::ADSPAYTYPE value) {
  
  _impl_.ispay_ = value;
}
inline void CSDTAds::set_ispay(::msg::ADSPAYTYPE value) {
  _internal_set_ispay(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.IsPay)
}

// repeated string CountryList = 9;
inline int CSDTAds::_internal_countrylist_size() const {
  return _impl_.countrylist_.size();
}
inline int CSDTAds::countrylist_size() const {
  return _internal_countrylist_size();
}
inline void CSDTAds::clear_countrylist() {
  _impl_.countrylist_.Clear();
}
inline std::string* CSDTAds::add_countrylist() {
  std::string* _s = _internal_add_countrylist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTAds.CountryList)
  return _s;
}
inline const std::string& CSDTAds::_internal_countrylist(int index) const {
  return _impl_.countrylist_.Get(index);
}
inline const std::string& CSDTAds::countrylist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.CountryList)
  return _internal_countrylist(index);
}
inline std::string* CSDTAds::mutable_countrylist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTAds.CountryList)
  return _impl_.countrylist_.Mutable(index);
}
inline void CSDTAds::set_countrylist(int index, const std::string& value) {
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.CountryList)
}
inline void CSDTAds::set_countrylist(int index, std::string&& value) {
  _impl_.countrylist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTAds.CountryList)
}
inline void CSDTAds::set_countrylist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTAds.CountryList)
}
inline void CSDTAds::set_countrylist(int index, const char* value, size_t size) {
  _impl_.countrylist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTAds.CountryList)
}
inline std::string* CSDTAds::_internal_add_countrylist() {
  return _impl_.countrylist_.Add();
}
inline void CSDTAds::add_countrylist(const std::string& value) {
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTAds.CountryList)
}
inline void CSDTAds::add_countrylist(std::string&& value) {
  _impl_.countrylist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTAds.CountryList)
}
inline void CSDTAds::add_countrylist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTAds.CountryList)
}
inline void CSDTAds::add_countrylist(const char* value, size_t size) {
  _impl_.countrylist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTAds.CountryList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTAds::countrylist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTAds.CountryList)
  return _impl_.countrylist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTAds::mutable_countrylist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTAds.CountryList)
  return &_impl_.countrylist_;
}

// repeated string WhiteList = 10;
inline int CSDTAds::_internal_whitelist_size() const {
  return _impl_.whitelist_.size();
}
inline int CSDTAds::whitelist_size() const {
  return _internal_whitelist_size();
}
inline void CSDTAds::clear_whitelist() {
  _impl_.whitelist_.Clear();
}
inline std::string* CSDTAds::add_whitelist() {
  std::string* _s = _internal_add_whitelist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTAds.WhiteList)
  return _s;
}
inline const std::string& CSDTAds::_internal_whitelist(int index) const {
  return _impl_.whitelist_.Get(index);
}
inline const std::string& CSDTAds::whitelist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.WhiteList)
  return _internal_whitelist(index);
}
inline std::string* CSDTAds::mutable_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTAds.WhiteList)
  return _impl_.whitelist_.Mutable(index);
}
inline void CSDTAds::set_whitelist(int index, const std::string& value) {
  _impl_.whitelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.WhiteList)
}
inline void CSDTAds::set_whitelist(int index, std::string&& value) {
  _impl_.whitelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTAds.WhiteList)
}
inline void CSDTAds::set_whitelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.whitelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTAds.WhiteList)
}
inline void CSDTAds::set_whitelist(int index, const char* value, size_t size) {
  _impl_.whitelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTAds.WhiteList)
}
inline std::string* CSDTAds::_internal_add_whitelist() {
  return _impl_.whitelist_.Add();
}
inline void CSDTAds::add_whitelist(const std::string& value) {
  _impl_.whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTAds.WhiteList)
}
inline void CSDTAds::add_whitelist(std::string&& value) {
  _impl_.whitelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTAds.WhiteList)
}
inline void CSDTAds::add_whitelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.whitelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTAds.WhiteList)
}
inline void CSDTAds::add_whitelist(const char* value, size_t size) {
  _impl_.whitelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTAds.WhiteList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTAds::whitelist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTAds.WhiteList)
  return _impl_.whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTAds::mutable_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTAds.WhiteList)
  return &_impl_.whitelist_;
}

// repeated string DownloadList = 11;
inline int CSDTAds::_internal_downloadlist_size() const {
  return _impl_.downloadlist_.size();
}
inline int CSDTAds::downloadlist_size() const {
  return _internal_downloadlist_size();
}
inline void CSDTAds::clear_downloadlist() {
  _impl_.downloadlist_.Clear();
}
inline std::string* CSDTAds::add_downloadlist() {
  std::string* _s = _internal_add_downloadlist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTAds.DownloadList)
  return _s;
}
inline const std::string& CSDTAds::_internal_downloadlist(int index) const {
  return _impl_.downloadlist_.Get(index);
}
inline const std::string& CSDTAds::downloadlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.DownloadList)
  return _internal_downloadlist(index);
}
inline std::string* CSDTAds::mutable_downloadlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTAds.DownloadList)
  return _impl_.downloadlist_.Mutable(index);
}
inline void CSDTAds::set_downloadlist(int index, const std::string& value) {
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.DownloadList)
}
inline void CSDTAds::set_downloadlist(int index, std::string&& value) {
  _impl_.downloadlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTAds.DownloadList)
}
inline void CSDTAds::set_downloadlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTAds.DownloadList)
}
inline void CSDTAds::set_downloadlist(int index, const char* value, size_t size) {
  _impl_.downloadlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTAds.DownloadList)
}
inline std::string* CSDTAds::_internal_add_downloadlist() {
  return _impl_.downloadlist_.Add();
}
inline void CSDTAds::add_downloadlist(const std::string& value) {
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTAds.DownloadList)
}
inline void CSDTAds::add_downloadlist(std::string&& value) {
  _impl_.downloadlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTAds.DownloadList)
}
inline void CSDTAds::add_downloadlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTAds.DownloadList)
}
inline void CSDTAds::add_downloadlist(const char* value, size_t size) {
  _impl_.downloadlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTAds.DownloadList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTAds::downloadlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTAds.DownloadList)
  return _impl_.downloadlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTAds::mutable_downloadlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTAds.DownloadList)
  return &_impl_.downloadlist_;
}

// repeated .msg.PLATFORMTYPE PlatformList = 12;
inline int CSDTAds::_internal_platformlist_size() const {
  return _impl_.platformlist_.size();
}
inline int CSDTAds::platformlist_size() const {
  return _internal_platformlist_size();
}
inline void CSDTAds::clear_platformlist() {
  _impl_.platformlist_.Clear();
}
inline ::msg::PLATFORMTYPE CSDTAds::_internal_platformlist(int index) const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformlist_.Get(index));
}
inline ::msg::PLATFORMTYPE CSDTAds::platformlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.PlatformList)
  return _internal_platformlist(index);
}
inline void CSDTAds::set_platformlist(int index, ::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.PlatformList)
}
inline void CSDTAds::_internal_add_platformlist(::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Add(value);
}
inline void CSDTAds::add_platformlist(::msg::PLATFORMTYPE value) {
  _internal_add_platformlist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTAds.PlatformList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSDTAds::platformlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTAds.PlatformList)
  return _impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTAds::_internal_mutable_platformlist() {
  return &_impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTAds::mutable_platformlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTAds.PlatformList)
  return _internal_mutable_platformlist();
}

// repeated string ExcludeDownload = 13;
inline int CSDTAds::_internal_excludedownload_size() const {
  return _impl_.excludedownload_.size();
}
inline int CSDTAds::excludedownload_size() const {
  return _internal_excludedownload_size();
}
inline void CSDTAds::clear_excludedownload() {
  _impl_.excludedownload_.Clear();
}
inline std::string* CSDTAds::add_excludedownload() {
  std::string* _s = _internal_add_excludedownload();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTAds.ExcludeDownload)
  return _s;
}
inline const std::string& CSDTAds::_internal_excludedownload(int index) const {
  return _impl_.excludedownload_.Get(index);
}
inline const std::string& CSDTAds::excludedownload(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTAds.ExcludeDownload)
  return _internal_excludedownload(index);
}
inline std::string* CSDTAds::mutable_excludedownload(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTAds.ExcludeDownload)
  return _impl_.excludedownload_.Mutable(index);
}
inline void CSDTAds::set_excludedownload(int index, const std::string& value) {
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAds.ExcludeDownload)
}
inline void CSDTAds::set_excludedownload(int index, std::string&& value) {
  _impl_.excludedownload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTAds.ExcludeDownload)
}
inline void CSDTAds::set_excludedownload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTAds.ExcludeDownload)
}
inline void CSDTAds::set_excludedownload(int index, const char* value, size_t size) {
  _impl_.excludedownload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTAds.ExcludeDownload)
}
inline std::string* CSDTAds::_internal_add_excludedownload() {
  return _impl_.excludedownload_.Add();
}
inline void CSDTAds::add_excludedownload(const std::string& value) {
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTAds.ExcludeDownload)
}
inline void CSDTAds::add_excludedownload(std::string&& value) {
  _impl_.excludedownload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTAds.ExcludeDownload)
}
inline void CSDTAds::add_excludedownload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTAds.ExcludeDownload)
}
inline void CSDTAds::add_excludedownload(const char* value, size_t size) {
  _impl_.excludedownload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTAds.ExcludeDownload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTAds::excludedownload() const {
  // @@protoc_insertion_point(field_list:msg.CSDTAds.ExcludeDownload)
  return _impl_.excludedownload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTAds::mutable_excludedownload() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTAds.ExcludeDownload)
  return &_impl_.excludedownload_;
}

// -------------------------------------------------------------------

// Contest

// uint32 ChessId = 1;
inline void Contest::clear_chessid() {
  _impl_.chessid_ = 0u;
}
inline uint32_t Contest::_internal_chessid() const {
  return _impl_.chessid_;
}
inline uint32_t Contest::chessid() const {
  // @@protoc_insertion_point(field_get:msg.Contest.ChessId)
  return _internal_chessid();
}
inline void Contest::_internal_set_chessid(uint32_t value) {
  
  _impl_.chessid_ = value;
}
inline void Contest::set_chessid(uint32_t value) {
  _internal_set_chessid(value);
  // @@protoc_insertion_point(field_set:msg.Contest.ChessId)
}

// uint32 X = 2;
inline void Contest::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t Contest::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t Contest::x() const {
  // @@protoc_insertion_point(field_get:msg.Contest.X)
  return _internal_x();
}
inline void Contest::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void Contest::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.Contest.X)
}

// uint32 Y = 3;
inline void Contest::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t Contest::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t Contest::y() const {
  // @@protoc_insertion_point(field_get:msg.Contest.Y)
  return _internal_y();
}
inline void Contest::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void Contest::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.Contest.Y)
}

// repeated uint32 Equip = 4;
inline int Contest::_internal_equip_size() const {
  return _impl_.equip_.size();
}
inline int Contest::equip_size() const {
  return _internal_equip_size();
}
inline void Contest::clear_equip() {
  _impl_.equip_.Clear();
}
inline uint32_t Contest::_internal_equip(int index) const {
  return _impl_.equip_.Get(index);
}
inline uint32_t Contest::equip(int index) const {
  // @@protoc_insertion_point(field_get:msg.Contest.Equip)
  return _internal_equip(index);
}
inline void Contest::set_equip(int index, uint32_t value) {
  _impl_.equip_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.Contest.Equip)
}
inline void Contest::_internal_add_equip(uint32_t value) {
  _impl_.equip_.Add(value);
}
inline void Contest::add_equip(uint32_t value) {
  _internal_add_equip(value);
  // @@protoc_insertion_point(field_add:msg.Contest.Equip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Contest::_internal_equip() const {
  return _impl_.equip_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Contest::equip() const {
  // @@protoc_insertion_point(field_list:msg.Contest.Equip)
  return _internal_equip();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Contest::_internal_mutable_equip() {
  return &_impl_.equip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Contest::mutable_equip() {
  // @@protoc_insertion_point(field_mutable_list:msg.Contest.Equip)
  return _internal_mutable_equip();
}

// uint32 ChessmanCardTag = 5;
inline void Contest::clear_chessmancardtag() {
  _impl_.chessmancardtag_ = 0u;
}
inline uint32_t Contest::_internal_chessmancardtag() const {
  return _impl_.chessmancardtag_;
}
inline uint32_t Contest::chessmancardtag() const {
  // @@protoc_insertion_point(field_get:msg.Contest.ChessmanCardTag)
  return _internal_chessmancardtag();
}
inline void Contest::_internal_set_chessmancardtag(uint32_t value) {
  
  _impl_.chessmancardtag_ = value;
}
inline void Contest::set_chessmancardtag(uint32_t value) {
  _internal_set_chessmancardtag(value);
  // @@protoc_insertion_point(field_set:msg.Contest.ChessmanCardTag)
}

// uint32 Race1 = 6;
inline void Contest::clear_race1() {
  _impl_.race1_ = 0u;
}
inline uint32_t Contest::_internal_race1() const {
  return _impl_.race1_;
}
inline uint32_t Contest::race1() const {
  // @@protoc_insertion_point(field_get:msg.Contest.Race1)
  return _internal_race1();
}
inline void Contest::_internal_set_race1(uint32_t value) {
  
  _impl_.race1_ = value;
}
inline void Contest::set_race1(uint32_t value) {
  _internal_set_race1(value);
  // @@protoc_insertion_point(field_set:msg.Contest.Race1)
}

// uint32 Race2 = 7;
inline void Contest::clear_race2() {
  _impl_.race2_ = 0u;
}
inline uint32_t Contest::_internal_race2() const {
  return _impl_.race2_;
}
inline uint32_t Contest::race2() const {
  // @@protoc_insertion_point(field_get:msg.Contest.Race2)
  return _internal_race2();
}
inline void Contest::_internal_set_race2(uint32_t value) {
  
  _impl_.race2_ = value;
}
inline void Contest::set_race2(uint32_t value) {
  _internal_set_race2(value);
  // @@protoc_insertion_point(field_set:msg.Contest.Race2)
}

// uint32 Pro1 = 8;
inline void Contest::clear_pro1() {
  _impl_.pro1_ = 0u;
}
inline uint32_t Contest::_internal_pro1() const {
  return _impl_.pro1_;
}
inline uint32_t Contest::pro1() const {
  // @@protoc_insertion_point(field_get:msg.Contest.Pro1)
  return _internal_pro1();
}
inline void Contest::_internal_set_pro1(uint32_t value) {
  
  _impl_.pro1_ = value;
}
inline void Contest::set_pro1(uint32_t value) {
  _internal_set_pro1(value);
  // @@protoc_insertion_point(field_set:msg.Contest.Pro1)
}

// uint32 Skill1 = 9;
inline void Contest::clear_skill1() {
  _impl_.skill1_ = 0u;
}
inline uint32_t Contest::_internal_skill1() const {
  return _impl_.skill1_;
}
inline uint32_t Contest::skill1() const {
  // @@protoc_insertion_point(field_get:msg.Contest.Skill1)
  return _internal_skill1();
}
inline void Contest::_internal_set_skill1(uint32_t value) {
  
  _impl_.skill1_ = value;
}
inline void Contest::set_skill1(uint32_t value) {
  _internal_set_skill1(value);
  // @@protoc_insertion_point(field_set:msg.Contest.Skill1)
}

// uint32 Skill2 = 10;
inline void Contest::clear_skill2() {
  _impl_.skill2_ = 0u;
}
inline uint32_t Contest::_internal_skill2() const {
  return _impl_.skill2_;
}
inline uint32_t Contest::skill2() const {
  // @@protoc_insertion_point(field_get:msg.Contest.Skill2)
  return _internal_skill2();
}
inline void Contest::_internal_set_skill2(uint32_t value) {
  
  _impl_.skill2_ = value;
}
inline void Contest::set_skill2(uint32_t value) {
  _internal_set_skill2(value);
  // @@protoc_insertion_point(field_set:msg.Contest.Skill2)
}

// -------------------------------------------------------------------

// Effect

// uint32 Type = 1;
inline void Effect::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Effect::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Effect::type() const {
  // @@protoc_insertion_point(field_get:msg.Effect.Type)
  return _internal_type();
}
inline void Effect::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Effect::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Effect.Type)
}

// uint32 CurLevel = 2;
inline void Effect::clear_curlevel() {
  _impl_.curlevel_ = 0u;
}
inline uint32_t Effect::_internal_curlevel() const {
  return _impl_.curlevel_;
}
inline uint32_t Effect::curlevel() const {
  // @@protoc_insertion_point(field_get:msg.Effect.CurLevel)
  return _internal_curlevel();
}
inline void Effect::_internal_set_curlevel(uint32_t value) {
  
  _impl_.curlevel_ = value;
}
inline void Effect::set_curlevel(uint32_t value) {
  _internal_set_curlevel(value);
  // @@protoc_insertion_point(field_set:msg.Effect.CurLevel)
}

// uint32 MaxLevel = 3;
inline void Effect::clear_maxlevel() {
  _impl_.maxlevel_ = 0u;
}
inline uint32_t Effect::_internal_maxlevel() const {
  return _impl_.maxlevel_;
}
inline uint32_t Effect::maxlevel() const {
  // @@protoc_insertion_point(field_get:msg.Effect.MaxLevel)
  return _internal_maxlevel();
}
inline void Effect::_internal_set_maxlevel(uint32_t value) {
  
  _impl_.maxlevel_ = value;
}
inline void Effect::set_maxlevel(uint32_t value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:msg.Effect.MaxLevel)
}

// -------------------------------------------------------------------

// ChessDamageStat

// uint32 ChessId = 1;
inline void ChessDamageStat::clear_chessid() {
  _impl_.chessid_ = 0u;
}
inline uint32_t ChessDamageStat::_internal_chessid() const {
  return _impl_.chessid_;
}
inline uint32_t ChessDamageStat::chessid() const {
  // @@protoc_insertion_point(field_get:msg.ChessDamageStat.ChessId)
  return _internal_chessid();
}
inline void ChessDamageStat::_internal_set_chessid(uint32_t value) {
  
  _impl_.chessid_ = value;
}
inline void ChessDamageStat::set_chessid(uint32_t value) {
  _internal_set_chessid(value);
  // @@protoc_insertion_point(field_set:msg.ChessDamageStat.ChessId)
}

// uint32 TotalDamage = 2;
inline void ChessDamageStat::clear_totaldamage() {
  _impl_.totaldamage_ = 0u;
}
inline uint32_t ChessDamageStat::_internal_totaldamage() const {
  return _impl_.totaldamage_;
}
inline uint32_t ChessDamageStat::totaldamage() const {
  // @@protoc_insertion_point(field_get:msg.ChessDamageStat.TotalDamage)
  return _internal_totaldamage();
}
inline void ChessDamageStat::_internal_set_totaldamage(uint32_t value) {
  
  _impl_.totaldamage_ = value;
}
inline void ChessDamageStat::set_totaldamage(uint32_t value) {
  _internal_set_totaldamage(value);
  // @@protoc_insertion_point(field_set:msg.ChessDamageStat.TotalDamage)
}

// uint32 TotalSuffer = 3;
inline void ChessDamageStat::clear_totalsuffer() {
  _impl_.totalsuffer_ = 0u;
}
inline uint32_t ChessDamageStat::_internal_totalsuffer() const {
  return _impl_.totalsuffer_;
}
inline uint32_t ChessDamageStat::totalsuffer() const {
  // @@protoc_insertion_point(field_get:msg.ChessDamageStat.TotalSuffer)
  return _internal_totalsuffer();
}
inline void ChessDamageStat::_internal_set_totalsuffer(uint32_t value) {
  
  _impl_.totalsuffer_ = value;
}
inline void ChessDamageStat::set_totalsuffer(uint32_t value) {
  _internal_set_totalsuffer(value);
  // @@protoc_insertion_point(field_set:msg.ChessDamageStat.TotalSuffer)
}

// uint32 PhysicalDamage = 4;
inline void ChessDamageStat::clear_physicaldamage() {
  _impl_.physicaldamage_ = 0u;
}
inline uint32_t ChessDamageStat::_internal_physicaldamage() const {
  return _impl_.physicaldamage_;
}
inline uint32_t ChessDamageStat::physicaldamage() const {
  // @@protoc_insertion_point(field_get:msg.ChessDamageStat.PhysicalDamage)
  return _internal_physicaldamage();
}
inline void ChessDamageStat::_internal_set_physicaldamage(uint32_t value) {
  
  _impl_.physicaldamage_ = value;
}
inline void ChessDamageStat::set_physicaldamage(uint32_t value) {
  _internal_set_physicaldamage(value);
  // @@protoc_insertion_point(field_set:msg.ChessDamageStat.PhysicalDamage)
}

// uint32 MagicalDamage = 5;
inline void ChessDamageStat::clear_magicaldamage() {
  _impl_.magicaldamage_ = 0u;
}
inline uint32_t ChessDamageStat::_internal_magicaldamage() const {
  return _impl_.magicaldamage_;
}
inline uint32_t ChessDamageStat::magicaldamage() const {
  // @@protoc_insertion_point(field_get:msg.ChessDamageStat.MagicalDamage)
  return _internal_magicaldamage();
}
inline void ChessDamageStat::_internal_set_magicaldamage(uint32_t value) {
  
  _impl_.magicaldamage_ = value;
}
inline void ChessDamageStat::set_magicaldamage(uint32_t value) {
  _internal_set_magicaldamage(value);
  // @@protoc_insertion_point(field_set:msg.ChessDamageStat.MagicalDamage)
}

// -------------------------------------------------------------------

// SelectEquip

// uint32 RoundId = 1;
inline void SelectEquip::clear_roundid() {
  _impl_.roundid_ = 0u;
}
inline uint32_t SelectEquip::_internal_roundid() const {
  return _impl_.roundid_;
}
inline uint32_t SelectEquip::roundid() const {
  // @@protoc_insertion_point(field_get:msg.SelectEquip.RoundId)
  return _internal_roundid();
}
inline void SelectEquip::_internal_set_roundid(uint32_t value) {
  
  _impl_.roundid_ = value;
}
inline void SelectEquip::set_roundid(uint32_t value) {
  _internal_set_roundid(value);
  // @@protoc_insertion_point(field_set:msg.SelectEquip.RoundId)
}

// uint32 EquipId = 2;
inline void SelectEquip::clear_equipid() {
  _impl_.equipid_ = 0u;
}
inline uint32_t SelectEquip::_internal_equipid() const {
  return _impl_.equipid_;
}
inline uint32_t SelectEquip::equipid() const {
  // @@protoc_insertion_point(field_get:msg.SelectEquip.EquipId)
  return _internal_equipid();
}
inline void SelectEquip::_internal_set_equipid(uint32_t value) {
  
  _impl_.equipid_ = value;
}
inline void SelectEquip::set_equipid(uint32_t value) {
  _internal_set_equipid(value);
  // @@protoc_insertion_point(field_set:msg.SelectEquip.EquipId)
}

// -------------------------------------------------------------------

// Equip

// uint32 Id = 1;
inline void Equip::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Equip::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Equip::id() const {
  // @@protoc_insertion_point(field_get:msg.Equip.Id)
  return _internal_id();
}
inline void Equip::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Equip::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.Equip.Id)
}

// uint32 Count = 2;
inline void Equip::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t Equip::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t Equip::count() const {
  // @@protoc_insertion_point(field_get:msg.Equip.Count)
  return _internal_count();
}
inline void Equip::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void Equip::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.Equip.Count)
}

// uint32 Quality = 3;
inline void Equip::clear_quality() {
  _impl_.quality_ = 0u;
}
inline uint32_t Equip::_internal_quality() const {
  return _impl_.quality_;
}
inline uint32_t Equip::quality() const {
  // @@protoc_insertion_point(field_get:msg.Equip.Quality)
  return _internal_quality();
}
inline void Equip::_internal_set_quality(uint32_t value) {
  
  _impl_.quality_ = value;
}
inline void Equip::set_quality(uint32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:msg.Equip.Quality)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTRoundItem

// uint32 Round = 1;
inline void CSDTRoundItem::clear_round() {
  _impl_.round_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_round() const {
  return _impl_.round_;
}
inline uint32_t CSDTRoundItem::round() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.Round)
  return _internal_round();
}
inline void CSDTRoundItem::_internal_set_round(uint32_t value) {
  
  _impl_.round_ = value;
}
inline void CSDTRoundItem::set_round(uint32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.Round)
}

// uint32 OldHp = 2;
inline void CSDTRoundItem::clear_oldhp() {
  _impl_.oldhp_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_oldhp() const {
  return _impl_.oldhp_;
}
inline uint32_t CSDTRoundItem::oldhp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.OldHp)
  return _internal_oldhp();
}
inline void CSDTRoundItem::_internal_set_oldhp(uint32_t value) {
  
  _impl_.oldhp_ = value;
}
inline void CSDTRoundItem::set_oldhp(uint32_t value) {
  _internal_set_oldhp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.OldHp)
}

// uint32 Hp = 3;
inline void CSDTRoundItem::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t CSDTRoundItem::hp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.Hp)
  return _internal_hp();
}
inline void CSDTRoundItem::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void CSDTRoundItem::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.Hp)
}

// uint32 OldRank = 4;
inline void CSDTRoundItem::clear_oldrank() {
  _impl_.oldrank_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_oldrank() const {
  return _impl_.oldrank_;
}
inline uint32_t CSDTRoundItem::oldrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.OldRank)
  return _internal_oldrank();
}
inline void CSDTRoundItem::_internal_set_oldrank(uint32_t value) {
  
  _impl_.oldrank_ = value;
}
inline void CSDTRoundItem::set_oldrank(uint32_t value) {
  _internal_set_oldrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.OldRank)
}

// uint32 Rank = 5;
inline void CSDTRoundItem::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CSDTRoundItem::rank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.Rank)
  return _internal_rank();
}
inline void CSDTRoundItem::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void CSDTRoundItem::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.Rank)
}

// string TargetPlayerId = 6;
inline void CSDTRoundItem::clear_targetplayerid() {
  _impl_.targetplayerid_.ClearToEmpty();
}
inline const std::string& CSDTRoundItem::targetplayerid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.TargetPlayerId)
  return _internal_targetplayerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRoundItem::set_targetplayerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetplayerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.TargetPlayerId)
}
inline std::string* CSDTRoundItem::mutable_targetplayerid() {
  std::string* _s = _internal_mutable_targetplayerid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.TargetPlayerId)
  return _s;
}
inline const std::string& CSDTRoundItem::_internal_targetplayerid() const {
  return _impl_.targetplayerid_.Get();
}
inline void CSDTRoundItem::_internal_set_targetplayerid(const std::string& value) {
  
  _impl_.targetplayerid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRoundItem::_internal_mutable_targetplayerid() {
  
  return _impl_.targetplayerid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRoundItem::release_targetplayerid() {
  // @@protoc_insertion_point(field_release:msg.CSDTRoundItem.TargetPlayerId)
  return _impl_.targetplayerid_.Release();
}
inline void CSDTRoundItem::set_allocated_targetplayerid(std::string* targetplayerid) {
  if (targetplayerid != nullptr) {
    
  } else {
    
  }
  _impl_.targetplayerid_.SetAllocated(targetplayerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetplayerid_.IsDefault()) {
    _impl_.targetplayerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRoundItem.TargetPlayerId)
}

// .msg.WINTYPE WinType = 7;
inline void CSDTRoundItem::clear_wintype() {
  _impl_.wintype_ = 0;
}
inline ::msg::WINTYPE CSDTRoundItem::_internal_wintype() const {
  return static_cast< ::msg::WINTYPE >(_impl_.wintype_);
}
inline ::msg::WINTYPE CSDTRoundItem::wintype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.WinType)
  return _internal_wintype();
}
inline void CSDTRoundItem::_internal_set_wintype(::msg::WINTYPE value) {
  
  _impl_.wintype_ = value;
}
inline void CSDTRoundItem::set_wintype(::msg::WINTYPE value) {
  _internal_set_wintype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.WinType)
}

// map<uint32, uint32> EnemyLeftChess = 8;
inline int CSDTRoundItem::_internal_enemyleftchess_size() const {
  return _impl_.enemyleftchess_.size();
}
inline int CSDTRoundItem::enemyleftchess_size() const {
  return _internal_enemyleftchess_size();
}
inline void CSDTRoundItem::clear_enemyleftchess() {
  _impl_.enemyleftchess_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_enemyleftchess() const {
  return _impl_.enemyleftchess_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::enemyleftchess() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.EnemyLeftChess)
  return _internal_enemyleftchess();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_enemyleftchess() {
  return _impl_.enemyleftchess_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_enemyleftchess() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.EnemyLeftChess)
  return _internal_mutable_enemyleftchess();
}

// map<uint32, uint32> SelfLeftChess = 9;
inline int CSDTRoundItem::_internal_selfleftchess_size() const {
  return _impl_.selfleftchess_.size();
}
inline int CSDTRoundItem::selfleftchess_size() const {
  return _internal_selfleftchess_size();
}
inline void CSDTRoundItem::clear_selfleftchess() {
  _impl_.selfleftchess_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_selfleftchess() const {
  return _impl_.selfleftchess_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::selfleftchess() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.SelfLeftChess)
  return _internal_selfleftchess();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_selfleftchess() {
  return _impl_.selfleftchess_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_selfleftchess() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.SelfLeftChess)
  return _internal_mutable_selfleftchess();
}

// uint32 Time = 10;
inline void CSDTRoundItem::clear_time() {
  _impl_.time_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t CSDTRoundItem::time() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.Time)
  return _internal_time();
}
inline void CSDTRoundItem::_internal_set_time(uint32_t value) {
  
  _impl_.time_ = value;
}
inline void CSDTRoundItem::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.Time)
}

// map<uint32, uint32> DropEquip = 11;
inline int CSDTRoundItem::_internal_dropequip_size() const {
  return _impl_.dropequip_.size();
}
inline int CSDTRoundItem::dropequip_size() const {
  return _internal_dropequip_size();
}
inline void CSDTRoundItem::clear_dropequip() {
  _impl_.dropequip_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_dropequip() const {
  return _impl_.dropequip_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::dropequip() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.DropEquip)
  return _internal_dropequip();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_dropequip() {
  return _impl_.dropequip_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_dropequip() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.DropEquip)
  return _internal_mutable_dropequip();
}

// repeated .msg.Contest SelfContest = 12;
inline int CSDTRoundItem::_internal_selfcontest_size() const {
  return _impl_.selfcontest_.size();
}
inline int CSDTRoundItem::selfcontest_size() const {
  return _internal_selfcontest_size();
}
inline void CSDTRoundItem::clear_selfcontest() {
  _impl_.selfcontest_.Clear();
}
inline ::msg::Contest* CSDTRoundItem::mutable_selfcontest(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.SelfContest)
  return _impl_.selfcontest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTRoundItem::mutable_selfcontest() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.SelfContest)
  return &_impl_.selfcontest_;
}
inline const ::msg::Contest& CSDTRoundItem::_internal_selfcontest(int index) const {
  return _impl_.selfcontest_.Get(index);
}
inline const ::msg::Contest& CSDTRoundItem::selfcontest(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.SelfContest)
  return _internal_selfcontest(index);
}
inline ::msg::Contest* CSDTRoundItem::_internal_add_selfcontest() {
  return _impl_.selfcontest_.Add();
}
inline ::msg::Contest* CSDTRoundItem::add_selfcontest() {
  ::msg::Contest* _add = _internal_add_selfcontest();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.SelfContest)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTRoundItem::selfcontest() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.SelfContest)
  return _impl_.selfcontest_;
}

// repeated .msg.Contest TargetContest = 13;
inline int CSDTRoundItem::_internal_targetcontest_size() const {
  return _impl_.targetcontest_.size();
}
inline int CSDTRoundItem::targetcontest_size() const {
  return _internal_targetcontest_size();
}
inline void CSDTRoundItem::clear_targetcontest() {
  _impl_.targetcontest_.Clear();
}
inline ::msg::Contest* CSDTRoundItem::mutable_targetcontest(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.TargetContest)
  return _impl_.targetcontest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTRoundItem::mutable_targetcontest() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.TargetContest)
  return &_impl_.targetcontest_;
}
inline const ::msg::Contest& CSDTRoundItem::_internal_targetcontest(int index) const {
  return _impl_.targetcontest_.Get(index);
}
inline const ::msg::Contest& CSDTRoundItem::targetcontest(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.TargetContest)
  return _internal_targetcontest(index);
}
inline ::msg::Contest* CSDTRoundItem::_internal_add_targetcontest() {
  return _impl_.targetcontest_.Add();
}
inline ::msg::Contest* CSDTRoundItem::add_targetcontest() {
  ::msg::Contest* _add = _internal_add_targetcontest();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.TargetContest)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTRoundItem::targetcontest() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.TargetContest)
  return _impl_.targetcontest_;
}

// map<uint32, uint32> SelfBattleChess = 14;
inline int CSDTRoundItem::_internal_selfbattlechess_size() const {
  return _impl_.selfbattlechess_.size();
}
inline int CSDTRoundItem::selfbattlechess_size() const {
  return _internal_selfbattlechess_size();
}
inline void CSDTRoundItem::clear_selfbattlechess() {
  _impl_.selfbattlechess_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_selfbattlechess() const {
  return _impl_.selfbattlechess_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::selfbattlechess() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.SelfBattleChess)
  return _internal_selfbattlechess();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_selfbattlechess() {
  return _impl_.selfbattlechess_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_selfbattlechess() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.SelfBattleChess)
  return _internal_mutable_selfbattlechess();
}

// map<uint32, uint32> EnemyBattleChess = 15;
inline int CSDTRoundItem::_internal_enemybattlechess_size() const {
  return _impl_.enemybattlechess_.size();
}
inline int CSDTRoundItem::enemybattlechess_size() const {
  return _internal_enemybattlechess_size();
}
inline void CSDTRoundItem::clear_enemybattlechess() {
  _impl_.enemybattlechess_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_enemybattlechess() const {
  return _impl_.enemybattlechess_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::enemybattlechess() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.EnemyBattleChess)
  return _internal_enemybattlechess();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_enemybattlechess() {
  return _impl_.enemybattlechess_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_enemybattlechess() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.EnemyBattleChess)
  return _internal_mutable_enemybattlechess();
}

// repeated .msg.Contest RoundStartContest = 16;
inline int CSDTRoundItem::_internal_roundstartcontest_size() const {
  return _impl_.roundstartcontest_.size();
}
inline int CSDTRoundItem::roundstartcontest_size() const {
  return _internal_roundstartcontest_size();
}
inline void CSDTRoundItem::clear_roundstartcontest() {
  _impl_.roundstartcontest_.Clear();
}
inline ::msg::Contest* CSDTRoundItem::mutable_roundstartcontest(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.RoundStartContest)
  return _impl_.roundstartcontest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTRoundItem::mutable_roundstartcontest() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.RoundStartContest)
  return &_impl_.roundstartcontest_;
}
inline const ::msg::Contest& CSDTRoundItem::_internal_roundstartcontest(int index) const {
  return _impl_.roundstartcontest_.Get(index);
}
inline const ::msg::Contest& CSDTRoundItem::roundstartcontest(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.RoundStartContest)
  return _internal_roundstartcontest(index);
}
inline ::msg::Contest* CSDTRoundItem::_internal_add_roundstartcontest() {
  return _impl_.roundstartcontest_.Add();
}
inline ::msg::Contest* CSDTRoundItem::add_roundstartcontest() {
  ::msg::Contest* _add = _internal_add_roundstartcontest();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.RoundStartContest)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTRoundItem::roundstartcontest() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.RoundStartContest)
  return _impl_.roundstartcontest_;
}

// repeated .msg.Contest BattleStartContest = 17;
inline int CSDTRoundItem::_internal_battlestartcontest_size() const {
  return _impl_.battlestartcontest_.size();
}
inline int CSDTRoundItem::battlestartcontest_size() const {
  return _internal_battlestartcontest_size();
}
inline void CSDTRoundItem::clear_battlestartcontest() {
  _impl_.battlestartcontest_.Clear();
}
inline ::msg::Contest* CSDTRoundItem::mutable_battlestartcontest(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.BattleStartContest)
  return _impl_.battlestartcontest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTRoundItem::mutable_battlestartcontest() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.BattleStartContest)
  return &_impl_.battlestartcontest_;
}
inline const ::msg::Contest& CSDTRoundItem::_internal_battlestartcontest(int index) const {
  return _impl_.battlestartcontest_.Get(index);
}
inline const ::msg::Contest& CSDTRoundItem::battlestartcontest(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.BattleStartContest)
  return _internal_battlestartcontest(index);
}
inline ::msg::Contest* CSDTRoundItem::_internal_add_battlestartcontest() {
  return _impl_.battlestartcontest_.Add();
}
inline ::msg::Contest* CSDTRoundItem::add_battlestartcontest() {
  ::msg::Contest* _add = _internal_add_battlestartcontest();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.BattleStartContest)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTRoundItem::battlestartcontest() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.BattleStartContest)
  return _impl_.battlestartcontest_;
}

// uint32 ChessShopFreshCount = 18;
inline void CSDTRoundItem::clear_chessshopfreshcount() {
  _impl_.chessshopfreshcount_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_chessshopfreshcount() const {
  return _impl_.chessshopfreshcount_;
}
inline uint32_t CSDTRoundItem::chessshopfreshcount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.ChessShopFreshCount)
  return _internal_chessshopfreshcount();
}
inline void CSDTRoundItem::_internal_set_chessshopfreshcount(uint32_t value) {
  
  _impl_.chessshopfreshcount_ = value;
}
inline void CSDTRoundItem::set_chessshopfreshcount(uint32_t value) {
  _internal_set_chessshopfreshcount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.ChessShopFreshCount)
}

// repeated uint32 ChessShopFreshList = 19;
inline int CSDTRoundItem::_internal_chessshopfreshlist_size() const {
  return _impl_.chessshopfreshlist_.size();
}
inline int CSDTRoundItem::chessshopfreshlist_size() const {
  return _internal_chessshopfreshlist_size();
}
inline void CSDTRoundItem::clear_chessshopfreshlist() {
  _impl_.chessshopfreshlist_.Clear();
}
inline uint32_t CSDTRoundItem::_internal_chessshopfreshlist(int index) const {
  return _impl_.chessshopfreshlist_.Get(index);
}
inline uint32_t CSDTRoundItem::chessshopfreshlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.ChessShopFreshList)
  return _internal_chessshopfreshlist(index);
}
inline void CSDTRoundItem::set_chessshopfreshlist(int index, uint32_t value) {
  _impl_.chessshopfreshlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.ChessShopFreshList)
}
inline void CSDTRoundItem::_internal_add_chessshopfreshlist(uint32_t value) {
  _impl_.chessshopfreshlist_.Add(value);
}
inline void CSDTRoundItem::add_chessshopfreshlist(uint32_t value) {
  _internal_add_chessshopfreshlist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.ChessShopFreshList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoundItem::_internal_chessshopfreshlist() const {
  return _impl_.chessshopfreshlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoundItem::chessshopfreshlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.ChessShopFreshList)
  return _internal_chessshopfreshlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoundItem::_internal_mutable_chessshopfreshlist() {
  return &_impl_.chessshopfreshlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoundItem::mutable_chessshopfreshlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.ChessShopFreshList)
  return _internal_mutable_chessshopfreshlist();
}

// map<uint32, uint32> BuyChessList = 20;
inline int CSDTRoundItem::_internal_buychesslist_size() const {
  return _impl_.buychesslist_.size();
}
inline int CSDTRoundItem::buychesslist_size() const {
  return _internal_buychesslist_size();
}
inline void CSDTRoundItem::clear_buychesslist() {
  _impl_.buychesslist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_buychesslist() const {
  return _impl_.buychesslist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::buychesslist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.BuyChessList)
  return _internal_buychesslist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_buychesslist() {
  return _impl_.buychesslist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_buychesslist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.BuyChessList)
  return _internal_mutable_buychesslist();
}

// map<uint32, uint32> EquipComposeList = 21;
inline int CSDTRoundItem::_internal_equipcomposelist_size() const {
  return _impl_.equipcomposelist_.size();
}
inline int CSDTRoundItem::equipcomposelist_size() const {
  return _internal_equipcomposelist_size();
}
inline void CSDTRoundItem::clear_equipcomposelist() {
  _impl_.equipcomposelist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_equipcomposelist() const {
  return _impl_.equipcomposelist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::equipcomposelist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.EquipComposeList)
  return _internal_equipcomposelist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_equipcomposelist() {
  return _impl_.equipcomposelist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_equipcomposelist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.EquipComposeList)
  return _internal_mutable_equipcomposelist();
}

// map<uint32, uint32> UpgradeStarChessList = 22;
inline int CSDTRoundItem::_internal_upgradestarchesslist_size() const {
  return _impl_.upgradestarchesslist_.size();
}
inline int CSDTRoundItem::upgradestarchesslist_size() const {
  return _internal_upgradestarchesslist_size();
}
inline void CSDTRoundItem::clear_upgradestarchesslist() {
  _impl_.upgradestarchesslist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_upgradestarchesslist() const {
  return _impl_.upgradestarchesslist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::upgradestarchesslist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.UpgradeStarChessList)
  return _internal_upgradestarchesslist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_upgradestarchesslist() {
  return _impl_.upgradestarchesslist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_upgradestarchesslist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.UpgradeStarChessList)
  return _internal_mutable_upgradestarchesslist();
}

// uint32 RoundStartMoney = 23;
inline void CSDTRoundItem::clear_roundstartmoney() {
  _impl_.roundstartmoney_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_roundstartmoney() const {
  return _impl_.roundstartmoney_;
}
inline uint32_t CSDTRoundItem::roundstartmoney() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.RoundStartMoney)
  return _internal_roundstartmoney();
}
inline void CSDTRoundItem::_internal_set_roundstartmoney(uint32_t value) {
  
  _impl_.roundstartmoney_ = value;
}
inline void CSDTRoundItem::set_roundstartmoney(uint32_t value) {
  _internal_set_roundstartmoney(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.RoundStartMoney)
}

// uint32 BattleStartMoney = 24;
inline void CSDTRoundItem::clear_battlestartmoney() {
  _impl_.battlestartmoney_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_battlestartmoney() const {
  return _impl_.battlestartmoney_;
}
inline uint32_t CSDTRoundItem::battlestartmoney() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.BattleStartMoney)
  return _internal_battlestartmoney();
}
inline void CSDTRoundItem::_internal_set_battlestartmoney(uint32_t value) {
  
  _impl_.battlestartmoney_ = value;
}
inline void CSDTRoundItem::set_battlestartmoney(uint32_t value) {
  _internal_set_battlestartmoney(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.BattleStartMoney)
}

// uint32 BattleEndMoney = 25;
inline void CSDTRoundItem::clear_battleendmoney() {
  _impl_.battleendmoney_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_battleendmoney() const {
  return _impl_.battleendmoney_;
}
inline uint32_t CSDTRoundItem::battleendmoney() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.BattleEndMoney)
  return _internal_battleendmoney();
}
inline void CSDTRoundItem::_internal_set_battleendmoney(uint32_t value) {
  
  _impl_.battleendmoney_ = value;
}
inline void CSDTRoundItem::set_battleendmoney(uint32_t value) {
  _internal_set_battleendmoney(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.BattleEndMoney)
}

// map<uint32, uint32> MoneySourceList = 26;
inline int CSDTRoundItem::_internal_moneysourcelist_size() const {
  return _impl_.moneysourcelist_.size();
}
inline int CSDTRoundItem::moneysourcelist_size() const {
  return _internal_moneysourcelist_size();
}
inline void CSDTRoundItem::clear_moneysourcelist() {
  _impl_.moneysourcelist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_moneysourcelist() const {
  return _impl_.moneysourcelist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::moneysourcelist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.MoneySourceList)
  return _internal_moneysourcelist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_moneysourcelist() {
  return _impl_.moneysourcelist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_moneysourcelist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.MoneySourceList)
  return _internal_mutable_moneysourcelist();
}

// map<uint32, uint32> MoneyPayList = 27;
inline int CSDTRoundItem::_internal_moneypaylist_size() const {
  return _impl_.moneypaylist_.size();
}
inline int CSDTRoundItem::moneypaylist_size() const {
  return _internal_moneypaylist_size();
}
inline void CSDTRoundItem::clear_moneypaylist() {
  _impl_.moneypaylist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_moneypaylist() const {
  return _impl_.moneypaylist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::moneypaylist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.MoneyPayList)
  return _internal_moneypaylist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_moneypaylist() {
  return _impl_.moneypaylist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_moneypaylist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.MoneyPayList)
  return _internal_mutable_moneypaylist();
}

// uint32 ReadChessCount = 28;
inline void CSDTRoundItem::clear_readchesscount() {
  _impl_.readchesscount_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_readchesscount() const {
  return _impl_.readchesscount_;
}
inline uint32_t CSDTRoundItem::readchesscount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.ReadChessCount)
  return _internal_readchesscount();
}
inline void CSDTRoundItem::_internal_set_readchesscount(uint32_t value) {
  
  _impl_.readchesscount_ = value;
}
inline void CSDTRoundItem::set_readchesscount(uint32_t value) {
  _internal_set_readchesscount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.ReadChessCount)
}

// uint32 RoundStartLvl = 29;
inline void CSDTRoundItem::clear_roundstartlvl() {
  _impl_.roundstartlvl_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_roundstartlvl() const {
  return _impl_.roundstartlvl_;
}
inline uint32_t CSDTRoundItem::roundstartlvl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.RoundStartLvl)
  return _internal_roundstartlvl();
}
inline void CSDTRoundItem::_internal_set_roundstartlvl(uint32_t value) {
  
  _impl_.roundstartlvl_ = value;
}
inline void CSDTRoundItem::set_roundstartlvl(uint32_t value) {
  _internal_set_roundstartlvl(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.RoundStartLvl)
}

// uint32 RoundStartExp = 30;
inline void CSDTRoundItem::clear_roundstartexp() {
  _impl_.roundstartexp_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_roundstartexp() const {
  return _impl_.roundstartexp_;
}
inline uint32_t CSDTRoundItem::roundstartexp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.RoundStartExp)
  return _internal_roundstartexp();
}
inline void CSDTRoundItem::_internal_set_roundstartexp(uint32_t value) {
  
  _impl_.roundstartexp_ = value;
}
inline void CSDTRoundItem::set_roundstartexp(uint32_t value) {
  _internal_set_roundstartexp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.RoundStartExp)
}

// uint32 BattleStartLvl = 31;
inline void CSDTRoundItem::clear_battlestartlvl() {
  _impl_.battlestartlvl_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_battlestartlvl() const {
  return _impl_.battlestartlvl_;
}
inline uint32_t CSDTRoundItem::battlestartlvl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.BattleStartLvl)
  return _internal_battlestartlvl();
}
inline void CSDTRoundItem::_internal_set_battlestartlvl(uint32_t value) {
  
  _impl_.battlestartlvl_ = value;
}
inline void CSDTRoundItem::set_battlestartlvl(uint32_t value) {
  _internal_set_battlestartlvl(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.BattleStartLvl)
}

// uint32 BattleStartExp = 32;
inline void CSDTRoundItem::clear_battlestartexp() {
  _impl_.battlestartexp_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_battlestartexp() const {
  return _impl_.battlestartexp_;
}
inline uint32_t CSDTRoundItem::battlestartexp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.BattleStartExp)
  return _internal_battlestartexp();
}
inline void CSDTRoundItem::_internal_set_battlestartexp(uint32_t value) {
  
  _impl_.battlestartexp_ = value;
}
inline void CSDTRoundItem::set_battlestartexp(uint32_t value) {
  _internal_set_battlestartexp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.BattleStartExp)
}

// map<uint32, uint32> SellChessList = 33;
inline int CSDTRoundItem::_internal_sellchesslist_size() const {
  return _impl_.sellchesslist_.size();
}
inline int CSDTRoundItem::sellchesslist_size() const {
  return _internal_sellchesslist_size();
}
inline void CSDTRoundItem::clear_sellchesslist() {
  _impl_.sellchesslist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::_internal_sellchesslist() const {
  return _impl_.sellchesslist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTRoundItem::sellchesslist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.SellChessList)
  return _internal_sellchesslist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::_internal_mutable_sellchesslist() {
  return _impl_.sellchesslist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTRoundItem::mutable_sellchesslist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.SellChessList)
  return _internal_mutable_sellchesslist();
}

// bool IsMonster = 34;
inline void CSDTRoundItem::clear_ismonster() {
  _impl_.ismonster_ = false;
}
inline bool CSDTRoundItem::_internal_ismonster() const {
  return _impl_.ismonster_;
}
inline bool CSDTRoundItem::ismonster() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.IsMonster)
  return _internal_ismonster();
}
inline void CSDTRoundItem::_internal_set_ismonster(bool value) {
  
  _impl_.ismonster_ = value;
}
inline void CSDTRoundItem::set_ismonster(bool value) {
  _internal_set_ismonster(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.IsMonster)
}

// uint32 WinCon = 35;
inline void CSDTRoundItem::clear_wincon() {
  _impl_.wincon_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_wincon() const {
  return _impl_.wincon_;
}
inline uint32_t CSDTRoundItem::wincon() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.WinCon)
  return _internal_wincon();
}
inline void CSDTRoundItem::_internal_set_wincon(uint32_t value) {
  
  _impl_.wincon_ = value;
}
inline void CSDTRoundItem::set_wincon(uint32_t value) {
  _internal_set_wincon(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.WinCon)
}

// uint32 LoseCon = 36;
inline void CSDTRoundItem::clear_losecon() {
  _impl_.losecon_ = 0u;
}
inline uint32_t CSDTRoundItem::_internal_losecon() const {
  return _impl_.losecon_;
}
inline uint32_t CSDTRoundItem::losecon() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.LoseCon)
  return _internal_losecon();
}
inline void CSDTRoundItem::_internal_set_losecon(uint32_t value) {
  
  _impl_.losecon_ = value;
}
inline void CSDTRoundItem::set_losecon(uint32_t value) {
  _internal_set_losecon(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.LoseCon)
}

// bool IsLastRound = 37;
inline void CSDTRoundItem::clear_islastround() {
  _impl_.islastround_ = false;
}
inline bool CSDTRoundItem::_internal_islastround() const {
  return _impl_.islastround_;
}
inline bool CSDTRoundItem::islastround() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.IsLastRound)
  return _internal_islastround();
}
inline void CSDTRoundItem::_internal_set_islastround(bool value) {
  
  _impl_.islastround_ = value;
}
inline void CSDTRoundItem::set_islastround(bool value) {
  _internal_set_islastround(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.IsLastRound)
}

// repeated .msg.Contest SharedChessList = 38;
inline int CSDTRoundItem::_internal_sharedchesslist_size() const {
  return _impl_.sharedchesslist_.size();
}
inline int CSDTRoundItem::sharedchesslist_size() const {
  return _internal_sharedchesslist_size();
}
inline void CSDTRoundItem::clear_sharedchesslist() {
  _impl_.sharedchesslist_.Clear();
}
inline ::msg::Contest* CSDTRoundItem::mutable_sharedchesslist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.SharedChessList)
  return _impl_.sharedchesslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTRoundItem::mutable_sharedchesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.SharedChessList)
  return &_impl_.sharedchesslist_;
}
inline const ::msg::Contest& CSDTRoundItem::_internal_sharedchesslist(int index) const {
  return _impl_.sharedchesslist_.Get(index);
}
inline const ::msg::Contest& CSDTRoundItem::sharedchesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.SharedChessList)
  return _internal_sharedchesslist(index);
}
inline ::msg::Contest* CSDTRoundItem::_internal_add_sharedchesslist() {
  return _impl_.sharedchesslist_.Add();
}
inline ::msg::Contest* CSDTRoundItem::add_sharedchesslist() {
  ::msg::Contest* _add = _internal_add_sharedchesslist();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.SharedChessList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTRoundItem::sharedchesslist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.SharedChessList)
  return _impl_.sharedchesslist_;
}

// repeated uint32 GiveEquipChessList = 39;
inline int CSDTRoundItem::_internal_giveequipchesslist_size() const {
  return _impl_.giveequipchesslist_.size();
}
inline int CSDTRoundItem::giveequipchesslist_size() const {
  return _internal_giveequipchesslist_size();
}
inline void CSDTRoundItem::clear_giveequipchesslist() {
  _impl_.giveequipchesslist_.Clear();
}
inline uint32_t CSDTRoundItem::_internal_giveequipchesslist(int index) const {
  return _impl_.giveequipchesslist_.Get(index);
}
inline uint32_t CSDTRoundItem::giveequipchesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.GiveEquipChessList)
  return _internal_giveequipchesslist(index);
}
inline void CSDTRoundItem::set_giveequipchesslist(int index, uint32_t value) {
  _impl_.giveequipchesslist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.GiveEquipChessList)
}
inline void CSDTRoundItem::_internal_add_giveequipchesslist(uint32_t value) {
  _impl_.giveequipchesslist_.Add(value);
}
inline void CSDTRoundItem::add_giveequipchesslist(uint32_t value) {
  _internal_add_giveequipchesslist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.GiveEquipChessList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoundItem::_internal_giveequipchesslist() const {
  return _impl_.giveequipchesslist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoundItem::giveequipchesslist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.GiveEquipChessList)
  return _internal_giveequipchesslist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoundItem::_internal_mutable_giveequipchesslist() {
  return &_impl_.giveequipchesslist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoundItem::mutable_giveequipchesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.GiveEquipChessList)
  return _internal_mutable_giveequipchesslist();
}

// repeated .msg.Contest GiveChessList = 40;
inline int CSDTRoundItem::_internal_givechesslist_size() const {
  return _impl_.givechesslist_.size();
}
inline int CSDTRoundItem::givechesslist_size() const {
  return _internal_givechesslist_size();
}
inline void CSDTRoundItem::clear_givechesslist() {
  _impl_.givechesslist_.Clear();
}
inline ::msg::Contest* CSDTRoundItem::mutable_givechesslist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.GiveChessList)
  return _impl_.givechesslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTRoundItem::mutable_givechesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.GiveChessList)
  return &_impl_.givechesslist_;
}
inline const ::msg::Contest& CSDTRoundItem::_internal_givechesslist(int index) const {
  return _impl_.givechesslist_.Get(index);
}
inline const ::msg::Contest& CSDTRoundItem::givechesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.GiveChessList)
  return _internal_givechesslist(index);
}
inline ::msg::Contest* CSDTRoundItem::_internal_add_givechesslist() {
  return _impl_.givechesslist_.Add();
}
inline ::msg::Contest* CSDTRoundItem::add_givechesslist() {
  ::msg::Contest* _add = _internal_add_givechesslist();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.GiveChessList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTRoundItem::givechesslist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.GiveChessList)
  return _impl_.givechesslist_;
}

// repeated .msg.Effect RaceEffectList = 41;
inline int CSDTRoundItem::_internal_raceeffectlist_size() const {
  return _impl_.raceeffectlist_.size();
}
inline int CSDTRoundItem::raceeffectlist_size() const {
  return _internal_raceeffectlist_size();
}
inline void CSDTRoundItem::clear_raceeffectlist() {
  _impl_.raceeffectlist_.Clear();
}
inline ::msg::Effect* CSDTRoundItem::mutable_raceeffectlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.RaceEffectList)
  return _impl_.raceeffectlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >*
CSDTRoundItem::mutable_raceeffectlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.RaceEffectList)
  return &_impl_.raceeffectlist_;
}
inline const ::msg::Effect& CSDTRoundItem::_internal_raceeffectlist(int index) const {
  return _impl_.raceeffectlist_.Get(index);
}
inline const ::msg::Effect& CSDTRoundItem::raceeffectlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.RaceEffectList)
  return _internal_raceeffectlist(index);
}
inline ::msg::Effect* CSDTRoundItem::_internal_add_raceeffectlist() {
  return _impl_.raceeffectlist_.Add();
}
inline ::msg::Effect* CSDTRoundItem::add_raceeffectlist() {
  ::msg::Effect* _add = _internal_add_raceeffectlist();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.RaceEffectList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >&
CSDTRoundItem::raceeffectlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.RaceEffectList)
  return _impl_.raceeffectlist_;
}

// repeated .msg.Effect ProfessionEffectList = 42;
inline int CSDTRoundItem::_internal_professioneffectlist_size() const {
  return _impl_.professioneffectlist_.size();
}
inline int CSDTRoundItem::professioneffectlist_size() const {
  return _internal_professioneffectlist_size();
}
inline void CSDTRoundItem::clear_professioneffectlist() {
  _impl_.professioneffectlist_.Clear();
}
inline ::msg::Effect* CSDTRoundItem::mutable_professioneffectlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.ProfessionEffectList)
  return _impl_.professioneffectlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >*
CSDTRoundItem::mutable_professioneffectlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.ProfessionEffectList)
  return &_impl_.professioneffectlist_;
}
inline const ::msg::Effect& CSDTRoundItem::_internal_professioneffectlist(int index) const {
  return _impl_.professioneffectlist_.Get(index);
}
inline const ::msg::Effect& CSDTRoundItem::professioneffectlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.ProfessionEffectList)
  return _internal_professioneffectlist(index);
}
inline ::msg::Effect* CSDTRoundItem::_internal_add_professioneffectlist() {
  return _impl_.professioneffectlist_.Add();
}
inline ::msg::Effect* CSDTRoundItem::add_professioneffectlist() {
  ::msg::Effect* _add = _internal_add_professioneffectlist();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.ProfessionEffectList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Effect >&
CSDTRoundItem::professioneffectlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.ProfessionEffectList)
  return _impl_.professioneffectlist_;
}

// repeated .msg.ChessDamageStat ChessDamageList = 43;
inline int CSDTRoundItem::_internal_chessdamagelist_size() const {
  return _impl_.chessdamagelist_.size();
}
inline int CSDTRoundItem::chessdamagelist_size() const {
  return _internal_chessdamagelist_size();
}
inline void CSDTRoundItem::clear_chessdamagelist() {
  _impl_.chessdamagelist_.Clear();
}
inline ::msg::ChessDamageStat* CSDTRoundItem::mutable_chessdamagelist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.ChessDamageList)
  return _impl_.chessdamagelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessDamageStat >*
CSDTRoundItem::mutable_chessdamagelist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.ChessDamageList)
  return &_impl_.chessdamagelist_;
}
inline const ::msg::ChessDamageStat& CSDTRoundItem::_internal_chessdamagelist(int index) const {
  return _impl_.chessdamagelist_.Get(index);
}
inline const ::msg::ChessDamageStat& CSDTRoundItem::chessdamagelist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.ChessDamageList)
  return _internal_chessdamagelist(index);
}
inline ::msg::ChessDamageStat* CSDTRoundItem::_internal_add_chessdamagelist() {
  return _impl_.chessdamagelist_.Add();
}
inline ::msg::ChessDamageStat* CSDTRoundItem::add_chessdamagelist() {
  ::msg::ChessDamageStat* _add = _internal_add_chessdamagelist();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.ChessDamageList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessDamageStat >&
CSDTRoundItem::chessdamagelist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.ChessDamageList)
  return _impl_.chessdamagelist_;
}

// repeated uint32 RoundEquipSelections = 44;
inline int CSDTRoundItem::_internal_roundequipselections_size() const {
  return _impl_.roundequipselections_.size();
}
inline int CSDTRoundItem::roundequipselections_size() const {
  return _internal_roundequipselections_size();
}
inline void CSDTRoundItem::clear_roundequipselections() {
  _impl_.roundequipselections_.Clear();
}
inline uint32_t CSDTRoundItem::_internal_roundequipselections(int index) const {
  return _impl_.roundequipselections_.Get(index);
}
inline uint32_t CSDTRoundItem::roundequipselections(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.RoundEquipSelections)
  return _internal_roundequipselections(index);
}
inline void CSDTRoundItem::set_roundequipselections(int index, uint32_t value) {
  _impl_.roundequipselections_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.RoundEquipSelections)
}
inline void CSDTRoundItem::_internal_add_roundequipselections(uint32_t value) {
  _impl_.roundequipselections_.Add(value);
}
inline void CSDTRoundItem::add_roundequipselections(uint32_t value) {
  _internal_add_roundequipselections(value);
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.RoundEquipSelections)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoundItem::_internal_roundequipselections() const {
  return _impl_.roundequipselections_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoundItem::roundequipselections() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.RoundEquipSelections)
  return _internal_roundequipselections();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoundItem::_internal_mutable_roundequipselections() {
  return &_impl_.roundequipselections_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoundItem::mutable_roundequipselections() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.RoundEquipSelections)
  return _internal_mutable_roundequipselections();
}

// repeated .msg.SelectEquip SelectEquips = 45;
inline int CSDTRoundItem::_internal_selectequips_size() const {
  return _impl_.selectequips_.size();
}
inline int CSDTRoundItem::selectequips_size() const {
  return _internal_selectequips_size();
}
inline void CSDTRoundItem::clear_selectequips() {
  _impl_.selectequips_.Clear();
}
inline ::msg::SelectEquip* CSDTRoundItem::mutable_selectequips(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.SelectEquips)
  return _impl_.selectequips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SelectEquip >*
CSDTRoundItem::mutable_selectequips() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoundItem.SelectEquips)
  return &_impl_.selectequips_;
}
inline const ::msg::SelectEquip& CSDTRoundItem::_internal_selectequips(int index) const {
  return _impl_.selectequips_.Get(index);
}
inline const ::msg::SelectEquip& CSDTRoundItem::selectequips(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.SelectEquips)
  return _internal_selectequips(index);
}
inline ::msg::SelectEquip* CSDTRoundItem::_internal_add_selectequips() {
  return _impl_.selectequips_.Add();
}
inline ::msg::SelectEquip* CSDTRoundItem::add_selectequips() {
  ::msg::SelectEquip* _add = _internal_add_selectequips();
  // @@protoc_insertion_point(field_add:msg.CSDTRoundItem.SelectEquips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::SelectEquip >&
CSDTRoundItem::selectequips() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoundItem.SelectEquips)
  return _impl_.selectequips_;
}

// string TargetOpenId = 46;
inline void CSDTRoundItem::clear_targetopenid() {
  _impl_.targetopenid_.ClearToEmpty();
}
inline const std::string& CSDTRoundItem::targetopenid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundItem.TargetOpenId)
  return _internal_targetopenid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRoundItem::set_targetopenid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetopenid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRoundItem.TargetOpenId)
}
inline std::string* CSDTRoundItem::mutable_targetopenid() {
  std::string* _s = _internal_mutable_targetopenid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundItem.TargetOpenId)
  return _s;
}
inline const std::string& CSDTRoundItem::_internal_targetopenid() const {
  return _impl_.targetopenid_.Get();
}
inline void CSDTRoundItem::_internal_set_targetopenid(const std::string& value) {
  
  _impl_.targetopenid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRoundItem::_internal_mutable_targetopenid() {
  
  return _impl_.targetopenid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRoundItem::release_targetopenid() {
  // @@protoc_insertion_point(field_release:msg.CSDTRoundItem.TargetOpenId)
  return _impl_.targetopenid_.Release();
}
inline void CSDTRoundItem::set_allocated_targetopenid(std::string* targetopenid) {
  if (targetopenid != nullptr) {
    
  } else {
    
  }
  _impl_.targetopenid_.SetAllocated(targetopenid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetopenid_.IsDefault()) {
    _impl_.targetopenid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRoundItem.TargetOpenId)
}

// map<uint32, .msg.Equip> EquipComposeStructList = 47;
inline int CSDTRoundItem::_internal_equipcomposestructlist_size() const {
  return _impl_.equipcomposestructlist_.size();
}
inline int CSDTRoundItem::equipcomposestructlist_size() const {
  return _internal_equipcomposestructlist_size();
}
inline void CSDTRoundItem::clear_equipcomposestructlist() {
  _impl_.equipcomposestructlist_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >&
CSDTRoundItem::_internal_equipcomposestructlist() const {
  return _impl_.equipcomposestructlist_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >&
CSDTRoundItem::equipcomposestructlist() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRoundItem.EquipComposeStructList)
  return _internal_equipcomposestructlist();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >*
CSDTRoundItem::_internal_mutable_equipcomposestructlist() {
  return _impl_.equipcomposestructlist_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >*
CSDTRoundItem::mutable_equipcomposestructlist() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRoundItem.EquipComposeStructList)
  return _internal_mutable_equipcomposestructlist();
}

// -------------------------------------------------------------------

// CSDTRound

// repeated .msg.CSDTRoundItem List = 1;
inline int CSDTRound::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int CSDTRound::list_size() const {
  return _internal_list_size();
}
inline void CSDTRound::clear_list() {
  _impl_.list_.Clear();
}
inline ::msg::CSDTRoundItem* CSDTRound::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRound.List)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoundItem >*
CSDTRound::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRound.List)
  return &_impl_.list_;
}
inline const ::msg::CSDTRoundItem& CSDTRound::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::msg::CSDTRoundItem& CSDTRound::list(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRound.List)
  return _internal_list(index);
}
inline ::msg::CSDTRoundItem* CSDTRound::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::msg::CSDTRoundItem* CSDTRound::add_list() {
  ::msg::CSDTRoundItem* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:msg.CSDTRound.List)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoundItem >&
CSDTRound::list() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRound.List)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// CSDTRoundEnd

// string Id = 1;
inline void CSDTRoundEnd::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTRoundEnd::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundEnd.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRoundEnd::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRoundEnd.Id)
}
inline std::string* CSDTRoundEnd::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundEnd.Id)
  return _s;
}
inline const std::string& CSDTRoundEnd::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTRoundEnd::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRoundEnd::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRoundEnd::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTRoundEnd.Id)
  return _impl_.id_.Release();
}
inline void CSDTRoundEnd::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRoundEnd.Id)
}

// .msg.CSDTRoundItem RounItem = 2;
inline bool CSDTRoundEnd::_internal_has_rounitem() const {
  return this != internal_default_instance() && _impl_.rounitem_ != nullptr;
}
inline bool CSDTRoundEnd::has_rounitem() const {
  return _internal_has_rounitem();
}
inline void CSDTRoundEnd::clear_rounitem() {
  if (GetArenaForAllocation() == nullptr && _impl_.rounitem_ != nullptr) {
    delete _impl_.rounitem_;
  }
  _impl_.rounitem_ = nullptr;
}
inline const ::msg::CSDTRoundItem& CSDTRoundEnd::_internal_rounitem() const {
  const ::msg::CSDTRoundItem* p = _impl_.rounitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTRoundItem&>(
      ::msg::_CSDTRoundItem_default_instance_);
}
inline const ::msg::CSDTRoundItem& CSDTRoundEnd::rounitem() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoundEnd.RounItem)
  return _internal_rounitem();
}
inline void CSDTRoundEnd::unsafe_arena_set_allocated_rounitem(
    ::msg::CSDTRoundItem* rounitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rounitem_);
  }
  _impl_.rounitem_ = rounitem;
  if (rounitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTRoundEnd.RounItem)
}
inline ::msg::CSDTRoundItem* CSDTRoundEnd::release_rounitem() {
  
  ::msg::CSDTRoundItem* temp = _impl_.rounitem_;
  _impl_.rounitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTRoundItem* CSDTRoundEnd::unsafe_arena_release_rounitem() {
  // @@protoc_insertion_point(field_release:msg.CSDTRoundEnd.RounItem)
  
  ::msg::CSDTRoundItem* temp = _impl_.rounitem_;
  _impl_.rounitem_ = nullptr;
  return temp;
}
inline ::msg::CSDTRoundItem* CSDTRoundEnd::_internal_mutable_rounitem() {
  
  if (_impl_.rounitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTRoundItem>(GetArenaForAllocation());
    _impl_.rounitem_ = p;
  }
  return _impl_.rounitem_;
}
inline ::msg::CSDTRoundItem* CSDTRoundEnd::mutable_rounitem() {
  ::msg::CSDTRoundItem* _msg = _internal_mutable_rounitem();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRoundEnd.RounItem)
  return _msg;
}
inline void CSDTRoundEnd::set_allocated_rounitem(::msg::CSDTRoundItem* rounitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rounitem_;
  }
  if (rounitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rounitem);
    if (message_arena != submessage_arena) {
      rounitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rounitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rounitem_ = rounitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRoundEnd.RounItem)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTPvpStat

// uint32 DeathNum = 1;
inline void CSDTPvpStat::clear_deathnum() {
  _impl_.deathnum_ = 0u;
}
inline uint32_t CSDTPvpStat::_internal_deathnum() const {
  return _impl_.deathnum_;
}
inline uint32_t CSDTPvpStat::deathnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.DeathNum)
  return _internal_deathnum();
}
inline void CSDTPvpStat::_internal_set_deathnum(uint32_t value) {
  
  _impl_.deathnum_ = value;
}
inline void CSDTPvpStat::set_deathnum(uint32_t value) {
  _internal_set_deathnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpStat.DeathNum)
}

// uint32 KillNum = 2;
inline void CSDTPvpStat::clear_killnum() {
  _impl_.killnum_ = 0u;
}
inline uint32_t CSDTPvpStat::_internal_killnum() const {
  return _impl_.killnum_;
}
inline uint32_t CSDTPvpStat::killnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.KillNum)
  return _internal_killnum();
}
inline void CSDTPvpStat::_internal_set_killnum(uint32_t value) {
  
  _impl_.killnum_ = value;
}
inline void CSDTPvpStat::set_killnum(uint32_t value) {
  _internal_set_killnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpStat.KillNum)
}

// uint32 WaterDeathNum = 3;
inline void CSDTPvpStat::clear_waterdeathnum() {
  _impl_.waterdeathnum_ = 0u;
}
inline uint32_t CSDTPvpStat::_internal_waterdeathnum() const {
  return _impl_.waterdeathnum_;
}
inline uint32_t CSDTPvpStat::waterdeathnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.WaterDeathNum)
  return _internal_waterdeathnum();
}
inline void CSDTPvpStat::_internal_set_waterdeathnum(uint32_t value) {
  
  _impl_.waterdeathnum_ = value;
}
inline void CSDTPvpStat::set_waterdeathnum(uint32_t value) {
  _internal_set_waterdeathnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpStat.WaterDeathNum)
}

// uint32 HurtGroundDeathNum = 4;
inline void CSDTPvpStat::clear_hurtgrounddeathnum() {
  _impl_.hurtgrounddeathnum_ = 0u;
}
inline uint32_t CSDTPvpStat::_internal_hurtgrounddeathnum() const {
  return _impl_.hurtgrounddeathnum_;
}
inline uint32_t CSDTPvpStat::hurtgrounddeathnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.HurtGroundDeathNum)
  return _internal_hurtgrounddeathnum();
}
inline void CSDTPvpStat::_internal_set_hurtgrounddeathnum(uint32_t value) {
  
  _impl_.hurtgrounddeathnum_ = value;
}
inline void CSDTPvpStat::set_hurtgrounddeathnum(uint32_t value) {
  _internal_set_hurtgrounddeathnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpStat.HurtGroundDeathNum)
}

// repeated .msg.CSDTRoleStat WinRoleStat = 5;
inline int CSDTPvpStat::_internal_winrolestat_size() const {
  return _impl_.winrolestat_.size();
}
inline int CSDTPvpStat::winrolestat_size() const {
  return _internal_winrolestat_size();
}
inline void CSDTPvpStat::clear_winrolestat() {
  _impl_.winrolestat_.Clear();
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::mutable_winrolestat(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpStat.WinRoleStat)
  return _impl_.winrolestat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >*
CSDTPvpStat::mutable_winrolestat() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpStat.WinRoleStat)
  return &_impl_.winrolestat_;
}
inline const ::msg::CSDTRoleStat& CSDTPvpStat::_internal_winrolestat(int index) const {
  return _impl_.winrolestat_.Get(index);
}
inline const ::msg::CSDTRoleStat& CSDTPvpStat::winrolestat(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.WinRoleStat)
  return _internal_winrolestat(index);
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::_internal_add_winrolestat() {
  return _impl_.winrolestat_.Add();
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::add_winrolestat() {
  ::msg::CSDTRoleStat* _add = _internal_add_winrolestat();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpStat.WinRoleStat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >&
CSDTPvpStat::winrolestat() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpStat.WinRoleStat)
  return _impl_.winrolestat_;
}

// repeated .msg.CSDTRoleStat FailRoleStat = 6;
inline int CSDTPvpStat::_internal_failrolestat_size() const {
  return _impl_.failrolestat_.size();
}
inline int CSDTPvpStat::failrolestat_size() const {
  return _internal_failrolestat_size();
}
inline void CSDTPvpStat::clear_failrolestat() {
  _impl_.failrolestat_.Clear();
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::mutable_failrolestat(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpStat.FailRoleStat)
  return _impl_.failrolestat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >*
CSDTPvpStat::mutable_failrolestat() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpStat.FailRoleStat)
  return &_impl_.failrolestat_;
}
inline const ::msg::CSDTRoleStat& CSDTPvpStat::_internal_failrolestat(int index) const {
  return _impl_.failrolestat_.Get(index);
}
inline const ::msg::CSDTRoleStat& CSDTPvpStat::failrolestat(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.FailRoleStat)
  return _internal_failrolestat(index);
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::_internal_add_failrolestat() {
  return _impl_.failrolestat_.Add();
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::add_failrolestat() {
  ::msg::CSDTRoleStat* _add = _internal_add_failrolestat();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpStat.FailRoleStat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >&
CSDTPvpStat::failrolestat() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpStat.FailRoleStat)
  return _impl_.failrolestat_;
}

// repeated .msg.CSDTRoleStat DrawRoleStat = 7;
inline int CSDTPvpStat::_internal_drawrolestat_size() const {
  return _impl_.drawrolestat_.size();
}
inline int CSDTPvpStat::drawrolestat_size() const {
  return _internal_drawrolestat_size();
}
inline void CSDTPvpStat::clear_drawrolestat() {
  _impl_.drawrolestat_.Clear();
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::mutable_drawrolestat(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpStat.DrawRoleStat)
  return _impl_.drawrolestat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >*
CSDTPvpStat::mutable_drawrolestat() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpStat.DrawRoleStat)
  return &_impl_.drawrolestat_;
}
inline const ::msg::CSDTRoleStat& CSDTPvpStat::_internal_drawrolestat(int index) const {
  return _impl_.drawrolestat_.Get(index);
}
inline const ::msg::CSDTRoleStat& CSDTPvpStat::drawrolestat(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.DrawRoleStat)
  return _internal_drawrolestat(index);
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::_internal_add_drawrolestat() {
  return _impl_.drawrolestat_.Add();
}
inline ::msg::CSDTRoleStat* CSDTPvpStat::add_drawrolestat() {
  ::msg::CSDTRoleStat* _add = _internal_add_drawrolestat();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpStat.DrawRoleStat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRoleStat >&
CSDTPvpStat::drawrolestat() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpStat.DrawRoleStat)
  return _impl_.drawrolestat_;
}

// uint32 MvpRoleId = 8;
inline void CSDTPvpStat::clear_mvproleid() {
  _impl_.mvproleid_ = 0u;
}
inline uint32_t CSDTPvpStat::_internal_mvproleid() const {
  return _impl_.mvproleid_;
}
inline uint32_t CSDTPvpStat::mvproleid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.MvpRoleId)
  return _internal_mvproleid();
}
inline void CSDTPvpStat::_internal_set_mvproleid(uint32_t value) {
  
  _impl_.mvproleid_ = value;
}
inline void CSDTPvpStat::set_mvproleid(uint32_t value) {
  _internal_set_mvproleid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpStat.MvpRoleId)
}

// repeated uint32 MvpSkills = 9;
inline int CSDTPvpStat::_internal_mvpskills_size() const {
  return _impl_.mvpskills_.size();
}
inline int CSDTPvpStat::mvpskills_size() const {
  return _internal_mvpskills_size();
}
inline void CSDTPvpStat::clear_mvpskills() {
  _impl_.mvpskills_.Clear();
}
inline uint32_t CSDTPvpStat::_internal_mvpskills(int index) const {
  return _impl_.mvpskills_.Get(index);
}
inline uint32_t CSDTPvpStat::mvpskills(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpStat.MvpSkills)
  return _internal_mvpskills(index);
}
inline void CSDTPvpStat::set_mvpskills(int index, uint32_t value) {
  _impl_.mvpskills_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpStat.MvpSkills)
}
inline void CSDTPvpStat::_internal_add_mvpskills(uint32_t value) {
  _impl_.mvpskills_.Add(value);
}
inline void CSDTPvpStat::add_mvpskills(uint32_t value) {
  _internal_add_mvpskills(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPvpStat.MvpSkills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpStat::_internal_mvpskills() const {
  return _impl_.mvpskills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpStat::mvpskills() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpStat.MvpSkills)
  return _internal_mvpskills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpStat::_internal_mutable_mvpskills() {
  return &_impl_.mvpskills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpStat::mutable_mvpskills() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpStat.MvpSkills)
  return _internal_mutable_mvpskills();
}

// map<string, .msg.CSDTRound> PlayerRound = 10;
inline int CSDTPvpStat::_internal_playerround_size() const {
  return _impl_.playerround_.size();
}
inline int CSDTPvpStat::playerround_size() const {
  return _internal_playerround_size();
}
inline void CSDTPvpStat::clear_playerround() {
  _impl_.playerround_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >&
CSDTPvpStat::_internal_playerround() const {
  return _impl_.playerround_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >&
CSDTPvpStat::playerround() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPvpStat.PlayerRound)
  return _internal_playerround();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >*
CSDTPvpStat::_internal_mutable_playerround() {
  return _impl_.playerround_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >*
CSDTPvpStat::mutable_playerround() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPvpStat.PlayerRound)
  return _internal_mutable_playerround();
}

// -------------------------------------------------------------------

// CSDTPvpCampResult

// repeated .msg.CSDTCampData Camp = 1;
inline int CSDTPvpCampResult::_internal_camp_size() const {
  return _impl_.camp_.size();
}
inline int CSDTPvpCampResult::camp_size() const {
  return _internal_camp_size();
}
inline void CSDTPvpCampResult::clear_camp() {
  _impl_.camp_.Clear();
}
inline ::msg::CSDTCampData* CSDTPvpCampResult::mutable_camp(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpCampResult.Camp)
  return _impl_.camp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >*
CSDTPvpCampResult::mutable_camp() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpCampResult.Camp)
  return &_impl_.camp_;
}
inline const ::msg::CSDTCampData& CSDTPvpCampResult::_internal_camp(int index) const {
  return _impl_.camp_.Get(index);
}
inline const ::msg::CSDTCampData& CSDTPvpCampResult::camp(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpCampResult.Camp)
  return _internal_camp(index);
}
inline ::msg::CSDTCampData* CSDTPvpCampResult::_internal_add_camp() {
  return _impl_.camp_.Add();
}
inline ::msg::CSDTCampData* CSDTPvpCampResult::add_camp() {
  ::msg::CSDTCampData* _add = _internal_add_camp();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpCampResult.Camp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >&
CSDTPvpCampResult::camp() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpCampResult.Camp)
  return _impl_.camp_;
}

// uint32 Rank = 2;
inline void CSDTPvpCampResult::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t CSDTPvpCampResult::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CSDTPvpCampResult::rank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpCampResult.Rank)
  return _internal_rank();
}
inline void CSDTPvpCampResult::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void CSDTPvpCampResult::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpCampResult.Rank)
}

// uint32 Camp1Score = 3;
inline void CSDTPvpCampResult::clear_camp1score() {
  _impl_.camp1score_ = 0u;
}
inline uint32_t CSDTPvpCampResult::_internal_camp1score() const {
  return _impl_.camp1score_;
}
inline uint32_t CSDTPvpCampResult::camp1score() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpCampResult.Camp1Score)
  return _internal_camp1score();
}
inline void CSDTPvpCampResult::_internal_set_camp1score(uint32_t value) {
  
  _impl_.camp1score_ = value;
}
inline void CSDTPvpCampResult::set_camp1score(uint32_t value) {
  _internal_set_camp1score(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpCampResult.Camp1Score)
}

// uint32 Camp2Score = 4;
inline void CSDTPvpCampResult::clear_camp2score() {
  _impl_.camp2score_ = 0u;
}
inline uint32_t CSDTPvpCampResult::_internal_camp2score() const {
  return _impl_.camp2score_;
}
inline uint32_t CSDTPvpCampResult::camp2score() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpCampResult.Camp2Score)
  return _internal_camp2score();
}
inline void CSDTPvpCampResult::_internal_set_camp2score(uint32_t value) {
  
  _impl_.camp2score_ = value;
}
inline void CSDTPvpCampResult::set_camp2score(uint32_t value) {
  _internal_set_camp2score(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpCampResult.Camp2Score)
}

// int32 CurrencyID = 5;
inline void CSDTPvpCampResult::clear_currencyid() {
  _impl_.currencyid_ = 0;
}
inline int32_t CSDTPvpCampResult::_internal_currencyid() const {
  return _impl_.currencyid_;
}
inline int32_t CSDTPvpCampResult::currencyid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpCampResult.CurrencyID)
  return _internal_currencyid();
}
inline void CSDTPvpCampResult::_internal_set_currencyid(int32_t value) {
  
  _impl_.currencyid_ = value;
}
inline void CSDTPvpCampResult::set_currencyid(int32_t value) {
  _internal_set_currencyid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpCampResult.CurrencyID)
}

// int32 CurrencyCnt = 6;
inline void CSDTPvpCampResult::clear_currencycnt() {
  _impl_.currencycnt_ = 0;
}
inline int32_t CSDTPvpCampResult::_internal_currencycnt() const {
  return _impl_.currencycnt_;
}
inline int32_t CSDTPvpCampResult::currencycnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpCampResult.CurrencyCnt)
  return _internal_currencycnt();
}
inline void CSDTPvpCampResult::_internal_set_currencycnt(int32_t value) {
  
  _impl_.currencycnt_ = value;
}
inline void CSDTPvpCampResult::set_currencycnt(int32_t value) {
  _internal_set_currencycnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpCampResult.CurrencyCnt)
}

// -------------------------------------------------------------------

// CSDTCampData

// uint32 Camp = 1;
inline void CSDTCampData::clear_camp() {
  _impl_.camp_ = 0u;
}
inline uint32_t CSDTCampData::_internal_camp() const {
  return _impl_.camp_;
}
inline uint32_t CSDTCampData::camp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCampData.Camp)
  return _internal_camp();
}
inline void CSDTCampData::_internal_set_camp(uint32_t value) {
  
  _impl_.camp_ = value;
}
inline void CSDTCampData::set_camp(uint32_t value) {
  _internal_set_camp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTCampData.Camp)
}

// uint32 Rank = 2;
inline void CSDTCampData::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t CSDTCampData::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CSDTCampData::rank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCampData.Rank)
  return _internal_rank();
}
inline void CSDTCampData::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void CSDTCampData::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTCampData.Rank)
}

// .msg.WINTYPE WinType = 3;
inline void CSDTCampData::clear_wintype() {
  _impl_.wintype_ = 0;
}
inline ::msg::WINTYPE CSDTCampData::_internal_wintype() const {
  return static_cast< ::msg::WINTYPE >(_impl_.wintype_);
}
inline ::msg::WINTYPE CSDTCampData::wintype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCampData.WinType)
  return _internal_wintype();
}
inline void CSDTCampData::_internal_set_wintype(::msg::WINTYPE value) {
  
  _impl_.wintype_ = value;
}
inline void CSDTCampData::set_wintype(::msg::WINTYPE value) {
  _internal_set_wintype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTCampData.WinType)
}

// repeated .msg.CSDTPvpPlayerStat PlayerStat = 4;
inline int CSDTCampData::_internal_playerstat_size() const {
  return _impl_.playerstat_.size();
}
inline int CSDTCampData::playerstat_size() const {
  return _internal_playerstat_size();
}
inline void CSDTCampData::clear_playerstat() {
  _impl_.playerstat_.Clear();
}
inline ::msg::CSDTPvpPlayerStat* CSDTCampData::mutable_playerstat(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTCampData.PlayerStat)
  return _impl_.playerstat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpPlayerStat >*
CSDTCampData::mutable_playerstat() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTCampData.PlayerStat)
  return &_impl_.playerstat_;
}
inline const ::msg::CSDTPvpPlayerStat& CSDTCampData::_internal_playerstat(int index) const {
  return _impl_.playerstat_.Get(index);
}
inline const ::msg::CSDTPvpPlayerStat& CSDTCampData::playerstat(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTCampData.PlayerStat)
  return _internal_playerstat(index);
}
inline ::msg::CSDTPvpPlayerStat* CSDTCampData::_internal_add_playerstat() {
  return _impl_.playerstat_.Add();
}
inline ::msg::CSDTPvpPlayerStat* CSDTCampData::add_playerstat() {
  ::msg::CSDTPvpPlayerStat* _add = _internal_add_playerstat();
  // @@protoc_insertion_point(field_add:msg.CSDTCampData.PlayerStat)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPvpPlayerStat >&
CSDTCampData::playerstat() const {
  // @@protoc_insertion_point(field_list:msg.CSDTCampData.PlayerStat)
  return _impl_.playerstat_;
}

// bool Surrender = 5;
inline void CSDTCampData::clear_surrender() {
  _impl_.surrender_ = false;
}
inline bool CSDTCampData::_internal_surrender() const {
  return _impl_.surrender_;
}
inline bool CSDTCampData::surrender() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCampData.Surrender)
  return _internal_surrender();
}
inline void CSDTCampData::_internal_set_surrender(bool value) {
  
  _impl_.surrender_ = value;
}
inline void CSDTCampData::set_surrender(bool value) {
  _internal_set_surrender(value);
  // @@protoc_insertion_point(field_set:msg.CSDTCampData.Surrender)
}

// -------------------------------------------------------------------

// CSDTRoleStat

// uint32 Id = 1;
inline void CSDTRoleStat::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTRoleStat::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTRoleStat::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoleStat.Id)
  return _internal_id();
}
inline void CSDTRoleStat::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTRoleStat::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoleStat.Id)
}

// uint32 UseTime = 2;
inline void CSDTRoleStat::clear_usetime() {
  _impl_.usetime_ = 0u;
}
inline uint32_t CSDTRoleStat::_internal_usetime() const {
  return _impl_.usetime_;
}
inline uint32_t CSDTRoleStat::usetime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoleStat.UseTime)
  return _internal_usetime();
}
inline void CSDTRoleStat::_internal_set_usetime(uint32_t value) {
  
  _impl_.usetime_ = value;
}
inline void CSDTRoleStat::set_usetime(uint32_t value) {
  _internal_set_usetime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoleStat.UseTime)
}

// uint32 KillCnt = 3;
inline void CSDTRoleStat::clear_killcnt() {
  _impl_.killcnt_ = 0u;
}
inline uint32_t CSDTRoleStat::_internal_killcnt() const {
  return _impl_.killcnt_;
}
inline uint32_t CSDTRoleStat::killcnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoleStat.KillCnt)
  return _internal_killcnt();
}
inline void CSDTRoleStat::_internal_set_killcnt(uint32_t value) {
  
  _impl_.killcnt_ = value;
}
inline void CSDTRoleStat::set_killcnt(uint32_t value) {
  _internal_set_killcnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoleStat.KillCnt)
}

// uint32 AssistKillCnt = 4;
inline void CSDTRoleStat::clear_assistkillcnt() {
  _impl_.assistkillcnt_ = 0u;
}
inline uint32_t CSDTRoleStat::_internal_assistkillcnt() const {
  return _impl_.assistkillcnt_;
}
inline uint32_t CSDTRoleStat::assistkillcnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoleStat.AssistKillCnt)
  return _internal_assistkillcnt();
}
inline void CSDTRoleStat::_internal_set_assistkillcnt(uint32_t value) {
  
  _impl_.assistkillcnt_ = value;
}
inline void CSDTRoleStat::set_assistkillcnt(uint32_t value) {
  _internal_set_assistkillcnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoleStat.AssistKillCnt)
}

// uint32 DeathCnt = 5;
inline void CSDTRoleStat::clear_deathcnt() {
  _impl_.deathcnt_ = 0u;
}
inline uint32_t CSDTRoleStat::_internal_deathcnt() const {
  return _impl_.deathcnt_;
}
inline uint32_t CSDTRoleStat::deathcnt() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoleStat.DeathCnt)
  return _internal_deathcnt();
}
inline void CSDTRoleStat::_internal_set_deathcnt(uint32_t value) {
  
  _impl_.deathcnt_ = value;
}
inline void CSDTRoleStat::set_deathcnt(uint32_t value) {
  _internal_set_deathcnt(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoleStat.DeathCnt)
}

// repeated uint32 Talents = 6;
inline int CSDTRoleStat::_internal_talents_size() const {
  return _impl_.talents_.size();
}
inline int CSDTRoleStat::talents_size() const {
  return _internal_talents_size();
}
inline void CSDTRoleStat::clear_talents() {
  _impl_.talents_.Clear();
}
inline uint32_t CSDTRoleStat::_internal_talents(int index) const {
  return _impl_.talents_.Get(index);
}
inline uint32_t CSDTRoleStat::talents(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRoleStat.Talents)
  return _internal_talents(index);
}
inline void CSDTRoleStat::set_talents(int index, uint32_t value) {
  _impl_.talents_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTRoleStat.Talents)
}
inline void CSDTRoleStat::_internal_add_talents(uint32_t value) {
  _impl_.talents_.Add(value);
}
inline void CSDTRoleStat::add_talents(uint32_t value) {
  _internal_add_talents(value);
  // @@protoc_insertion_point(field_add:msg.CSDTRoleStat.Talents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoleStat::_internal_talents() const {
  return _impl_.talents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTRoleStat::talents() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRoleStat.Talents)
  return _internal_talents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoleStat::_internal_mutable_talents() {
  return &_impl_.talents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTRoleStat::mutable_talents() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRoleStat.Talents)
  return _internal_mutable_talents();
}

// -------------------------------------------------------------------

// CSDTPvpMvp

// uint32 HurtMax = 1;
inline void CSDTPvpMvp::clear_hurtmax() {
  _impl_.hurtmax_ = 0u;
}
inline uint32_t CSDTPvpMvp::_internal_hurtmax() const {
  return _impl_.hurtmax_;
}
inline uint32_t CSDTPvpMvp::hurtmax() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpMvp.HurtMax)
  return _internal_hurtmax();
}
inline void CSDTPvpMvp::_internal_set_hurtmax(uint32_t value) {
  
  _impl_.hurtmax_ = value;
}
inline void CSDTPvpMvp::set_hurtmax(uint32_t value) {
  _internal_set_hurtmax(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpMvp.HurtMax)
}

// uint32 BearHurtMax = 2;
inline void CSDTPvpMvp::clear_bearhurtmax() {
  _impl_.bearhurtmax_ = 0u;
}
inline uint32_t CSDTPvpMvp::_internal_bearhurtmax() const {
  return _impl_.bearhurtmax_;
}
inline uint32_t CSDTPvpMvp::bearhurtmax() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpMvp.BearHurtMax)
  return _internal_bearhurtmax();
}
inline void CSDTPvpMvp::_internal_set_bearhurtmax(uint32_t value) {
  
  _impl_.bearhurtmax_ = value;
}
inline void CSDTPvpMvp::set_bearhurtmax(uint32_t value) {
  _internal_set_bearhurtmax(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpMvp.BearHurtMax)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTPvpPlayerStat

// bool IsRobot = 1;
inline void CSDTPvpPlayerStat::clear_isrobot() {
  _impl_.isrobot_ = false;
}
inline bool CSDTPvpPlayerStat::_internal_isrobot() const {
  return _impl_.isrobot_;
}
inline bool CSDTPvpPlayerStat::isrobot() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.IsRobot)
  return _internal_isrobot();
}
inline void CSDTPvpPlayerStat::_internal_set_isrobot(bool value) {
  
  _impl_.isrobot_ = value;
}
inline void CSDTPvpPlayerStat::set_isrobot(bool value) {
  _internal_set_isrobot(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.IsRobot)
}

// bool IsHook = 2;
inline void CSDTPvpPlayerStat::clear_ishook() {
  _impl_.ishook_ = false;
}
inline bool CSDTPvpPlayerStat::_internal_ishook() const {
  return _impl_.ishook_;
}
inline bool CSDTPvpPlayerStat::ishook() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.IsHook)
  return _internal_ishook();
}
inline void CSDTPvpPlayerStat::_internal_set_ishook(bool value) {
  
  _impl_.ishook_ = value;
}
inline void CSDTPvpPlayerStat::set_ishook(bool value) {
  _internal_set_ishook(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.IsHook)
}

// string Id = 3;
inline void CSDTPvpPlayerStat::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTPvpPlayerStat::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPvpPlayerStat::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Id)
}
inline std::string* CSDTPvpPlayerStat::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.Id)
  return _s;
}
inline const std::string& CSDTPvpPlayerStat::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTPvpPlayerStat::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTPvpPlayerStat.Id)
  return _impl_.id_.Release();
}
inline void CSDTPvpPlayerStat::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPvpPlayerStat.Id)
}

// string UsrName = 4;
inline void CSDTPvpPlayerStat::clear_usrname() {
  _impl_.usrname_.ClearToEmpty();
}
inline const std::string& CSDTPvpPlayerStat::usrname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.UsrName)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPvpPlayerStat::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usrname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.UsrName)
}
inline std::string* CSDTPvpPlayerStat::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.UsrName)
  return _s;
}
inline const std::string& CSDTPvpPlayerStat::_internal_usrname() const {
  return _impl_.usrname_.Get();
}
inline void CSDTPvpPlayerStat::_internal_set_usrname(const std::string& value) {
  
  _impl_.usrname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::_internal_mutable_usrname() {
  
  return _impl_.usrname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::release_usrname() {
  // @@protoc_insertion_point(field_release:msg.CSDTPvpPlayerStat.UsrName)
  return _impl_.usrname_.Release();
}
inline void CSDTPvpPlayerStat::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  _impl_.usrname_.SetAllocated(usrname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usrname_.IsDefault()) {
    _impl_.usrname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPvpPlayerStat.UsrName)
}

// uint32 HeadPic = 5;
inline void CSDTPvpPlayerStat::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSDTPvpPlayerStat::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.HeadPic)
  return _internal_headpic();
}
inline void CSDTPvpPlayerStat::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSDTPvpPlayerStat::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.HeadPic)
}

// uint32 MMR = 6;
inline void CSDTPvpPlayerStat::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CSDTPvpPlayerStat::mmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.MMR)
  return _internal_mmr();
}
inline void CSDTPvpPlayerStat::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void CSDTPvpPlayerStat::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.MMR)
}

// uint32 ChessPlayer = 7;
inline void CSDTPvpPlayerStat::clear_chessplayer() {
  _impl_.chessplayer_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_chessplayer() const {
  return _impl_.chessplayer_;
}
inline uint32_t CSDTPvpPlayerStat::chessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ChessPlayer)
  return _internal_chessplayer();
}
inline void CSDTPvpPlayerStat::_internal_set_chessplayer(uint32_t value) {
  
  _impl_.chessplayer_ = value;
}
inline void CSDTPvpPlayerStat::set_chessplayer(uint32_t value) {
  _internal_set_chessplayer(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ChessPlayer)
}

// repeated uint32 ChessList = 8;
inline int CSDTPvpPlayerStat::_internal_chesslist_size() const {
  return _impl_.chesslist_.size();
}
inline int CSDTPvpPlayerStat::chesslist_size() const {
  return _internal_chesslist_size();
}
inline void CSDTPvpPlayerStat::clear_chesslist() {
  _impl_.chesslist_.Clear();
}
inline uint32_t CSDTPvpPlayerStat::_internal_chesslist(int index) const {
  return _impl_.chesslist_.Get(index);
}
inline uint32_t CSDTPvpPlayerStat::chesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ChessList)
  return _internal_chesslist(index);
}
inline void CSDTPvpPlayerStat::set_chesslist(int index, uint32_t value) {
  _impl_.chesslist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ChessList)
}
inline void CSDTPvpPlayerStat::_internal_add_chesslist(uint32_t value) {
  _impl_.chesslist_.Add(value);
}
inline void CSDTPvpPlayerStat::add_chesslist(uint32_t value) {
  _internal_add_chesslist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.ChessList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::_internal_chesslist() const {
  return _impl_.chesslist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::chesslist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.ChessList)
  return _internal_chesslist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_chesslist() {
  return &_impl_.chesslist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::mutable_chesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.ChessList)
  return _internal_mutable_chesslist();
}

// uint32 Round = 9;
inline void CSDTPvpPlayerStat::clear_round() {
  _impl_.round_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_round() const {
  return _impl_.round_;
}
inline uint32_t CSDTPvpPlayerStat::round() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Round)
  return _internal_round();
}
inline void CSDTPvpPlayerStat::_internal_set_round(uint32_t value) {
  
  _impl_.round_ = value;
}
inline void CSDTPvpPlayerStat::set_round(uint32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Round)
}

// uint32 WinRound = 10;
inline void CSDTPvpPlayerStat::clear_winround() {
  _impl_.winround_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_winround() const {
  return _impl_.winround_;
}
inline uint32_t CSDTPvpPlayerStat::winround() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.WinRound)
  return _internal_winround();
}
inline void CSDTPvpPlayerStat::_internal_set_winround(uint32_t value) {
  
  _impl_.winround_ = value;
}
inline void CSDTPvpPlayerStat::set_winround(uint32_t value) {
  _internal_set_winround(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.WinRound)
}

// uint32 FailRound = 11;
inline void CSDTPvpPlayerStat::clear_failround() {
  _impl_.failround_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_failround() const {
  return _impl_.failround_;
}
inline uint32_t CSDTPvpPlayerStat::failround() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.FailRound)
  return _internal_failround();
}
inline void CSDTPvpPlayerStat::_internal_set_failround(uint32_t value) {
  
  _impl_.failround_ = value;
}
inline void CSDTPvpPlayerStat::set_failround(uint32_t value) {
  _internal_set_failround(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.FailRound)
}

// uint32 DrawRound = 12;
inline void CSDTPvpPlayerStat::clear_drawround() {
  _impl_.drawround_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_drawround() const {
  return _impl_.drawround_;
}
inline uint32_t CSDTPvpPlayerStat::drawround() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.DrawRound)
  return _internal_drawround();
}
inline void CSDTPvpPlayerStat::_internal_set_drawround(uint32_t value) {
  
  _impl_.drawround_ = value;
}
inline void CSDTPvpPlayerStat::set_drawround(uint32_t value) {
  _internal_set_drawround(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.DrawRound)
}

// uint32 KillNum = 13;
inline void CSDTPvpPlayerStat::clear_killnum() {
  _impl_.killnum_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_killnum() const {
  return _impl_.killnum_;
}
inline uint32_t CSDTPvpPlayerStat::killnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.KillNum)
  return _internal_killnum();
}
inline void CSDTPvpPlayerStat::_internal_set_killnum(uint32_t value) {
  
  _impl_.killnum_ = value;
}
inline void CSDTPvpPlayerStat::set_killnum(uint32_t value) {
  _internal_set_killnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.KillNum)
}

// uint32 DeathNum = 14;
inline void CSDTPvpPlayerStat::clear_deathnum() {
  _impl_.deathnum_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_deathnum() const {
  return _impl_.deathnum_;
}
inline uint32_t CSDTPvpPlayerStat::deathnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.DeathNum)
  return _internal_deathnum();
}
inline void CSDTPvpPlayerStat::_internal_set_deathnum(uint32_t value) {
  
  _impl_.deathnum_ = value;
}
inline void CSDTPvpPlayerStat::set_deathnum(uint32_t value) {
  _internal_set_deathnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.DeathNum)
}

// uint32 SurviveTime = 15;
inline void CSDTPvpPlayerStat::clear_survivetime() {
  _impl_.survivetime_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_survivetime() const {
  return _impl_.survivetime_;
}
inline uint32_t CSDTPvpPlayerStat::survivetime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.SurviveTime)
  return _internal_survivetime();
}
inline void CSDTPvpPlayerStat::_internal_set_survivetime(uint32_t value) {
  
  _impl_.survivetime_ = value;
}
inline void CSDTPvpPlayerStat::set_survivetime(uint32_t value) {
  _internal_set_survivetime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.SurviveTime)
}

// uint32 Hp = 16;
inline void CSDTPvpPlayerStat::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t CSDTPvpPlayerStat::hp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Hp)
  return _internal_hp();
}
inline void CSDTPvpPlayerStat::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void CSDTPvpPlayerStat::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Hp)
}

// uint32 ChessPlayerLvl = 17;
inline void CSDTPvpPlayerStat::clear_chessplayerlvl() {
  _impl_.chessplayerlvl_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_chessplayerlvl() const {
  return _impl_.chessplayerlvl_;
}
inline uint32_t CSDTPvpPlayerStat::chessplayerlvl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ChessPlayerLvl)
  return _internal_chessplayerlvl();
}
inline void CSDTPvpPlayerStat::_internal_set_chessplayerlvl(uint32_t value) {
  
  _impl_.chessplayerlvl_ = value;
}
inline void CSDTPvpPlayerStat::set_chessplayerlvl(uint32_t value) {
  _internal_set_chessplayerlvl(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ChessPlayerLvl)
}

// uint32 Asyn = 18;
inline void CSDTPvpPlayerStat::clear_asyn() {
  _impl_.asyn_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_asyn() const {
  return _impl_.asyn_;
}
inline uint32_t CSDTPvpPlayerStat::asyn() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Asyn)
  return _internal_asyn();
}
inline void CSDTPvpPlayerStat::_internal_set_asyn(uint32_t value) {
  
  _impl_.asyn_ = value;
}
inline void CSDTPvpPlayerStat::set_asyn(uint32_t value) {
  _internal_set_asyn(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Asyn)
}

// bool IsDeath = 19;
inline void CSDTPvpPlayerStat::clear_isdeath() {
  _impl_.isdeath_ = false;
}
inline bool CSDTPvpPlayerStat::_internal_isdeath() const {
  return _impl_.isdeath_;
}
inline bool CSDTPvpPlayerStat::isdeath() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.IsDeath)
  return _internal_isdeath();
}
inline void CSDTPvpPlayerStat::_internal_set_isdeath(bool value) {
  
  _impl_.isdeath_ = value;
}
inline void CSDTPvpPlayerStat::set_isdeath(bool value) {
  _internal_set_isdeath(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.IsDeath)
}

// uint32 TeamId = 20;
inline void CSDTPvpPlayerStat::clear_teamid() {
  _impl_.teamid_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint32_t CSDTPvpPlayerStat::teamid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.TeamId)
  return _internal_teamid();
}
inline void CSDTPvpPlayerStat::_internal_set_teamid(uint32_t value) {
  
  _impl_.teamid_ = value;
}
inline void CSDTPvpPlayerStat::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.TeamId)
}

// uint32 TeamPlayerNum = 21;
inline void CSDTPvpPlayerStat::clear_teamplayernum() {
  _impl_.teamplayernum_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_teamplayernum() const {
  return _impl_.teamplayernum_;
}
inline uint32_t CSDTPvpPlayerStat::teamplayernum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.TeamPlayerNum)
  return _internal_teamplayernum();
}
inline void CSDTPvpPlayerStat::_internal_set_teamplayernum(uint32_t value) {
  
  _impl_.teamplayernum_ = value;
}
inline void CSDTPvpPlayerStat::set_teamplayernum(uint32_t value) {
  _internal_set_teamplayernum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.TeamPlayerNum)
}

// uint32 Money = 22;
inline void CSDTPvpPlayerStat::clear_money() {
  _impl_.money_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_money() const {
  return _impl_.money_;
}
inline uint32_t CSDTPvpPlayerStat::money() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Money)
  return _internal_money();
}
inline void CSDTPvpPlayerStat::_internal_set_money(uint32_t value) {
  
  _impl_.money_ = value;
}
inline void CSDTPvpPlayerStat::set_money(uint32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Money)
}

// map<uint32, uint32> CurShowItems = 23;
inline int CSDTPvpPlayerStat::_internal_curshowitems_size() const {
  return _impl_.curshowitems_.size();
}
inline int CSDTPvpPlayerStat::curshowitems_size() const {
  return _internal_curshowitems_size();
}
inline void CSDTPvpPlayerStat::clear_curshowitems() {
  _impl_.curshowitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::_internal_curshowitems() const {
  return _impl_.curshowitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::curshowitems() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPvpPlayerStat.CurShowItems)
  return _internal_curshowitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_curshowitems() {
  return _impl_.curshowitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::mutable_curshowitems() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPvpPlayerStat.CurShowItems)
  return _internal_mutable_curshowitems();
}

// map<uint32, uint32> ChessRace = 24;
inline int CSDTPvpPlayerStat::_internal_chessrace_size() const {
  return _impl_.chessrace_.size();
}
inline int CSDTPvpPlayerStat::chessrace_size() const {
  return _internal_chessrace_size();
}
inline void CSDTPvpPlayerStat::clear_chessrace() {
  _impl_.chessrace_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::_internal_chessrace() const {
  return _impl_.chessrace_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::chessrace() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPvpPlayerStat.ChessRace)
  return _internal_chessrace();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_chessrace() {
  return _impl_.chessrace_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::mutable_chessrace() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPvpPlayerStat.ChessRace)
  return _internal_mutable_chessrace();
}

// map<uint32, uint32> ChessPro = 25;
inline int CSDTPvpPlayerStat::_internal_chesspro_size() const {
  return _impl_.chesspro_.size();
}
inline int CSDTPvpPlayerStat::chesspro_size() const {
  return _internal_chesspro_size();
}
inline void CSDTPvpPlayerStat::clear_chesspro() {
  _impl_.chesspro_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::_internal_chesspro() const {
  return _impl_.chesspro_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::chesspro() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPvpPlayerStat.ChessPro)
  return _internal_chesspro();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_chesspro() {
  return _impl_.chesspro_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::mutable_chesspro() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPvpPlayerStat.ChessPro)
  return _internal_mutable_chesspro();
}

// uint32 TotalValue = 26;
inline void CSDTPvpPlayerStat::clear_totalvalue() {
  _impl_.totalvalue_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_totalvalue() const {
  return _impl_.totalvalue_;
}
inline uint32_t CSDTPvpPlayerStat::totalvalue() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.TotalValue)
  return _internal_totalvalue();
}
inline void CSDTPvpPlayerStat::_internal_set_totalvalue(uint32_t value) {
  
  _impl_.totalvalue_ = value;
}
inline void CSDTPvpPlayerStat::set_totalvalue(uint32_t value) {
  _internal_set_totalvalue(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.TotalValue)
}

// repeated uint32 ShareChessList = 27;
inline int CSDTPvpPlayerStat::_internal_sharechesslist_size() const {
  return _impl_.sharechesslist_.size();
}
inline int CSDTPvpPlayerStat::sharechesslist_size() const {
  return _internal_sharechesslist_size();
}
inline void CSDTPvpPlayerStat::clear_sharechesslist() {
  _impl_.sharechesslist_.Clear();
}
inline uint32_t CSDTPvpPlayerStat::_internal_sharechesslist(int index) const {
  return _impl_.sharechesslist_.Get(index);
}
inline uint32_t CSDTPvpPlayerStat::sharechesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ShareChessList)
  return _internal_sharechesslist(index);
}
inline void CSDTPvpPlayerStat::set_sharechesslist(int index, uint32_t value) {
  _impl_.sharechesslist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ShareChessList)
}
inline void CSDTPvpPlayerStat::_internal_add_sharechesslist(uint32_t value) {
  _impl_.sharechesslist_.Add(value);
}
inline void CSDTPvpPlayerStat::add_sharechesslist(uint32_t value) {
  _internal_add_sharechesslist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.ShareChessList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::_internal_sharechesslist() const {
  return _impl_.sharechesslist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::sharechesslist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.ShareChessList)
  return _internal_sharechesslist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_sharechesslist() {
  return &_impl_.sharechesslist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::mutable_sharechesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.ShareChessList)
  return _internal_mutable_sharechesslist();
}

// repeated .msg.CSDTFetters Fetters = 28;
inline int CSDTPvpPlayerStat::_internal_fetters_size() const {
  return _impl_.fetters_.size();
}
inline int CSDTPvpPlayerStat::fetters_size() const {
  return _internal_fetters_size();
}
inline void CSDTPvpPlayerStat::clear_fetters() {
  _impl_.fetters_.Clear();
}
inline ::msg::CSDTFetters* CSDTPvpPlayerStat::mutable_fetters(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.Fetters)
  return _impl_.fetters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTFetters >*
CSDTPvpPlayerStat::mutable_fetters() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.Fetters)
  return &_impl_.fetters_;
}
inline const ::msg::CSDTFetters& CSDTPvpPlayerStat::_internal_fetters(int index) const {
  return _impl_.fetters_.Get(index);
}
inline const ::msg::CSDTFetters& CSDTPvpPlayerStat::fetters(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Fetters)
  return _internal_fetters(index);
}
inline ::msg::CSDTFetters* CSDTPvpPlayerStat::_internal_add_fetters() {
  return _impl_.fetters_.Add();
}
inline ::msg::CSDTFetters* CSDTPvpPlayerStat::add_fetters() {
  ::msg::CSDTFetters* _add = _internal_add_fetters();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.Fetters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTFetters >&
CSDTPvpPlayerStat::fetters() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.Fetters)
  return _impl_.fetters_;
}

// repeated .msg.Contest ShowChessList = 29;
inline int CSDTPvpPlayerStat::_internal_showchesslist_size() const {
  return _impl_.showchesslist_.size();
}
inline int CSDTPvpPlayerStat::showchesslist_size() const {
  return _internal_showchesslist_size();
}
inline void CSDTPvpPlayerStat::clear_showchesslist() {
  _impl_.showchesslist_.Clear();
}
inline ::msg::Contest* CSDTPvpPlayerStat::mutable_showchesslist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.ShowChessList)
  return _impl_.showchesslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >*
CSDTPvpPlayerStat::mutable_showchesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.ShowChessList)
  return &_impl_.showchesslist_;
}
inline const ::msg::Contest& CSDTPvpPlayerStat::_internal_showchesslist(int index) const {
  return _impl_.showchesslist_.Get(index);
}
inline const ::msg::Contest& CSDTPvpPlayerStat::showchesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ShowChessList)
  return _internal_showchesslist(index);
}
inline ::msg::Contest* CSDTPvpPlayerStat::_internal_add_showchesslist() {
  return _impl_.showchesslist_.Add();
}
inline ::msg::Contest* CSDTPvpPlayerStat::add_showchesslist() {
  ::msg::Contest* _add = _internal_add_showchesslist();
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.ShowChessList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Contest >&
CSDTPvpPlayerStat::showchesslist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.ShowChessList)
  return _impl_.showchesslist_;
}

// .msg.CSDTPvpMvp PvpMvp = 30;
inline bool CSDTPvpPlayerStat::_internal_has_pvpmvp() const {
  return this != internal_default_instance() && _impl_.pvpmvp_ != nullptr;
}
inline bool CSDTPvpPlayerStat::has_pvpmvp() const {
  return _internal_has_pvpmvp();
}
inline void CSDTPvpPlayerStat::clear_pvpmvp() {
  if (GetArenaForAllocation() == nullptr && _impl_.pvpmvp_ != nullptr) {
    delete _impl_.pvpmvp_;
  }
  _impl_.pvpmvp_ = nullptr;
}
inline const ::msg::CSDTPvpMvp& CSDTPvpPlayerStat::_internal_pvpmvp() const {
  const ::msg::CSDTPvpMvp* p = _impl_.pvpmvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPvpMvp&>(
      ::msg::_CSDTPvpMvp_default_instance_);
}
inline const ::msg::CSDTPvpMvp& CSDTPvpPlayerStat::pvpmvp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.PvpMvp)
  return _internal_pvpmvp();
}
inline void CSDTPvpPlayerStat::unsafe_arena_set_allocated_pvpmvp(
    ::msg::CSDTPvpMvp* pvpmvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpmvp_);
  }
  _impl_.pvpmvp_ = pvpmvp;
  if (pvpmvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPvpPlayerStat.PvpMvp)
}
inline ::msg::CSDTPvpMvp* CSDTPvpPlayerStat::release_pvpmvp() {
  
  ::msg::CSDTPvpMvp* temp = _impl_.pvpmvp_;
  _impl_.pvpmvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPvpMvp* CSDTPvpPlayerStat::unsafe_arena_release_pvpmvp() {
  // @@protoc_insertion_point(field_release:msg.CSDTPvpPlayerStat.PvpMvp)
  
  ::msg::CSDTPvpMvp* temp = _impl_.pvpmvp_;
  _impl_.pvpmvp_ = nullptr;
  return temp;
}
inline ::msg::CSDTPvpMvp* CSDTPvpPlayerStat::_internal_mutable_pvpmvp() {
  
  if (_impl_.pvpmvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPvpMvp>(GetArenaForAllocation());
    _impl_.pvpmvp_ = p;
  }
  return _impl_.pvpmvp_;
}
inline ::msg::CSDTPvpMvp* CSDTPvpPlayerStat::mutable_pvpmvp() {
  ::msg::CSDTPvpMvp* _msg = _internal_mutable_pvpmvp();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.PvpMvp)
  return _msg;
}
inline void CSDTPvpPlayerStat::set_allocated_pvpmvp(::msg::CSDTPvpMvp* pvpmvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pvpmvp_;
  }
  if (pvpmvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pvpmvp);
    if (message_arena != submessage_arena) {
      pvpmvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpmvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpmvp_ = pvpmvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPvpPlayerStat.PvpMvp)
}

// string Country = 31;
inline void CSDTPvpPlayerStat::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSDTPvpPlayerStat::country() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPvpPlayerStat::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Country)
}
inline std::string* CSDTPvpPlayerStat::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.Country)
  return _s;
}
inline const std::string& CSDTPvpPlayerStat::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSDTPvpPlayerStat::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSDTPvpPlayerStat.Country)
  return _impl_.country_.Release();
}
inline void CSDTPvpPlayerStat::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPvpPlayerStat.Country)
}

// bool LeaveInAdvance = 32;
inline void CSDTPvpPlayerStat::clear_leaveinadvance() {
  _impl_.leaveinadvance_ = false;
}
inline bool CSDTPvpPlayerStat::_internal_leaveinadvance() const {
  return _impl_.leaveinadvance_;
}
inline bool CSDTPvpPlayerStat::leaveinadvance() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.LeaveInAdvance)
  return _internal_leaveinadvance();
}
inline void CSDTPvpPlayerStat::_internal_set_leaveinadvance(bool value) {
  
  _impl_.leaveinadvance_ = value;
}
inline void CSDTPvpPlayerStat::set_leaveinadvance(bool value) {
  _internal_set_leaveinadvance(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.LeaveInAdvance)
}

// uint32 AFKTime = 33;
inline void CSDTPvpPlayerStat::clear_afktime() {
  _impl_.afktime_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_afktime() const {
  return _impl_.afktime_;
}
inline uint32_t CSDTPvpPlayerStat::afktime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.AFKTime)
  return _internal_afktime();
}
inline void CSDTPvpPlayerStat::_internal_set_afktime(uint32_t value) {
  
  _impl_.afktime_ = value;
}
inline void CSDTPvpPlayerStat::set_afktime(uint32_t value) {
  _internal_set_afktime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.AFKTime)
}

// uint32 Province = 34;
inline void CSDTPvpPlayerStat::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t CSDTPvpPlayerStat::province() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Province)
  return _internal_province();
}
inline void CSDTPvpPlayerStat::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void CSDTPvpPlayerStat::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Province)
}

// .msg.TEAMGROUP Group = 35;
inline void CSDTPvpPlayerStat::clear_group() {
  _impl_.group_ = 0;
}
inline ::msg::TEAMGROUP CSDTPvpPlayerStat::_internal_group() const {
  return static_cast< ::msg::TEAMGROUP >(_impl_.group_);
}
inline ::msg::TEAMGROUP CSDTPvpPlayerStat::group() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Group)
  return _internal_group();
}
inline void CSDTPvpPlayerStat::_internal_set_group(::msg::TEAMGROUP value) {
  
  _impl_.group_ = value;
}
inline void CSDTPvpPlayerStat::set_group(::msg::TEAMGROUP value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Group)
}

// map<uint32, uint32> UnlockedChess = 36;
inline int CSDTPvpPlayerStat::_internal_unlockedchess_size() const {
  return _impl_.unlockedchess_.size();
}
inline int CSDTPvpPlayerStat::unlockedchess_size() const {
  return _internal_unlockedchess_size();
}
inline void CSDTPvpPlayerStat::clear_unlockedchess() {
  _impl_.unlockedchess_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::_internal_unlockedchess() const {
  return _impl_.unlockedchess_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTPvpPlayerStat::unlockedchess() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPvpPlayerStat.UnlockedChess)
  return _internal_unlockedchess();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_unlockedchess() {
  return _impl_.unlockedchess_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTPvpPlayerStat::mutable_unlockedchess() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPvpPlayerStat.UnlockedChess)
  return _internal_mutable_unlockedchess();
}

// repeated uint32 PassportTypeIds = 37;
inline int CSDTPvpPlayerStat::_internal_passporttypeids_size() const {
  return _impl_.passporttypeids_.size();
}
inline int CSDTPvpPlayerStat::passporttypeids_size() const {
  return _internal_passporttypeids_size();
}
inline void CSDTPvpPlayerStat::clear_passporttypeids() {
  _impl_.passporttypeids_.Clear();
}
inline uint32_t CSDTPvpPlayerStat::_internal_passporttypeids(int index) const {
  return _impl_.passporttypeids_.Get(index);
}
inline uint32_t CSDTPvpPlayerStat::passporttypeids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.PassportTypeIds)
  return _internal_passporttypeids(index);
}
inline void CSDTPvpPlayerStat::set_passporttypeids(int index, uint32_t value) {
  _impl_.passporttypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.PassportTypeIds)
}
inline void CSDTPvpPlayerStat::_internal_add_passporttypeids(uint32_t value) {
  _impl_.passporttypeids_.Add(value);
}
inline void CSDTPvpPlayerStat::add_passporttypeids(uint32_t value) {
  _internal_add_passporttypeids(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.PassportTypeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::_internal_passporttypeids() const {
  return _impl_.passporttypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::passporttypeids() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.PassportTypeIds)
  return _internal_passporttypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_passporttypeids() {
  return &_impl_.passporttypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::mutable_passporttypeids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.PassportTypeIds)
  return _internal_mutable_passporttypeids();
}

// uint32 PlayerIndex = 38;
inline void CSDTPvpPlayerStat::clear_playerindex() {
  _impl_.playerindex_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline uint32_t CSDTPvpPlayerStat::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.PlayerIndex)
  return _internal_playerindex();
}
inline void CSDTPvpPlayerStat::_internal_set_playerindex(uint32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CSDTPvpPlayerStat::set_playerindex(uint32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.PlayerIndex)
}

// int32 CurrencyID = 39;
inline void CSDTPvpPlayerStat::clear_currencyid() {
  _impl_.currencyid_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_currencyid() const {
  return _impl_.currencyid_;
}
inline int32_t CSDTPvpPlayerStat::currencyid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.CurrencyID)
  return _internal_currencyid();
}
inline void CSDTPvpPlayerStat::_internal_set_currencyid(int32_t value) {
  
  _impl_.currencyid_ = value;
}
inline void CSDTPvpPlayerStat::set_currencyid(int32_t value) {
  _internal_set_currencyid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.CurrencyID)
}

// int32 SurplusCurrency = 40;
inline void CSDTPvpPlayerStat::clear_surpluscurrency() {
  _impl_.surpluscurrency_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_surpluscurrency() const {
  return _impl_.surpluscurrency_;
}
inline int32_t CSDTPvpPlayerStat::surpluscurrency() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.SurplusCurrency)
  return _internal_surpluscurrency();
}
inline void CSDTPvpPlayerStat::_internal_set_surpluscurrency(int32_t value) {
  
  _impl_.surpluscurrency_ = value;
}
inline void CSDTPvpPlayerStat::set_surpluscurrency(int32_t value) {
  _internal_set_surpluscurrency(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.SurplusCurrency)
}

// int32 Income = 41;
inline void CSDTPvpPlayerStat::clear_income() {
  _impl_.income_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_income() const {
  return _impl_.income_;
}
inline int32_t CSDTPvpPlayerStat::income() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Income)
  return _internal_income();
}
inline void CSDTPvpPlayerStat::_internal_set_income(int32_t value) {
  
  _impl_.income_ = value;
}
inline void CSDTPvpPlayerStat::set_income(int32_t value) {
  _internal_set_income(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Income)
}

// .msg.CHANELTYPE ChannelType = 42;
inline void CSDTPvpPlayerStat::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE CSDTPvpPlayerStat::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE CSDTPvpPlayerStat::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ChannelType)
  return _internal_channeltype();
}
inline void CSDTPvpPlayerStat::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void CSDTPvpPlayerStat::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ChannelType)
}

// string channelUsrId = 43;
inline void CSDTPvpPlayerStat::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& CSDTPvpPlayerStat::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.channelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPvpPlayerStat::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.channelUsrId)
}
inline std::string* CSDTPvpPlayerStat::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPvpPlayerStat.channelUsrId)
  return _s;
}
inline const std::string& CSDTPvpPlayerStat::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void CSDTPvpPlayerStat::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPvpPlayerStat::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.CSDTPvpPlayerStat.channelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void CSDTPvpPlayerStat::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPvpPlayerStat.channelUsrId)
}

// .msg.UserRestrictType RestrictType = 44;
inline void CSDTPvpPlayerStat::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType CSDTPvpPlayerStat::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType CSDTPvpPlayerStat::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.RestrictType)
  return _internal_restricttype();
}
inline void CSDTPvpPlayerStat::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void CSDTPvpPlayerStat::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.RestrictType)
}

// uint32 PlayerRank = 45;
inline void CSDTPvpPlayerStat::clear_playerrank() {
  _impl_.playerrank_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_playerrank() const {
  return _impl_.playerrank_;
}
inline uint32_t CSDTPvpPlayerStat::playerrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.PlayerRank)
  return _internal_playerrank();
}
inline void CSDTPvpPlayerStat::_internal_set_playerrank(uint32_t value) {
  
  _impl_.playerrank_ = value;
}
inline void CSDTPvpPlayerStat::set_playerrank(uint32_t value) {
  _internal_set_playerrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.PlayerRank)
}

// int32 MoneyCost = 46;
inline void CSDTPvpPlayerStat::clear_moneycost() {
  _impl_.moneycost_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_moneycost() const {
  return _impl_.moneycost_;
}
inline int32_t CSDTPvpPlayerStat::moneycost() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.MoneyCost)
  return _internal_moneycost();
}
inline void CSDTPvpPlayerStat::_internal_set_moneycost(int32_t value) {
  
  _impl_.moneycost_ = value;
}
inline void CSDTPvpPlayerStat::set_moneycost(int32_t value) {
  _internal_set_moneycost(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.MoneyCost)
}

// int32 MoneyIncome = 47;
inline void CSDTPvpPlayerStat::clear_moneyincome() {
  _impl_.moneyincome_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_moneyincome() const {
  return _impl_.moneyincome_;
}
inline int32_t CSDTPvpPlayerStat::moneyincome() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.MoneyIncome)
  return _internal_moneyincome();
}
inline void CSDTPvpPlayerStat::_internal_set_moneyincome(int32_t value) {
  
  _impl_.moneyincome_ = value;
}
inline void CSDTPvpPlayerStat::set_moneyincome(int32_t value) {
  _internal_set_moneyincome(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.MoneyIncome)
}

// uint32 Score = 48;
inline void CSDTPvpPlayerStat::clear_score() {
  _impl_.score_ = 0u;
}
inline uint32_t CSDTPvpPlayerStat::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t CSDTPvpPlayerStat::score() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.Score)
  return _internal_score();
}
inline void CSDTPvpPlayerStat::_internal_set_score(uint32_t value) {
  
  _impl_.score_ = value;
}
inline void CSDTPvpPlayerStat::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.Score)
}

// repeated uint32 ChoseCardGroup = 49;
inline int CSDTPvpPlayerStat::_internal_chosecardgroup_size() const {
  return _impl_.chosecardgroup_.size();
}
inline int CSDTPvpPlayerStat::chosecardgroup_size() const {
  return _internal_chosecardgroup_size();
}
inline void CSDTPvpPlayerStat::clear_chosecardgroup() {
  _impl_.chosecardgroup_.Clear();
}
inline uint32_t CSDTPvpPlayerStat::_internal_chosecardgroup(int index) const {
  return _impl_.chosecardgroup_.Get(index);
}
inline uint32_t CSDTPvpPlayerStat::chosecardgroup(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ChoseCardGroup)
  return _internal_chosecardgroup(index);
}
inline void CSDTPvpPlayerStat::set_chosecardgroup(int index, uint32_t value) {
  _impl_.chosecardgroup_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ChoseCardGroup)
}
inline void CSDTPvpPlayerStat::_internal_add_chosecardgroup(uint32_t value) {
  _impl_.chosecardgroup_.Add(value);
}
inline void CSDTPvpPlayerStat::add_chosecardgroup(uint32_t value) {
  _internal_add_chosecardgroup(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.ChoseCardGroup)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::_internal_chosecardgroup() const {
  return _impl_.chosecardgroup_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::chosecardgroup() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.ChoseCardGroup)
  return _internal_chosecardgroup();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_chosecardgroup() {
  return &_impl_.chosecardgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::mutable_chosecardgroup() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.ChoseCardGroup)
  return _internal_mutable_chosecardgroup();
}

// map<uint32, .msg.KernelItem> PveItems = 50;
inline int CSDTPvpPlayerStat::_internal_pveitems_size() const {
  return _impl_.pveitems_.size();
}
inline int CSDTPvpPlayerStat::pveitems_size() const {
  return _internal_pveitems_size();
}
inline void CSDTPvpPlayerStat::clear_pveitems() {
  _impl_.pveitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >&
CSDTPvpPlayerStat::_internal_pveitems() const {
  return _impl_.pveitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >&
CSDTPvpPlayerStat::pveitems() const {
  // @@protoc_insertion_point(field_map:msg.CSDTPvpPlayerStat.PveItems)
  return _internal_pveitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >*
CSDTPvpPlayerStat::_internal_mutable_pveitems() {
  return _impl_.pveitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >*
CSDTPvpPlayerStat::mutable_pveitems() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTPvpPlayerStat.PveItems)
  return _internal_mutable_pveitems();
}

// repeated uint32 AllChoseCardGroup = 51;
inline int CSDTPvpPlayerStat::_internal_allchosecardgroup_size() const {
  return _impl_.allchosecardgroup_.size();
}
inline int CSDTPvpPlayerStat::allchosecardgroup_size() const {
  return _internal_allchosecardgroup_size();
}
inline void CSDTPvpPlayerStat::clear_allchosecardgroup() {
  _impl_.allchosecardgroup_.Clear();
}
inline uint32_t CSDTPvpPlayerStat::_internal_allchosecardgroup(int index) const {
  return _impl_.allchosecardgroup_.Get(index);
}
inline uint32_t CSDTPvpPlayerStat::allchosecardgroup(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.AllChoseCardGroup)
  return _internal_allchosecardgroup(index);
}
inline void CSDTPvpPlayerStat::set_allchosecardgroup(int index, uint32_t value) {
  _impl_.allchosecardgroup_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.AllChoseCardGroup)
}
inline void CSDTPvpPlayerStat::_internal_add_allchosecardgroup(uint32_t value) {
  _impl_.allchosecardgroup_.Add(value);
}
inline void CSDTPvpPlayerStat::add_allchosecardgroup(uint32_t value) {
  _internal_add_allchosecardgroup(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPvpPlayerStat.AllChoseCardGroup)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::_internal_allchosecardgroup() const {
  return _impl_.allchosecardgroup_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPvpPlayerStat::allchosecardgroup() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPvpPlayerStat.AllChoseCardGroup)
  return _internal_allchosecardgroup();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::_internal_mutable_allchosecardgroup() {
  return &_impl_.allchosecardgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPvpPlayerStat::mutable_allchosecardgroup() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPvpPlayerStat.AllChoseCardGroup)
  return _internal_mutable_allchosecardgroup();
}

// .msg.EXCHANGESTATE ExchangeState = 52;
inline void CSDTPvpPlayerStat::clear_exchangestate() {
  _impl_.exchangestate_ = 0;
}
inline ::msg::EXCHANGESTATE CSDTPvpPlayerStat::_internal_exchangestate() const {
  return static_cast< ::msg::EXCHANGESTATE >(_impl_.exchangestate_);
}
inline ::msg::EXCHANGESTATE CSDTPvpPlayerStat::exchangestate() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.ExchangeState)
  return _internal_exchangestate();
}
inline void CSDTPvpPlayerStat::_internal_set_exchangestate(::msg::EXCHANGESTATE value) {
  
  _impl_.exchangestate_ = value;
}
inline void CSDTPvpPlayerStat::set_exchangestate(::msg::EXCHANGESTATE value) {
  _internal_set_exchangestate(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.ExchangeState)
}

// int32 TaskId = 53;
inline void CSDTPvpPlayerStat::clear_taskid() {
  _impl_.taskid_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_taskid() const {
  return _impl_.taskid_;
}
inline int32_t CSDTPvpPlayerStat::taskid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.TaskId)
  return _internal_taskid();
}
inline void CSDTPvpPlayerStat::_internal_set_taskid(int32_t value) {
  
  _impl_.taskid_ = value;
}
inline void CSDTPvpPlayerStat::set_taskid(int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.TaskId)
}

// bool IsTaskComplete = 54;
inline void CSDTPvpPlayerStat::clear_istaskcomplete() {
  _impl_.istaskcomplete_ = false;
}
inline bool CSDTPvpPlayerStat::_internal_istaskcomplete() const {
  return _impl_.istaskcomplete_;
}
inline bool CSDTPvpPlayerStat::istaskcomplete() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.IsTaskComplete)
  return _internal_istaskcomplete();
}
inline void CSDTPvpPlayerStat::_internal_set_istaskcomplete(bool value) {
  
  _impl_.istaskcomplete_ = value;
}
inline void CSDTPvpPlayerStat::set_istaskcomplete(bool value) {
  _internal_set_istaskcomplete(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.IsTaskComplete)
}

// int32 CurTaskProgress = 55;
inline void CSDTPvpPlayerStat::clear_curtaskprogress() {
  _impl_.curtaskprogress_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_curtaskprogress() const {
  return _impl_.curtaskprogress_;
}
inline int32_t CSDTPvpPlayerStat::curtaskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.CurTaskProgress)
  return _internal_curtaskprogress();
}
inline void CSDTPvpPlayerStat::_internal_set_curtaskprogress(int32_t value) {
  
  _impl_.curtaskprogress_ = value;
}
inline void CSDTPvpPlayerStat::set_curtaskprogress(int32_t value) {
  _internal_set_curtaskprogress(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.CurTaskProgress)
}

// int32 MaxTaskProgress = 56;
inline void CSDTPvpPlayerStat::clear_maxtaskprogress() {
  _impl_.maxtaskprogress_ = 0;
}
inline int32_t CSDTPvpPlayerStat::_internal_maxtaskprogress() const {
  return _impl_.maxtaskprogress_;
}
inline int32_t CSDTPvpPlayerStat::maxtaskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPvpPlayerStat.MaxTaskProgress)
  return _internal_maxtaskprogress();
}
inline void CSDTPvpPlayerStat::_internal_set_maxtaskprogress(int32_t value) {
  
  _impl_.maxtaskprogress_ = value;
}
inline void CSDTPvpPlayerStat::set_maxtaskprogress(int32_t value) {
  _internal_set_maxtaskprogress(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPvpPlayerStat.MaxTaskProgress)
}

// -------------------------------------------------------------------

// KernelItem

// uint32 Id = 1;
inline void KernelItem::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t KernelItem::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t KernelItem::id() const {
  // @@protoc_insertion_point(field_get:msg.KernelItem.Id)
  return _internal_id();
}
inline void KernelItem::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void KernelItem::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.KernelItem.Id)
}

// uint32 Count = 2;
inline void KernelItem::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t KernelItem::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t KernelItem::count() const {
  // @@protoc_insertion_point(field_get:msg.KernelItem.Count)
  return _internal_count();
}
inline void KernelItem::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void KernelItem::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.KernelItem.Count)
}

// -------------------------------------------------------------------

// CSDTFetters

// uint32 ResId = 1;
inline void CSDTFetters::clear_resid() {
  _impl_.resid_ = 0u;
}
inline uint32_t CSDTFetters::_internal_resid() const {
  return _impl_.resid_;
}
inline uint32_t CSDTFetters::resid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTFetters.ResId)
  return _internal_resid();
}
inline void CSDTFetters::_internal_set_resid(uint32_t value) {
  
  _impl_.resid_ = value;
}
inline void CSDTFetters::set_resid(uint32_t value) {
  _internal_set_resid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTFetters.ResId)
}

// uint32 EffectNum = 2;
inline void CSDTFetters::clear_effectnum() {
  _impl_.effectnum_ = 0u;
}
inline uint32_t CSDTFetters::_internal_effectnum() const {
  return _impl_.effectnum_;
}
inline uint32_t CSDTFetters::effectnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTFetters.EffectNum)
  return _internal_effectnum();
}
inline void CSDTFetters::_internal_set_effectnum(uint32_t value) {
  
  _impl_.effectnum_ = value;
}
inline void CSDTFetters::set_effectnum(uint32_t value) {
  _internal_set_effectnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTFetters.EffectNum)
}

// uint32 MaxEffectNum = 3;
inline void CSDTFetters::clear_maxeffectnum() {
  _impl_.maxeffectnum_ = 0u;
}
inline uint32_t CSDTFetters::_internal_maxeffectnum() const {
  return _impl_.maxeffectnum_;
}
inline uint32_t CSDTFetters::maxeffectnum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTFetters.MaxEffectNum)
  return _internal_maxeffectnum();
}
inline void CSDTFetters::_internal_set_maxeffectnum(uint32_t value) {
  
  _impl_.maxeffectnum_ = value;
}
inline void CSDTFetters::set_maxeffectnum(uint32_t value) {
  _internal_set_maxeffectnum(value);
  // @@protoc_insertion_point(field_set:msg.CSDTFetters.MaxEffectNum)
}

// -------------------------------------------------------------------

// CSDTPlayerFinish

// uint32 PlayerIndex = 1;
inline void CSDTPlayerFinish::clear_playerindex() {
  _impl_.playerindex_ = 0u;
}
inline uint32_t CSDTPlayerFinish::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline uint32_t CSDTPlayerFinish::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerFinish.PlayerIndex)
  return _internal_playerindex();
}
inline void CSDTPlayerFinish::_internal_set_playerindex(uint32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CSDTPlayerFinish::set_playerindex(uint32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerFinish.PlayerIndex)
}

// uint32 DeathIndex = 2;
inline void CSDTPlayerFinish::clear_deathindex() {
  _impl_.deathindex_ = 0u;
}
inline uint32_t CSDTPlayerFinish::_internal_deathindex() const {
  return _impl_.deathindex_;
}
inline uint32_t CSDTPlayerFinish::deathindex() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerFinish.DeathIndex)
  return _internal_deathindex();
}
inline void CSDTPlayerFinish::_internal_set_deathindex(uint32_t value) {
  
  _impl_.deathindex_ = value;
}
inline void CSDTPlayerFinish::set_deathindex(uint32_t value) {
  _internal_set_deathindex(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerFinish.DeathIndex)
}

// uint32 FrameIndex = 3;
inline void CSDTPlayerFinish::clear_frameindex() {
  _impl_.frameindex_ = 0u;
}
inline uint32_t CSDTPlayerFinish::_internal_frameindex() const {
  return _impl_.frameindex_;
}
inline uint32_t CSDTPlayerFinish::frameindex() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerFinish.FrameIndex)
  return _internal_frameindex();
}
inline void CSDTPlayerFinish::_internal_set_frameindex(uint32_t value) {
  
  _impl_.frameindex_ = value;
}
inline void CSDTPlayerFinish::set_frameindex(uint32_t value) {
  _internal_set_frameindex(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPlayerFinish.FrameIndex)
}

// .msg.CSDTPvpCampResult CampResult = 4;
inline bool CSDTPlayerFinish::_internal_has_campresult() const {
  return this != internal_default_instance() && _impl_.campresult_ != nullptr;
}
inline bool CSDTPlayerFinish::has_campresult() const {
  return _internal_has_campresult();
}
inline void CSDTPlayerFinish::clear_campresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.campresult_ != nullptr) {
    delete _impl_.campresult_;
  }
  _impl_.campresult_ = nullptr;
}
inline const ::msg::CSDTPvpCampResult& CSDTPlayerFinish::_internal_campresult() const {
  const ::msg::CSDTPvpCampResult* p = _impl_.campresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPvpCampResult&>(
      ::msg::_CSDTPvpCampResult_default_instance_);
}
inline const ::msg::CSDTPvpCampResult& CSDTPlayerFinish::campresult() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerFinish.CampResult)
  return _internal_campresult();
}
inline void CSDTPlayerFinish::unsafe_arena_set_allocated_campresult(
    ::msg::CSDTPvpCampResult* campresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.campresult_);
  }
  _impl_.campresult_ = campresult;
  if (campresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerFinish.CampResult)
}
inline ::msg::CSDTPvpCampResult* CSDTPlayerFinish::release_campresult() {
  
  ::msg::CSDTPvpCampResult* temp = _impl_.campresult_;
  _impl_.campresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPvpCampResult* CSDTPlayerFinish::unsafe_arena_release_campresult() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerFinish.CampResult)
  
  ::msg::CSDTPvpCampResult* temp = _impl_.campresult_;
  _impl_.campresult_ = nullptr;
  return temp;
}
inline ::msg::CSDTPvpCampResult* CSDTPlayerFinish::_internal_mutable_campresult() {
  
  if (_impl_.campresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPvpCampResult>(GetArenaForAllocation());
    _impl_.campresult_ = p;
  }
  return _impl_.campresult_;
}
inline ::msg::CSDTPvpCampResult* CSDTPlayerFinish::mutable_campresult() {
  ::msg::CSDTPvpCampResult* _msg = _internal_mutable_campresult();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerFinish.CampResult)
  return _msg;
}
inline void CSDTPlayerFinish::set_allocated_campresult(::msg::CSDTPvpCampResult* campresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.campresult_;
  }
  if (campresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(campresult);
    if (message_arena != submessage_arena) {
      campresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, campresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.campresult_ = campresult;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerFinish.CampResult)
}

// .msg.CSDTPvpStat Stat = 5;
inline bool CSDTPlayerFinish::_internal_has_stat() const {
  return this != internal_default_instance() && _impl_.stat_ != nullptr;
}
inline bool CSDTPlayerFinish::has_stat() const {
  return _internal_has_stat();
}
inline void CSDTPlayerFinish::clear_stat() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
}
inline const ::msg::CSDTPvpStat& CSDTPlayerFinish::_internal_stat() const {
  const ::msg::CSDTPvpStat* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPvpStat&>(
      ::msg::_CSDTPvpStat_default_instance_);
}
inline const ::msg::CSDTPvpStat& CSDTPlayerFinish::stat() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerFinish.Stat)
  return _internal_stat();
}
inline void CSDTPlayerFinish::unsafe_arena_set_allocated_stat(
    ::msg::CSDTPvpStat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerFinish.Stat)
}
inline ::msg::CSDTPvpStat* CSDTPlayerFinish::release_stat() {
  
  ::msg::CSDTPvpStat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPvpStat* CSDTPlayerFinish::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerFinish.Stat)
  
  ::msg::CSDTPvpStat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::msg::CSDTPvpStat* CSDTPlayerFinish::_internal_mutable_stat() {
  
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPvpStat>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::msg::CSDTPvpStat* CSDTPlayerFinish::mutable_stat() {
  ::msg::CSDTPvpStat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerFinish.Stat)
  return _msg;
}
inline void CSDTPlayerFinish::set_allocated_stat(::msg::CSDTPvpStat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerFinish.Stat)
}

// -------------------------------------------------------------------

// CSDTMarqueeItem

// int64 Id = 1;
inline void CSDTMarqueeItem::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t CSDTMarqueeItem::_internal_id() const {
  return _impl_.id_;
}
inline int64_t CSDTMarqueeItem::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarqueeItem.Id)
  return _internal_id();
}
inline void CSDTMarqueeItem::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTMarqueeItem::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMarqueeItem.Id)
}

// string Content = 2;
inline void CSDTMarqueeItem::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSDTMarqueeItem::content() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarqueeItem.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTMarqueeItem::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTMarqueeItem.Content)
}
inline std::string* CSDTMarqueeItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMarqueeItem.Content)
  return _s;
}
inline const std::string& CSDTMarqueeItem::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSDTMarqueeItem::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTMarqueeItem::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTMarqueeItem::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSDTMarqueeItem.Content)
  return _impl_.content_.Release();
}
inline void CSDTMarqueeItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMarqueeItem.Content)
}

// int64 StartTime = 3;
inline void CSDTMarqueeItem::clear_starttime() {
  _impl_.starttime_ = int64_t{0};
}
inline int64_t CSDTMarqueeItem::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int64_t CSDTMarqueeItem::starttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarqueeItem.StartTime)
  return _internal_starttime();
}
inline void CSDTMarqueeItem::_internal_set_starttime(int64_t value) {
  
  _impl_.starttime_ = value;
}
inline void CSDTMarqueeItem::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMarqueeItem.StartTime)
}

// int64 EndTime = 4;
inline void CSDTMarqueeItem::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t CSDTMarqueeItem::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t CSDTMarqueeItem::endtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarqueeItem.EndTime)
  return _internal_endtime();
}
inline void CSDTMarqueeItem::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void CSDTMarqueeItem::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMarqueeItem.EndTime)
}

// uint32 Frequency = 5;
inline void CSDTMarqueeItem::clear_frequency() {
  _impl_.frequency_ = 0u;
}
inline uint32_t CSDTMarqueeItem::_internal_frequency() const {
  return _impl_.frequency_;
}
inline uint32_t CSDTMarqueeItem::frequency() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarqueeItem.Frequency)
  return _internal_frequency();
}
inline void CSDTMarqueeItem::_internal_set_frequency(uint32_t value) {
  
  _impl_.frequency_ = value;
}
inline void CSDTMarqueeItem::set_frequency(uint32_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMarqueeItem.Frequency)
}

// uint32 Flag = 6;
inline void CSDTMarqueeItem::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t CSDTMarqueeItem::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t CSDTMarqueeItem::flag() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarqueeItem.Flag)
  return _internal_flag();
}
inline void CSDTMarqueeItem::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void CSDTMarqueeItem::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMarqueeItem.Flag)
}

// -------------------------------------------------------------------

// CSDTMarquee

// repeated .msg.CSDTMarqueeItem Items = 1;
inline int CSDTMarquee::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CSDTMarquee::items_size() const {
  return _internal_items_size();
}
inline void CSDTMarquee::clear_items() {
  _impl_.items_.Clear();
}
inline ::msg::CSDTMarqueeItem* CSDTMarquee::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTMarquee.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMarqueeItem >*
CSDTMarquee::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTMarquee.Items)
  return &_impl_.items_;
}
inline const ::msg::CSDTMarqueeItem& CSDTMarquee::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::msg::CSDTMarqueeItem& CSDTMarquee::items(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTMarquee.Items)
  return _internal_items(index);
}
inline ::msg::CSDTMarqueeItem* CSDTMarquee::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::msg::CSDTMarqueeItem* CSDTMarquee::add_items() {
  ::msg::CSDTMarqueeItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:msg.CSDTMarquee.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMarqueeItem >&
CSDTMarquee::items() const {
  // @@protoc_insertion_point(field_list:msg.CSDTMarquee.Items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// Cond

// .msg.CONDTYPE Type = 1;
inline void Cond::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::CONDTYPE Cond::_internal_type() const {
  return static_cast< ::msg::CONDTYPE >(_impl_.type_);
}
inline ::msg::CONDTYPE Cond::type() const {
  // @@protoc_insertion_point(field_get:msg.Cond.Type)
  return _internal_type();
}
inline void Cond::_internal_set_type(::msg::CONDTYPE value) {
  
  _impl_.type_ = value;
}
inline void Cond::set_type(::msg::CONDTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Cond.Type)
}

// repeated int32 Para = 2;
inline int Cond::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int Cond::para_size() const {
  return _internal_para_size();
}
inline void Cond::clear_para() {
  _impl_.para_.Clear();
}
inline int32_t Cond::_internal_para(int index) const {
  return _impl_.para_.Get(index);
}
inline int32_t Cond::para(int index) const {
  // @@protoc_insertion_point(field_get:msg.Cond.Para)
  return _internal_para(index);
}
inline void Cond::set_para(int index, int32_t value) {
  _impl_.para_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.Cond.Para)
}
inline void Cond::_internal_add_para(int32_t value) {
  _impl_.para_.Add(value);
}
inline void Cond::add_para(int32_t value) {
  _internal_add_para(value);
  // @@protoc_insertion_point(field_add:msg.Cond.Para)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Cond::_internal_para() const {
  return _impl_.para_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Cond::para() const {
  // @@protoc_insertion_point(field_list:msg.Cond.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Cond::_internal_mutable_para() {
  return &_impl_.para_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Cond::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:msg.Cond.Para)
  return _internal_mutable_para();
}

// string Mode = 3;
inline void Cond::clear_mode() {
  _impl_.mode_.ClearToEmpty();
}
inline const std::string& Cond::mode() const {
  // @@protoc_insertion_point(field_get:msg.Cond.Mode)
  return _internal_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cond::set_mode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Cond.Mode)
}
inline std::string* Cond::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:msg.Cond.Mode)
  return _s;
}
inline const std::string& Cond::_internal_mode() const {
  return _impl_.mode_.Get();
}
inline void Cond::_internal_set_mode(const std::string& value) {
  
  _impl_.mode_.Set(value, GetArenaForAllocation());
}
inline std::string* Cond::_internal_mutable_mode() {
  
  return _impl_.mode_.Mutable(GetArenaForAllocation());
}
inline std::string* Cond::release_mode() {
  // @@protoc_insertion_point(field_release:msg.Cond.Mode)
  return _impl_.mode_.Release();
}
inline void Cond::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  _impl_.mode_.SetAllocated(mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mode_.IsDefault()) {
    _impl_.mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Cond.Mode)
}

// -------------------------------------------------------------------

// CSDTChessPlayerEquip

// uint32 Id = 1;
inline void CSDTChessPlayerEquip::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTChessPlayerEquip::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTChessPlayerEquip::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayerEquip.Id)
  return _internal_id();
}
inline void CSDTChessPlayerEquip::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTChessPlayerEquip::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayerEquip.Id)
}

// string InstanceId = 2;
inline void CSDTChessPlayerEquip::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& CSDTChessPlayerEquip::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayerEquip.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTChessPlayerEquip::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayerEquip.InstanceId)
}
inline std::string* CSDTChessPlayerEquip::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTChessPlayerEquip.InstanceId)
  return _s;
}
inline const std::string& CSDTChessPlayerEquip::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void CSDTChessPlayerEquip::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTChessPlayerEquip::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTChessPlayerEquip::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.CSDTChessPlayerEquip.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void CSDTChessPlayerEquip::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTChessPlayerEquip.InstanceId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTChessPlayer

// uint32 Id = 1;
inline void CSDTChessPlayer::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTChessPlayer::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTChessPlayer::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayer.Id)
  return _internal_id();
}
inline void CSDTChessPlayer::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTChessPlayer::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayer.Id)
}

// uint32 Skin = 2;
inline void CSDTChessPlayer::clear_skin() {
  _impl_.skin_ = 0u;
}
inline uint32_t CSDTChessPlayer::_internal_skin() const {
  return _impl_.skin_;
}
inline uint32_t CSDTChessPlayer::skin() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayer.Skin)
  return _internal_skin();
}
inline void CSDTChessPlayer::_internal_set_skin(uint32_t value) {
  
  _impl_.skin_ = value;
}
inline void CSDTChessPlayer::set_skin(uint32_t value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayer.Skin)
}

// uint32 Action = 3;
inline void CSDTChessPlayer::clear_action() {
  _impl_.action_ = 0u;
}
inline uint32_t CSDTChessPlayer::_internal_action() const {
  return _impl_.action_;
}
inline uint32_t CSDTChessPlayer::action() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayer.Action)
  return _internal_action();
}
inline void CSDTChessPlayer::_internal_set_action(uint32_t value) {
  
  _impl_.action_ = value;
}
inline void CSDTChessPlayer::set_action(uint32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayer.Action)
}

// uint32 Picture = 4;
inline void CSDTChessPlayer::clear_picture() {
  _impl_.picture_ = 0u;
}
inline uint32_t CSDTChessPlayer::_internal_picture() const {
  return _impl_.picture_;
}
inline uint32_t CSDTChessPlayer::picture() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayer.Picture)
  return _internal_picture();
}
inline void CSDTChessPlayer::_internal_set_picture(uint32_t value) {
  
  _impl_.picture_ = value;
}
inline void CSDTChessPlayer::set_picture(uint32_t value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayer.Picture)
}

// uint32 Voice = 5;
inline void CSDTChessPlayer::clear_voice() {
  _impl_.voice_ = 0u;
}
inline uint32_t CSDTChessPlayer::_internal_voice() const {
  return _impl_.voice_;
}
inline uint32_t CSDTChessPlayer::voice() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayer.Voice)
  return _internal_voice();
}
inline void CSDTChessPlayer::_internal_set_voice(uint32_t value) {
  
  _impl_.voice_ = value;
}
inline void CSDTChessPlayer::set_voice(uint32_t value) {
  _internal_set_voice(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayer.Voice)
}

// map<uint32, uint32> Equips = 10;
inline int CSDTChessPlayer::_internal_equips_size() const {
  return _impl_.equips_.size();
}
inline int CSDTChessPlayer::equips_size() const {
  return _internal_equips_size();
}
inline void CSDTChessPlayer::clear_equips() {
  _impl_.equips_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTChessPlayer::_internal_equips() const {
  return _impl_.equips_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTChessPlayer::equips() const {
  // @@protoc_insertion_point(field_map:msg.CSDTChessPlayer.Equips)
  return _internal_equips();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTChessPlayer::_internal_mutable_equips() {
  return _impl_.equips_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTChessPlayer::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTChessPlayer.Equips)
  return _internal_mutable_equips();
}

// map<uint32, .msg.CSDTChessPlayerEquip> Equip = 11;
inline int CSDTChessPlayer::_internal_equip_size() const {
  return _impl_.equip_.size();
}
inline int CSDTChessPlayer::equip_size() const {
  return _internal_equip_size();
}
inline void CSDTChessPlayer::clear_equip() {
  _impl_.equip_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >&
CSDTChessPlayer::_internal_equip() const {
  return _impl_.equip_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >&
CSDTChessPlayer::equip() const {
  // @@protoc_insertion_point(field_map:msg.CSDTChessPlayer.Equip)
  return _internal_equip();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >*
CSDTChessPlayer::_internal_mutable_equip() {
  return _impl_.equip_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >*
CSDTChessPlayer::mutable_equip() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTChessPlayer.Equip)
  return _internal_mutable_equip();
}

// string InstanceId = 12;
inline void CSDTChessPlayer::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& CSDTChessPlayer::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChessPlayer.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTChessPlayer::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTChessPlayer.InstanceId)
}
inline std::string* CSDTChessPlayer::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTChessPlayer.InstanceId)
  return _s;
}
inline const std::string& CSDTChessPlayer::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void CSDTChessPlayer::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTChessPlayer::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTChessPlayer::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.CSDTChessPlayer.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void CSDTChessPlayer::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTChessPlayer.InstanceId)
}

// -------------------------------------------------------------------

// CSDTTelBook

// string Id = 1;
inline void CSDTTelBook::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTTelBook::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTelBook.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTelBook::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTelBook.Id)
}
inline std::string* CSDTTelBook::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTelBook.Id)
  return _s;
}
inline const std::string& CSDTTelBook::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTTelBook::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTelBook::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTelBook::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTTelBook.Id)
  return _impl_.id_.Release();
}
inline void CSDTTelBook::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTelBook.Id)
}

// string Tel = 2;
inline void CSDTTelBook::clear_tel() {
  _impl_.tel_.ClearToEmpty();
}
inline const std::string& CSDTTelBook::tel() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTelBook.Tel)
  return _internal_tel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTelBook::set_tel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTelBook.Tel)
}
inline std::string* CSDTTelBook::mutable_tel() {
  std::string* _s = _internal_mutable_tel();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTelBook.Tel)
  return _s;
}
inline const std::string& CSDTTelBook::_internal_tel() const {
  return _impl_.tel_.Get();
}
inline void CSDTTelBook::_internal_set_tel(const std::string& value) {
  
  _impl_.tel_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTelBook::_internal_mutable_tel() {
  
  return _impl_.tel_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTelBook::release_tel() {
  // @@protoc_insertion_point(field_release:msg.CSDTTelBook.Tel)
  return _impl_.tel_.Release();
}
inline void CSDTTelBook::set_allocated_tel(std::string* tel) {
  if (tel != nullptr) {
    
  } else {
    
  }
  _impl_.tel_.SetAllocated(tel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tel_.IsDefault()) {
    _impl_.tel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTelBook.Tel)
}

// string Name = 3;
inline void CSDTTelBook::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CSDTTelBook::name() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTelBook.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTelBook::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTelBook.Name)
}
inline std::string* CSDTTelBook::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTelBook.Name)
  return _s;
}
inline const std::string& CSDTTelBook::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSDTTelBook::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTelBook::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTelBook::release_name() {
  // @@protoc_insertion_point(field_release:msg.CSDTTelBook.Name)
  return _impl_.name_.Release();
}
inline void CSDTTelBook::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTelBook.Name)
}

// uint32 Mmr = 4;
inline void CSDTTelBook::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t CSDTTelBook::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CSDTTelBook::mmr() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTelBook.Mmr)
  return _internal_mmr();
}
inline void CSDTTelBook::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void CSDTTelBook::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTelBook.Mmr)
}

// -------------------------------------------------------------------

// LanguageData

// string Key = 1;
inline void LanguageData::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LanguageData::key() const {
  // @@protoc_insertion_point(field_get:msg.LanguageData.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LanguageData::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.LanguageData.Key)
}
inline std::string* LanguageData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msg.LanguageData.Key)
  return _s;
}
inline const std::string& LanguageData::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LanguageData::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LanguageData::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* LanguageData::release_key() {
  // @@protoc_insertion_point(field_release:msg.LanguageData.Key)
  return _impl_.key_.Release();
}
inline void LanguageData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.LanguageData.Key)
}

// repeated string Languages = 2;
inline int LanguageData::_internal_languages_size() const {
  return _impl_.languages_.size();
}
inline int LanguageData::languages_size() const {
  return _internal_languages_size();
}
inline void LanguageData::clear_languages() {
  _impl_.languages_.Clear();
}
inline std::string* LanguageData::add_languages() {
  std::string* _s = _internal_add_languages();
  // @@protoc_insertion_point(field_add_mutable:msg.LanguageData.Languages)
  return _s;
}
inline const std::string& LanguageData::_internal_languages(int index) const {
  return _impl_.languages_.Get(index);
}
inline const std::string& LanguageData::languages(int index) const {
  // @@protoc_insertion_point(field_get:msg.LanguageData.Languages)
  return _internal_languages(index);
}
inline std::string* LanguageData::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:msg.LanguageData.Languages)
  return _impl_.languages_.Mutable(index);
}
inline void LanguageData::set_languages(int index, const std::string& value) {
  _impl_.languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.LanguageData.Languages)
}
inline void LanguageData::set_languages(int index, std::string&& value) {
  _impl_.languages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.LanguageData.Languages)
}
inline void LanguageData::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.LanguageData.Languages)
}
inline void LanguageData::set_languages(int index, const char* value, size_t size) {
  _impl_.languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.LanguageData.Languages)
}
inline std::string* LanguageData::_internal_add_languages() {
  return _impl_.languages_.Add();
}
inline void LanguageData::add_languages(const std::string& value) {
  _impl_.languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.LanguageData.Languages)
}
inline void LanguageData::add_languages(std::string&& value) {
  _impl_.languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.LanguageData.Languages)
}
inline void LanguageData::add_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.LanguageData.Languages)
}
inline void LanguageData::add_languages(const char* value, size_t size) {
  _impl_.languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.LanguageData.Languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LanguageData::languages() const {
  // @@protoc_insertion_point(field_list:msg.LanguageData.Languages)
  return _impl_.languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LanguageData::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:msg.LanguageData.Languages)
  return &_impl_.languages_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GMLanguageData

// string Key = 1;
inline void GMLanguageData::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GMLanguageData::key() const {
  // @@protoc_insertion_point(field_get:msg.GMLanguageData.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GMLanguageData::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GMLanguageData.Key)
}
inline std::string* GMLanguageData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msg.GMLanguageData.Key)
  return _s;
}
inline const std::string& GMLanguageData::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GMLanguageData::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GMLanguageData::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* GMLanguageData::release_key() {
  // @@protoc_insertion_point(field_release:msg.GMLanguageData.Key)
  return _impl_.key_.Release();
}
inline void GMLanguageData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GMLanguageData.Key)
}

// map<string, string> Languages = 2;
inline int GMLanguageData::_internal_languages_size() const {
  return _impl_.languages_.size();
}
inline int GMLanguageData::languages_size() const {
  return _internal_languages_size();
}
inline void GMLanguageData::clear_languages() {
  _impl_.languages_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GMLanguageData::_internal_languages() const {
  return _impl_.languages_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GMLanguageData::languages() const {
  // @@protoc_insertion_point(field_map:msg.GMLanguageData.Languages)
  return _internal_languages();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GMLanguageData::_internal_mutable_languages() {
  return _impl_.languages_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GMLanguageData::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_map:msg.GMLanguageData.Languages)
  return _internal_mutable_languages();
}

// -------------------------------------------------------------------

// CommonKVString

// string Key = 1;
inline void CommonKVString::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CommonKVString::key() const {
  // @@protoc_insertion_point(field_get:msg.CommonKVString.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonKVString::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CommonKVString.Key)
}
inline std::string* CommonKVString::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msg.CommonKVString.Key)
  return _s;
}
inline const std::string& CommonKVString::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CommonKVString::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonKVString::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonKVString::release_key() {
  // @@protoc_insertion_point(field_release:msg.CommonKVString.Key)
  return _impl_.key_.Release();
}
inline void CommonKVString::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CommonKVString.Key)
}

// string Value = 2;
inline void CommonKVString::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& CommonKVString::value() const {
  // @@protoc_insertion_point(field_get:msg.CommonKVString.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonKVString::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CommonKVString.Value)
}
inline std::string* CommonKVString::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:msg.CommonKVString.Value)
  return _s;
}
inline const std::string& CommonKVString::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CommonKVString::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonKVString::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonKVString::release_value() {
  // @@protoc_insertion_point(field_release:msg.CommonKVString.Value)
  return _impl_.value_.Release();
}
inline void CommonKVString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CommonKVString.Value)
}

// -------------------------------------------------------------------

// CDNLanguageData

// string Key = 1;
inline void CDNLanguageData::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CDNLanguageData::key() const {
  // @@protoc_insertion_point(field_get:msg.CDNLanguageData.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDNLanguageData::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CDNLanguageData.Key)
}
inline std::string* CDNLanguageData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msg.CDNLanguageData.Key)
  return _s;
}
inline const std::string& CDNLanguageData::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CDNLanguageData::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CDNLanguageData::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CDNLanguageData::release_key() {
  // @@protoc_insertion_point(field_release:msg.CDNLanguageData.Key)
  return _impl_.key_.Release();
}
inline void CDNLanguageData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CDNLanguageData.Key)
}

// repeated .msg.CommonKVString Languages = 2;
inline int CDNLanguageData::_internal_languages_size() const {
  return _impl_.languages_.size();
}
inline int CDNLanguageData::languages_size() const {
  return _internal_languages_size();
}
inline void CDNLanguageData::clear_languages() {
  _impl_.languages_.Clear();
}
inline ::msg::CommonKVString* CDNLanguageData::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CDNLanguageData.Languages)
  return _impl_.languages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CommonKVString >*
CDNLanguageData::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:msg.CDNLanguageData.Languages)
  return &_impl_.languages_;
}
inline const ::msg::CommonKVString& CDNLanguageData::_internal_languages(int index) const {
  return _impl_.languages_.Get(index);
}
inline const ::msg::CommonKVString& CDNLanguageData::languages(int index) const {
  // @@protoc_insertion_point(field_get:msg.CDNLanguageData.Languages)
  return _internal_languages(index);
}
inline ::msg::CommonKVString* CDNLanguageData::_internal_add_languages() {
  return _impl_.languages_.Add();
}
inline ::msg::CommonKVString* CDNLanguageData::add_languages() {
  ::msg::CommonKVString* _add = _internal_add_languages();
  // @@protoc_insertion_point(field_add:msg.CDNLanguageData.Languages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CommonKVString >&
CDNLanguageData::languages() const {
  // @@protoc_insertion_point(field_list:msg.CDNLanguageData.Languages)
  return _impl_.languages_;
}

// -------------------------------------------------------------------

// CSDTSeason

// uint32 CurRankSeason = 1;
inline void CSDTSeason::clear_currankseason() {
  _impl_.currankseason_ = 0u;
}
inline uint32_t CSDTSeason::_internal_currankseason() const {
  return _impl_.currankseason_;
}
inline uint32_t CSDTSeason::currankseason() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSeason.CurRankSeason)
  return _internal_currankseason();
}
inline void CSDTSeason::_internal_set_currankseason(uint32_t value) {
  
  _impl_.currankseason_ = value;
}
inline void CSDTSeason::set_currankseason(uint32_t value) {
  _internal_set_currankseason(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSeason.CurRankSeason)
}

// bool SeasonAwarded = 2;
inline void CSDTSeason::clear_seasonawarded() {
  _impl_.seasonawarded_ = false;
}
inline bool CSDTSeason::_internal_seasonawarded() const {
  return _impl_.seasonawarded_;
}
inline bool CSDTSeason::seasonawarded() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSeason.SeasonAwarded)
  return _internal_seasonawarded();
}
inline void CSDTSeason::_internal_set_seasonawarded(bool value) {
  
  _impl_.seasonawarded_ = value;
}
inline void CSDTSeason::set_seasonawarded(bool value) {
  _internal_set_seasonawarded(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSeason.SeasonAwarded)
}

// uint32 SeasonTaskProgress = 3;
inline void CSDTSeason::clear_seasontaskprogress() {
  _impl_.seasontaskprogress_ = 0u;
}
inline uint32_t CSDTSeason::_internal_seasontaskprogress() const {
  return _impl_.seasontaskprogress_;
}
inline uint32_t CSDTSeason::seasontaskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSeason.SeasonTaskProgress)
  return _internal_seasontaskprogress();
}
inline void CSDTSeason::_internal_set_seasontaskprogress(uint32_t value) {
  
  _impl_.seasontaskprogress_ = value;
}
inline void CSDTSeason::set_seasontaskprogress(uint32_t value) {
  _internal_set_seasontaskprogress(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSeason.SeasonTaskProgress)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActivity

// map<uint32, .msg.CSDTActivityGroup> Groups = 1;
inline int CSDTActivity::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int CSDTActivity::groups_size() const {
  return _internal_groups_size();
}
inline void CSDTActivity::clear_groups() {
  _impl_.groups_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >&
CSDTActivity::_internal_groups() const {
  return _impl_.groups_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >&
CSDTActivity::groups() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActivity.Groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >*
CSDTActivity::_internal_mutable_groups() {
  return _impl_.groups_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >*
CSDTActivity::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActivity.Groups)
  return _internal_mutable_groups();
}

// repeated uint32 Questionnaires = 2;
inline int CSDTActivity::_internal_questionnaires_size() const {
  return _impl_.questionnaires_.size();
}
inline int CSDTActivity::questionnaires_size() const {
  return _internal_questionnaires_size();
}
inline void CSDTActivity::clear_questionnaires() {
  _impl_.questionnaires_.Clear();
}
inline uint32_t CSDTActivity::_internal_questionnaires(int index) const {
  return _impl_.questionnaires_.Get(index);
}
inline uint32_t CSDTActivity::questionnaires(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivity.Questionnaires)
  return _internal_questionnaires(index);
}
inline void CSDTActivity::set_questionnaires(int index, uint32_t value) {
  _impl_.questionnaires_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivity.Questionnaires)
}
inline void CSDTActivity::_internal_add_questionnaires(uint32_t value) {
  _impl_.questionnaires_.Add(value);
}
inline void CSDTActivity::add_questionnaires(uint32_t value) {
  _internal_add_questionnaires(value);
  // @@protoc_insertion_point(field_add:msg.CSDTActivity.Questionnaires)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTActivity::_internal_questionnaires() const {
  return _impl_.questionnaires_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTActivity::questionnaires() const {
  // @@protoc_insertion_point(field_list:msg.CSDTActivity.Questionnaires)
  return _internal_questionnaires();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTActivity::_internal_mutable_questionnaires() {
  return &_impl_.questionnaires_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTActivity::mutable_questionnaires() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTActivity.Questionnaires)
  return _internal_mutable_questionnaires();
}

// bool UseExcelConf = 3;
inline void CSDTActivity::clear_useexcelconf() {
  _impl_.useexcelconf_ = false;
}
inline bool CSDTActivity::_internal_useexcelconf() const {
  return _impl_.useexcelconf_;
}
inline bool CSDTActivity::useexcelconf() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivity.UseExcelConf)
  return _internal_useexcelconf();
}
inline void CSDTActivity::_internal_set_useexcelconf(bool value) {
  
  _impl_.useexcelconf_ = value;
}
inline void CSDTActivity::set_useexcelconf(bool value) {
  _internal_set_useexcelconf(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivity.UseExcelConf)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActivityGroup

// map<uint32, .msg.CSDTActivityDetail> Activities = 1;
inline int CSDTActivityGroup::_internal_activities_size() const {
  return _impl_.activities_.size();
}
inline int CSDTActivityGroup::activities_size() const {
  return _internal_activities_size();
}
inline void CSDTActivityGroup::clear_activities() {
  _impl_.activities_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >&
CSDTActivityGroup::_internal_activities() const {
  return _impl_.activities_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >&
CSDTActivityGroup::activities() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActivityGroup.Activities)
  return _internal_activities();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >*
CSDTActivityGroup::_internal_mutable_activities() {
  return _impl_.activities_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >*
CSDTActivityGroup::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActivityGroup.Activities)
  return _internal_mutable_activities();
}

// string Md5Sum = 2;
inline void CSDTActivityGroup::clear_md5sum() {
  _impl_.md5sum_.ClearToEmpty();
}
inline const std::string& CSDTActivityGroup::md5sum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityGroup.Md5Sum)
  return _internal_md5sum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTActivityGroup::set_md5sum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5sum_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTActivityGroup.Md5Sum)
}
inline std::string* CSDTActivityGroup::mutable_md5sum() {
  std::string* _s = _internal_mutable_md5sum();
  // @@protoc_insertion_point(field_mutable:msg.CSDTActivityGroup.Md5Sum)
  return _s;
}
inline const std::string& CSDTActivityGroup::_internal_md5sum() const {
  return _impl_.md5sum_.Get();
}
inline void CSDTActivityGroup::_internal_set_md5sum(const std::string& value) {
  
  _impl_.md5sum_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTActivityGroup::_internal_mutable_md5sum() {
  
  return _impl_.md5sum_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTActivityGroup::release_md5sum() {
  // @@protoc_insertion_point(field_release:msg.CSDTActivityGroup.Md5Sum)
  return _impl_.md5sum_.Release();
}
inline void CSDTActivityGroup::set_allocated_md5sum(std::string* md5sum) {
  if (md5sum != nullptr) {
    
  } else {
    
  }
  _impl_.md5sum_.SetAllocated(md5sum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5sum_.IsDefault()) {
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTActivityGroup.Md5Sum)
}

// int64 BeginTime = 3;
inline void CSDTActivityGroup::clear_begintime() {
  _impl_.begintime_ = int64_t{0};
}
inline int64_t CSDTActivityGroup::_internal_begintime() const {
  return _impl_.begintime_;
}
inline int64_t CSDTActivityGroup::begintime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityGroup.BeginTime)
  return _internal_begintime();
}
inline void CSDTActivityGroup::_internal_set_begintime(int64_t value) {
  
  _impl_.begintime_ = value;
}
inline void CSDTActivityGroup::set_begintime(int64_t value) {
  _internal_set_begintime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityGroup.BeginTime)
}

// .msg.CSDTActivityRecord Record = 4;
inline bool CSDTActivityGroup::_internal_has_record() const {
  return this != internal_default_instance() && _impl_.record_ != nullptr;
}
inline bool CSDTActivityGroup::has_record() const {
  return _internal_has_record();
}
inline void CSDTActivityGroup::clear_record() {
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
}
inline const ::msg::CSDTActivityRecord& CSDTActivityGroup::_internal_record() const {
  const ::msg::CSDTActivityRecord* p = _impl_.record_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTActivityRecord&>(
      ::msg::_CSDTActivityRecord_default_instance_);
}
inline const ::msg::CSDTActivityRecord& CSDTActivityGroup::record() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityGroup.Record)
  return _internal_record();
}
inline void CSDTActivityGroup::unsafe_arena_set_allocated_record(
    ::msg::CSDTActivityRecord* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.record_);
  }
  _impl_.record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTActivityGroup.Record)
}
inline ::msg::CSDTActivityRecord* CSDTActivityGroup::release_record() {
  
  ::msg::CSDTActivityRecord* temp = _impl_.record_;
  _impl_.record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTActivityRecord* CSDTActivityGroup::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:msg.CSDTActivityGroup.Record)
  
  ::msg::CSDTActivityRecord* temp = _impl_.record_;
  _impl_.record_ = nullptr;
  return temp;
}
inline ::msg::CSDTActivityRecord* CSDTActivityGroup::_internal_mutable_record() {
  
  if (_impl_.record_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTActivityRecord>(GetArenaForAllocation());
    _impl_.record_ = p;
  }
  return _impl_.record_;
}
inline ::msg::CSDTActivityRecord* CSDTActivityGroup::mutable_record() {
  ::msg::CSDTActivityRecord* _msg = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:msg.CSDTActivityGroup.Record)
  return _msg;
}
inline void CSDTActivityGroup::set_allocated_record(::msg::CSDTActivityRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.record_ = record;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTActivityGroup.Record)
}

// uint32 LoginDays = 5;
inline void CSDTActivityGroup::clear_logindays() {
  _impl_.logindays_ = 0u;
}
inline uint32_t CSDTActivityGroup::_internal_logindays() const {
  return _impl_.logindays_;
}
inline uint32_t CSDTActivityGroup::logindays() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityGroup.LoginDays)
  return _internal_logindays();
}
inline void CSDTActivityGroup::_internal_set_logindays(uint32_t value) {
  
  _impl_.logindays_ = value;
}
inline void CSDTActivityGroup::set_logindays(uint32_t value) {
  _internal_set_logindays(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityGroup.LoginDays)
}

// int32 ChestLevel = 6;
inline void CSDTActivityGroup::clear_chestlevel() {
  _impl_.chestlevel_ = 0;
}
inline int32_t CSDTActivityGroup::_internal_chestlevel() const {
  return _impl_.chestlevel_;
}
inline int32_t CSDTActivityGroup::chestlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityGroup.ChestLevel)
  return _internal_chestlevel();
}
inline void CSDTActivityGroup::_internal_set_chestlevel(int32_t value) {
  
  _impl_.chestlevel_ = value;
}
inline void CSDTActivityGroup::set_chestlevel(int32_t value) {
  _internal_set_chestlevel(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityGroup.ChestLevel)
}

// int64 EndTime = 7;
inline void CSDTActivityGroup::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t CSDTActivityGroup::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t CSDTActivityGroup::endtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityGroup.EndTime)
  return _internal_endtime();
}
inline void CSDTActivityGroup::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void CSDTActivityGroup::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityGroup.EndTime)
}

// -------------------------------------------------------------------

// CSDTActivityDetail

// uint32 Id = 1;
inline void CSDTActivityDetail::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTActivityDetail::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTActivityDetail::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityDetail.Id)
  return _internal_id();
}
inline void CSDTActivityDetail::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTActivityDetail::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityDetail.Id)
}

// uint32 Progress = 2;
inline void CSDTActivityDetail::clear_progress() {
  _impl_.progress_ = 0u;
}
inline uint32_t CSDTActivityDetail::_internal_progress() const {
  return _impl_.progress_;
}
inline uint32_t CSDTActivityDetail::progress() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityDetail.Progress)
  return _internal_progress();
}
inline void CSDTActivityDetail::_internal_set_progress(uint32_t value) {
  
  _impl_.progress_ = value;
}
inline void CSDTActivityDetail::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityDetail.Progress)
}

// bool GetAward = 3;
inline void CSDTActivityDetail::clear_getaward() {
  _impl_.getaward_ = false;
}
inline bool CSDTActivityDetail::_internal_getaward() const {
  return _impl_.getaward_;
}
inline bool CSDTActivityDetail::getaward() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityDetail.GetAward)
  return _internal_getaward();
}
inline void CSDTActivityDetail::_internal_set_getaward(bool value) {
  
  _impl_.getaward_ = value;
}
inline void CSDTActivityDetail::set_getaward(bool value) {
  _internal_set_getaward(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityDetail.GetAward)
}

// string Md5Sum = 4;
inline void CSDTActivityDetail::clear_md5sum() {
  _impl_.md5sum_.ClearToEmpty();
}
inline const std::string& CSDTActivityDetail::md5sum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityDetail.Md5Sum)
  return _internal_md5sum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTActivityDetail::set_md5sum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5sum_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTActivityDetail.Md5Sum)
}
inline std::string* CSDTActivityDetail::mutable_md5sum() {
  std::string* _s = _internal_mutable_md5sum();
  // @@protoc_insertion_point(field_mutable:msg.CSDTActivityDetail.Md5Sum)
  return _s;
}
inline const std::string& CSDTActivityDetail::_internal_md5sum() const {
  return _impl_.md5sum_.Get();
}
inline void CSDTActivityDetail::_internal_set_md5sum(const std::string& value) {
  
  _impl_.md5sum_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTActivityDetail::_internal_mutable_md5sum() {
  
  return _impl_.md5sum_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTActivityDetail::release_md5sum() {
  // @@protoc_insertion_point(field_release:msg.CSDTActivityDetail.Md5Sum)
  return _impl_.md5sum_.Release();
}
inline void CSDTActivityDetail::set_allocated_md5sum(std::string* md5sum) {
  if (md5sum != nullptr) {
    
  } else {
    
  }
  _impl_.md5sum_.SetAllocated(md5sum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5sum_.IsDefault()) {
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTActivityDetail.Md5Sum)
}

// bool Unlock = 5;
inline void CSDTActivityDetail::clear_unlock() {
  _impl_.unlock_ = false;
}
inline bool CSDTActivityDetail::_internal_unlock() const {
  return _impl_.unlock_;
}
inline bool CSDTActivityDetail::unlock() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityDetail.Unlock)
  return _internal_unlock();
}
inline void CSDTActivityDetail::_internal_set_unlock(bool value) {
  
  _impl_.unlock_ = value;
}
inline void CSDTActivityDetail::set_unlock(bool value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActivityDetail.Unlock)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActivityRecord

// map<uint32, uint32> Process = 1;
inline int CSDTActivityRecord::_internal_process_size() const {
  return _impl_.process_.size();
}
inline int CSDTActivityRecord::process_size() const {
  return _internal_process_size();
}
inline void CSDTActivityRecord::clear_process() {
  _impl_.process_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTActivityRecord::_internal_process() const {
  return _impl_.process_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTActivityRecord::process() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActivityRecord.Process)
  return _internal_process();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTActivityRecord::_internal_mutable_process() {
  return _impl_.process_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTActivityRecord::mutable_process() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActivityRecord.Process)
  return _internal_mutable_process();
}

// map<uint32, uint32> Reward = 2;
inline int CSDTActivityRecord::_internal_reward_size() const {
  return _impl_.reward_.size();
}
inline int CSDTActivityRecord::reward_size() const {
  return _internal_reward_size();
}
inline void CSDTActivityRecord::clear_reward() {
  _impl_.reward_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTActivityRecord::_internal_reward() const {
  return _impl_.reward_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTActivityRecord::reward() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActivityRecord.Reward)
  return _internal_reward();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTActivityRecord::_internal_mutable_reward() {
  return _impl_.reward_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTActivityRecord::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActivityRecord.Reward)
  return _internal_mutable_reward();
}

// bytes Params = 3;
inline void CSDTActivityRecord::clear_params() {
  _impl_.params_.ClearToEmpty();
}
inline const std::string& CSDTActivityRecord::params() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActivityRecord.Params)
  return _internal_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTActivityRecord::set_params(ArgT0&& arg0, ArgT... args) {
 
 _impl_.params_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTActivityRecord.Params)
}
inline std::string* CSDTActivityRecord::mutable_params() {
  std::string* _s = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:msg.CSDTActivityRecord.Params)
  return _s;
}
inline const std::string& CSDTActivityRecord::_internal_params() const {
  return _impl_.params_.Get();
}
inline void CSDTActivityRecord::_internal_set_params(const std::string& value) {
  
  _impl_.params_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTActivityRecord::_internal_mutable_params() {
  
  return _impl_.params_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTActivityRecord::release_params() {
  // @@protoc_insertion_point(field_release:msg.CSDTActivityRecord.Params)
  return _impl_.params_.Release();
}
inline void CSDTActivityRecord::set_allocated_params(std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  _impl_.params_.SetAllocated(params, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.params_.IsDefault()) {
    _impl_.params_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTActivityRecord.Params)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTRecruitData

// map<uint32, bool> IsRecruited = 1;
inline int CSDTRecruitData::_internal_isrecruited_size() const {
  return _impl_.isrecruited_.size();
}
inline int CSDTRecruitData::isrecruited_size() const {
  return _internal_isrecruited_size();
}
inline void CSDTRecruitData::clear_isrecruited() {
  _impl_.isrecruited_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
CSDTRecruitData::_internal_isrecruited() const {
  return _impl_.isrecruited_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
CSDTRecruitData::isrecruited() const {
  // @@protoc_insertion_point(field_map:msg.CSDTRecruitData.IsRecruited)
  return _internal_isrecruited();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
CSDTRecruitData::_internal_mutable_isrecruited() {
  return _impl_.isrecruited_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
CSDTRecruitData::mutable_isrecruited() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTRecruitData.IsRecruited)
  return _internal_mutable_isrecruited();
}

// -------------------------------------------------------------------

// CSDTRecruitPlayer

// .msg.PlayerRecruitStatus Status = 1;
inline void CSDTRecruitPlayer::clear_status() {
  _impl_.status_ = 0;
}
inline ::msg::PlayerRecruitStatus CSDTRecruitPlayer::_internal_status() const {
  return static_cast< ::msg::PlayerRecruitStatus >(_impl_.status_);
}
inline ::msg::PlayerRecruitStatus CSDTRecruitPlayer::status() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecruitPlayer.Status)
  return _internal_status();
}
inline void CSDTRecruitPlayer::_internal_set_status(::msg::PlayerRecruitStatus value) {
  
  _impl_.status_ = value;
}
inline void CSDTRecruitPlayer::set_status(::msg::PlayerRecruitStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecruitPlayer.Status)
}

// uint32 BattleCount = 2;
inline void CSDTRecruitPlayer::clear_battlecount() {
  _impl_.battlecount_ = 0u;
}
inline uint32_t CSDTRecruitPlayer::_internal_battlecount() const {
  return _impl_.battlecount_;
}
inline uint32_t CSDTRecruitPlayer::battlecount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecruitPlayer.BattleCount)
  return _internal_battlecount();
}
inline void CSDTRecruitPlayer::_internal_set_battlecount(uint32_t value) {
  
  _impl_.battlecount_ = value;
}
inline void CSDTRecruitPlayer::set_battlecount(uint32_t value) {
  _internal_set_battlecount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecruitPlayer.BattleCount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActivityRecruit

// map<string, .msg.CSDTRecruitPlayer> Players = 1;
inline int CSDTActivityRecruit::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CSDTActivityRecruit::players_size() const {
  return _internal_players_size();
}
inline void CSDTActivityRecruit::clear_players() {
  _impl_.players_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
CSDTActivityRecruit::_internal_players() const {
  return _impl_.players_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
CSDTActivityRecruit::players() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActivityRecruit.Players)
  return _internal_players();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
CSDTActivityRecruit::_internal_mutable_players() {
  return _impl_.players_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
CSDTActivityRecruit::mutable_players() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActivityRecruit.Players)
  return _internal_mutable_players();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActGroupBuy

// map<string, uint32> Process = 1;
inline int CSDTActGroupBuy::_internal_process_size() const {
  return _impl_.process_.size();
}
inline int CSDTActGroupBuy::process_size() const {
  return _internal_process_size();
}
inline void CSDTActGroupBuy::clear_process() {
  _impl_.process_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
CSDTActGroupBuy::_internal_process() const {
  return _impl_.process_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
CSDTActGroupBuy::process() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActGroupBuy.Process)
  return _internal_process();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
CSDTActGroupBuy::_internal_mutable_process() {
  return _impl_.process_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
CSDTActGroupBuy::mutable_process() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActGroupBuy.Process)
  return _internal_mutable_process();
}

// map<string, .msg.CSDTActGroupBuyRwd> Reward = 2;
inline int CSDTActGroupBuy::_internal_reward_size() const {
  return _impl_.reward_.size();
}
inline int CSDTActGroupBuy::reward_size() const {
  return _internal_reward_size();
}
inline void CSDTActGroupBuy::clear_reward() {
  _impl_.reward_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >&
CSDTActGroupBuy::_internal_reward() const {
  return _impl_.reward_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >&
CSDTActGroupBuy::reward() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActGroupBuy.Reward)
  return _internal_reward();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >*
CSDTActGroupBuy::_internal_mutable_reward() {
  return _impl_.reward_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >*
CSDTActGroupBuy::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActGroupBuy.Reward)
  return _internal_mutable_reward();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActGroupBuyRwd

// map<string, uint32> Rewards = 1;
inline int CSDTActGroupBuyRwd::_internal_rewards_size() const {
  return _impl_.rewards_.size();
}
inline int CSDTActGroupBuyRwd::rewards_size() const {
  return _internal_rewards_size();
}
inline void CSDTActGroupBuyRwd::clear_rewards() {
  _impl_.rewards_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
CSDTActGroupBuyRwd::_internal_rewards() const {
  return _impl_.rewards_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
CSDTActGroupBuyRwd::rewards() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActGroupBuyRwd.Rewards)
  return _internal_rewards();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
CSDTActGroupBuyRwd::_internal_mutable_rewards() {
  return _impl_.rewards_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
CSDTActGroupBuyRwd::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActGroupBuyRwd.Rewards)
  return _internal_mutable_rewards();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActRecruitData

// string Inviter = 1;
inline void CSDTActRecruitData::clear_inviter() {
  _impl_.inviter_.ClearToEmpty();
}
inline const std::string& CSDTActRecruitData::inviter() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActRecruitData.Inviter)
  return _internal_inviter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTActRecruitData::set_inviter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inviter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTActRecruitData.Inviter)
}
inline std::string* CSDTActRecruitData::mutable_inviter() {
  std::string* _s = _internal_mutable_inviter();
  // @@protoc_insertion_point(field_mutable:msg.CSDTActRecruitData.Inviter)
  return _s;
}
inline const std::string& CSDTActRecruitData::_internal_inviter() const {
  return _impl_.inviter_.Get();
}
inline void CSDTActRecruitData::_internal_set_inviter(const std::string& value) {
  
  _impl_.inviter_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTActRecruitData::_internal_mutable_inviter() {
  
  return _impl_.inviter_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTActRecruitData::release_inviter() {
  // @@protoc_insertion_point(field_release:msg.CSDTActRecruitData.Inviter)
  return _impl_.inviter_.Release();
}
inline void CSDTActRecruitData::set_allocated_inviter(std::string* inviter) {
  if (inviter != nullptr) {
    
  } else {
    
  }
  _impl_.inviter_.SetAllocated(inviter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inviter_.IsDefault()) {
    _impl_.inviter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTActRecruitData.Inviter)
}

// map<string, .msg.CSDTRecruitPlayer> Players = 2;
inline int CSDTActRecruitData::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CSDTActRecruitData::players_size() const {
  return _internal_players_size();
}
inline void CSDTActRecruitData::clear_players() {
  _impl_.players_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
CSDTActRecruitData::_internal_players() const {
  return _impl_.players_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >&
CSDTActRecruitData::players() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActRecruitData.Players)
  return _internal_players();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
CSDTActRecruitData::_internal_mutable_players() {
  return _impl_.players_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >*
CSDTActRecruitData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActRecruitData.Players)
  return _internal_mutable_players();
}

// -------------------------------------------------------------------

// CSDTActLuckMallData

// repeated uint32 MallGoods = 1;
inline int CSDTActLuckMallData::_internal_mallgoods_size() const {
  return _impl_.mallgoods_.size();
}
inline int CSDTActLuckMallData::mallgoods_size() const {
  return _internal_mallgoods_size();
}
inline void CSDTActLuckMallData::clear_mallgoods() {
  _impl_.mallgoods_.Clear();
}
inline uint32_t CSDTActLuckMallData::_internal_mallgoods(int index) const {
  return _impl_.mallgoods_.Get(index);
}
inline uint32_t CSDTActLuckMallData::mallgoods(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTActLuckMallData.MallGoods)
  return _internal_mallgoods(index);
}
inline void CSDTActLuckMallData::set_mallgoods(int index, uint32_t value) {
  _impl_.mallgoods_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTActLuckMallData.MallGoods)
}
inline void CSDTActLuckMallData::_internal_add_mallgoods(uint32_t value) {
  _impl_.mallgoods_.Add(value);
}
inline void CSDTActLuckMallData::add_mallgoods(uint32_t value) {
  _internal_add_mallgoods(value);
  // @@protoc_insertion_point(field_add:msg.CSDTActLuckMallData.MallGoods)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTActLuckMallData::_internal_mallgoods() const {
  return _impl_.mallgoods_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTActLuckMallData::mallgoods() const {
  // @@protoc_insertion_point(field_list:msg.CSDTActLuckMallData.MallGoods)
  return _internal_mallgoods();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTActLuckMallData::_internal_mutable_mallgoods() {
  return &_impl_.mallgoods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTActLuckMallData::mutable_mallgoods() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTActLuckMallData.MallGoods)
  return _internal_mutable_mallgoods();
}

// int32 TabId = 2;
inline void CSDTActLuckMallData::clear_tabid() {
  _impl_.tabid_ = 0;
}
inline int32_t CSDTActLuckMallData::_internal_tabid() const {
  return _impl_.tabid_;
}
inline int32_t CSDTActLuckMallData::tabid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActLuckMallData.TabId)
  return _internal_tabid();
}
inline void CSDTActLuckMallData::_internal_set_tabid(int32_t value) {
  
  _impl_.tabid_ = value;
}
inline void CSDTActLuckMallData::set_tabid(int32_t value) {
  _internal_set_tabid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActLuckMallData.TabId)
}

// uint32 Discount = 3;
inline void CSDTActLuckMallData::clear_discount() {
  _impl_.discount_ = 0u;
}
inline uint32_t CSDTActLuckMallData::_internal_discount() const {
  return _impl_.discount_;
}
inline uint32_t CSDTActLuckMallData::discount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActLuckMallData.Discount)
  return _internal_discount();
}
inline void CSDTActLuckMallData::_internal_set_discount(uint32_t value) {
  
  _impl_.discount_ = value;
}
inline void CSDTActLuckMallData::set_discount(uint32_t value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActLuckMallData.Discount)
}

// -------------------------------------------------------------------

// CSDTMelee

// uint32 Progress = 1;
inline void CSDTMelee::clear_progress() {
  _impl_.progress_ = 0u;
}
inline uint32_t CSDTMelee::_internal_progress() const {
  return _impl_.progress_;
}
inline uint32_t CSDTMelee::progress() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMelee.Progress)
  return _internal_progress();
}
inline void CSDTMelee::_internal_set_progress(uint32_t value) {
  
  _impl_.progress_ = value;
}
inline void CSDTMelee::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMelee.Progress)
}

// bool GetAward = 2;
inline void CSDTMelee::clear_getaward() {
  _impl_.getaward_ = false;
}
inline bool CSDTMelee::_internal_getaward() const {
  return _impl_.getaward_;
}
inline bool CSDTMelee::getaward() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMelee.GetAward)
  return _internal_getaward();
}
inline void CSDTMelee::_internal_set_getaward(bool value) {
  
  _impl_.getaward_ = value;
}
inline void CSDTMelee::set_getaward(bool value) {
  _internal_set_getaward(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMelee.GetAward)
}

// int64 MeleeBeginTime = 3;
inline void CSDTMelee::clear_meleebegintime() {
  _impl_.meleebegintime_ = int64_t{0};
}
inline int64_t CSDTMelee::_internal_meleebegintime() const {
  return _impl_.meleebegintime_;
}
inline int64_t CSDTMelee::meleebegintime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMelee.MeleeBeginTime)
  return _internal_meleebegintime();
}
inline void CSDTMelee::_internal_set_meleebegintime(int64_t value) {
  
  _impl_.meleebegintime_ = value;
}
inline void CSDTMelee::set_meleebegintime(int64_t value) {
  _internal_set_meleebegintime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMelee.MeleeBeginTime)
}

// int64 MeleeEndTime = 4;
inline void CSDTMelee::clear_meleeendtime() {
  _impl_.meleeendtime_ = int64_t{0};
}
inline int64_t CSDTMelee::_internal_meleeendtime() const {
  return _impl_.meleeendtime_;
}
inline int64_t CSDTMelee::meleeendtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMelee.MeleeEndTime)
  return _internal_meleeendtime();
}
inline void CSDTMelee::_internal_set_meleeendtime(int64_t value) {
  
  _impl_.meleeendtime_ = value;
}
inline void CSDTMelee::set_meleeendtime(int64_t value) {
  _internal_set_meleeendtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMelee.MeleeEndTime)
}

// -------------------------------------------------------------------

// CSDTTeamSlotPlayer

// string Id = 1;
inline void CSDTTeamSlotPlayer::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTTeamSlotPlayer::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamSlotPlayer::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Id)
}
inline std::string* CSDTTeamSlotPlayer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamSlotPlayer.Id)
  return _s;
}
inline const std::string& CSDTTeamSlotPlayer::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTTeamSlotPlayer::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamSlotPlayer.Id)
  return _impl_.id_.Release();
}
inline void CSDTTeamSlotPlayer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamSlotPlayer.Id)
}

// bool IsAI = 2;
inline void CSDTTeamSlotPlayer::clear_isai() {
  _impl_.isai_ = false;
}
inline bool CSDTTeamSlotPlayer::_internal_isai() const {
  return _impl_.isai_;
}
inline bool CSDTTeamSlotPlayer::isai() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.IsAI)
  return _internal_isai();
}
inline void CSDTTeamSlotPlayer::_internal_set_isai(bool value) {
  
  _impl_.isai_ = value;
}
inline void CSDTTeamSlotPlayer::set_isai(bool value) {
  _internal_set_isai(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.IsAI)
}

// uint32 Slot = 3;
inline void CSDTTeamSlotPlayer::clear_slot() {
  _impl_.slot_ = 0u;
}
inline uint32_t CSDTTeamSlotPlayer::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t CSDTTeamSlotPlayer::slot() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Slot)
  return _internal_slot();
}
inline void CSDTTeamSlotPlayer::_internal_set_slot(uint32_t value) {
  
  _impl_.slot_ = value;
}
inline void CSDTTeamSlotPlayer::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Slot)
}

// .msg.TEAMGROUP Group = 4;
inline void CSDTTeamSlotPlayer::clear_group() {
  _impl_.group_ = 0;
}
inline ::msg::TEAMGROUP CSDTTeamSlotPlayer::_internal_group() const {
  return static_cast< ::msg::TEAMGROUP >(_impl_.group_);
}
inline ::msg::TEAMGROUP CSDTTeamSlotPlayer::group() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Group)
  return _internal_group();
}
inline void CSDTTeamSlotPlayer::_internal_set_group(::msg::TEAMGROUP value) {
  
  _impl_.group_ = value;
}
inline void CSDTTeamSlotPlayer::set_group(::msg::TEAMGROUP value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Group)
}

// string UsrName = 5;
inline void CSDTTeamSlotPlayer::clear_usrname() {
  _impl_.usrname_.ClearToEmpty();
}
inline const std::string& CSDTTeamSlotPlayer::usrname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.UsrName)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamSlotPlayer::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usrname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.UsrName)
}
inline std::string* CSDTTeamSlotPlayer::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamSlotPlayer.UsrName)
  return _s;
}
inline const std::string& CSDTTeamSlotPlayer::_internal_usrname() const {
  return _impl_.usrname_.Get();
}
inline void CSDTTeamSlotPlayer::_internal_set_usrname(const std::string& value) {
  
  _impl_.usrname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::_internal_mutable_usrname() {
  
  return _impl_.usrname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::release_usrname() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamSlotPlayer.UsrName)
  return _impl_.usrname_.Release();
}
inline void CSDTTeamSlotPlayer::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  _impl_.usrname_.SetAllocated(usrname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usrname_.IsDefault()) {
    _impl_.usrname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamSlotPlayer.UsrName)
}

// uint32 HeadPic = 6;
inline void CSDTTeamSlotPlayer::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSDTTeamSlotPlayer::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSDTTeamSlotPlayer::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.HeadPic)
  return _internal_headpic();
}
inline void CSDTTeamSlotPlayer::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSDTTeamSlotPlayer::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.HeadPic)
}

// string Region = 7;
inline void CSDTTeamSlotPlayer::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& CSDTTeamSlotPlayer::region() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamSlotPlayer::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Region)
}
inline std::string* CSDTTeamSlotPlayer::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamSlotPlayer.Region)
  return _s;
}
inline const std::string& CSDTTeamSlotPlayer::_internal_region() const {
  return _impl_.region_.Get();
}
inline void CSDTTeamSlotPlayer::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::release_region() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamSlotPlayer.Region)
  return _impl_.region_.Release();
}
inline void CSDTTeamSlotPlayer::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamSlotPlayer.Region)
}

// uint32 Province = 8;
inline void CSDTTeamSlotPlayer::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t CSDTTeamSlotPlayer::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t CSDTTeamSlotPlayer::province() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Province)
  return _internal_province();
}
inline void CSDTTeamSlotPlayer::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void CSDTTeamSlotPlayer::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Province)
}

// uint32 HeadPicFrame = 9;
inline void CSDTTeamSlotPlayer::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t CSDTTeamSlotPlayer::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t CSDTTeamSlotPlayer::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.HeadPicFrame)
  return _internal_headpicframe();
}
inline void CSDTTeamSlotPlayer::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void CSDTTeamSlotPlayer::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.HeadPicFrame)
}

// uint32 Lvl = 10;
inline void CSDTTeamSlotPlayer::clear_lvl() {
  _impl_.lvl_ = 0u;
}
inline uint32_t CSDTTeamSlotPlayer::_internal_lvl() const {
  return _impl_.lvl_;
}
inline uint32_t CSDTTeamSlotPlayer::lvl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Lvl)
  return _internal_lvl();
}
inline void CSDTTeamSlotPlayer::_internal_set_lvl(uint32_t value) {
  
  _impl_.lvl_ = value;
}
inline void CSDTTeamSlotPlayer::set_lvl(uint32_t value) {
  _internal_set_lvl(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Lvl)
}

// uint32 Cup = 11;
inline void CSDTTeamSlotPlayer::clear_cup() {
  _impl_.cup_ = 0u;
}
inline uint32_t CSDTTeamSlotPlayer::_internal_cup() const {
  return _impl_.cup_;
}
inline uint32_t CSDTTeamSlotPlayer::cup() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Cup)
  return _internal_cup();
}
inline void CSDTTeamSlotPlayer::_internal_set_cup(uint32_t value) {
  
  _impl_.cup_ = value;
}
inline void CSDTTeamSlotPlayer::set_cup(uint32_t value) {
  _internal_set_cup(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Cup)
}

// .msg.PLATFORMTYPE PlatformType = 12;
inline void CSDTTeamSlotPlayer::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE CSDTTeamSlotPlayer::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE CSDTTeamSlotPlayer::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.PlatformType)
  return _internal_platformtype();
}
inline void CSDTTeamSlotPlayer::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void CSDTTeamSlotPlayer::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.PlatformType)
}

// string Country = 13;
inline void CSDTTeamSlotPlayer::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSDTTeamSlotPlayer::country() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamSlotPlayer.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamSlotPlayer::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamSlotPlayer.Country)
}
inline std::string* CSDTTeamSlotPlayer::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamSlotPlayer.Country)
  return _s;
}
inline const std::string& CSDTTeamSlotPlayer::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSDTTeamSlotPlayer::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamSlotPlayer::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamSlotPlayer.Country)
  return _impl_.country_.Release();
}
inline void CSDTTeamSlotPlayer::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamSlotPlayer.Country)
}

// -------------------------------------------------------------------

// CSDTTeamVoicePlayer

// string Id = 1;
inline void CSDTTeamVoicePlayer::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTTeamVoicePlayer::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamVoicePlayer.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamVoicePlayer::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamVoicePlayer.Id)
}
inline std::string* CSDTTeamVoicePlayer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamVoicePlayer.Id)
  return _s;
}
inline const std::string& CSDTTeamVoicePlayer::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTTeamVoicePlayer::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamVoicePlayer::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamVoicePlayer::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamVoicePlayer.Id)
  return _impl_.id_.Release();
}
inline void CSDTTeamVoicePlayer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamVoicePlayer.Id)
}

// string VoiceId = 2;
inline void CSDTTeamVoicePlayer::clear_voiceid() {
  _impl_.voiceid_.ClearToEmpty();
}
inline const std::string& CSDTTeamVoicePlayer::voiceid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamVoicePlayer.VoiceId)
  return _internal_voiceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamVoicePlayer::set_voiceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.voiceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamVoicePlayer.VoiceId)
}
inline std::string* CSDTTeamVoicePlayer::mutable_voiceid() {
  std::string* _s = _internal_mutable_voiceid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamVoicePlayer.VoiceId)
  return _s;
}
inline const std::string& CSDTTeamVoicePlayer::_internal_voiceid() const {
  return _impl_.voiceid_.Get();
}
inline void CSDTTeamVoicePlayer::_internal_set_voiceid(const std::string& value) {
  
  _impl_.voiceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamVoicePlayer::_internal_mutable_voiceid() {
  
  return _impl_.voiceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamVoicePlayer::release_voiceid() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamVoicePlayer.VoiceId)
  return _impl_.voiceid_.Release();
}
inline void CSDTTeamVoicePlayer::set_allocated_voiceid(std::string* voiceid) {
  if (voiceid != nullptr) {
    
  } else {
    
  }
  _impl_.voiceid_.SetAllocated(voiceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.voiceid_.IsDefault()) {
    _impl_.voiceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamVoicePlayer.VoiceId)
}

// uint32 VoiceMemId = 3;
inline void CSDTTeamVoicePlayer::clear_voicememid() {
  _impl_.voicememid_ = 0u;
}
inline uint32_t CSDTTeamVoicePlayer::_internal_voicememid() const {
  return _impl_.voicememid_;
}
inline uint32_t CSDTTeamVoicePlayer::voicememid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamVoicePlayer.VoiceMemId)
  return _internal_voicememid();
}
inline void CSDTTeamVoicePlayer::_internal_set_voicememid(uint32_t value) {
  
  _impl_.voicememid_ = value;
}
inline void CSDTTeamVoicePlayer::set_voicememid(uint32_t value) {
  _internal_set_voicememid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTeamVoicePlayer.VoiceMemId)
}

// string VoiceUserId = 4;
inline void CSDTTeamVoicePlayer::clear_voiceuserid() {
  _impl_.voiceuserid_.ClearToEmpty();
}
inline const std::string& CSDTTeamVoicePlayer::voiceuserid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTeamVoicePlayer.VoiceUserId)
  return _internal_voiceuserid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTTeamVoicePlayer::set_voiceuserid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.voiceuserid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTTeamVoicePlayer.VoiceUserId)
}
inline std::string* CSDTTeamVoicePlayer::mutable_voiceuserid() {
  std::string* _s = _internal_mutable_voiceuserid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTTeamVoicePlayer.VoiceUserId)
  return _s;
}
inline const std::string& CSDTTeamVoicePlayer::_internal_voiceuserid() const {
  return _impl_.voiceuserid_.Get();
}
inline void CSDTTeamVoicePlayer::_internal_set_voiceuserid(const std::string& value) {
  
  _impl_.voiceuserid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTTeamVoicePlayer::_internal_mutable_voiceuserid() {
  
  return _impl_.voiceuserid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTTeamVoicePlayer::release_voiceuserid() {
  // @@protoc_insertion_point(field_release:msg.CSDTTeamVoicePlayer.VoiceUserId)
  return _impl_.voiceuserid_.Release();
}
inline void CSDTTeamVoicePlayer::set_allocated_voiceuserid(std::string* voiceuserid) {
  if (voiceuserid != nullptr) {
    
  } else {
    
  }
  _impl_.voiceuserid_.SetAllocated(voiceuserid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.voiceuserid_.IsDefault()) {
    _impl_.voiceuserid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTTeamVoicePlayer.VoiceUserId)
}

// -------------------------------------------------------------------

// ActivityGroupData

// uint32 Id = 1;
inline void ActivityGroupData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ActivityGroupData::id() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Id)
  return _internal_id();
}
inline void ActivityGroupData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ActivityGroupData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Id)
}

// .msg.ACTIVITYTYPE Type = 2;
inline void ActivityGroupData::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::ACTIVITYTYPE ActivityGroupData::_internal_type() const {
  return static_cast< ::msg::ACTIVITYTYPE >(_impl_.type_);
}
inline ::msg::ACTIVITYTYPE ActivityGroupData::type() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Type)
  return _internal_type();
}
inline void ActivityGroupData::_internal_set_type(::msg::ACTIVITYTYPE value) {
  
  _impl_.type_ = value;
}
inline void ActivityGroupData::set_type(::msg::ACTIVITYTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Type)
}

// string TabName = 3;
inline void ActivityGroupData::clear_tabname() {
  _impl_.tabname_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::tabname() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TabName)
  return _internal_tabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_tabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TabName)
}
inline std::string* ActivityGroupData::mutable_tabname() {
  std::string* _s = _internal_mutable_tabname();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TabName)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_tabname() const {
  return _impl_.tabname_.Get();
}
inline void ActivityGroupData::_internal_set_tabname(const std::string& value) {
  
  _impl_.tabname_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_tabname() {
  
  return _impl_.tabname_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_tabname() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TabName)
  return _impl_.tabname_.Release();
}
inline void ActivityGroupData::set_allocated_tabname(std::string* tabname) {
  if (tabname != nullptr) {
    
  } else {
    
  }
  _impl_.tabname_.SetAllocated(tabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tabname_.IsDefault()) {
    _impl_.tabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TabName)
}

// string TabIcon = 4;
inline void ActivityGroupData::clear_tabicon() {
  _impl_.tabicon_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::tabicon() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TabIcon)
  return _internal_tabicon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_tabicon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tabicon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TabIcon)
}
inline std::string* ActivityGroupData::mutable_tabicon() {
  std::string* _s = _internal_mutable_tabicon();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TabIcon)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_tabicon() const {
  return _impl_.tabicon_.Get();
}
inline void ActivityGroupData::_internal_set_tabicon(const std::string& value) {
  
  _impl_.tabicon_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_tabicon() {
  
  return _impl_.tabicon_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_tabicon() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TabIcon)
  return _impl_.tabicon_.Release();
}
inline void ActivityGroupData::set_allocated_tabicon(std::string* tabicon) {
  if (tabicon != nullptr) {
    
  } else {
    
  }
  _impl_.tabicon_.SetAllocated(tabicon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tabicon_.IsDefault()) {
    _impl_.tabicon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TabIcon)
}

// string BeginShowTime = 5;
inline void ActivityGroupData::clear_beginshowtime() {
  _impl_.beginshowtime_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::beginshowtime() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.BeginShowTime)
  return _internal_beginshowtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_beginshowtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.beginshowtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.BeginShowTime)
}
inline std::string* ActivityGroupData::mutable_beginshowtime() {
  std::string* _s = _internal_mutable_beginshowtime();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.BeginShowTime)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_beginshowtime() const {
  return _impl_.beginshowtime_.Get();
}
inline void ActivityGroupData::_internal_set_beginshowtime(const std::string& value) {
  
  _impl_.beginshowtime_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_beginshowtime() {
  
  return _impl_.beginshowtime_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_beginshowtime() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.BeginShowTime)
  return _impl_.beginshowtime_.Release();
}
inline void ActivityGroupData::set_allocated_beginshowtime(std::string* beginshowtime) {
  if (beginshowtime != nullptr) {
    
  } else {
    
  }
  _impl_.beginshowtime_.SetAllocated(beginshowtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.beginshowtime_.IsDefault()) {
    _impl_.beginshowtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.BeginShowTime)
}

// string BeginTime = 6;
inline void ActivityGroupData::clear_begintime() {
  _impl_.begintime_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::begintime() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.BeginTime)
  return _internal_begintime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_begintime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.begintime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.BeginTime)
}
inline std::string* ActivityGroupData::mutable_begintime() {
  std::string* _s = _internal_mutable_begintime();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.BeginTime)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_begintime() const {
  return _impl_.begintime_.Get();
}
inline void ActivityGroupData::_internal_set_begintime(const std::string& value) {
  
  _impl_.begintime_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_begintime() {
  
  return _impl_.begintime_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_begintime() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.BeginTime)
  return _impl_.begintime_.Release();
}
inline void ActivityGroupData::set_allocated_begintime(std::string* begintime) {
  if (begintime != nullptr) {
    
  } else {
    
  }
  _impl_.begintime_.SetAllocated(begintime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.begintime_.IsDefault()) {
    _impl_.begintime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.BeginTime)
}

// string EndTime = 7;
inline void ActivityGroupData::clear_endtime() {
  _impl_.endtime_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::endtime() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.EndTime)
  return _internal_endtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_endtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.endtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.EndTime)
}
inline std::string* ActivityGroupData::mutable_endtime() {
  std::string* _s = _internal_mutable_endtime();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.EndTime)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_endtime() const {
  return _impl_.endtime_.Get();
}
inline void ActivityGroupData::_internal_set_endtime(const std::string& value) {
  
  _impl_.endtime_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_endtime() {
  
  return _impl_.endtime_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_endtime() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.EndTime)
  return _impl_.endtime_.Release();
}
inline void ActivityGroupData::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  _impl_.endtime_.SetAllocated(endtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endtime_.IsDefault()) {
    _impl_.endtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.EndTime)
}

// string EndShowTime = 8;
inline void ActivityGroupData::clear_endshowtime() {
  _impl_.endshowtime_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::endshowtime() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.EndShowTime)
  return _internal_endshowtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_endshowtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.endshowtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.EndShowTime)
}
inline std::string* ActivityGroupData::mutable_endshowtime() {
  std::string* _s = _internal_mutable_endshowtime();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.EndShowTime)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_endshowtime() const {
  return _impl_.endshowtime_.Get();
}
inline void ActivityGroupData::_internal_set_endshowtime(const std::string& value) {
  
  _impl_.endshowtime_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_endshowtime() {
  
  return _impl_.endshowtime_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_endshowtime() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.EndShowTime)
  return _impl_.endshowtime_.Release();
}
inline void ActivityGroupData::set_allocated_endshowtime(std::string* endshowtime) {
  if (endshowtime != nullptr) {
    
  } else {
    
  }
  _impl_.endshowtime_.SetAllocated(endshowtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endshowtime_.IsDefault()) {
    _impl_.endshowtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.EndShowTime)
}

// uint32 Duration = 9;
inline void ActivityGroupData::clear_duration() {
  _impl_.duration_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t ActivityGroupData::duration() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Duration)
  return _internal_duration();
}
inline void ActivityGroupData::_internal_set_duration(uint32_t value) {
  
  _impl_.duration_ = value;
}
inline void ActivityGroupData::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Duration)
}

// uint32 PrivateData = 10;
inline void ActivityGroupData::clear_privatedata() {
  _impl_.privatedata_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_privatedata() const {
  return _impl_.privatedata_;
}
inline uint32_t ActivityGroupData::privatedata() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PrivateData)
  return _internal_privatedata();
}
inline void ActivityGroupData::_internal_set_privatedata(uint32_t value) {
  
  _impl_.privatedata_ = value;
}
inline void ActivityGroupData::set_privatedata(uint32_t value) {
  _internal_set_privatedata(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PrivateData)
}

// bool Open = 11;
inline void ActivityGroupData::clear_open() {
  _impl_.open_ = false;
}
inline bool ActivityGroupData::_internal_open() const {
  return _impl_.open_;
}
inline bool ActivityGroupData::open() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Open)
  return _internal_open();
}
inline void ActivityGroupData::_internal_set_open(bool value) {
  
  _impl_.open_ = value;
}
inline void ActivityGroupData::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Open)
}

// uint32 ActivityId = 12;
inline void ActivityGroupData::clear_activityid() {
  _impl_.activityid_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_activityid() const {
  return _impl_.activityid_;
}
inline uint32_t ActivityGroupData::activityid() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.ActivityId)
  return _internal_activityid();
}
inline void ActivityGroupData::_internal_set_activityid(uint32_t value) {
  
  _impl_.activityid_ = value;
}
inline void ActivityGroupData::set_activityid(uint32_t value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.ActivityId)
}

// uint32 RepeatType = 13;
inline void ActivityGroupData::clear_repeattype() {
  _impl_.repeattype_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_repeattype() const {
  return _impl_.repeattype_;
}
inline uint32_t ActivityGroupData::repeattype() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.RepeatType)
  return _internal_repeattype();
}
inline void ActivityGroupData::_internal_set_repeattype(uint32_t value) {
  
  _impl_.repeattype_ = value;
}
inline void ActivityGroupData::set_repeattype(uint32_t value) {
  _internal_set_repeattype(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.RepeatType)
}

// string ShowParam = 14;
inline void ActivityGroupData::clear_showparam() {
  _impl_.showparam_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::showparam() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.ShowParam)
  return _internal_showparam();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_showparam(ArgT0&& arg0, ArgT... args) {
 
 _impl_.showparam_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.ShowParam)
}
inline std::string* ActivityGroupData::mutable_showparam() {
  std::string* _s = _internal_mutable_showparam();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.ShowParam)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_showparam() const {
  return _impl_.showparam_.Get();
}
inline void ActivityGroupData::_internal_set_showparam(const std::string& value) {
  
  _impl_.showparam_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_showparam() {
  
  return _impl_.showparam_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_showparam() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.ShowParam)
  return _impl_.showparam_.Release();
}
inline void ActivityGroupData::set_allocated_showparam(std::string* showparam) {
  if (showparam != nullptr) {
    
  } else {
    
  }
  _impl_.showparam_.SetAllocated(showparam, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.showparam_.IsDefault()) {
    _impl_.showparam_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.ShowParam)
}

// repeated .msg.BuffEffect BuffEffects = 15;
inline int ActivityGroupData::_internal_buffeffects_size() const {
  return _impl_.buffeffects_.size();
}
inline int ActivityGroupData::buffeffects_size() const {
  return _internal_buffeffects_size();
}
inline void ActivityGroupData::clear_buffeffects() {
  _impl_.buffeffects_.Clear();
}
inline ::msg::BuffEffect* ActivityGroupData::mutable_buffeffects(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.BuffEffects)
  return _impl_.buffeffects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BuffEffect >*
ActivityGroupData::mutable_buffeffects() {
  // @@protoc_insertion_point(field_mutable_list:msg.ActivityGroupData.BuffEffects)
  return &_impl_.buffeffects_;
}
inline const ::msg::BuffEffect& ActivityGroupData::_internal_buffeffects(int index) const {
  return _impl_.buffeffects_.Get(index);
}
inline const ::msg::BuffEffect& ActivityGroupData::buffeffects(int index) const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.BuffEffects)
  return _internal_buffeffects(index);
}
inline ::msg::BuffEffect* ActivityGroupData::_internal_add_buffeffects() {
  return _impl_.buffeffects_.Add();
}
inline ::msg::BuffEffect* ActivityGroupData::add_buffeffects() {
  ::msg::BuffEffect* _add = _internal_add_buffeffects();
  // @@protoc_insertion_point(field_add:msg.ActivityGroupData.BuffEffects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BuffEffect >&
ActivityGroupData::buffeffects() const {
  // @@protoc_insertion_point(field_list:msg.ActivityGroupData.BuffEffects)
  return _impl_.buffeffects_;
}

// repeated uint32 Modes = 16;
inline int ActivityGroupData::_internal_modes_size() const {
  return _impl_.modes_.size();
}
inline int ActivityGroupData::modes_size() const {
  return _internal_modes_size();
}
inline void ActivityGroupData::clear_modes() {
  _impl_.modes_.Clear();
}
inline uint32_t ActivityGroupData::_internal_modes(int index) const {
  return _impl_.modes_.Get(index);
}
inline uint32_t ActivityGroupData::modes(int index) const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Modes)
  return _internal_modes(index);
}
inline void ActivityGroupData::set_modes(int index, uint32_t value) {
  _impl_.modes_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Modes)
}
inline void ActivityGroupData::_internal_add_modes(uint32_t value) {
  _impl_.modes_.Add(value);
}
inline void ActivityGroupData::add_modes(uint32_t value) {
  _internal_add_modes(value);
  // @@protoc_insertion_point(field_add:msg.ActivityGroupData.Modes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ActivityGroupData::_internal_modes() const {
  return _impl_.modes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ActivityGroupData::modes() const {
  // @@protoc_insertion_point(field_list:msg.ActivityGroupData.Modes)
  return _internal_modes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ActivityGroupData::_internal_mutable_modes() {
  return &_impl_.modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ActivityGroupData::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:msg.ActivityGroupData.Modes)
  return _internal_mutable_modes();
}

// uint32 PageType = 17;
inline void ActivityGroupData::clear_pagetype() {
  _impl_.pagetype_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_pagetype() const {
  return _impl_.pagetype_;
}
inline uint32_t ActivityGroupData::pagetype() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PageType)
  return _internal_pagetype();
}
inline void ActivityGroupData::_internal_set_pagetype(uint32_t value) {
  
  _impl_.pagetype_ = value;
}
inline void ActivityGroupData::set_pagetype(uint32_t value) {
  _internal_set_pagetype(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PageType)
}

// string PicName = 18;
inline void ActivityGroupData::clear_picname() {
  _impl_.picname_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::picname() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PicName)
  return _internal_picname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_picname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PicName)
}
inline std::string* ActivityGroupData::mutable_picname() {
  std::string* _s = _internal_mutable_picname();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.PicName)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_picname() const {
  return _impl_.picname_.Get();
}
inline void ActivityGroupData::_internal_set_picname(const std::string& value) {
  
  _impl_.picname_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_picname() {
  
  return _impl_.picname_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_picname() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.PicName)
  return _impl_.picname_.Release();
}
inline void ActivityGroupData::set_allocated_picname(std::string* picname) {
  if (picname != nullptr) {
    
  } else {
    
  }
  _impl_.picname_.SetAllocated(picname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picname_.IsDefault()) {
    _impl_.picname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.PicName)
}

// bool PicOpen = 19;
inline void ActivityGroupData::clear_picopen() {
  _impl_.picopen_ = false;
}
inline bool ActivityGroupData::_internal_picopen() const {
  return _impl_.picopen_;
}
inline bool ActivityGroupData::picopen() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PicOpen)
  return _internal_picopen();
}
inline void ActivityGroupData::_internal_set_picopen(bool value) {
  
  _impl_.picopen_ = value;
}
inline void ActivityGroupData::set_picopen(bool value) {
  _internal_set_picopen(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PicOpen)
}

// uint32 SubscriptType = 20;
inline void ActivityGroupData::clear_subscripttype() {
  _impl_.subscripttype_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_subscripttype() const {
  return _impl_.subscripttype_;
}
inline uint32_t ActivityGroupData::subscripttype() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.SubscriptType)
  return _internal_subscripttype();
}
inline void ActivityGroupData::_internal_set_subscripttype(uint32_t value) {
  
  _impl_.subscripttype_ = value;
}
inline void ActivityGroupData::set_subscripttype(uint32_t value) {
  _internal_set_subscripttype(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.SubscriptType)
}

// uint32 OrderID = 21;
inline void ActivityGroupData::clear_orderid() {
  _impl_.orderid_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_orderid() const {
  return _impl_.orderid_;
}
inline uint32_t ActivityGroupData::orderid() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.OrderID)
  return _internal_orderid();
}
inline void ActivityGroupData::_internal_set_orderid(uint32_t value) {
  
  _impl_.orderid_ = value;
}
inline void ActivityGroupData::set_orderid(uint32_t value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.OrderID)
}

// uint32 PicInterval = 22;
inline void ActivityGroupData::clear_picinterval() {
  _impl_.picinterval_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_picinterval() const {
  return _impl_.picinterval_;
}
inline uint32_t ActivityGroupData::picinterval() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PicInterval)
  return _internal_picinterval();
}
inline void ActivityGroupData::_internal_set_picinterval(uint32_t value) {
  
  _impl_.picinterval_ = value;
}
inline void ActivityGroupData::set_picinterval(uint32_t value) {
  _internal_set_picinterval(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PicInterval)
}

// uint32 PicSwitchOpen = 23;
inline void ActivityGroupData::clear_picswitchopen() {
  _impl_.picswitchopen_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_picswitchopen() const {
  return _impl_.picswitchopen_;
}
inline uint32_t ActivityGroupData::picswitchopen() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PicSwitchOpen)
  return _internal_picswitchopen();
}
inline void ActivityGroupData::_internal_set_picswitchopen(uint32_t value) {
  
  _impl_.picswitchopen_ = value;
}
inline void ActivityGroupData::set_picswitchopen(uint32_t value) {
  _internal_set_picswitchopen(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PicSwitchOpen)
}

// .msg.EFFECTTIMETYPE EffectTimeType = 24;
inline void ActivityGroupData::clear_effecttimetype() {
  _impl_.effecttimetype_ = 0;
}
inline ::msg::EFFECTTIMETYPE ActivityGroupData::_internal_effecttimetype() const {
  return static_cast< ::msg::EFFECTTIMETYPE >(_impl_.effecttimetype_);
}
inline ::msg::EFFECTTIMETYPE ActivityGroupData::effecttimetype() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.EffectTimeType)
  return _internal_effecttimetype();
}
inline void ActivityGroupData::_internal_set_effecttimetype(::msg::EFFECTTIMETYPE value) {
  
  _impl_.effecttimetype_ = value;
}
inline void ActivityGroupData::set_effecttimetype(::msg::EFFECTTIMETYPE value) {
  _internal_set_effecttimetype(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.EffectTimeType)
}

// string EffectWeekday = 25;
inline void ActivityGroupData::clear_effectweekday() {
  _impl_.effectweekday_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::effectweekday() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.EffectWeekday)
  return _internal_effectweekday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_effectweekday(ArgT0&& arg0, ArgT... args) {
 
 _impl_.effectweekday_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.EffectWeekday)
}
inline std::string* ActivityGroupData::mutable_effectweekday() {
  std::string* _s = _internal_mutable_effectweekday();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.EffectWeekday)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_effectweekday() const {
  return _impl_.effectweekday_.Get();
}
inline void ActivityGroupData::_internal_set_effectweekday(const std::string& value) {
  
  _impl_.effectweekday_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_effectweekday() {
  
  return _impl_.effectweekday_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_effectweekday() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.EffectWeekday)
  return _impl_.effectweekday_.Release();
}
inline void ActivityGroupData::set_allocated_effectweekday(std::string* effectweekday) {
  if (effectweekday != nullptr) {
    
  } else {
    
  }
  _impl_.effectweekday_.SetAllocated(effectweekday, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.effectweekday_.IsDefault()) {
    _impl_.effectweekday_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.EffectWeekday)
}

// string TakeEffectDate = 26;
inline void ActivityGroupData::clear_takeeffectdate() {
  _impl_.takeeffectdate_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::takeeffectdate() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TakeEffectDate)
  return _internal_takeeffectdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_takeeffectdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.takeeffectdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TakeEffectDate)
}
inline std::string* ActivityGroupData::mutable_takeeffectdate() {
  std::string* _s = _internal_mutable_takeeffectdate();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TakeEffectDate)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_takeeffectdate() const {
  return _impl_.takeeffectdate_.Get();
}
inline void ActivityGroupData::_internal_set_takeeffectdate(const std::string& value) {
  
  _impl_.takeeffectdate_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_takeeffectdate() {
  
  return _impl_.takeeffectdate_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_takeeffectdate() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TakeEffectDate)
  return _impl_.takeeffectdate_.Release();
}
inline void ActivityGroupData::set_allocated_takeeffectdate(std::string* takeeffectdate) {
  if (takeeffectdate != nullptr) {
    
  } else {
    
  }
  _impl_.takeeffectdate_.SetAllocated(takeeffectdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.takeeffectdate_.IsDefault()) {
    _impl_.takeeffectdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TakeEffectDate)
}

// string TakeEffectTime = 27;
inline void ActivityGroupData::clear_takeeffecttime() {
  _impl_.takeeffecttime_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::takeeffecttime() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TakeEffectTime)
  return _internal_takeeffecttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_takeeffecttime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.takeeffecttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TakeEffectTime)
}
inline std::string* ActivityGroupData::mutable_takeeffecttime() {
  std::string* _s = _internal_mutable_takeeffecttime();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TakeEffectTime)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_takeeffecttime() const {
  return _impl_.takeeffecttime_.Get();
}
inline void ActivityGroupData::_internal_set_takeeffecttime(const std::string& value) {
  
  _impl_.takeeffecttime_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_takeeffecttime() {
  
  return _impl_.takeeffecttime_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_takeeffecttime() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TakeEffectTime)
  return _impl_.takeeffecttime_.Release();
}
inline void ActivityGroupData::set_allocated_takeeffecttime(std::string* takeeffecttime) {
  if (takeeffecttime != nullptr) {
    
  } else {
    
  }
  _impl_.takeeffecttime_.SetAllocated(takeeffecttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.takeeffecttime_.IsDefault()) {
    _impl_.takeeffecttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TakeEffectTime)
}

// string TakeEffectRank = 28;
inline void ActivityGroupData::clear_takeeffectrank() {
  _impl_.takeeffectrank_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::takeeffectrank() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TakeEffectRank)
  return _internal_takeeffectrank();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_takeeffectrank(ArgT0&& arg0, ArgT... args) {
 
 _impl_.takeeffectrank_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TakeEffectRank)
}
inline std::string* ActivityGroupData::mutable_takeeffectrank() {
  std::string* _s = _internal_mutable_takeeffectrank();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TakeEffectRank)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_takeeffectrank() const {
  return _impl_.takeeffectrank_.Get();
}
inline void ActivityGroupData::_internal_set_takeeffectrank(const std::string& value) {
  
  _impl_.takeeffectrank_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_takeeffectrank() {
  
  return _impl_.takeeffectrank_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_takeeffectrank() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TakeEffectRank)
  return _impl_.takeeffectrank_.Release();
}
inline void ActivityGroupData::set_allocated_takeeffectrank(std::string* takeeffectrank) {
  if (takeeffectrank != nullptr) {
    
  } else {
    
  }
  _impl_.takeeffectrank_.SetAllocated(takeeffectrank, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.takeeffectrank_.IsDefault()) {
    _impl_.takeeffectrank_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TakeEffectRank)
}

// string TakeEffectMode = 29;
inline void ActivityGroupData::clear_takeeffectmode() {
  _impl_.takeeffectmode_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::takeeffectmode() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TakeEffectMode)
  return _internal_takeeffectmode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_takeeffectmode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.takeeffectmode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TakeEffectMode)
}
inline std::string* ActivityGroupData::mutable_takeeffectmode() {
  std::string* _s = _internal_mutable_takeeffectmode();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TakeEffectMode)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_takeeffectmode() const {
  return _impl_.takeeffectmode_.Get();
}
inline void ActivityGroupData::_internal_set_takeeffectmode(const std::string& value) {
  
  _impl_.takeeffectmode_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_takeeffectmode() {
  
  return _impl_.takeeffectmode_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_takeeffectmode() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TakeEffectMode)
  return _impl_.takeeffectmode_.Release();
}
inline void ActivityGroupData::set_allocated_takeeffectmode(std::string* takeeffectmode) {
  if (takeeffectmode != nullptr) {
    
  } else {
    
  }
  _impl_.takeeffectmode_.SetAllocated(takeeffectmode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.takeeffectmode_.IsDefault()) {
    _impl_.takeeffectmode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TakeEffectMode)
}

// .msg.ACTIVITYTEAMSTATE TeamState = 30;
inline void ActivityGroupData::clear_teamstate() {
  _impl_.teamstate_ = 0;
}
inline ::msg::ACTIVITYTEAMSTATE ActivityGroupData::_internal_teamstate() const {
  return static_cast< ::msg::ACTIVITYTEAMSTATE >(_impl_.teamstate_);
}
inline ::msg::ACTIVITYTEAMSTATE ActivityGroupData::teamstate() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TeamState)
  return _internal_teamstate();
}
inline void ActivityGroupData::_internal_set_teamstate(::msg::ACTIVITYTEAMSTATE value) {
  
  _impl_.teamstate_ = value;
}
inline void ActivityGroupData::set_teamstate(::msg::ACTIVITYTEAMSTATE value) {
  _internal_set_teamstate(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TeamState)
}

// uint32 UIStylePhone = 31;
inline void ActivityGroupData::clear_uistylephone() {
  _impl_.uistylephone_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_uistylephone() const {
  return _impl_.uistylephone_;
}
inline uint32_t ActivityGroupData::uistylephone() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.UIStylePhone)
  return _internal_uistylephone();
}
inline void ActivityGroupData::_internal_set_uistylephone(uint32_t value) {
  
  _impl_.uistylephone_ = value;
}
inline void ActivityGroupData::set_uistylephone(uint32_t value) {
  _internal_set_uistylephone(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.UIStylePhone)
}

// uint32 UIStylePC = 32;
inline void ActivityGroupData::clear_uistylepc() {
  _impl_.uistylepc_ = 0u;
}
inline uint32_t ActivityGroupData::_internal_uistylepc() const {
  return _impl_.uistylepc_;
}
inline uint32_t ActivityGroupData::uistylepc() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.UIStylePC)
  return _internal_uistylepc();
}
inline void ActivityGroupData::_internal_set_uistylepc(uint32_t value) {
  
  _impl_.uistylepc_ = value;
}
inline void ActivityGroupData::set_uistylepc(uint32_t value) {
  _internal_set_uistylepc(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.UIStylePC)
}

// string Zone = 33;
inline void ActivityGroupData::clear_zone() {
  _impl_.zone_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::zone() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_zone(ArgT0&& arg0, ArgT... args) {
 
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Zone)
}
inline std::string* ActivityGroupData::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.Zone)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void ActivityGroupData::_internal_set_zone(const std::string& value) {
  
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_zone() {
  
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_zone() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.Zone)
  return _impl_.zone_.Release();
}
inline void ActivityGroupData::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.Zone)
}

// repeated string Channels = 34;
inline int ActivityGroupData::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int ActivityGroupData::channels_size() const {
  return _internal_channels_size();
}
inline void ActivityGroupData::clear_channels() {
  _impl_.channels_.Clear();
}
inline std::string* ActivityGroupData::add_channels() {
  std::string* _s = _internal_add_channels();
  // @@protoc_insertion_point(field_add_mutable:msg.ActivityGroupData.Channels)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline const std::string& ActivityGroupData::channels(int index) const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.Channels)
  return _internal_channels(index);
}
inline std::string* ActivityGroupData::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.Channels)
  return _impl_.channels_.Mutable(index);
}
inline void ActivityGroupData::set_channels(int index, const std::string& value) {
  _impl_.channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Channels)
}
inline void ActivityGroupData::set_channels(int index, std::string&& value) {
  _impl_.channels_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.Channels)
}
inline void ActivityGroupData::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.ActivityGroupData.Channels)
}
inline void ActivityGroupData::set_channels(int index, const char* value, size_t size) {
  _impl_.channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.ActivityGroupData.Channels)
}
inline std::string* ActivityGroupData::_internal_add_channels() {
  return _impl_.channels_.Add();
}
inline void ActivityGroupData::add_channels(const std::string& value) {
  _impl_.channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.ActivityGroupData.Channels)
}
inline void ActivityGroupData::add_channels(std::string&& value) {
  _impl_.channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.ActivityGroupData.Channels)
}
inline void ActivityGroupData::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.ActivityGroupData.Channels)
}
inline void ActivityGroupData::add_channels(const char* value, size_t size) {
  _impl_.channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.ActivityGroupData.Channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActivityGroupData::channels() const {
  // @@protoc_insertion_point(field_list:msg.ActivityGroupData.Channels)
  return _impl_.channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActivityGroupData::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:msg.ActivityGroupData.Channels)
  return &_impl_.channels_;
}

// string TakeEffectLevel = 35;
inline void ActivityGroupData::clear_takeeffectlevel() {
  _impl_.takeeffectlevel_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::takeeffectlevel() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.TakeEffectLevel)
  return _internal_takeeffectlevel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_takeeffectlevel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.takeeffectlevel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.TakeEffectLevel)
}
inline std::string* ActivityGroupData::mutable_takeeffectlevel() {
  std::string* _s = _internal_mutable_takeeffectlevel();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.TakeEffectLevel)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_takeeffectlevel() const {
  return _impl_.takeeffectlevel_.Get();
}
inline void ActivityGroupData::_internal_set_takeeffectlevel(const std::string& value) {
  
  _impl_.takeeffectlevel_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_takeeffectlevel() {
  
  return _impl_.takeeffectlevel_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_takeeffectlevel() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.TakeEffectLevel)
  return _impl_.takeeffectlevel_.Release();
}
inline void ActivityGroupData::set_allocated_takeeffectlevel(std::string* takeeffectlevel) {
  if (takeeffectlevel != nullptr) {
    
  } else {
    
  }
  _impl_.takeeffectlevel_.SetAllocated(takeeffectlevel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.takeeffectlevel_.IsDefault()) {
    _impl_.takeeffectlevel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.TakeEffectLevel)
}

// int32 MakeUp = 36;
inline void ActivityGroupData::clear_makeup() {
  _impl_.makeup_ = 0;
}
inline int32_t ActivityGroupData::_internal_makeup() const {
  return _impl_.makeup_;
}
inline int32_t ActivityGroupData::makeup() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.MakeUp)
  return _internal_makeup();
}
inline void ActivityGroupData::_internal_set_makeup(int32_t value) {
  
  _impl_.makeup_ = value;
}
inline void ActivityGroupData::set_makeup(int32_t value) {
  _internal_set_makeup(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.MakeUp)
}

// int64 LeastMach = 37;
inline void ActivityGroupData::clear_leastmach() {
  _impl_.leastmach_ = int64_t{0};
}
inline int64_t ActivityGroupData::_internal_leastmach() const {
  return _impl_.leastmach_;
}
inline int64_t ActivityGroupData::leastmach() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.LeastMach)
  return _internal_leastmach();
}
inline void ActivityGroupData::_internal_set_leastmach(int64_t value) {
  
  _impl_.leastmach_ = value;
}
inline void ActivityGroupData::set_leastmach(int64_t value) {
  _internal_set_leastmach(value);
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.LeastMach)
}

// string PlatformClose = 38;
inline void ActivityGroupData::clear_platformclose() {
  _impl_.platformclose_.ClearToEmpty();
}
inline const std::string& ActivityGroupData::platformclose() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroupData.PlatformClose)
  return _internal_platformclose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityGroupData::set_platformclose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.platformclose_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityGroupData.PlatformClose)
}
inline std::string* ActivityGroupData::mutable_platformclose() {
  std::string* _s = _internal_mutable_platformclose();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroupData.PlatformClose)
  return _s;
}
inline const std::string& ActivityGroupData::_internal_platformclose() const {
  return _impl_.platformclose_.Get();
}
inline void ActivityGroupData::_internal_set_platformclose(const std::string& value) {
  
  _impl_.platformclose_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityGroupData::_internal_mutable_platformclose() {
  
  return _impl_.platformclose_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityGroupData::release_platformclose() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroupData.PlatformClose)
  return _impl_.platformclose_.Release();
}
inline void ActivityGroupData::set_allocated_platformclose(std::string* platformclose) {
  if (platformclose != nullptr) {
    
  } else {
    
  }
  _impl_.platformclose_.SetAllocated(platformclose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.platformclose_.IsDefault()) {
    _impl_.platformclose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroupData.PlatformClose)
}

// -------------------------------------------------------------------

// ActivityData

// uint32 GroupId = 1;
inline void ActivityData::clear_groupid() {
  _impl_.groupid_ = 0u;
}
inline uint32_t ActivityData::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint32_t ActivityData::groupid() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.GroupId)
  return _internal_groupid();
}
inline void ActivityData::_internal_set_groupid(uint32_t value) {
  
  _impl_.groupid_ = value;
}
inline void ActivityData::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.GroupId)
}

// uint32 Id = 2;
inline void ActivityData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ActivityData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ActivityData::id() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Id)
  return _internal_id();
}
inline void ActivityData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ActivityData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.Id)
}

// string Title = 3;
inline void ActivityData::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ActivityData::title() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityData::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityData.Title)
}
inline std::string* ActivityData::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:msg.ActivityData.Title)
  return _s;
}
inline const std::string& ActivityData::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ActivityData::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityData::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityData::release_title() {
  // @@protoc_insertion_point(field_release:msg.ActivityData.Title)
  return _impl_.title_.Release();
}
inline void ActivityData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityData.Title)
}

// uint32 Unit = 4;
inline void ActivityData::clear_unit() {
  _impl_.unit_ = 0u;
}
inline uint32_t ActivityData::_internal_unit() const {
  return _impl_.unit_;
}
inline uint32_t ActivityData::unit() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Unit)
  return _internal_unit();
}
inline void ActivityData::_internal_set_unit(uint32_t value) {
  
  _impl_.unit_ = value;
}
inline void ActivityData::set_unit(uint32_t value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.Unit)
}

// .msg.Cond Cond = 5;
inline bool ActivityData::_internal_has_cond() const {
  return this != internal_default_instance() && _impl_.cond_ != nullptr;
}
inline bool ActivityData::has_cond() const {
  return _internal_has_cond();
}
inline void ActivityData::clear_cond() {
  if (GetArenaForAllocation() == nullptr && _impl_.cond_ != nullptr) {
    delete _impl_.cond_;
  }
  _impl_.cond_ = nullptr;
}
inline const ::msg::Cond& ActivityData::_internal_cond() const {
  const ::msg::Cond* p = _impl_.cond_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Cond&>(
      ::msg::_Cond_default_instance_);
}
inline const ::msg::Cond& ActivityData::cond() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Cond)
  return _internal_cond();
}
inline void ActivityData::unsafe_arena_set_allocated_cond(
    ::msg::Cond* cond) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cond_);
  }
  _impl_.cond_ = cond;
  if (cond) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ActivityData.Cond)
}
inline ::msg::Cond* ActivityData::release_cond() {
  
  ::msg::Cond* temp = _impl_.cond_;
  _impl_.cond_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Cond* ActivityData::unsafe_arena_release_cond() {
  // @@protoc_insertion_point(field_release:msg.ActivityData.Cond)
  
  ::msg::Cond* temp = _impl_.cond_;
  _impl_.cond_ = nullptr;
  return temp;
}
inline ::msg::Cond* ActivityData::_internal_mutable_cond() {
  
  if (_impl_.cond_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Cond>(GetArenaForAllocation());
    _impl_.cond_ = p;
  }
  return _impl_.cond_;
}
inline ::msg::Cond* ActivityData::mutable_cond() {
  ::msg::Cond* _msg = _internal_mutable_cond();
  // @@protoc_insertion_point(field_mutable:msg.ActivityData.Cond)
  return _msg;
}
inline void ActivityData::set_allocated_cond(::msg::Cond* cond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cond_;
  }
  if (cond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cond);
    if (message_arena != submessage_arena) {
      cond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cond_ = cond;
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityData.Cond)
}

// repeated .msg.Award Awards = 6;
inline int ActivityData::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int ActivityData::awards_size() const {
  return _internal_awards_size();
}
inline void ActivityData::clear_awards() {
  _impl_.awards_.Clear();
}
inline ::msg::Award* ActivityData::mutable_awards(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ActivityData.Awards)
  return _impl_.awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
ActivityData::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.ActivityData.Awards)
  return &_impl_.awards_;
}
inline const ::msg::Award& ActivityData::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline const ::msg::Award& ActivityData::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Awards)
  return _internal_awards(index);
}
inline ::msg::Award* ActivityData::_internal_add_awards() {
  return _impl_.awards_.Add();
}
inline ::msg::Award* ActivityData::add_awards() {
  ::msg::Award* _add = _internal_add_awards();
  // @@protoc_insertion_point(field_add:msg.ActivityData.Awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
ActivityData::awards() const {
  // @@protoc_insertion_point(field_list:msg.ActivityData.Awards)
  return _impl_.awards_;
}

// uint32 CondGroup = 7;
inline void ActivityData::clear_condgroup() {
  _impl_.condgroup_ = 0u;
}
inline uint32_t ActivityData::_internal_condgroup() const {
  return _impl_.condgroup_;
}
inline uint32_t ActivityData::condgroup() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.CondGroup)
  return _internal_condgroup();
}
inline void ActivityData::_internal_set_condgroup(uint32_t value) {
  
  _impl_.condgroup_ = value;
}
inline void ActivityData::set_condgroup(uint32_t value) {
  _internal_set_condgroup(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.CondGroup)
}

// uint32 PreCondGroup = 8;
inline void ActivityData::clear_precondgroup() {
  _impl_.precondgroup_ = 0u;
}
inline uint32_t ActivityData::_internal_precondgroup() const {
  return _impl_.precondgroup_;
}
inline uint32_t ActivityData::precondgroup() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.PreCondGroup)
  return _internal_precondgroup();
}
inline void ActivityData::_internal_set_precondgroup(uint32_t value) {
  
  _impl_.precondgroup_ = value;
}
inline void ActivityData::set_precondgroup(uint32_t value) {
  _internal_set_precondgroup(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.PreCondGroup)
}

// string SkipInterface = 9;
inline void ActivityData::clear_skipinterface() {
  _impl_.skipinterface_.ClearToEmpty();
}
inline const std::string& ActivityData::skipinterface() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.SkipInterface)
  return _internal_skipinterface();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityData::set_skipinterface(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skipinterface_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityData.SkipInterface)
}
inline std::string* ActivityData::mutable_skipinterface() {
  std::string* _s = _internal_mutable_skipinterface();
  // @@protoc_insertion_point(field_mutable:msg.ActivityData.SkipInterface)
  return _s;
}
inline const std::string& ActivityData::_internal_skipinterface() const {
  return _impl_.skipinterface_.Get();
}
inline void ActivityData::_internal_set_skipinterface(const std::string& value) {
  
  _impl_.skipinterface_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityData::_internal_mutable_skipinterface() {
  
  return _impl_.skipinterface_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityData::release_skipinterface() {
  // @@protoc_insertion_point(field_release:msg.ActivityData.SkipInterface)
  return _impl_.skipinterface_.Release();
}
inline void ActivityData::set_allocated_skipinterface(std::string* skipinterface) {
  if (skipinterface != nullptr) {
    
  } else {
    
  }
  _impl_.skipinterface_.SetAllocated(skipinterface, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skipinterface_.IsDefault()) {
    _impl_.skipinterface_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityData.SkipInterface)
}

// uint32 SkipTab = 10;
inline void ActivityData::clear_skiptab() {
  _impl_.skiptab_ = 0u;
}
inline uint32_t ActivityData::_internal_skiptab() const {
  return _impl_.skiptab_;
}
inline uint32_t ActivityData::skiptab() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.SkipTab)
  return _internal_skiptab();
}
inline void ActivityData::_internal_set_skiptab(uint32_t value) {
  
  _impl_.skiptab_ = value;
}
inline void ActivityData::set_skiptab(uint32_t value) {
  _internal_set_skiptab(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.SkipTab)
}

// uint32 Day = 11;
inline void ActivityData::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t ActivityData::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t ActivityData::day() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Day)
  return _internal_day();
}
inline void ActivityData::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void ActivityData::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.Day)
}

// string Desc = 12;
inline void ActivityData::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& ActivityData::desc() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.Desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityData::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityData.Desc)
}
inline std::string* ActivityData::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:msg.ActivityData.Desc)
  return _s;
}
inline const std::string& ActivityData::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void ActivityData::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityData::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityData::release_desc() {
  // @@protoc_insertion_point(field_release:msg.ActivityData.Desc)
  return _impl_.desc_.Release();
}
inline void ActivityData::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityData.Desc)
}

// uint32 ShowQuality = 13;
inline void ActivityData::clear_showquality() {
  _impl_.showquality_ = 0u;
}
inline uint32_t ActivityData::_internal_showquality() const {
  return _impl_.showquality_;
}
inline uint32_t ActivityData::showquality() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.ShowQuality)
  return _internal_showquality();
}
inline void ActivityData::_internal_set_showquality(uint32_t value) {
  
  _impl_.showquality_ = value;
}
inline void ActivityData::set_showquality(uint32_t value) {
  _internal_set_showquality(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.ShowQuality)
}

// string ShowGiftPic = 14;
inline void ActivityData::clear_showgiftpic() {
  _impl_.showgiftpic_.ClearToEmpty();
}
inline const std::string& ActivityData::showgiftpic() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.ShowGiftPic)
  return _internal_showgiftpic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityData::set_showgiftpic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.showgiftpic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ActivityData.ShowGiftPic)
}
inline std::string* ActivityData::mutable_showgiftpic() {
  std::string* _s = _internal_mutable_showgiftpic();
  // @@protoc_insertion_point(field_mutable:msg.ActivityData.ShowGiftPic)
  return _s;
}
inline const std::string& ActivityData::_internal_showgiftpic() const {
  return _impl_.showgiftpic_.Get();
}
inline void ActivityData::_internal_set_showgiftpic(const std::string& value) {
  
  _impl_.showgiftpic_.Set(value, GetArenaForAllocation());
}
inline std::string* ActivityData::_internal_mutable_showgiftpic() {
  
  return _impl_.showgiftpic_.Mutable(GetArenaForAllocation());
}
inline std::string* ActivityData::release_showgiftpic() {
  // @@protoc_insertion_point(field_release:msg.ActivityData.ShowGiftPic)
  return _impl_.showgiftpic_.Release();
}
inline void ActivityData::set_allocated_showgiftpic(std::string* showgiftpic) {
  if (showgiftpic != nullptr) {
    
  } else {
    
  }
  _impl_.showgiftpic_.SetAllocated(showgiftpic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.showgiftpic_.IsDefault()) {
    _impl_.showgiftpic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityData.ShowGiftPic)
}

// .msg.ActivityResetType ResetType = 15;
inline void ActivityData::clear_resettype() {
  _impl_.resettype_ = 0;
}
inline ::msg::ActivityResetType ActivityData::_internal_resettype() const {
  return static_cast< ::msg::ActivityResetType >(_impl_.resettype_);
}
inline ::msg::ActivityResetType ActivityData::resettype() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.ResetType)
  return _internal_resettype();
}
inline void ActivityData::_internal_set_resettype(::msg::ActivityResetType value) {
  
  _impl_.resettype_ = value;
}
inline void ActivityData::set_resettype(::msg::ActivityResetType value) {
  _internal_set_resettype(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.ResetType)
}

// bool IsRecruiter = 16;
inline void ActivityData::clear_isrecruiter() {
  _impl_.isrecruiter_ = false;
}
inline bool ActivityData::_internal_isrecruiter() const {
  return _impl_.isrecruiter_;
}
inline bool ActivityData::isrecruiter() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.IsRecruiter)
  return _internal_isrecruiter();
}
inline void ActivityData::_internal_set_isrecruiter(bool value) {
  
  _impl_.isrecruiter_ = value;
}
inline void ActivityData::set_isrecruiter(bool value) {
  _internal_set_isrecruiter(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.IsRecruiter)
}

// uint32 ProgressInherit = 17;
inline void ActivityData::clear_progressinherit() {
  _impl_.progressinherit_ = 0u;
}
inline uint32_t ActivityData::_internal_progressinherit() const {
  return _impl_.progressinherit_;
}
inline uint32_t ActivityData::progressinherit() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.ProgressInherit)
  return _internal_progressinherit();
}
inline void ActivityData::_internal_set_progressinherit(uint32_t value) {
  
  _impl_.progressinherit_ = value;
}
inline void ActivityData::set_progressinherit(uint32_t value) {
  _internal_set_progressinherit(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.ProgressInherit)
}

// uint32 ShowOrder = 18;
inline void ActivityData::clear_showorder() {
  _impl_.showorder_ = 0u;
}
inline uint32_t ActivityData::_internal_showorder() const {
  return _impl_.showorder_;
}
inline uint32_t ActivityData::showorder() const {
  // @@protoc_insertion_point(field_get:msg.ActivityData.ShowOrder)
  return _internal_showorder();
}
inline void ActivityData::_internal_set_showorder(uint32_t value) {
  
  _impl_.showorder_ = value;
}
inline void ActivityData::set_showorder(uint32_t value) {
  _internal_set_showorder(value);
  // @@protoc_insertion_point(field_set:msg.ActivityData.ShowOrder)
}

// -------------------------------------------------------------------

// ActivityAttrData

// uint32 ID = 1;
inline void ActivityAttrData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ActivityAttrData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ActivityAttrData::id() const {
  // @@protoc_insertion_point(field_get:msg.ActivityAttrData.ID)
  return _internal_id();
}
inline void ActivityAttrData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ActivityAttrData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ActivityAttrData.ID)
}

// .msg.ABTESTTYPE ABTestType = 2;
inline void ActivityAttrData::clear_abtesttype() {
  _impl_.abtesttype_ = 0;
}
inline ::msg::ABTESTTYPE ActivityAttrData::_internal_abtesttype() const {
  return static_cast< ::msg::ABTESTTYPE >(_impl_.abtesttype_);
}
inline ::msg::ABTESTTYPE ActivityAttrData::abtesttype() const {
  // @@protoc_insertion_point(field_get:msg.ActivityAttrData.ABTestType)
  return _internal_abtesttype();
}
inline void ActivityAttrData::_internal_set_abtesttype(::msg::ABTESTTYPE value) {
  
  _impl_.abtesttype_ = value;
}
inline void ActivityAttrData::set_abtesttype(::msg::ABTESTTYPE value) {
  _internal_set_abtesttype(value);
  // @@protoc_insertion_point(field_set:msg.ActivityAttrData.ABTestType)
}

// uint32 ABTestValue = 3;
inline void ActivityAttrData::clear_abtestvalue() {
  _impl_.abtestvalue_ = 0u;
}
inline uint32_t ActivityAttrData::_internal_abtestvalue() const {
  return _impl_.abtestvalue_;
}
inline uint32_t ActivityAttrData::abtestvalue() const {
  // @@protoc_insertion_point(field_get:msg.ActivityAttrData.ABTestValue)
  return _internal_abtestvalue();
}
inline void ActivityAttrData::_internal_set_abtestvalue(uint32_t value) {
  
  _impl_.abtestvalue_ = value;
}
inline void ActivityAttrData::set_abtestvalue(uint32_t value) {
  _internal_set_abtestvalue(value);
  // @@protoc_insertion_point(field_set:msg.ActivityAttrData.ABTestValue)
}

// -------------------------------------------------------------------

// GMLanguageInfo

// string LanguageType = 1;
inline void GMLanguageInfo::clear_languagetype() {
  _impl_.languagetype_.ClearToEmpty();
}
inline const std::string& GMLanguageInfo::languagetype() const {
  // @@protoc_insertion_point(field_get:msg.GMLanguageInfo.LanguageType)
  return _internal_languagetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GMLanguageInfo::set_languagetype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.languagetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GMLanguageInfo.LanguageType)
}
inline std::string* GMLanguageInfo::mutable_languagetype() {
  std::string* _s = _internal_mutable_languagetype();
  // @@protoc_insertion_point(field_mutable:msg.GMLanguageInfo.LanguageType)
  return _s;
}
inline const std::string& GMLanguageInfo::_internal_languagetype() const {
  return _impl_.languagetype_.Get();
}
inline void GMLanguageInfo::_internal_set_languagetype(const std::string& value) {
  
  _impl_.languagetype_.Set(value, GetArenaForAllocation());
}
inline std::string* GMLanguageInfo::_internal_mutable_languagetype() {
  
  return _impl_.languagetype_.Mutable(GetArenaForAllocation());
}
inline std::string* GMLanguageInfo::release_languagetype() {
  // @@protoc_insertion_point(field_release:msg.GMLanguageInfo.LanguageType)
  return _impl_.languagetype_.Release();
}
inline void GMLanguageInfo::set_allocated_languagetype(std::string* languagetype) {
  if (languagetype != nullptr) {
    
  } else {
    
  }
  _impl_.languagetype_.SetAllocated(languagetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.languagetype_.IsDefault()) {
    _impl_.languagetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GMLanguageInfo.LanguageType)
}

// string Translate = 2;
inline void GMLanguageInfo::clear_translate() {
  _impl_.translate_.ClearToEmpty();
}
inline const std::string& GMLanguageInfo::translate() const {
  // @@protoc_insertion_point(field_get:msg.GMLanguageInfo.Translate)
  return _internal_translate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GMLanguageInfo::set_translate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.translate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GMLanguageInfo.Translate)
}
inline std::string* GMLanguageInfo::mutable_translate() {
  std::string* _s = _internal_mutable_translate();
  // @@protoc_insertion_point(field_mutable:msg.GMLanguageInfo.Translate)
  return _s;
}
inline const std::string& GMLanguageInfo::_internal_translate() const {
  return _impl_.translate_.Get();
}
inline void GMLanguageInfo::_internal_set_translate(const std::string& value) {
  
  _impl_.translate_.Set(value, GetArenaForAllocation());
}
inline std::string* GMLanguageInfo::_internal_mutable_translate() {
  
  return _impl_.translate_.Mutable(GetArenaForAllocation());
}
inline std::string* GMLanguageInfo::release_translate() {
  // @@protoc_insertion_point(field_release:msg.GMLanguageInfo.Translate)
  return _impl_.translate_.Release();
}
inline void GMLanguageInfo::set_allocated_translate(std::string* translate) {
  if (translate != nullptr) {
    
  } else {
    
  }
  _impl_.translate_.SetAllocated(translate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.translate_.IsDefault()) {
    _impl_.translate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GMLanguageInfo.Translate)
}

// -------------------------------------------------------------------

// PlayLimit

// uint32 Age = 1;
inline void PlayLimit::clear_age() {
  _impl_.age_ = 0u;
}
inline uint32_t PlayLimit::_internal_age() const {
  return _impl_.age_;
}
inline uint32_t PlayLimit::age() const {
  // @@protoc_insertion_point(field_get:msg.PlayLimit.Age)
  return _internal_age();
}
inline void PlayLimit::_internal_set_age(uint32_t value) {
  
  _impl_.age_ = value;
}
inline void PlayLimit::set_age(uint32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:msg.PlayLimit.Age)
}

// uint32 Count = 2;
inline void PlayLimit::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t PlayLimit::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t PlayLimit::count() const {
  // @@protoc_insertion_point(field_get:msg.PlayLimit.Count)
  return _internal_count();
}
inline void PlayLimit::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void PlayLimit::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.PlayLimit.Count)
}

// -------------------------------------------------------------------

// ChannelFunctionData

// string ChannelId = 1;
inline void ChannelFunctionData::clear_channelid() {
  _impl_.channelid_.ClearToEmpty();
}
inline const std::string& ChannelFunctionData::channelid() const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.ChannelId)
  return _internal_channelid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChannelFunctionData::set_channelid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ChannelFunctionData.ChannelId)
}
inline std::string* ChannelFunctionData::mutable_channelid() {
  std::string* _s = _internal_mutable_channelid();
  // @@protoc_insertion_point(field_mutable:msg.ChannelFunctionData.ChannelId)
  return _s;
}
inline const std::string& ChannelFunctionData::_internal_channelid() const {
  return _impl_.channelid_.Get();
}
inline void ChannelFunctionData::_internal_set_channelid(const std::string& value) {
  
  _impl_.channelid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChannelFunctionData::_internal_mutable_channelid() {
  
  return _impl_.channelid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChannelFunctionData::release_channelid() {
  // @@protoc_insertion_point(field_release:msg.ChannelFunctionData.ChannelId)
  return _impl_.channelid_.Release();
}
inline void ChannelFunctionData::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  _impl_.channelid_.SetAllocated(channelid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelid_.IsDefault()) {
    _impl_.channelid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ChannelFunctionData.ChannelId)
}

// bool ForbiddenLogo = 2;
inline void ChannelFunctionData::clear_forbiddenlogo() {
  _impl_.forbiddenlogo_ = false;
}
inline bool ChannelFunctionData::_internal_forbiddenlogo() const {
  return _impl_.forbiddenlogo_;
}
inline bool ChannelFunctionData::forbiddenlogo() const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.ForbiddenLogo)
  return _internal_forbiddenlogo();
}
inline void ChannelFunctionData::_internal_set_forbiddenlogo(bool value) {
  
  _impl_.forbiddenlogo_ = value;
}
inline void ChannelFunctionData::set_forbiddenlogo(bool value) {
  _internal_set_forbiddenlogo(value);
  // @@protoc_insertion_point(field_set:msg.ChannelFunctionData.ForbiddenLogo)
}

// bool AgeJudge = 3;
inline void ChannelFunctionData::clear_agejudge() {
  _impl_.agejudge_ = false;
}
inline bool ChannelFunctionData::_internal_agejudge() const {
  return _impl_.agejudge_;
}
inline bool ChannelFunctionData::agejudge() const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.AgeJudge)
  return _internal_agejudge();
}
inline void ChannelFunctionData::_internal_set_agejudge(bool value) {
  
  _impl_.agejudge_ = value;
}
inline void ChannelFunctionData::set_agejudge(bool value) {
  _internal_set_agejudge(value);
  // @@protoc_insertion_point(field_set:msg.ChannelFunctionData.AgeJudge)
}

// bool InformationInput = 4;
inline void ChannelFunctionData::clear_informationinput() {
  _impl_.informationinput_ = false;
}
inline bool ChannelFunctionData::_internal_informationinput() const {
  return _impl_.informationinput_;
}
inline bool ChannelFunctionData::informationinput() const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.InformationInput)
  return _internal_informationinput();
}
inline void ChannelFunctionData::_internal_set_informationinput(bool value) {
  
  _impl_.informationinput_ = value;
}
inline void ChannelFunctionData::set_informationinput(bool value) {
  _internal_set_informationinput(value);
  // @@protoc_insertion_point(field_set:msg.ChannelFunctionData.InformationInput)
}

// bool GameRestrict = 5;
inline void ChannelFunctionData::clear_gamerestrict() {
  _impl_.gamerestrict_ = false;
}
inline bool ChannelFunctionData::_internal_gamerestrict() const {
  return _impl_.gamerestrict_;
}
inline bool ChannelFunctionData::gamerestrict() const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.GameRestrict)
  return _internal_gamerestrict();
}
inline void ChannelFunctionData::_internal_set_gamerestrict(bool value) {
  
  _impl_.gamerestrict_ = value;
}
inline void ChannelFunctionData::set_gamerestrict(bool value) {
  _internal_set_gamerestrict(value);
  // @@protoc_insertion_point(field_set:msg.ChannelFunctionData.GameRestrict)
}

// uint32 ForbiddenAge = 6;
inline void ChannelFunctionData::clear_forbiddenage() {
  _impl_.forbiddenage_ = 0u;
}
inline uint32_t ChannelFunctionData::_internal_forbiddenage() const {
  return _impl_.forbiddenage_;
}
inline uint32_t ChannelFunctionData::forbiddenage() const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.ForbiddenAge)
  return _internal_forbiddenage();
}
inline void ChannelFunctionData::_internal_set_forbiddenage(uint32_t value) {
  
  _impl_.forbiddenage_ = value;
}
inline void ChannelFunctionData::set_forbiddenage(uint32_t value) {
  _internal_set_forbiddenage(value);
  // @@protoc_insertion_point(field_set:msg.ChannelFunctionData.ForbiddenAge)
}

// repeated .msg.PlayLimit PlayLimits = 7;
inline int ChannelFunctionData::_internal_playlimits_size() const {
  return _impl_.playlimits_.size();
}
inline int ChannelFunctionData::playlimits_size() const {
  return _internal_playlimits_size();
}
inline void ChannelFunctionData::clear_playlimits() {
  _impl_.playlimits_.Clear();
}
inline ::msg::PlayLimit* ChannelFunctionData::mutable_playlimits(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ChannelFunctionData.PlayLimits)
  return _impl_.playlimits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayLimit >*
ChannelFunctionData::mutable_playlimits() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChannelFunctionData.PlayLimits)
  return &_impl_.playlimits_;
}
inline const ::msg::PlayLimit& ChannelFunctionData::_internal_playlimits(int index) const {
  return _impl_.playlimits_.Get(index);
}
inline const ::msg::PlayLimit& ChannelFunctionData::playlimits(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChannelFunctionData.PlayLimits)
  return _internal_playlimits(index);
}
inline ::msg::PlayLimit* ChannelFunctionData::_internal_add_playlimits() {
  return _impl_.playlimits_.Add();
}
inline ::msg::PlayLimit* ChannelFunctionData::add_playlimits() {
  ::msg::PlayLimit* _add = _internal_add_playlimits();
  // @@protoc_insertion_point(field_add:msg.ChannelFunctionData.PlayLimits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayLimit >&
ChannelFunctionData::playlimits() const {
  // @@protoc_insertion_point(field_list:msg.ChannelFunctionData.PlayLimits)
  return _impl_.playlimits_;
}

// -------------------------------------------------------------------

// PvpHistoryData

// uint64 PvpId = 1;
inline void PvpHistoryData::clear_pvpid() {
  _impl_.pvpid_ = uint64_t{0u};
}
inline uint64_t PvpHistoryData::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline uint64_t PvpHistoryData::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.PvpId)
  return _internal_pvpid();
}
inline void PvpHistoryData::_internal_set_pvpid(uint64_t value) {
  
  _impl_.pvpid_ = value;
}
inline void PvpHistoryData::set_pvpid(uint64_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.PvpId)
}

// int64 CreateTime = 2;
inline void PvpHistoryData::clear_createtime() {
  _impl_.createtime_ = int64_t{0};
}
inline int64_t PvpHistoryData::_internal_createtime() const {
  return _impl_.createtime_;
}
inline int64_t PvpHistoryData::createtime() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.CreateTime)
  return _internal_createtime();
}
inline void PvpHistoryData::_internal_set_createtime(int64_t value) {
  
  _impl_.createtime_ = value;
}
inline void PvpHistoryData::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.CreateTime)
}

// .msg.PVPMODE Mode = 3;
inline void PvpHistoryData::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::msg::PVPMODE PvpHistoryData::_internal_mode() const {
  return static_cast< ::msg::PVPMODE >(_impl_.mode_);
}
inline ::msg::PVPMODE PvpHistoryData::mode() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.Mode)
  return _internal_mode();
}
inline void PvpHistoryData::_internal_set_mode(::msg::PVPMODE value) {
  
  _impl_.mode_ = value;
}
inline void PvpHistoryData::set_mode(::msg::PVPMODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.Mode)
}

// .msg.CSDTPvpCampResult CampResult = 4;
inline bool PvpHistoryData::_internal_has_campresult() const {
  return this != internal_default_instance() && _impl_.campresult_ != nullptr;
}
inline bool PvpHistoryData::has_campresult() const {
  return _internal_has_campresult();
}
inline void PvpHistoryData::clear_campresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.campresult_ != nullptr) {
    delete _impl_.campresult_;
  }
  _impl_.campresult_ = nullptr;
}
inline const ::msg::CSDTPvpCampResult& PvpHistoryData::_internal_campresult() const {
  const ::msg::CSDTPvpCampResult* p = _impl_.campresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPvpCampResult&>(
      ::msg::_CSDTPvpCampResult_default_instance_);
}
inline const ::msg::CSDTPvpCampResult& PvpHistoryData::campresult() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.CampResult)
  return _internal_campresult();
}
inline void PvpHistoryData::unsafe_arena_set_allocated_campresult(
    ::msg::CSDTPvpCampResult* campresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.campresult_);
  }
  _impl_.campresult_ = campresult;
  if (campresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpHistoryData.CampResult)
}
inline ::msg::CSDTPvpCampResult* PvpHistoryData::release_campresult() {
  
  ::msg::CSDTPvpCampResult* temp = _impl_.campresult_;
  _impl_.campresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPvpCampResult* PvpHistoryData::unsafe_arena_release_campresult() {
  // @@protoc_insertion_point(field_release:msg.PvpHistoryData.CampResult)
  
  ::msg::CSDTPvpCampResult* temp = _impl_.campresult_;
  _impl_.campresult_ = nullptr;
  return temp;
}
inline ::msg::CSDTPvpCampResult* PvpHistoryData::_internal_mutable_campresult() {
  
  if (_impl_.campresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPvpCampResult>(GetArenaForAllocation());
    _impl_.campresult_ = p;
  }
  return _impl_.campresult_;
}
inline ::msg::CSDTPvpCampResult* PvpHistoryData::mutable_campresult() {
  ::msg::CSDTPvpCampResult* _msg = _internal_mutable_campresult();
  // @@protoc_insertion_point(field_mutable:msg.PvpHistoryData.CampResult)
  return _msg;
}
inline void PvpHistoryData::set_allocated_campresult(::msg::CSDTPvpCampResult* campresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.campresult_;
  }
  if (campresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(campresult);
    if (message_arena != submessage_arena) {
      campresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, campresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.campresult_ = campresult;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpHistoryData.CampResult)
}

// uint32 MeleeRule = 5;
inline void PvpHistoryData::clear_meleerule() {
  _impl_.meleerule_ = 0u;
}
inline uint32_t PvpHistoryData::_internal_meleerule() const {
  return _impl_.meleerule_;
}
inline uint32_t PvpHistoryData::meleerule() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.MeleeRule)
  return _internal_meleerule();
}
inline void PvpHistoryData::_internal_set_meleerule(uint32_t value) {
  
  _impl_.meleerule_ = value;
}
inline void PvpHistoryData::set_meleerule(uint32_t value) {
  _internal_set_meleerule(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.MeleeRule)
}

// uint32 CustomSubMode = 6;
inline void PvpHistoryData::clear_customsubmode() {
  _impl_.customsubmode_ = 0u;
}
inline uint32_t PvpHistoryData::_internal_customsubmode() const {
  return _impl_.customsubmode_;
}
inline uint32_t PvpHistoryData::customsubmode() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.CustomSubMode)
  return _internal_customsubmode();
}
inline void PvpHistoryData::_internal_set_customsubmode(uint32_t value) {
  
  _impl_.customsubmode_ = value;
}
inline void PvpHistoryData::set_customsubmode(uint32_t value) {
  _internal_set_customsubmode(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.CustomSubMode)
}

// uint64 TournamentId = 7;
inline void PvpHistoryData::clear_tournamentid() {
  _impl_.tournamentid_ = uint64_t{0u};
}
inline uint64_t PvpHistoryData::_internal_tournamentid() const {
  return _impl_.tournamentid_;
}
inline uint64_t PvpHistoryData::tournamentid() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.TournamentId)
  return _internal_tournamentid();
}
inline void PvpHistoryData::_internal_set_tournamentid(uint64_t value) {
  
  _impl_.tournamentid_ = value;
}
inline void PvpHistoryData::set_tournamentid(uint64_t value) {
  _internal_set_tournamentid(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.TournamentId)
}

// uint64 GameId = 8;
inline void PvpHistoryData::clear_gameid() {
  _impl_.gameid_ = uint64_t{0u};
}
inline uint64_t PvpHistoryData::_internal_gameid() const {
  return _impl_.gameid_;
}
inline uint64_t PvpHistoryData::gameid() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.GameId)
  return _internal_gameid();
}
inline void PvpHistoryData::_internal_set_gameid(uint64_t value) {
  
  _impl_.gameid_ = value;
}
inline void PvpHistoryData::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:msg.PvpHistoryData.GameId)
}

// .msg.PvpTeachResult TeachResult = 9;
inline bool PvpHistoryData::_internal_has_teachresult() const {
  return this != internal_default_instance() && _impl_.teachresult_ != nullptr;
}
inline bool PvpHistoryData::has_teachresult() const {
  return _internal_has_teachresult();
}
inline void PvpHistoryData::clear_teachresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.teachresult_ != nullptr) {
    delete _impl_.teachresult_;
  }
  _impl_.teachresult_ = nullptr;
}
inline const ::msg::PvpTeachResult& PvpHistoryData::_internal_teachresult() const {
  const ::msg::PvpTeachResult* p = _impl_.teachresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PvpTeachResult&>(
      ::msg::_PvpTeachResult_default_instance_);
}
inline const ::msg::PvpTeachResult& PvpHistoryData::teachresult() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.TeachResult)
  return _internal_teachresult();
}
inline void PvpHistoryData::unsafe_arena_set_allocated_teachresult(
    ::msg::PvpTeachResult* teachresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teachresult_);
  }
  _impl_.teachresult_ = teachresult;
  if (teachresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpHistoryData.TeachResult)
}
inline ::msg::PvpTeachResult* PvpHistoryData::release_teachresult() {
  
  ::msg::PvpTeachResult* temp = _impl_.teachresult_;
  _impl_.teachresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PvpTeachResult* PvpHistoryData::unsafe_arena_release_teachresult() {
  // @@protoc_insertion_point(field_release:msg.PvpHistoryData.TeachResult)
  
  ::msg::PvpTeachResult* temp = _impl_.teachresult_;
  _impl_.teachresult_ = nullptr;
  return temp;
}
inline ::msg::PvpTeachResult* PvpHistoryData::_internal_mutable_teachresult() {
  
  if (_impl_.teachresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PvpTeachResult>(GetArenaForAllocation());
    _impl_.teachresult_ = p;
  }
  return _impl_.teachresult_;
}
inline ::msg::PvpTeachResult* PvpHistoryData::mutable_teachresult() {
  ::msg::PvpTeachResult* _msg = _internal_mutable_teachresult();
  // @@protoc_insertion_point(field_mutable:msg.PvpHistoryData.TeachResult)
  return _msg;
}
inline void PvpHistoryData::set_allocated_teachresult(::msg::PvpTeachResult* teachresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.teachresult_;
  }
  if (teachresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teachresult);
    if (message_arena != submessage_arena) {
      teachresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teachresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teachresult_ = teachresult;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpHistoryData.TeachResult)
}

// .msg.PvpExtData ExtData = 10;
inline bool PvpHistoryData::_internal_has_extdata() const {
  return this != internal_default_instance() && _impl_.extdata_ != nullptr;
}
inline bool PvpHistoryData::has_extdata() const {
  return _internal_has_extdata();
}
inline void PvpHistoryData::clear_extdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.extdata_ != nullptr) {
    delete _impl_.extdata_;
  }
  _impl_.extdata_ = nullptr;
}
inline const ::msg::PvpExtData& PvpHistoryData::_internal_extdata() const {
  const ::msg::PvpExtData* p = _impl_.extdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PvpExtData&>(
      ::msg::_PvpExtData_default_instance_);
}
inline const ::msg::PvpExtData& PvpHistoryData::extdata() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.ExtData)
  return _internal_extdata();
}
inline void PvpHistoryData::unsafe_arena_set_allocated_extdata(
    ::msg::PvpExtData* extdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extdata_);
  }
  _impl_.extdata_ = extdata;
  if (extdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpHistoryData.ExtData)
}
inline ::msg::PvpExtData* PvpHistoryData::release_extdata() {
  
  ::msg::PvpExtData* temp = _impl_.extdata_;
  _impl_.extdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PvpExtData* PvpHistoryData::unsafe_arena_release_extdata() {
  // @@protoc_insertion_point(field_release:msg.PvpHistoryData.ExtData)
  
  ::msg::PvpExtData* temp = _impl_.extdata_;
  _impl_.extdata_ = nullptr;
  return temp;
}
inline ::msg::PvpExtData* PvpHistoryData::_internal_mutable_extdata() {
  
  if (_impl_.extdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PvpExtData>(GetArenaForAllocation());
    _impl_.extdata_ = p;
  }
  return _impl_.extdata_;
}
inline ::msg::PvpExtData* PvpHistoryData::mutable_extdata() {
  ::msg::PvpExtData* _msg = _internal_mutable_extdata();
  // @@protoc_insertion_point(field_mutable:msg.PvpHistoryData.ExtData)
  return _msg;
}
inline void PvpHistoryData::set_allocated_extdata(::msg::PvpExtData* extdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.extdata_;
  }
  if (extdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extdata);
    if (message_arena != submessage_arena) {
      extdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extdata_ = extdata;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpHistoryData.ExtData)
}

// .msg.PlayerExtMap PlayerExtData = 11;
inline bool PvpHistoryData::_internal_has_playerextdata() const {
  return this != internal_default_instance() && _impl_.playerextdata_ != nullptr;
}
inline bool PvpHistoryData::has_playerextdata() const {
  return _internal_has_playerextdata();
}
inline void PvpHistoryData::clear_playerextdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerextdata_ != nullptr) {
    delete _impl_.playerextdata_;
  }
  _impl_.playerextdata_ = nullptr;
}
inline const ::msg::PlayerExtMap& PvpHistoryData::_internal_playerextdata() const {
  const ::msg::PlayerExtMap* p = _impl_.playerextdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PlayerExtMap&>(
      ::msg::_PlayerExtMap_default_instance_);
}
inline const ::msg::PlayerExtMap& PvpHistoryData::playerextdata() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.PlayerExtData)
  return _internal_playerextdata();
}
inline void PvpHistoryData::unsafe_arena_set_allocated_playerextdata(
    ::msg::PlayerExtMap* playerextdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerextdata_);
  }
  _impl_.playerextdata_ = playerextdata;
  if (playerextdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpHistoryData.PlayerExtData)
}
inline ::msg::PlayerExtMap* PvpHistoryData::release_playerextdata() {
  
  ::msg::PlayerExtMap* temp = _impl_.playerextdata_;
  _impl_.playerextdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PlayerExtMap* PvpHistoryData::unsafe_arena_release_playerextdata() {
  // @@protoc_insertion_point(field_release:msg.PvpHistoryData.PlayerExtData)
  
  ::msg::PlayerExtMap* temp = _impl_.playerextdata_;
  _impl_.playerextdata_ = nullptr;
  return temp;
}
inline ::msg::PlayerExtMap* PvpHistoryData::_internal_mutable_playerextdata() {
  
  if (_impl_.playerextdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PlayerExtMap>(GetArenaForAllocation());
    _impl_.playerextdata_ = p;
  }
  return _impl_.playerextdata_;
}
inline ::msg::PlayerExtMap* PvpHistoryData::mutable_playerextdata() {
  ::msg::PlayerExtMap* _msg = _internal_mutable_playerextdata();
  // @@protoc_insertion_point(field_mutable:msg.PvpHistoryData.PlayerExtData)
  return _msg;
}
inline void PvpHistoryData::set_allocated_playerextdata(::msg::PlayerExtMap* playerextdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerextdata_;
  }
  if (playerextdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerextdata);
    if (message_arena != submessage_arena) {
      playerextdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerextdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerextdata_ = playerextdata;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpHistoryData.PlayerExtData)
}

// .msg.BattleExtData BattleExt = 12;
inline bool PvpHistoryData::_internal_has_battleext() const {
  return this != internal_default_instance() && _impl_.battleext_ != nullptr;
}
inline bool PvpHistoryData::has_battleext() const {
  return _internal_has_battleext();
}
inline void PvpHistoryData::clear_battleext() {
  if (GetArenaForAllocation() == nullptr && _impl_.battleext_ != nullptr) {
    delete _impl_.battleext_;
  }
  _impl_.battleext_ = nullptr;
}
inline const ::msg::BattleExtData& PvpHistoryData::_internal_battleext() const {
  const ::msg::BattleExtData* p = _impl_.battleext_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::BattleExtData&>(
      ::msg::_BattleExtData_default_instance_);
}
inline const ::msg::BattleExtData& PvpHistoryData::battleext() const {
  // @@protoc_insertion_point(field_get:msg.PvpHistoryData.BattleExt)
  return _internal_battleext();
}
inline void PvpHistoryData::unsafe_arena_set_allocated_battleext(
    ::msg::BattleExtData* battleext) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battleext_);
  }
  _impl_.battleext_ = battleext;
  if (battleext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpHistoryData.BattleExt)
}
inline ::msg::BattleExtData* PvpHistoryData::release_battleext() {
  
  ::msg::BattleExtData* temp = _impl_.battleext_;
  _impl_.battleext_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::BattleExtData* PvpHistoryData::unsafe_arena_release_battleext() {
  // @@protoc_insertion_point(field_release:msg.PvpHistoryData.BattleExt)
  
  ::msg::BattleExtData* temp = _impl_.battleext_;
  _impl_.battleext_ = nullptr;
  return temp;
}
inline ::msg::BattleExtData* PvpHistoryData::_internal_mutable_battleext() {
  
  if (_impl_.battleext_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::BattleExtData>(GetArenaForAllocation());
    _impl_.battleext_ = p;
  }
  return _impl_.battleext_;
}
inline ::msg::BattleExtData* PvpHistoryData::mutable_battleext() {
  ::msg::BattleExtData* _msg = _internal_mutable_battleext();
  // @@protoc_insertion_point(field_mutable:msg.PvpHistoryData.BattleExt)
  return _msg;
}
inline void PvpHistoryData::set_allocated_battleext(::msg::BattleExtData* battleext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.battleext_;
  }
  if (battleext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(battleext);
    if (message_arena != submessage_arena) {
      battleext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battleext, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.battleext_ = battleext;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpHistoryData.BattleExt)
}

// -------------------------------------------------------------------

// CSDTGuide

// string GuideName = 1;
inline void CSDTGuide::clear_guidename() {
  _impl_.guidename_.ClearToEmpty();
}
inline const std::string& CSDTGuide::guidename() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGuide.GuideName)
  return _internal_guidename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTGuide::set_guidename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guidename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTGuide.GuideName)
}
inline std::string* CSDTGuide::mutable_guidename() {
  std::string* _s = _internal_mutable_guidename();
  // @@protoc_insertion_point(field_mutable:msg.CSDTGuide.GuideName)
  return _s;
}
inline const std::string& CSDTGuide::_internal_guidename() const {
  return _impl_.guidename_.Get();
}
inline void CSDTGuide::_internal_set_guidename(const std::string& value) {
  
  _impl_.guidename_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTGuide::_internal_mutable_guidename() {
  
  return _impl_.guidename_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTGuide::release_guidename() {
  // @@protoc_insertion_point(field_release:msg.CSDTGuide.GuideName)
  return _impl_.guidename_.Release();
}
inline void CSDTGuide::set_allocated_guidename(std::string* guidename) {
  if (guidename != nullptr) {
    
  } else {
    
  }
  _impl_.guidename_.SetAllocated(guidename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guidename_.IsDefault()) {
    _impl_.guidename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTGuide.GuideName)
}

// uint32 Status = 2;
inline void CSDTGuide::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t CSDTGuide::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CSDTGuide::status() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGuide.Status)
  return _internal_status();
}
inline void CSDTGuide::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void CSDTGuide::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGuide.Status)
}

// uint32 GuideID = 3;
inline void CSDTGuide::clear_guideid() {
  _impl_.guideid_ = 0u;
}
inline uint32_t CSDTGuide::_internal_guideid() const {
  return _impl_.guideid_;
}
inline uint32_t CSDTGuide::guideid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGuide.GuideID)
  return _internal_guideid();
}
inline void CSDTGuide::_internal_set_guideid(uint32_t value) {
  
  _impl_.guideid_ = value;
}
inline void CSDTGuide::set_guideid(uint32_t value) {
  _internal_set_guideid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGuide.GuideID)
}

// uint32 Sequence = 4;
inline void CSDTGuide::clear_sequence() {
  _impl_.sequence_ = 0u;
}
inline uint32_t CSDTGuide::_internal_sequence() const {
  return _impl_.sequence_;
}
inline uint32_t CSDTGuide::sequence() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGuide.Sequence)
  return _internal_sequence();
}
inline void CSDTGuide::_internal_set_sequence(uint32_t value) {
  
  _impl_.sequence_ = value;
}
inline void CSDTGuide::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGuide.Sequence)
}

// uint32 LastSeq = 5;
inline void CSDTGuide::clear_lastseq() {
  _impl_.lastseq_ = 0u;
}
inline uint32_t CSDTGuide::_internal_lastseq() const {
  return _impl_.lastseq_;
}
inline uint32_t CSDTGuide::lastseq() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGuide.LastSeq)
  return _internal_lastseq();
}
inline void CSDTGuide::_internal_set_lastseq(uint32_t value) {
  
  _impl_.lastseq_ = value;
}
inline void CSDTGuide::set_lastseq(uint32_t value) {
  _internal_set_lastseq(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGuide.LastSeq)
}

// -------------------------------------------------------------------

// CSDTChat

// uint32 EmotionId = 1;
inline void CSDTChat::clear_emotionid() {
  _impl_.emotionid_ = 0u;
}
inline uint32_t CSDTChat::_internal_emotionid() const {
  return _impl_.emotionid_;
}
inline uint32_t CSDTChat::emotionid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.EmotionId)
  return _internal_emotionid();
}
inline void CSDTChat::_internal_set_emotionid(uint32_t value) {
  
  _impl_.emotionid_ = value;
}
inline void CSDTChat::set_emotionid(uint32_t value) {
  _internal_set_emotionid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChat.EmotionId)
}

// string SenderId = 2;
inline void CSDTChat::clear_senderid() {
  _impl_.senderid_.ClearToEmpty();
}
inline const std::string& CSDTChat::senderid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.SenderId)
  return _internal_senderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTChat::set_senderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.senderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTChat.SenderId)
}
inline std::string* CSDTChat::mutable_senderid() {
  std::string* _s = _internal_mutable_senderid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTChat.SenderId)
  return _s;
}
inline const std::string& CSDTChat::_internal_senderid() const {
  return _impl_.senderid_.Get();
}
inline void CSDTChat::_internal_set_senderid(const std::string& value) {
  
  _impl_.senderid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTChat::_internal_mutable_senderid() {
  
  return _impl_.senderid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTChat::release_senderid() {
  // @@protoc_insertion_point(field_release:msg.CSDTChat.SenderId)
  return _impl_.senderid_.Release();
}
inline void CSDTChat::set_allocated_senderid(std::string* senderid) {
  if (senderid != nullptr) {
    
  } else {
    
  }
  _impl_.senderid_.SetAllocated(senderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.senderid_.IsDefault()) {
    _impl_.senderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTChat.SenderId)
}

// string Content = 3;
inline void CSDTChat::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSDTChat::content() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTChat::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTChat.Content)
}
inline std::string* CSDTChat::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSDTChat.Content)
  return _s;
}
inline const std::string& CSDTChat::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSDTChat::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTChat::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTChat::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSDTChat.Content)
  return _impl_.content_.Release();
}
inline void CSDTChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTChat.Content)
}

// .msg.CHANELTYPE ChannelType = 4;
inline void CSDTChat::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE CSDTChat::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE CSDTChat::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.ChannelType)
  return _internal_channeltype();
}
inline void CSDTChat::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void CSDTChat::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChat.ChannelType)
}

// string ChannelUsrId = 5;
inline void CSDTChat::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& CSDTChat::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.ChannelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTChat::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTChat.ChannelUsrId)
}
inline std::string* CSDTChat::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTChat.ChannelUsrId)
  return _s;
}
inline const std::string& CSDTChat::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void CSDTChat::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTChat::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTChat::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.CSDTChat.ChannelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void CSDTChat::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTChat.ChannelUsrId)
}

// bool PS4Only = 6;
inline void CSDTChat::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool CSDTChat::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool CSDTChat::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.PS4Only)
  return _internal_ps4only();
}
inline void CSDTChat::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void CSDTChat::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChat.PS4Only)
}

// .msg.CHATSOURCETYPE SourceType = 7;
inline void CSDTChat::clear_sourcetype() {
  _impl_.sourcetype_ = 0;
}
inline ::msg::CHATSOURCETYPE CSDTChat::_internal_sourcetype() const {
  return static_cast< ::msg::CHATSOURCETYPE >(_impl_.sourcetype_);
}
inline ::msg::CHATSOURCETYPE CSDTChat::sourcetype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.SourceType)
  return _internal_sourcetype();
}
inline void CSDTChat::_internal_set_sourcetype(::msg::CHATSOURCETYPE value) {
  
  _impl_.sourcetype_ = value;
}
inline void CSDTChat::set_sourcetype(::msg::CHATSOURCETYPE value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChat.SourceType)
}

// .msg.UserRestrictType RestrictType = 8;
inline void CSDTChat::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType CSDTChat::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType CSDTChat::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTChat.RestrictType)
  return _internal_restricttype();
}
inline void CSDTChat::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void CSDTChat::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTChat.RestrictType)
}

// -------------------------------------------------------------------

// CSDTGoods

// uint32 Id = 1;
inline void CSDTGoods::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTGoods::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTGoods::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGoods.Id)
  return _internal_id();
}
inline void CSDTGoods::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTGoods::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGoods.Id)
}

// uint32 Count = 2;
inline void CSDTGoods::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t CSDTGoods::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CSDTGoods::count() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGoods.Count)
  return _internal_count();
}
inline void CSDTGoods::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void CSDTGoods::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGoods.Count)
}

// uint32 Uid = 3;
inline void CSDTGoods::clear_uid() {
  _impl_.uid_ = 0u;
}
inline uint32_t CSDTGoods::_internal_uid() const {
  return _impl_.uid_;
}
inline uint32_t CSDTGoods::uid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGoods.Uid)
  return _internal_uid();
}
inline void CSDTGoods::_internal_set_uid(uint32_t value) {
  
  _impl_.uid_ = value;
}
inline void CSDTGoods::set_uid(uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGoods.Uid)
}

// -------------------------------------------------------------------

// CSDTGoodsInfo

// .msg.SHOPTYPE Type = 1;
inline void CSDTGoodsInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::SHOPTYPE CSDTGoodsInfo::_internal_type() const {
  return static_cast< ::msg::SHOPTYPE >(_impl_.type_);
}
inline ::msg::SHOPTYPE CSDTGoodsInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGoodsInfo.Type)
  return _internal_type();
}
inline void CSDTGoodsInfo::_internal_set_type(::msg::SHOPTYPE value) {
  
  _impl_.type_ = value;
}
inline void CSDTGoodsInfo::set_type(::msg::SHOPTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGoodsInfo.Type)
}

// repeated .msg.CSDTGoods GoodsInfo = 2;
inline int CSDTGoodsInfo::_internal_goodsinfo_size() const {
  return _impl_.goodsinfo_.size();
}
inline int CSDTGoodsInfo::goodsinfo_size() const {
  return _internal_goodsinfo_size();
}
inline void CSDTGoodsInfo::clear_goodsinfo() {
  _impl_.goodsinfo_.Clear();
}
inline ::msg::CSDTGoods* CSDTGoodsInfo::mutable_goodsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTGoodsInfo.GoodsInfo)
  return _impl_.goodsinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTGoods >*
CSDTGoodsInfo::mutable_goodsinfo() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTGoodsInfo.GoodsInfo)
  return &_impl_.goodsinfo_;
}
inline const ::msg::CSDTGoods& CSDTGoodsInfo::_internal_goodsinfo(int index) const {
  return _impl_.goodsinfo_.Get(index);
}
inline const ::msg::CSDTGoods& CSDTGoodsInfo::goodsinfo(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTGoodsInfo.GoodsInfo)
  return _internal_goodsinfo(index);
}
inline ::msg::CSDTGoods* CSDTGoodsInfo::_internal_add_goodsinfo() {
  return _impl_.goodsinfo_.Add();
}
inline ::msg::CSDTGoods* CSDTGoodsInfo::add_goodsinfo() {
  ::msg::CSDTGoods* _add = _internal_add_goodsinfo();
  // @@protoc_insertion_point(field_add:msg.CSDTGoodsInfo.GoodsInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTGoods >&
CSDTGoodsInfo::goodsinfo() const {
  // @@protoc_insertion_point(field_list:msg.CSDTGoodsInfo.GoodsInfo)
  return _impl_.goodsinfo_;
}

// int64 RefreshTime = 3;
inline void CSDTGoodsInfo::clear_refreshtime() {
  _impl_.refreshtime_ = int64_t{0};
}
inline int64_t CSDTGoodsInfo::_internal_refreshtime() const {
  return _impl_.refreshtime_;
}
inline int64_t CSDTGoodsInfo::refreshtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGoodsInfo.RefreshTime)
  return _internal_refreshtime();
}
inline void CSDTGoodsInfo::_internal_set_refreshtime(int64_t value) {
  
  _impl_.refreshtime_ = value;
}
inline void CSDTGoodsInfo::set_refreshtime(int64_t value) {
  _internal_set_refreshtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGoodsInfo.RefreshTime)
}

// -------------------------------------------------------------------

// MallTabData

// uint32 Id = 1;
inline void MallTabData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t MallTabData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t MallTabData::id() const {
  // @@protoc_insertion_point(field_get:msg.MallTabData.Id)
  return _internal_id();
}
inline void MallTabData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void MallTabData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.MallTabData.Id)
}

// string Title = 2;
inline void MallTabData::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& MallTabData::title() const {
  // @@protoc_insertion_point(field_get:msg.MallTabData.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallTabData::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallTabData.Title)
}
inline std::string* MallTabData::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:msg.MallTabData.Title)
  return _s;
}
inline const std::string& MallTabData::_internal_title() const {
  return _impl_.title_.Get();
}
inline void MallTabData::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* MallTabData::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* MallTabData::release_title() {
  // @@protoc_insertion_point(field_release:msg.MallTabData.Title)
  return _impl_.title_.Release();
}
inline void MallTabData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallTabData.Title)
}

// .msg.MALLTABTYPE Type = 3;
inline void MallTabData::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::MALLTABTYPE MallTabData::_internal_type() const {
  return static_cast< ::msg::MALLTABTYPE >(_impl_.type_);
}
inline ::msg::MALLTABTYPE MallTabData::type() const {
  // @@protoc_insertion_point(field_get:msg.MallTabData.Type)
  return _internal_type();
}
inline void MallTabData::_internal_set_type(::msg::MALLTABTYPE value) {
  
  _impl_.type_ = value;
}
inline void MallTabData::set_type(::msg::MALLTABTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.MallTabData.Type)
}

// uint32 Sort = 6;
inline void MallTabData::clear_sort() {
  _impl_.sort_ = 0u;
}
inline uint32_t MallTabData::_internal_sort() const {
  return _impl_.sort_;
}
inline uint32_t MallTabData::sort() const {
  // @@protoc_insertion_point(field_get:msg.MallTabData.Sort)
  return _internal_sort();
}
inline void MallTabData::_internal_set_sort(uint32_t value) {
  
  _impl_.sort_ = value;
}
inline void MallTabData::set_sort(uint32_t value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:msg.MallTabData.Sort)
}

// uint32 Skips_Interface_pc = 11;
inline void MallTabData::clear_skips_interface_pc() {
  _impl_.skips_interface_pc_ = 0u;
}
inline uint32_t MallTabData::_internal_skips_interface_pc() const {
  return _impl_.skips_interface_pc_;
}
inline uint32_t MallTabData::skips_interface_pc() const {
  // @@protoc_insertion_point(field_get:msg.MallTabData.Skips_Interface_pc)
  return _internal_skips_interface_pc();
}
inline void MallTabData::_internal_set_skips_interface_pc(uint32_t value) {
  
  _impl_.skips_interface_pc_ = value;
}
inline void MallTabData::set_skips_interface_pc(uint32_t value) {
  _internal_set_skips_interface_pc(value);
  // @@protoc_insertion_point(field_set:msg.MallTabData.Skips_Interface_pc)
}

// uint32 ItemTypePage = 12;
inline void MallTabData::clear_itemtypepage() {
  _impl_.itemtypepage_ = 0u;
}
inline uint32_t MallTabData::_internal_itemtypepage() const {
  return _impl_.itemtypepage_;
}
inline uint32_t MallTabData::itemtypepage() const {
  // @@protoc_insertion_point(field_get:msg.MallTabData.ItemTypePage)
  return _internal_itemtypepage();
}
inline void MallTabData::_internal_set_itemtypepage(uint32_t value) {
  
  _impl_.itemtypepage_ = value;
}
inline void MallTabData::set_itemtypepage(uint32_t value) {
  _internal_set_itemtypepage(value);
  // @@protoc_insertion_point(field_set:msg.MallTabData.ItemTypePage)
}

// -------------------------------------------------------------------

// Skip

// string Interface = 1;
inline void Skip::clear_interface() {
  _impl_.interface_.ClearToEmpty();
}
inline const std::string& Skip::interface() const {
  // @@protoc_insertion_point(field_get:msg.Skip.Interface)
  return _internal_interface();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Skip::set_interface(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interface_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Skip.Interface)
}
inline std::string* Skip::mutable_interface() {
  std::string* _s = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:msg.Skip.Interface)
  return _s;
}
inline const std::string& Skip::_internal_interface() const {
  return _impl_.interface_.Get();
}
inline void Skip::_internal_set_interface(const std::string& value) {
  
  _impl_.interface_.Set(value, GetArenaForAllocation());
}
inline std::string* Skip::_internal_mutable_interface() {
  
  return _impl_.interface_.Mutable(GetArenaForAllocation());
}
inline std::string* Skip::release_interface() {
  // @@protoc_insertion_point(field_release:msg.Skip.Interface)
  return _impl_.interface_.Release();
}
inline void Skip::set_allocated_interface(std::string* interface) {
  if (interface != nullptr) {
    
  } else {
    
  }
  _impl_.interface_.SetAllocated(interface, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_.IsDefault()) {
    _impl_.interface_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Skip.Interface)
}

// uint32 Tab = 2;
inline void Skip::clear_tab() {
  _impl_.tab_ = 0u;
}
inline uint32_t Skip::_internal_tab() const {
  return _impl_.tab_;
}
inline uint32_t Skip::tab() const {
  // @@protoc_insertion_point(field_get:msg.Skip.Tab)
  return _internal_tab();
}
inline void Skip::_internal_set_tab(uint32_t value) {
  
  _impl_.tab_ = value;
}
inline void Skip::set_tab(uint32_t value) {
  _internal_set_tab(value);
  // @@protoc_insertion_point(field_set:msg.Skip.Tab)
}

// -------------------------------------------------------------------

// MallGoodsData

// uint32 Id = 1;
inline void MallGoodsData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t MallGoodsData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t MallGoodsData::id() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Id)
  return _internal_id();
}
inline void MallGoodsData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void MallGoodsData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Id)
}

// repeated .msg.Award Contents = 2;
inline int MallGoodsData::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int MallGoodsData::contents_size() const {
  return _internal_contents_size();
}
inline void MallGoodsData::clear_contents() {
  _impl_.contents_.Clear();
}
inline ::msg::Award* MallGoodsData::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.Contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
MallGoodsData::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.Contents)
  return &_impl_.contents_;
}
inline const ::msg::Award& MallGoodsData::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::msg::Award& MallGoodsData::contents(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Contents)
  return _internal_contents(index);
}
inline ::msg::Award* MallGoodsData::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::msg::Award* MallGoodsData::add_contents() {
  ::msg::Award* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.Contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
MallGoodsData::contents() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.Contents)
  return _impl_.contents_;
}

// repeated .msg.Consume Consumes = 3;
inline int MallGoodsData::_internal_consumes_size() const {
  return _impl_.consumes_.size();
}
inline int MallGoodsData::consumes_size() const {
  return _internal_consumes_size();
}
inline void MallGoodsData::clear_consumes() {
  _impl_.consumes_.Clear();
}
inline ::msg::Consume* MallGoodsData::mutable_consumes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.Consumes)
  return _impl_.consumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >*
MallGoodsData::mutable_consumes() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.Consumes)
  return &_impl_.consumes_;
}
inline const ::msg::Consume& MallGoodsData::_internal_consumes(int index) const {
  return _impl_.consumes_.Get(index);
}
inline const ::msg::Consume& MallGoodsData::consumes(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Consumes)
  return _internal_consumes(index);
}
inline ::msg::Consume* MallGoodsData::_internal_add_consumes() {
  return _impl_.consumes_.Add();
}
inline ::msg::Consume* MallGoodsData::add_consumes() {
  ::msg::Consume* _add = _internal_add_consumes();
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.Consumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >&
MallGoodsData::consumes() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.Consumes)
  return _impl_.consumes_;
}

// int64 OnSaleBeginTime = 4;
inline void MallGoodsData::clear_onsalebegintime() {
  _impl_.onsalebegintime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_onsalebegintime() const {
  return _impl_.onsalebegintime_;
}
inline int64_t MallGoodsData::onsalebegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.OnSaleBeginTime)
  return _internal_onsalebegintime();
}
inline void MallGoodsData::_internal_set_onsalebegintime(int64_t value) {
  
  _impl_.onsalebegintime_ = value;
}
inline void MallGoodsData::set_onsalebegintime(int64_t value) {
  _internal_set_onsalebegintime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.OnSaleBeginTime)
}

// int64 OnSaleEndTime = 5;
inline void MallGoodsData::clear_onsaleendtime() {
  _impl_.onsaleendtime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_onsaleendtime() const {
  return _impl_.onsaleendtime_;
}
inline int64_t MallGoodsData::onsaleendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.OnSaleEndTime)
  return _internal_onsaleendtime();
}
inline void MallGoodsData::_internal_set_onsaleendtime(int64_t value) {
  
  _impl_.onsaleendtime_ = value;
}
inline void MallGoodsData::set_onsaleendtime(int64_t value) {
  _internal_set_onsaleendtime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.OnSaleEndTime)
}

// uint32 SellCountLimit = 6;
inline void MallGoodsData::clear_sellcountlimit() {
  _impl_.sellcountlimit_ = 0u;
}
inline uint32_t MallGoodsData::_internal_sellcountlimit() const {
  return _impl_.sellcountlimit_;
}
inline uint32_t MallGoodsData::sellcountlimit() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.SellCountLimit)
  return _internal_sellcountlimit();
}
inline void MallGoodsData::_internal_set_sellcountlimit(uint32_t value) {
  
  _impl_.sellcountlimit_ = value;
}
inline void MallGoodsData::set_sellcountlimit(uint32_t value) {
  _internal_set_sellcountlimit(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.SellCountLimit)
}

// uint32 SellCountResetInterval = 7;
inline void MallGoodsData::clear_sellcountresetinterval() {
  _impl_.sellcountresetinterval_ = 0u;
}
inline uint32_t MallGoodsData::_internal_sellcountresetinterval() const {
  return _impl_.sellcountresetinterval_;
}
inline uint32_t MallGoodsData::sellcountresetinterval() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.SellCountResetInterval)
  return _internal_sellcountresetinterval();
}
inline void MallGoodsData::_internal_set_sellcountresetinterval(uint32_t value) {
  
  _impl_.sellcountresetinterval_ = value;
}
inline void MallGoodsData::set_sellcountresetinterval(uint32_t value) {
  _internal_set_sellcountresetinterval(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.SellCountResetInterval)
}

// .msg.MALL_GOODS_FLAG Flag = 8;
inline void MallGoodsData::clear_flag() {
  _impl_.flag_ = 0;
}
inline ::msg::MALL_GOODS_FLAG MallGoodsData::_internal_flag() const {
  return static_cast< ::msg::MALL_GOODS_FLAG >(_impl_.flag_);
}
inline ::msg::MALL_GOODS_FLAG MallGoodsData::flag() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Flag)
  return _internal_flag();
}
inline void MallGoodsData::_internal_set_flag(::msg::MALL_GOODS_FLAG value) {
  
  _impl_.flag_ = value;
}
inline void MallGoodsData::set_flag(::msg::MALL_GOODS_FLAG value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Flag)
}

// bool BulkBuying = 9;
inline void MallGoodsData::clear_bulkbuying() {
  _impl_.bulkbuying_ = false;
}
inline bool MallGoodsData::_internal_bulkbuying() const {
  return _impl_.bulkbuying_;
}
inline bool MallGoodsData::bulkbuying() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.BulkBuying)
  return _internal_bulkbuying();
}
inline void MallGoodsData::_internal_set_bulkbuying(bool value) {
  
  _impl_.bulkbuying_ = value;
}
inline void MallGoodsData::set_bulkbuying(bool value) {
  _internal_set_bulkbuying(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.BulkBuying)
}

// uint32 Recommend = 10;
inline void MallGoodsData::clear_recommend() {
  _impl_.recommend_ = 0u;
}
inline uint32_t MallGoodsData::_internal_recommend() const {
  return _impl_.recommend_;
}
inline uint32_t MallGoodsData::recommend() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend)
  return _internal_recommend();
}
inline void MallGoodsData::_internal_set_recommend(uint32_t value) {
  
  _impl_.recommend_ = value;
}
inline void MallGoodsData::set_recommend(uint32_t value) {
  _internal_set_recommend(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend)
}

// uint32 Sort = 11;
inline void MallGoodsData::clear_sort() {
  _impl_.sort_ = 0u;
}
inline uint32_t MallGoodsData::_internal_sort() const {
  return _impl_.sort_;
}
inline uint32_t MallGoodsData::sort() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Sort)
  return _internal_sort();
}
inline void MallGoodsData::_internal_set_sort(uint32_t value) {
  
  _impl_.sort_ = value;
}
inline void MallGoodsData::set_sort(uint32_t value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Sort)
}

// uint32 MallTabId = 12;
inline void MallGoodsData::clear_malltabid() {
  _impl_.malltabid_ = 0u;
}
inline uint32_t MallGoodsData::_internal_malltabid() const {
  return _impl_.malltabid_;
}
inline uint32_t MallGoodsData::malltabid() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.MallTabId)
  return _internal_malltabid();
}
inline void MallGoodsData::_internal_set_malltabid(uint32_t value) {
  
  _impl_.malltabid_ = value;
}
inline void MallGoodsData::set_malltabid(uint32_t value) {
  _internal_set_malltabid(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.MallTabId)
}

// int64 ShowBeginTime = 15;
inline void MallGoodsData::clear_showbegintime() {
  _impl_.showbegintime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_showbegintime() const {
  return _impl_.showbegintime_;
}
inline int64_t MallGoodsData::showbegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ShowBeginTime)
  return _internal_showbegintime();
}
inline void MallGoodsData::_internal_set_showbegintime(int64_t value) {
  
  _impl_.showbegintime_ = value;
}
inline void MallGoodsData::set_showbegintime(int64_t value) {
  _internal_set_showbegintime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ShowBeginTime)
}

// int64 ShowEndTime = 16;
inline void MallGoodsData::clear_showendtime() {
  _impl_.showendtime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_showendtime() const {
  return _impl_.showendtime_;
}
inline int64_t MallGoodsData::showendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ShowEndTime)
  return _internal_showendtime();
}
inline void MallGoodsData::_internal_set_showendtime(int64_t value) {
  
  _impl_.showendtime_ = value;
}
inline void MallGoodsData::set_showendtime(int64_t value) {
  _internal_set_showendtime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ShowEndTime)
}

// uint32 GroupId = 17;
inline void MallGoodsData::clear_groupid() {
  _impl_.groupid_ = 0u;
}
inline uint32_t MallGoodsData::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint32_t MallGoodsData::groupid() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.GroupId)
  return _internal_groupid();
}
inline void MallGoodsData::_internal_set_groupid(uint32_t value) {
  
  _impl_.groupid_ = value;
}
inline void MallGoodsData::set_groupid(uint32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.GroupId)
}

// bool GroupShowFirst = 18;
inline void MallGoodsData::clear_groupshowfirst() {
  _impl_.groupshowfirst_ = false;
}
inline bool MallGoodsData::_internal_groupshowfirst() const {
  return _impl_.groupshowfirst_;
}
inline bool MallGoodsData::groupshowfirst() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.GroupShowFirst)
  return _internal_groupshowfirst();
}
inline void MallGoodsData::_internal_set_groupshowfirst(bool value) {
  
  _impl_.groupshowfirst_ = value;
}
inline void MallGoodsData::set_groupshowfirst(bool value) {
  _internal_set_groupshowfirst(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.GroupShowFirst)
}

// bool ShowResource = 19;
inline void MallGoodsData::clear_showresource() {
  _impl_.showresource_ = false;
}
inline bool MallGoodsData::_internal_showresource() const {
  return _impl_.showresource_;
}
inline bool MallGoodsData::showresource() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ShowResource)
  return _internal_showresource();
}
inline void MallGoodsData::_internal_set_showresource(bool value) {
  
  _impl_.showresource_ = value;
}
inline void MallGoodsData::set_showresource(bool value) {
  _internal_set_showresource(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ShowResource)
}

// uint32 ChargePrivatePara = 20;
inline void MallGoodsData::clear_chargeprivatepara() {
  _impl_.chargeprivatepara_ = 0u;
}
inline uint32_t MallGoodsData::_internal_chargeprivatepara() const {
  return _impl_.chargeprivatepara_;
}
inline uint32_t MallGoodsData::chargeprivatepara() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ChargePrivatePara)
  return _internal_chargeprivatepara();
}
inline void MallGoodsData::_internal_set_chargeprivatepara(uint32_t value) {
  
  _impl_.chargeprivatepara_ = value;
}
inline void MallGoodsData::set_chargeprivatepara(uint32_t value) {
  _internal_set_chargeprivatepara(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ChargePrivatePara)
}

// int64 SellCountStartTime = 21;
inline void MallGoodsData::clear_sellcountstarttime() {
  _impl_.sellcountstarttime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_sellcountstarttime() const {
  return _impl_.sellcountstarttime_;
}
inline int64_t MallGoodsData::sellcountstarttime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.SellCountStartTime)
  return _internal_sellcountstarttime();
}
inline void MallGoodsData::_internal_set_sellcountstarttime(int64_t value) {
  
  _impl_.sellcountstarttime_ = value;
}
inline void MallGoodsData::set_sellcountstarttime(int64_t value) {
  _internal_set_sellcountstarttime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.SellCountStartTime)
}

// int32 Skips_Interface_pc = 22;
inline void MallGoodsData::clear_skips_interface_pc() {
  _impl_.skips_interface_pc_ = 0;
}
inline int32_t MallGoodsData::_internal_skips_interface_pc() const {
  return _impl_.skips_interface_pc_;
}
inline int32_t MallGoodsData::skips_interface_pc() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Skips_Interface_pc)
  return _internal_skips_interface_pc();
}
inline void MallGoodsData::_internal_set_skips_interface_pc(int32_t value) {
  
  _impl_.skips_interface_pc_ = value;
}
inline void MallGoodsData::set_skips_interface_pc(int32_t value) {
  _internal_set_skips_interface_pc(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Skips_Interface_pc)
}

// uint32 MoneyOffCount = 23;
inline void MallGoodsData::clear_moneyoffcount() {
  _impl_.moneyoffcount_ = 0u;
}
inline uint32_t MallGoodsData::_internal_moneyoffcount() const {
  return _impl_.moneyoffcount_;
}
inline uint32_t MallGoodsData::moneyoffcount() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.MoneyOffCount)
  return _internal_moneyoffcount();
}
inline void MallGoodsData::_internal_set_moneyoffcount(uint32_t value) {
  
  _impl_.moneyoffcount_ = value;
}
inline void MallGoodsData::set_moneyoffcount(uint32_t value) {
  _internal_set_moneyoffcount(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.MoneyOffCount)
}

// uint32 MoneyOff = 24;
inline void MallGoodsData::clear_moneyoff() {
  _impl_.moneyoff_ = 0u;
}
inline uint32_t MallGoodsData::_internal_moneyoff() const {
  return _impl_.moneyoff_;
}
inline uint32_t MallGoodsData::moneyoff() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.MoneyOff)
  return _internal_moneyoff();
}
inline void MallGoodsData::_internal_set_moneyoff(uint32_t value) {
  
  _impl_.moneyoff_ = value;
}
inline void MallGoodsData::set_moneyoff(uint32_t value) {
  _internal_set_moneyoff(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.MoneyOff)
}

// uint32 Recommend2Nd = 25;
inline void MallGoodsData::clear_recommend2nd() {
  _impl_.recommend2nd_ = 0u;
}
inline uint32_t MallGoodsData::_internal_recommend2nd() const {
  return _impl_.recommend2nd_;
}
inline uint32_t MallGoodsData::recommend2nd() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend2Nd)
  return _internal_recommend2nd();
}
inline void MallGoodsData::_internal_set_recommend2nd(uint32_t value) {
  
  _impl_.recommend2nd_ = value;
}
inline void MallGoodsData::set_recommend2nd(uint32_t value) {
  _internal_set_recommend2nd(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend2Nd)
}

// uint32 Recommend3Rd = 26;
inline void MallGoodsData::clear_recommend3rd() {
  _impl_.recommend3rd_ = 0u;
}
inline uint32_t MallGoodsData::_internal_recommend3rd() const {
  return _impl_.recommend3rd_;
}
inline uint32_t MallGoodsData::recommend3rd() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend3Rd)
  return _internal_recommend3rd();
}
inline void MallGoodsData::_internal_set_recommend3rd(uint32_t value) {
  
  _impl_.recommend3rd_ = value;
}
inline void MallGoodsData::set_recommend3rd(uint32_t value) {
  _internal_set_recommend3rd(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend3Rd)
}

// uint32 Zone = 27;
inline void MallGoodsData::clear_zone() {
  _impl_.zone_ = 0u;
}
inline uint32_t MallGoodsData::_internal_zone() const {
  return _impl_.zone_;
}
inline uint32_t MallGoodsData::zone() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Zone)
  return _internal_zone();
}
inline void MallGoodsData::_internal_set_zone(uint32_t value) {
  
  _impl_.zone_ = value;
}
inline void MallGoodsData::set_zone(uint32_t value) {
  _internal_set_zone(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Zone)
}

// bool RepeatedBuy = 28;
inline void MallGoodsData::clear_repeatedbuy() {
  _impl_.repeatedbuy_ = false;
}
inline bool MallGoodsData::_internal_repeatedbuy() const {
  return _impl_.repeatedbuy_;
}
inline bool MallGoodsData::repeatedbuy() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.RepeatedBuy)
  return _internal_repeatedbuy();
}
inline void MallGoodsData::_internal_set_repeatedbuy(bool value) {
  
  _impl_.repeatedbuy_ = value;
}
inline void MallGoodsData::set_repeatedbuy(bool value) {
  _internal_set_repeatedbuy(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.RepeatedBuy)
}

// repeated string DownloadList = 29;
inline int MallGoodsData::_internal_downloadlist_size() const {
  return _impl_.downloadlist_.size();
}
inline int MallGoodsData::downloadlist_size() const {
  return _internal_downloadlist_size();
}
inline void MallGoodsData::clear_downloadlist() {
  _impl_.downloadlist_.Clear();
}
inline std::string* MallGoodsData::add_downloadlist() {
  std::string* _s = _internal_add_downloadlist();
  // @@protoc_insertion_point(field_add_mutable:msg.MallGoodsData.DownloadList)
  return _s;
}
inline const std::string& MallGoodsData::_internal_downloadlist(int index) const {
  return _impl_.downloadlist_.Get(index);
}
inline const std::string& MallGoodsData::downloadlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.DownloadList)
  return _internal_downloadlist(index);
}
inline std::string* MallGoodsData::mutable_downloadlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.DownloadList)
  return _impl_.downloadlist_.Mutable(index);
}
inline void MallGoodsData::set_downloadlist(int index, const std::string& value) {
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.DownloadList)
}
inline void MallGoodsData::set_downloadlist(int index, std::string&& value) {
  _impl_.downloadlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.DownloadList)
}
inline void MallGoodsData::set_downloadlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.MallGoodsData.DownloadList)
}
inline void MallGoodsData::set_downloadlist(int index, const char* value, size_t size) {
  _impl_.downloadlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.MallGoodsData.DownloadList)
}
inline std::string* MallGoodsData::_internal_add_downloadlist() {
  return _impl_.downloadlist_.Add();
}
inline void MallGoodsData::add_downloadlist(const std::string& value) {
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.DownloadList)
}
inline void MallGoodsData::add_downloadlist(std::string&& value) {
  _impl_.downloadlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.DownloadList)
}
inline void MallGoodsData::add_downloadlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.MallGoodsData.DownloadList)
}
inline void MallGoodsData::add_downloadlist(const char* value, size_t size) {
  _impl_.downloadlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.MallGoodsData.DownloadList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MallGoodsData::downloadlist() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.DownloadList)
  return _impl_.downloadlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MallGoodsData::mutable_downloadlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.DownloadList)
  return &_impl_.downloadlist_;
}

// repeated .msg.PLATFORMTYPE PlatformList = 30;
inline int MallGoodsData::_internal_platformlist_size() const {
  return _impl_.platformlist_.size();
}
inline int MallGoodsData::platformlist_size() const {
  return _internal_platformlist_size();
}
inline void MallGoodsData::clear_platformlist() {
  _impl_.platformlist_.Clear();
}
inline ::msg::PLATFORMTYPE MallGoodsData::_internal_platformlist(int index) const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformlist_.Get(index));
}
inline ::msg::PLATFORMTYPE MallGoodsData::platformlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.PlatformList)
  return _internal_platformlist(index);
}
inline void MallGoodsData::set_platformlist(int index, ::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.PlatformList)
}
inline void MallGoodsData::_internal_add_platformlist(::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Add(value);
}
inline void MallGoodsData::add_platformlist(::msg::PLATFORMTYPE value) {
  _internal_add_platformlist(value);
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.PlatformList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
MallGoodsData::platformlist() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.PlatformList)
  return _impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MallGoodsData::_internal_mutable_platformlist() {
  return &_impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MallGoodsData::mutable_platformlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.PlatformList)
  return _internal_mutable_platformlist();
}

// repeated .msg.Consume Consumes2Nd = 31;
inline int MallGoodsData::_internal_consumes2nd_size() const {
  return _impl_.consumes2nd_.size();
}
inline int MallGoodsData::consumes2nd_size() const {
  return _internal_consumes2nd_size();
}
inline void MallGoodsData::clear_consumes2nd() {
  _impl_.consumes2nd_.Clear();
}
inline ::msg::Consume* MallGoodsData::mutable_consumes2nd(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.Consumes2Nd)
  return _impl_.consumes2nd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >*
MallGoodsData::mutable_consumes2nd() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.Consumes2Nd)
  return &_impl_.consumes2nd_;
}
inline const ::msg::Consume& MallGoodsData::_internal_consumes2nd(int index) const {
  return _impl_.consumes2nd_.Get(index);
}
inline const ::msg::Consume& MallGoodsData::consumes2nd(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Consumes2Nd)
  return _internal_consumes2nd(index);
}
inline ::msg::Consume* MallGoodsData::_internal_add_consumes2nd() {
  return _impl_.consumes2nd_.Add();
}
inline ::msg::Consume* MallGoodsData::add_consumes2nd() {
  ::msg::Consume* _add = _internal_add_consumes2nd();
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.Consumes2Nd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Consume >&
MallGoodsData::consumes2nd() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.Consumes2Nd)
  return _impl_.consumes2nd_;
}

// int64 OnSale2NdBeginTime = 32;
inline void MallGoodsData::clear_onsale2ndbegintime() {
  _impl_.onsale2ndbegintime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_onsale2ndbegintime() const {
  return _impl_.onsale2ndbegintime_;
}
inline int64_t MallGoodsData::onsale2ndbegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.OnSale2NdBeginTime)
  return _internal_onsale2ndbegintime();
}
inline void MallGoodsData::_internal_set_onsale2ndbegintime(int64_t value) {
  
  _impl_.onsale2ndbegintime_ = value;
}
inline void MallGoodsData::set_onsale2ndbegintime(int64_t value) {
  _internal_set_onsale2ndbegintime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.OnSale2NdBeginTime)
}

// int64 OnSale2NdEndTime = 33;
inline void MallGoodsData::clear_onsale2ndendtime() {
  _impl_.onsale2ndendtime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_onsale2ndendtime() const {
  return _impl_.onsale2ndendtime_;
}
inline int64_t MallGoodsData::onsale2ndendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.OnSale2NdEndTime)
  return _internal_onsale2ndendtime();
}
inline void MallGoodsData::_internal_set_onsale2ndendtime(int64_t value) {
  
  _impl_.onsale2ndendtime_ = value;
}
inline void MallGoodsData::set_onsale2ndendtime(int64_t value) {
  _internal_set_onsale2ndendtime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.OnSale2NdEndTime)
}

// uint32 MoneyOff2NdCount = 34;
inline void MallGoodsData::clear_moneyoff2ndcount() {
  _impl_.moneyoff2ndcount_ = 0u;
}
inline uint32_t MallGoodsData::_internal_moneyoff2ndcount() const {
  return _impl_.moneyoff2ndcount_;
}
inline uint32_t MallGoodsData::moneyoff2ndcount() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.MoneyOff2NdCount)
  return _internal_moneyoff2ndcount();
}
inline void MallGoodsData::_internal_set_moneyoff2ndcount(uint32_t value) {
  
  _impl_.moneyoff2ndcount_ = value;
}
inline void MallGoodsData::set_moneyoff2ndcount(uint32_t value) {
  _internal_set_moneyoff2ndcount(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.MoneyOff2NdCount)
}

// uint32 MoneyOff2Nd = 35;
inline void MallGoodsData::clear_moneyoff2nd() {
  _impl_.moneyoff2nd_ = 0u;
}
inline uint32_t MallGoodsData::_internal_moneyoff2nd() const {
  return _impl_.moneyoff2nd_;
}
inline uint32_t MallGoodsData::moneyoff2nd() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.MoneyOff2Nd)
  return _internal_moneyoff2nd();
}
inline void MallGoodsData::_internal_set_moneyoff2nd(uint32_t value) {
  
  _impl_.moneyoff2nd_ = value;
}
inline void MallGoodsData::set_moneyoff2nd(uint32_t value) {
  _internal_set_moneyoff2nd(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.MoneyOff2Nd)
}

// string Version = 36;
inline void MallGoodsData::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& MallGoodsData::version() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallGoodsData::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Version)
}
inline std::string* MallGoodsData::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.Version)
  return _s;
}
inline const std::string& MallGoodsData::_internal_version() const {
  return _impl_.version_.Get();
}
inline void MallGoodsData::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* MallGoodsData::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* MallGoodsData::release_version() {
  // @@protoc_insertion_point(field_release:msg.MallGoodsData.Version)
  return _impl_.version_.Release();
}
inline void MallGoodsData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallGoodsData.Version)
}

// repeated string ExcludeDownload = 37;
inline int MallGoodsData::_internal_excludedownload_size() const {
  return _impl_.excludedownload_.size();
}
inline int MallGoodsData::excludedownload_size() const {
  return _internal_excludedownload_size();
}
inline void MallGoodsData::clear_excludedownload() {
  _impl_.excludedownload_.Clear();
}
inline std::string* MallGoodsData::add_excludedownload() {
  std::string* _s = _internal_add_excludedownload();
  // @@protoc_insertion_point(field_add_mutable:msg.MallGoodsData.ExcludeDownload)
  return _s;
}
inline const std::string& MallGoodsData::_internal_excludedownload(int index) const {
  return _impl_.excludedownload_.Get(index);
}
inline const std::string& MallGoodsData::excludedownload(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ExcludeDownload)
  return _internal_excludedownload(index);
}
inline std::string* MallGoodsData::mutable_excludedownload(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.ExcludeDownload)
  return _impl_.excludedownload_.Mutable(index);
}
inline void MallGoodsData::set_excludedownload(int index, const std::string& value) {
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ExcludeDownload)
}
inline void MallGoodsData::set_excludedownload(int index, std::string&& value) {
  _impl_.excludedownload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ExcludeDownload)
}
inline void MallGoodsData::set_excludedownload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.MallGoodsData.ExcludeDownload)
}
inline void MallGoodsData::set_excludedownload(int index, const char* value, size_t size) {
  _impl_.excludedownload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.MallGoodsData.ExcludeDownload)
}
inline std::string* MallGoodsData::_internal_add_excludedownload() {
  return _impl_.excludedownload_.Add();
}
inline void MallGoodsData::add_excludedownload(const std::string& value) {
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.ExcludeDownload)
}
inline void MallGoodsData::add_excludedownload(std::string&& value) {
  _impl_.excludedownload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.ExcludeDownload)
}
inline void MallGoodsData::add_excludedownload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.MallGoodsData.ExcludeDownload)
}
inline void MallGoodsData::add_excludedownload(const char* value, size_t size) {
  _impl_.excludedownload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.MallGoodsData.ExcludeDownload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MallGoodsData::excludedownload() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.ExcludeDownload)
  return _impl_.excludedownload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MallGoodsData::mutable_excludedownload() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.ExcludeDownload)
  return &_impl_.excludedownload_;
}

// repeated string CountryList = 38;
inline int MallGoodsData::_internal_countrylist_size() const {
  return _impl_.countrylist_.size();
}
inline int MallGoodsData::countrylist_size() const {
  return _internal_countrylist_size();
}
inline void MallGoodsData::clear_countrylist() {
  _impl_.countrylist_.Clear();
}
inline std::string* MallGoodsData::add_countrylist() {
  std::string* _s = _internal_add_countrylist();
  // @@protoc_insertion_point(field_add_mutable:msg.MallGoodsData.CountryList)
  return _s;
}
inline const std::string& MallGoodsData::_internal_countrylist(int index) const {
  return _impl_.countrylist_.Get(index);
}
inline const std::string& MallGoodsData::countrylist(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.CountryList)
  return _internal_countrylist(index);
}
inline std::string* MallGoodsData::mutable_countrylist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.CountryList)
  return _impl_.countrylist_.Mutable(index);
}
inline void MallGoodsData::set_countrylist(int index, const std::string& value) {
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.CountryList)
}
inline void MallGoodsData::set_countrylist(int index, std::string&& value) {
  _impl_.countrylist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.CountryList)
}
inline void MallGoodsData::set_countrylist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.MallGoodsData.CountryList)
}
inline void MallGoodsData::set_countrylist(int index, const char* value, size_t size) {
  _impl_.countrylist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.MallGoodsData.CountryList)
}
inline std::string* MallGoodsData::_internal_add_countrylist() {
  return _impl_.countrylist_.Add();
}
inline void MallGoodsData::add_countrylist(const std::string& value) {
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.CountryList)
}
inline void MallGoodsData::add_countrylist(std::string&& value) {
  _impl_.countrylist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.CountryList)
}
inline void MallGoodsData::add_countrylist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.MallGoodsData.CountryList)
}
inline void MallGoodsData::add_countrylist(const char* value, size_t size) {
  _impl_.countrylist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.MallGoodsData.CountryList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MallGoodsData::countrylist() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.CountryList)
  return _impl_.countrylist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MallGoodsData::mutable_countrylist() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.CountryList)
  return &_impl_.countrylist_;
}

// bool DisableDeduction = 39;
inline void MallGoodsData::clear_disablededuction() {
  _impl_.disablededuction_ = false;
}
inline bool MallGoodsData::_internal_disablededuction() const {
  return _impl_.disablededuction_;
}
inline bool MallGoodsData::disablededuction() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.DisableDeduction)
  return _internal_disablededuction();
}
inline void MallGoodsData::_internal_set_disablededuction(bool value) {
  
  _impl_.disablededuction_ = value;
}
inline void MallGoodsData::set_disablededuction(bool value) {
  _internal_set_disablededuction(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.DisableDeduction)
}

// string VideoUrl = 40;
inline void MallGoodsData::clear_videourl() {
  _impl_.videourl_.ClearToEmpty();
}
inline const std::string& MallGoodsData::videourl() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.VideoUrl)
  return _internal_videourl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallGoodsData::set_videourl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.videourl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.VideoUrl)
}
inline std::string* MallGoodsData::mutable_videourl() {
  std::string* _s = _internal_mutable_videourl();
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.VideoUrl)
  return _s;
}
inline const std::string& MallGoodsData::_internal_videourl() const {
  return _impl_.videourl_.Get();
}
inline void MallGoodsData::_internal_set_videourl(const std::string& value) {
  
  _impl_.videourl_.Set(value, GetArenaForAllocation());
}
inline std::string* MallGoodsData::_internal_mutable_videourl() {
  
  return _impl_.videourl_.Mutable(GetArenaForAllocation());
}
inline std::string* MallGoodsData::release_videourl() {
  // @@protoc_insertion_point(field_release:msg.MallGoodsData.VideoUrl)
  return _impl_.videourl_.Release();
}
inline void MallGoodsData::set_allocated_videourl(std::string* videourl) {
  if (videourl != nullptr) {
    
  } else {
    
  }
  _impl_.videourl_.SetAllocated(videourl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.videourl_.IsDefault()) {
    _impl_.videourl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallGoodsData.VideoUrl)
}

// repeated .msg.Award Gifts = 41;
inline int MallGoodsData::_internal_gifts_size() const {
  return _impl_.gifts_.size();
}
inline int MallGoodsData::gifts_size() const {
  return _internal_gifts_size();
}
inline void MallGoodsData::clear_gifts() {
  _impl_.gifts_.Clear();
}
inline ::msg::Award* MallGoodsData::mutable_gifts(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.Gifts)
  return _impl_.gifts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >*
MallGoodsData::mutable_gifts() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.Gifts)
  return &_impl_.gifts_;
}
inline const ::msg::Award& MallGoodsData::_internal_gifts(int index) const {
  return _impl_.gifts_.Get(index);
}
inline const ::msg::Award& MallGoodsData::gifts(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Gifts)
  return _internal_gifts(index);
}
inline ::msg::Award* MallGoodsData::_internal_add_gifts() {
  return _impl_.gifts_.Add();
}
inline ::msg::Award* MallGoodsData::add_gifts() {
  ::msg::Award* _add = _internal_add_gifts();
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.Gifts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Award >&
MallGoodsData::gifts() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.Gifts)
  return _impl_.gifts_;
}

// int64 RecommendBeginTime = 42;
inline void MallGoodsData::clear_recommendbegintime() {
  _impl_.recommendbegintime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_recommendbegintime() const {
  return _impl_.recommendbegintime_;
}
inline int64_t MallGoodsData::recommendbegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.RecommendBeginTime)
  return _internal_recommendbegintime();
}
inline void MallGoodsData::_internal_set_recommendbegintime(int64_t value) {
  
  _impl_.recommendbegintime_ = value;
}
inline void MallGoodsData::set_recommendbegintime(int64_t value) {
  _internal_set_recommendbegintime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.RecommendBeginTime)
}

// int64 RecommendEndTime = 43;
inline void MallGoodsData::clear_recommendendtime() {
  _impl_.recommendendtime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_recommendendtime() const {
  return _impl_.recommendendtime_;
}
inline int64_t MallGoodsData::recommendendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.RecommendEndTime)
  return _internal_recommendendtime();
}
inline void MallGoodsData::_internal_set_recommendendtime(int64_t value) {
  
  _impl_.recommendendtime_ = value;
}
inline void MallGoodsData::set_recommendendtime(int64_t value) {
  _internal_set_recommendendtime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.RecommendEndTime)
}

// int64 Recommend2NdBeginTime = 44;
inline void MallGoodsData::clear_recommend2ndbegintime() {
  _impl_.recommend2ndbegintime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_recommend2ndbegintime() const {
  return _impl_.recommend2ndbegintime_;
}
inline int64_t MallGoodsData::recommend2ndbegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend2NdBeginTime)
  return _internal_recommend2ndbegintime();
}
inline void MallGoodsData::_internal_set_recommend2ndbegintime(int64_t value) {
  
  _impl_.recommend2ndbegintime_ = value;
}
inline void MallGoodsData::set_recommend2ndbegintime(int64_t value) {
  _internal_set_recommend2ndbegintime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend2NdBeginTime)
}

// int64 Recommend2NdEndTime = 46;
inline void MallGoodsData::clear_recommend2ndendtime() {
  _impl_.recommend2ndendtime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_recommend2ndendtime() const {
  return _impl_.recommend2ndendtime_;
}
inline int64_t MallGoodsData::recommend2ndendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend2NdEndTime)
  return _internal_recommend2ndendtime();
}
inline void MallGoodsData::_internal_set_recommend2ndendtime(int64_t value) {
  
  _impl_.recommend2ndendtime_ = value;
}
inline void MallGoodsData::set_recommend2ndendtime(int64_t value) {
  _internal_set_recommend2ndendtime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend2NdEndTime)
}

// int64 Recommend3RdBeginTime = 47;
inline void MallGoodsData::clear_recommend3rdbegintime() {
  _impl_.recommend3rdbegintime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_recommend3rdbegintime() const {
  return _impl_.recommend3rdbegintime_;
}
inline int64_t MallGoodsData::recommend3rdbegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend3RdBeginTime)
  return _internal_recommend3rdbegintime();
}
inline void MallGoodsData::_internal_set_recommend3rdbegintime(int64_t value) {
  
  _impl_.recommend3rdbegintime_ = value;
}
inline void MallGoodsData::set_recommend3rdbegintime(int64_t value) {
  _internal_set_recommend3rdbegintime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend3RdBeginTime)
}

// int64 Recommend3RdEndTime = 48;
inline void MallGoodsData::clear_recommend3rdendtime() {
  _impl_.recommend3rdendtime_ = int64_t{0};
}
inline int64_t MallGoodsData::_internal_recommend3rdendtime() const {
  return _impl_.recommend3rdendtime_;
}
inline int64_t MallGoodsData::recommend3rdendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Recommend3RdEndTime)
  return _internal_recommend3rdendtime();
}
inline void MallGoodsData::_internal_set_recommend3rdendtime(int64_t value) {
  
  _impl_.recommend3rdendtime_ = value;
}
inline void MallGoodsData::set_recommend3rdendtime(int64_t value) {
  _internal_set_recommend3rdendtime(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Recommend3RdEndTime)
}

// repeated .msg.ConsumeIncrease ConsumeInc = 49;
inline int MallGoodsData::_internal_consumeinc_size() const {
  return _impl_.consumeinc_.size();
}
inline int MallGoodsData::consumeinc_size() const {
  return _internal_consumeinc_size();
}
inline void MallGoodsData::clear_consumeinc() {
  _impl_.consumeinc_.Clear();
}
inline ::msg::ConsumeIncrease* MallGoodsData::mutable_consumeinc(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.ConsumeInc)
  return _impl_.consumeinc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ConsumeIncrease >*
MallGoodsData::mutable_consumeinc() {
  // @@protoc_insertion_point(field_mutable_list:msg.MallGoodsData.ConsumeInc)
  return &_impl_.consumeinc_;
}
inline const ::msg::ConsumeIncrease& MallGoodsData::_internal_consumeinc(int index) const {
  return _impl_.consumeinc_.Get(index);
}
inline const ::msg::ConsumeIncrease& MallGoodsData::consumeinc(int index) const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ConsumeInc)
  return _internal_consumeinc(index);
}
inline ::msg::ConsumeIncrease* MallGoodsData::_internal_add_consumeinc() {
  return _impl_.consumeinc_.Add();
}
inline ::msg::ConsumeIncrease* MallGoodsData::add_consumeinc() {
  ::msg::ConsumeIncrease* _add = _internal_add_consumeinc();
  // @@protoc_insertion_point(field_add:msg.MallGoodsData.ConsumeInc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ConsumeIncrease >&
MallGoodsData::consumeinc() const {
  // @@protoc_insertion_point(field_list:msg.MallGoodsData.ConsumeInc)
  return _impl_.consumeinc_;
}

// .msg.ConsumeIncreaseRefresh ConsumeIncRefresh = 50;
inline void MallGoodsData::clear_consumeincrefresh() {
  _impl_.consumeincrefresh_ = 0;
}
inline ::msg::ConsumeIncreaseRefresh MallGoodsData::_internal_consumeincrefresh() const {
  return static_cast< ::msg::ConsumeIncreaseRefresh >(_impl_.consumeincrefresh_);
}
inline ::msg::ConsumeIncreaseRefresh MallGoodsData::consumeincrefresh() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ConsumeIncRefresh)
  return _internal_consumeincrefresh();
}
inline void MallGoodsData::_internal_set_consumeincrefresh(::msg::ConsumeIncreaseRefresh value) {
  
  _impl_.consumeincrefresh_ = value;
}
inline void MallGoodsData::set_consumeincrefresh(::msg::ConsumeIncreaseRefresh value) {
  _internal_set_consumeincrefresh(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ConsumeIncRefresh)
}

// bool ConsumesUrl = 51;
inline void MallGoodsData::clear_consumesurl() {
  _impl_.consumesurl_ = false;
}
inline bool MallGoodsData::_internal_consumesurl() const {
  return _impl_.consumesurl_;
}
inline bool MallGoodsData::consumesurl() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ConsumesUrl)
  return _internal_consumesurl();
}
inline void MallGoodsData::_internal_set_consumesurl(bool value) {
  
  _impl_.consumesurl_ = value;
}
inline void MallGoodsData::set_consumesurl(bool value) {
  _internal_set_consumesurl(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ConsumesUrl)
}

// string ConsumesUrlWeb = 52;
inline void MallGoodsData::clear_consumesurlweb() {
  _impl_.consumesurlweb_.ClearToEmpty();
}
inline const std::string& MallGoodsData::consumesurlweb() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ConsumesUrlWeb)
  return _internal_consumesurlweb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallGoodsData::set_consumesurlweb(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumesurlweb_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ConsumesUrlWeb)
}
inline std::string* MallGoodsData::mutable_consumesurlweb() {
  std::string* _s = _internal_mutable_consumesurlweb();
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.ConsumesUrlWeb)
  return _s;
}
inline const std::string& MallGoodsData::_internal_consumesurlweb() const {
  return _impl_.consumesurlweb_.Get();
}
inline void MallGoodsData::_internal_set_consumesurlweb(const std::string& value) {
  
  _impl_.consumesurlweb_.Set(value, GetArenaForAllocation());
}
inline std::string* MallGoodsData::_internal_mutable_consumesurlweb() {
  
  return _impl_.consumesurlweb_.Mutable(GetArenaForAllocation());
}
inline std::string* MallGoodsData::release_consumesurlweb() {
  // @@protoc_insertion_point(field_release:msg.MallGoodsData.ConsumesUrlWeb)
  return _impl_.consumesurlweb_.Release();
}
inline void MallGoodsData::set_allocated_consumesurlweb(std::string* consumesurlweb) {
  if (consumesurlweb != nullptr) {
    
  } else {
    
  }
  _impl_.consumesurlweb_.SetAllocated(consumesurlweb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumesurlweb_.IsDefault()) {
    _impl_.consumesurlweb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallGoodsData.ConsumesUrlWeb)
}

// string ConsumesUrlApp = 53;
inline void MallGoodsData::clear_consumesurlapp() {
  _impl_.consumesurlapp_.ClearToEmpty();
}
inline const std::string& MallGoodsData::consumesurlapp() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.ConsumesUrlApp)
  return _internal_consumesurlapp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallGoodsData::set_consumesurlapp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consumesurlapp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.ConsumesUrlApp)
}
inline std::string* MallGoodsData::mutable_consumesurlapp() {
  std::string* _s = _internal_mutable_consumesurlapp();
  // @@protoc_insertion_point(field_mutable:msg.MallGoodsData.ConsumesUrlApp)
  return _s;
}
inline const std::string& MallGoodsData::_internal_consumesurlapp() const {
  return _impl_.consumesurlapp_.Get();
}
inline void MallGoodsData::_internal_set_consumesurlapp(const std::string& value) {
  
  _impl_.consumesurlapp_.Set(value, GetArenaForAllocation());
}
inline std::string* MallGoodsData::_internal_mutable_consumesurlapp() {
  
  return _impl_.consumesurlapp_.Mutable(GetArenaForAllocation());
}
inline std::string* MallGoodsData::release_consumesurlapp() {
  // @@protoc_insertion_point(field_release:msg.MallGoodsData.ConsumesUrlApp)
  return _impl_.consumesurlapp_.Release();
}
inline void MallGoodsData::set_allocated_consumesurlapp(std::string* consumesurlapp) {
  if (consumesurlapp != nullptr) {
    
  } else {
    
  }
  _impl_.consumesurlapp_.SetAllocated(consumesurlapp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consumesurlapp_.IsDefault()) {
    _impl_.consumesurlapp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallGoodsData.ConsumesUrlApp)
}

// uint32 Series = 54;
inline void MallGoodsData::clear_series() {
  _impl_.series_ = 0u;
}
inline uint32_t MallGoodsData::_internal_series() const {
  return _impl_.series_;
}
inline uint32_t MallGoodsData::series() const {
  // @@protoc_insertion_point(field_get:msg.MallGoodsData.Series)
  return _internal_series();
}
inline void MallGoodsData::_internal_set_series(uint32_t value) {
  
  _impl_.series_ = value;
}
inline void MallGoodsData::set_series(uint32_t value) {
  _internal_set_series(value);
  // @@protoc_insertion_point(field_set:msg.MallGoodsData.Series)
}

// -------------------------------------------------------------------

// ConsumeIncrease

// uint32 Count = 1;
inline void ConsumeIncrease::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t ConsumeIncrease::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t ConsumeIncrease::count() const {
  // @@protoc_insertion_point(field_get:msg.ConsumeIncrease.Count)
  return _internal_count();
}
inline void ConsumeIncrease::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void ConsumeIncrease::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.ConsumeIncrease.Count)
}

// -------------------------------------------------------------------

// CSDTMallGoodsData

// .msg.MallGoodsData MallGoods = 1;
inline bool CSDTMallGoodsData::_internal_has_mallgoods() const {
  return this != internal_default_instance() && _impl_.mallgoods_ != nullptr;
}
inline bool CSDTMallGoodsData::has_mallgoods() const {
  return _internal_has_mallgoods();
}
inline void CSDTMallGoodsData::clear_mallgoods() {
  if (GetArenaForAllocation() == nullptr && _impl_.mallgoods_ != nullptr) {
    delete _impl_.mallgoods_;
  }
  _impl_.mallgoods_ = nullptr;
}
inline const ::msg::MallGoodsData& CSDTMallGoodsData::_internal_mallgoods() const {
  const ::msg::MallGoodsData* p = _impl_.mallgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::MallGoodsData&>(
      ::msg::_MallGoodsData_default_instance_);
}
inline const ::msg::MallGoodsData& CSDTMallGoodsData::mallgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallGoodsData.MallGoods)
  return _internal_mallgoods();
}
inline void CSDTMallGoodsData::unsafe_arena_set_allocated_mallgoods(
    ::msg::MallGoodsData* mallgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mallgoods_);
  }
  _impl_.mallgoods_ = mallgoods;
  if (mallgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTMallGoodsData.MallGoods)
}
inline ::msg::MallGoodsData* CSDTMallGoodsData::release_mallgoods() {
  
  ::msg::MallGoodsData* temp = _impl_.mallgoods_;
  _impl_.mallgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::MallGoodsData* CSDTMallGoodsData::unsafe_arena_release_mallgoods() {
  // @@protoc_insertion_point(field_release:msg.CSDTMallGoodsData.MallGoods)
  
  ::msg::MallGoodsData* temp = _impl_.mallgoods_;
  _impl_.mallgoods_ = nullptr;
  return temp;
}
inline ::msg::MallGoodsData* CSDTMallGoodsData::_internal_mutable_mallgoods() {
  
  if (_impl_.mallgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::MallGoodsData>(GetArenaForAllocation());
    _impl_.mallgoods_ = p;
  }
  return _impl_.mallgoods_;
}
inline ::msg::MallGoodsData* CSDTMallGoodsData::mutable_mallgoods() {
  ::msg::MallGoodsData* _msg = _internal_mutable_mallgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMallGoodsData.MallGoods)
  return _msg;
}
inline void CSDTMallGoodsData::set_allocated_mallgoods(::msg::MallGoodsData* mallgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mallgoods_;
  }
  if (mallgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mallgoods);
    if (message_arena != submessage_arena) {
      mallgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mallgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mallgoods_ = mallgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMallGoodsData.MallGoods)
}

// uint32 BuyCount = 2;
inline void CSDTMallGoodsData::clear_buycount() {
  _impl_.buycount_ = 0u;
}
inline uint32_t CSDTMallGoodsData::_internal_buycount() const {
  return _impl_.buycount_;
}
inline uint32_t CSDTMallGoodsData::buycount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallGoodsData.BuyCount)
  return _internal_buycount();
}
inline void CSDTMallGoodsData::_internal_set_buycount(uint32_t value) {
  
  _impl_.buycount_ = value;
}
inline void CSDTMallGoodsData::set_buycount(uint32_t value) {
  _internal_set_buycount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMallGoodsData.BuyCount)
}

// int64 LastResetTime = 3;
inline void CSDTMallGoodsData::clear_lastresettime() {
  _impl_.lastresettime_ = int64_t{0};
}
inline int64_t CSDTMallGoodsData::_internal_lastresettime() const {
  return _impl_.lastresettime_;
}
inline int64_t CSDTMallGoodsData::lastresettime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallGoodsData.LastResetTime)
  return _internal_lastresettime();
}
inline void CSDTMallGoodsData::_internal_set_lastresettime(int64_t value) {
  
  _impl_.lastresettime_ = value;
}
inline void CSDTMallGoodsData::set_lastresettime(int64_t value) {
  _internal_set_lastresettime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMallGoodsData.LastResetTime)
}

// -------------------------------------------------------------------

// CSDTMallGoods

// repeated .msg.CSDTMallGoodsData MallGoods = 1;
inline int CSDTMallGoods::_internal_mallgoods_size() const {
  return _impl_.mallgoods_.size();
}
inline int CSDTMallGoods::mallgoods_size() const {
  return _internal_mallgoods_size();
}
inline void CSDTMallGoods::clear_mallgoods() {
  _impl_.mallgoods_.Clear();
}
inline ::msg::CSDTMallGoodsData* CSDTMallGoods::mutable_mallgoods(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTMallGoods.MallGoods)
  return _impl_.mallgoods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallGoodsData >*
CSDTMallGoods::mutable_mallgoods() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTMallGoods.MallGoods)
  return &_impl_.mallgoods_;
}
inline const ::msg::CSDTMallGoodsData& CSDTMallGoods::_internal_mallgoods(int index) const {
  return _impl_.mallgoods_.Get(index);
}
inline const ::msg::CSDTMallGoodsData& CSDTMallGoods::mallgoods(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallGoods.MallGoods)
  return _internal_mallgoods(index);
}
inline ::msg::CSDTMallGoodsData* CSDTMallGoods::_internal_add_mallgoods() {
  return _impl_.mallgoods_.Add();
}
inline ::msg::CSDTMallGoodsData* CSDTMallGoods::add_mallgoods() {
  ::msg::CSDTMallGoodsData* _add = _internal_add_mallgoods();
  // @@protoc_insertion_point(field_add:msg.CSDTMallGoods.MallGoods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallGoodsData >&
CSDTMallGoods::mallgoods() const {
  // @@protoc_insertion_point(field_list:msg.CSDTMallGoods.MallGoods)
  return _impl_.mallgoods_;
}

// -------------------------------------------------------------------

// CSDTMallBuyCountData

// uint32 Id = 1;
inline void CSDTMallBuyCountData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTMallBuyCountData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTMallBuyCountData::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallBuyCountData.Id)
  return _internal_id();
}
inline void CSDTMallBuyCountData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTMallBuyCountData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMallBuyCountData.Id)
}

// uint32 BuyCount = 2;
inline void CSDTMallBuyCountData::clear_buycount() {
  _impl_.buycount_ = 0u;
}
inline uint32_t CSDTMallBuyCountData::_internal_buycount() const {
  return _impl_.buycount_;
}
inline uint32_t CSDTMallBuyCountData::buycount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallBuyCountData.BuyCount)
  return _internal_buycount();
}
inline void CSDTMallBuyCountData::_internal_set_buycount(uint32_t value) {
  
  _impl_.buycount_ = value;
}
inline void CSDTMallBuyCountData::set_buycount(uint32_t value) {
  _internal_set_buycount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMallBuyCountData.BuyCount)
}

// int64 LastResetTime = 3;
inline void CSDTMallBuyCountData::clear_lastresettime() {
  _impl_.lastresettime_ = int64_t{0};
}
inline int64_t CSDTMallBuyCountData::_internal_lastresettime() const {
  return _impl_.lastresettime_;
}
inline int64_t CSDTMallBuyCountData::lastresettime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallBuyCountData.LastResetTime)
  return _internal_lastresettime();
}
inline void CSDTMallBuyCountData::_internal_set_lastresettime(int64_t value) {
  
  _impl_.lastresettime_ = value;
}
inline void CSDTMallBuyCountData::set_lastresettime(int64_t value) {
  _internal_set_lastresettime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMallBuyCountData.LastResetTime)
}

// -------------------------------------------------------------------

// CSDTMallBuyCount

// repeated .msg.CSDTMallBuyCountData MallGoods = 1;
inline int CSDTMallBuyCount::_internal_mallgoods_size() const {
  return _impl_.mallgoods_.size();
}
inline int CSDTMallBuyCount::mallgoods_size() const {
  return _internal_mallgoods_size();
}
inline void CSDTMallBuyCount::clear_mallgoods() {
  _impl_.mallgoods_.Clear();
}
inline ::msg::CSDTMallBuyCountData* CSDTMallBuyCount::mutable_mallgoods(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTMallBuyCount.MallGoods)
  return _impl_.mallgoods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallBuyCountData >*
CSDTMallBuyCount::mutable_mallgoods() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTMallBuyCount.MallGoods)
  return &_impl_.mallgoods_;
}
inline const ::msg::CSDTMallBuyCountData& CSDTMallBuyCount::_internal_mallgoods(int index) const {
  return _impl_.mallgoods_.Get(index);
}
inline const ::msg::CSDTMallBuyCountData& CSDTMallBuyCount::mallgoods(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTMallBuyCount.MallGoods)
  return _internal_mallgoods(index);
}
inline ::msg::CSDTMallBuyCountData* CSDTMallBuyCount::_internal_add_mallgoods() {
  return _impl_.mallgoods_.Add();
}
inline ::msg::CSDTMallBuyCountData* CSDTMallBuyCount::add_mallgoods() {
  ::msg::CSDTMallBuyCountData* _add = _internal_add_mallgoods();
  // @@protoc_insertion_point(field_add:msg.CSDTMallBuyCount.MallGoods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMallBuyCountData >&
CSDTMallBuyCount::mallgoods() const {
  // @@protoc_insertion_point(field_list:msg.CSDTMallBuyCount.MallGoods)
  return _impl_.mallgoods_;
}

// -------------------------------------------------------------------

// MallNoticeData

// uint32 Id = 1;
inline void MallNoticeData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t MallNoticeData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t MallNoticeData::id() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.Id)
  return _internal_id();
}
inline void MallNoticeData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void MallNoticeData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.Id)
}

// string PicName = 2;
inline void MallNoticeData::clear_picname() {
  _impl_.picname_.ClearToEmpty();
}
inline const std::string& MallNoticeData::picname() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.PicName)
  return _internal_picname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallNoticeData::set_picname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.PicName)
}
inline std::string* MallNoticeData::mutable_picname() {
  std::string* _s = _internal_mutable_picname();
  // @@protoc_insertion_point(field_mutable:msg.MallNoticeData.PicName)
  return _s;
}
inline const std::string& MallNoticeData::_internal_picname() const {
  return _impl_.picname_.Get();
}
inline void MallNoticeData::_internal_set_picname(const std::string& value) {
  
  _impl_.picname_.Set(value, GetArenaForAllocation());
}
inline std::string* MallNoticeData::_internal_mutable_picname() {
  
  return _impl_.picname_.Mutable(GetArenaForAllocation());
}
inline std::string* MallNoticeData::release_picname() {
  // @@protoc_insertion_point(field_release:msg.MallNoticeData.PicName)
  return _impl_.picname_.Release();
}
inline void MallNoticeData::set_allocated_picname(std::string* picname) {
  if (picname != nullptr) {
    
  } else {
    
  }
  _impl_.picname_.SetAllocated(picname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picname_.IsDefault()) {
    _impl_.picname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallNoticeData.PicName)
}

// uint32 SortId = 3;
inline void MallNoticeData::clear_sortid() {
  _impl_.sortid_ = 0u;
}
inline uint32_t MallNoticeData::_internal_sortid() const {
  return _impl_.sortid_;
}
inline uint32_t MallNoticeData::sortid() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.SortId)
  return _internal_sortid();
}
inline void MallNoticeData::_internal_set_sortid(uint32_t value) {
  
  _impl_.sortid_ = value;
}
inline void MallNoticeData::set_sortid(uint32_t value) {
  _internal_set_sortid(value);
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.SortId)
}

// .msg.SKIPTYPE SkipType = 4;
inline void MallNoticeData::clear_skiptype() {
  _impl_.skiptype_ = 0;
}
inline ::msg::SKIPTYPE MallNoticeData::_internal_skiptype() const {
  return static_cast< ::msg::SKIPTYPE >(_impl_.skiptype_);
}
inline ::msg::SKIPTYPE MallNoticeData::skiptype() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.SkipType)
  return _internal_skiptype();
}
inline void MallNoticeData::_internal_set_skiptype(::msg::SKIPTYPE value) {
  
  _impl_.skiptype_ = value;
}
inline void MallNoticeData::set_skiptype(::msg::SKIPTYPE value) {
  _internal_set_skiptype(value);
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.SkipType)
}

// string SkipName = 5;
inline void MallNoticeData::clear_skipname() {
  _impl_.skipname_.ClearToEmpty();
}
inline const std::string& MallNoticeData::skipname() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.SkipName)
  return _internal_skipname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallNoticeData::set_skipname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skipname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.SkipName)
}
inline std::string* MallNoticeData::mutable_skipname() {
  std::string* _s = _internal_mutable_skipname();
  // @@protoc_insertion_point(field_mutable:msg.MallNoticeData.SkipName)
  return _s;
}
inline const std::string& MallNoticeData::_internal_skipname() const {
  return _impl_.skipname_.Get();
}
inline void MallNoticeData::_internal_set_skipname(const std::string& value) {
  
  _impl_.skipname_.Set(value, GetArenaForAllocation());
}
inline std::string* MallNoticeData::_internal_mutable_skipname() {
  
  return _impl_.skipname_.Mutable(GetArenaForAllocation());
}
inline std::string* MallNoticeData::release_skipname() {
  // @@protoc_insertion_point(field_release:msg.MallNoticeData.SkipName)
  return _impl_.skipname_.Release();
}
inline void MallNoticeData::set_allocated_skipname(std::string* skipname) {
  if (skipname != nullptr) {
    
  } else {
    
  }
  _impl_.skipname_.SetAllocated(skipname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skipname_.IsDefault()) {
    _impl_.skipname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallNoticeData.SkipName)
}

// uint32 SkipTap = 6;
inline void MallNoticeData::clear_skiptap() {
  _impl_.skiptap_ = 0u;
}
inline uint32_t MallNoticeData::_internal_skiptap() const {
  return _impl_.skiptap_;
}
inline uint32_t MallNoticeData::skiptap() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.SkipTap)
  return _internal_skiptap();
}
inline void MallNoticeData::_internal_set_skiptap(uint32_t value) {
  
  _impl_.skiptap_ = value;
}
inline void MallNoticeData::set_skiptap(uint32_t value) {
  _internal_set_skiptap(value);
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.SkipTap)
}

// uint32 MallGoodsId = 7;
inline void MallNoticeData::clear_mallgoodsid() {
  _impl_.mallgoodsid_ = 0u;
}
inline uint32_t MallNoticeData::_internal_mallgoodsid() const {
  return _impl_.mallgoodsid_;
}
inline uint32_t MallNoticeData::mallgoodsid() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.MallGoodsId)
  return _internal_mallgoodsid();
}
inline void MallNoticeData::_internal_set_mallgoodsid(uint32_t value) {
  
  _impl_.mallgoodsid_ = value;
}
inline void MallNoticeData::set_mallgoodsid(uint32_t value) {
  _internal_set_mallgoodsid(value);
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.MallGoodsId)
}

// string Country = 8;
inline void MallNoticeData::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& MallNoticeData::country() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallNoticeData::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.Country)
}
inline std::string* MallNoticeData::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.MallNoticeData.Country)
  return _s;
}
inline const std::string& MallNoticeData::_internal_country() const {
  return _impl_.country_.Get();
}
inline void MallNoticeData::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* MallNoticeData::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* MallNoticeData::release_country() {
  // @@protoc_insertion_point(field_release:msg.MallNoticeData.Country)
  return _impl_.country_.Release();
}
inline void MallNoticeData::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallNoticeData.Country)
}

// string ShowBeginTime = 9;
inline void MallNoticeData::clear_showbegintime() {
  _impl_.showbegintime_.ClearToEmpty();
}
inline const std::string& MallNoticeData::showbegintime() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.ShowBeginTime)
  return _internal_showbegintime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallNoticeData::set_showbegintime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.showbegintime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.ShowBeginTime)
}
inline std::string* MallNoticeData::mutable_showbegintime() {
  std::string* _s = _internal_mutable_showbegintime();
  // @@protoc_insertion_point(field_mutable:msg.MallNoticeData.ShowBeginTime)
  return _s;
}
inline const std::string& MallNoticeData::_internal_showbegintime() const {
  return _impl_.showbegintime_.Get();
}
inline void MallNoticeData::_internal_set_showbegintime(const std::string& value) {
  
  _impl_.showbegintime_.Set(value, GetArenaForAllocation());
}
inline std::string* MallNoticeData::_internal_mutable_showbegintime() {
  
  return _impl_.showbegintime_.Mutable(GetArenaForAllocation());
}
inline std::string* MallNoticeData::release_showbegintime() {
  // @@protoc_insertion_point(field_release:msg.MallNoticeData.ShowBeginTime)
  return _impl_.showbegintime_.Release();
}
inline void MallNoticeData::set_allocated_showbegintime(std::string* showbegintime) {
  if (showbegintime != nullptr) {
    
  } else {
    
  }
  _impl_.showbegintime_.SetAllocated(showbegintime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.showbegintime_.IsDefault()) {
    _impl_.showbegintime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallNoticeData.ShowBeginTime)
}

// string ShowEndTime = 10;
inline void MallNoticeData::clear_showendtime() {
  _impl_.showendtime_.ClearToEmpty();
}
inline const std::string& MallNoticeData::showendtime() const {
  // @@protoc_insertion_point(field_get:msg.MallNoticeData.ShowEndTime)
  return _internal_showendtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MallNoticeData::set_showendtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.showendtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MallNoticeData.ShowEndTime)
}
inline std::string* MallNoticeData::mutable_showendtime() {
  std::string* _s = _internal_mutable_showendtime();
  // @@protoc_insertion_point(field_mutable:msg.MallNoticeData.ShowEndTime)
  return _s;
}
inline const std::string& MallNoticeData::_internal_showendtime() const {
  return _impl_.showendtime_.Get();
}
inline void MallNoticeData::_internal_set_showendtime(const std::string& value) {
  
  _impl_.showendtime_.Set(value, GetArenaForAllocation());
}
inline std::string* MallNoticeData::_internal_mutable_showendtime() {
  
  return _impl_.showendtime_.Mutable(GetArenaForAllocation());
}
inline std::string* MallNoticeData::release_showendtime() {
  // @@protoc_insertion_point(field_release:msg.MallNoticeData.ShowEndTime)
  return _impl_.showendtime_.Release();
}
inline void MallNoticeData::set_allocated_showendtime(std::string* showendtime) {
  if (showendtime != nullptr) {
    
  } else {
    
  }
  _impl_.showendtime_.SetAllocated(showendtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.showendtime_.IsDefault()) {
    _impl_.showendtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MallNoticeData.ShowEndTime)
}

// -------------------------------------------------------------------

// CSDTCommonRandList

// .msg.ITEMTYPE Type = 1;
inline void CSDTCommonRandList::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::ITEMTYPE CSDTCommonRandList::_internal_type() const {
  return static_cast< ::msg::ITEMTYPE >(_impl_.type_);
}
inline ::msg::ITEMTYPE CSDTCommonRandList::type() const {
  // @@protoc_insertion_point(field_get:msg.CSDTCommonRandList.Type)
  return _internal_type();
}
inline void CSDTCommonRandList::_internal_set_type(::msg::ITEMTYPE value) {
  
  _impl_.type_ = value;
}
inline void CSDTCommonRandList::set_type(::msg::ITEMTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSDTCommonRandList.Type)
}

// repeated uint32 List = 2;
inline int CSDTCommonRandList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int CSDTCommonRandList::list_size() const {
  return _internal_list_size();
}
inline void CSDTCommonRandList::clear_list() {
  _impl_.list_.Clear();
}
inline uint32_t CSDTCommonRandList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline uint32_t CSDTCommonRandList::list(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTCommonRandList.List)
  return _internal_list(index);
}
inline void CSDTCommonRandList::set_list(int index, uint32_t value) {
  _impl_.list_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTCommonRandList.List)
}
inline void CSDTCommonRandList::_internal_add_list(uint32_t value) {
  _impl_.list_.Add(value);
}
inline void CSDTCommonRandList::add_list(uint32_t value) {
  _internal_add_list(value);
  // @@protoc_insertion_point(field_add:msg.CSDTCommonRandList.List)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTCommonRandList::_internal_list() const {
  return _impl_.list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTCommonRandList::list() const {
  // @@protoc_insertion_point(field_list:msg.CSDTCommonRandList.List)
  return _internal_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTCommonRandList::_internal_mutable_list() {
  return &_impl_.list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTCommonRandList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTCommonRandList.List)
  return _internal_mutable_list();
}

// -------------------------------------------------------------------

// Sign

// uint32 Day = 1;
inline void Sign::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t Sign::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t Sign::day() const {
  // @@protoc_insertion_point(field_get:msg.Sign.Day)
  return _internal_day();
}
inline void Sign::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void Sign::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:msg.Sign.Day)
}

// uint32 AwardDay = 2;
inline void Sign::clear_awardday() {
  _impl_.awardday_ = 0u;
}
inline uint32_t Sign::_internal_awardday() const {
  return _impl_.awardday_;
}
inline uint32_t Sign::awardday() const {
  // @@protoc_insertion_point(field_get:msg.Sign.AwardDay)
  return _internal_awardday();
}
inline void Sign::_internal_set_awardday(uint32_t value) {
  
  _impl_.awardday_ = value;
}
inline void Sign::set_awardday(uint32_t value) {
  _internal_set_awardday(value);
  // @@protoc_insertion_point(field_set:msg.Sign.AwardDay)
}

// -------------------------------------------------------------------

// CSDTSignData

// repeated .msg.Sign SignList = 1;
inline int CSDTSignData::_internal_signlist_size() const {
  return _impl_.signlist_.size();
}
inline int CSDTSignData::signlist_size() const {
  return _internal_signlist_size();
}
inline void CSDTSignData::clear_signlist() {
  _impl_.signlist_.Clear();
}
inline ::msg::Sign* CSDTSignData::mutable_signlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTSignData.SignList)
  return _impl_.signlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Sign >*
CSDTSignData::mutable_signlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTSignData.SignList)
  return &_impl_.signlist_;
}
inline const ::msg::Sign& CSDTSignData::_internal_signlist(int index) const {
  return _impl_.signlist_.Get(index);
}
inline const ::msg::Sign& CSDTSignData::signlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.SignList)
  return _internal_signlist(index);
}
inline ::msg::Sign* CSDTSignData::_internal_add_signlist() {
  return _impl_.signlist_.Add();
}
inline ::msg::Sign* CSDTSignData::add_signlist() {
  ::msg::Sign* _add = _internal_add_signlist();
  // @@protoc_insertion_point(field_add:msg.CSDTSignData.SignList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Sign >&
CSDTSignData::signlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTSignData.SignList)
  return _impl_.signlist_;
}

// uint32 TodayAwardDay = 2;
inline void CSDTSignData::clear_todayawardday() {
  _impl_.todayawardday_ = 0u;
}
inline uint32_t CSDTSignData::_internal_todayawardday() const {
  return _impl_.todayawardday_;
}
inline uint32_t CSDTSignData::todayawardday() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.TodayAwardDay)
  return _internal_todayawardday();
}
inline void CSDTSignData::_internal_set_todayawardday(uint32_t value) {
  
  _impl_.todayawardday_ = value;
}
inline void CSDTSignData::set_todayawardday(uint32_t value) {
  _internal_set_todayawardday(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.TodayAwardDay)
}

// uint32 ShareCount = 3;
inline void CSDTSignData::clear_sharecount() {
  _impl_.sharecount_ = 0u;
}
inline uint32_t CSDTSignData::_internal_sharecount() const {
  return _impl_.sharecount_;
}
inline uint32_t CSDTSignData::sharecount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.ShareCount)
  return _internal_sharecount();
}
inline void CSDTSignData::_internal_set_sharecount(uint32_t value) {
  
  _impl_.sharecount_ = value;
}
inline void CSDTSignData::set_sharecount(uint32_t value) {
  _internal_set_sharecount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.ShareCount)
}

// repeated uint32 ShareAward = 4;
inline int CSDTSignData::_internal_shareaward_size() const {
  return _impl_.shareaward_.size();
}
inline int CSDTSignData::shareaward_size() const {
  return _internal_shareaward_size();
}
inline void CSDTSignData::clear_shareaward() {
  _impl_.shareaward_.Clear();
}
inline uint32_t CSDTSignData::_internal_shareaward(int index) const {
  return _impl_.shareaward_.Get(index);
}
inline uint32_t CSDTSignData::shareaward(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.ShareAward)
  return _internal_shareaward(index);
}
inline void CSDTSignData::set_shareaward(int index, uint32_t value) {
  _impl_.shareaward_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.ShareAward)
}
inline void CSDTSignData::_internal_add_shareaward(uint32_t value) {
  _impl_.shareaward_.Add(value);
}
inline void CSDTSignData::add_shareaward(uint32_t value) {
  _internal_add_shareaward(value);
  // @@protoc_insertion_point(field_add:msg.CSDTSignData.ShareAward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTSignData::_internal_shareaward() const {
  return _impl_.shareaward_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTSignData::shareaward() const {
  // @@protoc_insertion_point(field_list:msg.CSDTSignData.ShareAward)
  return _internal_shareaward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTSignData::_internal_mutable_shareaward() {
  return &_impl_.shareaward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTSignData::mutable_shareaward() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTSignData.ShareAward)
  return _internal_mutable_shareaward();
}

// repeated uint32 Fit = 5;
inline int CSDTSignData::_internal_fit_size() const {
  return _impl_.fit_.size();
}
inline int CSDTSignData::fit_size() const {
  return _internal_fit_size();
}
inline void CSDTSignData::clear_fit() {
  _impl_.fit_.Clear();
}
inline uint32_t CSDTSignData::_internal_fit(int index) const {
  return _impl_.fit_.Get(index);
}
inline uint32_t CSDTSignData::fit(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.Fit)
  return _internal_fit(index);
}
inline void CSDTSignData::set_fit(int index, uint32_t value) {
  _impl_.fit_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.Fit)
}
inline void CSDTSignData::_internal_add_fit(uint32_t value) {
  _impl_.fit_.Add(value);
}
inline void CSDTSignData::add_fit(uint32_t value) {
  _internal_add_fit(value);
  // @@protoc_insertion_point(field_add:msg.CSDTSignData.Fit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTSignData::_internal_fit() const {
  return _impl_.fit_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTSignData::fit() const {
  // @@protoc_insertion_point(field_list:msg.CSDTSignData.Fit)
  return _internal_fit();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTSignData::_internal_mutable_fit() {
  return &_impl_.fit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTSignData::mutable_fit() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTSignData.Fit)
  return _internal_mutable_fit();
}

// repeated uint32 Avoid = 6;
inline int CSDTSignData::_internal_avoid_size() const {
  return _impl_.avoid_.size();
}
inline int CSDTSignData::avoid_size() const {
  return _internal_avoid_size();
}
inline void CSDTSignData::clear_avoid() {
  _impl_.avoid_.Clear();
}
inline uint32_t CSDTSignData::_internal_avoid(int index) const {
  return _impl_.avoid_.Get(index);
}
inline uint32_t CSDTSignData::avoid(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.Avoid)
  return _internal_avoid(index);
}
inline void CSDTSignData::set_avoid(int index, uint32_t value) {
  _impl_.avoid_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.Avoid)
}
inline void CSDTSignData::_internal_add_avoid(uint32_t value) {
  _impl_.avoid_.Add(value);
}
inline void CSDTSignData::add_avoid(uint32_t value) {
  _internal_add_avoid(value);
  // @@protoc_insertion_point(field_add:msg.CSDTSignData.Avoid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTSignData::_internal_avoid() const {
  return _impl_.avoid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTSignData::avoid() const {
  // @@protoc_insertion_point(field_list:msg.CSDTSignData.Avoid)
  return _internal_avoid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTSignData::_internal_mutable_avoid() {
  return &_impl_.avoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTSignData::mutable_avoid() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTSignData.Avoid)
  return _internal_mutable_avoid();
}

// uint32 LuckyChess = 7;
inline void CSDTSignData::clear_luckychess() {
  _impl_.luckychess_ = 0u;
}
inline uint32_t CSDTSignData::_internal_luckychess() const {
  return _impl_.luckychess_;
}
inline uint32_t CSDTSignData::luckychess() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.LuckyChess)
  return _internal_luckychess();
}
inline void CSDTSignData::_internal_set_luckychess(uint32_t value) {
  
  _impl_.luckychess_ = value;
}
inline void CSDTSignData::set_luckychess(uint32_t value) {
  _internal_set_luckychess(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.LuckyChess)
}

// uint32 FortuneProverb = 8;
inline void CSDTSignData::clear_fortuneproverb() {
  _impl_.fortuneproverb_ = 0u;
}
inline uint32_t CSDTSignData::_internal_fortuneproverb() const {
  return _impl_.fortuneproverb_;
}
inline uint32_t CSDTSignData::fortuneproverb() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.FortuneProverb)
  return _internal_fortuneproverb();
}
inline void CSDTSignData::_internal_set_fortuneproverb(uint32_t value) {
  
  _impl_.fortuneproverb_ = value;
}
inline void CSDTSignData::set_fortuneproverb(uint32_t value) {
  _internal_set_fortuneproverb(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.FortuneProverb)
}

// uint32 FitAvoid = 9;
inline void CSDTSignData::clear_fitavoid() {
  _impl_.fitavoid_ = 0u;
}
inline uint32_t CSDTSignData::_internal_fitavoid() const {
  return _impl_.fitavoid_;
}
inline uint32_t CSDTSignData::fitavoid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSignData.FitAvoid)
  return _internal_fitavoid();
}
inline void CSDTSignData::_internal_set_fitavoid(uint32_t value) {
  
  _impl_.fitavoid_ = value;
}
inline void CSDTSignData::set_fitavoid(uint32_t value) {
  _internal_set_fitavoid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSignData.FitAvoid)
}

// -------------------------------------------------------------------

// MatchTeamData

// int32 Id = 1;
inline void MatchTeamData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t MatchTeamData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t MatchTeamData::id() const {
  // @@protoc_insertion_point(field_get:msg.MatchTeamData.Id)
  return _internal_id();
}
inline void MatchTeamData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void MatchTeamData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.MatchTeamData.Id)
}

// int32 Count = 2;
inline void MatchTeamData::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t MatchTeamData::_internal_count() const {
  return _impl_.count_;
}
inline int32_t MatchTeamData::count() const {
  // @@protoc_insertion_point(field_get:msg.MatchTeamData.Count)
  return _internal_count();
}
inline void MatchTeamData::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void MatchTeamData::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.MatchTeamData.Count)
}

// uint32 StartTeamId = 3;
inline void MatchTeamData::clear_startteamid() {
  _impl_.startteamid_ = 0u;
}
inline uint32_t MatchTeamData::_internal_startteamid() const {
  return _impl_.startteamid_;
}
inline uint32_t MatchTeamData::startteamid() const {
  // @@protoc_insertion_point(field_get:msg.MatchTeamData.StartTeamId)
  return _internal_startteamid();
}
inline void MatchTeamData::_internal_set_startteamid(uint32_t value) {
  
  _impl_.startteamid_ = value;
}
inline void MatchTeamData::set_startteamid(uint32_t value) {
  _internal_set_startteamid(value);
  // @@protoc_insertion_point(field_set:msg.MatchTeamData.StartTeamId)
}

// int64 EndTime = 4;
inline void MatchTeamData::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t MatchTeamData::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t MatchTeamData::endtime() const {
  // @@protoc_insertion_point(field_get:msg.MatchTeamData.EndTime)
  return _internal_endtime();
}
inline void MatchTeamData::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void MatchTeamData::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.MatchTeamData.EndTime)
}

// -------------------------------------------------------------------

// CSDTRecommendPlayer

// string Id = 1;
inline void CSDTRecommendPlayer::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTRecommendPlayer::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRecommendPlayer::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.Id)
}
inline std::string* CSDTRecommendPlayer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRecommendPlayer.Id)
  return _s;
}
inline const std::string& CSDTRecommendPlayer::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTRecommendPlayer::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRecommendPlayer::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRecommendPlayer::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTRecommendPlayer.Id)
  return _impl_.id_.Release();
}
inline void CSDTRecommendPlayer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRecommendPlayer.Id)
}

// uint32 Cup = 2;
inline void CSDTRecommendPlayer::clear_cup() {
  _impl_.cup_ = 0u;
}
inline uint32_t CSDTRecommendPlayer::_internal_cup() const {
  return _impl_.cup_;
}
inline uint32_t CSDTRecommendPlayer::cup() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.Cup)
  return _internal_cup();
}
inline void CSDTRecommendPlayer::_internal_set_cup(uint32_t value) {
  
  _impl_.cup_ = value;
}
inline void CSDTRecommendPlayer::set_cup(uint32_t value) {
  _internal_set_cup(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.Cup)
}

// uint32 HeadPic = 3;
inline void CSDTRecommendPlayer::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSDTRecommendPlayer::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSDTRecommendPlayer::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.HeadPic)
  return _internal_headpic();
}
inline void CSDTRecommendPlayer::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSDTRecommendPlayer::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.HeadPic)
}

// string Name = 4;
inline void CSDTRecommendPlayer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CSDTRecommendPlayer::name() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRecommendPlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.Name)
}
inline std::string* CSDTRecommendPlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRecommendPlayer.Name)
  return _s;
}
inline const std::string& CSDTRecommendPlayer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSDTRecommendPlayer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRecommendPlayer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRecommendPlayer::release_name() {
  // @@protoc_insertion_point(field_release:msg.CSDTRecommendPlayer.Name)
  return _impl_.name_.Release();
}
inline void CSDTRecommendPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRecommendPlayer.Name)
}

// uint32 Scene = 5;
inline void CSDTRecommendPlayer::clear_scene() {
  _impl_.scene_ = 0u;
}
inline uint32_t CSDTRecommendPlayer::_internal_scene() const {
  return _impl_.scene_;
}
inline uint32_t CSDTRecommendPlayer::scene() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.Scene)
  return _internal_scene();
}
inline void CSDTRecommendPlayer::_internal_set_scene(uint32_t value) {
  
  _impl_.scene_ = value;
}
inline void CSDTRecommendPlayer::set_scene(uint32_t value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.Scene)
}

// uint32 ChessPlayer = 6;
inline void CSDTRecommendPlayer::clear_chessplayer() {
  _impl_.chessplayer_ = 0u;
}
inline uint32_t CSDTRecommendPlayer::_internal_chessplayer() const {
  return _impl_.chessplayer_;
}
inline uint32_t CSDTRecommendPlayer::chessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.ChessPlayer)
  return _internal_chessplayer();
}
inline void CSDTRecommendPlayer::_internal_set_chessplayer(uint32_t value) {
  
  _impl_.chessplayer_ = value;
}
inline void CSDTRecommendPlayer::set_chessplayer(uint32_t value) {
  _internal_set_chessplayer(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.ChessPlayer)
}

// uint32 RecommendScore = 7;
inline void CSDTRecommendPlayer::clear_recommendscore() {
  _impl_.recommendscore_ = 0u;
}
inline uint32_t CSDTRecommendPlayer::_internal_recommendscore() const {
  return _impl_.recommendscore_;
}
inline uint32_t CSDTRecommendPlayer::recommendscore() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.RecommendScore)
  return _internal_recommendscore();
}
inline void CSDTRecommendPlayer::_internal_set_recommendscore(uint32_t value) {
  
  _impl_.recommendscore_ = value;
}
inline void CSDTRecommendPlayer::set_recommendscore(uint32_t value) {
  _internal_set_recommendscore(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.RecommendScore)
}

// uint32 HeadPicFrame = 8;
inline void CSDTRecommendPlayer::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t CSDTRecommendPlayer::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t CSDTRecommendPlayer::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.HeadPicFrame)
  return _internal_headpicframe();
}
inline void CSDTRecommendPlayer::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void CSDTRecommendPlayer::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.HeadPicFrame)
}

// .msg.OBSERVEPRIVILEGE ObservePrivilege = 9;
inline void CSDTRecommendPlayer::clear_observeprivilege() {
  _impl_.observeprivilege_ = 0;
}
inline ::msg::OBSERVEPRIVILEGE CSDTRecommendPlayer::_internal_observeprivilege() const {
  return static_cast< ::msg::OBSERVEPRIVILEGE >(_impl_.observeprivilege_);
}
inline ::msg::OBSERVEPRIVILEGE CSDTRecommendPlayer::observeprivilege() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.ObservePrivilege)
  return _internal_observeprivilege();
}
inline void CSDTRecommendPlayer::_internal_set_observeprivilege(::msg::OBSERVEPRIVILEGE value) {
  
  _impl_.observeprivilege_ = value;
}
inline void CSDTRecommendPlayer::set_observeprivilege(::msg::OBSERVEPRIVILEGE value) {
  _internal_set_observeprivilege(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.ObservePrivilege)
}

// .msg.PLATFORMTYPE PlatFormType = 10;
inline void CSDTRecommendPlayer::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE CSDTRecommendPlayer::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE CSDTRecommendPlayer::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.PlatFormType)
  return _internal_platformtype();
}
inline void CSDTRecommendPlayer::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void CSDTRecommendPlayer::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.PlatFormType)
}

// bool Ps4Only = 11;
inline void CSDTRecommendPlayer::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool CSDTRecommendPlayer::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool CSDTRecommendPlayer::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.Ps4Only)
  return _internal_ps4only();
}
inline void CSDTRecommendPlayer::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void CSDTRecommendPlayer::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.Ps4Only)
}

// .msg.UserRestrictType RestrictType = 12;
inline void CSDTRecommendPlayer::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType CSDTRecommendPlayer::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType CSDTRecommendPlayer::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPlayer.RestrictType)
  return _internal_restricttype();
}
inline void CSDTRecommendPlayer::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void CSDTRecommendPlayer::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPlayer.RestrictType)
}

// -------------------------------------------------------------------

// CSDTThirdPvpInfo

// uint64 ID = 1;
inline void CSDTThirdPvpInfo::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CSDTThirdPvpInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CSDTThirdPvpInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.ID)
  return _internal_id();
}
inline void CSDTThirdPvpInfo::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTThirdPvpInfo::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.ID)
}

// string Title = 2;
inline void CSDTThirdPvpInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CSDTThirdPvpInfo::title() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTThirdPvpInfo::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.Title)
}
inline std::string* CSDTThirdPvpInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:msg.CSDTThirdPvpInfo.Title)
  return _s;
}
inline const std::string& CSDTThirdPvpInfo::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CSDTThirdPvpInfo::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::release_title() {
  // @@protoc_insertion_point(field_release:msg.CSDTThirdPvpInfo.Title)
  return _impl_.title_.Release();
}
inline void CSDTThirdPvpInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTThirdPvpInfo.Title)
}

// string Content = 3;
inline void CSDTThirdPvpInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSDTThirdPvpInfo::content() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTThirdPvpInfo::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.Content)
}
inline std::string* CSDTThirdPvpInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSDTThirdPvpInfo.Content)
  return _s;
}
inline const std::string& CSDTThirdPvpInfo::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSDTThirdPvpInfo::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSDTThirdPvpInfo.Content)
  return _impl_.content_.Release();
}
inline void CSDTThirdPvpInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTThirdPvpInfo.Content)
}

// string BigPic = 4;
inline void CSDTThirdPvpInfo::clear_bigpic() {
  _impl_.bigpic_.ClearToEmpty();
}
inline const std::string& CSDTThirdPvpInfo::bigpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.BigPic)
  return _internal_bigpic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTThirdPvpInfo::set_bigpic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bigpic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.BigPic)
}
inline std::string* CSDTThirdPvpInfo::mutable_bigpic() {
  std::string* _s = _internal_mutable_bigpic();
  // @@protoc_insertion_point(field_mutable:msg.CSDTThirdPvpInfo.BigPic)
  return _s;
}
inline const std::string& CSDTThirdPvpInfo::_internal_bigpic() const {
  return _impl_.bigpic_.Get();
}
inline void CSDTThirdPvpInfo::_internal_set_bigpic(const std::string& value) {
  
  _impl_.bigpic_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::_internal_mutable_bigpic() {
  
  return _impl_.bigpic_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::release_bigpic() {
  // @@protoc_insertion_point(field_release:msg.CSDTThirdPvpInfo.BigPic)
  return _impl_.bigpic_.Release();
}
inline void CSDTThirdPvpInfo::set_allocated_bigpic(std::string* bigpic) {
  if (bigpic != nullptr) {
    
  } else {
    
  }
  _impl_.bigpic_.SetAllocated(bigpic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bigpic_.IsDefault()) {
    _impl_.bigpic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTThirdPvpInfo.BigPic)
}

// string SmallPic = 5;
inline void CSDTThirdPvpInfo::clear_smallpic() {
  _impl_.smallpic_.ClearToEmpty();
}
inline const std::string& CSDTThirdPvpInfo::smallpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.SmallPic)
  return _internal_smallpic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTThirdPvpInfo::set_smallpic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.smallpic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.SmallPic)
}
inline std::string* CSDTThirdPvpInfo::mutable_smallpic() {
  std::string* _s = _internal_mutable_smallpic();
  // @@protoc_insertion_point(field_mutable:msg.CSDTThirdPvpInfo.SmallPic)
  return _s;
}
inline const std::string& CSDTThirdPvpInfo::_internal_smallpic() const {
  return _impl_.smallpic_.Get();
}
inline void CSDTThirdPvpInfo::_internal_set_smallpic(const std::string& value) {
  
  _impl_.smallpic_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::_internal_mutable_smallpic() {
  
  return _impl_.smallpic_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::release_smallpic() {
  // @@protoc_insertion_point(field_release:msg.CSDTThirdPvpInfo.SmallPic)
  return _impl_.smallpic_.Release();
}
inline void CSDTThirdPvpInfo::set_allocated_smallpic(std::string* smallpic) {
  if (smallpic != nullptr) {
    
  } else {
    
  }
  _impl_.smallpic_.SetAllocated(smallpic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.smallpic_.IsDefault()) {
    _impl_.smallpic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTThirdPvpInfo.SmallPic)
}

// string RecommendIcon = 6;
inline void CSDTThirdPvpInfo::clear_recommendicon() {
  _impl_.recommendicon_.ClearToEmpty();
}
inline const std::string& CSDTThirdPvpInfo::recommendicon() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.RecommendIcon)
  return _internal_recommendicon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTThirdPvpInfo::set_recommendicon(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recommendicon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.RecommendIcon)
}
inline std::string* CSDTThirdPvpInfo::mutable_recommendicon() {
  std::string* _s = _internal_mutable_recommendicon();
  // @@protoc_insertion_point(field_mutable:msg.CSDTThirdPvpInfo.RecommendIcon)
  return _s;
}
inline const std::string& CSDTThirdPvpInfo::_internal_recommendicon() const {
  return _impl_.recommendicon_.Get();
}
inline void CSDTThirdPvpInfo::_internal_set_recommendicon(const std::string& value) {
  
  _impl_.recommendicon_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::_internal_mutable_recommendicon() {
  
  return _impl_.recommendicon_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::release_recommendicon() {
  // @@protoc_insertion_point(field_release:msg.CSDTThirdPvpInfo.RecommendIcon)
  return _impl_.recommendicon_.Release();
}
inline void CSDTThirdPvpInfo::set_allocated_recommendicon(std::string* recommendicon) {
  if (recommendicon != nullptr) {
    
  } else {
    
  }
  _impl_.recommendicon_.SetAllocated(recommendicon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recommendicon_.IsDefault()) {
    _impl_.recommendicon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTThirdPvpInfo.RecommendIcon)
}

// int64 PvpStartTime = 7;
inline void CSDTThirdPvpInfo::clear_pvpstarttime() {
  _impl_.pvpstarttime_ = int64_t{0};
}
inline int64_t CSDTThirdPvpInfo::_internal_pvpstarttime() const {
  return _impl_.pvpstarttime_;
}
inline int64_t CSDTThirdPvpInfo::pvpstarttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.PvpStartTime)
  return _internal_pvpstarttime();
}
inline void CSDTThirdPvpInfo::_internal_set_pvpstarttime(int64_t value) {
  
  _impl_.pvpstarttime_ = value;
}
inline void CSDTThirdPvpInfo::set_pvpstarttime(int64_t value) {
  _internal_set_pvpstarttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.PvpStartTime)
}

// int64 PvpEndTime = 8;
inline void CSDTThirdPvpInfo::clear_pvpendtime() {
  _impl_.pvpendtime_ = int64_t{0};
}
inline int64_t CSDTThirdPvpInfo::_internal_pvpendtime() const {
  return _impl_.pvpendtime_;
}
inline int64_t CSDTThirdPvpInfo::pvpendtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.PvpEndTime)
  return _internal_pvpendtime();
}
inline void CSDTThirdPvpInfo::_internal_set_pvpendtime(int64_t value) {
  
  _impl_.pvpendtime_ = value;
}
inline void CSDTThirdPvpInfo::set_pvpendtime(int64_t value) {
  _internal_set_pvpendtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.PvpEndTime)
}

// string PreShowPic = 9;
inline void CSDTThirdPvpInfo::clear_preshowpic() {
  _impl_.preshowpic_.ClearToEmpty();
}
inline const std::string& CSDTThirdPvpInfo::preshowpic() const {
  // @@protoc_insertion_point(field_get:msg.CSDTThirdPvpInfo.PreShowPic)
  return _internal_preshowpic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTThirdPvpInfo::set_preshowpic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.preshowpic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTThirdPvpInfo.PreShowPic)
}
inline std::string* CSDTThirdPvpInfo::mutable_preshowpic() {
  std::string* _s = _internal_mutable_preshowpic();
  // @@protoc_insertion_point(field_mutable:msg.CSDTThirdPvpInfo.PreShowPic)
  return _s;
}
inline const std::string& CSDTThirdPvpInfo::_internal_preshowpic() const {
  return _impl_.preshowpic_.Get();
}
inline void CSDTThirdPvpInfo::_internal_set_preshowpic(const std::string& value) {
  
  _impl_.preshowpic_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::_internal_mutable_preshowpic() {
  
  return _impl_.preshowpic_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTThirdPvpInfo::release_preshowpic() {
  // @@protoc_insertion_point(field_release:msg.CSDTThirdPvpInfo.PreShowPic)
  return _impl_.preshowpic_.Release();
}
inline void CSDTThirdPvpInfo::set_allocated_preshowpic(std::string* preshowpic) {
  if (preshowpic != nullptr) {
    
  } else {
    
  }
  _impl_.preshowpic_.SetAllocated(preshowpic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preshowpic_.IsDefault()) {
    _impl_.preshowpic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTThirdPvpInfo.PreShowPic)
}

// -------------------------------------------------------------------

// CSDTRecommendPvpInfo

// .msg.CSDTRecommendPlayer PlayerInfo = 1;
inline bool CSDTRecommendPvpInfo::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool CSDTRecommendPvpInfo::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void CSDTRecommendPvpInfo::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::msg::CSDTRecommendPlayer& CSDTRecommendPvpInfo::_internal_playerinfo() const {
  const ::msg::CSDTRecommendPlayer* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTRecommendPlayer&>(
      ::msg::_CSDTRecommendPlayer_default_instance_);
}
inline const ::msg::CSDTRecommendPlayer& CSDTRecommendPvpInfo::playerinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.PlayerInfo)
  return _internal_playerinfo();
}
inline void CSDTRecommendPvpInfo::unsafe_arena_set_allocated_playerinfo(
    ::msg::CSDTRecommendPlayer* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTRecommendPvpInfo.PlayerInfo)
}
inline ::msg::CSDTRecommendPlayer* CSDTRecommendPvpInfo::release_playerinfo() {
  
  ::msg::CSDTRecommendPlayer* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTRecommendPlayer* CSDTRecommendPvpInfo::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:msg.CSDTRecommendPvpInfo.PlayerInfo)
  
  ::msg::CSDTRecommendPlayer* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::msg::CSDTRecommendPlayer* CSDTRecommendPvpInfo::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTRecommendPlayer>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::msg::CSDTRecommendPlayer* CSDTRecommendPvpInfo::mutable_playerinfo() {
  ::msg::CSDTRecommendPlayer* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRecommendPvpInfo.PlayerInfo)
  return _msg;
}
inline void CSDTRecommendPvpInfo::set_allocated_playerinfo(::msg::CSDTRecommendPlayer* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRecommendPvpInfo.PlayerInfo)
}

// uint64 PvpId = 2;
inline void CSDTRecommendPvpInfo::clear_pvpid() {
  _impl_.pvpid_ = uint64_t{0u};
}
inline uint64_t CSDTRecommendPvpInfo::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline uint64_t CSDTRecommendPvpInfo::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.PvpId)
  return _internal_pvpid();
}
inline void CSDTRecommendPvpInfo::_internal_set_pvpid(uint64_t value) {
  
  _impl_.pvpid_ = value;
}
inline void CSDTRecommendPvpInfo::set_pvpid(uint64_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPvpInfo.PvpId)
}

// uint32 ObserveCount = 3;
inline void CSDTRecommendPvpInfo::clear_observecount() {
  _impl_.observecount_ = 0u;
}
inline uint32_t CSDTRecommendPvpInfo::_internal_observecount() const {
  return _impl_.observecount_;
}
inline uint32_t CSDTRecommendPvpInfo::observecount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.ObserveCount)
  return _internal_observecount();
}
inline void CSDTRecommendPvpInfo::_internal_set_observecount(uint32_t value) {
  
  _impl_.observecount_ = value;
}
inline void CSDTRecommendPvpInfo::set_observecount(uint32_t value) {
  _internal_set_observecount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPvpInfo.ObserveCount)
}

// int64 StartTime = 4;
inline void CSDTRecommendPvpInfo::clear_starttime() {
  _impl_.starttime_ = int64_t{0};
}
inline int64_t CSDTRecommendPvpInfo::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int64_t CSDTRecommendPvpInfo::starttime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.StartTime)
  return _internal_starttime();
}
inline void CSDTRecommendPvpInfo::_internal_set_starttime(int64_t value) {
  
  _impl_.starttime_ = value;
}
inline void CSDTRecommendPvpInfo::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPvpInfo.StartTime)
}

// .msg.PVPMODE Mode = 5;
inline void CSDTRecommendPvpInfo::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::msg::PVPMODE CSDTRecommendPvpInfo::_internal_mode() const {
  return static_cast< ::msg::PVPMODE >(_impl_.mode_);
}
inline ::msg::PVPMODE CSDTRecommendPvpInfo::mode() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.Mode)
  return _internal_mode();
}
inline void CSDTRecommendPvpInfo::_internal_set_mode(::msg::PVPMODE value) {
  
  _impl_.mode_ = value;
}
inline void CSDTRecommendPvpInfo::set_mode(::msg::PVPMODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPvpInfo.Mode)
}

// .msg.TournamentDesc Tournament = 6;
inline bool CSDTRecommendPvpInfo::_internal_has_tournament() const {
  return this != internal_default_instance() && _impl_.tournament_ != nullptr;
}
inline bool CSDTRecommendPvpInfo::has_tournament() const {
  return _internal_has_tournament();
}
inline void CSDTRecommendPvpInfo::clear_tournament() {
  if (GetArenaForAllocation() == nullptr && _impl_.tournament_ != nullptr) {
    delete _impl_.tournament_;
  }
  _impl_.tournament_ = nullptr;
}
inline const ::msg::TournamentDesc& CSDTRecommendPvpInfo::_internal_tournament() const {
  const ::msg::TournamentDesc* p = _impl_.tournament_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TournamentDesc&>(
      ::msg::_TournamentDesc_default_instance_);
}
inline const ::msg::TournamentDesc& CSDTRecommendPvpInfo::tournament() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.Tournament)
  return _internal_tournament();
}
inline void CSDTRecommendPvpInfo::unsafe_arena_set_allocated_tournament(
    ::msg::TournamentDesc* tournament) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournament_);
  }
  _impl_.tournament_ = tournament;
  if (tournament) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTRecommendPvpInfo.Tournament)
}
inline ::msg::TournamentDesc* CSDTRecommendPvpInfo::release_tournament() {
  
  ::msg::TournamentDesc* temp = _impl_.tournament_;
  _impl_.tournament_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TournamentDesc* CSDTRecommendPvpInfo::unsafe_arena_release_tournament() {
  // @@protoc_insertion_point(field_release:msg.CSDTRecommendPvpInfo.Tournament)
  
  ::msg::TournamentDesc* temp = _impl_.tournament_;
  _impl_.tournament_ = nullptr;
  return temp;
}
inline ::msg::TournamentDesc* CSDTRecommendPvpInfo::_internal_mutable_tournament() {
  
  if (_impl_.tournament_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TournamentDesc>(GetArenaForAllocation());
    _impl_.tournament_ = p;
  }
  return _impl_.tournament_;
}
inline ::msg::TournamentDesc* CSDTRecommendPvpInfo::mutable_tournament() {
  ::msg::TournamentDesc* _msg = _internal_mutable_tournament();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRecommendPvpInfo.Tournament)
  return _msg;
}
inline void CSDTRecommendPvpInfo::set_allocated_tournament(::msg::TournamentDesc* tournament) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tournament_;
  }
  if (tournament) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tournament);
    if (message_arena != submessage_arena) {
      tournament = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournament, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournament_ = tournament;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRecommendPvpInfo.Tournament)
}

// uint64 ThirdPvpID = 7;
inline void CSDTRecommendPvpInfo::clear_thirdpvpid() {
  _impl_.thirdpvpid_ = uint64_t{0u};
}
inline uint64_t CSDTRecommendPvpInfo::_internal_thirdpvpid() const {
  return _impl_.thirdpvpid_;
}
inline uint64_t CSDTRecommendPvpInfo::thirdpvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.ThirdPvpID)
  return _internal_thirdpvpid();
}
inline void CSDTRecommendPvpInfo::_internal_set_thirdpvpid(uint64_t value) {
  
  _impl_.thirdpvpid_ = value;
}
inline void CSDTRecommendPvpInfo::set_thirdpvpid(uint64_t value) {
  _internal_set_thirdpvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPvpInfo.ThirdPvpID)
}

// uint32 SubMode = 8;
inline void CSDTRecommendPvpInfo::clear_submode() {
  _impl_.submode_ = 0u;
}
inline uint32_t CSDTRecommendPvpInfo::_internal_submode() const {
  return _impl_.submode_;
}
inline uint32_t CSDTRecommendPvpInfo::submode() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.SubMode)
  return _internal_submode();
}
inline void CSDTRecommendPvpInfo::_internal_set_submode(uint32_t value) {
  
  _impl_.submode_ = value;
}
inline void CSDTRecommendPvpInfo::set_submode(uint32_t value) {
  _internal_set_submode(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRecommendPvpInfo.SubMode)
}

// .msg.Authority AuthorityData = 9;
inline bool CSDTRecommendPvpInfo::_internal_has_authoritydata() const {
  return this != internal_default_instance() && _impl_.authoritydata_ != nullptr;
}
inline bool CSDTRecommendPvpInfo::has_authoritydata() const {
  return _internal_has_authoritydata();
}
inline void CSDTRecommendPvpInfo::clear_authoritydata() {
  if (GetArenaForAllocation() == nullptr && _impl_.authoritydata_ != nullptr) {
    delete _impl_.authoritydata_;
  }
  _impl_.authoritydata_ = nullptr;
}
inline const ::msg::Authority& CSDTRecommendPvpInfo::_internal_authoritydata() const {
  const ::msg::Authority* p = _impl_.authoritydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Authority&>(
      ::msg::_Authority_default_instance_);
}
inline const ::msg::Authority& CSDTRecommendPvpInfo::authoritydata() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRecommendPvpInfo.AuthorityData)
  return _internal_authoritydata();
}
inline void CSDTRecommendPvpInfo::unsafe_arena_set_allocated_authoritydata(
    ::msg::Authority* authoritydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authoritydata_);
  }
  _impl_.authoritydata_ = authoritydata;
  if (authoritydata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTRecommendPvpInfo.AuthorityData)
}
inline ::msg::Authority* CSDTRecommendPvpInfo::release_authoritydata() {
  
  ::msg::Authority* temp = _impl_.authoritydata_;
  _impl_.authoritydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Authority* CSDTRecommendPvpInfo::unsafe_arena_release_authoritydata() {
  // @@protoc_insertion_point(field_release:msg.CSDTRecommendPvpInfo.AuthorityData)
  
  ::msg::Authority* temp = _impl_.authoritydata_;
  _impl_.authoritydata_ = nullptr;
  return temp;
}
inline ::msg::Authority* CSDTRecommendPvpInfo::_internal_mutable_authoritydata() {
  
  if (_impl_.authoritydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Authority>(GetArenaForAllocation());
    _impl_.authoritydata_ = p;
  }
  return _impl_.authoritydata_;
}
inline ::msg::Authority* CSDTRecommendPvpInfo::mutable_authoritydata() {
  ::msg::Authority* _msg = _internal_mutable_authoritydata();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRecommendPvpInfo.AuthorityData)
  return _msg;
}
inline void CSDTRecommendPvpInfo::set_allocated_authoritydata(::msg::Authority* authoritydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.authoritydata_;
  }
  if (authoritydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authoritydata);
    if (message_arena != submessage_arena) {
      authoritydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authoritydata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.authoritydata_ = authoritydata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRecommendPvpInfo.AuthorityData)
}

// -------------------------------------------------------------------

// WxVVipData

// uint32 Level = 1;
inline void WxVVipData::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t WxVVipData::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t WxVVipData::level() const {
  // @@protoc_insertion_point(field_get:msg.WxVVipData.Level)
  return _internal_level();
}
inline void WxVVipData::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void WxVVipData::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.WxVVipData.Level)
}

// int64 WeeklyTAwardT = 2;
inline void WxVVipData::clear_weeklytawardt() {
  _impl_.weeklytawardt_ = int64_t{0};
}
inline int64_t WxVVipData::_internal_weeklytawardt() const {
  return _impl_.weeklytawardt_;
}
inline int64_t WxVVipData::weeklytawardt() const {
  // @@protoc_insertion_point(field_get:msg.WxVVipData.WeeklyTAwardT)
  return _internal_weeklytawardt();
}
inline void WxVVipData::_internal_set_weeklytawardt(int64_t value) {
  
  _impl_.weeklytawardt_ = value;
}
inline void WxVVipData::set_weeklytawardt(int64_t value) {
  _internal_set_weeklytawardt(value);
  // @@protoc_insertion_point(field_set:msg.WxVVipData.WeeklyTAwardT)
}

// int64 DailyVAwardT = 3;
inline void WxVVipData::clear_dailyvawardt() {
  _impl_.dailyvawardt_ = int64_t{0};
}
inline int64_t WxVVipData::_internal_dailyvawardt() const {
  return _impl_.dailyvawardt_;
}
inline int64_t WxVVipData::dailyvawardt() const {
  // @@protoc_insertion_point(field_get:msg.WxVVipData.DailyVAwardT)
  return _internal_dailyvawardt();
}
inline void WxVVipData::_internal_set_dailyvawardt(int64_t value) {
  
  _impl_.dailyvawardt_ = value;
}
inline void WxVVipData::set_dailyvawardt(int64_t value) {
  _internal_set_dailyvawardt(value);
  // @@protoc_insertion_point(field_set:msg.WxVVipData.DailyVAwardT)
}

// int64 DailyAwardT = 4;
inline void WxVVipData::clear_dailyawardt() {
  _impl_.dailyawardt_ = int64_t{0};
}
inline int64_t WxVVipData::_internal_dailyawardt() const {
  return _impl_.dailyawardt_;
}
inline int64_t WxVVipData::dailyawardt() const {
  // @@protoc_insertion_point(field_get:msg.WxVVipData.DailyAwardT)
  return _internal_dailyawardt();
}
inline void WxVVipData::_internal_set_dailyawardt(int64_t value) {
  
  _impl_.dailyawardt_ = value;
}
inline void WxVVipData::set_dailyawardt(int64_t value) {
  _internal_set_dailyawardt(value);
  // @@protoc_insertion_point(field_set:msg.WxVVipData.DailyAwardT)
}

// -------------------------------------------------------------------

// CSDTWxRedPktItem

// string RedPktIdx = 1;
inline void CSDTWxRedPktItem::clear_redpktidx() {
  _impl_.redpktidx_.ClearToEmpty();
}
inline const std::string& CSDTWxRedPktItem::redpktidx() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxRedPktItem.RedPktIdx)
  return _internal_redpktidx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTWxRedPktItem::set_redpktidx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redpktidx_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTWxRedPktItem.RedPktIdx)
}
inline std::string* CSDTWxRedPktItem::mutable_redpktidx() {
  std::string* _s = _internal_mutable_redpktidx();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWxRedPktItem.RedPktIdx)
  return _s;
}
inline const std::string& CSDTWxRedPktItem::_internal_redpktidx() const {
  return _impl_.redpktidx_.Get();
}
inline void CSDTWxRedPktItem::_internal_set_redpktidx(const std::string& value) {
  
  _impl_.redpktidx_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTWxRedPktItem::_internal_mutable_redpktidx() {
  
  return _impl_.redpktidx_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTWxRedPktItem::release_redpktidx() {
  // @@protoc_insertion_point(field_release:msg.CSDTWxRedPktItem.RedPktIdx)
  return _impl_.redpktidx_.Release();
}
inline void CSDTWxRedPktItem::set_allocated_redpktidx(std::string* redpktidx) {
  if (redpktidx != nullptr) {
    
  } else {
    
  }
  _impl_.redpktidx_.SetAllocated(redpktidx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redpktidx_.IsDefault()) {
    _impl_.redpktidx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWxRedPktItem.RedPktIdx)
}

// uint32 RedPktId = 2;
inline void CSDTWxRedPktItem::clear_redpktid() {
  _impl_.redpktid_ = 0u;
}
inline uint32_t CSDTWxRedPktItem::_internal_redpktid() const {
  return _impl_.redpktid_;
}
inline uint32_t CSDTWxRedPktItem::redpktid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxRedPktItem.RedPktId)
  return _internal_redpktid();
}
inline void CSDTWxRedPktItem::_internal_set_redpktid(uint32_t value) {
  
  _impl_.redpktid_ = value;
}
inline void CSDTWxRedPktItem::set_redpktid(uint32_t value) {
  _internal_set_redpktid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWxRedPktItem.RedPktId)
}

// -------------------------------------------------------------------

// CSDTWxRedPktProfile

// uint32 SelfRank = 1;
inline void CSDTWxRedPktProfile::clear_selfrank() {
  _impl_.selfrank_ = 0u;
}
inline uint32_t CSDTWxRedPktProfile::_internal_selfrank() const {
  return _impl_.selfrank_;
}
inline uint32_t CSDTWxRedPktProfile::selfrank() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxRedPktProfile.SelfRank)
  return _internal_selfrank();
}
inline void CSDTWxRedPktProfile::_internal_set_selfrank(uint32_t value) {
  
  _impl_.selfrank_ = value;
}
inline void CSDTWxRedPktProfile::set_selfrank(uint32_t value) {
  _internal_set_selfrank(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWxRedPktProfile.SelfRank)
}

// uint32 SelfLike = 2;
inline void CSDTWxRedPktProfile::clear_selflike() {
  _impl_.selflike_ = 0u;
}
inline uint32_t CSDTWxRedPktProfile::_internal_selflike() const {
  return _impl_.selflike_;
}
inline uint32_t CSDTWxRedPktProfile::selflike() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxRedPktProfile.SelfLike)
  return _internal_selflike();
}
inline void CSDTWxRedPktProfile::_internal_set_selflike(uint32_t value) {
  
  _impl_.selflike_ = value;
}
inline void CSDTWxRedPktProfile::set_selflike(uint32_t value) {
  _internal_set_selflike(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWxRedPktProfile.SelfLike)
}

// -------------------------------------------------------------------

// CSDTWxVVipRankItem

// string UId = 1;
inline void CSDTWxVVipRankItem::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& CSDTWxVVipRankItem::uid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxVVipRankItem.UId)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTWxVVipRankItem::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTWxVVipRankItem.UId)
}
inline std::string* CSDTWxVVipRankItem::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWxVVipRankItem.UId)
  return _s;
}
inline const std::string& CSDTWxVVipRankItem::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void CSDTWxVVipRankItem::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTWxVVipRankItem::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTWxVVipRankItem::release_uid() {
  // @@protoc_insertion_point(field_release:msg.CSDTWxVVipRankItem.UId)
  return _impl_.uid_.Release();
}
inline void CSDTWxVVipRankItem::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWxVVipRankItem.UId)
}

// string Name = 2;
inline void CSDTWxVVipRankItem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CSDTWxVVipRankItem::name() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxVVipRankItem.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTWxVVipRankItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTWxVVipRankItem.Name)
}
inline std::string* CSDTWxVVipRankItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.CSDTWxVVipRankItem.Name)
  return _s;
}
inline const std::string& CSDTWxVVipRankItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSDTWxVVipRankItem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTWxVVipRankItem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTWxVVipRankItem::release_name() {
  // @@protoc_insertion_point(field_release:msg.CSDTWxVVipRankItem.Name)
  return _impl_.name_.Release();
}
inline void CSDTWxVVipRankItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTWxVVipRankItem.Name)
}

// uint32 VLvl = 3;
inline void CSDTWxVVipRankItem::clear_vlvl() {
  _impl_.vlvl_ = 0u;
}
inline uint32_t CSDTWxVVipRankItem::_internal_vlvl() const {
  return _impl_.vlvl_;
}
inline uint32_t CSDTWxVVipRankItem::vlvl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxVVipRankItem.VLvl)
  return _internal_vlvl();
}
inline void CSDTWxVVipRankItem::_internal_set_vlvl(uint32_t value) {
  
  _impl_.vlvl_ = value;
}
inline void CSDTWxVVipRankItem::set_vlvl(uint32_t value) {
  _internal_set_vlvl(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWxVVipRankItem.VLvl)
}

// uint32 Likes = 4;
inline void CSDTWxVVipRankItem::clear_likes() {
  _impl_.likes_ = 0u;
}
inline uint32_t CSDTWxVVipRankItem::_internal_likes() const {
  return _impl_.likes_;
}
inline uint32_t CSDTWxVVipRankItem::likes() const {
  // @@protoc_insertion_point(field_get:msg.CSDTWxVVipRankItem.Likes)
  return _internal_likes();
}
inline void CSDTWxVVipRankItem::_internal_set_likes(uint32_t value) {
  
  _impl_.likes_ = value;
}
inline void CSDTWxVVipRankItem::set_likes(uint32_t value) {
  _internal_set_likes(value);
  // @@protoc_insertion_point(field_set:msg.CSDTWxVVipRankItem.Likes)
}

// -------------------------------------------------------------------

// CSDTSlotInfo

// string Id = 1;
inline void CSDTSlotInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSDTSlotInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSlotInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTSlotInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTSlotInfo.Id)
}
inline std::string* CSDTSlotInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSDTSlotInfo.Id)
  return _s;
}
inline const std::string& CSDTSlotInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSDTSlotInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTSlotInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTSlotInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSDTSlotInfo.Id)
  return _impl_.id_.Release();
}
inline void CSDTSlotInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTSlotInfo.Id)
}

// uint32 Slot = 2;
inline void CSDTSlotInfo::clear_slot() {
  _impl_.slot_ = 0u;
}
inline uint32_t CSDTSlotInfo::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t CSDTSlotInfo::slot() const {
  // @@protoc_insertion_point(field_get:msg.CSDTSlotInfo.Slot)
  return _internal_slot();
}
inline void CSDTSlotInfo::_internal_set_slot(uint32_t value) {
  
  _impl_.slot_ = value;
}
inline void CSDTSlotInfo::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:msg.CSDTSlotInfo.Slot)
}

// -------------------------------------------------------------------

// CSDTRedPktData

// string UId = 1;
inline void CSDTRedPktData::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& CSDTRedPktData::uid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRedPktData.UId)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRedPktData::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRedPktData.UId)
}
inline std::string* CSDTRedPktData::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRedPktData.UId)
  return _s;
}
inline const std::string& CSDTRedPktData::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void CSDTRedPktData::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRedPktData::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRedPktData::release_uid() {
  // @@protoc_insertion_point(field_release:msg.CSDTRedPktData.UId)
  return _impl_.uid_.Release();
}
inline void CSDTRedPktData::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRedPktData.UId)
}

// string Name = 2;
inline void CSDTRedPktData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CSDTRedPktData::name() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRedPktData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTRedPktData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTRedPktData.Name)
}
inline std::string* CSDTRedPktData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.CSDTRedPktData.Name)
  return _s;
}
inline const std::string& CSDTRedPktData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSDTRedPktData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTRedPktData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTRedPktData::release_name() {
  // @@protoc_insertion_point(field_release:msg.CSDTRedPktData.Name)
  return _impl_.name_.Release();
}
inline void CSDTRedPktData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTRedPktData.Name)
}

// uint32 Award = 3;
inline void CSDTRedPktData::clear_award() {
  _impl_.award_ = 0u;
}
inline uint32_t CSDTRedPktData::_internal_award() const {
  return _impl_.award_;
}
inline uint32_t CSDTRedPktData::award() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRedPktData.Award)
  return _internal_award();
}
inline void CSDTRedPktData::_internal_set_award(uint32_t value) {
  
  _impl_.award_ = value;
}
inline void CSDTRedPktData::set_award(uint32_t value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRedPktData.Award)
}

// -------------------------------------------------------------------

// CSDTRedPktInfo

// uint32 RedPktId = 1;
inline void CSDTRedPktInfo::clear_redpktid() {
  _impl_.redpktid_ = 0u;
}
inline uint32_t CSDTRedPktInfo::_internal_redpktid() const {
  return _impl_.redpktid_;
}
inline uint32_t CSDTRedPktInfo::redpktid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRedPktInfo.RedPktId)
  return _internal_redpktid();
}
inline void CSDTRedPktInfo::_internal_set_redpktid(uint32_t value) {
  
  _impl_.redpktid_ = value;
}
inline void CSDTRedPktInfo::set_redpktid(uint32_t value) {
  _internal_set_redpktid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRedPktInfo.RedPktId)
}

// int64 RankVer = 2;
inline void CSDTRedPktInfo::clear_rankver() {
  _impl_.rankver_ = int64_t{0};
}
inline int64_t CSDTRedPktInfo::_internal_rankver() const {
  return _impl_.rankver_;
}
inline int64_t CSDTRedPktInfo::rankver() const {
  // @@protoc_insertion_point(field_get:msg.CSDTRedPktInfo.RankVer)
  return _internal_rankver();
}
inline void CSDTRedPktInfo::_internal_set_rankver(int64_t value) {
  
  _impl_.rankver_ = value;
}
inline void CSDTRedPktInfo::set_rankver(int64_t value) {
  _internal_set_rankver(value);
  // @@protoc_insertion_point(field_set:msg.CSDTRedPktInfo.RankVer)
}

// repeated .msg.CSDTRedPktData Rank = 3;
inline int CSDTRedPktInfo::_internal_rank_size() const {
  return _impl_.rank_.size();
}
inline int CSDTRedPktInfo::rank_size() const {
  return _internal_rank_size();
}
inline void CSDTRedPktInfo::clear_rank() {
  _impl_.rank_.Clear();
}
inline ::msg::CSDTRedPktData* CSDTRedPktInfo::mutable_rank(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTRedPktInfo.Rank)
  return _impl_.rank_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRedPktData >*
CSDTRedPktInfo::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTRedPktInfo.Rank)
  return &_impl_.rank_;
}
inline const ::msg::CSDTRedPktData& CSDTRedPktInfo::_internal_rank(int index) const {
  return _impl_.rank_.Get(index);
}
inline const ::msg::CSDTRedPktData& CSDTRedPktInfo::rank(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTRedPktInfo.Rank)
  return _internal_rank(index);
}
inline ::msg::CSDTRedPktData* CSDTRedPktInfo::_internal_add_rank() {
  return _impl_.rank_.Add();
}
inline ::msg::CSDTRedPktData* CSDTRedPktInfo::add_rank() {
  ::msg::CSDTRedPktData* _add = _internal_add_rank();
  // @@protoc_insertion_point(field_add:msg.CSDTRedPktInfo.Rank)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTRedPktData >&
CSDTRedPktInfo::rank() const {
  // @@protoc_insertion_point(field_list:msg.CSDTRedPktInfo.Rank)
  return _impl_.rank_;
}

// -------------------------------------------------------------------

// SwitchItem

// .msg.SWITCHTYPE SwitchType = 1;
inline void SwitchItem::clear_switchtype() {
  _impl_.switchtype_ = 0;
}
inline ::msg::SWITCHTYPE SwitchItem::_internal_switchtype() const {
  return static_cast< ::msg::SWITCHTYPE >(_impl_.switchtype_);
}
inline ::msg::SWITCHTYPE SwitchItem::switchtype() const {
  // @@protoc_insertion_point(field_get:msg.SwitchItem.SwitchType)
  return _internal_switchtype();
}
inline void SwitchItem::_internal_set_switchtype(::msg::SWITCHTYPE value) {
  
  _impl_.switchtype_ = value;
}
inline void SwitchItem::set_switchtype(::msg::SWITCHTYPE value) {
  _internal_set_switchtype(value);
  // @@protoc_insertion_point(field_set:msg.SwitchItem.SwitchType)
}

// bool Forbid = 2;
inline void SwitchItem::clear_forbid() {
  _impl_.forbid_ = false;
}
inline bool SwitchItem::_internal_forbid() const {
  return _impl_.forbid_;
}
inline bool SwitchItem::forbid() const {
  // @@protoc_insertion_point(field_get:msg.SwitchItem.Forbid)
  return _internal_forbid();
}
inline void SwitchItem::_internal_set_forbid(bool value) {
  
  _impl_.forbid_ = value;
}
inline void SwitchItem::set_forbid(bool value) {
  _internal_set_forbid(value);
  // @@protoc_insertion_point(field_set:msg.SwitchItem.Forbid)
}

// int64 EndTime = 3;
inline void SwitchItem::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t SwitchItem::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t SwitchItem::endtime() const {
  // @@protoc_insertion_point(field_get:msg.SwitchItem.EndTime)
  return _internal_endtime();
}
inline void SwitchItem::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void SwitchItem::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.SwitchItem.EndTime)
}

// -------------------------------------------------------------------

// CreditCfgItem

// int32 ActId = 1;
inline void CreditCfgItem::clear_actid() {
  _impl_.actid_ = 0;
}
inline int32_t CreditCfgItem::_internal_actid() const {
  return _impl_.actid_;
}
inline int32_t CreditCfgItem::actid() const {
  // @@protoc_insertion_point(field_get:msg.CreditCfgItem.ActId)
  return _internal_actid();
}
inline void CreditCfgItem::_internal_set_actid(int32_t value) {
  
  _impl_.actid_ = value;
}
inline void CreditCfgItem::set_actid(int32_t value) {
  _internal_set_actid(value);
  // @@protoc_insertion_point(field_set:msg.CreditCfgItem.ActId)
}

// int32 ThresholdHi = 2;
inline void CreditCfgItem::clear_thresholdhi() {
  _impl_.thresholdhi_ = 0;
}
inline int32_t CreditCfgItem::_internal_thresholdhi() const {
  return _impl_.thresholdhi_;
}
inline int32_t CreditCfgItem::thresholdhi() const {
  // @@protoc_insertion_point(field_get:msg.CreditCfgItem.ThresholdHi)
  return _internal_thresholdhi();
}
inline void CreditCfgItem::_internal_set_thresholdhi(int32_t value) {
  
  _impl_.thresholdhi_ = value;
}
inline void CreditCfgItem::set_thresholdhi(int32_t value) {
  _internal_set_thresholdhi(value);
  // @@protoc_insertion_point(field_set:msg.CreditCfgItem.ThresholdHi)
}

// int32 ThresholdLo = 3;
inline void CreditCfgItem::clear_thresholdlo() {
  _impl_.thresholdlo_ = 0;
}
inline int32_t CreditCfgItem::_internal_thresholdlo() const {
  return _impl_.thresholdlo_;
}
inline int32_t CreditCfgItem::thresholdlo() const {
  // @@protoc_insertion_point(field_get:msg.CreditCfgItem.ThresholdLo)
  return _internal_thresholdlo();
}
inline void CreditCfgItem::_internal_set_thresholdlo(int32_t value) {
  
  _impl_.thresholdlo_ = value;
}
inline void CreditCfgItem::set_thresholdlo(int32_t value) {
  _internal_set_thresholdlo(value);
  // @@protoc_insertion_point(field_set:msg.CreditCfgItem.ThresholdLo)
}

// int32 LimitLv = 4;
inline void CreditCfgItem::clear_limitlv() {
  _impl_.limitlv_ = 0;
}
inline int32_t CreditCfgItem::_internal_limitlv() const {
  return _impl_.limitlv_;
}
inline int32_t CreditCfgItem::limitlv() const {
  // @@protoc_insertion_point(field_get:msg.CreditCfgItem.LimitLv)
  return _internal_limitlv();
}
inline void CreditCfgItem::_internal_set_limitlv(int32_t value) {
  
  _impl_.limitlv_ = value;
}
inline void CreditCfgItem::set_limitlv(int32_t value) {
  _internal_set_limitlv(value);
  // @@protoc_insertion_point(field_set:msg.CreditCfgItem.LimitLv)
}

// -------------------------------------------------------------------

// CSDTPunishment

// uint32 Id = 1;
inline void CSDTPunishment::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTPunishment::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTPunishment::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPunishment.Id)
  return _internal_id();
}
inline void CSDTPunishment::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTPunishment::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPunishment.Id)
}

// repeated .msg.PUNISHMENTTYPE Types = 2;
inline int CSDTPunishment::_internal_types_size() const {
  return _impl_.types_.size();
}
inline int CSDTPunishment::types_size() const {
  return _internal_types_size();
}
inline void CSDTPunishment::clear_types() {
  _impl_.types_.Clear();
}
inline ::msg::PUNISHMENTTYPE CSDTPunishment::_internal_types(int index) const {
  return static_cast< ::msg::PUNISHMENTTYPE >(_impl_.types_.Get(index));
}
inline ::msg::PUNISHMENTTYPE CSDTPunishment::types(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPunishment.Types)
  return _internal_types(index);
}
inline void CSDTPunishment::set_types(int index, ::msg::PUNISHMENTTYPE value) {
  _impl_.types_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPunishment.Types)
}
inline void CSDTPunishment::_internal_add_types(::msg::PUNISHMENTTYPE value) {
  _impl_.types_.Add(value);
}
inline void CSDTPunishment::add_types(::msg::PUNISHMENTTYPE value) {
  _internal_add_types(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPunishment.Types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSDTPunishment::types() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPunishment.Types)
  return _impl_.types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTPunishment::_internal_mutable_types() {
  return &_impl_.types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTPunishment::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPunishment.Types)
  return _internal_mutable_types();
}

// int64 ExecuteDeadline = 3;
inline void CSDTPunishment::clear_executedeadline() {
  _impl_.executedeadline_ = int64_t{0};
}
inline int64_t CSDTPunishment::_internal_executedeadline() const {
  return _impl_.executedeadline_;
}
inline int64_t CSDTPunishment::executedeadline() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPunishment.ExecuteDeadline)
  return _internal_executedeadline();
}
inline void CSDTPunishment::_internal_set_executedeadline(int64_t value) {
  
  _impl_.executedeadline_ = value;
}
inline void CSDTPunishment::set_executedeadline(int64_t value) {
  _internal_set_executedeadline(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPunishment.ExecuteDeadline)
}

// repeated .msg.PUNISHMENTBEHAVIOR Triggers = 4;
inline int CSDTPunishment::_internal_triggers_size() const {
  return _impl_.triggers_.size();
}
inline int CSDTPunishment::triggers_size() const {
  return _internal_triggers_size();
}
inline void CSDTPunishment::clear_triggers() {
  _impl_.triggers_.Clear();
}
inline ::msg::PUNISHMENTBEHAVIOR CSDTPunishment::_internal_triggers(int index) const {
  return static_cast< ::msg::PUNISHMENTBEHAVIOR >(_impl_.triggers_.Get(index));
}
inline ::msg::PUNISHMENTBEHAVIOR CSDTPunishment::triggers(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPunishment.Triggers)
  return _internal_triggers(index);
}
inline void CSDTPunishment::set_triggers(int index, ::msg::PUNISHMENTBEHAVIOR value) {
  _impl_.triggers_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPunishment.Triggers)
}
inline void CSDTPunishment::_internal_add_triggers(::msg::PUNISHMENTBEHAVIOR value) {
  _impl_.triggers_.Add(value);
}
inline void CSDTPunishment::add_triggers(::msg::PUNISHMENTBEHAVIOR value) {
  _internal_add_triggers(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPunishment.Triggers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSDTPunishment::triggers() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPunishment.Triggers)
  return _impl_.triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTPunishment::_internal_mutable_triggers() {
  return &_impl_.triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTPunishment::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPunishment.Triggers)
  return _internal_mutable_triggers();
}

// -------------------------------------------------------------------

// CSDTPlayer

// string PlayerId = 1;
inline void CSDTPlayer::clear_playerid() {
  _impl_.playerid_.ClearToEmpty();
}
inline const std::string& CSDTPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayer.PlayerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayer::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayer.PlayerId)
}
inline std::string* CSDTPlayer::mutable_playerid() {
  std::string* _s = _internal_mutable_playerid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayer.PlayerId)
  return _s;
}
inline const std::string& CSDTPlayer::_internal_playerid() const {
  return _impl_.playerid_.Get();
}
inline void CSDTPlayer::_internal_set_playerid(const std::string& value) {
  
  _impl_.playerid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayer::_internal_mutable_playerid() {
  
  return _impl_.playerid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayer::release_playerid() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayer.PlayerId)
  return _impl_.playerid_.Release();
}
inline void CSDTPlayer::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  _impl_.playerid_.SetAllocated(playerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerid_.IsDefault()) {
    _impl_.playerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayer.PlayerId)
}

// string UserName = 2;
inline void CSDTPlayer::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& CSDTPlayer::username() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayer.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTPlayer::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTPlayer.UserName)
}
inline std::string* CSDTPlayer::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayer.UserName)
  return _s;
}
inline const std::string& CSDTPlayer::_internal_username() const {
  return _impl_.username_.Get();
}
inline void CSDTPlayer::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTPlayer::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTPlayer::release_username() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayer.UserName)
  return _impl_.username_.Release();
}
inline void CSDTPlayer::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayer.UserName)
}

// -------------------------------------------------------------------

// CSDTBriefPunishment

// repeated .msg.CSDTPlayer UserName = 1;
inline int CSDTBriefPunishment::_internal_username_size() const {
  return _impl_.username_.size();
}
inline int CSDTBriefPunishment::username_size() const {
  return _internal_username_size();
}
inline void CSDTBriefPunishment::clear_username() {
  _impl_.username_.Clear();
}
inline ::msg::CSDTPlayer* CSDTBriefPunishment::mutable_username(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTBriefPunishment.UserName)
  return _impl_.username_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPlayer >*
CSDTBriefPunishment::mutable_username() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBriefPunishment.UserName)
  return &_impl_.username_;
}
inline const ::msg::CSDTPlayer& CSDTBriefPunishment::_internal_username(int index) const {
  return _impl_.username_.Get(index);
}
inline const ::msg::CSDTPlayer& CSDTBriefPunishment::username(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBriefPunishment.UserName)
  return _internal_username(index);
}
inline ::msg::CSDTPlayer* CSDTBriefPunishment::_internal_add_username() {
  return _impl_.username_.Add();
}
inline ::msg::CSDTPlayer* CSDTBriefPunishment::add_username() {
  ::msg::CSDTPlayer* _add = _internal_add_username();
  // @@protoc_insertion_point(field_add:msg.CSDTBriefPunishment.UserName)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTPlayer >&
CSDTBriefPunishment::username() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBriefPunishment.UserName)
  return _impl_.username_;
}

// int64 PunishmentDeadline = 2;
inline void CSDTBriefPunishment::clear_punishmentdeadline() {
  _impl_.punishmentdeadline_ = int64_t{0};
}
inline int64_t CSDTBriefPunishment::_internal_punishmentdeadline() const {
  return _impl_.punishmentdeadline_;
}
inline int64_t CSDTBriefPunishment::punishmentdeadline() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBriefPunishment.PunishmentDeadline)
  return _internal_punishmentdeadline();
}
inline void CSDTBriefPunishment::_internal_set_punishmentdeadline(int64_t value) {
  
  _impl_.punishmentdeadline_ = value;
}
inline void CSDTBriefPunishment::set_punishmentdeadline(int64_t value) {
  _internal_set_punishmentdeadline(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBriefPunishment.PunishmentDeadline)
}

// -------------------------------------------------------------------

// PlayerConfirmInfo

// string PlayerId = 1;
inline void PlayerConfirmInfo::clear_playerid() {
  _impl_.playerid_.ClearToEmpty();
}
inline const std::string& PlayerConfirmInfo::playerid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerConfirmInfo.PlayerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerConfirmInfo::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerConfirmInfo.PlayerId)
}
inline std::string* PlayerConfirmInfo::mutable_playerid() {
  std::string* _s = _internal_mutable_playerid();
  // @@protoc_insertion_point(field_mutable:msg.PlayerConfirmInfo.PlayerId)
  return _s;
}
inline const std::string& PlayerConfirmInfo::_internal_playerid() const {
  return _impl_.playerid_.Get();
}
inline void PlayerConfirmInfo::_internal_set_playerid(const std::string& value) {
  
  _impl_.playerid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerConfirmInfo::_internal_mutable_playerid() {
  
  return _impl_.playerid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerConfirmInfo::release_playerid() {
  // @@protoc_insertion_point(field_release:msg.PlayerConfirmInfo.PlayerId)
  return _impl_.playerid_.Release();
}
inline void PlayerConfirmInfo::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  _impl_.playerid_.SetAllocated(playerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerid_.IsDefault()) {
    _impl_.playerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerConfirmInfo.PlayerId)
}

// uint32 HeadPic = 2;
inline void PlayerConfirmInfo::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t PlayerConfirmInfo::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t PlayerConfirmInfo::headpic() const {
  // @@protoc_insertion_point(field_get:msg.PlayerConfirmInfo.HeadPic)
  return _internal_headpic();
}
inline void PlayerConfirmInfo::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void PlayerConfirmInfo::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.PlayerConfirmInfo.HeadPic)
}

// uint32 HeadPicFrame = 3;
inline void PlayerConfirmInfo::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t PlayerConfirmInfo::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t PlayerConfirmInfo::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.PlayerConfirmInfo.HeadPicFrame)
  return _internal_headpicframe();
}
inline void PlayerConfirmInfo::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void PlayerConfirmInfo::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.PlayerConfirmInfo.HeadPicFrame)
}

// string UserName = 4;
inline void PlayerConfirmInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PlayerConfirmInfo::username() const {
  // @@protoc_insertion_point(field_get:msg.PlayerConfirmInfo.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerConfirmInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerConfirmInfo.UserName)
}
inline std::string* PlayerConfirmInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:msg.PlayerConfirmInfo.UserName)
  return _s;
}
inline const std::string& PlayerConfirmInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void PlayerConfirmInfo::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerConfirmInfo::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerConfirmInfo::release_username() {
  // @@protoc_insertion_point(field_release:msg.PlayerConfirmInfo.UserName)
  return _impl_.username_.Release();
}
inline void PlayerConfirmInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerConfirmInfo.UserName)
}

// bool IsRobot = 5;
inline void PlayerConfirmInfo::clear_isrobot() {
  _impl_.isrobot_ = false;
}
inline bool PlayerConfirmInfo::_internal_isrobot() const {
  return _impl_.isrobot_;
}
inline bool PlayerConfirmInfo::isrobot() const {
  // @@protoc_insertion_point(field_get:msg.PlayerConfirmInfo.IsRobot)
  return _internal_isrobot();
}
inline void PlayerConfirmInfo::_internal_set_isrobot(bool value) {
  
  _impl_.isrobot_ = value;
}
inline void PlayerConfirmInfo::set_isrobot(bool value) {
  _internal_set_isrobot(value);
  // @@protoc_insertion_point(field_set:msg.PlayerConfirmInfo.IsRobot)
}

// -------------------------------------------------------------------

// AnswerData

// uint32 Index = 1;
inline void AnswerData::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t AnswerData::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t AnswerData::index() const {
  // @@protoc_insertion_point(field_get:msg.AnswerData.Index)
  return _internal_index();
}
inline void AnswerData::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void AnswerData::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.AnswerData.Index)
}

// repeated string Contents = 2;
inline int AnswerData::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int AnswerData::contents_size() const {
  return _internal_contents_size();
}
inline void AnswerData::clear_contents() {
  _impl_.contents_.Clear();
}
inline std::string* AnswerData::add_contents() {
  std::string* _s = _internal_add_contents();
  // @@protoc_insertion_point(field_add_mutable:msg.AnswerData.Contents)
  return _s;
}
inline const std::string& AnswerData::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const std::string& AnswerData::contents(int index) const {
  // @@protoc_insertion_point(field_get:msg.AnswerData.Contents)
  return _internal_contents(index);
}
inline std::string* AnswerData::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:msg.AnswerData.Contents)
  return _impl_.contents_.Mutable(index);
}
inline void AnswerData::set_contents(int index, const std::string& value) {
  _impl_.contents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.AnswerData.Contents)
}
inline void AnswerData::set_contents(int index, std::string&& value) {
  _impl_.contents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.AnswerData.Contents)
}
inline void AnswerData::set_contents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.contents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.AnswerData.Contents)
}
inline void AnswerData::set_contents(int index, const char* value, size_t size) {
  _impl_.contents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.AnswerData.Contents)
}
inline std::string* AnswerData::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline void AnswerData::add_contents(const std::string& value) {
  _impl_.contents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.AnswerData.Contents)
}
inline void AnswerData::add_contents(std::string&& value) {
  _impl_.contents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.AnswerData.Contents)
}
inline void AnswerData::add_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.contents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.AnswerData.Contents)
}
inline void AnswerData::add_contents(const char* value, size_t size) {
  _impl_.contents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.AnswerData.Contents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnswerData::contents() const {
  // @@protoc_insertion_point(field_list:msg.AnswerData.Contents)
  return _impl_.contents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnswerData::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:msg.AnswerData.Contents)
  return &_impl_.contents_;
}

// -------------------------------------------------------------------

// VideoInfo

// uint32 Id = 1;
inline void VideoInfo::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t VideoInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t VideoInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.VideoInfo.Id)
  return _internal_id();
}
inline void VideoInfo::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void VideoInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.VideoInfo.Id)
}

// string Name = 2;
inline void VideoInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VideoInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.VideoInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.VideoInfo.Name)
}
inline std::string* VideoInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.VideoInfo.Name)
  return _s;
}
inline const std::string& VideoInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VideoInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.VideoInfo.Name)
  return _impl_.name_.Release();
}
inline void VideoInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.VideoInfo.Name)
}

// .msg.VIDEO_TYPE Type = 3;
inline void VideoInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::VIDEO_TYPE VideoInfo::_internal_type() const {
  return static_cast< ::msg::VIDEO_TYPE >(_impl_.type_);
}
inline ::msg::VIDEO_TYPE VideoInfo::type() const {
  // @@protoc_insertion_point(field_get:msg.VideoInfo.Type)
  return _internal_type();
}
inline void VideoInfo::_internal_set_type(::msg::VIDEO_TYPE value) {
  
  _impl_.type_ = value;
}
inline void VideoInfo::set_type(::msg::VIDEO_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.VideoInfo.Type)
}

// string PicUrl = 4;
inline void VideoInfo::clear_picurl() {
  _impl_.picurl_.ClearToEmpty();
}
inline const std::string& VideoInfo::picurl() const {
  // @@protoc_insertion_point(field_get:msg.VideoInfo.PicUrl)
  return _internal_picurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoInfo::set_picurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.VideoInfo.PicUrl)
}
inline std::string* VideoInfo::mutable_picurl() {
  std::string* _s = _internal_mutable_picurl();
  // @@protoc_insertion_point(field_mutable:msg.VideoInfo.PicUrl)
  return _s;
}
inline const std::string& VideoInfo::_internal_picurl() const {
  return _impl_.picurl_.Get();
}
inline void VideoInfo::_internal_set_picurl(const std::string& value) {
  
  _impl_.picurl_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoInfo::_internal_mutable_picurl() {
  
  return _impl_.picurl_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoInfo::release_picurl() {
  // @@protoc_insertion_point(field_release:msg.VideoInfo.PicUrl)
  return _impl_.picurl_.Release();
}
inline void VideoInfo::set_allocated_picurl(std::string* picurl) {
  if (picurl != nullptr) {
    
  } else {
    
  }
  _impl_.picurl_.SetAllocated(picurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picurl_.IsDefault()) {
    _impl_.picurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.VideoInfo.PicUrl)
}

// string ContentUrl = 5;
inline void VideoInfo::clear_contenturl() {
  _impl_.contenturl_.ClearToEmpty();
}
inline const std::string& VideoInfo::contenturl() const {
  // @@protoc_insertion_point(field_get:msg.VideoInfo.ContentUrl)
  return _internal_contenturl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoInfo::set_contenturl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contenturl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.VideoInfo.ContentUrl)
}
inline std::string* VideoInfo::mutable_contenturl() {
  std::string* _s = _internal_mutable_contenturl();
  // @@protoc_insertion_point(field_mutable:msg.VideoInfo.ContentUrl)
  return _s;
}
inline const std::string& VideoInfo::_internal_contenturl() const {
  return _impl_.contenturl_.Get();
}
inline void VideoInfo::_internal_set_contenturl(const std::string& value) {
  
  _impl_.contenturl_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoInfo::_internal_mutable_contenturl() {
  
  return _impl_.contenturl_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoInfo::release_contenturl() {
  // @@protoc_insertion_point(field_release:msg.VideoInfo.ContentUrl)
  return _impl_.contenturl_.Release();
}
inline void VideoInfo::set_allocated_contenturl(std::string* contenturl) {
  if (contenturl != nullptr) {
    
  } else {
    
  }
  _impl_.contenturl_.SetAllocated(contenturl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contenturl_.IsDefault()) {
    _impl_.contenturl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.VideoInfo.ContentUrl)
}

// bool LanguageKey = 6;
inline void VideoInfo::clear_languagekey() {
  _impl_.languagekey_ = false;
}
inline bool VideoInfo::_internal_languagekey() const {
  return _impl_.languagekey_;
}
inline bool VideoInfo::languagekey() const {
  // @@protoc_insertion_point(field_get:msg.VideoInfo.LanguageKey)
  return _internal_languagekey();
}
inline void VideoInfo::_internal_set_languagekey(bool value) {
  
  _impl_.languagekey_ = value;
}
inline void VideoInfo::set_languagekey(bool value) {
  _internal_set_languagekey(value);
  // @@protoc_insertion_point(field_set:msg.VideoInfo.LanguageKey)
}

// -------------------------------------------------------------------

// CSDTAddictionInfo

// bool IsAuthAddiction = 1;
inline void CSDTAddictionInfo::clear_isauthaddiction() {
  _impl_.isauthaddiction_ = false;
}
inline bool CSDTAddictionInfo::_internal_isauthaddiction() const {
  return _impl_.isauthaddiction_;
}
inline bool CSDTAddictionInfo::isauthaddiction() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAddictionInfo.IsAuthAddiction)
  return _internal_isauthaddiction();
}
inline void CSDTAddictionInfo::_internal_set_isauthaddiction(bool value) {
  
  _impl_.isauthaddiction_ = value;
}
inline void CSDTAddictionInfo::set_isauthaddiction(bool value) {
  _internal_set_isauthaddiction(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAddictionInfo.IsAuthAddiction)
}

// string AuthAddictionToken = 2;
inline void CSDTAddictionInfo::clear_authaddictiontoken() {
  _impl_.authaddictiontoken_.ClearToEmpty();
}
inline const std::string& CSDTAddictionInfo::authaddictiontoken() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAddictionInfo.AuthAddictionToken)
  return _internal_authaddictiontoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTAddictionInfo::set_authaddictiontoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authaddictiontoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTAddictionInfo.AuthAddictionToken)
}
inline std::string* CSDTAddictionInfo::mutable_authaddictiontoken() {
  std::string* _s = _internal_mutable_authaddictiontoken();
  // @@protoc_insertion_point(field_mutable:msg.CSDTAddictionInfo.AuthAddictionToken)
  return _s;
}
inline const std::string& CSDTAddictionInfo::_internal_authaddictiontoken() const {
  return _impl_.authaddictiontoken_.Get();
}
inline void CSDTAddictionInfo::_internal_set_authaddictiontoken(const std::string& value) {
  
  _impl_.authaddictiontoken_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTAddictionInfo::_internal_mutable_authaddictiontoken() {
  
  return _impl_.authaddictiontoken_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTAddictionInfo::release_authaddictiontoken() {
  // @@protoc_insertion_point(field_release:msg.CSDTAddictionInfo.AuthAddictionToken)
  return _impl_.authaddictiontoken_.Release();
}
inline void CSDTAddictionInfo::set_allocated_authaddictiontoken(std::string* authaddictiontoken) {
  if (authaddictiontoken != nullptr) {
    
  } else {
    
  }
  _impl_.authaddictiontoken_.SetAllocated(authaddictiontoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authaddictiontoken_.IsDefault()) {
    _impl_.authaddictiontoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTAddictionInfo.AuthAddictionToken)
}

// bool IsVerified = 3;
inline void CSDTAddictionInfo::clear_isverified() {
  _impl_.isverified_ = false;
}
inline bool CSDTAddictionInfo::_internal_isverified() const {
  return _impl_.isverified_;
}
inline bool CSDTAddictionInfo::isverified() const {
  // @@protoc_insertion_point(field_get:msg.CSDTAddictionInfo.IsVerified)
  return _internal_isverified();
}
inline void CSDTAddictionInfo::_internal_set_isverified(bool value) {
  
  _impl_.isverified_ = value;
}
inline void CSDTAddictionInfo::set_isverified(bool value) {
  _internal_set_isverified(value);
  // @@protoc_insertion_point(field_set:msg.CSDTAddictionInfo.IsVerified)
}

// -------------------------------------------------------------------

// KrAddictionInfo

// int64 LoginTime = 1;
inline void KrAddictionInfo::clear_logintime() {
  _impl_.logintime_ = int64_t{0};
}
inline int64_t KrAddictionInfo::_internal_logintime() const {
  return _impl_.logintime_;
}
inline int64_t KrAddictionInfo::logintime() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.LoginTime)
  return _internal_logintime();
}
inline void KrAddictionInfo::_internal_set_logintime(int64_t value) {
  
  _impl_.logintime_ = value;
}
inline void KrAddictionInfo::set_logintime(int64_t value) {
  _internal_set_logintime(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.LoginTime)
}

// bool IsCheckAddic = 2;
inline void KrAddictionInfo::clear_ischeckaddic() {
  _impl_.ischeckaddic_ = false;
}
inline bool KrAddictionInfo::_internal_ischeckaddic() const {
  return _impl_.ischeckaddic_;
}
inline bool KrAddictionInfo::ischeckaddic() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.IsCheckAddic)
  return _internal_ischeckaddic();
}
inline void KrAddictionInfo::_internal_set_ischeckaddic(bool value) {
  
  _impl_.ischeckaddic_ = value;
}
inline void KrAddictionInfo::set_ischeckaddic(bool value) {
  _internal_set_ischeckaddic(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.IsCheckAddic)
}

// int64 StartLimitTime = 3;
inline void KrAddictionInfo::clear_startlimittime() {
  _impl_.startlimittime_ = int64_t{0};
}
inline int64_t KrAddictionInfo::_internal_startlimittime() const {
  return _impl_.startlimittime_;
}
inline int64_t KrAddictionInfo::startlimittime() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.StartLimitTime)
  return _internal_startlimittime();
}
inline void KrAddictionInfo::_internal_set_startlimittime(int64_t value) {
  
  _impl_.startlimittime_ = value;
}
inline void KrAddictionInfo::set_startlimittime(int64_t value) {
  _internal_set_startlimittime(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.StartLimitTime)
}

// int64 EndLimitTime = 4;
inline void KrAddictionInfo::clear_endlimittime() {
  _impl_.endlimittime_ = int64_t{0};
}
inline int64_t KrAddictionInfo::_internal_endlimittime() const {
  return _impl_.endlimittime_;
}
inline int64_t KrAddictionInfo::endlimittime() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.EndLimitTime)
  return _internal_endlimittime();
}
inline void KrAddictionInfo::_internal_set_endlimittime(int64_t value) {
  
  _impl_.endlimittime_ = value;
}
inline void KrAddictionInfo::set_endlimittime(int64_t value) {
  _internal_set_endlimittime(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.EndLimitTime)
}

// int64 Countdown1 = 5;
inline void KrAddictionInfo::clear_countdown1() {
  _impl_.countdown1_ = int64_t{0};
}
inline int64_t KrAddictionInfo::_internal_countdown1() const {
  return _impl_.countdown1_;
}
inline int64_t KrAddictionInfo::countdown1() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.Countdown1)
  return _internal_countdown1();
}
inline void KrAddictionInfo::_internal_set_countdown1(int64_t value) {
  
  _impl_.countdown1_ = value;
}
inline void KrAddictionInfo::set_countdown1(int64_t value) {
  _internal_set_countdown1(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.Countdown1)
}

// int64 Countdown2 = 6;
inline void KrAddictionInfo::clear_countdown2() {
  _impl_.countdown2_ = int64_t{0};
}
inline int64_t KrAddictionInfo::_internal_countdown2() const {
  return _impl_.countdown2_;
}
inline int64_t KrAddictionInfo::countdown2() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.Countdown2)
  return _internal_countdown2();
}
inline void KrAddictionInfo::_internal_set_countdown2(int64_t value) {
  
  _impl_.countdown2_ = value;
}
inline void KrAddictionInfo::set_countdown2(int64_t value) {
  _internal_set_countdown2(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.Countdown2)
}

// int64 durantion = 7;
inline void KrAddictionInfo::clear_durantion() {
  _impl_.durantion_ = int64_t{0};
}
inline int64_t KrAddictionInfo::_internal_durantion() const {
  return _impl_.durantion_;
}
inline int64_t KrAddictionInfo::durantion() const {
  // @@protoc_insertion_point(field_get:msg.KrAddictionInfo.durantion)
  return _internal_durantion();
}
inline void KrAddictionInfo::_internal_set_durantion(int64_t value) {
  
  _impl_.durantion_ = value;
}
inline void KrAddictionInfo::set_durantion(int64_t value) {
  _internal_set_durantion(value);
  // @@protoc_insertion_point(field_set:msg.KrAddictionInfo.durantion)
}

// -------------------------------------------------------------------

// MultiPlayer

// string Id = 1;
inline void MultiPlayer::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MultiPlayer::id() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiPlayer::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.Id)
}
inline std::string* MultiPlayer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.MultiPlayer.Id)
  return _s;
}
inline const std::string& MultiPlayer::_internal_id() const {
  return _impl_.id_.Get();
}
inline void MultiPlayer::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* MultiPlayer::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* MultiPlayer::release_id() {
  // @@protoc_insertion_point(field_release:msg.MultiPlayer.Id)
  return _impl_.id_.Release();
}
inline void MultiPlayer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MultiPlayer.Id)
}

// string Name = 2;
inline void MultiPlayer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MultiPlayer::name() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiPlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.Name)
}
inline std::string* MultiPlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.MultiPlayer.Name)
  return _s;
}
inline const std::string& MultiPlayer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MultiPlayer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MultiPlayer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MultiPlayer::release_name() {
  // @@protoc_insertion_point(field_release:msg.MultiPlayer.Name)
  return _impl_.name_.Release();
}
inline void MultiPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MultiPlayer.Name)
}

// uint32 HeadPic = 3;
inline void MultiPlayer::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t MultiPlayer::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t MultiPlayer::headpic() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.HeadPic)
  return _internal_headpic();
}
inline void MultiPlayer::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void MultiPlayer::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.HeadPic)
}

// uint32 HeadPicFrame = 4;
inline void MultiPlayer::clear_headpicframe() {
  _impl_.headpicframe_ = 0u;
}
inline uint32_t MultiPlayer::_internal_headpicframe() const {
  return _impl_.headpicframe_;
}
inline uint32_t MultiPlayer::headpicframe() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.HeadPicFrame)
  return _internal_headpicframe();
}
inline void MultiPlayer::_internal_set_headpicframe(uint32_t value) {
  
  _impl_.headpicframe_ = value;
}
inline void MultiPlayer::set_headpicframe(uint32_t value) {
  _internal_set_headpicframe(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.HeadPicFrame)
}

// uint32 Level = 5;
inline void MultiPlayer::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t MultiPlayer::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t MultiPlayer::level() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.Level)
  return _internal_level();
}
inline void MultiPlayer::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void MultiPlayer::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.Level)
}

// uint32 MMR = 6;
inline void MultiPlayer::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t MultiPlayer::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t MultiPlayer::mmr() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.MMR)
  return _internal_mmr();
}
inline void MultiPlayer::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void MultiPlayer::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.MMR)
}

// uint32 Diamond = 7;
inline void MultiPlayer::clear_diamond() {
  _impl_.diamond_ = 0u;
}
inline uint32_t MultiPlayer::_internal_diamond() const {
  return _impl_.diamond_;
}
inline uint32_t MultiPlayer::diamond() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.Diamond)
  return _internal_diamond();
}
inline void MultiPlayer::_internal_set_diamond(uint32_t value) {
  
  _impl_.diamond_ = value;
}
inline void MultiPlayer::set_diamond(uint32_t value) {
  _internal_set_diamond(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.Diamond)
}

// string Region = 8;
inline void MultiPlayer::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& MultiPlayer::region() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.Region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MultiPlayer::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.Region)
}
inline std::string* MultiPlayer::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:msg.MultiPlayer.Region)
  return _s;
}
inline const std::string& MultiPlayer::_internal_region() const {
  return _impl_.region_.Get();
}
inline void MultiPlayer::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* MultiPlayer::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* MultiPlayer::release_region() {
  // @@protoc_insertion_point(field_release:msg.MultiPlayer.Region)
  return _impl_.region_.Release();
}
inline void MultiPlayer::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MultiPlayer.Region)
}

// uint32 Money = 9;
inline void MultiPlayer::clear_money() {
  _impl_.money_ = 0u;
}
inline uint32_t MultiPlayer::_internal_money() const {
  return _impl_.money_;
}
inline uint32_t MultiPlayer::money() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.Money)
  return _internal_money();
}
inline void MultiPlayer::_internal_set_money(uint32_t value) {
  
  _impl_.money_ = value;
}
inline void MultiPlayer::set_money(uint32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.Money)
}

// uint32 PassportLevel = 10;
inline void MultiPlayer::clear_passportlevel() {
  _impl_.passportlevel_ = 0u;
}
inline uint32_t MultiPlayer::_internal_passportlevel() const {
  return _impl_.passportlevel_;
}
inline uint32_t MultiPlayer::passportlevel() const {
  // @@protoc_insertion_point(field_get:msg.MultiPlayer.PassportLevel)
  return _internal_passportlevel();
}
inline void MultiPlayer::_internal_set_passportlevel(uint32_t value) {
  
  _impl_.passportlevel_ = value;
}
inline void MultiPlayer::set_passportlevel(uint32_t value) {
  _internal_set_passportlevel(value);
  // @@protoc_insertion_point(field_set:msg.MultiPlayer.PassportLevel)
}

// -------------------------------------------------------------------

// CSDTBannerInfo

// repeated .msg.CSDTBanner Data = 1;
inline int CSDTBannerInfo::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CSDTBannerInfo::data_size() const {
  return _internal_data_size();
}
inline void CSDTBannerInfo::clear_data() {
  _impl_.data_.Clear();
}
inline ::msg::CSDTBanner* CSDTBannerInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTBannerInfo.Data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTBanner >*
CSDTBannerInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBannerInfo.Data)
  return &_impl_.data_;
}
inline const ::msg::CSDTBanner& CSDTBannerInfo::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::msg::CSDTBanner& CSDTBannerInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBannerInfo.Data)
  return _internal_data(index);
}
inline ::msg::CSDTBanner* CSDTBannerInfo::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::msg::CSDTBanner* CSDTBannerInfo::add_data() {
  ::msg::CSDTBanner* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:msg.CSDTBannerInfo.Data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTBanner >&
CSDTBannerInfo::data() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBannerInfo.Data)
  return _impl_.data_;
}

// -------------------------------------------------------------------

// CSDTBanner

// int64 Id = 1;
inline void CSDTBanner::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t CSDTBanner::_internal_id() const {
  return _impl_.id_;
}
inline int64_t CSDTBanner::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.Id)
  return _internal_id();
}
inline void CSDTBanner::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTBanner::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.Id)
}

// string PicUrl = 2;
inline void CSDTBanner::clear_picurl() {
  _impl_.picurl_.ClearToEmpty();
}
inline const std::string& CSDTBanner::picurl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.PicUrl)
  return _internal_picurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTBanner::set_picurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.PicUrl)
}
inline std::string* CSDTBanner::mutable_picurl() {
  std::string* _s = _internal_mutable_picurl();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBanner.PicUrl)
  return _s;
}
inline const std::string& CSDTBanner::_internal_picurl() const {
  return _impl_.picurl_.Get();
}
inline void CSDTBanner::_internal_set_picurl(const std::string& value) {
  
  _impl_.picurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTBanner::_internal_mutable_picurl() {
  
  return _impl_.picurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTBanner::release_picurl() {
  // @@protoc_insertion_point(field_release:msg.CSDTBanner.PicUrl)
  return _impl_.picurl_.Release();
}
inline void CSDTBanner::set_allocated_picurl(std::string* picurl) {
  if (picurl != nullptr) {
    
  } else {
    
  }
  _impl_.picurl_.SetAllocated(picurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picurl_.IsDefault()) {
    _impl_.picurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBanner.PicUrl)
}

// .msg.BANNERTYPE BannerType = 3;
inline void CSDTBanner::clear_bannertype() {
  _impl_.bannertype_ = 0;
}
inline ::msg::BANNERTYPE CSDTBanner::_internal_bannertype() const {
  return static_cast< ::msg::BANNERTYPE >(_impl_.bannertype_);
}
inline ::msg::BANNERTYPE CSDTBanner::bannertype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.BannerType)
  return _internal_bannertype();
}
inline void CSDTBanner::_internal_set_bannertype(::msg::BANNERTYPE value) {
  
  _impl_.bannertype_ = value;
}
inline void CSDTBanner::set_bannertype(::msg::BANNERTYPE value) {
  _internal_set_bannertype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.BannerType)
}

// .msg.SKIPTYPE SkipType = 4;
inline void CSDTBanner::clear_skiptype() {
  _impl_.skiptype_ = 0;
}
inline ::msg::SKIPTYPE CSDTBanner::_internal_skiptype() const {
  return static_cast< ::msg::SKIPTYPE >(_impl_.skiptype_);
}
inline ::msg::SKIPTYPE CSDTBanner::skiptype() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.SkipType)
  return _internal_skiptype();
}
inline void CSDTBanner::_internal_set_skiptype(::msg::SKIPTYPE value) {
  
  _impl_.skiptype_ = value;
}
inline void CSDTBanner::set_skiptype(::msg::SKIPTYPE value) {
  _internal_set_skiptype(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.SkipType)
}

// string SkipName = 5;
inline void CSDTBanner::clear_skipname() {
  _impl_.skipname_.ClearToEmpty();
}
inline const std::string& CSDTBanner::skipname() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.SkipName)
  return _internal_skipname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTBanner::set_skipname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skipname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.SkipName)
}
inline std::string* CSDTBanner::mutable_skipname() {
  std::string* _s = _internal_mutable_skipname();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBanner.SkipName)
  return _s;
}
inline const std::string& CSDTBanner::_internal_skipname() const {
  return _impl_.skipname_.Get();
}
inline void CSDTBanner::_internal_set_skipname(const std::string& value) {
  
  _impl_.skipname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTBanner::_internal_mutable_skipname() {
  
  return _impl_.skipname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTBanner::release_skipname() {
  // @@protoc_insertion_point(field_release:msg.CSDTBanner.SkipName)
  return _impl_.skipname_.Release();
}
inline void CSDTBanner::set_allocated_skipname(std::string* skipname) {
  if (skipname != nullptr) {
    
  } else {
    
  }
  _impl_.skipname_.SetAllocated(skipname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skipname_.IsDefault()) {
    _impl_.skipname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBanner.SkipName)
}

// uint32 SkipTap = 6;
inline void CSDTBanner::clear_skiptap() {
  _impl_.skiptap_ = 0u;
}
inline uint32_t CSDTBanner::_internal_skiptap() const {
  return _impl_.skiptap_;
}
inline uint32_t CSDTBanner::skiptap() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.SkipTap)
  return _internal_skiptap();
}
inline void CSDTBanner::_internal_set_skiptap(uint32_t value) {
  
  _impl_.skiptap_ = value;
}
inline void CSDTBanner::set_skiptap(uint32_t value) {
  _internal_set_skiptap(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.SkipTap)
}

// uint32 MallGoodsId = 7;
inline void CSDTBanner::clear_mallgoodsid() {
  _impl_.mallgoodsid_ = 0u;
}
inline uint32_t CSDTBanner::_internal_mallgoodsid() const {
  return _impl_.mallgoodsid_;
}
inline uint32_t CSDTBanner::mallgoodsid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.MallGoodsId)
  return _internal_mallgoodsid();
}
inline void CSDTBanner::_internal_set_mallgoodsid(uint32_t value) {
  
  _impl_.mallgoodsid_ = value;
}
inline void CSDTBanner::set_mallgoodsid(uint32_t value) {
  _internal_set_mallgoodsid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.MallGoodsId)
}

// repeated string CountryList = 8;
inline int CSDTBanner::_internal_countrylist_size() const {
  return _impl_.countrylist_.size();
}
inline int CSDTBanner::countrylist_size() const {
  return _internal_countrylist_size();
}
inline void CSDTBanner::clear_countrylist() {
  _impl_.countrylist_.Clear();
}
inline std::string* CSDTBanner::add_countrylist() {
  std::string* _s = _internal_add_countrylist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTBanner.CountryList)
  return _s;
}
inline const std::string& CSDTBanner::_internal_countrylist(int index) const {
  return _impl_.countrylist_.Get(index);
}
inline const std::string& CSDTBanner::countrylist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.CountryList)
  return _internal_countrylist(index);
}
inline std::string* CSDTBanner::mutable_countrylist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTBanner.CountryList)
  return _impl_.countrylist_.Mutable(index);
}
inline void CSDTBanner::set_countrylist(int index, const std::string& value) {
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.CountryList)
}
inline void CSDTBanner::set_countrylist(int index, std::string&& value) {
  _impl_.countrylist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.CountryList)
}
inline void CSDTBanner::set_countrylist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTBanner.CountryList)
}
inline void CSDTBanner::set_countrylist(int index, const char* value, size_t size) {
  _impl_.countrylist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTBanner.CountryList)
}
inline std::string* CSDTBanner::_internal_add_countrylist() {
  return _impl_.countrylist_.Add();
}
inline void CSDTBanner::add_countrylist(const std::string& value) {
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.CountryList)
}
inline void CSDTBanner::add_countrylist(std::string&& value) {
  _impl_.countrylist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.CountryList)
}
inline void CSDTBanner::add_countrylist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.countrylist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTBanner.CountryList)
}
inline void CSDTBanner::add_countrylist(const char* value, size_t size) {
  _impl_.countrylist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTBanner.CountryList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTBanner::countrylist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBanner.CountryList)
  return _impl_.countrylist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTBanner::mutable_countrylist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBanner.CountryList)
  return &_impl_.countrylist_;
}

// int64 ShowBeginTime = 9;
inline void CSDTBanner::clear_showbegintime() {
  _impl_.showbegintime_ = int64_t{0};
}
inline int64_t CSDTBanner::_internal_showbegintime() const {
  return _impl_.showbegintime_;
}
inline int64_t CSDTBanner::showbegintime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.ShowBeginTime)
  return _internal_showbegintime();
}
inline void CSDTBanner::_internal_set_showbegintime(int64_t value) {
  
  _impl_.showbegintime_ = value;
}
inline void CSDTBanner::set_showbegintime(int64_t value) {
  _internal_set_showbegintime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.ShowBeginTime)
}

// int64 ShowEndTime = 10;
inline void CSDTBanner::clear_showendtime() {
  _impl_.showendtime_ = int64_t{0};
}
inline int64_t CSDTBanner::_internal_showendtime() const {
  return _impl_.showendtime_;
}
inline int64_t CSDTBanner::showendtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.ShowEndTime)
  return _internal_showendtime();
}
inline void CSDTBanner::_internal_set_showendtime(int64_t value) {
  
  _impl_.showendtime_ = value;
}
inline void CSDTBanner::set_showendtime(int64_t value) {
  _internal_set_showendtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.ShowEndTime)
}

// repeated uint32 ZoneId = 11;
inline int CSDTBanner::_internal_zoneid_size() const {
  return _impl_.zoneid_.size();
}
inline int CSDTBanner::zoneid_size() const {
  return _internal_zoneid_size();
}
inline void CSDTBanner::clear_zoneid() {
  _impl_.zoneid_.Clear();
}
inline uint32_t CSDTBanner::_internal_zoneid(int index) const {
  return _impl_.zoneid_.Get(index);
}
inline uint32_t CSDTBanner::zoneid(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.ZoneId)
  return _internal_zoneid(index);
}
inline void CSDTBanner::set_zoneid(int index, uint32_t value) {
  _impl_.zoneid_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.ZoneId)
}
inline void CSDTBanner::_internal_add_zoneid(uint32_t value) {
  _impl_.zoneid_.Add(value);
}
inline void CSDTBanner::add_zoneid(uint32_t value) {
  _internal_add_zoneid(value);
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.ZoneId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTBanner::_internal_zoneid() const {
  return _impl_.zoneid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTBanner::zoneid() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBanner.ZoneId)
  return _internal_zoneid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTBanner::_internal_mutable_zoneid() {
  return &_impl_.zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTBanner::mutable_zoneid() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBanner.ZoneId)
  return _internal_mutable_zoneid();
}

// repeated string DownloadList = 12;
inline int CSDTBanner::_internal_downloadlist_size() const {
  return _impl_.downloadlist_.size();
}
inline int CSDTBanner::downloadlist_size() const {
  return _internal_downloadlist_size();
}
inline void CSDTBanner::clear_downloadlist() {
  _impl_.downloadlist_.Clear();
}
inline std::string* CSDTBanner::add_downloadlist() {
  std::string* _s = _internal_add_downloadlist();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTBanner.DownloadList)
  return _s;
}
inline const std::string& CSDTBanner::_internal_downloadlist(int index) const {
  return _impl_.downloadlist_.Get(index);
}
inline const std::string& CSDTBanner::downloadlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.DownloadList)
  return _internal_downloadlist(index);
}
inline std::string* CSDTBanner::mutable_downloadlist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTBanner.DownloadList)
  return _impl_.downloadlist_.Mutable(index);
}
inline void CSDTBanner::set_downloadlist(int index, const std::string& value) {
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.DownloadList)
}
inline void CSDTBanner::set_downloadlist(int index, std::string&& value) {
  _impl_.downloadlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.DownloadList)
}
inline void CSDTBanner::set_downloadlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTBanner.DownloadList)
}
inline void CSDTBanner::set_downloadlist(int index, const char* value, size_t size) {
  _impl_.downloadlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTBanner.DownloadList)
}
inline std::string* CSDTBanner::_internal_add_downloadlist() {
  return _impl_.downloadlist_.Add();
}
inline void CSDTBanner::add_downloadlist(const std::string& value) {
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.DownloadList)
}
inline void CSDTBanner::add_downloadlist(std::string&& value) {
  _impl_.downloadlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.DownloadList)
}
inline void CSDTBanner::add_downloadlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTBanner.DownloadList)
}
inline void CSDTBanner::add_downloadlist(const char* value, size_t size) {
  _impl_.downloadlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTBanner.DownloadList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTBanner::downloadlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBanner.DownloadList)
  return _impl_.downloadlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTBanner::mutable_downloadlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBanner.DownloadList)
  return &_impl_.downloadlist_;
}

// repeated .msg.PLATFORMTYPE PlatformList = 13;
inline int CSDTBanner::_internal_platformlist_size() const {
  return _impl_.platformlist_.size();
}
inline int CSDTBanner::platformlist_size() const {
  return _internal_platformlist_size();
}
inline void CSDTBanner::clear_platformlist() {
  _impl_.platformlist_.Clear();
}
inline ::msg::PLATFORMTYPE CSDTBanner::_internal_platformlist(int index) const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformlist_.Get(index));
}
inline ::msg::PLATFORMTYPE CSDTBanner::platformlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.PlatformList)
  return _internal_platformlist(index);
}
inline void CSDTBanner::set_platformlist(int index, ::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.PlatformList)
}
inline void CSDTBanner::_internal_add_platformlist(::msg::PLATFORMTYPE value) {
  _impl_.platformlist_.Add(value);
}
inline void CSDTBanner::add_platformlist(::msg::PLATFORMTYPE value) {
  _internal_add_platformlist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.PlatformList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSDTBanner::platformlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBanner.PlatformList)
  return _impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTBanner::_internal_mutable_platformlist() {
  return &_impl_.platformlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSDTBanner::mutable_platformlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBanner.PlatformList)
  return _internal_mutable_platformlist();
}

// string PCSkipUrl = 14;
inline void CSDTBanner::clear_pcskipurl() {
  _impl_.pcskipurl_.ClearToEmpty();
}
inline const std::string& CSDTBanner::pcskipurl() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.PCSkipUrl)
  return _internal_pcskipurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTBanner::set_pcskipurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pcskipurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.PCSkipUrl)
}
inline std::string* CSDTBanner::mutable_pcskipurl() {
  std::string* _s = _internal_mutable_pcskipurl();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBanner.PCSkipUrl)
  return _s;
}
inline const std::string& CSDTBanner::_internal_pcskipurl() const {
  return _impl_.pcskipurl_.Get();
}
inline void CSDTBanner::_internal_set_pcskipurl(const std::string& value) {
  
  _impl_.pcskipurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTBanner::_internal_mutable_pcskipurl() {
  
  return _impl_.pcskipurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTBanner::release_pcskipurl() {
  // @@protoc_insertion_point(field_release:msg.CSDTBanner.PCSkipUrl)
  return _impl_.pcskipurl_.Release();
}
inline void CSDTBanner::set_allocated_pcskipurl(std::string* pcskipurl) {
  if (pcskipurl != nullptr) {
    
  } else {
    
  }
  _impl_.pcskipurl_.SetAllocated(pcskipurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pcskipurl_.IsDefault()) {
    _impl_.pcskipurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBanner.PCSkipUrl)
}

// repeated uint32 HallModeList = 15;
inline int CSDTBanner::_internal_hallmodelist_size() const {
  return _impl_.hallmodelist_.size();
}
inline int CSDTBanner::hallmodelist_size() const {
  return _internal_hallmodelist_size();
}
inline void CSDTBanner::clear_hallmodelist() {
  _impl_.hallmodelist_.Clear();
}
inline uint32_t CSDTBanner::_internal_hallmodelist(int index) const {
  return _impl_.hallmodelist_.Get(index);
}
inline uint32_t CSDTBanner::hallmodelist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.HallModeList)
  return _internal_hallmodelist(index);
}
inline void CSDTBanner::set_hallmodelist(int index, uint32_t value) {
  _impl_.hallmodelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.HallModeList)
}
inline void CSDTBanner::_internal_add_hallmodelist(uint32_t value) {
  _impl_.hallmodelist_.Add(value);
}
inline void CSDTBanner::add_hallmodelist(uint32_t value) {
  _internal_add_hallmodelist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.HallModeList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTBanner::_internal_hallmodelist() const {
  return _impl_.hallmodelist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTBanner::hallmodelist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBanner.HallModeList)
  return _internal_hallmodelist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTBanner::_internal_mutable_hallmodelist() {
  return &_impl_.hallmodelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTBanner::mutable_hallmodelist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBanner.HallModeList)
  return _internal_mutable_hallmodelist();
}

// int64 Sort = 16;
inline void CSDTBanner::clear_sort() {
  _impl_.sort_ = int64_t{0};
}
inline int64_t CSDTBanner::_internal_sort() const {
  return _impl_.sort_;
}
inline int64_t CSDTBanner::sort() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.Sort)
  return _internal_sort();
}
inline void CSDTBanner::_internal_set_sort(int64_t value) {
  
  _impl_.sort_ = value;
}
inline void CSDTBanner::set_sort(int64_t value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.Sort)
}

// repeated string ExcludeDownload = 17;
inline int CSDTBanner::_internal_excludedownload_size() const {
  return _impl_.excludedownload_.size();
}
inline int CSDTBanner::excludedownload_size() const {
  return _internal_excludedownload_size();
}
inline void CSDTBanner::clear_excludedownload() {
  _impl_.excludedownload_.Clear();
}
inline std::string* CSDTBanner::add_excludedownload() {
  std::string* _s = _internal_add_excludedownload();
  // @@protoc_insertion_point(field_add_mutable:msg.CSDTBanner.ExcludeDownload)
  return _s;
}
inline const std::string& CSDTBanner::_internal_excludedownload(int index) const {
  return _impl_.excludedownload_.Get(index);
}
inline const std::string& CSDTBanner::excludedownload(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTBanner.ExcludeDownload)
  return _internal_excludedownload(index);
}
inline std::string* CSDTBanner::mutable_excludedownload(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTBanner.ExcludeDownload)
  return _impl_.excludedownload_.Mutable(index);
}
inline void CSDTBanner::set_excludedownload(int index, const std::string& value) {
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.ExcludeDownload)
}
inline void CSDTBanner::set_excludedownload(int index, std::string&& value) {
  _impl_.excludedownload_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSDTBanner.ExcludeDownload)
}
inline void CSDTBanner::set_excludedownload(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSDTBanner.ExcludeDownload)
}
inline void CSDTBanner::set_excludedownload(int index, const char* value, size_t size) {
  _impl_.excludedownload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSDTBanner.ExcludeDownload)
}
inline std::string* CSDTBanner::_internal_add_excludedownload() {
  return _impl_.excludedownload_.Add();
}
inline void CSDTBanner::add_excludedownload(const std::string& value) {
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.ExcludeDownload)
}
inline void CSDTBanner::add_excludedownload(std::string&& value) {
  _impl_.excludedownload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSDTBanner.ExcludeDownload)
}
inline void CSDTBanner::add_excludedownload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.excludedownload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSDTBanner.ExcludeDownload)
}
inline void CSDTBanner::add_excludedownload(const char* value, size_t size) {
  _impl_.excludedownload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSDTBanner.ExcludeDownload)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSDTBanner::excludedownload() const {
  // @@protoc_insertion_point(field_list:msg.CSDTBanner.ExcludeDownload)
  return _impl_.excludedownload_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSDTBanner::mutable_excludedownload() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTBanner.ExcludeDownload)
  return &_impl_.excludedownload_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTTournament

// uint64 Id = 1;
inline void CSDTTournament::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CSDTTournament::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CSDTTournament::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Id)
  return _internal_id();
}
inline void CSDTTournament::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTTournament::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.Id)
}

// uint32 EnrollCount = 2;
inline void CSDTTournament::clear_enrollcount() {
  _impl_.enrollcount_ = 0u;
}
inline uint32_t CSDTTournament::_internal_enrollcount() const {
  return _impl_.enrollcount_;
}
inline uint32_t CSDTTournament::enrollcount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.EnrollCount)
  return _internal_enrollcount();
}
inline void CSDTTournament::_internal_set_enrollcount(uint32_t value) {
  
  _impl_.enrollcount_ = value;
}
inline void CSDTTournament::set_enrollcount(uint32_t value) {
  _internal_set_enrollcount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.EnrollCount)
}

// bool Enroll = 3;
inline void CSDTTournament::clear_enroll() {
  _impl_.enroll_ = false;
}
inline bool CSDTTournament::_internal_enroll() const {
  return _impl_.enroll_;
}
inline bool CSDTTournament::enroll() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Enroll)
  return _internal_enroll();
}
inline void CSDTTournament::_internal_set_enroll(bool value) {
  
  _impl_.enroll_ = value;
}
inline void CSDTTournament::set_enroll(bool value) {
  _internal_set_enroll(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.Enroll)
}

// bool Out = 4;
inline void CSDTTournament::clear_out() {
  _impl_.out_ = false;
}
inline bool CSDTTournament::_internal_out() const {
  return _impl_.out_;
}
inline bool CSDTTournament::out() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Out)
  return _internal_out();
}
inline void CSDTTournament::_internal_set_out(bool value) {
  
  _impl_.out_ = value;
}
inline void CSDTTournament::set_out(bool value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.Out)
}

// uint32 JoinCount = 5;
inline void CSDTTournament::clear_joincount() {
  _impl_.joincount_ = 0u;
}
inline uint32_t CSDTTournament::_internal_joincount() const {
  return _impl_.joincount_;
}
inline uint32_t CSDTTournament::joincount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.JoinCount)
  return _internal_joincount();
}
inline void CSDTTournament::_internal_set_joincount(uint32_t value) {
  
  _impl_.joincount_ = value;
}
inline void CSDTTournament::set_joincount(uint32_t value) {
  _internal_set_joincount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.JoinCount)
}

// repeated .msg.CSDTTournamentClass Classes = 6;
inline int CSDTTournament::_internal_classes_size() const {
  return _impl_.classes_.size();
}
inline int CSDTTournament::classes_size() const {
  return _internal_classes_size();
}
inline void CSDTTournament::clear_classes() {
  _impl_.classes_.Clear();
}
inline ::msg::CSDTTournamentClass* CSDTTournament::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTTournament.Classes)
  return _impl_.classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >*
CSDTTournament::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTTournament.Classes)
  return &_impl_.classes_;
}
inline const ::msg::CSDTTournamentClass& CSDTTournament::_internal_classes(int index) const {
  return _impl_.classes_.Get(index);
}
inline const ::msg::CSDTTournamentClass& CSDTTournament::classes(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Classes)
  return _internal_classes(index);
}
inline ::msg::CSDTTournamentClass* CSDTTournament::_internal_add_classes() {
  return _impl_.classes_.Add();
}
inline ::msg::CSDTTournamentClass* CSDTTournament::add_classes() {
  ::msg::CSDTTournamentClass* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:msg.CSDTTournament.Classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >&
CSDTTournament::classes() const {
  // @@protoc_insertion_point(field_list:msg.CSDTTournament.Classes)
  return _impl_.classes_;
}

// uint64 Round = 7;
inline void CSDTTournament::clear_round() {
  _impl_.round_ = uint64_t{0u};
}
inline uint64_t CSDTTournament::_internal_round() const {
  return _impl_.round_;
}
inline uint64_t CSDTTournament::round() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Round)
  return _internal_round();
}
inline void CSDTTournament::_internal_set_round(uint64_t value) {
  
  _impl_.round_ = value;
}
inline void CSDTTournament::set_round(uint64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.Round)
}

// uint64 LastGameId = 8;
inline void CSDTTournament::clear_lastgameid() {
  _impl_.lastgameid_ = uint64_t{0u};
}
inline uint64_t CSDTTournament::_internal_lastgameid() const {
  return _impl_.lastgameid_;
}
inline uint64_t CSDTTournament::lastgameid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.LastGameId)
  return _internal_lastgameid();
}
inline void CSDTTournament::_internal_set_lastgameid(uint64_t value) {
  
  _impl_.lastgameid_ = value;
}
inline void CSDTTournament::set_lastgameid(uint64_t value) {
  _internal_set_lastgameid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.LastGameId)
}

// uint64 EnrollClass = 9;
inline void CSDTTournament::clear_enrollclass() {
  _impl_.enrollclass_ = uint64_t{0u};
}
inline uint64_t CSDTTournament::_internal_enrollclass() const {
  return _impl_.enrollclass_;
}
inline uint64_t CSDTTournament::enrollclass() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.EnrollClass)
  return _internal_enrollclass();
}
inline void CSDTTournament::_internal_set_enrollclass(uint64_t value) {
  
  _impl_.enrollclass_ = value;
}
inline void CSDTTournament::set_enrollclass(uint64_t value) {
  _internal_set_enrollclass(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.EnrollClass)
}

// int32 GroupIdx = 10;
inline void CSDTTournament::clear_groupidx() {
  _impl_.groupidx_ = 0;
}
inline int32_t CSDTTournament::_internal_groupidx() const {
  return _impl_.groupidx_;
}
inline int32_t CSDTTournament::groupidx() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.GroupIdx)
  return _internal_groupidx();
}
inline void CSDTTournament::_internal_set_groupidx(int32_t value) {
  
  _impl_.groupidx_ = value;
}
inline void CSDTTournament::set_groupidx(int32_t value) {
  _internal_set_groupidx(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.GroupIdx)
}

// map<uint64, uint32> RankInfo = 11;
inline int CSDTTournament::_internal_rankinfo_size() const {
  return _impl_.rankinfo_.size();
}
inline int CSDTTournament::rankinfo_size() const {
  return _internal_rankinfo_size();
}
inline void CSDTTournament::clear_rankinfo() {
  _impl_.rankinfo_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
CSDTTournament::_internal_rankinfo() const {
  return _impl_.rankinfo_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
CSDTTournament::rankinfo() const {
  // @@protoc_insertion_point(field_map:msg.CSDTTournament.RankInfo)
  return _internal_rankinfo();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
CSDTTournament::_internal_mutable_rankinfo() {
  return _impl_.rankinfo_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
CSDTTournament::mutable_rankinfo() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTTournament.RankInfo)
  return _internal_mutable_rankinfo();
}

// repeated uint32 PointAwardGet = 12;
inline int CSDTTournament::_internal_pointawardget_size() const {
  return _impl_.pointawardget_.size();
}
inline int CSDTTournament::pointawardget_size() const {
  return _internal_pointawardget_size();
}
inline void CSDTTournament::clear_pointawardget() {
  _impl_.pointawardget_.Clear();
}
inline uint32_t CSDTTournament::_internal_pointawardget(int index) const {
  return _impl_.pointawardget_.Get(index);
}
inline uint32_t CSDTTournament::pointawardget(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.PointAwardGet)
  return _internal_pointawardget(index);
}
inline void CSDTTournament::set_pointawardget(int index, uint32_t value) {
  _impl_.pointawardget_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.PointAwardGet)
}
inline void CSDTTournament::_internal_add_pointawardget(uint32_t value) {
  _impl_.pointawardget_.Add(value);
}
inline void CSDTTournament::add_pointawardget(uint32_t value) {
  _internal_add_pointawardget(value);
  // @@protoc_insertion_point(field_add:msg.CSDTTournament.PointAwardGet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTTournament::_internal_pointawardget() const {
  return _impl_.pointawardget_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTTournament::pointawardget() const {
  // @@protoc_insertion_point(field_list:msg.CSDTTournament.PointAwardGet)
  return _internal_pointawardget();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTTournament::_internal_mutable_pointawardget() {
  return &_impl_.pointawardget_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTTournament::mutable_pointawardget() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTTournament.PointAwardGet)
  return _internal_mutable_pointawardget();
}

// bool Battle = 13;
inline void CSDTTournament::clear_battle() {
  _impl_.battle_ = false;
}
inline bool CSDTTournament::_internal_battle() const {
  return _impl_.battle_;
}
inline bool CSDTTournament::battle() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Battle)
  return _internal_battle();
}
inline void CSDTTournament::_internal_set_battle(bool value) {
  
  _impl_.battle_ = value;
}
inline void CSDTTournament::set_battle(bool value) {
  _internal_set_battle(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.Battle)
}

// map<uint32, uint32> Points = 14;
inline int CSDTTournament::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int CSDTTournament::points_size() const {
  return _internal_points_size();
}
inline void CSDTTournament::clear_points() {
  _impl_.points_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTTournament::_internal_points() const {
  return _impl_.points_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSDTTournament::points() const {
  // @@protoc_insertion_point(field_map:msg.CSDTTournament.Points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTTournament::_internal_mutable_points() {
  return _impl_.points_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSDTTournament::mutable_points() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTTournament.Points)
  return _internal_mutable_points();
}

// bool ChallengeAgain = 15;
inline void CSDTTournament::clear_challengeagain() {
  _impl_.challengeagain_ = false;
}
inline bool CSDTTournament::_internal_challengeagain() const {
  return _impl_.challengeagain_;
}
inline bool CSDTTournament::challengeagain() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.ChallengeAgain)
  return _internal_challengeagain();
}
inline void CSDTTournament::_internal_set_challengeagain(bool value) {
  
  _impl_.challengeagain_ = value;
}
inline void CSDTTournament::set_challengeagain(bool value) {
  _internal_set_challengeagain(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.ChallengeAgain)
}

// map<uint64, uint32> RoundPoints = 16;
inline int CSDTTournament::_internal_roundpoints_size() const {
  return _impl_.roundpoints_.size();
}
inline int CSDTTournament::roundpoints_size() const {
  return _internal_roundpoints_size();
}
inline void CSDTTournament::clear_roundpoints() {
  _impl_.roundpoints_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
CSDTTournament::_internal_roundpoints() const {
  return _impl_.roundpoints_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
CSDTTournament::roundpoints() const {
  // @@protoc_insertion_point(field_map:msg.CSDTTournament.RoundPoints)
  return _internal_roundpoints();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
CSDTTournament::_internal_mutable_roundpoints() {
  return _impl_.roundpoints_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
CSDTTournament::mutable_roundpoints() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTTournament.RoundPoints)
  return _internal_mutable_roundpoints();
}

// .msg.TOURNAMENTSTATUS Status = 17;
inline void CSDTTournament::clear_status() {
  _impl_.status_ = 0;
}
inline ::msg::TOURNAMENTSTATUS CSDTTournament::_internal_status() const {
  return static_cast< ::msg::TOURNAMENTSTATUS >(_impl_.status_);
}
inline ::msg::TOURNAMENTSTATUS CSDTTournament::status() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournament.Status)
  return _internal_status();
}
inline void CSDTTournament::_internal_set_status(::msg::TOURNAMENTSTATUS value) {
  
  _impl_.status_ = value;
}
inline void CSDTTournament::set_status(::msg::TOURNAMENTSTATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournament.Status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTActDaySign

// map<uint32, .msg.CSDTActDaySignDetail> SignDay = 1;
inline int CSDTActDaySign::_internal_signday_size() const {
  return _impl_.signday_.size();
}
inline int CSDTActDaySign::signday_size() const {
  return _internal_signday_size();
}
inline void CSDTActDaySign::clear_signday() {
  _impl_.signday_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >&
CSDTActDaySign::_internal_signday() const {
  return _impl_.signday_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >&
CSDTActDaySign::signday() const {
  // @@protoc_insertion_point(field_map:msg.CSDTActDaySign.SignDay)
  return _internal_signday();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >*
CSDTActDaySign::_internal_mutable_signday() {
  return _impl_.signday_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >*
CSDTActDaySign::mutable_signday() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTActDaySign.SignDay)
  return _internal_mutable_signday();
}

// uint32 Loop = 2;
inline void CSDTActDaySign::clear_loop() {
  _impl_.loop_ = 0u;
}
inline uint32_t CSDTActDaySign::_internal_loop() const {
  return _impl_.loop_;
}
inline uint32_t CSDTActDaySign::loop() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySign.Loop)
  return _internal_loop();
}
inline void CSDTActDaySign::_internal_set_loop(uint32_t value) {
  
  _impl_.loop_ = value;
}
inline void CSDTActDaySign::set_loop(uint32_t value) {
  _internal_set_loop(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySign.Loop)
}

// uint32 Day = 3;
inline void CSDTActDaySign::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t CSDTActDaySign::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t CSDTActDaySign::day() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySign.Day)
  return _internal_day();
}
inline void CSDTActDaySign::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void CSDTActDaySign::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySign.Day)
}

// uint32 ReSignTimes = 4;
inline void CSDTActDaySign::clear_resigntimes() {
  _impl_.resigntimes_ = 0u;
}
inline uint32_t CSDTActDaySign::_internal_resigntimes() const {
  return _impl_.resigntimes_;
}
inline uint32_t CSDTActDaySign::resigntimes() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySign.ReSignTimes)
  return _internal_resigntimes();
}
inline void CSDTActDaySign::_internal_set_resigntimes(uint32_t value) {
  
  _impl_.resigntimes_ = value;
}
inline void CSDTActDaySign::set_resigntimes(uint32_t value) {
  _internal_set_resigntimes(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySign.ReSignTimes)
}

// bool CanSign = 5;
inline void CSDTActDaySign::clear_cansign() {
  _impl_.cansign_ = false;
}
inline bool CSDTActDaySign::_internal_cansign() const {
  return _impl_.cansign_;
}
inline bool CSDTActDaySign::cansign() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySign.CanSign)
  return _internal_cansign();
}
inline void CSDTActDaySign::_internal_set_cansign(bool value) {
  
  _impl_.cansign_ = value;
}
inline void CSDTActDaySign::set_cansign(bool value) {
  _internal_set_cansign(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySign.CanSign)
}

// bool CanGetSpecialAward = 6;
inline void CSDTActDaySign::clear_cangetspecialaward() {
  _impl_.cangetspecialaward_ = false;
}
inline bool CSDTActDaySign::_internal_cangetspecialaward() const {
  return _impl_.cangetspecialaward_;
}
inline bool CSDTActDaySign::cangetspecialaward() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySign.CanGetSpecialAward)
  return _internal_cangetspecialaward();
}
inline void CSDTActDaySign::_internal_set_cangetspecialaward(bool value) {
  
  _impl_.cangetspecialaward_ = value;
}
inline void CSDTActDaySign::set_cangetspecialaward(bool value) {
  _internal_set_cangetspecialaward(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySign.CanGetSpecialAward)
}

// -------------------------------------------------------------------

// CSDTActDaySignDetail

// .msg.ActSignType Type = 1;
inline void CSDTActDaySignDetail::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::ActSignType CSDTActDaySignDetail::_internal_type() const {
  return static_cast< ::msg::ActSignType >(_impl_.type_);
}
inline ::msg::ActSignType CSDTActDaySignDetail::type() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySignDetail.Type)
  return _internal_type();
}
inline void CSDTActDaySignDetail::_internal_set_type(::msg::ActSignType value) {
  
  _impl_.type_ = value;
}
inline void CSDTActDaySignDetail::set_type(::msg::ActSignType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySignDetail.Type)
}

// int64 Time = 2;
inline void CSDTActDaySignDetail::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t CSDTActDaySignDetail::_internal_time() const {
  return _impl_.time_;
}
inline int64_t CSDTActDaySignDetail::time() const {
  // @@protoc_insertion_point(field_get:msg.CSDTActDaySignDetail.Time)
  return _internal_time();
}
inline void CSDTActDaySignDetail::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void CSDTActDaySignDetail::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:msg.CSDTActDaySignDetail.Time)
}

// -------------------------------------------------------------------

// CSDTGDCommonBin

// string Name = 1;
inline void CSDTGDCommonBin::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CSDTGDCommonBin::name() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGDCommonBin.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTGDCommonBin::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTGDCommonBin.Name)
}
inline std::string* CSDTGDCommonBin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.CSDTGDCommonBin.Name)
  return _s;
}
inline const std::string& CSDTGDCommonBin::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSDTGDCommonBin::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTGDCommonBin::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTGDCommonBin::release_name() {
  // @@protoc_insertion_point(field_release:msg.CSDTGDCommonBin.Name)
  return _impl_.name_.Release();
}
inline void CSDTGDCommonBin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTGDCommonBin.Name)
}

// string Md5sum = 2;
inline void CSDTGDCommonBin::clear_md5sum() {
  _impl_.md5sum_.ClearToEmpty();
}
inline const std::string& CSDTGDCommonBin::md5sum() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGDCommonBin.Md5sum)
  return _internal_md5sum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTGDCommonBin::set_md5sum(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5sum_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTGDCommonBin.Md5sum)
}
inline std::string* CSDTGDCommonBin::mutable_md5sum() {
  std::string* _s = _internal_mutable_md5sum();
  // @@protoc_insertion_point(field_mutable:msg.CSDTGDCommonBin.Md5sum)
  return _s;
}
inline const std::string& CSDTGDCommonBin::_internal_md5sum() const {
  return _impl_.md5sum_.Get();
}
inline void CSDTGDCommonBin::_internal_set_md5sum(const std::string& value) {
  
  _impl_.md5sum_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTGDCommonBin::_internal_mutable_md5sum() {
  
  return _impl_.md5sum_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTGDCommonBin::release_md5sum() {
  // @@protoc_insertion_point(field_release:msg.CSDTGDCommonBin.Md5sum)
  return _impl_.md5sum_.Release();
}
inline void CSDTGDCommonBin::set_allocated_md5sum(std::string* md5sum) {
  if (md5sum != nullptr) {
    
  } else {
    
  }
  _impl_.md5sum_.SetAllocated(md5sum, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5sum_.IsDefault()) {
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTGDCommonBin.Md5sum)
}

// .msg.GDBinType ConfTyp = 3;
inline void CSDTGDCommonBin::clear_conftyp() {
  _impl_.conftyp_ = 0;
}
inline ::msg::GDBinType CSDTGDCommonBin::_internal_conftyp() const {
  return static_cast< ::msg::GDBinType >(_impl_.conftyp_);
}
inline ::msg::GDBinType CSDTGDCommonBin::conftyp() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGDCommonBin.ConfTyp)
  return _internal_conftyp();
}
inline void CSDTGDCommonBin::_internal_set_conftyp(::msg::GDBinType value) {
  
  _impl_.conftyp_ = value;
}
inline void CSDTGDCommonBin::set_conftyp(::msg::GDBinType value) {
  _internal_set_conftyp(value);
  // @@protoc_insertion_point(field_set:msg.CSDTGDCommonBin.ConfTyp)
}

// bytes Datas = 4;
inline void CSDTGDCommonBin::clear_datas() {
  _impl_.datas_.ClearToEmpty();
}
inline const std::string& CSDTGDCommonBin::datas() const {
  // @@protoc_insertion_point(field_get:msg.CSDTGDCommonBin.Datas)
  return _internal_datas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTGDCommonBin::set_datas(ArgT0&& arg0, ArgT... args) {
 
 _impl_.datas_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTGDCommonBin.Datas)
}
inline std::string* CSDTGDCommonBin::mutable_datas() {
  std::string* _s = _internal_mutable_datas();
  // @@protoc_insertion_point(field_mutable:msg.CSDTGDCommonBin.Datas)
  return _s;
}
inline const std::string& CSDTGDCommonBin::_internal_datas() const {
  return _impl_.datas_.Get();
}
inline void CSDTGDCommonBin::_internal_set_datas(const std::string& value) {
  
  _impl_.datas_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTGDCommonBin::_internal_mutable_datas() {
  
  return _impl_.datas_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTGDCommonBin::release_datas() {
  // @@protoc_insertion_point(field_release:msg.CSDTGDCommonBin.Datas)
  return _impl_.datas_.Release();
}
inline void CSDTGDCommonBin::set_allocated_datas(std::string* datas) {
  if (datas != nullptr) {
    
  } else {
    
  }
  _impl_.datas_.SetAllocated(datas, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.datas_.IsDefault()) {
    _impl_.datas_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTGDCommonBin.Datas)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTTournamentClass

// uint64 ClassId = 1;
inline void CSDTTournamentClass::clear_classid() {
  _impl_.classid_ = uint64_t{0u};
}
inline uint64_t CSDTTournamentClass::_internal_classid() const {
  return _impl_.classid_;
}
inline uint64_t CSDTTournamentClass::classid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournamentClass.ClassId)
  return _internal_classid();
}
inline void CSDTTournamentClass::_internal_set_classid(uint64_t value) {
  
  _impl_.classid_ = value;
}
inline void CSDTTournamentClass::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournamentClass.ClassId)
}

// map<uint32, .msg.CSDTBattleGroup> Groups = 2;
inline int CSDTTournamentClass::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int CSDTTournamentClass::groups_size() const {
  return _internal_groups_size();
}
inline void CSDTTournamentClass::clear_groups() {
  _impl_.groups_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >&
CSDTTournamentClass::_internal_groups() const {
  return _impl_.groups_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >&
CSDTTournamentClass::groups() const {
  // @@protoc_insertion_point(field_map:msg.CSDTTournamentClass.Groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >*
CSDTTournamentClass::_internal_mutable_groups() {
  return _impl_.groups_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >*
CSDTTournamentClass::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTTournamentClass.Groups)
  return _internal_mutable_groups();
}

// int32 MaxPlayerCount = 3;
inline void CSDTTournamentClass::clear_maxplayercount() {
  _impl_.maxplayercount_ = 0;
}
inline int32_t CSDTTournamentClass::_internal_maxplayercount() const {
  return _impl_.maxplayercount_;
}
inline int32_t CSDTTournamentClass::maxplayercount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournamentClass.MaxPlayerCount)
  return _internal_maxplayercount();
}
inline void CSDTTournamentClass::_internal_set_maxplayercount(int32_t value) {
  
  _impl_.maxplayercount_ = value;
}
inline void CSDTTournamentClass::set_maxplayercount(int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournamentClass.MaxPlayerCount)
}

// bool Cancel = 4;
inline void CSDTTournamentClass::clear_cancel() {
  _impl_.cancel_ = false;
}
inline bool CSDTTournamentClass::_internal_cancel() const {
  return _impl_.cancel_;
}
inline bool CSDTTournamentClass::cancel() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTournamentClass.Cancel)
  return _internal_cancel();
}
inline void CSDTTournamentClass::_internal_set_cancel(bool value) {
  
  _impl_.cancel_ = value;
}
inline void CSDTTournamentClass::set_cancel(bool value) {
  _internal_set_cancel(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTournamentClass.Cancel)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTBattleGroup

// map<string, uint64> Players = 1;
inline int CSDTBattleGroup::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CSDTBattleGroup::players_size() const {
  return _internal_players_size();
}
inline void CSDTBattleGroup::clear_players() {
  _impl_.players_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
CSDTBattleGroup::_internal_players() const {
  return _impl_.players_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
CSDTBattleGroup::players() const {
  // @@protoc_insertion_point(field_map:msg.CSDTBattleGroup.Players)
  return _internal_players();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
CSDTBattleGroup::_internal_mutable_players() {
  return _impl_.players_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
CSDTBattleGroup::mutable_players() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTBattleGroup.Players)
  return _internal_mutable_players();
}

// int64 LastPvpEndTime = 2;
inline void CSDTBattleGroup::clear_lastpvpendtime() {
  _impl_.lastpvpendtime_ = int64_t{0};
}
inline int64_t CSDTBattleGroup::_internal_lastpvpendtime() const {
  return _impl_.lastpvpendtime_;
}
inline int64_t CSDTBattleGroup::lastpvpendtime() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBattleGroup.LastPvpEndTime)
  return _internal_lastpvpendtime();
}
inline void CSDTBattleGroup::_internal_set_lastpvpendtime(int64_t value) {
  
  _impl_.lastpvpendtime_ = value;
}
inline void CSDTBattleGroup::set_lastpvpendtime(int64_t value) {
  _internal_set_lastpvpendtime(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBattleGroup.LastPvpEndTime)
}

// uint64 GameID = 3;
inline void CSDTBattleGroup::clear_gameid() {
  _impl_.gameid_ = uint64_t{0u};
}
inline uint64_t CSDTBattleGroup::_internal_gameid() const {
  return _impl_.gameid_;
}
inline uint64_t CSDTBattleGroup::gameid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBattleGroup.GameID)
  return _internal_gameid();
}
inline void CSDTBattleGroup::_internal_set_gameid(uint64_t value) {
  
  _impl_.gameid_ = value;
}
inline void CSDTBattleGroup::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBattleGroup.GameID)
}

// bool IsFighting = 4;
inline void CSDTBattleGroup::clear_isfighting() {
  _impl_.isfighting_ = false;
}
inline bool CSDTBattleGroup::_internal_isfighting() const {
  return _impl_.isfighting_;
}
inline bool CSDTBattleGroup::isfighting() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBattleGroup.IsFighting)
  return _internal_isfighting();
}
inline void CSDTBattleGroup::_internal_set_isfighting(bool value) {
  
  _impl_.isfighting_ = value;
}
inline void CSDTBattleGroup::set_isfighting(bool value) {
  _internal_set_isfighting(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBattleGroup.IsFighting)
}

// uint64 RoundID = 5;
inline void CSDTBattleGroup::clear_roundid() {
  _impl_.roundid_ = uint64_t{0u};
}
inline uint64_t CSDTBattleGroup::_internal_roundid() const {
  return _impl_.roundid_;
}
inline uint64_t CSDTBattleGroup::roundid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBattleGroup.RoundID)
  return _internal_roundid();
}
inline void CSDTBattleGroup::_internal_set_roundid(uint64_t value) {
  
  _impl_.roundid_ = value;
}
inline void CSDTBattleGroup::set_roundid(uint64_t value) {
  _internal_set_roundid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBattleGroup.RoundID)
}

// map<string, uint64> GameIDs = 6;
inline int CSDTBattleGroup::_internal_gameids_size() const {
  return _impl_.gameids_.size();
}
inline int CSDTBattleGroup::gameids_size() const {
  return _internal_gameids_size();
}
inline void CSDTBattleGroup::clear_gameids() {
  _impl_.gameids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
CSDTBattleGroup::_internal_gameids() const {
  return _impl_.gameids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
CSDTBattleGroup::gameids() const {
  // @@protoc_insertion_point(field_map:msg.CSDTBattleGroup.GameIDs)
  return _internal_gameids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
CSDTBattleGroup::_internal_mutable_gameids() {
  return _impl_.gameids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
CSDTBattleGroup::mutable_gameids() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTBattleGroup.GameIDs)
  return _internal_mutable_gameids();
}

// -------------------------------------------------------------------

// CSDTEnrollEnd

// uint64 Id = 1;
inline void CSDTEnrollEnd::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CSDTEnrollEnd::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CSDTEnrollEnd::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTEnrollEnd.Id)
  return _internal_id();
}
inline void CSDTEnrollEnd::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTEnrollEnd::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTEnrollEnd.Id)
}

// repeated uint64 CancelClasses = 2;
inline int CSDTEnrollEnd::_internal_cancelclasses_size() const {
  return _impl_.cancelclasses_.size();
}
inline int CSDTEnrollEnd::cancelclasses_size() const {
  return _internal_cancelclasses_size();
}
inline void CSDTEnrollEnd::clear_cancelclasses() {
  _impl_.cancelclasses_.Clear();
}
inline uint64_t CSDTEnrollEnd::_internal_cancelclasses(int index) const {
  return _impl_.cancelclasses_.Get(index);
}
inline uint64_t CSDTEnrollEnd::cancelclasses(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTEnrollEnd.CancelClasses)
  return _internal_cancelclasses(index);
}
inline void CSDTEnrollEnd::set_cancelclasses(int index, uint64_t value) {
  _impl_.cancelclasses_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTEnrollEnd.CancelClasses)
}
inline void CSDTEnrollEnd::_internal_add_cancelclasses(uint64_t value) {
  _impl_.cancelclasses_.Add(value);
}
inline void CSDTEnrollEnd::add_cancelclasses(uint64_t value) {
  _internal_add_cancelclasses(value);
  // @@protoc_insertion_point(field_add:msg.CSDTEnrollEnd.CancelClasses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSDTEnrollEnd::_internal_cancelclasses() const {
  return _impl_.cancelclasses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSDTEnrollEnd::cancelclasses() const {
  // @@protoc_insertion_point(field_list:msg.CSDTEnrollEnd.CancelClasses)
  return _internal_cancelclasses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSDTEnrollEnd::_internal_mutable_cancelclasses() {
  return &_impl_.cancelclasses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSDTEnrollEnd::mutable_cancelclasses() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTEnrollEnd.CancelClasses)
  return _internal_mutable_cancelclasses();
}

// repeated .msg.CSDTTournamentClass ClassGroups = 3;
inline int CSDTEnrollEnd::_internal_classgroups_size() const {
  return _impl_.classgroups_.size();
}
inline int CSDTEnrollEnd::classgroups_size() const {
  return _internal_classgroups_size();
}
inline void CSDTEnrollEnd::clear_classgroups() {
  _impl_.classgroups_.Clear();
}
inline ::msg::CSDTTournamentClass* CSDTEnrollEnd::mutable_classgroups(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTEnrollEnd.ClassGroups)
  return _impl_.classgroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >*
CSDTEnrollEnd::mutable_classgroups() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTEnrollEnd.ClassGroups)
  return &_impl_.classgroups_;
}
inline const ::msg::CSDTTournamentClass& CSDTEnrollEnd::_internal_classgroups(int index) const {
  return _impl_.classgroups_.Get(index);
}
inline const ::msg::CSDTTournamentClass& CSDTEnrollEnd::classgroups(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTEnrollEnd.ClassGroups)
  return _internal_classgroups(index);
}
inline ::msg::CSDTTournamentClass* CSDTEnrollEnd::_internal_add_classgroups() {
  return _impl_.classgroups_.Add();
}
inline ::msg::CSDTTournamentClass* CSDTEnrollEnd::add_classgroups() {
  ::msg::CSDTTournamentClass* _add = _internal_add_classgroups();
  // @@protoc_insertion_point(field_add:msg.CSDTEnrollEnd.ClassGroups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTournamentClass >&
CSDTEnrollEnd::classgroups() const {
  // @@protoc_insertion_point(field_list:msg.CSDTEnrollEnd.ClassGroups)
  return _impl_.classgroups_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTNewTournament

// uint64 Id = 1;
inline void CSDTNewTournament::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CSDTNewTournament::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CSDTNewTournament::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTNewTournament.Id)
  return _internal_id();
}
inline void CSDTNewTournament::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTNewTournament::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTNewTournament.Id)
}

// map<uint64, int32> Classes = 2;
inline int CSDTNewTournament::_internal_classes_size() const {
  return _impl_.classes_.size();
}
inline int CSDTNewTournament::classes_size() const {
  return _internal_classes_size();
}
inline void CSDTNewTournament::clear_classes() {
  _impl_.classes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
CSDTNewTournament::_internal_classes() const {
  return _impl_.classes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
CSDTNewTournament::classes() const {
  // @@protoc_insertion_point(field_map:msg.CSDTNewTournament.Classes)
  return _internal_classes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
CSDTNewTournament::_internal_mutable_classes() {
  return _impl_.classes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
CSDTNewTournament::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTNewTournament.Classes)
  return _internal_mutable_classes();
}

// -------------------------------------------------------------------

// TournamentDesc

// uint64 TournamentID = 1;
inline void TournamentDesc::clear_tournamentid() {
  _impl_.tournamentid_ = uint64_t{0u};
}
inline uint64_t TournamentDesc::_internal_tournamentid() const {
  return _impl_.tournamentid_;
}
inline uint64_t TournamentDesc::tournamentid() const {
  // @@protoc_insertion_point(field_get:msg.TournamentDesc.TournamentID)
  return _internal_tournamentid();
}
inline void TournamentDesc::_internal_set_tournamentid(uint64_t value) {
  
  _impl_.tournamentid_ = value;
}
inline void TournamentDesc::set_tournamentid(uint64_t value) {
  _internal_set_tournamentid(value);
  // @@protoc_insertion_point(field_set:msg.TournamentDesc.TournamentID)
}

// uint64 TNClass = 2;
inline void TournamentDesc::clear_tnclass() {
  _impl_.tnclass_ = uint64_t{0u};
}
inline uint64_t TournamentDesc::_internal_tnclass() const {
  return _impl_.tnclass_;
}
inline uint64_t TournamentDesc::tnclass() const {
  // @@protoc_insertion_point(field_get:msg.TournamentDesc.TNClass)
  return _internal_tnclass();
}
inline void TournamentDesc::_internal_set_tnclass(uint64_t value) {
  
  _impl_.tnclass_ = value;
}
inline void TournamentDesc::set_tnclass(uint64_t value) {
  _internal_set_tnclass(value);
  // @@protoc_insertion_point(field_set:msg.TournamentDesc.TNClass)
}

// int32 GroupIndex = 3;
inline void TournamentDesc::clear_groupindex() {
  _impl_.groupindex_ = 0;
}
inline int32_t TournamentDesc::_internal_groupindex() const {
  return _impl_.groupindex_;
}
inline int32_t TournamentDesc::groupindex() const {
  // @@protoc_insertion_point(field_get:msg.TournamentDesc.GroupIndex)
  return _internal_groupindex();
}
inline void TournamentDesc::_internal_set_groupindex(int32_t value) {
  
  _impl_.groupindex_ = value;
}
inline void TournamentDesc::set_groupindex(int32_t value) {
  _internal_set_groupindex(value);
  // @@protoc_insertion_point(field_set:msg.TournamentDesc.GroupIndex)
}

// uint64 TNClassRound = 4;
inline void TournamentDesc::clear_tnclassround() {
  _impl_.tnclassround_ = uint64_t{0u};
}
inline uint64_t TournamentDesc::_internal_tnclassround() const {
  return _impl_.tnclassround_;
}
inline uint64_t TournamentDesc::tnclassround() const {
  // @@protoc_insertion_point(field_get:msg.TournamentDesc.TNClassRound)
  return _internal_tnclassround();
}
inline void TournamentDesc::_internal_set_tnclassround(uint64_t value) {
  
  _impl_.tnclassround_ = value;
}
inline void TournamentDesc::set_tnclassround(uint64_t value) {
  _internal_set_tnclassround(value);
  // @@protoc_insertion_point(field_set:msg.TournamentDesc.TNClassRound)
}

// -------------------------------------------------------------------

// TournamentRoom

// uint64 GameStartTime = 1;
inline void TournamentRoom::clear_gamestarttime() {
  _impl_.gamestarttime_ = uint64_t{0u};
}
inline uint64_t TournamentRoom::_internal_gamestarttime() const {
  return _impl_.gamestarttime_;
}
inline uint64_t TournamentRoom::gamestarttime() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.GameStartTime)
  return _internal_gamestarttime();
}
inline void TournamentRoom::_internal_set_gamestarttime(uint64_t value) {
  
  _impl_.gamestarttime_ = value;
}
inline void TournamentRoom::set_gamestarttime(uint64_t value) {
  _internal_set_gamestarttime(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.GameStartTime)
}

// repeated string ReadyIds = 2;
inline int TournamentRoom::_internal_readyids_size() const {
  return _impl_.readyids_.size();
}
inline int TournamentRoom::readyids_size() const {
  return _internal_readyids_size();
}
inline void TournamentRoom::clear_readyids() {
  _impl_.readyids_.Clear();
}
inline std::string* TournamentRoom::add_readyids() {
  std::string* _s = _internal_add_readyids();
  // @@protoc_insertion_point(field_add_mutable:msg.TournamentRoom.ReadyIds)
  return _s;
}
inline const std::string& TournamentRoom::_internal_readyids(int index) const {
  return _impl_.readyids_.Get(index);
}
inline const std::string& TournamentRoom::readyids(int index) const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.ReadyIds)
  return _internal_readyids(index);
}
inline std::string* TournamentRoom::mutable_readyids(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TournamentRoom.ReadyIds)
  return _impl_.readyids_.Mutable(index);
}
inline void TournamentRoom::set_readyids(int index, const std::string& value) {
  _impl_.readyids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.ReadyIds)
}
inline void TournamentRoom::set_readyids(int index, std::string&& value) {
  _impl_.readyids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.ReadyIds)
}
inline void TournamentRoom::set_readyids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.readyids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.TournamentRoom.ReadyIds)
}
inline void TournamentRoom::set_readyids(int index, const char* value, size_t size) {
  _impl_.readyids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.TournamentRoom.ReadyIds)
}
inline std::string* TournamentRoom::_internal_add_readyids() {
  return _impl_.readyids_.Add();
}
inline void TournamentRoom::add_readyids(const std::string& value) {
  _impl_.readyids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.TournamentRoom.ReadyIds)
}
inline void TournamentRoom::add_readyids(std::string&& value) {
  _impl_.readyids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.TournamentRoom.ReadyIds)
}
inline void TournamentRoom::add_readyids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.readyids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.TournamentRoom.ReadyIds)
}
inline void TournamentRoom::add_readyids(const char* value, size_t size) {
  _impl_.readyids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.TournamentRoom.ReadyIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TournamentRoom::readyids() const {
  // @@protoc_insertion_point(field_list:msg.TournamentRoom.ReadyIds)
  return _impl_.readyids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TournamentRoom::mutable_readyids() {
  // @@protoc_insertion_point(field_mutable_list:msg.TournamentRoom.ReadyIds)
  return &_impl_.readyids_;
}

// uint32 SelfSlot = 3;
inline void TournamentRoom::clear_selfslot() {
  _impl_.selfslot_ = 0u;
}
inline uint32_t TournamentRoom::_internal_selfslot() const {
  return _impl_.selfslot_;
}
inline uint32_t TournamentRoom::selfslot() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.SelfSlot)
  return _internal_selfslot();
}
inline void TournamentRoom::_internal_set_selfslot(uint32_t value) {
  
  _impl_.selfslot_ = value;
}
inline void TournamentRoom::set_selfslot(uint32_t value) {
  _internal_set_selfslot(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.SelfSlot)
}

// repeated .msg.PvpPlayerData PlayerDatas = 4;
inline int TournamentRoom::_internal_playerdatas_size() const {
  return _impl_.playerdatas_.size();
}
inline int TournamentRoom::playerdatas_size() const {
  return _internal_playerdatas_size();
}
inline void TournamentRoom::clear_playerdatas() {
  _impl_.playerdatas_.Clear();
}
inline ::msg::PvpPlayerData* TournamentRoom::mutable_playerdatas(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TournamentRoom.PlayerDatas)
  return _impl_.playerdatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PvpPlayerData >*
TournamentRoom::mutable_playerdatas() {
  // @@protoc_insertion_point(field_mutable_list:msg.TournamentRoom.PlayerDatas)
  return &_impl_.playerdatas_;
}
inline const ::msg::PvpPlayerData& TournamentRoom::_internal_playerdatas(int index) const {
  return _impl_.playerdatas_.Get(index);
}
inline const ::msg::PvpPlayerData& TournamentRoom::playerdatas(int index) const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.PlayerDatas)
  return _internal_playerdatas(index);
}
inline ::msg::PvpPlayerData* TournamentRoom::_internal_add_playerdatas() {
  return _impl_.playerdatas_.Add();
}
inline ::msg::PvpPlayerData* TournamentRoom::add_playerdatas() {
  ::msg::PvpPlayerData* _add = _internal_add_playerdatas();
  // @@protoc_insertion_point(field_add:msg.TournamentRoom.PlayerDatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PvpPlayerData >&
TournamentRoom::playerdatas() const {
  // @@protoc_insertion_point(field_list:msg.TournamentRoom.PlayerDatas)
  return _impl_.playerdatas_;
}

// int32 MaxPlayerCount = 5;
inline void TournamentRoom::clear_maxplayercount() {
  _impl_.maxplayercount_ = 0;
}
inline int32_t TournamentRoom::_internal_maxplayercount() const {
  return _impl_.maxplayercount_;
}
inline int32_t TournamentRoom::maxplayercount() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.MaxPlayerCount)
  return _internal_maxplayercount();
}
inline void TournamentRoom::_internal_set_maxplayercount(int32_t value) {
  
  _impl_.maxplayercount_ = value;
}
inline void TournamentRoom::set_maxplayercount(int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.MaxPlayerCount)
}

// uint64 TournamentID = 6;
inline void TournamentRoom::clear_tournamentid() {
  _impl_.tournamentid_ = uint64_t{0u};
}
inline uint64_t TournamentRoom::_internal_tournamentid() const {
  return _impl_.tournamentid_;
}
inline uint64_t TournamentRoom::tournamentid() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.TournamentID)
  return _internal_tournamentid();
}
inline void TournamentRoom::_internal_set_tournamentid(uint64_t value) {
  
  _impl_.tournamentid_ = value;
}
inline void TournamentRoom::set_tournamentid(uint64_t value) {
  _internal_set_tournamentid(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.TournamentID)
}

// uint64 ClassID = 7;
inline void TournamentRoom::clear_classid() {
  _impl_.classid_ = uint64_t{0u};
}
inline uint64_t TournamentRoom::_internal_classid() const {
  return _impl_.classid_;
}
inline uint64_t TournamentRoom::classid() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.ClassID)
  return _internal_classid();
}
inline void TournamentRoom::_internal_set_classid(uint64_t value) {
  
  _impl_.classid_ = value;
}
inline void TournamentRoom::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.ClassID)
}

// uint64 RoundID = 8;
inline void TournamentRoom::clear_roundid() {
  _impl_.roundid_ = uint64_t{0u};
}
inline uint64_t TournamentRoom::_internal_roundid() const {
  return _impl_.roundid_;
}
inline uint64_t TournamentRoom::roundid() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.RoundID)
  return _internal_roundid();
}
inline void TournamentRoom::_internal_set_roundid(uint64_t value) {
  
  _impl_.roundid_ = value;
}
inline void TournamentRoom::set_roundid(uint64_t value) {
  _internal_set_roundid(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.RoundID)
}

// int32 GroupIndex = 9;
inline void TournamentRoom::clear_groupindex() {
  _impl_.groupindex_ = 0;
}
inline int32_t TournamentRoom::_internal_groupindex() const {
  return _impl_.groupindex_;
}
inline int32_t TournamentRoom::groupindex() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.GroupIndex)
  return _internal_groupindex();
}
inline void TournamentRoom::_internal_set_groupindex(int32_t value) {
  
  _impl_.groupindex_ = value;
}
inline void TournamentRoom::set_groupindex(int32_t value) {
  _internal_set_groupindex(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.GroupIndex)
}

// .msg.TeamState Status = 10;
inline void TournamentRoom::clear_status() {
  _impl_.status_ = 0;
}
inline ::msg::TeamState TournamentRoom::_internal_status() const {
  return static_cast< ::msg::TeamState >(_impl_.status_);
}
inline ::msg::TeamState TournamentRoom::status() const {
  // @@protoc_insertion_point(field_get:msg.TournamentRoom.Status)
  return _internal_status();
}
inline void TournamentRoom::_internal_set_status(::msg::TeamState value) {
  
  _impl_.status_ = value;
}
inline void TournamentRoom::set_status(::msg::TeamState value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:msg.TournamentRoom.Status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlayerTournament

// string Id = 1;
inline void PlayerTournament::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PlayerTournament::id() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournament.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerTournament::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerTournament.Id)
}
inline std::string* PlayerTournament::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.PlayerTournament.Id)
  return _s;
}
inline const std::string& PlayerTournament::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PlayerTournament::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerTournament::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerTournament::release_id() {
  // @@protoc_insertion_point(field_release:msg.PlayerTournament.Id)
  return _impl_.id_.Release();
}
inline void PlayerTournament::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerTournament.Id)
}

// map<uint64, .msg.PlayerTournamentData> Data = 2;
inline int PlayerTournament::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int PlayerTournament::data_size() const {
  return _internal_data_size();
}
inline void PlayerTournament::clear_data() {
  _impl_.data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >&
PlayerTournament::_internal_data() const {
  return _impl_.data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >&
PlayerTournament::data() const {
  // @@protoc_insertion_point(field_map:msg.PlayerTournament.Data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >*
PlayerTournament::_internal_mutable_data() {
  return _impl_.data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >*
PlayerTournament::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerTournament.Data)
  return _internal_mutable_data();
}

// map<uint32, uint32> Points = 3;
inline int PlayerTournament::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PlayerTournament::points_size() const {
  return _internal_points_size();
}
inline void PlayerTournament::clear_points() {
  _impl_.points_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PlayerTournament::_internal_points() const {
  return _impl_.points_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PlayerTournament::points() const {
  // @@protoc_insertion_point(field_map:msg.PlayerTournament.Points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PlayerTournament::_internal_mutable_points() {
  return _impl_.points_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PlayerTournament::mutable_points() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerTournament.Points)
  return _internal_mutable_points();
}

// map<uint64, uint32> EnrollCount = 4;
inline int PlayerTournament::_internal_enrollcount_size() const {
  return _impl_.enrollcount_.size();
}
inline int PlayerTournament::enrollcount_size() const {
  return _internal_enrollcount_size();
}
inline void PlayerTournament::clear_enrollcount() {
  _impl_.enrollcount_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
PlayerTournament::_internal_enrollcount() const {
  return _impl_.enrollcount_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >&
PlayerTournament::enrollcount() const {
  // @@protoc_insertion_point(field_map:msg.PlayerTournament.EnrollCount)
  return _internal_enrollcount();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
PlayerTournament::_internal_mutable_enrollcount() {
  return _impl_.enrollcount_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >*
PlayerTournament::mutable_enrollcount() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerTournament.EnrollCount)
  return _internal_mutable_enrollcount();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlayerTournamentData

// uint64 Id = 1;
inline void PlayerTournamentData::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t PlayerTournamentData::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t PlayerTournamentData::id() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.Id)
  return _internal_id();
}
inline void PlayerTournamentData::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void PlayerTournamentData::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.Id)
}

// uint64 ClassId = 2;
inline void PlayerTournamentData::clear_classid() {
  _impl_.classid_ = uint64_t{0u};
}
inline uint64_t PlayerTournamentData::_internal_classid() const {
  return _impl_.classid_;
}
inline uint64_t PlayerTournamentData::classid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.ClassId)
  return _internal_classid();
}
inline void PlayerTournamentData::_internal_set_classid(uint64_t value) {
  
  _impl_.classid_ = value;
}
inline void PlayerTournamentData::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.ClassId)
}

// map<uint32, bool> GetReward = 3;
inline int PlayerTournamentData::_internal_getreward_size() const {
  return _impl_.getreward_.size();
}
inline int PlayerTournamentData::getreward_size() const {
  return _internal_getreward_size();
}
inline void PlayerTournamentData::clear_getreward() {
  _impl_.getreward_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
PlayerTournamentData::_internal_getreward() const {
  return _impl_.getreward_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
PlayerTournamentData::getreward() const {
  // @@protoc_insertion_point(field_map:msg.PlayerTournamentData.GetReward)
  return _internal_getreward();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
PlayerTournamentData::_internal_mutable_getreward() {
  return _impl_.getreward_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
PlayerTournamentData::mutable_getreward() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerTournamentData.GetReward)
  return _internal_mutable_getreward();
}

// map<uint32, uint32> Points = 4;
inline int PlayerTournamentData::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int PlayerTournamentData::points_size() const {
  return _internal_points_size();
}
inline void PlayerTournamentData::clear_points() {
  _impl_.points_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PlayerTournamentData::_internal_points() const {
  return _impl_.points_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PlayerTournamentData::points() const {
  // @@protoc_insertion_point(field_map:msg.PlayerTournamentData.Points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PlayerTournamentData::_internal_mutable_points() {
  return _impl_.points_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PlayerTournamentData::mutable_points() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerTournamentData.Points)
  return _internal_mutable_points();
}

// uint64 CurRound = 5;
inline void PlayerTournamentData::clear_curround() {
  _impl_.curround_ = uint64_t{0u};
}
inline uint64_t PlayerTournamentData::_internal_curround() const {
  return _impl_.curround_;
}
inline uint64_t PlayerTournamentData::curround() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.CurRound)
  return _internal_curround();
}
inline void PlayerTournamentData::_internal_set_curround(uint64_t value) {
  
  _impl_.curround_ = value;
}
inline void PlayerTournamentData::set_curround(uint64_t value) {
  _internal_set_curround(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.CurRound)
}

// uint64 GameId = 6;
inline void PlayerTournamentData::clear_gameid() {
  _impl_.gameid_ = uint64_t{0u};
}
inline uint64_t PlayerTournamentData::_internal_gameid() const {
  return _impl_.gameid_;
}
inline uint64_t PlayerTournamentData::gameid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.GameId)
  return _internal_gameid();
}
inline void PlayerTournamentData::_internal_set_gameid(uint64_t value) {
  
  _impl_.gameid_ = value;
}
inline void PlayerTournamentData::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.GameId)
}

// bool Out = 7;
inline void PlayerTournamentData::clear_out() {
  _impl_.out_ = false;
}
inline bool PlayerTournamentData::_internal_out() const {
  return _impl_.out_;
}
inline bool PlayerTournamentData::out() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.Out)
  return _internal_out();
}
inline void PlayerTournamentData::_internal_set_out(bool value) {
  
  _impl_.out_ = value;
}
inline void PlayerTournamentData::set_out(bool value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.Out)
}

// int64 SignUpTime = 8;
inline void PlayerTournamentData::clear_signuptime() {
  _impl_.signuptime_ = int64_t{0};
}
inline int64_t PlayerTournamentData::_internal_signuptime() const {
  return _impl_.signuptime_;
}
inline int64_t PlayerTournamentData::signuptime() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.SignUpTime)
  return _internal_signuptime();
}
inline void PlayerTournamentData::_internal_set_signuptime(int64_t value) {
  
  _impl_.signuptime_ = value;
}
inline void PlayerTournamentData::set_signuptime(int64_t value) {
  _internal_set_signuptime(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.SignUpTime)
}

// map<uint64, .msg.RoundData> Data = 9;
inline int PlayerTournamentData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int PlayerTournamentData::data_size() const {
  return _internal_data_size();
}
inline void PlayerTournamentData::clear_data() {
  _impl_.data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >&
PlayerTournamentData::_internal_data() const {
  return _impl_.data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >&
PlayerTournamentData::data() const {
  // @@protoc_insertion_point(field_map:msg.PlayerTournamentData.Data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >*
PlayerTournamentData::_internal_mutable_data() {
  return _impl_.data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >*
PlayerTournamentData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerTournamentData.Data)
  return _internal_mutable_data();
}

// uint64 PvpId = 10;
inline void PlayerTournamentData::clear_pvpid() {
  _impl_.pvpid_ = uint64_t{0u};
}
inline uint64_t PlayerTournamentData::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline uint64_t PlayerTournamentData::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.PvpId)
  return _internal_pvpid();
}
inline void PlayerTournamentData::_internal_set_pvpid(uint64_t value) {
  
  _impl_.pvpid_ = value;
}
inline void PlayerTournamentData::set_pvpid(uint64_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.PvpId)
}

// int64 PvpEndTime = 11;
inline void PlayerTournamentData::clear_pvpendtime() {
  _impl_.pvpendtime_ = int64_t{0};
}
inline int64_t PlayerTournamentData::_internal_pvpendtime() const {
  return _impl_.pvpendtime_;
}
inline int64_t PlayerTournamentData::pvpendtime() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTournamentData.PvpEndTime)
  return _internal_pvpendtime();
}
inline void PlayerTournamentData::_internal_set_pvpendtime(int64_t value) {
  
  _impl_.pvpendtime_ = value;
}
inline void PlayerTournamentData::set_pvpendtime(int64_t value) {
  _internal_set_pvpendtime(value);
  // @@protoc_insertion_point(field_set:msg.PlayerTournamentData.PvpEndTime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RoundData

// uint64 Round = 1;
inline void RoundData::clear_round() {
  _impl_.round_ = uint64_t{0u};
}
inline uint64_t RoundData::_internal_round() const {
  return _impl_.round_;
}
inline uint64_t RoundData::round() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.Round)
  return _internal_round();
}
inline void RoundData::_internal_set_round(uint64_t value) {
  
  _impl_.round_ = value;
}
inline void RoundData::set_round(uint64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.Round)
}

// uint32 Rank = 2;
inline void RoundData::clear_rank() {
  _impl_.rank_ = 0u;
}
inline uint32_t RoundData::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t RoundData::rank() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.Rank)
  return _internal_rank();
}
inline void RoundData::_internal_set_rank(uint32_t value) {
  
  _impl_.rank_ = value;
}
inline void RoundData::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.Rank)
}

// map<uint32, uint32> Points = 3;
inline int RoundData::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int RoundData::points_size() const {
  return _internal_points_size();
}
inline void RoundData::clear_points() {
  _impl_.points_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
RoundData::_internal_points() const {
  return _impl_.points_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
RoundData::points() const {
  // @@protoc_insertion_point(field_map:msg.RoundData.Points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
RoundData::_internal_mutable_points() {
  return _impl_.points_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
RoundData::mutable_points() {
  // @@protoc_insertion_point(field_mutable_map:msg.RoundData.Points)
  return _internal_mutable_points();
}

// uint32 FightTimes = 4;
inline void RoundData::clear_fighttimes() {
  _impl_.fighttimes_ = 0u;
}
inline uint32_t RoundData::_internal_fighttimes() const {
  return _impl_.fighttimes_;
}
inline uint32_t RoundData::fighttimes() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.FightTimes)
  return _internal_fighttimes();
}
inline void RoundData::_internal_set_fighttimes(uint32_t value) {
  
  _impl_.fighttimes_ = value;
}
inline void RoundData::set_fighttimes(uint32_t value) {
  _internal_set_fighttimes(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.FightTimes)
}

// uint32 TotalRank = 5;
inline void RoundData::clear_totalrank() {
  _impl_.totalrank_ = 0u;
}
inline uint32_t RoundData::_internal_totalrank() const {
  return _impl_.totalrank_;
}
inline uint32_t RoundData::totalrank() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.TotalRank)
  return _internal_totalrank();
}
inline void RoundData::_internal_set_totalrank(uint32_t value) {
  
  _impl_.totalrank_ = value;
}
inline void RoundData::set_totalrank(uint32_t value) {
  _internal_set_totalrank(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.TotalRank)
}

// uint32 TopCnt = 6;
inline void RoundData::clear_topcnt() {
  _impl_.topcnt_ = 0u;
}
inline uint32_t RoundData::_internal_topcnt() const {
  return _impl_.topcnt_;
}
inline uint32_t RoundData::topcnt() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.TopCnt)
  return _internal_topcnt();
}
inline void RoundData::_internal_set_topcnt(uint32_t value) {
  
  _impl_.topcnt_ = value;
}
inline void RoundData::set_topcnt(uint32_t value) {
  _internal_set_topcnt(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.TopCnt)
}

// uint32 SecondCnt = 7;
inline void RoundData::clear_secondcnt() {
  _impl_.secondcnt_ = 0u;
}
inline uint32_t RoundData::_internal_secondcnt() const {
  return _impl_.secondcnt_;
}
inline uint32_t RoundData::secondcnt() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.SecondCnt)
  return _internal_secondcnt();
}
inline void RoundData::_internal_set_secondcnt(uint32_t value) {
  
  _impl_.secondcnt_ = value;
}
inline void RoundData::set_secondcnt(uint32_t value) {
  _internal_set_secondcnt(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.SecondCnt)
}

// uint32 ThirdCnt = 8;
inline void RoundData::clear_thirdcnt() {
  _impl_.thirdcnt_ = 0u;
}
inline uint32_t RoundData::_internal_thirdcnt() const {
  return _impl_.thirdcnt_;
}
inline uint32_t RoundData::thirdcnt() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.ThirdCnt)
  return _internal_thirdcnt();
}
inline void RoundData::_internal_set_thirdcnt(uint32_t value) {
  
  _impl_.thirdcnt_ = value;
}
inline void RoundData::set_thirdcnt(uint32_t value) {
  _internal_set_thirdcnt(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.ThirdCnt)
}

// uint32 WinTimes = 9;
inline void RoundData::clear_wintimes() {
  _impl_.wintimes_ = 0u;
}
inline uint32_t RoundData::_internal_wintimes() const {
  return _impl_.wintimes_;
}
inline uint32_t RoundData::wintimes() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.WinTimes)
  return _internal_wintimes();
}
inline void RoundData::_internal_set_wintimes(uint32_t value) {
  
  _impl_.wintimes_ = value;
}
inline void RoundData::set_wintimes(uint32_t value) {
  _internal_set_wintimes(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.WinTimes)
}

// uint32 LostBlood = 10;
inline void RoundData::clear_lostblood() {
  _impl_.lostblood_ = 0u;
}
inline uint32_t RoundData::_internal_lostblood() const {
  return _impl_.lostblood_;
}
inline uint32_t RoundData::lostblood() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.LostBlood)
  return _internal_lostblood();
}
inline void RoundData::_internal_set_lostblood(uint32_t value) {
  
  _impl_.lostblood_ = value;
}
inline void RoundData::set_lostblood(uint32_t value) {
  _internal_set_lostblood(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.LostBlood)
}

// uint32 Damage = 11;
inline void RoundData::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t RoundData::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t RoundData::damage() const {
  // @@protoc_insertion_point(field_get:msg.RoundData.Damage)
  return _internal_damage();
}
inline void RoundData::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void RoundData::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:msg.RoundData.Damage)
}

// -------------------------------------------------------------------

// GuildBaseInfo

// string ID = 1;
inline void GuildBaseInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.ID)
}
inline std::string* GuildBaseInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.ID)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void GuildBaseInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.ID)
  return _impl_.id_.Release();
}
inline void GuildBaseInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.ID)
}

// string Name = 2;
inline void GuildBaseInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Name)
}
inline std::string* GuildBaseInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.Name)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GuildBaseInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.Name)
  return _impl_.name_.Release();
}
inline void GuildBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.Name)
}

// int32 Sign = 3;
inline void GuildBaseInfo::clear_sign() {
  _impl_.sign_ = 0;
}
inline int32_t GuildBaseInfo::_internal_sign() const {
  return _impl_.sign_;
}
inline int32_t GuildBaseInfo::sign() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Sign)
  return _internal_sign();
}
inline void GuildBaseInfo::_internal_set_sign(int32_t value) {
  
  _impl_.sign_ = value;
}
inline void GuildBaseInfo::set_sign(int32_t value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Sign)
}

// string Notice = 4;
inline void GuildBaseInfo::clear_notice() {
  _impl_.notice_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::notice() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Notice)
  return _internal_notice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_notice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notice_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Notice)
}
inline std::string* GuildBaseInfo::mutable_notice() {
  std::string* _s = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.Notice)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_notice() const {
  return _impl_.notice_.Get();
}
inline void GuildBaseInfo::_internal_set_notice(const std::string& value) {
  
  _impl_.notice_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_notice() {
  
  return _impl_.notice_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_notice() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.Notice)
  return _impl_.notice_.Release();
}
inline void GuildBaseInfo::set_allocated_notice(std::string* notice) {
  if (notice != nullptr) {
    
  } else {
    
  }
  _impl_.notice_.SetAllocated(notice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notice_.IsDefault()) {
    _impl_.notice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.Notice)
}

// string RecruitNotice = 5;
inline void GuildBaseInfo::clear_recruitnotice() {
  _impl_.recruitnotice_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::recruitnotice() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.RecruitNotice)
  return _internal_recruitnotice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_recruitnotice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recruitnotice_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.RecruitNotice)
}
inline std::string* GuildBaseInfo::mutable_recruitnotice() {
  std::string* _s = _internal_mutable_recruitnotice();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.RecruitNotice)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_recruitnotice() const {
  return _impl_.recruitnotice_.Get();
}
inline void GuildBaseInfo::_internal_set_recruitnotice(const std::string& value) {
  
  _impl_.recruitnotice_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_recruitnotice() {
  
  return _impl_.recruitnotice_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_recruitnotice() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.RecruitNotice)
  return _impl_.recruitnotice_.Release();
}
inline void GuildBaseInfo::set_allocated_recruitnotice(std::string* recruitnotice) {
  if (recruitnotice != nullptr) {
    
  } else {
    
  }
  _impl_.recruitnotice_.SetAllocated(recruitnotice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recruitnotice_.IsDefault()) {
    _impl_.recruitnotice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.RecruitNotice)
}

// repeated int32 Tags = 6;
inline int GuildBaseInfo::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int GuildBaseInfo::tags_size() const {
  return _internal_tags_size();
}
inline void GuildBaseInfo::clear_tags() {
  _impl_.tags_.Clear();
}
inline int32_t GuildBaseInfo::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline int32_t GuildBaseInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Tags)
  return _internal_tags(index);
}
inline void GuildBaseInfo::set_tags(int index, int32_t value) {
  _impl_.tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Tags)
}
inline void GuildBaseInfo::_internal_add_tags(int32_t value) {
  _impl_.tags_.Add(value);
}
inline void GuildBaseInfo::add_tags(int32_t value) {
  _internal_add_tags(value);
  // @@protoc_insertion_point(field_add:msg.GuildBaseInfo.Tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GuildBaseInfo::_internal_tags() const {
  return _impl_.tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GuildBaseInfo::tags() const {
  // @@protoc_insertion_point(field_list:msg.GuildBaseInfo.Tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GuildBaseInfo::_internal_mutable_tags() {
  return &_impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GuildBaseInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:msg.GuildBaseInfo.Tags)
  return _internal_mutable_tags();
}

// string Country = 7;
inline void GuildBaseInfo::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::country() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Country)
}
inline std::string* GuildBaseInfo::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.Country)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_country() const {
  return _impl_.country_.Get();
}
inline void GuildBaseInfo::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_country() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.Country)
  return _impl_.country_.Release();
}
inline void GuildBaseInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.Country)
}

// string Language = 8;
inline void GuildBaseInfo::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::language() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Language)
}
inline std::string* GuildBaseInfo::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.Language)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_language() const {
  return _impl_.language_.Get();
}
inline void GuildBaseInfo::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_language() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.Language)
  return _impl_.language_.Release();
}
inline void GuildBaseInfo::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.Language)
}

// bool RequirePermit = 9;
inline void GuildBaseInfo::clear_requirepermit() {
  _impl_.requirepermit_ = false;
}
inline bool GuildBaseInfo::_internal_requirepermit() const {
  return _impl_.requirepermit_;
}
inline bool GuildBaseInfo::requirepermit() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.RequirePermit)
  return _internal_requirepermit();
}
inline void GuildBaseInfo::_internal_set_requirepermit(bool value) {
  
  _impl_.requirepermit_ = value;
}
inline void GuildBaseInfo::set_requirepermit(bool value) {
  _internal_set_requirepermit(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.RequirePermit)
}

// int32 RequireCup = 10;
inline void GuildBaseInfo::clear_requirecup() {
  _impl_.requirecup_ = 0;
}
inline int32_t GuildBaseInfo::_internal_requirecup() const {
  return _impl_.requirecup_;
}
inline int32_t GuildBaseInfo::requirecup() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.RequireCup)
  return _internal_requirecup();
}
inline void GuildBaseInfo::_internal_set_requirecup(int32_t value) {
  
  _impl_.requirecup_ = value;
}
inline void GuildBaseInfo::set_requirecup(int32_t value) {
  _internal_set_requirecup(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.RequireCup)
}

// int32 MemberCount = 11;
inline void GuildBaseInfo::clear_membercount() {
  _impl_.membercount_ = 0;
}
inline int32_t GuildBaseInfo::_internal_membercount() const {
  return _impl_.membercount_;
}
inline int32_t GuildBaseInfo::membercount() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.MemberCount)
  return _internal_membercount();
}
inline void GuildBaseInfo::_internal_set_membercount(int32_t value) {
  
  _impl_.membercount_ = value;
}
inline void GuildBaseInfo::set_membercount(int32_t value) {
  _internal_set_membercount(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.MemberCount)
}

// uint32 Province = 12;
inline void GuildBaseInfo::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t GuildBaseInfo::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t GuildBaseInfo::province() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Province)
  return _internal_province();
}
inline void GuildBaseInfo::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void GuildBaseInfo::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Province)
}

// string Owner = 13;
inline void GuildBaseInfo::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::owner() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Owner)
}
inline std::string* GuildBaseInfo::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.Owner)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void GuildBaseInfo::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_owner() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.Owner)
  return _impl_.owner_.Release();
}
inline void GuildBaseInfo::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.Owner)
}

// string OwnerName = 14;
inline void GuildBaseInfo::clear_ownername() {
  _impl_.ownername_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::ownername() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.OwnerName)
  return _internal_ownername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_ownername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.OwnerName)
}
inline std::string* GuildBaseInfo::mutable_ownername() {
  std::string* _s = _internal_mutable_ownername();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.OwnerName)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_ownername() const {
  return _impl_.ownername_.Get();
}
inline void GuildBaseInfo::_internal_set_ownername(const std::string& value) {
  
  _impl_.ownername_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_ownername() {
  
  return _impl_.ownername_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_ownername() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.OwnerName)
  return _impl_.ownername_.Release();
}
inline void GuildBaseInfo::set_allocated_ownername(std::string* ownername) {
  if (ownername != nullptr) {
    
  } else {
    
  }
  _impl_.ownername_.SetAllocated(ownername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownername_.IsDefault()) {
    _impl_.ownername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.OwnerName)
}

// int32 Level = 15;
inline void GuildBaseInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t GuildBaseInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t GuildBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Level)
  return _internal_level();
}
inline void GuildBaseInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void GuildBaseInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Level)
}

// int32 Exp = 16;
inline void GuildBaseInfo::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t GuildBaseInfo::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t GuildBaseInfo::exp() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.Exp)
  return _internal_exp();
}
inline void GuildBaseInfo::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void GuildBaseInfo::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.Exp)
}

// string ChannelUsrID = 17;
inline void GuildBaseInfo::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& GuildBaseInfo::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.GuildBaseInfo.ChannelUsrID)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildBaseInfo::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildBaseInfo.ChannelUsrID)
}
inline std::string* GuildBaseInfo::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.GuildBaseInfo.ChannelUsrID)
  return _s;
}
inline const std::string& GuildBaseInfo::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void GuildBaseInfo::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildBaseInfo::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.GuildBaseInfo.ChannelUsrID)
  return _impl_.channelusrid_.Release();
}
inline void GuildBaseInfo::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildBaseInfo.ChannelUsrID)
}

// -------------------------------------------------------------------

// GuildAttr

// string Name = 1;
inline void GuildAttr::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GuildAttr::name() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Name)
}
inline std::string* GuildAttr::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.Name)
  return _s;
}
inline const std::string& GuildAttr::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GuildAttr::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_name() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.Name)
  return _impl_.name_.Release();
}
inline void GuildAttr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.Name)
}

// int32 Sign = 2;
inline void GuildAttr::clear_sign() {
  _impl_.sign_ = 0;
}
inline int32_t GuildAttr::_internal_sign() const {
  return _impl_.sign_;
}
inline int32_t GuildAttr::sign() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Sign)
  return _internal_sign();
}
inline void GuildAttr::_internal_set_sign(int32_t value) {
  
  _impl_.sign_ = value;
}
inline void GuildAttr::set_sign(int32_t value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Sign)
}

// string Notice = 4;
inline void GuildAttr::clear_notice() {
  _impl_.notice_.ClearToEmpty();
}
inline const std::string& GuildAttr::notice() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Notice)
  return _internal_notice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_notice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notice_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Notice)
}
inline std::string* GuildAttr::mutable_notice() {
  std::string* _s = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.Notice)
  return _s;
}
inline const std::string& GuildAttr::_internal_notice() const {
  return _impl_.notice_.Get();
}
inline void GuildAttr::_internal_set_notice(const std::string& value) {
  
  _impl_.notice_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_notice() {
  
  return _impl_.notice_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_notice() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.Notice)
  return _impl_.notice_.Release();
}
inline void GuildAttr::set_allocated_notice(std::string* notice) {
  if (notice != nullptr) {
    
  } else {
    
  }
  _impl_.notice_.SetAllocated(notice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notice_.IsDefault()) {
    _impl_.notice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.Notice)
}

// string RecruitNotice = 5;
inline void GuildAttr::clear_recruitnotice() {
  _impl_.recruitnotice_.ClearToEmpty();
}
inline const std::string& GuildAttr::recruitnotice() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.RecruitNotice)
  return _internal_recruitnotice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_recruitnotice(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recruitnotice_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.RecruitNotice)
}
inline std::string* GuildAttr::mutable_recruitnotice() {
  std::string* _s = _internal_mutable_recruitnotice();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.RecruitNotice)
  return _s;
}
inline const std::string& GuildAttr::_internal_recruitnotice() const {
  return _impl_.recruitnotice_.Get();
}
inline void GuildAttr::_internal_set_recruitnotice(const std::string& value) {
  
  _impl_.recruitnotice_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_recruitnotice() {
  
  return _impl_.recruitnotice_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_recruitnotice() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.RecruitNotice)
  return _impl_.recruitnotice_.Release();
}
inline void GuildAttr::set_allocated_recruitnotice(std::string* recruitnotice) {
  if (recruitnotice != nullptr) {
    
  } else {
    
  }
  _impl_.recruitnotice_.SetAllocated(recruitnotice, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recruitnotice_.IsDefault()) {
    _impl_.recruitnotice_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.RecruitNotice)
}

// repeated int32 Tags = 6;
inline int GuildAttr::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int GuildAttr::tags_size() const {
  return _internal_tags_size();
}
inline void GuildAttr::clear_tags() {
  _impl_.tags_.Clear();
}
inline int32_t GuildAttr::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline int32_t GuildAttr::tags(int index) const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Tags)
  return _internal_tags(index);
}
inline void GuildAttr::set_tags(int index, int32_t value) {
  _impl_.tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Tags)
}
inline void GuildAttr::_internal_add_tags(int32_t value) {
  _impl_.tags_.Add(value);
}
inline void GuildAttr::add_tags(int32_t value) {
  _internal_add_tags(value);
  // @@protoc_insertion_point(field_add:msg.GuildAttr.Tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GuildAttr::_internal_tags() const {
  return _impl_.tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GuildAttr::tags() const {
  // @@protoc_insertion_point(field_list:msg.GuildAttr.Tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GuildAttr::_internal_mutable_tags() {
  return &_impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GuildAttr::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:msg.GuildAttr.Tags)
  return _internal_mutable_tags();
}

// string Owner = 7;
inline void GuildAttr::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& GuildAttr::owner() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Owner)
}
inline std::string* GuildAttr::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.Owner)
  return _s;
}
inline const std::string& GuildAttr::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void GuildAttr::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_owner() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.Owner)
  return _impl_.owner_.Release();
}
inline void GuildAttr::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.Owner)
}

// string OwnerName = 8;
inline void GuildAttr::clear_ownername() {
  _impl_.ownername_.ClearToEmpty();
}
inline const std::string& GuildAttr::ownername() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.OwnerName)
  return _internal_ownername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_ownername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.OwnerName)
}
inline std::string* GuildAttr::mutable_ownername() {
  std::string* _s = _internal_mutable_ownername();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.OwnerName)
  return _s;
}
inline const std::string& GuildAttr::_internal_ownername() const {
  return _impl_.ownername_.Get();
}
inline void GuildAttr::_internal_set_ownername(const std::string& value) {
  
  _impl_.ownername_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_ownername() {
  
  return _impl_.ownername_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_ownername() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.OwnerName)
  return _impl_.ownername_.Release();
}
inline void GuildAttr::set_allocated_ownername(std::string* ownername) {
  if (ownername != nullptr) {
    
  } else {
    
  }
  _impl_.ownername_.SetAllocated(ownername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownername_.IsDefault()) {
    _impl_.ownername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.OwnerName)
}

// .msg.GUILDPERMITTYPE RequirePermit = 9;
inline void GuildAttr::clear_requirepermit() {
  _impl_.requirepermit_ = 0;
}
inline ::msg::GUILDPERMITTYPE GuildAttr::_internal_requirepermit() const {
  return static_cast< ::msg::GUILDPERMITTYPE >(_impl_.requirepermit_);
}
inline ::msg::GUILDPERMITTYPE GuildAttr::requirepermit() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.RequirePermit)
  return _internal_requirepermit();
}
inline void GuildAttr::_internal_set_requirepermit(::msg::GUILDPERMITTYPE value) {
  
  _impl_.requirepermit_ = value;
}
inline void GuildAttr::set_requirepermit(::msg::GUILDPERMITTYPE value) {
  _internal_set_requirepermit(value);
  // @@protoc_insertion_point(field_set:msg.GuildAttr.RequirePermit)
}

// int32 RequireCup = 10;
inline void GuildAttr::clear_requirecup() {
  _impl_.requirecup_ = 0;
}
inline int32_t GuildAttr::_internal_requirecup() const {
  return _impl_.requirecup_;
}
inline int32_t GuildAttr::requirecup() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.RequireCup)
  return _internal_requirecup();
}
inline void GuildAttr::_internal_set_requirecup(int32_t value) {
  
  _impl_.requirecup_ = value;
}
inline void GuildAttr::set_requirecup(int32_t value) {
  _internal_set_requirecup(value);
  // @@protoc_insertion_point(field_set:msg.GuildAttr.RequireCup)
}

// string Country = 11;
inline void GuildAttr::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& GuildAttr::country() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Country)
}
inline std::string* GuildAttr::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.Country)
  return _s;
}
inline const std::string& GuildAttr::_internal_country() const {
  return _impl_.country_.Get();
}
inline void GuildAttr::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_country() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.Country)
  return _impl_.country_.Release();
}
inline void GuildAttr::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.Country)
}

// uint32 Province = 12;
inline void GuildAttr::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t GuildAttr::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t GuildAttr::province() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Province)
  return _internal_province();
}
inline void GuildAttr::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void GuildAttr::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Province)
}

// string Language = 13;
inline void GuildAttr::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& GuildAttr::language() const {
  // @@protoc_insertion_point(field_get:msg.GuildAttr.Language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildAttr::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildAttr.Language)
}
inline std::string* GuildAttr::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:msg.GuildAttr.Language)
  return _s;
}
inline const std::string& GuildAttr::_internal_language() const {
  return _impl_.language_.Get();
}
inline void GuildAttr::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildAttr::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildAttr::release_language() {
  // @@protoc_insertion_point(field_release:msg.GuildAttr.Language)
  return _impl_.language_.Release();
}
inline void GuildAttr::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildAttr.Language)
}

// -------------------------------------------------------------------

// GuildApplicant

// string Player = 1;
inline void GuildApplicant::clear_player() {
  _impl_.player_.ClearToEmpty();
}
inline const std::string& GuildApplicant::player() const {
  // @@protoc_insertion_point(field_get:msg.GuildApplicant.Player)
  return _internal_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildApplicant::set_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildApplicant.Player)
}
inline std::string* GuildApplicant::mutable_player() {
  std::string* _s = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:msg.GuildApplicant.Player)
  return _s;
}
inline const std::string& GuildApplicant::_internal_player() const {
  return _impl_.player_.Get();
}
inline void GuildApplicant::_internal_set_player(const std::string& value) {
  
  _impl_.player_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildApplicant::_internal_mutable_player() {
  
  return _impl_.player_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildApplicant::release_player() {
  // @@protoc_insertion_point(field_release:msg.GuildApplicant.Player)
  return _impl_.player_.Release();
}
inline void GuildApplicant::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  _impl_.player_.SetAllocated(player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_.IsDefault()) {
    _impl_.player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildApplicant.Player)
}

// int64 ts = 2;
inline void GuildApplicant::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t GuildApplicant::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t GuildApplicant::ts() const {
  // @@protoc_insertion_point(field_get:msg.GuildApplicant.ts)
  return _internal_ts();
}
inline void GuildApplicant::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void GuildApplicant::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:msg.GuildApplicant.ts)
}

// string ChannelUsrID = 3;
inline void GuildApplicant::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& GuildApplicant::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.GuildApplicant.ChannelUsrID)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildApplicant::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildApplicant.ChannelUsrID)
}
inline std::string* GuildApplicant::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.GuildApplicant.ChannelUsrID)
  return _s;
}
inline const std::string& GuildApplicant::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void GuildApplicant::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildApplicant::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildApplicant::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.GuildApplicant.ChannelUsrID)
  return _impl_.channelusrid_.Release();
}
inline void GuildApplicant::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildApplicant.ChannelUsrID)
}

// -------------------------------------------------------------------

// GuildMember

// string Player = 1;
inline void GuildMember::clear_player() {
  _impl_.player_.ClearToEmpty();
}
inline const std::string& GuildMember::player() const {
  // @@protoc_insertion_point(field_get:msg.GuildMember.Player)
  return _internal_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildMember::set_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildMember.Player)
}
inline std::string* GuildMember::mutable_player() {
  std::string* _s = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:msg.GuildMember.Player)
  return _s;
}
inline const std::string& GuildMember::_internal_player() const {
  return _impl_.player_.Get();
}
inline void GuildMember::_internal_set_player(const std::string& value) {
  
  _impl_.player_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildMember::_internal_mutable_player() {
  
  return _impl_.player_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildMember::release_player() {
  // @@protoc_insertion_point(field_release:msg.GuildMember.Player)
  return _impl_.player_.Release();
}
inline void GuildMember::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  _impl_.player_.SetAllocated(player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_.IsDefault()) {
    _impl_.player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildMember.Player)
}

// .msg.GUILDROLETYPE Role = 2;
inline void GuildMember::clear_role() {
  _impl_.role_ = 0;
}
inline ::msg::GUILDROLETYPE GuildMember::_internal_role() const {
  return static_cast< ::msg::GUILDROLETYPE >(_impl_.role_);
}
inline ::msg::GUILDROLETYPE GuildMember::role() const {
  // @@protoc_insertion_point(field_get:msg.GuildMember.Role)
  return _internal_role();
}
inline void GuildMember::_internal_set_role(::msg::GUILDROLETYPE value) {
  
  _impl_.role_ = value;
}
inline void GuildMember::set_role(::msg::GUILDROLETYPE value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:msg.GuildMember.Role)
}

// int32 ActiveScore = 3;
inline void GuildMember::clear_activescore() {
  _impl_.activescore_ = 0;
}
inline int32_t GuildMember::_internal_activescore() const {
  return _impl_.activescore_;
}
inline int32_t GuildMember::activescore() const {
  // @@protoc_insertion_point(field_get:msg.GuildMember.ActiveScore)
  return _internal_activescore();
}
inline void GuildMember::_internal_set_activescore(int32_t value) {
  
  _impl_.activescore_ = value;
}
inline void GuildMember::set_activescore(int32_t value) {
  _internal_set_activescore(value);
  // @@protoc_insertion_point(field_set:msg.GuildMember.ActiveScore)
}

// -------------------------------------------------------------------

// GuildExtraInfo

// repeated .msg.GuildMember Members = 1;
inline int GuildExtraInfo::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GuildExtraInfo::members_size() const {
  return _internal_members_size();
}
inline void GuildExtraInfo::clear_members() {
  _impl_.members_.Clear();
}
inline ::msg::GuildMember* GuildExtraInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:msg.GuildExtraInfo.Members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildMember >*
GuildExtraInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:msg.GuildExtraInfo.Members)
  return &_impl_.members_;
}
inline const ::msg::GuildMember& GuildExtraInfo::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::msg::GuildMember& GuildExtraInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:msg.GuildExtraInfo.Members)
  return _internal_members(index);
}
inline ::msg::GuildMember* GuildExtraInfo::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::msg::GuildMember* GuildExtraInfo::add_members() {
  ::msg::GuildMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:msg.GuildExtraInfo.Members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildMember >&
GuildExtraInfo::members() const {
  // @@protoc_insertion_point(field_list:msg.GuildExtraInfo.Members)
  return _impl_.members_;
}

// repeated .msg.GuildApplicant Players = 2;
inline int GuildExtraInfo::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int GuildExtraInfo::players_size() const {
  return _internal_players_size();
}
inline void GuildExtraInfo::clear_players() {
  _impl_.players_.Clear();
}
inline ::msg::GuildApplicant* GuildExtraInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:msg.GuildExtraInfo.Players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildApplicant >*
GuildExtraInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:msg.GuildExtraInfo.Players)
  return &_impl_.players_;
}
inline const ::msg::GuildApplicant& GuildExtraInfo::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::msg::GuildApplicant& GuildExtraInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:msg.GuildExtraInfo.Players)
  return _internal_players(index);
}
inline ::msg::GuildApplicant* GuildExtraInfo::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::msg::GuildApplicant* GuildExtraInfo::add_players() {
  ::msg::GuildApplicant* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:msg.GuildExtraInfo.Players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildApplicant >&
GuildExtraInfo::players() const {
  // @@protoc_insertion_point(field_list:msg.GuildExtraInfo.Players)
  return _impl_.players_;
}

// repeated .msg.GuildLog Logs = 3;
inline int GuildExtraInfo::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int GuildExtraInfo::logs_size() const {
  return _internal_logs_size();
}
inline void GuildExtraInfo::clear_logs() {
  _impl_.logs_.Clear();
}
inline ::msg::GuildLog* GuildExtraInfo::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:msg.GuildExtraInfo.Logs)
  return _impl_.logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildLog >*
GuildExtraInfo::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:msg.GuildExtraInfo.Logs)
  return &_impl_.logs_;
}
inline const ::msg::GuildLog& GuildExtraInfo::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const ::msg::GuildLog& GuildExtraInfo::logs(int index) const {
  // @@protoc_insertion_point(field_get:msg.GuildExtraInfo.Logs)
  return _internal_logs(index);
}
inline ::msg::GuildLog* GuildExtraInfo::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline ::msg::GuildLog* GuildExtraInfo::add_logs() {
  ::msg::GuildLog* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:msg.GuildExtraInfo.Logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::GuildLog >&
GuildExtraInfo::logs() const {
  // @@protoc_insertion_point(field_list:msg.GuildExtraInfo.Logs)
  return _impl_.logs_;
}

// -------------------------------------------------------------------

// GuildChatInfo

// .msg.CSDTPlayerSimpleInfo Player = 1;
inline bool GuildChatInfo::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool GuildChatInfo::has_player() const {
  return _internal_has_player();
}
inline void GuildChatInfo::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::msg::CSDTPlayerSimpleInfo& GuildChatInfo::_internal_player() const {
  const ::msg::CSDTPlayerSimpleInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPlayerSimpleInfo&>(
      ::msg::_CSDTPlayerSimpleInfo_default_instance_);
}
inline const ::msg::CSDTPlayerSimpleInfo& GuildChatInfo::player() const {
  // @@protoc_insertion_point(field_get:msg.GuildChatInfo.Player)
  return _internal_player();
}
inline void GuildChatInfo::unsafe_arena_set_allocated_player(
    ::msg::CSDTPlayerSimpleInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GuildChatInfo.Player)
}
inline ::msg::CSDTPlayerSimpleInfo* GuildChatInfo::release_player() {
  
  ::msg::CSDTPlayerSimpleInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPlayerSimpleInfo* GuildChatInfo::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:msg.GuildChatInfo.Player)
  
  ::msg::CSDTPlayerSimpleInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::msg::CSDTPlayerSimpleInfo* GuildChatInfo::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPlayerSimpleInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::msg::CSDTPlayerSimpleInfo* GuildChatInfo::mutable_player() {
  ::msg::CSDTPlayerSimpleInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:msg.GuildChatInfo.Player)
  return _msg;
}
inline void GuildChatInfo::set_allocated_player(::msg::CSDTPlayerSimpleInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:msg.GuildChatInfo.Player)
}

// string Content = 2;
inline void GuildChatInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GuildChatInfo::content() const {
  // @@protoc_insertion_point(field_get:msg.GuildChatInfo.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildChatInfo::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildChatInfo.Content)
}
inline std::string* GuildChatInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.GuildChatInfo.Content)
  return _s;
}
inline const std::string& GuildChatInfo::_internal_content() const {
  return _impl_.content_.Get();
}
inline void GuildChatInfo::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildChatInfo::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildChatInfo::release_content() {
  // @@protoc_insertion_point(field_release:msg.GuildChatInfo.Content)
  return _impl_.content_.Release();
}
inline void GuildChatInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildChatInfo.Content)
}

// uint32 Emotion = 3;
inline void GuildChatInfo::clear_emotion() {
  _impl_.emotion_ = 0u;
}
inline uint32_t GuildChatInfo::_internal_emotion() const {
  return _impl_.emotion_;
}
inline uint32_t GuildChatInfo::emotion() const {
  // @@protoc_insertion_point(field_get:msg.GuildChatInfo.Emotion)
  return _internal_emotion();
}
inline void GuildChatInfo::_internal_set_emotion(uint32_t value) {
  
  _impl_.emotion_ = value;
}
inline void GuildChatInfo::set_emotion(uint32_t value) {
  _internal_set_emotion(value);
  // @@protoc_insertion_point(field_set:msg.GuildChatInfo.Emotion)
}

// bool NeedLocalize = 4;
inline void GuildChatInfo::clear_needlocalize() {
  _impl_.needlocalize_ = false;
}
inline bool GuildChatInfo::_internal_needlocalize() const {
  return _impl_.needlocalize_;
}
inline bool GuildChatInfo::needlocalize() const {
  // @@protoc_insertion_point(field_get:msg.GuildChatInfo.NeedLocalize)
  return _internal_needlocalize();
}
inline void GuildChatInfo::_internal_set_needlocalize(bool value) {
  
  _impl_.needlocalize_ = value;
}
inline void GuildChatInfo::set_needlocalize(bool value) {
  _internal_set_needlocalize(value);
  // @@protoc_insertion_point(field_set:msg.GuildChatInfo.NeedLocalize)
}

// int64 Timestamp = 5;
inline void GuildChatInfo::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t GuildChatInfo::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t GuildChatInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.GuildChatInfo.Timestamp)
  return _internal_timestamp();
}
inline void GuildChatInfo::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void GuildChatInfo::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.GuildChatInfo.Timestamp)
}

// .msg.CHATSOURCETYPE SourceType = 6;
inline void GuildChatInfo::clear_sourcetype() {
  _impl_.sourcetype_ = 0;
}
inline ::msg::CHATSOURCETYPE GuildChatInfo::_internal_sourcetype() const {
  return static_cast< ::msg::CHATSOURCETYPE >(_impl_.sourcetype_);
}
inline ::msg::CHATSOURCETYPE GuildChatInfo::sourcetype() const {
  // @@protoc_insertion_point(field_get:msg.GuildChatInfo.SourceType)
  return _internal_sourcetype();
}
inline void GuildChatInfo::_internal_set_sourcetype(::msg::CHATSOURCETYPE value) {
  
  _impl_.sourcetype_ = value;
}
inline void GuildChatInfo::set_sourcetype(::msg::CHATSOURCETYPE value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:msg.GuildChatInfo.SourceType)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GuildLog

// string Key = 1;
inline void GuildLog::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GuildLog::key() const {
  // @@protoc_insertion_point(field_get:msg.GuildLog.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildLog::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildLog.Key)
}
inline std::string* GuildLog::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:msg.GuildLog.Key)
  return _s;
}
inline const std::string& GuildLog::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GuildLog::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildLog::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildLog::release_key() {
  // @@protoc_insertion_point(field_release:msg.GuildLog.Key)
  return _impl_.key_.Release();
}
inline void GuildLog::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildLog.Key)
}

// map<string, string> Para = 2;
inline int GuildLog::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int GuildLog::para_size() const {
  return _internal_para_size();
}
inline void GuildLog::clear_para() {
  _impl_.para_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GuildLog::_internal_para() const {
  return _impl_.para_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GuildLog::para() const {
  // @@protoc_insertion_point(field_map:msg.GuildLog.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GuildLog::_internal_mutable_para() {
  return _impl_.para_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GuildLog::mutable_para() {
  // @@protoc_insertion_point(field_mutable_map:msg.GuildLog.Para)
  return _internal_mutable_para();
}

// bool ps4Only = 3;
inline void GuildLog::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool GuildLog::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool GuildLog::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.GuildLog.ps4Only)
  return _internal_ps4only();
}
inline void GuildLog::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void GuildLog::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.GuildLog.ps4Only)
}

// bool ps = 4;
inline void GuildLog::clear_ps() {
  _impl_.ps_ = false;
}
inline bool GuildLog::_internal_ps() const {
  return _impl_.ps_;
}
inline bool GuildLog::ps() const {
  // @@protoc_insertion_point(field_get:msg.GuildLog.ps)
  return _internal_ps();
}
inline void GuildLog::_internal_set_ps(bool value) {
  
  _impl_.ps_ = value;
}
inline void GuildLog::set_ps(bool value) {
  _internal_set_ps(value);
  // @@protoc_insertion_point(field_set:msg.GuildLog.ps)
}

// int64 Ts = 6;
inline void GuildLog::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t GuildLog::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t GuildLog::ts() const {
  // @@protoc_insertion_point(field_get:msg.GuildLog.Ts)
  return _internal_ts();
}
inline void GuildLog::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void GuildLog::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:msg.GuildLog.Ts)
}

// -------------------------------------------------------------------

// GuildApplyInfo

// .msg.CSDTPlayerSimpleInfo Player = 1;
inline bool GuildApplyInfo::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool GuildApplyInfo::has_player() const {
  return _internal_has_player();
}
inline void GuildApplyInfo::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::msg::CSDTPlayerSimpleInfo& GuildApplyInfo::_internal_player() const {
  const ::msg::CSDTPlayerSimpleInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSDTPlayerSimpleInfo&>(
      ::msg::_CSDTPlayerSimpleInfo_default_instance_);
}
inline const ::msg::CSDTPlayerSimpleInfo& GuildApplyInfo::player() const {
  // @@protoc_insertion_point(field_get:msg.GuildApplyInfo.Player)
  return _internal_player();
}
inline void GuildApplyInfo::unsafe_arena_set_allocated_player(
    ::msg::CSDTPlayerSimpleInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GuildApplyInfo.Player)
}
inline ::msg::CSDTPlayerSimpleInfo* GuildApplyInfo::release_player() {
  
  ::msg::CSDTPlayerSimpleInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSDTPlayerSimpleInfo* GuildApplyInfo::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:msg.GuildApplyInfo.Player)
  
  ::msg::CSDTPlayerSimpleInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::msg::CSDTPlayerSimpleInfo* GuildApplyInfo::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSDTPlayerSimpleInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::msg::CSDTPlayerSimpleInfo* GuildApplyInfo::mutable_player() {
  ::msg::CSDTPlayerSimpleInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:msg.GuildApplyInfo.Player)
  return _msg;
}
inline void GuildApplyInfo::set_allocated_player(::msg::CSDTPlayerSimpleInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:msg.GuildApplyInfo.Player)
}

// int64 Ts = 2;
inline void GuildApplyInfo::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t GuildApplyInfo::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t GuildApplyInfo::ts() const {
  // @@protoc_insertion_point(field_get:msg.GuildApplyInfo.Ts)
  return _internal_ts();
}
inline void GuildApplyInfo::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void GuildApplyInfo::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:msg.GuildApplyInfo.Ts)
}

// -------------------------------------------------------------------

// GuildPlayerRole

// string Player = 1;
inline void GuildPlayerRole::clear_player() {
  _impl_.player_.ClearToEmpty();
}
inline const std::string& GuildPlayerRole::player() const {
  // @@protoc_insertion_point(field_get:msg.GuildPlayerRole.Player)
  return _internal_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildPlayerRole::set_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GuildPlayerRole.Player)
}
inline std::string* GuildPlayerRole::mutable_player() {
  std::string* _s = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:msg.GuildPlayerRole.Player)
  return _s;
}
inline const std::string& GuildPlayerRole::_internal_player() const {
  return _impl_.player_.Get();
}
inline void GuildPlayerRole::_internal_set_player(const std::string& value) {
  
  _impl_.player_.Set(value, GetArenaForAllocation());
}
inline std::string* GuildPlayerRole::_internal_mutable_player() {
  
  return _impl_.player_.Mutable(GetArenaForAllocation());
}
inline std::string* GuildPlayerRole::release_player() {
  // @@protoc_insertion_point(field_release:msg.GuildPlayerRole.Player)
  return _impl_.player_.Release();
}
inline void GuildPlayerRole::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  _impl_.player_.SetAllocated(player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_.IsDefault()) {
    _impl_.player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GuildPlayerRole.Player)
}

// .msg.GUILDROLETYPE Role = 2;
inline void GuildPlayerRole::clear_role() {
  _impl_.role_ = 0;
}
inline ::msg::GUILDROLETYPE GuildPlayerRole::_internal_role() const {
  return static_cast< ::msg::GUILDROLETYPE >(_impl_.role_);
}
inline ::msg::GUILDROLETYPE GuildPlayerRole::role() const {
  // @@protoc_insertion_point(field_get:msg.GuildPlayerRole.Role)
  return _internal_role();
}
inline void GuildPlayerRole::_internal_set_role(::msg::GUILDROLETYPE value) {
  
  _impl_.role_ = value;
}
inline void GuildPlayerRole::set_role(::msg::GUILDROLETYPE value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:msg.GuildPlayerRole.Role)
}

// uint32 Active = 3;
inline void GuildPlayerRole::clear_active() {
  _impl_.active_ = 0u;
}
inline uint32_t GuildPlayerRole::_internal_active() const {
  return _impl_.active_;
}
inline uint32_t GuildPlayerRole::active() const {
  // @@protoc_insertion_point(field_get:msg.GuildPlayerRole.Active)
  return _internal_active();
}
inline void GuildPlayerRole::_internal_set_active(uint32_t value) {
  
  _impl_.active_ = value;
}
inline void GuildPlayerRole::set_active(uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:msg.GuildPlayerRole.Active)
}

// -------------------------------------------------------------------

// ChestRecord

// repeated uint32 Awards = 1;
inline int ChestRecord::_internal_awards_size() const {
  return _impl_.awards_.size();
}
inline int ChestRecord::awards_size() const {
  return _internal_awards_size();
}
inline void ChestRecord::clear_awards() {
  _impl_.awards_.Clear();
}
inline uint32_t ChestRecord::_internal_awards(int index) const {
  return _impl_.awards_.Get(index);
}
inline uint32_t ChestRecord::awards(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChestRecord.Awards)
  return _internal_awards(index);
}
inline void ChestRecord::set_awards(int index, uint32_t value) {
  _impl_.awards_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ChestRecord.Awards)
}
inline void ChestRecord::_internal_add_awards(uint32_t value) {
  _impl_.awards_.Add(value);
}
inline void ChestRecord::add_awards(uint32_t value) {
  _internal_add_awards(value);
  // @@protoc_insertion_point(field_add:msg.ChestRecord.Awards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChestRecord::_internal_awards() const {
  return _impl_.awards_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChestRecord::awards() const {
  // @@protoc_insertion_point(field_list:msg.ChestRecord.Awards)
  return _internal_awards();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChestRecord::_internal_mutable_awards() {
  return &_impl_.awards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChestRecord::mutable_awards() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChestRecord.Awards)
  return _internal_mutable_awards();
}

// uint32 Round = 2;
inline void ChestRecord::clear_round() {
  _impl_.round_ = 0u;
}
inline uint32_t ChestRecord::_internal_round() const {
  return _impl_.round_;
}
inline uint32_t ChestRecord::round() const {
  // @@protoc_insertion_point(field_get:msg.ChestRecord.Round)
  return _internal_round();
}
inline void ChestRecord::_internal_set_round(uint32_t value) {
  
  _impl_.round_ = value;
}
inline void ChestRecord::set_round(uint32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.ChestRecord.Round)
}

// -------------------------------------------------------------------

// TeamDesc

// uint32 TeamID = 1;
inline void TeamDesc::clear_teamid() {
  _impl_.teamid_ = 0u;
}
inline uint32_t TeamDesc::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint32_t TeamDesc::teamid() const {
  // @@protoc_insertion_point(field_get:msg.TeamDesc.TeamID)
  return _internal_teamid();
}
inline void TeamDesc::_internal_set_teamid(uint32_t value) {
  
  _impl_.teamid_ = value;
}
inline void TeamDesc::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:msg.TeamDesc.TeamID)
}

// .msg.TournamentDesc GroupDesc = 2;
inline bool TeamDesc::_internal_has_groupdesc() const {
  return this != internal_default_instance() && _impl_.groupdesc_ != nullptr;
}
inline bool TeamDesc::has_groupdesc() const {
  return _internal_has_groupdesc();
}
inline void TeamDesc::clear_groupdesc() {
  if (GetArenaForAllocation() == nullptr && _impl_.groupdesc_ != nullptr) {
    delete _impl_.groupdesc_;
  }
  _impl_.groupdesc_ = nullptr;
}
inline const ::msg::TournamentDesc& TeamDesc::_internal_groupdesc() const {
  const ::msg::TournamentDesc* p = _impl_.groupdesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TournamentDesc&>(
      ::msg::_TournamentDesc_default_instance_);
}
inline const ::msg::TournamentDesc& TeamDesc::groupdesc() const {
  // @@protoc_insertion_point(field_get:msg.TeamDesc.GroupDesc)
  return _internal_groupdesc();
}
inline void TeamDesc::unsafe_arena_set_allocated_groupdesc(
    ::msg::TournamentDesc* groupdesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.groupdesc_);
  }
  _impl_.groupdesc_ = groupdesc;
  if (groupdesc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TeamDesc.GroupDesc)
}
inline ::msg::TournamentDesc* TeamDesc::release_groupdesc() {
  
  ::msg::TournamentDesc* temp = _impl_.groupdesc_;
  _impl_.groupdesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TournamentDesc* TeamDesc::unsafe_arena_release_groupdesc() {
  // @@protoc_insertion_point(field_release:msg.TeamDesc.GroupDesc)
  
  ::msg::TournamentDesc* temp = _impl_.groupdesc_;
  _impl_.groupdesc_ = nullptr;
  return temp;
}
inline ::msg::TournamentDesc* TeamDesc::_internal_mutable_groupdesc() {
  
  if (_impl_.groupdesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TournamentDesc>(GetArenaForAllocation());
    _impl_.groupdesc_ = p;
  }
  return _impl_.groupdesc_;
}
inline ::msg::TournamentDesc* TeamDesc::mutable_groupdesc() {
  ::msg::TournamentDesc* _msg = _internal_mutable_groupdesc();
  // @@protoc_insertion_point(field_mutable:msg.TeamDesc.GroupDesc)
  return _msg;
}
inline void TeamDesc::set_allocated_groupdesc(::msg::TournamentDesc* groupdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.groupdesc_;
  }
  if (groupdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(groupdesc);
    if (message_arena != submessage_arena) {
      groupdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupdesc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.groupdesc_ = groupdesc;
  // @@protoc_insertion_point(field_set_allocated:msg.TeamDesc.GroupDesc)
}

// -------------------------------------------------------------------

// CSDTTaskItem

// uint32 Id = 1;
inline void CSDTTaskItem::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CSDTTaskItem::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSDTTaskItem::id() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTaskItem.Id)
  return _internal_id();
}
inline void CSDTTaskItem::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CSDTTaskItem::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTaskItem.Id)
}

// uint32 Progress = 2;
inline void CSDTTaskItem::clear_progress() {
  _impl_.progress_ = 0u;
}
inline uint32_t CSDTTaskItem::_internal_progress() const {
  return _impl_.progress_;
}
inline uint32_t CSDTTaskItem::progress() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTaskItem.Progress)
  return _internal_progress();
}
inline void CSDTTaskItem::_internal_set_progress(uint32_t value) {
  
  _impl_.progress_ = value;
}
inline void CSDTTaskItem::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTaskItem.Progress)
}

// bool GetAward = 3;
inline void CSDTTaskItem::clear_getaward() {
  _impl_.getaward_ = false;
}
inline bool CSDTTaskItem::_internal_getaward() const {
  return _impl_.getaward_;
}
inline bool CSDTTaskItem::getaward() const {
  // @@protoc_insertion_point(field_get:msg.CSDTTaskItem.GetAward)
  return _internal_getaward();
}
inline void CSDTTaskItem::_internal_set_getaward(bool value) {
  
  _impl_.getaward_ = value;
}
inline void CSDTTaskItem::set_getaward(bool value) {
  _internal_set_getaward(value);
  // @@protoc_insertion_point(field_set:msg.CSDTTaskItem.GetAward)
}

// -------------------------------------------------------------------

// OssPlayerData

// string Data = 1;
inline void OssPlayerData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& OssPlayerData::data() const {
  // @@protoc_insertion_point(field_get:msg.OssPlayerData.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OssPlayerData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.OssPlayerData.Data)
}
inline std::string* OssPlayerData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:msg.OssPlayerData.Data)
  return _s;
}
inline const std::string& OssPlayerData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void OssPlayerData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* OssPlayerData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* OssPlayerData::release_data() {
  // @@protoc_insertion_point(field_release:msg.OssPlayerData.Data)
  return _impl_.data_.Release();
}
inline void OssPlayerData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.OssPlayerData.Data)
}

// string InviteCode = 2;
inline void OssPlayerData::clear_invitecode() {
  _impl_.invitecode_.ClearToEmpty();
}
inline const std::string& OssPlayerData::invitecode() const {
  // @@protoc_insertion_point(field_get:msg.OssPlayerData.InviteCode)
  return _internal_invitecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OssPlayerData::set_invitecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.invitecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.OssPlayerData.InviteCode)
}
inline std::string* OssPlayerData::mutable_invitecode() {
  std::string* _s = _internal_mutable_invitecode();
  // @@protoc_insertion_point(field_mutable:msg.OssPlayerData.InviteCode)
  return _s;
}
inline const std::string& OssPlayerData::_internal_invitecode() const {
  return _impl_.invitecode_.Get();
}
inline void OssPlayerData::_internal_set_invitecode(const std::string& value) {
  
  _impl_.invitecode_.Set(value, GetArenaForAllocation());
}
inline std::string* OssPlayerData::_internal_mutable_invitecode() {
  
  return _impl_.invitecode_.Mutable(GetArenaForAllocation());
}
inline std::string* OssPlayerData::release_invitecode() {
  // @@protoc_insertion_point(field_release:msg.OssPlayerData.InviteCode)
  return _impl_.invitecode_.Release();
}
inline void OssPlayerData::set_allocated_invitecode(std::string* invitecode) {
  if (invitecode != nullptr) {
    
  } else {
    
  }
  _impl_.invitecode_.SetAllocated(invitecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.invitecode_.IsDefault()) {
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.OssPlayerData.InviteCode)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BattleExtData

// int32 TicketID = 1;
inline void BattleExtData::clear_ticketid() {
  _impl_.ticketid_ = 0;
}
inline int32_t BattleExtData::_internal_ticketid() const {
  return _impl_.ticketid_;
}
inline int32_t BattleExtData::ticketid() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.TicketID)
  return _internal_ticketid();
}
inline void BattleExtData::_internal_set_ticketid(int32_t value) {
  
  _impl_.ticketid_ = value;
}
inline void BattleExtData::set_ticketid(int32_t value) {
  _internal_set_ticketid(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.TicketID)
}

// int32 TicketNum = 2;
inline void BattleExtData::clear_ticketnum() {
  _impl_.ticketnum_ = 0;
}
inline int32_t BattleExtData::_internal_ticketnum() const {
  return _impl_.ticketnum_;
}
inline int32_t BattleExtData::ticketnum() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.TicketNum)
  return _internal_ticketnum();
}
inline void BattleExtData::_internal_set_ticketnum(int32_t value) {
  
  _impl_.ticketnum_ = value;
}
inline void BattleExtData::set_ticketnum(int32_t value) {
  _internal_set_ticketnum(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.TicketNum)
}

// repeated int32 RankRewardList = 3;
inline int BattleExtData::_internal_rankrewardlist_size() const {
  return _impl_.rankrewardlist_.size();
}
inline int BattleExtData::rankrewardlist_size() const {
  return _internal_rankrewardlist_size();
}
inline void BattleExtData::clear_rankrewardlist() {
  _impl_.rankrewardlist_.Clear();
}
inline int32_t BattleExtData::_internal_rankrewardlist(int index) const {
  return _impl_.rankrewardlist_.Get(index);
}
inline int32_t BattleExtData::rankrewardlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.RankRewardList)
  return _internal_rankrewardlist(index);
}
inline void BattleExtData::set_rankrewardlist(int index, int32_t value) {
  _impl_.rankrewardlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.RankRewardList)
}
inline void BattleExtData::_internal_add_rankrewardlist(int32_t value) {
  _impl_.rankrewardlist_.Add(value);
}
inline void BattleExtData::add_rankrewardlist(int32_t value) {
  _internal_add_rankrewardlist(value);
  // @@protoc_insertion_point(field_add:msg.BattleExtData.RankRewardList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BattleExtData::_internal_rankrewardlist() const {
  return _impl_.rankrewardlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BattleExtData::rankrewardlist() const {
  // @@protoc_insertion_point(field_list:msg.BattleExtData.RankRewardList)
  return _internal_rankrewardlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BattleExtData::_internal_mutable_rankrewardlist() {
  return &_impl_.rankrewardlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BattleExtData::mutable_rankrewardlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.BattleExtData.RankRewardList)
  return _internal_mutable_rankrewardlist();
}

// uint32 MapID = 4;
inline void BattleExtData::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t BattleExtData::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t BattleExtData::mapid() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.MapID)
  return _internal_mapid();
}
inline void BattleExtData::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void BattleExtData::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.MapID)
}

// uint32 SubMapID = 5;
inline void BattleExtData::clear_submapid() {
  _impl_.submapid_ = 0u;
}
inline uint32_t BattleExtData::_internal_submapid() const {
  return _impl_.submapid_;
}
inline uint32_t BattleExtData::submapid() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.SubMapID)
  return _internal_submapid();
}
inline void BattleExtData::_internal_set_submapid(uint32_t value) {
  
  _impl_.submapid_ = value;
}
inline void BattleExtData::set_submapid(uint32_t value) {
  _internal_set_submapid(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.SubMapID)
}

// int32 CurrencyNum = 6;
inline void BattleExtData::clear_currencynum() {
  _impl_.currencynum_ = 0;
}
inline int32_t BattleExtData::_internal_currencynum() const {
  return _impl_.currencynum_;
}
inline int32_t BattleExtData::currencynum() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.CurrencyNum)
  return _internal_currencynum();
}
inline void BattleExtData::_internal_set_currencynum(int32_t value) {
  
  _impl_.currencynum_ = value;
}
inline void BattleExtData::set_currencynum(int32_t value) {
  _internal_set_currencynum(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.CurrencyNum)
}

// int32 Version = 7;
inline void BattleExtData::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t BattleExtData::_internal_version() const {
  return _impl_.version_;
}
inline int32_t BattleExtData::version() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.Version)
  return _internal_version();
}
inline void BattleExtData::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void BattleExtData::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.Version)
}

// int32 BountyBaseCurrencyNum = 8;
inline void BattleExtData::clear_bountybasecurrencynum() {
  _impl_.bountybasecurrencynum_ = 0;
}
inline int32_t BattleExtData::_internal_bountybasecurrencynum() const {
  return _impl_.bountybasecurrencynum_;
}
inline int32_t BattleExtData::bountybasecurrencynum() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.BountyBaseCurrencyNum)
  return _internal_bountybasecurrencynum();
}
inline void BattleExtData::_internal_set_bountybasecurrencynum(int32_t value) {
  
  _impl_.bountybasecurrencynum_ = value;
}
inline void BattleExtData::set_bountybasecurrencynum(int32_t value) {
  _internal_set_bountybasecurrencynum(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.BountyBaseCurrencyNum)
}

// map<string, int32> PlayersBetCurrencyNum = 9;
inline int BattleExtData::_internal_playersbetcurrencynum_size() const {
  return _impl_.playersbetcurrencynum_.size();
}
inline int BattleExtData::playersbetcurrencynum_size() const {
  return _internal_playersbetcurrencynum_size();
}
inline void BattleExtData::clear_playersbetcurrencynum() {
  _impl_.playersbetcurrencynum_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
BattleExtData::_internal_playersbetcurrencynum() const {
  return _impl_.playersbetcurrencynum_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
BattleExtData::playersbetcurrencynum() const {
  // @@protoc_insertion_point(field_map:msg.BattleExtData.PlayersBetCurrencyNum)
  return _internal_playersbetcurrencynum();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
BattleExtData::_internal_mutable_playersbetcurrencynum() {
  return _impl_.playersbetcurrencynum_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
BattleExtData::mutable_playersbetcurrencynum() {
  // @@protoc_insertion_point(field_mutable_map:msg.BattleExtData.PlayersBetCurrencyNum)
  return _internal_mutable_playersbetcurrencynum();
}

// string AuthorId = 10;
inline void BattleExtData::clear_authorid() {
  _impl_.authorid_.ClearToEmpty();
}
inline const std::string& BattleExtData::authorid() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.AuthorId)
  return _internal_authorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleExtData::set_authorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.BattleExtData.AuthorId)
}
inline std::string* BattleExtData::mutable_authorid() {
  std::string* _s = _internal_mutable_authorid();
  // @@protoc_insertion_point(field_mutable:msg.BattleExtData.AuthorId)
  return _s;
}
inline const std::string& BattleExtData::_internal_authorid() const {
  return _impl_.authorid_.Get();
}
inline void BattleExtData::_internal_set_authorid(const std::string& value) {
  
  _impl_.authorid_.Set(value, GetArenaForAllocation());
}
inline std::string* BattleExtData::_internal_mutable_authorid() {
  
  return _impl_.authorid_.Mutable(GetArenaForAllocation());
}
inline std::string* BattleExtData::release_authorid() {
  // @@protoc_insertion_point(field_release:msg.BattleExtData.AuthorId)
  return _impl_.authorid_.Release();
}
inline void BattleExtData::set_allocated_authorid(std::string* authorid) {
  if (authorid != nullptr) {
    
  } else {
    
  }
  _impl_.authorid_.SetAllocated(authorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authorid_.IsDefault()) {
    _impl_.authorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.BattleExtData.AuthorId)
}

// int32 sysPercent = 11;
inline void BattleExtData::clear_syspercent() {
  _impl_.syspercent_ = 0;
}
inline int32_t BattleExtData::_internal_syspercent() const {
  return _impl_.syspercent_;
}
inline int32_t BattleExtData::syspercent() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.sysPercent)
  return _internal_syspercent();
}
inline void BattleExtData::_internal_set_syspercent(int32_t value) {
  
  _impl_.syspercent_ = value;
}
inline void BattleExtData::set_syspercent(int32_t value) {
  _internal_set_syspercent(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.sysPercent)
}

// int32 sysDrawAuthorPercent = 12;
inline void BattleExtData::clear_sysdrawauthorpercent() {
  _impl_.sysdrawauthorpercent_ = 0;
}
inline int32_t BattleExtData::_internal_sysdrawauthorpercent() const {
  return _impl_.sysdrawauthorpercent_;
}
inline int32_t BattleExtData::sysdrawauthorpercent() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.sysDrawAuthorPercent)
  return _internal_sysdrawauthorpercent();
}
inline void BattleExtData::_internal_set_sysdrawauthorpercent(int32_t value) {
  
  _impl_.sysdrawauthorpercent_ = value;
}
inline void BattleExtData::set_sysdrawauthorpercent(int32_t value) {
  _internal_set_sysdrawauthorpercent(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.sysDrawAuthorPercent)
}

// int32 authorPercent = 13;
inline void BattleExtData::clear_authorpercent() {
  _impl_.authorpercent_ = 0;
}
inline int32_t BattleExtData::_internal_authorpercent() const {
  return _impl_.authorpercent_;
}
inline int32_t BattleExtData::authorpercent() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.authorPercent)
  return _internal_authorpercent();
}
inline void BattleExtData::_internal_set_authorpercent(int32_t value) {
  
  _impl_.authorpercent_ = value;
}
inline void BattleExtData::set_authorpercent(int32_t value) {
  _internal_set_authorpercent(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.authorPercent)
}

// repeated .msg.KernelChessInfo ChessList = 14;
inline int BattleExtData::_internal_chesslist_size() const {
  return _impl_.chesslist_.size();
}
inline int BattleExtData::chesslist_size() const {
  return _internal_chesslist_size();
}
inline void BattleExtData::clear_chesslist() {
  _impl_.chesslist_.Clear();
}
inline ::msg::KernelChessInfo* BattleExtData::mutable_chesslist(int index) {
  // @@protoc_insertion_point(field_mutable:msg.BattleExtData.ChessList)
  return _impl_.chesslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >*
BattleExtData::mutable_chesslist() {
  // @@protoc_insertion_point(field_mutable_list:msg.BattleExtData.ChessList)
  return &_impl_.chesslist_;
}
inline const ::msg::KernelChessInfo& BattleExtData::_internal_chesslist(int index) const {
  return _impl_.chesslist_.Get(index);
}
inline const ::msg::KernelChessInfo& BattleExtData::chesslist(int index) const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.ChessList)
  return _internal_chesslist(index);
}
inline ::msg::KernelChessInfo* BattleExtData::_internal_add_chesslist() {
  return _impl_.chesslist_.Add();
}
inline ::msg::KernelChessInfo* BattleExtData::add_chesslist() {
  ::msg::KernelChessInfo* _add = _internal_add_chesslist();
  // @@protoc_insertion_point(field_add:msg.BattleExtData.ChessList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::KernelChessInfo >&
BattleExtData::chesslist() const {
  // @@protoc_insertion_point(field_list:msg.BattleExtData.ChessList)
  return _impl_.chesslist_;
}

// bool CustomCardFlag = 15;
inline void BattleExtData::clear_customcardflag() {
  _impl_.customcardflag_ = false;
}
inline bool BattleExtData::_internal_customcardflag() const {
  return _impl_.customcardflag_;
}
inline bool BattleExtData::customcardflag() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.CustomCardFlag)
  return _internal_customcardflag();
}
inline void BattleExtData::_internal_set_customcardflag(bool value) {
  
  _impl_.customcardflag_ = value;
}
inline void BattleExtData::set_customcardflag(bool value) {
  _internal_set_customcardflag(value);
  // @@protoc_insertion_point(field_set:msg.BattleExtData.CustomCardFlag)
}

// string MapKey = 16;
inline void BattleExtData::clear_mapkey() {
  _impl_.mapkey_.ClearToEmpty();
}
inline const std::string& BattleExtData::mapkey() const {
  // @@protoc_insertion_point(field_get:msg.BattleExtData.MapKey)
  return _internal_mapkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleExtData::set_mapkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.BattleExtData.MapKey)
}
inline std::string* BattleExtData::mutable_mapkey() {
  std::string* _s = _internal_mutable_mapkey();
  // @@protoc_insertion_point(field_mutable:msg.BattleExtData.MapKey)
  return _s;
}
inline const std::string& BattleExtData::_internal_mapkey() const {
  return _impl_.mapkey_.Get();
}
inline void BattleExtData::_internal_set_mapkey(const std::string& value) {
  
  _impl_.mapkey_.Set(value, GetArenaForAllocation());
}
inline std::string* BattleExtData::_internal_mutable_mapkey() {
  
  return _impl_.mapkey_.Mutable(GetArenaForAllocation());
}
inline std::string* BattleExtData::release_mapkey() {
  // @@protoc_insertion_point(field_release:msg.BattleExtData.MapKey)
  return _impl_.mapkey_.Release();
}
inline void BattleExtData::set_allocated_mapkey(std::string* mapkey) {
  if (mapkey != nullptr) {
    
  } else {
    
  }
  _impl_.mapkey_.SetAllocated(mapkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapkey_.IsDefault()) {
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.BattleExtData.MapKey)
}

// -------------------------------------------------------------------

// PvpExtData

// .msg.PvpBigWinnerData BigWinner = 1;
inline bool PvpExtData::_internal_has_bigwinner() const {
  return this != internal_default_instance() && _impl_.bigwinner_ != nullptr;
}
inline bool PvpExtData::has_bigwinner() const {
  return _internal_has_bigwinner();
}
inline void PvpExtData::clear_bigwinner() {
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinner_ != nullptr) {
    delete _impl_.bigwinner_;
  }
  _impl_.bigwinner_ = nullptr;
}
inline const ::msg::PvpBigWinnerData& PvpExtData::_internal_bigwinner() const {
  const ::msg::PvpBigWinnerData* p = _impl_.bigwinner_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PvpBigWinnerData&>(
      ::msg::_PvpBigWinnerData_default_instance_);
}
inline const ::msg::PvpBigWinnerData& PvpExtData::bigwinner() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.BigWinner)
  return _internal_bigwinner();
}
inline void PvpExtData::unsafe_arena_set_allocated_bigwinner(
    ::msg::PvpBigWinnerData* bigwinner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinner_);
  }
  _impl_.bigwinner_ = bigwinner;
  if (bigwinner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PvpExtData.BigWinner)
}
inline ::msg::PvpBigWinnerData* PvpExtData::release_bigwinner() {
  
  ::msg::PvpBigWinnerData* temp = _impl_.bigwinner_;
  _impl_.bigwinner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PvpBigWinnerData* PvpExtData::unsafe_arena_release_bigwinner() {
  // @@protoc_insertion_point(field_release:msg.PvpExtData.BigWinner)
  
  ::msg::PvpBigWinnerData* temp = _impl_.bigwinner_;
  _impl_.bigwinner_ = nullptr;
  return temp;
}
inline ::msg::PvpBigWinnerData* PvpExtData::_internal_mutable_bigwinner() {
  
  if (_impl_.bigwinner_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PvpBigWinnerData>(GetArenaForAllocation());
    _impl_.bigwinner_ = p;
  }
  return _impl_.bigwinner_;
}
inline ::msg::PvpBigWinnerData* PvpExtData::mutable_bigwinner() {
  ::msg::PvpBigWinnerData* _msg = _internal_mutable_bigwinner();
  // @@protoc_insertion_point(field_mutable:msg.PvpExtData.BigWinner)
  return _msg;
}
inline void PvpExtData::set_allocated_bigwinner(::msg::PvpBigWinnerData* bigwinner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bigwinner_;
  }
  if (bigwinner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bigwinner);
    if (message_arena != submessage_arena) {
      bigwinner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinner_ = bigwinner;
  // @@protoc_insertion_point(field_set_allocated:msg.PvpExtData.BigWinner)
}

// uint32 Submode = 2;
inline void PvpExtData::clear_submode() {
  _impl_.submode_ = 0u;
}
inline uint32_t PvpExtData::_internal_submode() const {
  return _impl_.submode_;
}
inline uint32_t PvpExtData::submode() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.Submode)
  return _internal_submode();
}
inline void PvpExtData::_internal_set_submode(uint32_t value) {
  
  _impl_.submode_ = value;
}
inline void PvpExtData::set_submode(uint32_t value) {
  _internal_set_submode(value);
  // @@protoc_insertion_point(field_set:msg.PvpExtData.Submode)
}

// uint32 PvpChestVipLevel = 3;
inline void PvpExtData::clear_pvpchestviplevel() {
  _impl_.pvpchestviplevel_ = 0u;
}
inline uint32_t PvpExtData::_internal_pvpchestviplevel() const {
  return _impl_.pvpchestviplevel_;
}
inline uint32_t PvpExtData::pvpchestviplevel() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.PvpChestVipLevel)
  return _internal_pvpchestviplevel();
}
inline void PvpExtData::_internal_set_pvpchestviplevel(uint32_t value) {
  
  _impl_.pvpchestviplevel_ = value;
}
inline void PvpExtData::set_pvpchestviplevel(uint32_t value) {
  _internal_set_pvpchestviplevel(value);
  // @@protoc_insertion_point(field_set:msg.PvpExtData.PvpChestVipLevel)
}

// repeated uint32 PveDebuff = 4;
inline int PvpExtData::_internal_pvedebuff_size() const {
  return _impl_.pvedebuff_.size();
}
inline int PvpExtData::pvedebuff_size() const {
  return _internal_pvedebuff_size();
}
inline void PvpExtData::clear_pvedebuff() {
  _impl_.pvedebuff_.Clear();
}
inline uint32_t PvpExtData::_internal_pvedebuff(int index) const {
  return _impl_.pvedebuff_.Get(index);
}
inline uint32_t PvpExtData::pvedebuff(int index) const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.PveDebuff)
  return _internal_pvedebuff(index);
}
inline void PvpExtData::set_pvedebuff(int index, uint32_t value) {
  _impl_.pvedebuff_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PvpExtData.PveDebuff)
}
inline void PvpExtData::_internal_add_pvedebuff(uint32_t value) {
  _impl_.pvedebuff_.Add(value);
}
inline void PvpExtData::add_pvedebuff(uint32_t value) {
  _internal_add_pvedebuff(value);
  // @@protoc_insertion_point(field_add:msg.PvpExtData.PveDebuff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpExtData::_internal_pvedebuff() const {
  return _impl_.pvedebuff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpExtData::pvedebuff() const {
  // @@protoc_insertion_point(field_list:msg.PvpExtData.PveDebuff)
  return _internal_pvedebuff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpExtData::_internal_mutable_pvedebuff() {
  return &_impl_.pvedebuff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpExtData::mutable_pvedebuff() {
  // @@protoc_insertion_point(field_mutable_list:msg.PvpExtData.PveDebuff)
  return _internal_mutable_pvedebuff();
}

// string MapKey = 5;
inline void PvpExtData::clear_mapkey() {
  _impl_.mapkey_.ClearToEmpty();
}
inline const std::string& PvpExtData::mapkey() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.MapKey)
  return _internal_mapkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpExtData::set_mapkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpExtData.MapKey)
}
inline std::string* PvpExtData::mutable_mapkey() {
  std::string* _s = _internal_mutable_mapkey();
  // @@protoc_insertion_point(field_mutable:msg.PvpExtData.MapKey)
  return _s;
}
inline const std::string& PvpExtData::_internal_mapkey() const {
  return _impl_.mapkey_.Get();
}
inline void PvpExtData::_internal_set_mapkey(const std::string& value) {
  
  _impl_.mapkey_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpExtData::_internal_mutable_mapkey() {
  
  return _impl_.mapkey_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpExtData::release_mapkey() {
  // @@protoc_insertion_point(field_release:msg.PvpExtData.MapKey)
  return _impl_.mapkey_.Release();
}
inline void PvpExtData::set_allocated_mapkey(std::string* mapkey) {
  if (mapkey != nullptr) {
    
  } else {
    
  }
  _impl_.mapkey_.SetAllocated(mapkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapkey_.IsDefault()) {
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpExtData.MapKey)
}

// string Captain = 6;
inline void PvpExtData::clear_captain() {
  _impl_.captain_.ClearToEmpty();
}
inline const std::string& PvpExtData::captain() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.Captain)
  return _internal_captain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpExtData::set_captain(ArgT0&& arg0, ArgT... args) {
 
 _impl_.captain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpExtData.Captain)
}
inline std::string* PvpExtData::mutable_captain() {
  std::string* _s = _internal_mutable_captain();
  // @@protoc_insertion_point(field_mutable:msg.PvpExtData.Captain)
  return _s;
}
inline const std::string& PvpExtData::_internal_captain() const {
  return _impl_.captain_.Get();
}
inline void PvpExtData::_internal_set_captain(const std::string& value) {
  
  _impl_.captain_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpExtData::_internal_mutable_captain() {
  
  return _impl_.captain_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpExtData::release_captain() {
  // @@protoc_insertion_point(field_release:msg.PvpExtData.Captain)
  return _impl_.captain_.Release();
}
inline void PvpExtData::set_allocated_captain(std::string* captain) {
  if (captain != nullptr) {
    
  } else {
    
  }
  _impl_.captain_.SetAllocated(captain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.captain_.IsDefault()) {
    _impl_.captain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpExtData.Captain)
}

// bool IsCardGroup = 7;
inline void PvpExtData::clear_iscardgroup() {
  _impl_.iscardgroup_ = false;
}
inline bool PvpExtData::_internal_iscardgroup() const {
  return _impl_.iscardgroup_;
}
inline bool PvpExtData::iscardgroup() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.IsCardGroup)
  return _internal_iscardgroup();
}
inline void PvpExtData::_internal_set_iscardgroup(bool value) {
  
  _impl_.iscardgroup_ = value;
}
inline void PvpExtData::set_iscardgroup(bool value) {
  _internal_set_iscardgroup(value);
  // @@protoc_insertion_point(field_set:msg.PvpExtData.IsCardGroup)
}

// int32 TDStage = 8;
inline void PvpExtData::clear_tdstage() {
  _impl_.tdstage_ = 0;
}
inline int32_t PvpExtData::_internal_tdstage() const {
  return _impl_.tdstage_;
}
inline int32_t PvpExtData::tdstage() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.TDStage)
  return _internal_tdstage();
}
inline void PvpExtData::_internal_set_tdstage(int32_t value) {
  
  _impl_.tdstage_ = value;
}
inline void PvpExtData::set_tdstage(int32_t value) {
  _internal_set_tdstage(value);
  // @@protoc_insertion_point(field_set:msg.PvpExtData.TDStage)
}

// .msg.PveMode PveChallengeMode = 9;
inline void PvpExtData::clear_pvechallengemode() {
  _impl_.pvechallengemode_ = 0;
}
inline ::msg::PveMode PvpExtData::_internal_pvechallengemode() const {
  return static_cast< ::msg::PveMode >(_impl_.pvechallengemode_);
}
inline ::msg::PveMode PvpExtData::pvechallengemode() const {
  // @@protoc_insertion_point(field_get:msg.PvpExtData.PveChallengeMode)
  return _internal_pvechallengemode();
}
inline void PvpExtData::_internal_set_pvechallengemode(::msg::PveMode value) {
  
  _impl_.pvechallengemode_ = value;
}
inline void PvpExtData::set_pvechallengemode(::msg::PveMode value) {
  _internal_set_pvechallengemode(value);
  // @@protoc_insertion_point(field_set:msg.PvpExtData.PveChallengeMode)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlayerExtMap

// map<string, int32> AssistantMap = 1;
inline int PlayerExtMap::_internal_assistantmap_size() const {
  return _impl_.assistantmap_.size();
}
inline int PlayerExtMap::assistantmap_size() const {
  return _internal_assistantmap_size();
}
inline void PlayerExtMap::clear_assistantmap() {
  _impl_.assistantmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
PlayerExtMap::_internal_assistantmap() const {
  return _impl_.assistantmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
PlayerExtMap::assistantmap() const {
  // @@protoc_insertion_point(field_map:msg.PlayerExtMap.AssistantMap)
  return _internal_assistantmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
PlayerExtMap::_internal_mutable_assistantmap() {
  return _impl_.assistantmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
PlayerExtMap::mutable_assistantmap() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerExtMap.AssistantMap)
  return _internal_mutable_assistantmap();
}

// map<string, uint32> BattleTimeMap = 2;
inline int PlayerExtMap::_internal_battletimemap_size() const {
  return _impl_.battletimemap_.size();
}
inline int PlayerExtMap::battletimemap_size() const {
  return _internal_battletimemap_size();
}
inline void PlayerExtMap::clear_battletimemap() {
  _impl_.battletimemap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
PlayerExtMap::_internal_battletimemap() const {
  return _impl_.battletimemap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
PlayerExtMap::battletimemap() const {
  // @@protoc_insertion_point(field_map:msg.PlayerExtMap.BattleTimeMap)
  return _internal_battletimemap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
PlayerExtMap::_internal_mutable_battletimemap() {
  return _impl_.battletimemap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
PlayerExtMap::mutable_battletimemap() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerExtMap.BattleTimeMap)
  return _internal_mutable_battletimemap();
}

// map<string, .msg.Buffs> PveBuff = 3;
inline int PlayerExtMap::_internal_pvebuff_size() const {
  return _impl_.pvebuff_.size();
}
inline int PlayerExtMap::pvebuff_size() const {
  return _internal_pvebuff_size();
}
inline void PlayerExtMap::clear_pvebuff() {
  _impl_.pvebuff_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >&
PlayerExtMap::_internal_pvebuff() const {
  return _impl_.pvebuff_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >&
PlayerExtMap::pvebuff() const {
  // @@protoc_insertion_point(field_map:msg.PlayerExtMap.PveBuff)
  return _internal_pvebuff();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >*
PlayerExtMap::_internal_mutable_pvebuff() {
  return _impl_.pvebuff_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >*
PlayerExtMap::mutable_pvebuff() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerExtMap.PveBuff)
  return _internal_mutable_pvebuff();
}

// map<string, string> MsRelation = 4;
inline int PlayerExtMap::_internal_msrelation_size() const {
  return _impl_.msrelation_.size();
}
inline int PlayerExtMap::msrelation_size() const {
  return _internal_msrelation_size();
}
inline void PlayerExtMap::clear_msrelation() {
  _impl_.msrelation_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PlayerExtMap::_internal_msrelation() const {
  return _impl_.msrelation_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PlayerExtMap::msrelation() const {
  // @@protoc_insertion_point(field_map:msg.PlayerExtMap.MsRelation)
  return _internal_msrelation();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PlayerExtMap::_internal_mutable_msrelation() {
  return _impl_.msrelation_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PlayerExtMap::mutable_msrelation() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerExtMap.MsRelation)
  return _internal_mutable_msrelation();
}

// map<string, .msg.TEAMGROUP> PvpPlayerGroup = 5;
inline int PlayerExtMap::_internal_pvpplayergroup_size() const {
  return _impl_.pvpplayergroup_.size();
}
inline int PlayerExtMap::pvpplayergroup_size() const {
  return _internal_pvpplayergroup_size();
}
inline void PlayerExtMap::clear_pvpplayergroup() {
  _impl_.pvpplayergroup_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >&
PlayerExtMap::_internal_pvpplayergroup() const {
  return _impl_.pvpplayergroup_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >&
PlayerExtMap::pvpplayergroup() const {
  // @@protoc_insertion_point(field_map:msg.PlayerExtMap.PvpPlayerGroup)
  return _internal_pvpplayergroup();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >*
PlayerExtMap::_internal_mutable_pvpplayergroup() {
  return _impl_.pvpplayergroup_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >*
PlayerExtMap::mutable_pvpplayergroup() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerExtMap.PvpPlayerGroup)
  return _internal_mutable_pvpplayergroup();
}

// -------------------------------------------------------------------

// Buffs

// repeated uint32 Data = 1;
inline int Buffs::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Buffs::data_size() const {
  return _internal_data_size();
}
inline void Buffs::clear_data() {
  _impl_.data_.Clear();
}
inline uint32_t Buffs::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline uint32_t Buffs::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.Buffs.Data)
  return _internal_data(index);
}
inline void Buffs::set_data(int index, uint32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.Buffs.Data)
}
inline void Buffs::_internal_add_data(uint32_t value) {
  _impl_.data_.Add(value);
}
inline void Buffs::add_data(uint32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:msg.Buffs.Data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Buffs::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Buffs::data() const {
  // @@protoc_insertion_point(field_list:msg.Buffs.Data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Buffs::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Buffs::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.Buffs.Data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ActivityGroup

// .msg.ActivityGroupData Group = 1;
inline bool ActivityGroup::_internal_has_group() const {
  return this != internal_default_instance() && _impl_.group_ != nullptr;
}
inline bool ActivityGroup::has_group() const {
  return _internal_has_group();
}
inline void ActivityGroup::clear_group() {
  if (GetArenaForAllocation() == nullptr && _impl_.group_ != nullptr) {
    delete _impl_.group_;
  }
  _impl_.group_ = nullptr;
}
inline const ::msg::ActivityGroupData& ActivityGroup::_internal_group() const {
  const ::msg::ActivityGroupData* p = _impl_.group_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::ActivityGroupData&>(
      ::msg::_ActivityGroupData_default_instance_);
}
inline const ::msg::ActivityGroupData& ActivityGroup::group() const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroup.Group)
  return _internal_group();
}
inline void ActivityGroup::unsafe_arena_set_allocated_group(
    ::msg::ActivityGroupData* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.group_);
  }
  _impl_.group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ActivityGroup.Group)
}
inline ::msg::ActivityGroupData* ActivityGroup::release_group() {
  
  ::msg::ActivityGroupData* temp = _impl_.group_;
  _impl_.group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::ActivityGroupData* ActivityGroup::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:msg.ActivityGroup.Group)
  
  ::msg::ActivityGroupData* temp = _impl_.group_;
  _impl_.group_ = nullptr;
  return temp;
}
inline ::msg::ActivityGroupData* ActivityGroup::_internal_mutable_group() {
  
  if (_impl_.group_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ActivityGroupData>(GetArenaForAllocation());
    _impl_.group_ = p;
  }
  return _impl_.group_;
}
inline ::msg::ActivityGroupData* ActivityGroup::mutable_group() {
  ::msg::ActivityGroupData* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroup.Group)
  return _msg;
}
inline void ActivityGroup::set_allocated_group(::msg::ActivityGroupData* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.group_ = group;
  // @@protoc_insertion_point(field_set_allocated:msg.ActivityGroup.Group)
}

// repeated .msg.ActivityData Activities = 2;
inline int ActivityGroup::_internal_activities_size() const {
  return _impl_.activities_.size();
}
inline int ActivityGroup::activities_size() const {
  return _internal_activities_size();
}
inline void ActivityGroup::clear_activities() {
  _impl_.activities_.Clear();
}
inline ::msg::ActivityData* ActivityGroup::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ActivityGroup.Activities)
  return _impl_.activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ActivityData >*
ActivityGroup::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:msg.ActivityGroup.Activities)
  return &_impl_.activities_;
}
inline const ::msg::ActivityData& ActivityGroup::_internal_activities(int index) const {
  return _impl_.activities_.Get(index);
}
inline const ::msg::ActivityData& ActivityGroup::activities(int index) const {
  // @@protoc_insertion_point(field_get:msg.ActivityGroup.Activities)
  return _internal_activities(index);
}
inline ::msg::ActivityData* ActivityGroup::_internal_add_activities() {
  return _impl_.activities_.Add();
}
inline ::msg::ActivityData* ActivityGroup::add_activities() {
  ::msg::ActivityData* _add = _internal_add_activities();
  // @@protoc_insertion_point(field_add:msg.ActivityGroup.Activities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ActivityData >&
ActivityGroup::activities() const {
  // @@protoc_insertion_point(field_list:msg.ActivityGroup.Activities)
  return _impl_.activities_;
}

// -------------------------------------------------------------------

// ScoredMap

// uint32 MapID = 1;
inline void ScoredMap::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t ScoredMap::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t ScoredMap::mapid() const {
  // @@protoc_insertion_point(field_get:msg.ScoredMap.MapID)
  return _internal_mapid();
}
inline void ScoredMap::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void ScoredMap::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.ScoredMap.MapID)
}

// bool IsLike = 2;
inline void ScoredMap::clear_islike() {
  _impl_.islike_ = false;
}
inline bool ScoredMap::_internal_islike() const {
  return _impl_.islike_;
}
inline bool ScoredMap::islike() const {
  // @@protoc_insertion_point(field_get:msg.ScoredMap.IsLike)
  return _internal_islike();
}
inline void ScoredMap::_internal_set_islike(bool value) {
  
  _impl_.islike_ = value;
}
inline void ScoredMap::set_islike(bool value) {
  _internal_set_islike(value);
  // @@protoc_insertion_point(field_set:msg.ScoredMap.IsLike)
}

// -------------------------------------------------------------------

// TransferEvent

// .msg.TransferEventType EType = 1;
inline void TransferEvent::clear_etype() {
  _impl_.etype_ = 0;
}
inline ::msg::TransferEventType TransferEvent::_internal_etype() const {
  return static_cast< ::msg::TransferEventType >(_impl_.etype_);
}
inline ::msg::TransferEventType TransferEvent::etype() const {
  // @@protoc_insertion_point(field_get:msg.TransferEvent.EType)
  return _internal_etype();
}
inline void TransferEvent::_internal_set_etype(::msg::TransferEventType value) {
  
  _impl_.etype_ = value;
}
inline void TransferEvent::set_etype(::msg::TransferEventType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:msg.TransferEvent.EType)
}

// int32 TokenID = 2;
inline void TransferEvent::clear_tokenid() {
  _impl_.tokenid_ = 0;
}
inline int32_t TransferEvent::_internal_tokenid() const {
  return _impl_.tokenid_;
}
inline int32_t TransferEvent::tokenid() const {
  // @@protoc_insertion_point(field_get:msg.TransferEvent.TokenID)
  return _internal_tokenid();
}
inline void TransferEvent::_internal_set_tokenid(int32_t value) {
  
  _impl_.tokenid_ = value;
}
inline void TransferEvent::set_tokenid(int32_t value) {
  _internal_set_tokenid(value);
  // @@protoc_insertion_point(field_set:msg.TransferEvent.TokenID)
}

// int32 TokenCount = 3;
inline void TransferEvent::clear_tokencount() {
  _impl_.tokencount_ = 0;
}
inline int32_t TransferEvent::_internal_tokencount() const {
  return _impl_.tokencount_;
}
inline int32_t TransferEvent::tokencount() const {
  // @@protoc_insertion_point(field_get:msg.TransferEvent.TokenCount)
  return _internal_tokencount();
}
inline void TransferEvent::_internal_set_tokencount(int32_t value) {
  
  _impl_.tokencount_ = value;
}
inline void TransferEvent::set_tokencount(int32_t value) {
  _internal_set_tokencount(value);
  // @@protoc_insertion_point(field_set:msg.TransferEvent.TokenCount)
}

// string Payee = 4;
inline void TransferEvent::clear_payee() {
  _impl_.payee_.ClearToEmpty();
}
inline const std::string& TransferEvent::payee() const {
  // @@protoc_insertion_point(field_get:msg.TransferEvent.Payee)
  return _internal_payee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferEvent::set_payee(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payee_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TransferEvent.Payee)
}
inline std::string* TransferEvent::mutable_payee() {
  std::string* _s = _internal_mutable_payee();
  // @@protoc_insertion_point(field_mutable:msg.TransferEvent.Payee)
  return _s;
}
inline const std::string& TransferEvent::_internal_payee() const {
  return _impl_.payee_.Get();
}
inline void TransferEvent::_internal_set_payee(const std::string& value) {
  
  _impl_.payee_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferEvent::_internal_mutable_payee() {
  
  return _impl_.payee_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferEvent::release_payee() {
  // @@protoc_insertion_point(field_release:msg.TransferEvent.Payee)
  return _impl_.payee_.Release();
}
inline void TransferEvent::set_allocated_payee(std::string* payee) {
  if (payee != nullptr) {
    
  } else {
    
  }
  _impl_.payee_.SetAllocated(payee, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payee_.IsDefault()) {
    _impl_.payee_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TransferEvent.Payee)
}

// string RedHSetField = 5;
inline void TransferEvent::clear_redhsetfield() {
  _impl_.redhsetfield_.ClearToEmpty();
}
inline const std::string& TransferEvent::redhsetfield() const {
  // @@protoc_insertion_point(field_get:msg.TransferEvent.RedHSetField)
  return _internal_redhsetfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferEvent::set_redhsetfield(ArgT0&& arg0, ArgT... args) {
 
 _impl_.redhsetfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TransferEvent.RedHSetField)
}
inline std::string* TransferEvent::mutable_redhsetfield() {
  std::string* _s = _internal_mutable_redhsetfield();
  // @@protoc_insertion_point(field_mutable:msg.TransferEvent.RedHSetField)
  return _s;
}
inline const std::string& TransferEvent::_internal_redhsetfield() const {
  return _impl_.redhsetfield_.Get();
}
inline void TransferEvent::_internal_set_redhsetfield(const std::string& value) {
  
  _impl_.redhsetfield_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferEvent::_internal_mutable_redhsetfield() {
  
  return _impl_.redhsetfield_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferEvent::release_redhsetfield() {
  // @@protoc_insertion_point(field_release:msg.TransferEvent.RedHSetField)
  return _impl_.redhsetfield_.Release();
}
inline void TransferEvent::set_allocated_redhsetfield(std::string* redhsetfield) {
  if (redhsetfield != nullptr) {
    
  } else {
    
  }
  _impl_.redhsetfield_.SetAllocated(redhsetfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redhsetfield_.IsDefault()) {
    _impl_.redhsetfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TransferEvent.RedHSetField)
}

// -------------------------------------------------------------------

// TransferOP

// string PayeeID = 1;
inline void TransferOP::clear_payeeid() {
  _impl_.payeeid_.ClearToEmpty();
}
inline const std::string& TransferOP::payeeid() const {
  // @@protoc_insertion_point(field_get:msg.TransferOP.PayeeID)
  return _internal_payeeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferOP::set_payeeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payeeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TransferOP.PayeeID)
}
inline std::string* TransferOP::mutable_payeeid() {
  std::string* _s = _internal_mutable_payeeid();
  // @@protoc_insertion_point(field_mutable:msg.TransferOP.PayeeID)
  return _s;
}
inline const std::string& TransferOP::_internal_payeeid() const {
  return _impl_.payeeid_.Get();
}
inline void TransferOP::_internal_set_payeeid(const std::string& value) {
  
  _impl_.payeeid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferOP::_internal_mutable_payeeid() {
  
  return _impl_.payeeid_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferOP::release_payeeid() {
  // @@protoc_insertion_point(field_release:msg.TransferOP.PayeeID)
  return _impl_.payeeid_.Release();
}
inline void TransferOP::set_allocated_payeeid(std::string* payeeid) {
  if (payeeid != nullptr) {
    
  } else {
    
  }
  _impl_.payeeid_.SetAllocated(payeeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payeeid_.IsDefault()) {
    _impl_.payeeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TransferOP.PayeeID)
}

// uint32 TokenID = 2;
inline void TransferOP::clear_tokenid() {
  _impl_.tokenid_ = 0u;
}
inline uint32_t TransferOP::_internal_tokenid() const {
  return _impl_.tokenid_;
}
inline uint32_t TransferOP::tokenid() const {
  // @@protoc_insertion_point(field_get:msg.TransferOP.TokenID)
  return _internal_tokenid();
}
inline void TransferOP::_internal_set_tokenid(uint32_t value) {
  
  _impl_.tokenid_ = value;
}
inline void TransferOP::set_tokenid(uint32_t value) {
  _internal_set_tokenid(value);
  // @@protoc_insertion_point(field_set:msg.TransferOP.TokenID)
}

// int32 Change = 3;
inline void TransferOP::clear_change() {
  _impl_.change_ = 0;
}
inline int32_t TransferOP::_internal_change() const {
  return _impl_.change_;
}
inline int32_t TransferOP::change() const {
  // @@protoc_insertion_point(field_get:msg.TransferOP.Change)
  return _internal_change();
}
inline void TransferOP::_internal_set_change(int32_t value) {
  
  _impl_.change_ = value;
}
inline void TransferOP::set_change(int32_t value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:msg.TransferOP.Change)
}

// string UUID = 4;
inline void TransferOP::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& TransferOP::uuid() const {
  // @@protoc_insertion_point(field_get:msg.TransferOP.UUID)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransferOP::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.TransferOP.UUID)
}
inline std::string* TransferOP::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:msg.TransferOP.UUID)
  return _s;
}
inline const std::string& TransferOP::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void TransferOP::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferOP::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* TransferOP::release_uuid() {
  // @@protoc_insertion_point(field_release:msg.TransferOP.UUID)
  return _impl_.uuid_.Release();
}
inline void TransferOP::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.TransferOP.UUID)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSDTBetData

// int32 BetFromAuthor = 1;
inline void CSDTBetData::clear_betfromauthor() {
  _impl_.betfromauthor_ = 0;
}
inline int32_t CSDTBetData::_internal_betfromauthor() const {
  return _impl_.betfromauthor_;
}
inline int32_t CSDTBetData::betfromauthor() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBetData.BetFromAuthor)
  return _internal_betfromauthor();
}
inline void CSDTBetData::_internal_set_betfromauthor(int32_t value) {
  
  _impl_.betfromauthor_ = value;
}
inline void CSDTBetData::set_betfromauthor(int32_t value) {
  _internal_set_betfromauthor(value);
  // @@protoc_insertion_point(field_set:msg.CSDTBetData.BetFromAuthor)
}

// string AuthorId = 2;
inline void CSDTBetData::clear_authorid() {
  _impl_.authorid_.ClearToEmpty();
}
inline const std::string& CSDTBetData::authorid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTBetData.AuthorId)
  return _internal_authorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTBetData::set_authorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.authorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTBetData.AuthorId)
}
inline std::string* CSDTBetData::mutable_authorid() {
  std::string* _s = _internal_mutable_authorid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTBetData.AuthorId)
  return _s;
}
inline const std::string& CSDTBetData::_internal_authorid() const {
  return _impl_.authorid_.Get();
}
inline void CSDTBetData::_internal_set_authorid(const std::string& value) {
  
  _impl_.authorid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTBetData::_internal_mutable_authorid() {
  
  return _impl_.authorid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTBetData::release_authorid() {
  // @@protoc_insertion_point(field_release:msg.CSDTBetData.AuthorId)
  return _impl_.authorid_.Release();
}
inline void CSDTBetData::set_allocated_authorid(std::string* authorid) {
  if (authorid != nullptr) {
    
  } else {
    
  }
  _impl_.authorid_.SetAllocated(authorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.authorid_.IsDefault()) {
    _impl_.authorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTBetData.AuthorId)
}

// map<string, int32> BetFromPlayers = 3;
inline int CSDTBetData::_internal_betfromplayers_size() const {
  return _impl_.betfromplayers_.size();
}
inline int CSDTBetData::betfromplayers_size() const {
  return _internal_betfromplayers_size();
}
inline void CSDTBetData::clear_betfromplayers() {
  _impl_.betfromplayers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CSDTBetData::_internal_betfromplayers() const {
  return _impl_.betfromplayers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CSDTBetData::betfromplayers() const {
  // @@protoc_insertion_point(field_map:msg.CSDTBetData.BetFromPlayers)
  return _internal_betfromplayers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CSDTBetData::_internal_mutable_betfromplayers() {
  return _impl_.betfromplayers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CSDTBetData::mutable_betfromplayers() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSDTBetData.BetFromPlayers)
  return _internal_mutable_betfromplayers();
}

// -------------------------------------------------------------------

// MailExtData

// repeated .msg.ExtItem Items = 1;
inline int MailExtData::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int MailExtData::items_size() const {
  return _internal_items_size();
}
inline void MailExtData::clear_items() {
  _impl_.items_.Clear();
}
inline ::msg::ExtItem* MailExtData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MailExtData.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ExtItem >*
MailExtData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:msg.MailExtData.Items)
  return &_impl_.items_;
}
inline const ::msg::ExtItem& MailExtData::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::msg::ExtItem& MailExtData::items(int index) const {
  // @@protoc_insertion_point(field_get:msg.MailExtData.Items)
  return _internal_items(index);
}
inline ::msg::ExtItem* MailExtData::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::msg::ExtItem* MailExtData::add_items() {
  ::msg::ExtItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:msg.MailExtData.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ExtItem >&
MailExtData::items() const {
  // @@protoc_insertion_point(field_list:msg.MailExtData.Items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// ExtItem

// int32 Id = 1;
inline void ExtItem::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ExtItem::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ExtItem::id() const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.Id)
  return _internal_id();
}
inline void ExtItem::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ExtItem::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ExtItem.Id)
}

// int32 Count = 2;
inline void ExtItem::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t ExtItem::_internal_count() const {
  return _impl_.count_;
}
inline int32_t ExtItem::count() const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.Count)
  return _internal_count();
}
inline void ExtItem::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void ExtItem::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.ExtItem.Count)
}

// repeated int64 Para = 3;
inline int ExtItem::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int ExtItem::para_size() const {
  return _internal_para_size();
}
inline void ExtItem::clear_para() {
  _impl_.para_.Clear();
}
inline int64_t ExtItem::_internal_para(int index) const {
  return _impl_.para_.Get(index);
}
inline int64_t ExtItem::para(int index) const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.Para)
  return _internal_para(index);
}
inline void ExtItem::set_para(int index, int64_t value) {
  _impl_.para_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ExtItem.Para)
}
inline void ExtItem::_internal_add_para(int64_t value) {
  _impl_.para_.Add(value);
}
inline void ExtItem::add_para(int64_t value) {
  _internal_add_para(value);
  // @@protoc_insertion_point(field_add:msg.ExtItem.Para)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ExtItem::_internal_para() const {
  return _impl_.para_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ExtItem::para() const {
  // @@protoc_insertion_point(field_list:msg.ExtItem.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ExtItem::_internal_mutable_para() {
  return &_impl_.para_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ExtItem::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:msg.ExtItem.Para)
  return _internal_mutable_para();
}

// string InstanceId = 4;
inline void ExtItem::clear_instanceid() {
  _impl_.instanceid_.ClearToEmpty();
}
inline const std::string& ExtItem::instanceid() const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.InstanceId)
  return _internal_instanceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtItem::set_instanceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instanceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ExtItem.InstanceId)
}
inline std::string* ExtItem::mutable_instanceid() {
  std::string* _s = _internal_mutable_instanceid();
  // @@protoc_insertion_point(field_mutable:msg.ExtItem.InstanceId)
  return _s;
}
inline const std::string& ExtItem::_internal_instanceid() const {
  return _impl_.instanceid_.Get();
}
inline void ExtItem::_internal_set_instanceid(const std::string& value) {
  
  _impl_.instanceid_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtItem::_internal_mutable_instanceid() {
  
  return _impl_.instanceid_.Mutable(GetArenaForAllocation());
}
inline std::string* ExtItem::release_instanceid() {
  // @@protoc_insertion_point(field_release:msg.ExtItem.InstanceId)
  return _impl_.instanceid_.Release();
}
inline void ExtItem::set_allocated_instanceid(std::string* instanceid) {
  if (instanceid != nullptr) {
    
  } else {
    
  }
  _impl_.instanceid_.SetAllocated(instanceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instanceid_.IsDefault()) {
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ExtItem.InstanceId)
}

// int32 Weight = 5;
inline void ExtItem::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t ExtItem::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t ExtItem::weight() const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.Weight)
  return _internal_weight();
}
inline void ExtItem::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void ExtItem::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:msg.ExtItem.Weight)
}

// int32 Price = 6;
inline void ExtItem::clear_price() {
  _impl_.price_ = 0;
}
inline int32_t ExtItem::_internal_price() const {
  return _impl_.price_;
}
inline int32_t ExtItem::price() const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.Price)
  return _internal_price();
}
inline void ExtItem::_internal_set_price(int32_t value) {
  
  _impl_.price_ = value;
}
inline void ExtItem::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:msg.ExtItem.Price)
}

// int32 SourceIdx = 7;
inline void ExtItem::clear_sourceidx() {
  _impl_.sourceidx_ = 0;
}
inline int32_t ExtItem::_internal_sourceidx() const {
  return _impl_.sourceidx_;
}
inline int32_t ExtItem::sourceidx() const {
  // @@protoc_insertion_point(field_get:msg.ExtItem.SourceIdx)
  return _internal_sourceidx();
}
inline void ExtItem::_internal_set_sourceidx(int32_t value) {
  
  _impl_.sourceidx_ = value;
}
inline void ExtItem::set_sourceidx(int32_t value) {
  _internal_set_sourceidx(value);
  // @@protoc_insertion_point(field_set:msg.ExtItem.SourceIdx)
}

// -------------------------------------------------------------------

// CSDTTasks

// repeated .msg.CSDTTaskItem Trophy = 1;
inline int CSDTTasks::_internal_trophy_size() const {
  return _impl_.trophy_.size();
}
inline int CSDTTasks::trophy_size() const {
  return _internal_trophy_size();
}
inline void CSDTTasks::clear_trophy() {
  _impl_.trophy_.Clear();
}
inline ::msg::CSDTTaskItem* CSDTTasks::mutable_trophy(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTTasks.Trophy)
  return _impl_.trophy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >*
CSDTTasks::mutable_trophy() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTTasks.Trophy)
  return &_impl_.trophy_;
}
inline const ::msg::CSDTTaskItem& CSDTTasks::_internal_trophy(int index) const {
  return _impl_.trophy_.Get(index);
}
inline const ::msg::CSDTTaskItem& CSDTTasks::trophy(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTTasks.Trophy)
  return _internal_trophy(index);
}
inline ::msg::CSDTTaskItem* CSDTTasks::_internal_add_trophy() {
  return _impl_.trophy_.Add();
}
inline ::msg::CSDTTaskItem* CSDTTasks::add_trophy() {
  ::msg::CSDTTaskItem* _add = _internal_add_trophy();
  // @@protoc_insertion_point(field_add:msg.CSDTTasks.Trophy)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >&
CSDTTasks::trophy() const {
  // @@protoc_insertion_point(field_list:msg.CSDTTasks.Trophy)
  return _impl_.trophy_;
}

// repeated .msg.CSDTTaskItem Achieve = 2;
inline int CSDTTasks::_internal_achieve_size() const {
  return _impl_.achieve_.size();
}
inline int CSDTTasks::achieve_size() const {
  return _internal_achieve_size();
}
inline void CSDTTasks::clear_achieve() {
  _impl_.achieve_.Clear();
}
inline ::msg::CSDTTaskItem* CSDTTasks::mutable_achieve(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSDTTasks.Achieve)
  return _impl_.achieve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >*
CSDTTasks::mutable_achieve() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTTasks.Achieve)
  return &_impl_.achieve_;
}
inline const ::msg::CSDTTaskItem& CSDTTasks::_internal_achieve(int index) const {
  return _impl_.achieve_.Get(index);
}
inline const ::msg::CSDTTaskItem& CSDTTasks::achieve(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTTasks.Achieve)
  return _internal_achieve(index);
}
inline ::msg::CSDTTaskItem* CSDTTasks::_internal_add_achieve() {
  return _impl_.achieve_.Add();
}
inline ::msg::CSDTTaskItem* CSDTTasks::add_achieve() {
  ::msg::CSDTTaskItem* _add = _internal_add_achieve();
  // @@protoc_insertion_point(field_add:msg.CSDTTasks.Achieve)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTTaskItem >&
CSDTTasks::achieve() const {
  // @@protoc_insertion_point(field_list:msg.CSDTTasks.Achieve)
  return _impl_.achieve_;
}

// -------------------------------------------------------------------

// PvpTeachResult

// uint32 PassId = 1;
inline void PvpTeachResult::clear_passid() {
  _impl_.passid_ = 0u;
}
inline uint32_t PvpTeachResult::_internal_passid() const {
  return _impl_.passid_;
}
inline uint32_t PvpTeachResult::passid() const {
  // @@protoc_insertion_point(field_get:msg.PvpTeachResult.PassId)
  return _internal_passid();
}
inline void PvpTeachResult::_internal_set_passid(uint32_t value) {
  
  _impl_.passid_ = value;
}
inline void PvpTeachResult::set_passid(uint32_t value) {
  _internal_set_passid(value);
  // @@protoc_insertion_point(field_set:msg.PvpTeachResult.PassId)
}

// bool Win = 2;
inline void PvpTeachResult::clear_win() {
  _impl_.win_ = false;
}
inline bool PvpTeachResult::_internal_win() const {
  return _impl_.win_;
}
inline bool PvpTeachResult::win() const {
  // @@protoc_insertion_point(field_get:msg.PvpTeachResult.Win)
  return _internal_win();
}
inline void PvpTeachResult::_internal_set_win(bool value) {
  
  _impl_.win_ = value;
}
inline void PvpTeachResult::set_win(bool value) {
  _internal_set_win(value);
  // @@protoc_insertion_point(field_set:msg.PvpTeachResult.Win)
}

// -------------------------------------------------------------------

// PvpBigWinnerData

// uint32 Id = 1;
inline void PvpBigWinnerData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t PvpBigWinnerData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t PvpBigWinnerData::id() const {
  // @@protoc_insertion_point(field_get:msg.PvpBigWinnerData.Id)
  return _internal_id();
}
inline void PvpBigWinnerData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void PvpBigWinnerData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.PvpBigWinnerData.Id)
}

// uint32 MapId = 2;
inline void PvpBigWinnerData::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t PvpBigWinnerData::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t PvpBigWinnerData::mapid() const {
  // @@protoc_insertion_point(field_get:msg.PvpBigWinnerData.MapId)
  return _internal_mapid();
}
inline void PvpBigWinnerData::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void PvpBigWinnerData::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:msg.PvpBigWinnerData.MapId)
}

// uint32 SysPercent = 3;
inline void PvpBigWinnerData::clear_syspercent() {
  _impl_.syspercent_ = 0u;
}
inline uint32_t PvpBigWinnerData::_internal_syspercent() const {
  return _impl_.syspercent_;
}
inline uint32_t PvpBigWinnerData::syspercent() const {
  // @@protoc_insertion_point(field_get:msg.PvpBigWinnerData.SysPercent)
  return _internal_syspercent();
}
inline void PvpBigWinnerData::_internal_set_syspercent(uint32_t value) {
  
  _impl_.syspercent_ = value;
}
inline void PvpBigWinnerData::set_syspercent(uint32_t value) {
  _internal_set_syspercent(value);
  // @@protoc_insertion_point(field_set:msg.PvpBigWinnerData.SysPercent)
}

// repeated uint32 RankRewardList = 4;
inline int PvpBigWinnerData::_internal_rankrewardlist_size() const {
  return _impl_.rankrewardlist_.size();
}
inline int PvpBigWinnerData::rankrewardlist_size() const {
  return _internal_rankrewardlist_size();
}
inline void PvpBigWinnerData::clear_rankrewardlist() {
  _impl_.rankrewardlist_.Clear();
}
inline uint32_t PvpBigWinnerData::_internal_rankrewardlist(int index) const {
  return _impl_.rankrewardlist_.Get(index);
}
inline uint32_t PvpBigWinnerData::rankrewardlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.PvpBigWinnerData.RankRewardList)
  return _internal_rankrewardlist(index);
}
inline void PvpBigWinnerData::set_rankrewardlist(int index, uint32_t value) {
  _impl_.rankrewardlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PvpBigWinnerData.RankRewardList)
}
inline void PvpBigWinnerData::_internal_add_rankrewardlist(uint32_t value) {
  _impl_.rankrewardlist_.Add(value);
}
inline void PvpBigWinnerData::add_rankrewardlist(uint32_t value) {
  _internal_add_rankrewardlist(value);
  // @@protoc_insertion_point(field_add:msg.PvpBigWinnerData.RankRewardList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpBigWinnerData::_internal_rankrewardlist() const {
  return _impl_.rankrewardlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PvpBigWinnerData::rankrewardlist() const {
  // @@protoc_insertion_point(field_list:msg.PvpBigWinnerData.RankRewardList)
  return _internal_rankrewardlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpBigWinnerData::_internal_mutable_rankrewardlist() {
  return &_impl_.rankrewardlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PvpBigWinnerData::mutable_rankrewardlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.PvpBigWinnerData.RankRewardList)
  return _internal_mutable_rankrewardlist();
}

// string ConfigName = 5;
inline void PvpBigWinnerData::clear_configname() {
  _impl_.configname_.ClearToEmpty();
}
inline const std::string& PvpBigWinnerData::configname() const {
  // @@protoc_insertion_point(field_get:msg.PvpBigWinnerData.ConfigName)
  return _internal_configname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PvpBigWinnerData::set_configname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.configname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PvpBigWinnerData.ConfigName)
}
inline std::string* PvpBigWinnerData::mutable_configname() {
  std::string* _s = _internal_mutable_configname();
  // @@protoc_insertion_point(field_mutable:msg.PvpBigWinnerData.ConfigName)
  return _s;
}
inline const std::string& PvpBigWinnerData::_internal_configname() const {
  return _impl_.configname_.Get();
}
inline void PvpBigWinnerData::_internal_set_configname(const std::string& value) {
  
  _impl_.configname_.Set(value, GetArenaForAllocation());
}
inline std::string* PvpBigWinnerData::_internal_mutable_configname() {
  
  return _impl_.configname_.Mutable(GetArenaForAllocation());
}
inline std::string* PvpBigWinnerData::release_configname() {
  // @@protoc_insertion_point(field_release:msg.PvpBigWinnerData.ConfigName)
  return _impl_.configname_.Release();
}
inline void PvpBigWinnerData::set_allocated_configname(std::string* configname) {
  if (configname != nullptr) {
    
  } else {
    
  }
  _impl_.configname_.SetAllocated(configname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.configname_.IsDefault()) {
    _impl_.configname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PvpBigWinnerData.ConfigName)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PveExData

// map<string, int32> Talent = 1;
inline int PveExData::_internal_talent_size() const {
  return _impl_.talent_.size();
}
inline int PveExData::talent_size() const {
  return _internal_talent_size();
}
inline void PveExData::clear_talent() {
  _impl_.talent_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
PveExData::_internal_talent() const {
  return _impl_.talent_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
PveExData::talent() const {
  // @@protoc_insertion_point(field_map:msg.PveExData.Talent)
  return _internal_talent();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
PveExData::_internal_mutable_talent() {
  return _impl_.talent_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
PveExData::mutable_talent() {
  // @@protoc_insertion_point(field_mutable_map:msg.PveExData.Talent)
  return _internal_mutable_talent();
}

// -------------------------------------------------------------------

// ChampionInfo

// uint32 Zone = 1;
inline void ChampionInfo::clear_zone() {
  _impl_.zone_ = 0u;
}
inline uint32_t ChampionInfo::_internal_zone() const {
  return _impl_.zone_;
}
inline uint32_t ChampionInfo::zone() const {
  // @@protoc_insertion_point(field_get:msg.ChampionInfo.Zone)
  return _internal_zone();
}
inline void ChampionInfo::_internal_set_zone(uint32_t value) {
  
  _impl_.zone_ = value;
}
inline void ChampionInfo::set_zone(uint32_t value) {
  _internal_set_zone(value);
  // @@protoc_insertion_point(field_set:msg.ChampionInfo.Zone)
}

// uint32 Period = 2;
inline void ChampionInfo::clear_period() {
  _impl_.period_ = 0u;
}
inline uint32_t ChampionInfo::_internal_period() const {
  return _impl_.period_;
}
inline uint32_t ChampionInfo::period() const {
  // @@protoc_insertion_point(field_get:msg.ChampionInfo.Period)
  return _internal_period();
}
inline void ChampionInfo::_internal_set_period(uint32_t value) {
  
  _impl_.period_ = value;
}
inline void ChampionInfo::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:msg.ChampionInfo.Period)
}

// string Id = 3;
inline void ChampionInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ChampionInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.ChampionInfo.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChampionInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ChampionInfo.Id)
}
inline std::string* ChampionInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.ChampionInfo.Id)
  return _s;
}
inline const std::string& ChampionInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ChampionInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChampionInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChampionInfo::release_id() {
  // @@protoc_insertion_point(field_release:msg.ChampionInfo.Id)
  return _impl_.id_.Release();
}
inline void ChampionInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ChampionInfo.Id)
}

// -------------------------------------------------------------------

// TopRank

// uint32 Zone = 1;
inline void TopRank::clear_zone() {
  _impl_.zone_ = 0u;
}
inline uint32_t TopRank::_internal_zone() const {
  return _impl_.zone_;
}
inline uint32_t TopRank::zone() const {
  // @@protoc_insertion_point(field_get:msg.TopRank.Zone)
  return _internal_zone();
}
inline void TopRank::_internal_set_zone(uint32_t value) {
  
  _impl_.zone_ = value;
}
inline void TopRank::set_zone(uint32_t value) {
  _internal_set_zone(value);
  // @@protoc_insertion_point(field_set:msg.TopRank.Zone)
}

// uint32 Period = 2;
inline void TopRank::clear_period() {
  _impl_.period_ = 0u;
}
inline uint32_t TopRank::_internal_period() const {
  return _impl_.period_;
}
inline uint32_t TopRank::period() const {
  // @@protoc_insertion_point(field_get:msg.TopRank.Period)
  return _internal_period();
}
inline void TopRank::_internal_set_period(uint32_t value) {
  
  _impl_.period_ = value;
}
inline void TopRank::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:msg.TopRank.Period)
}

// repeated string Rank = 3;
inline int TopRank::_internal_rank_size() const {
  return _impl_.rank_.size();
}
inline int TopRank::rank_size() const {
  return _internal_rank_size();
}
inline void TopRank::clear_rank() {
  _impl_.rank_.Clear();
}
inline std::string* TopRank::add_rank() {
  std::string* _s = _internal_add_rank();
  // @@protoc_insertion_point(field_add_mutable:msg.TopRank.Rank)
  return _s;
}
inline const std::string& TopRank::_internal_rank(int index) const {
  return _impl_.rank_.Get(index);
}
inline const std::string& TopRank::rank(int index) const {
  // @@protoc_insertion_point(field_get:msg.TopRank.Rank)
  return _internal_rank(index);
}
inline std::string* TopRank::mutable_rank(int index) {
  // @@protoc_insertion_point(field_mutable:msg.TopRank.Rank)
  return _impl_.rank_.Mutable(index);
}
inline void TopRank::set_rank(int index, const std::string& value) {
  _impl_.rank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.TopRank.Rank)
}
inline void TopRank::set_rank(int index, std::string&& value) {
  _impl_.rank_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.TopRank.Rank)
}
inline void TopRank::set_rank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.TopRank.Rank)
}
inline void TopRank::set_rank(int index, const char* value, size_t size) {
  _impl_.rank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.TopRank.Rank)
}
inline std::string* TopRank::_internal_add_rank() {
  return _impl_.rank_.Add();
}
inline void TopRank::add_rank(const std::string& value) {
  _impl_.rank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.TopRank.Rank)
}
inline void TopRank::add_rank(std::string&& value) {
  _impl_.rank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.TopRank.Rank)
}
inline void TopRank::add_rank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.TopRank.Rank)
}
inline void TopRank::add_rank(const char* value, size_t size) {
  _impl_.rank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.TopRank.Rank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopRank::rank() const {
  // @@protoc_insertion_point(field_list:msg.TopRank.Rank)
  return _impl_.rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopRank::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:msg.TopRank.Rank)
  return &_impl_.rank_;
}

// -------------------------------------------------------------------

// ChampionInfoList

// repeated .msg.ChampionInfo list = 1;
inline int ChampionInfoList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int ChampionInfoList::list_size() const {
  return _internal_list_size();
}
inline void ChampionInfoList::clear_list() {
  _impl_.list_.Clear();
}
inline ::msg::ChampionInfo* ChampionInfoList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ChampionInfoList.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChampionInfo >*
ChampionInfoList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChampionInfoList.list)
  return &_impl_.list_;
}
inline const ::msg::ChampionInfo& ChampionInfoList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::msg::ChampionInfo& ChampionInfoList::list(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChampionInfoList.list)
  return _internal_list(index);
}
inline ::msg::ChampionInfo* ChampionInfoList::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::msg::ChampionInfo* ChampionInfoList::add_list() {
  ::msg::ChampionInfo* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:msg.ChampionInfoList.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChampionInfo >&
ChampionInfoList::list() const {
  // @@protoc_insertion_point(field_list:msg.ChampionInfoList.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TournamentHistory

// map<uint32, .msg.ChampionInfoList> ChampionHistory = 1;
inline int TournamentHistory::_internal_championhistory_size() const {
  return _impl_.championhistory_.size();
}
inline int TournamentHistory::championhistory_size() const {
  return _internal_championhistory_size();
}
inline void TournamentHistory::clear_championhistory() {
  _impl_.championhistory_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >&
TournamentHistory::_internal_championhistory() const {
  return _impl_.championhistory_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >&
TournamentHistory::championhistory() const {
  // @@protoc_insertion_point(field_map:msg.TournamentHistory.ChampionHistory)
  return _internal_championhistory();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >*
TournamentHistory::_internal_mutable_championhistory() {
  return _impl_.championhistory_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >*
TournamentHistory::mutable_championhistory() {
  // @@protoc_insertion_point(field_mutable_map:msg.TournamentHistory.ChampionHistory)
  return _internal_mutable_championhistory();
}

// map<uint32, .msg.TopRank> TopRankHistory = 2;
inline int TournamentHistory::_internal_toprankhistory_size() const {
  return _impl_.toprankhistory_.size();
}
inline int TournamentHistory::toprankhistory_size() const {
  return _internal_toprankhistory_size();
}
inline void TournamentHistory::clear_toprankhistory() {
  _impl_.toprankhistory_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >&
TournamentHistory::_internal_toprankhistory() const {
  return _impl_.toprankhistory_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >&
TournamentHistory::toprankhistory() const {
  // @@protoc_insertion_point(field_map:msg.TournamentHistory.TopRankHistory)
  return _internal_toprankhistory();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >*
TournamentHistory::_internal_mutable_toprankhistory() {
  return _impl_.toprankhistory_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >*
TournamentHistory::mutable_toprankhistory() {
  // @@protoc_insertion_point(field_mutable_map:msg.TournamentHistory.TopRankHistory)
  return _internal_mutable_toprankhistory();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSReqLogin

// string DeviceId = 1;
inline void CSReqLogin::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::deviceid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.DeviceId)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.DeviceId)
}
inline std::string* CSReqLogin::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.DeviceId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void CSReqLogin::_internal_set_deviceid(const std::string& value) {
  
  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_deviceid() {
  
  return _impl_.deviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_deviceid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.DeviceId)
  return _impl_.deviceid_.Release();
}
inline void CSReqLogin::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  _impl_.deviceid_.SetAllocated(deviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceid_.IsDefault()) {
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.DeviceId)
}

// .msg.PLATFORMTYPE PlatformType = 2;
inline void CSReqLogin::clear_platformtype() {
  _impl_.platformtype_ = 0;
}
inline ::msg::PLATFORMTYPE CSReqLogin::_internal_platformtype() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platformtype_);
}
inline ::msg::PLATFORMTYPE CSReqLogin::platformtype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.PlatformType)
  return _internal_platformtype();
}
inline void CSReqLogin::_internal_set_platformtype(::msg::PLATFORMTYPE value) {
  
  _impl_.platformtype_ = value;
}
inline void CSReqLogin::set_platformtype(::msg::PLATFORMTYPE value) {
  _internal_set_platformtype(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PlatformType)
}

// string OsVersion = 3;
inline void CSReqLogin::clear_osversion() {
  _impl_.osversion_.ClearToEmpty();
}
inline const std::string& CSReqLogin::osversion() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.OsVersion)
  return _internal_osversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_osversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.osversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.OsVersion)
}
inline std::string* CSReqLogin::mutable_osversion() {
  std::string* _s = _internal_mutable_osversion();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.OsVersion)
  return _s;
}
inline const std::string& CSReqLogin::_internal_osversion() const {
  return _impl_.osversion_.Get();
}
inline void CSReqLogin::_internal_set_osversion(const std::string& value) {
  
  _impl_.osversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_osversion() {
  
  return _impl_.osversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_osversion() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.OsVersion)
  return _impl_.osversion_.Release();
}
inline void CSReqLogin::set_allocated_osversion(std::string* osversion) {
  if (osversion != nullptr) {
    
  } else {
    
  }
  _impl_.osversion_.SetAllocated(osversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.osversion_.IsDefault()) {
    _impl_.osversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.OsVersion)
}

// string DeviceType = 4;
inline void CSReqLogin::clear_devicetype() {
  _impl_.devicetype_.ClearToEmpty();
}
inline const std::string& CSReqLogin::devicetype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.DeviceType)
  return _internal_devicetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_devicetype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.devicetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.DeviceType)
}
inline std::string* CSReqLogin::mutable_devicetype() {
  std::string* _s = _internal_mutable_devicetype();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.DeviceType)
  return _s;
}
inline const std::string& CSReqLogin::_internal_devicetype() const {
  return _impl_.devicetype_.Get();
}
inline void CSReqLogin::_internal_set_devicetype(const std::string& value) {
  
  _impl_.devicetype_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_devicetype() {
  
  return _impl_.devicetype_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_devicetype() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.DeviceType)
  return _impl_.devicetype_.Release();
}
inline void CSReqLogin::set_allocated_devicetype(std::string* devicetype) {
  if (devicetype != nullptr) {
    
  } else {
    
  }
  _impl_.devicetype_.SetAllocated(devicetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.devicetype_.IsDefault()) {
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.DeviceType)
}

// .msg.NETTYPE NetType = 5;
inline void CSReqLogin::clear_nettype() {
  _impl_.nettype_ = 0;
}
inline ::msg::NETTYPE CSReqLogin::_internal_nettype() const {
  return static_cast< ::msg::NETTYPE >(_impl_.nettype_);
}
inline ::msg::NETTYPE CSReqLogin::nettype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.NetType)
  return _internal_nettype();
}
inline void CSReqLogin::_internal_set_nettype(::msg::NETTYPE value) {
  
  _impl_.nettype_ = value;
}
inline void CSReqLogin::set_nettype(::msg::NETTYPE value) {
  _internal_set_nettype(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.NetType)
}

// .msg.LOGINTYPE LoginType = 6;
inline void CSReqLogin::clear_logintype() {
  _impl_.logintype_ = 0;
}
inline ::msg::LOGINTYPE CSReqLogin::_internal_logintype() const {
  return static_cast< ::msg::LOGINTYPE >(_impl_.logintype_);
}
inline ::msg::LOGINTYPE CSReqLogin::logintype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.LoginType)
  return _internal_logintype();
}
inline void CSReqLogin::_internal_set_logintype(::msg::LOGINTYPE value) {
  
  _impl_.logintype_ = value;
}
inline void CSReqLogin::set_logintype(::msg::LOGINTYPE value) {
  _internal_set_logintype(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.LoginType)
}

// string Id = 7;
inline void CSReqLogin::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSReqLogin::id() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.Id)
}
inline std::string* CSReqLogin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.Id)
  return _s;
}
inline const std::string& CSReqLogin::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSReqLogin::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.Id)
  return _impl_.id_.Release();
}
inline void CSReqLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.Id)
}

// string LySdkDeviceId = 8;
inline void CSReqLogin::clear_lysdkdeviceid() {
  _impl_.lysdkdeviceid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::lysdkdeviceid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.LySdkDeviceId)
  return _internal_lysdkdeviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_lysdkdeviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lysdkdeviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.LySdkDeviceId)
}
inline std::string* CSReqLogin::mutable_lysdkdeviceid() {
  std::string* _s = _internal_mutable_lysdkdeviceid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.LySdkDeviceId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_lysdkdeviceid() const {
  return _impl_.lysdkdeviceid_.Get();
}
inline void CSReqLogin::_internal_set_lysdkdeviceid(const std::string& value) {
  
  _impl_.lysdkdeviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_lysdkdeviceid() {
  
  return _impl_.lysdkdeviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_lysdkdeviceid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.LySdkDeviceId)
  return _impl_.lysdkdeviceid_.Release();
}
inline void CSReqLogin::set_allocated_lysdkdeviceid(std::string* lysdkdeviceid) {
  if (lysdkdeviceid != nullptr) {
    
  } else {
    
  }
  _impl_.lysdkdeviceid_.SetAllocated(lysdkdeviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lysdkdeviceid_.IsDefault()) {
    _impl_.lysdkdeviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.LySdkDeviceId)
}

// string ChannelId = 9;
inline void CSReqLogin::clear_channelid() {
  _impl_.channelid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::channelid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.ChannelId)
  return _internal_channelid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_channelid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.ChannelId)
}
inline std::string* CSReqLogin::mutable_channelid() {
  std::string* _s = _internal_mutable_channelid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.ChannelId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_channelid() const {
  return _impl_.channelid_.Get();
}
inline void CSReqLogin::_internal_set_channelid(const std::string& value) {
  
  _impl_.channelid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_channelid() {
  
  return _impl_.channelid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_channelid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.ChannelId)
  return _impl_.channelid_.Release();
}
inline void CSReqLogin::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  _impl_.channelid_.SetAllocated(channelid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelid_.IsDefault()) {
    _impl_.channelid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.ChannelId)
}

// string PackageId = 10;
inline void CSReqLogin::clear_packageid() {
  _impl_.packageid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::packageid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.PackageId)
  return _internal_packageid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_packageid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packageid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PackageId)
}
inline std::string* CSReqLogin::mutable_packageid() {
  std::string* _s = _internal_mutable_packageid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.PackageId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_packageid() const {
  return _impl_.packageid_.Get();
}
inline void CSReqLogin::_internal_set_packageid(const std::string& value) {
  
  _impl_.packageid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_packageid() {
  
  return _impl_.packageid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_packageid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.PackageId)
  return _impl_.packageid_.Release();
}
inline void CSReqLogin::set_allocated_packageid(std::string* packageid) {
  if (packageid != nullptr) {
    
  } else {
    
  }
  _impl_.packageid_.SetAllocated(packageid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packageid_.IsDefault()) {
    _impl_.packageid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.PackageId)
}

// string ApkVersion = 11;
inline void CSReqLogin::clear_apkversion() {
  _impl_.apkversion_.ClearToEmpty();
}
inline const std::string& CSReqLogin::apkversion() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.ApkVersion)
  return _internal_apkversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_apkversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apkversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.ApkVersion)
}
inline std::string* CSReqLogin::mutable_apkversion() {
  std::string* _s = _internal_mutable_apkversion();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.ApkVersion)
  return _s;
}
inline const std::string& CSReqLogin::_internal_apkversion() const {
  return _impl_.apkversion_.Get();
}
inline void CSReqLogin::_internal_set_apkversion(const std::string& value) {
  
  _impl_.apkversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_apkversion() {
  
  return _impl_.apkversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_apkversion() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.ApkVersion)
  return _impl_.apkversion_.Release();
}
inline void CSReqLogin::set_allocated_apkversion(std::string* apkversion) {
  if (apkversion != nullptr) {
    
  } else {
    
  }
  _impl_.apkversion_.SetAllocated(apkversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apkversion_.IsDefault()) {
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.ApkVersion)
}

// string Resolution = 12;
inline void CSReqLogin::clear_resolution() {
  _impl_.resolution_.ClearToEmpty();
}
inline const std::string& CSReqLogin::resolution() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.Resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resolution_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.Resolution)
}
inline std::string* CSReqLogin::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.Resolution)
  return _s;
}
inline const std::string& CSReqLogin::_internal_resolution() const {
  return _impl_.resolution_.Get();
}
inline void CSReqLogin::_internal_set_resolution(const std::string& value) {
  
  _impl_.resolution_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_resolution() {
  
  return _impl_.resolution_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_resolution() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.Resolution)
  return _impl_.resolution_.Release();
}
inline void CSReqLogin::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  _impl_.resolution_.SetAllocated(resolution, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resolution_.IsDefault()) {
    _impl_.resolution_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.Resolution)
}

// .msg.CHANELTYPE ChannelType = 13;
inline void CSReqLogin::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE CSReqLogin::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE CSReqLogin::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.ChannelType)
  return _internal_channeltype();
}
inline void CSReqLogin::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void CSReqLogin::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.ChannelType)
}

// map<string, string> AuthSDKCode = 14;
inline int CSReqLogin::_internal_authsdkcode_size() const {
  return _impl_.authsdkcode_.size();
}
inline int CSReqLogin::authsdkcode_size() const {
  return _internal_authsdkcode_size();
}
inline void CSReqLogin::clear_authsdkcode() {
  _impl_.authsdkcode_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CSReqLogin::_internal_authsdkcode() const {
  return _impl_.authsdkcode_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CSReqLogin::authsdkcode() const {
  // @@protoc_insertion_point(field_map:msg.CSReqLogin.AuthSDKCode)
  return _internal_authsdkcode();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CSReqLogin::_internal_mutable_authsdkcode() {
  return _impl_.authsdkcode_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CSReqLogin::mutable_authsdkcode() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSReqLogin.AuthSDKCode)
  return _internal_mutable_authsdkcode();
}

// string SessionId = 15;
inline void CSReqLogin::clear_sessionid() {
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::sessionid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.SessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sessionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.SessionId)
}
inline std::string* CSReqLogin::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.SessionId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_sessionid() const {
  return _impl_.sessionid_.Get();
}
inline void CSReqLogin::_internal_set_sessionid(const std::string& value) {
  
  _impl_.sessionid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_sessionid() {
  
  return _impl_.sessionid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_sessionid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.SessionId)
  return _impl_.sessionid_.Release();
}
inline void CSReqLogin::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  _impl_.sessionid_.SetAllocated(sessionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sessionid_.IsDefault()) {
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.SessionId)
}

// string ChannelUserId = 16;
inline void CSReqLogin::clear_channeluserid() {
  _impl_.channeluserid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::channeluserid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.ChannelUserId)
  return _internal_channeluserid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_channeluserid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channeluserid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.ChannelUserId)
}
inline std::string* CSReqLogin::mutable_channeluserid() {
  std::string* _s = _internal_mutable_channeluserid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.ChannelUserId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_channeluserid() const {
  return _impl_.channeluserid_.Get();
}
inline void CSReqLogin::_internal_set_channeluserid(const std::string& value) {
  
  _impl_.channeluserid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_channeluserid() {
  
  return _impl_.channeluserid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_channeluserid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.ChannelUserId)
  return _impl_.channeluserid_.Release();
}
inline void CSReqLogin::set_allocated_channeluserid(std::string* channeluserid) {
  if (channeluserid != nullptr) {
    
  } else {
    
  }
  _impl_.channeluserid_.SetAllocated(channeluserid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channeluserid_.IsDefault()) {
    _impl_.channeluserid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.ChannelUserId)
}

// string PvpResourceVersion = 17;
inline void CSReqLogin::clear_pvpresourceversion() {
  _impl_.pvpresourceversion_.ClearToEmpty();
}
inline const std::string& CSReqLogin::pvpresourceversion() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.PvpResourceVersion)
  return _internal_pvpresourceversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_pvpresourceversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pvpresourceversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PvpResourceVersion)
}
inline std::string* CSReqLogin::mutable_pvpresourceversion() {
  std::string* _s = _internal_mutable_pvpresourceversion();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.PvpResourceVersion)
  return _s;
}
inline const std::string& CSReqLogin::_internal_pvpresourceversion() const {
  return _impl_.pvpresourceversion_.Get();
}
inline void CSReqLogin::_internal_set_pvpresourceversion(const std::string& value) {
  
  _impl_.pvpresourceversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_pvpresourceversion() {
  
  return _impl_.pvpresourceversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_pvpresourceversion() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.PvpResourceVersion)
  return _impl_.pvpresourceversion_.Release();
}
inline void CSReqLogin::set_allocated_pvpresourceversion(std::string* pvpresourceversion) {
  if (pvpresourceversion != nullptr) {
    
  } else {
    
  }
  _impl_.pvpresourceversion_.SetAllocated(pvpresourceversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pvpresourceversion_.IsDefault()) {
    _impl_.pvpresourceversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.PvpResourceVersion)
}

// .msg.CHANELTYPE PayChannel = 18;
inline void CSReqLogin::clear_paychannel() {
  _impl_.paychannel_ = 0;
}
inline ::msg::CHANELTYPE CSReqLogin::_internal_paychannel() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.paychannel_);
}
inline ::msg::CHANELTYPE CSReqLogin::paychannel() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.PayChannel)
  return _internal_paychannel();
}
inline void CSReqLogin::_internal_set_paychannel(::msg::CHANELTYPE value) {
  
  _impl_.paychannel_ = value;
}
inline void CSReqLogin::set_paychannel(::msg::CHANELTYPE value) {
  _internal_set_paychannel(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PayChannel)
}

// string ActiveCode = 19;
inline void CSReqLogin::clear_activecode() {
  _impl_.activecode_.ClearToEmpty();
}
inline const std::string& CSReqLogin::activecode() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.ActiveCode)
  return _internal_activecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_activecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.activecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.ActiveCode)
}
inline std::string* CSReqLogin::mutable_activecode() {
  std::string* _s = _internal_mutable_activecode();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.ActiveCode)
  return _s;
}
inline const std::string& CSReqLogin::_internal_activecode() const {
  return _impl_.activecode_.Get();
}
inline void CSReqLogin::_internal_set_activecode(const std::string& value) {
  
  _impl_.activecode_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_activecode() {
  
  return _impl_.activecode_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_activecode() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.ActiveCode)
  return _impl_.activecode_.Release();
}
inline void CSReqLogin::set_allocated_activecode(std::string* activecode) {
  if (activecode != nullptr) {
    
  } else {
    
  }
  _impl_.activecode_.SetAllocated(activecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.activecode_.IsDefault()) {
    _impl_.activecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.ActiveCode)
}

// string Language = 20;
inline void CSReqLogin::clear_language() {
  _impl_.language_.ClearToEmpty();
}
inline const std::string& CSReqLogin::language() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.Language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_language(ArgT0&& arg0, ArgT... args) {
 
 _impl_.language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.Language)
}
inline std::string* CSReqLogin::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.Language)
  return _s;
}
inline const std::string& CSReqLogin::_internal_language() const {
  return _impl_.language_.Get();
}
inline void CSReqLogin::_internal_set_language(const std::string& value) {
  
  _impl_.language_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_language() {
  
  return _impl_.language_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_language() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.Language)
  return _impl_.language_.Release();
}
inline void CSReqLogin::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  _impl_.language_.SetAllocated(language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.Language)
}

// string Country = 21;
inline void CSReqLogin::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSReqLogin::country() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.Country)
}
inline std::string* CSReqLogin::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.Country)
  return _s;
}
inline const std::string& CSReqLogin::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSReqLogin::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.Country)
  return _impl_.country_.Release();
}
inline void CSReqLogin::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.Country)
}

// .msg.LAUNCHTYPE LaunchType = 22;
inline void CSReqLogin::clear_launchtype() {
  _impl_.launchtype_ = 0;
}
inline ::msg::LAUNCHTYPE CSReqLogin::_internal_launchtype() const {
  return static_cast< ::msg::LAUNCHTYPE >(_impl_.launchtype_);
}
inline ::msg::LAUNCHTYPE CSReqLogin::launchtype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.LaunchType)
  return _internal_launchtype();
}
inline void CSReqLogin::_internal_set_launchtype(::msg::LAUNCHTYPE value) {
  
  _impl_.launchtype_ = value;
}
inline void CSReqLogin::set_launchtype(::msg::LAUNCHTYPE value) {
  _internal_set_launchtype(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.LaunchType)
}

// string Ip = 23;
inline void CSReqLogin::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& CSReqLogin::ip() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.Ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.Ip)
}
inline std::string* CSReqLogin::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.Ip)
  return _s;
}
inline const std::string& CSReqLogin::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void CSReqLogin::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_ip() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.Ip)
  return _impl_.ip_.Release();
}
inline void CSReqLogin::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.Ip)
}

// string PicUrl = 24;
inline void CSReqLogin::clear_picurl() {
  _impl_.picurl_.ClearToEmpty();
}
inline const std::string& CSReqLogin::picurl() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.PicUrl)
  return _internal_picurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_picurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.picurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PicUrl)
}
inline std::string* CSReqLogin::mutable_picurl() {
  std::string* _s = _internal_mutable_picurl();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.PicUrl)
  return _s;
}
inline const std::string& CSReqLogin::_internal_picurl() const {
  return _impl_.picurl_.Get();
}
inline void CSReqLogin::_internal_set_picurl(const std::string& value) {
  
  _impl_.picurl_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_picurl() {
  
  return _impl_.picurl_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_picurl() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.PicUrl)
  return _impl_.picurl_.Release();
}
inline void CSReqLogin::set_allocated_picurl(std::string* picurl) {
  if (picurl != nullptr) {
    
  } else {
    
  }
  _impl_.picurl_.SetAllocated(picurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.picurl_.IsDefault()) {
    _impl_.picurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.PicUrl)
}

// string FengkongDeviceId = 25;
inline void CSReqLogin::clear_fengkongdeviceid() {
  _impl_.fengkongdeviceid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::fengkongdeviceid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.FengkongDeviceId)
  return _internal_fengkongdeviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_fengkongdeviceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fengkongdeviceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.FengkongDeviceId)
}
inline std::string* CSReqLogin::mutable_fengkongdeviceid() {
  std::string* _s = _internal_mutable_fengkongdeviceid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.FengkongDeviceId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_fengkongdeviceid() const {
  return _impl_.fengkongdeviceid_.Get();
}
inline void CSReqLogin::_internal_set_fengkongdeviceid(const std::string& value) {
  
  _impl_.fengkongdeviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_fengkongdeviceid() {
  
  return _impl_.fengkongdeviceid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_fengkongdeviceid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.FengkongDeviceId)
  return _impl_.fengkongdeviceid_.Release();
}
inline void CSReqLogin::set_allocated_fengkongdeviceid(std::string* fengkongdeviceid) {
  if (fengkongdeviceid != nullptr) {
    
  } else {
    
  }
  _impl_.fengkongdeviceid_.SetAllocated(fengkongdeviceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fengkongdeviceid_.IsDefault()) {
    _impl_.fengkongdeviceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.FengkongDeviceId)
}

// string GameLanguage = 26;
inline void CSReqLogin::clear_gamelanguage() {
  _impl_.gamelanguage_.ClearToEmpty();
}
inline const std::string& CSReqLogin::gamelanguage() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.GameLanguage)
  return _internal_gamelanguage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_gamelanguage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamelanguage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.GameLanguage)
}
inline std::string* CSReqLogin::mutable_gamelanguage() {
  std::string* _s = _internal_mutable_gamelanguage();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.GameLanguage)
  return _s;
}
inline const std::string& CSReqLogin::_internal_gamelanguage() const {
  return _impl_.gamelanguage_.Get();
}
inline void CSReqLogin::_internal_set_gamelanguage(const std::string& value) {
  
  _impl_.gamelanguage_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_gamelanguage() {
  
  return _impl_.gamelanguage_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_gamelanguage() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.GameLanguage)
  return _impl_.gamelanguage_.Release();
}
inline void CSReqLogin::set_allocated_gamelanguage(std::string* gamelanguage) {
  if (gamelanguage != nullptr) {
    
  } else {
    
  }
  _impl_.gamelanguage_.SetAllocated(gamelanguage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamelanguage_.IsDefault()) {
    _impl_.gamelanguage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.GameLanguage)
}

// int64 GamelibVersion = 27;
inline void CSReqLogin::clear_gamelibversion() {
  _impl_.gamelibversion_ = int64_t{0};
}
inline int64_t CSReqLogin::_internal_gamelibversion() const {
  return _impl_.gamelibversion_;
}
inline int64_t CSReqLogin::gamelibversion() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.GamelibVersion)
  return _internal_gamelibversion();
}
inline void CSReqLogin::_internal_set_gamelibversion(int64_t value) {
  
  _impl_.gamelibversion_ = value;
}
inline void CSReqLogin::set_gamelibversion(int64_t value) {
  _internal_set_gamelibversion(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.GamelibVersion)
}

// string AdvertisingId = 28;
inline void CSReqLogin::clear_advertisingid() {
  _impl_.advertisingid_.ClearToEmpty();
}
inline const std::string& CSReqLogin::advertisingid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.AdvertisingId)
  return _internal_advertisingid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_advertisingid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.advertisingid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.AdvertisingId)
}
inline std::string* CSReqLogin::mutable_advertisingid() {
  std::string* _s = _internal_mutable_advertisingid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.AdvertisingId)
  return _s;
}
inline const std::string& CSReqLogin::_internal_advertisingid() const {
  return _impl_.advertisingid_.Get();
}
inline void CSReqLogin::_internal_set_advertisingid(const std::string& value) {
  
  _impl_.advertisingid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_advertisingid() {
  
  return _impl_.advertisingid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_advertisingid() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.AdvertisingId)
  return _impl_.advertisingid_.Release();
}
inline void CSReqLogin::set_allocated_advertisingid(std::string* advertisingid) {
  if (advertisingid != nullptr) {
    
  } else {
    
  }
  _impl_.advertisingid_.SetAllocated(advertisingid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.advertisingid_.IsDefault()) {
    _impl_.advertisingid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.AdvertisingId)
}

// repeated string PSBlockedUsers = 29;
inline int CSReqLogin::_internal_psblockedusers_size() const {
  return _impl_.psblockedusers_.size();
}
inline int CSReqLogin::psblockedusers_size() const {
  return _internal_psblockedusers_size();
}
inline void CSReqLogin::clear_psblockedusers() {
  _impl_.psblockedusers_.Clear();
}
inline std::string* CSReqLogin::add_psblockedusers() {
  std::string* _s = _internal_add_psblockedusers();
  // @@protoc_insertion_point(field_add_mutable:msg.CSReqLogin.PSBlockedUsers)
  return _s;
}
inline const std::string& CSReqLogin::_internal_psblockedusers(int index) const {
  return _impl_.psblockedusers_.Get(index);
}
inline const std::string& CSReqLogin::psblockedusers(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.PSBlockedUsers)
  return _internal_psblockedusers(index);
}
inline std::string* CSReqLogin::mutable_psblockedusers(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.PSBlockedUsers)
  return _impl_.psblockedusers_.Mutable(index);
}
inline void CSReqLogin::set_psblockedusers(int index, const std::string& value) {
  _impl_.psblockedusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PSBlockedUsers)
}
inline void CSReqLogin::set_psblockedusers(int index, std::string&& value) {
  _impl_.psblockedusers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.PSBlockedUsers)
}
inline void CSReqLogin::set_psblockedusers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.psblockedusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSReqLogin.PSBlockedUsers)
}
inline void CSReqLogin::set_psblockedusers(int index, const char* value, size_t size) {
  _impl_.psblockedusers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSReqLogin.PSBlockedUsers)
}
inline std::string* CSReqLogin::_internal_add_psblockedusers() {
  return _impl_.psblockedusers_.Add();
}
inline void CSReqLogin::add_psblockedusers(const std::string& value) {
  _impl_.psblockedusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSReqLogin.PSBlockedUsers)
}
inline void CSReqLogin::add_psblockedusers(std::string&& value) {
  _impl_.psblockedusers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSReqLogin.PSBlockedUsers)
}
inline void CSReqLogin::add_psblockedusers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.psblockedusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSReqLogin.PSBlockedUsers)
}
inline void CSReqLogin::add_psblockedusers(const char* value, size_t size) {
  _impl_.psblockedusers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSReqLogin.PSBlockedUsers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSReqLogin::psblockedusers() const {
  // @@protoc_insertion_point(field_list:msg.CSReqLogin.PSBlockedUsers)
  return _impl_.psblockedusers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSReqLogin::mutable_psblockedusers() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSReqLogin.PSBlockedUsers)
  return &_impl_.psblockedusers_;
}

// bytes Result = 30;
inline void CSReqLogin::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& CSReqLogin::result() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.Result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqLogin::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.Result)
}
inline std::string* CSReqLogin::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:msg.CSReqLogin.Result)
  return _s;
}
inline const std::string& CSReqLogin::_internal_result() const {
  return _impl_.result_.Get();
}
inline void CSReqLogin::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqLogin::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqLogin::release_result() {
  // @@protoc_insertion_point(field_release:msg.CSReqLogin.Result)
  return _impl_.result_.Release();
}
inline void CSReqLogin::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqLogin.Result)
}

// .msg.LOGINSOURCE LoginSource = 31;
inline void CSReqLogin::clear_loginsource() {
  _impl_.loginsource_ = 0;
}
inline ::msg::LOGINSOURCE CSReqLogin::_internal_loginsource() const {
  return static_cast< ::msg::LOGINSOURCE >(_impl_.loginsource_);
}
inline ::msg::LOGINSOURCE CSReqLogin::loginsource() const {
  // @@protoc_insertion_point(field_get:msg.CSReqLogin.LoginSource)
  return _internal_loginsource();
}
inline void CSReqLogin::_internal_set_loginsource(::msg::LOGINSOURCE value) {
  
  _impl_.loginsource_ = value;
}
inline void CSReqLogin::set_loginsource(::msg::LOGINSOURCE value) {
  _internal_set_loginsource(value);
  // @@protoc_insertion_point(field_set:msg.CSReqLogin.LoginSource)
}

// -------------------------------------------------------------------

// Loc

// uint32 X = 1;
inline void Loc::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t Loc::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t Loc::x() const {
  // @@protoc_insertion_point(field_get:msg.Loc.X)
  return _internal_x();
}
inline void Loc::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void Loc::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.Loc.X)
}

// uint32 Y = 2;
inline void Loc::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t Loc::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t Loc::y() const {
  // @@protoc_insertion_point(field_get:msg.Loc.Y)
  return _internal_y();
}
inline void Loc::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void Loc::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.Loc.Y)
}

// -------------------------------------------------------------------

// Authority

// bool Mark = 1;
inline void Authority::clear_mark() {
  _impl_.mark_ = false;
}
inline bool Authority::_internal_mark() const {
  return _impl_.mark_;
}
inline bool Authority::mark() const {
  // @@protoc_insertion_point(field_get:msg.Authority.Mark)
  return _internal_mark();
}
inline void Authority::_internal_set_mark(bool value) {
  
  _impl_.mark_ = value;
}
inline void Authority::set_mark(bool value) {
  _internal_set_mark(value);
  // @@protoc_insertion_point(field_set:msg.Authority.Mark)
}

// uint32 Level = 2;
inline void Authority::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t Authority::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t Authority::level() const {
  // @@protoc_insertion_point(field_get:msg.Authority.Level)
  return _internal_level();
}
inline void Authority::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void Authority::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.Authority.Level)
}

// -------------------------------------------------------------------

// GetNumRank

// .msg.RANKTYPE Type = 1;
inline void GetNumRank::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::RANKTYPE GetNumRank::_internal_type() const {
  return static_cast< ::msg::RANKTYPE >(_impl_.type_);
}
inline ::msg::RANKTYPE GetNumRank::type() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.Type)
  return _internal_type();
}
inline void GetNumRank::_internal_set_type(::msg::RANKTYPE value) {
  
  _impl_.type_ = value;
}
inline void GetNumRank::set_type(::msg::RANKTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.Type)
}

// string Country = 2;
inline void GetNumRank::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& GetNumRank::country() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNumRank::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GetNumRank.Country)
}
inline std::string* GetNumRank::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.GetNumRank.Country)
  return _s;
}
inline const std::string& GetNumRank::_internal_country() const {
  return _impl_.country_.Get();
}
inline void GetNumRank::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNumRank::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNumRank::release_country() {
  // @@protoc_insertion_point(field_release:msg.GetNumRank.Country)
  return _impl_.country_.Release();
}
inline void GetNumRank::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GetNumRank.Country)
}

// uint64 TournamentId = 3;
inline void GetNumRank::clear_tournamentid() {
  _impl_.tournamentid_ = uint64_t{0u};
}
inline uint64_t GetNumRank::_internal_tournamentid() const {
  return _impl_.tournamentid_;
}
inline uint64_t GetNumRank::tournamentid() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.TournamentId)
  return _internal_tournamentid();
}
inline void GetNumRank::_internal_set_tournamentid(uint64_t value) {
  
  _impl_.tournamentid_ = value;
}
inline void GetNumRank::set_tournamentid(uint64_t value) {
  _internal_set_tournamentid(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.TournamentId)
}

// uint64 ClassId = 4;
inline void GetNumRank::clear_classid() {
  _impl_.classid_ = uint64_t{0u};
}
inline uint64_t GetNumRank::_internal_classid() const {
  return _impl_.classid_;
}
inline uint64_t GetNumRank::classid() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.ClassId)
  return _internal_classid();
}
inline void GetNumRank::_internal_set_classid(uint64_t value) {
  
  _impl_.classid_ = value;
}
inline void GetNumRank::set_classid(uint64_t value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.ClassId)
}

// uint64 RoundId = 5;
inline void GetNumRank::clear_roundid() {
  _impl_.roundid_ = uint64_t{0u};
}
inline uint64_t GetNumRank::_internal_roundid() const {
  return _impl_.roundid_;
}
inline uint64_t GetNumRank::roundid() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.RoundId)
  return _internal_roundid();
}
inline void GetNumRank::_internal_set_roundid(uint64_t value) {
  
  _impl_.roundid_ = value;
}
inline void GetNumRank::set_roundid(uint64_t value) {
  _internal_set_roundid(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.RoundId)
}

// bool SelfRank = 6;
inline void GetNumRank::clear_selfrank() {
  _impl_.selfrank_ = false;
}
inline bool GetNumRank::_internal_selfrank() const {
  return _impl_.selfrank_;
}
inline bool GetNumRank::selfrank() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.SelfRank)
  return _internal_selfrank();
}
inline void GetNumRank::_internal_set_selfrank(bool value) {
  
  _impl_.selfrank_ = value;
}
inline void GetNumRank::set_selfrank(bool value) {
  _internal_set_selfrank(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.SelfRank)
}

// uint32 GroupIndex = 7;
inline void GetNumRank::clear_groupindex() {
  _impl_.groupindex_ = 0u;
}
inline uint32_t GetNumRank::_internal_groupindex() const {
  return _impl_.groupindex_;
}
inline uint32_t GetNumRank::groupindex() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.GroupIndex)
  return _internal_groupindex();
}
inline void GetNumRank::_internal_set_groupindex(uint32_t value) {
  
  _impl_.groupindex_ = value;
}
inline void GetNumRank::set_groupindex(uint32_t value) {
  _internal_set_groupindex(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.GroupIndex)
}

// .msg.CHANELTYPE ChannelType = 8;
inline void GetNumRank::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE GetNumRank::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE GetNumRank::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.ChannelType)
  return _internal_channeltype();
}
inline void GetNumRank::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void GetNumRank::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.GetNumRank.ChannelType)
}

// string TargetPlayer = 9;
inline void GetNumRank::clear_targetplayer() {
  _impl_.targetplayer_.ClearToEmpty();
}
inline const std::string& GetNumRank::targetplayer() const {
  // @@protoc_insertion_point(field_get:msg.GetNumRank.TargetPlayer)
  return _internal_targetplayer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNumRank::set_targetplayer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetplayer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GetNumRank.TargetPlayer)
}
inline std::string* GetNumRank::mutable_targetplayer() {
  std::string* _s = _internal_mutable_targetplayer();
  // @@protoc_insertion_point(field_mutable:msg.GetNumRank.TargetPlayer)
  return _s;
}
inline const std::string& GetNumRank::_internal_targetplayer() const {
  return _impl_.targetplayer_.Get();
}
inline void GetNumRank::_internal_set_targetplayer(const std::string& value) {
  
  _impl_.targetplayer_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNumRank::_internal_mutable_targetplayer() {
  
  return _impl_.targetplayer_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNumRank::release_targetplayer() {
  // @@protoc_insertion_point(field_release:msg.GetNumRank.TargetPlayer)
  return _impl_.targetplayer_.Release();
}
inline void GetNumRank::set_allocated_targetplayer(std::string* targetplayer) {
  if (targetplayer != nullptr) {
    
  } else {
    
  }
  _impl_.targetplayer_.SetAllocated(targetplayer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetplayer_.IsDefault()) {
    _impl_.targetplayer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GetNumRank.TargetPlayer)
}

// -------------------------------------------------------------------

// CSDTPassportCard

// repeated uint32 TypeIdList = 1;
inline int CSDTPassportCard::_internal_typeidlist_size() const {
  return _impl_.typeidlist_.size();
}
inline int CSDTPassportCard::typeidlist_size() const {
  return _internal_typeidlist_size();
}
inline void CSDTPassportCard::clear_typeidlist() {
  _impl_.typeidlist_.Clear();
}
inline uint32_t CSDTPassportCard::_internal_typeidlist(int index) const {
  return _impl_.typeidlist_.Get(index);
}
inline uint32_t CSDTPassportCard::typeidlist(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSDTPassportCard.TypeIdList)
  return _internal_typeidlist(index);
}
inline void CSDTPassportCard::set_typeidlist(int index, uint32_t value) {
  _impl_.typeidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSDTPassportCard.TypeIdList)
}
inline void CSDTPassportCard::_internal_add_typeidlist(uint32_t value) {
  _impl_.typeidlist_.Add(value);
}
inline void CSDTPassportCard::add_typeidlist(uint32_t value) {
  _internal_add_typeidlist(value);
  // @@protoc_insertion_point(field_add:msg.CSDTPassportCard.TypeIdList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPassportCard::_internal_typeidlist() const {
  return _impl_.typeidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSDTPassportCard::typeidlist() const {
  // @@protoc_insertion_point(field_list:msg.CSDTPassportCard.TypeIdList)
  return _internal_typeidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPassportCard::_internal_mutable_typeidlist() {
  return &_impl_.typeidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSDTPassportCard::mutable_typeidlist() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSDTPassportCard.TypeIdList)
  return _internal_mutable_typeidlist();
}

// uint32 Level = 2;
inline void CSDTPassportCard::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t CSDTPassportCard::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CSDTPassportCard::level() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPassportCard.Level)
  return _internal_level();
}
inline void CSDTPassportCard::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void CSDTPassportCard::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.CSDTPassportCard.Level)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PveDataInfo

// map<uint32, .msg.Pve> Data = 1;
inline int PveDataInfo::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int PveDataInfo::data_size() const {
  return _internal_data_size();
}
inline void PveDataInfo::clear_data() {
  _impl_.data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >&
PveDataInfo::_internal_data() const {
  return _impl_.data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >&
PveDataInfo::data() const {
  // @@protoc_insertion_point(field_map:msg.PveDataInfo.Data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >*
PveDataInfo::_internal_mutable_data() {
  return _impl_.data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >*
PveDataInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:msg.PveDataInfo.Data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Pve

// uint32 Score = 1;
inline void Pve::clear_score() {
  _impl_.score_ = 0u;
}
inline uint32_t Pve::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t Pve::score() const {
  // @@protoc_insertion_point(field_get:msg.Pve.Score)
  return _internal_score();
}
inline void Pve::_internal_set_score(uint32_t value) {
  
  _impl_.score_ = value;
}
inline void Pve::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:msg.Pve.Score)
}

// map<uint32, bool> ChessIds = 2;
inline int Pve::_internal_chessids_size() const {
  return _impl_.chessids_.size();
}
inline int Pve::chessids_size() const {
  return _internal_chessids_size();
}
inline void Pve::clear_chessids() {
  _impl_.chessids_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
Pve::_internal_chessids() const {
  return _impl_.chessids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
Pve::chessids() const {
  // @@protoc_insertion_point(field_map:msg.Pve.ChessIds)
  return _internal_chessids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
Pve::_internal_mutable_chessids() {
  return _impl_.chessids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
Pve::mutable_chessids() {
  // @@protoc_insertion_point(field_mutable_map:msg.Pve.ChessIds)
  return _internal_mutable_chessids();
}

// map<uint32, bool> Skills = 3;
inline int Pve::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int Pve::skills_size() const {
  return _internal_skills_size();
}
inline void Pve::clear_skills() {
  _impl_.skills_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
Pve::_internal_skills() const {
  return _impl_.skills_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >&
Pve::skills() const {
  // @@protoc_insertion_point(field_map:msg.Pve.Skills)
  return _internal_skills();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
Pve::_internal_mutable_skills() {
  return _impl_.skills_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >*
Pve::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_map:msg.Pve.Skills)
  return _internal_mutable_skills();
}

// map<uint32, .msg.PveBuff> Buff = 4;
inline int Pve::_internal_buff_size() const {
  return _impl_.buff_.size();
}
inline int Pve::buff_size() const {
  return _internal_buff_size();
}
inline void Pve::clear_buff() {
  _impl_.buff_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >&
Pve::_internal_buff() const {
  return _impl_.buff_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >&
Pve::buff() const {
  // @@protoc_insertion_point(field_map:msg.Pve.Buff)
  return _internal_buff();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >*
Pve::_internal_mutable_buff() {
  return _impl_.buff_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >*
Pve::mutable_buff() {
  // @@protoc_insertion_point(field_mutable_map:msg.Pve.Buff)
  return _internal_mutable_buff();
}

// uint32 RankScore = 5;
inline void Pve::clear_rankscore() {
  _impl_.rankscore_ = 0u;
}
inline uint32_t Pve::_internal_rankscore() const {
  return _impl_.rankscore_;
}
inline uint32_t Pve::rankscore() const {
  // @@protoc_insertion_point(field_get:msg.Pve.RankScore)
  return _internal_rankscore();
}
inline void Pve::_internal_set_rankscore(uint32_t value) {
  
  _impl_.rankscore_ = value;
}
inline void Pve::set_rankscore(uint32_t value) {
  _internal_set_rankscore(value);
  // @@protoc_insertion_point(field_set:msg.Pve.RankScore)
}

// string TeamName = 6;
inline void Pve::clear_teamname() {
  _impl_.teamname_.ClearToEmpty();
}
inline const std::string& Pve::teamname() const {
  // @@protoc_insertion_point(field_get:msg.Pve.TeamName)
  return _internal_teamname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pve::set_teamname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teamname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Pve.TeamName)
}
inline std::string* Pve::mutable_teamname() {
  std::string* _s = _internal_mutable_teamname();
  // @@protoc_insertion_point(field_mutable:msg.Pve.TeamName)
  return _s;
}
inline const std::string& Pve::_internal_teamname() const {
  return _impl_.teamname_.Get();
}
inline void Pve::_internal_set_teamname(const std::string& value) {
  
  _impl_.teamname_.Set(value, GetArenaForAllocation());
}
inline std::string* Pve::_internal_mutable_teamname() {
  
  return _impl_.teamname_.Mutable(GetArenaForAllocation());
}
inline std::string* Pve::release_teamname() {
  // @@protoc_insertion_point(field_release:msg.Pve.TeamName)
  return _impl_.teamname_.Release();
}
inline void Pve::set_allocated_teamname(std::string* teamname) {
  if (teamname != nullptr) {
    
  } else {
    
  }
  _impl_.teamname_.SetAllocated(teamname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teamname_.IsDefault()) {
    _impl_.teamname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Pve.TeamName)
}

// bool Unlock = 7;
inline void Pve::clear_unlock() {
  _impl_.unlock_ = false;
}
inline bool Pve::_internal_unlock() const {
  return _impl_.unlock_;
}
inline bool Pve::unlock() const {
  // @@protoc_insertion_point(field_get:msg.Pve.Unlock)
  return _internal_unlock();
}
inline void Pve::_internal_set_unlock(bool value) {
  
  _impl_.unlock_ = value;
}
inline void Pve::set_unlock(bool value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:msg.Pve.Unlock)
}

// -------------------------------------------------------------------

// PveBuff

// uint32 Count = 1;
inline void PveBuff::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t PveBuff::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t PveBuff::count() const {
  // @@protoc_insertion_point(field_get:msg.PveBuff.Count)
  return _internal_count();
}
inline void PveBuff::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void PveBuff::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.PveBuff.Count)
}

// int64 Etime = 2;
inline void PveBuff::clear_etime() {
  _impl_.etime_ = int64_t{0};
}
inline int64_t PveBuff::_internal_etime() const {
  return _impl_.etime_;
}
inline int64_t PveBuff::etime() const {
  // @@protoc_insertion_point(field_get:msg.PveBuff.Etime)
  return _internal_etime();
}
inline void PveBuff::_internal_set_etime(int64_t value) {
  
  _impl_.etime_ = value;
}
inline void PveBuff::set_etime(int64_t value) {
  _internal_set_etime(value);
  // @@protoc_insertion_point(field_set:msg.PveBuff.Etime)
}

// -------------------------------------------------------------------

// CardGroupData

// repeated .msg.CardGroupChess ChessIds = 1;
inline int CardGroupData::_internal_chessids_size() const {
  return _impl_.chessids_.size();
}
inline int CardGroupData::chessids_size() const {
  return _internal_chessids_size();
}
inline void CardGroupData::clear_chessids() {
  _impl_.chessids_.Clear();
}
inline ::msg::CardGroupChess* CardGroupData::mutable_chessids(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CardGroupData.ChessIds)
  return _impl_.chessids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CardGroupChess >*
CardGroupData::mutable_chessids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CardGroupData.ChessIds)
  return &_impl_.chessids_;
}
inline const ::msg::CardGroupChess& CardGroupData::_internal_chessids(int index) const {
  return _impl_.chessids_.Get(index);
}
inline const ::msg::CardGroupChess& CardGroupData::chessids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CardGroupData.ChessIds)
  return _internal_chessids(index);
}
inline ::msg::CardGroupChess* CardGroupData::_internal_add_chessids() {
  return _impl_.chessids_.Add();
}
inline ::msg::CardGroupChess* CardGroupData::add_chessids() {
  ::msg::CardGroupChess* _add = _internal_add_chessids();
  // @@protoc_insertion_point(field_add:msg.CardGroupData.ChessIds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CardGroupChess >&
CardGroupData::chessids() const {
  // @@protoc_insertion_point(field_list:msg.CardGroupData.ChessIds)
  return _impl_.chessids_;
}

// uint32 AutoAddCardTimes = 2;
inline void CardGroupData::clear_autoaddcardtimes() {
  _impl_.autoaddcardtimes_ = 0u;
}
inline uint32_t CardGroupData::_internal_autoaddcardtimes() const {
  return _impl_.autoaddcardtimes_;
}
inline uint32_t CardGroupData::autoaddcardtimes() const {
  // @@protoc_insertion_point(field_get:msg.CardGroupData.AutoAddCardTimes)
  return _internal_autoaddcardtimes();
}
inline void CardGroupData::_internal_set_autoaddcardtimes(uint32_t value) {
  
  _impl_.autoaddcardtimes_ = value;
}
inline void CardGroupData::set_autoaddcardtimes(uint32_t value) {
  _internal_set_autoaddcardtimes(value);
  // @@protoc_insertion_point(field_set:msg.CardGroupData.AutoAddCardTimes)
}

// bool IsAutoAddCardKernel = 3;
inline void CardGroupData::clear_isautoaddcardkernel() {
  _impl_.isautoaddcardkernel_ = false;
}
inline bool CardGroupData::_internal_isautoaddcardkernel() const {
  return _impl_.isautoaddcardkernel_;
}
inline bool CardGroupData::isautoaddcardkernel() const {
  // @@protoc_insertion_point(field_get:msg.CardGroupData.IsAutoAddCardKernel)
  return _internal_isautoaddcardkernel();
}
inline void CardGroupData::_internal_set_isautoaddcardkernel(bool value) {
  
  _impl_.isautoaddcardkernel_ = value;
}
inline void CardGroupData::set_isautoaddcardkernel(bool value) {
  _internal_set_isautoaddcardkernel(value);
  // @@protoc_insertion_point(field_set:msg.CardGroupData.IsAutoAddCardKernel)
}

// bool Flag = 4;
inline void CardGroupData::clear_flag() {
  _impl_.flag_ = false;
}
inline bool CardGroupData::_internal_flag() const {
  return _impl_.flag_;
}
inline bool CardGroupData::flag() const {
  // @@protoc_insertion_point(field_get:msg.CardGroupData.Flag)
  return _internal_flag();
}
inline void CardGroupData::_internal_set_flag(bool value) {
  
  _impl_.flag_ = value;
}
inline void CardGroupData::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:msg.CardGroupData.Flag)
}

// repeated uint32 RemoveChessIds = 5;
inline int CardGroupData::_internal_removechessids_size() const {
  return _impl_.removechessids_.size();
}
inline int CardGroupData::removechessids_size() const {
  return _internal_removechessids_size();
}
inline void CardGroupData::clear_removechessids() {
  _impl_.removechessids_.Clear();
}
inline uint32_t CardGroupData::_internal_removechessids(int index) const {
  return _impl_.removechessids_.Get(index);
}
inline uint32_t CardGroupData::removechessids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CardGroupData.RemoveChessIds)
  return _internal_removechessids(index);
}
inline void CardGroupData::set_removechessids(int index, uint32_t value) {
  _impl_.removechessids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CardGroupData.RemoveChessIds)
}
inline void CardGroupData::_internal_add_removechessids(uint32_t value) {
  _impl_.removechessids_.Add(value);
}
inline void CardGroupData::add_removechessids(uint32_t value) {
  _internal_add_removechessids(value);
  // @@protoc_insertion_point(field_add:msg.CardGroupData.RemoveChessIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CardGroupData::_internal_removechessids() const {
  return _impl_.removechessids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CardGroupData::removechessids() const {
  // @@protoc_insertion_point(field_list:msg.CardGroupData.RemoveChessIds)
  return _internal_removechessids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CardGroupData::_internal_mutable_removechessids() {
  return &_impl_.removechessids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CardGroupData::mutable_removechessids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CardGroupData.RemoveChessIds)
  return _internal_mutable_removechessids();
}

// bool KernelFlag = 6;
inline void CardGroupData::clear_kernelflag() {
  _impl_.kernelflag_ = false;
}
inline bool CardGroupData::_internal_kernelflag() const {
  return _impl_.kernelflag_;
}
inline bool CardGroupData::kernelflag() const {
  // @@protoc_insertion_point(field_get:msg.CardGroupData.KernelFlag)
  return _internal_kernelflag();
}
inline void CardGroupData::_internal_set_kernelflag(bool value) {
  
  _impl_.kernelflag_ = value;
}
inline void CardGroupData::set_kernelflag(bool value) {
  _internal_set_kernelflag(value);
  // @@protoc_insertion_point(field_set:msg.CardGroupData.KernelFlag)
}

// -------------------------------------------------------------------

// CardGroupChess

// uint32 Id = 1;
inline void CardGroupChess::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t CardGroupChess::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CardGroupChess::id() const {
  // @@protoc_insertion_point(field_get:msg.CardGroupChess.Id)
  return _internal_id();
}
inline void CardGroupChess::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void CardGroupChess::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.CardGroupChess.Id)
}

// int64 Ctime = 2;
inline void CardGroupChess::clear_ctime() {
  _impl_.ctime_ = int64_t{0};
}
inline int64_t CardGroupChess::_internal_ctime() const {
  return _impl_.ctime_;
}
inline int64_t CardGroupChess::ctime() const {
  // @@protoc_insertion_point(field_get:msg.CardGroupChess.Ctime)
  return _internal_ctime();
}
inline void CardGroupChess::_internal_set_ctime(int64_t value) {
  
  _impl_.ctime_ = value;
}
inline void CardGroupChess::set_ctime(int64_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:msg.CardGroupChess.Ctime)
}

// -------------------------------------------------------------------

// ChessIds

// repeated uint32 Ids = 1;
inline int ChessIds::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int ChessIds::ids_size() const {
  return _internal_ids_size();
}
inline void ChessIds::clear_ids() {
  _impl_.ids_.Clear();
}
inline uint32_t ChessIds::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline uint32_t ChessIds::ids(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChessIds.Ids)
  return _internal_ids(index);
}
inline void ChessIds::set_ids(int index, uint32_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ChessIds.Ids)
}
inline void ChessIds::_internal_add_ids(uint32_t value) {
  _impl_.ids_.Add(value);
}
inline void ChessIds::add_ids(uint32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:msg.ChessIds.Ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChessIds::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChessIds::ids() const {
  // @@protoc_insertion_point(field_list:msg.ChessIds.Ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChessIds::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChessIds::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChessIds.Ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// PveConsume

// .msg.PVECONSUMETYPE Type = 1;
inline void PveConsume::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::PVECONSUMETYPE PveConsume::_internal_type() const {
  return static_cast< ::msg::PVECONSUMETYPE >(_impl_.type_);
}
inline ::msg::PVECONSUMETYPE PveConsume::type() const {
  // @@protoc_insertion_point(field_get:msg.PveConsume.Type)
  return _internal_type();
}
inline void PveConsume::_internal_set_type(::msg::PVECONSUMETYPE value) {
  
  _impl_.type_ = value;
}
inline void PveConsume::set_type(::msg::PVECONSUMETYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.PveConsume.Type)
}

// uint32 Id = 2;
inline void PveConsume::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t PveConsume::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t PveConsume::id() const {
  // @@protoc_insertion_point(field_get:msg.PveConsume.Id)
  return _internal_id();
}
inline void PveConsume::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void PveConsume::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.PveConsume.Id)
}

// uint32 Count = 3;
inline void PveConsume::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t PveConsume::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t PveConsume::count() const {
  // @@protoc_insertion_point(field_get:msg.PveConsume.Count)
  return _internal_count();
}
inline void PveConsume::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void PveConsume::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.PveConsume.Count)
}

// -------------------------------------------------------------------

// PveSetting

// repeated uint32 DeBuffIds = 1;
inline int PveSetting::_internal_debuffids_size() const {
  return _impl_.debuffids_.size();
}
inline int PveSetting::debuffids_size() const {
  return _internal_debuffids_size();
}
inline void PveSetting::clear_debuffids() {
  _impl_.debuffids_.Clear();
}
inline uint32_t PveSetting::_internal_debuffids(int index) const {
  return _impl_.debuffids_.Get(index);
}
inline uint32_t PveSetting::debuffids(int index) const {
  // @@protoc_insertion_point(field_get:msg.PveSetting.DeBuffIds)
  return _internal_debuffids(index);
}
inline void PveSetting::set_debuffids(int index, uint32_t value) {
  _impl_.debuffids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PveSetting.DeBuffIds)
}
inline void PveSetting::_internal_add_debuffids(uint32_t value) {
  _impl_.debuffids_.Add(value);
}
inline void PveSetting::add_debuffids(uint32_t value) {
  _internal_add_debuffids(value);
  // @@protoc_insertion_point(field_add:msg.PveSetting.DeBuffIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PveSetting::_internal_debuffids() const {
  return _impl_.debuffids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PveSetting::debuffids() const {
  // @@protoc_insertion_point(field_list:msg.PveSetting.DeBuffIds)
  return _internal_debuffids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PveSetting::_internal_mutable_debuffids() {
  return &_impl_.debuffids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PveSetting::mutable_debuffids() {
  // @@protoc_insertion_point(field_mutable_list:msg.PveSetting.DeBuffIds)
  return _internal_mutable_debuffids();
}

// -------------------------------------------------------------------

// PlayerTeamInfo

// string MapKey = 1;
inline void PlayerTeamInfo::clear_mapkey() {
  _impl_.mapkey_.ClearToEmpty();
}
inline const std::string& PlayerTeamInfo::mapkey() const {
  // @@protoc_insertion_point(field_get:msg.PlayerTeamInfo.MapKey)
  return _internal_mapkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerTeamInfo::set_mapkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerTeamInfo.MapKey)
}
inline std::string* PlayerTeamInfo::mutable_mapkey() {
  std::string* _s = _internal_mutable_mapkey();
  // @@protoc_insertion_point(field_mutable:msg.PlayerTeamInfo.MapKey)
  return _s;
}
inline const std::string& PlayerTeamInfo::_internal_mapkey() const {
  return _impl_.mapkey_.Get();
}
inline void PlayerTeamInfo::_internal_set_mapkey(const std::string& value) {
  
  _impl_.mapkey_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerTeamInfo::_internal_mutable_mapkey() {
  
  return _impl_.mapkey_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerTeamInfo::release_mapkey() {
  // @@protoc_insertion_point(field_release:msg.PlayerTeamInfo.MapKey)
  return _impl_.mapkey_.Release();
}
inline void PlayerTeamInfo::set_allocated_mapkey(std::string* mapkey) {
  if (mapkey != nullptr) {
    
  } else {
    
  }
  _impl_.mapkey_.SetAllocated(mapkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapkey_.IsDefault()) {
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerTeamInfo.MapKey)
}

// -------------------------------------------------------------------

// PveRankRedisInfo

// string Caption = 1;
inline void PveRankRedisInfo::clear_caption() {
  _impl_.caption_.ClearToEmpty();
}
inline const std::string& PveRankRedisInfo::caption() const {
  // @@protoc_insertion_point(field_get:msg.PveRankRedisInfo.Caption)
  return _internal_caption();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PveRankRedisInfo::set_caption(ArgT0&& arg0, ArgT... args) {
 
 _impl_.caption_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PveRankRedisInfo.Caption)
}
inline std::string* PveRankRedisInfo::mutable_caption() {
  std::string* _s = _internal_mutable_caption();
  // @@protoc_insertion_point(field_mutable:msg.PveRankRedisInfo.Caption)
  return _s;
}
inline const std::string& PveRankRedisInfo::_internal_caption() const {
  return _impl_.caption_.Get();
}
inline void PveRankRedisInfo::_internal_set_caption(const std::string& value) {
  
  _impl_.caption_.Set(value, GetArenaForAllocation());
}
inline std::string* PveRankRedisInfo::_internal_mutable_caption() {
  
  return _impl_.caption_.Mutable(GetArenaForAllocation());
}
inline std::string* PveRankRedisInfo::release_caption() {
  // @@protoc_insertion_point(field_release:msg.PveRankRedisInfo.Caption)
  return _impl_.caption_.Release();
}
inline void PveRankRedisInfo::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    
  } else {
    
  }
  _impl_.caption_.SetAllocated(caption, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.caption_.IsDefault()) {
    _impl_.caption_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PveRankRedisInfo.Caption)
}

// string TeamName = 2;
inline void PveRankRedisInfo::clear_teamname() {
  _impl_.teamname_.ClearToEmpty();
}
inline const std::string& PveRankRedisInfo::teamname() const {
  // @@protoc_insertion_point(field_get:msg.PveRankRedisInfo.TeamName)
  return _internal_teamname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PveRankRedisInfo::set_teamname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teamname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PveRankRedisInfo.TeamName)
}
inline std::string* PveRankRedisInfo::mutable_teamname() {
  std::string* _s = _internal_mutable_teamname();
  // @@protoc_insertion_point(field_mutable:msg.PveRankRedisInfo.TeamName)
  return _s;
}
inline const std::string& PveRankRedisInfo::_internal_teamname() const {
  return _impl_.teamname_.Get();
}
inline void PveRankRedisInfo::_internal_set_teamname(const std::string& value) {
  
  _impl_.teamname_.Set(value, GetArenaForAllocation());
}
inline std::string* PveRankRedisInfo::_internal_mutable_teamname() {
  
  return _impl_.teamname_.Mutable(GetArenaForAllocation());
}
inline std::string* PveRankRedisInfo::release_teamname() {
  // @@protoc_insertion_point(field_release:msg.PveRankRedisInfo.TeamName)
  return _impl_.teamname_.Release();
}
inline void PveRankRedisInfo::set_allocated_teamname(std::string* teamname) {
  if (teamname != nullptr) {
    
  } else {
    
  }
  _impl_.teamname_.SetAllocated(teamname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teamname_.IsDefault()) {
    _impl_.teamname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PveRankRedisInfo.TeamName)
}

// -------------------------------------------------------------------

// CSDTPlayerPvpData

// .msg.PveDataInfo Pve = 1;
inline bool CSDTPlayerPvpData::_internal_has_pve() const {
  return this != internal_default_instance() && _impl_.pve_ != nullptr;
}
inline bool CSDTPlayerPvpData::has_pve() const {
  return _internal_has_pve();
}
inline void CSDTPlayerPvpData::clear_pve() {
  if (GetArenaForAllocation() == nullptr && _impl_.pve_ != nullptr) {
    delete _impl_.pve_;
  }
  _impl_.pve_ = nullptr;
}
inline const ::msg::PveDataInfo& CSDTPlayerPvpData::_internal_pve() const {
  const ::msg::PveDataInfo* p = _impl_.pve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PveDataInfo&>(
      ::msg::_PveDataInfo_default_instance_);
}
inline const ::msg::PveDataInfo& CSDTPlayerPvpData::pve() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerPvpData.Pve)
  return _internal_pve();
}
inline void CSDTPlayerPvpData::unsafe_arena_set_allocated_pve(
    ::msg::PveDataInfo* pve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pve_);
  }
  _impl_.pve_ = pve;
  if (pve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerPvpData.Pve)
}
inline ::msg::PveDataInfo* CSDTPlayerPvpData::release_pve() {
  
  ::msg::PveDataInfo* temp = _impl_.pve_;
  _impl_.pve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PveDataInfo* CSDTPlayerPvpData::unsafe_arena_release_pve() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerPvpData.Pve)
  
  ::msg::PveDataInfo* temp = _impl_.pve_;
  _impl_.pve_ = nullptr;
  return temp;
}
inline ::msg::PveDataInfo* CSDTPlayerPvpData::_internal_mutable_pve() {
  
  if (_impl_.pve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PveDataInfo>(GetArenaForAllocation());
    _impl_.pve_ = p;
  }
  return _impl_.pve_;
}
inline ::msg::PveDataInfo* CSDTPlayerPvpData::mutable_pve() {
  ::msg::PveDataInfo* _msg = _internal_mutable_pve();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerPvpData.Pve)
  return _msg;
}
inline void CSDTPlayerPvpData::set_allocated_pve(::msg::PveDataInfo* pve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pve_;
  }
  if (pve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pve);
    if (message_arena != submessage_arena) {
      pve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pve_ = pve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerPvpData.Pve)
}

// .msg.CardGroupData CardGroup = 2;
inline bool CSDTPlayerPvpData::_internal_has_cardgroup() const {
  return this != internal_default_instance() && _impl_.cardgroup_ != nullptr;
}
inline bool CSDTPlayerPvpData::has_cardgroup() const {
  return _internal_has_cardgroup();
}
inline void CSDTPlayerPvpData::clear_cardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroup_ != nullptr) {
    delete _impl_.cardgroup_;
  }
  _impl_.cardgroup_ = nullptr;
}
inline const ::msg::CardGroupData& CSDTPlayerPvpData::_internal_cardgroup() const {
  const ::msg::CardGroupData* p = _impl_.cardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CardGroupData&>(
      ::msg::_CardGroupData_default_instance_);
}
inline const ::msg::CardGroupData& CSDTPlayerPvpData::cardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSDTPlayerPvpData.CardGroup)
  return _internal_cardgroup();
}
inline void CSDTPlayerPvpData::unsafe_arena_set_allocated_cardgroup(
    ::msg::CardGroupData* cardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cardgroup_);
  }
  _impl_.cardgroup_ = cardgroup;
  if (cardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSDTPlayerPvpData.CardGroup)
}
inline ::msg::CardGroupData* CSDTPlayerPvpData::release_cardgroup() {
  
  ::msg::CardGroupData* temp = _impl_.cardgroup_;
  _impl_.cardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CardGroupData* CSDTPlayerPvpData::unsafe_arena_release_cardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSDTPlayerPvpData.CardGroup)
  
  ::msg::CardGroupData* temp = _impl_.cardgroup_;
  _impl_.cardgroup_ = nullptr;
  return temp;
}
inline ::msg::CardGroupData* CSDTPlayerPvpData::_internal_mutable_cardgroup() {
  
  if (_impl_.cardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CardGroupData>(GetArenaForAllocation());
    _impl_.cardgroup_ = p;
  }
  return _impl_.cardgroup_;
}
inline ::msg::CardGroupData* CSDTPlayerPvpData::mutable_cardgroup() {
  ::msg::CardGroupData* _msg = _internal_mutable_cardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSDTPlayerPvpData.CardGroup)
  return _msg;
}
inline void CSDTPlayerPvpData::set_allocated_cardgroup(::msg::CardGroupData* cardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cardgroup_;
  }
  if (cardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cardgroup);
    if (message_arena != submessage_arena) {
      cardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cardgroup_ = cardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTPlayerPvpData.CardGroup)
}

// -------------------------------------------------------------------

// GmBan

// .msg.FROZEN_TYPE FType = 1;
inline void GmBan::clear_ftype() {
  _impl_.ftype_ = 0;
}
inline ::msg::FROZEN_TYPE GmBan::_internal_ftype() const {
  return static_cast< ::msg::FROZEN_TYPE >(_impl_.ftype_);
}
inline ::msg::FROZEN_TYPE GmBan::ftype() const {
  // @@protoc_insertion_point(field_get:msg.GmBan.FType)
  return _internal_ftype();
}
inline void GmBan::_internal_set_ftype(::msg::FROZEN_TYPE value) {
  
  _impl_.ftype_ = value;
}
inline void GmBan::set_ftype(::msg::FROZEN_TYPE value) {
  _internal_set_ftype(value);
  // @@protoc_insertion_point(field_set:msg.GmBan.FType)
}

// int64 StartTime = 2;
inline void GmBan::clear_starttime() {
  _impl_.starttime_ = int64_t{0};
}
inline int64_t GmBan::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int64_t GmBan::starttime() const {
  // @@protoc_insertion_point(field_get:msg.GmBan.StartTime)
  return _internal_starttime();
}
inline void GmBan::_internal_set_starttime(int64_t value) {
  
  _impl_.starttime_ = value;
}
inline void GmBan::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:msg.GmBan.StartTime)
}

// int64 EndTime = 3;
inline void GmBan::clear_endtime() {
  _impl_.endtime_ = int64_t{0};
}
inline int64_t GmBan::_internal_endtime() const {
  return _impl_.endtime_;
}
inline int64_t GmBan::endtime() const {
  // @@protoc_insertion_point(field_get:msg.GmBan.EndTime)
  return _internal_endtime();
}
inline void GmBan::_internal_set_endtime(int64_t value) {
  
  _impl_.endtime_ = value;
}
inline void GmBan::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:msg.GmBan.EndTime)
}

// string Reason = 4;
inline void GmBan::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& GmBan::reason() const {
  // @@protoc_insertion_point(field_get:msg.GmBan.Reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GmBan::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.GmBan.Reason)
}
inline std::string* GmBan::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:msg.GmBan.Reason)
  return _s;
}
inline const std::string& GmBan::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void GmBan::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* GmBan::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* GmBan::release_reason() {
  // @@protoc_insertion_point(field_release:msg.GmBan.Reason)
  return _impl_.reason_.Release();
}
inline void GmBan::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.GmBan.Reason)
}

// -------------------------------------------------------------------

// MentorInviteMsg

// .msg.MENTORSHIP Type = 1;
inline void MentorInviteMsg::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::MENTORSHIP MentorInviteMsg::_internal_type() const {
  return static_cast< ::msg::MENTORSHIP >(_impl_.type_);
}
inline ::msg::MENTORSHIP MentorInviteMsg::type() const {
  // @@protoc_insertion_point(field_get:msg.MentorInviteMsg.Type)
  return _internal_type();
}
inline void MentorInviteMsg::_internal_set_type(::msg::MENTORSHIP value) {
  
  _impl_.type_ = value;
}
inline void MentorInviteMsg::set_type(::msg::MENTORSHIP value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.MentorInviteMsg.Type)
}

// string Id = 2;
inline void MentorInviteMsg::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MentorInviteMsg::id() const {
  // @@protoc_insertion_point(field_get:msg.MentorInviteMsg.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MentorInviteMsg::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MentorInviteMsg.Id)
}
inline std::string* MentorInviteMsg::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.MentorInviteMsg.Id)
  return _s;
}
inline const std::string& MentorInviteMsg::_internal_id() const {
  return _impl_.id_.Get();
}
inline void MentorInviteMsg::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* MentorInviteMsg::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* MentorInviteMsg::release_id() {
  // @@protoc_insertion_point(field_release:msg.MentorInviteMsg.Id)
  return _impl_.id_.Release();
}
inline void MentorInviteMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MentorInviteMsg.Id)
}

// int64 Ctime = 3;
inline void MentorInviteMsg::clear_ctime() {
  _impl_.ctime_ = int64_t{0};
}
inline int64_t MentorInviteMsg::_internal_ctime() const {
  return _impl_.ctime_;
}
inline int64_t MentorInviteMsg::ctime() const {
  // @@protoc_insertion_point(field_get:msg.MentorInviteMsg.Ctime)
  return _internal_ctime();
}
inline void MentorInviteMsg::_internal_set_ctime(int64_t value) {
  
  _impl_.ctime_ = value;
}
inline void MentorInviteMsg::set_ctime(int64_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:msg.MentorInviteMsg.Ctime)
}

// string Content = 4;
inline void MentorInviteMsg::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& MentorInviteMsg::content() const {
  // @@protoc_insertion_point(field_get:msg.MentorInviteMsg.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MentorInviteMsg::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.MentorInviteMsg.Content)
}
inline std::string* MentorInviteMsg::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.MentorInviteMsg.Content)
  return _s;
}
inline const std::string& MentorInviteMsg::_internal_content() const {
  return _impl_.content_.Get();
}
inline void MentorInviteMsg::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* MentorInviteMsg::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* MentorInviteMsg::release_content() {
  // @@protoc_insertion_point(field_release:msg.MentorInviteMsg.Content)
  return _impl_.content_.Release();
}
inline void MentorInviteMsg::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.MentorInviteMsg.Content)
}

// repeated uint32 CompleteTask = 5;
inline int MentorInviteMsg::_internal_completetask_size() const {
  return _impl_.completetask_.size();
}
inline int MentorInviteMsg::completetask_size() const {
  return _internal_completetask_size();
}
inline void MentorInviteMsg::clear_completetask() {
  _impl_.completetask_.Clear();
}
inline uint32_t MentorInviteMsg::_internal_completetask(int index) const {
  return _impl_.completetask_.Get(index);
}
inline uint32_t MentorInviteMsg::completetask(int index) const {
  // @@protoc_insertion_point(field_get:msg.MentorInviteMsg.CompleteTask)
  return _internal_completetask(index);
}
inline void MentorInviteMsg::set_completetask(int index, uint32_t value) {
  _impl_.completetask_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.MentorInviteMsg.CompleteTask)
}
inline void MentorInviteMsg::_internal_add_completetask(uint32_t value) {
  _impl_.completetask_.Add(value);
}
inline void MentorInviteMsg::add_completetask(uint32_t value) {
  _internal_add_completetask(value);
  // @@protoc_insertion_point(field_add:msg.MentorInviteMsg.CompleteTask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MentorInviteMsg::_internal_completetask() const {
  return _impl_.completetask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
MentorInviteMsg::completetask() const {
  // @@protoc_insertion_point(field_list:msg.MentorInviteMsg.CompleteTask)
  return _internal_completetask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MentorInviteMsg::_internal_mutable_completetask() {
  return &_impl_.completetask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
MentorInviteMsg::mutable_completetask() {
  // @@protoc_insertion_point(field_mutable_list:msg.MentorInviteMsg.CompleteTask)
  return _internal_mutable_completetask();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MentorInfo

// .msg.MENTORLEVEL Level = 1;
inline void MentorInfo::clear_level() {
  _impl_.level_ = 0;
}
inline ::msg::MENTORLEVEL MentorInfo::_internal_level() const {
  return static_cast< ::msg::MENTORLEVEL >(_impl_.level_);
}
inline ::msg::MENTORLEVEL MentorInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.MentorInfo.Level)
  return _internal_level();
}
inline void MentorInfo::_internal_set_level(::msg::MENTORLEVEL value) {
  
  _impl_.level_ = value;
}
inline void MentorInfo::set_level(::msg::MENTORLEVEL value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.MentorInfo.Level)
}

// repeated .msg.Pupil Pupils = 2;
inline int MentorInfo::_internal_pupils_size() const {
  return _impl_.pupils_.size();
}
inline int MentorInfo::pupils_size() const {
  return _internal_pupils_size();
}
inline void MentorInfo::clear_pupils() {
  _impl_.pupils_.Clear();
}
inline ::msg::Pupil* MentorInfo::mutable_pupils(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MentorInfo.Pupils)
  return _impl_.pupils_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Pupil >*
MentorInfo::mutable_pupils() {
  // @@protoc_insertion_point(field_mutable_list:msg.MentorInfo.Pupils)
  return &_impl_.pupils_;
}
inline const ::msg::Pupil& MentorInfo::_internal_pupils(int index) const {
  return _impl_.pupils_.Get(index);
}
inline const ::msg::Pupil& MentorInfo::pupils(int index) const {
  // @@protoc_insertion_point(field_get:msg.MentorInfo.Pupils)
  return _internal_pupils(index);
}
inline ::msg::Pupil* MentorInfo::_internal_add_pupils() {
  return _impl_.pupils_.Add();
}
inline ::msg::Pupil* MentorInfo::add_pupils() {
  ::msg::Pupil* _add = _internal_add_pupils();
  // @@protoc_insertion_point(field_add:msg.MentorInfo.Pupils)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Pupil >&
MentorInfo::pupils() const {
  // @@protoc_insertion_point(field_list:msg.MentorInfo.Pupils)
  return _impl_.pupils_;
}

// uint32 InviteTimes = 3;
inline void MentorInfo::clear_invitetimes() {
  _impl_.invitetimes_ = 0u;
}
inline uint32_t MentorInfo::_internal_invitetimes() const {
  return _impl_.invitetimes_;
}
inline uint32_t MentorInfo::invitetimes() const {
  // @@protoc_insertion_point(field_get:msg.MentorInfo.InviteTimes)
  return _internal_invitetimes();
}
inline void MentorInfo::_internal_set_invitetimes(uint32_t value) {
  
  _impl_.invitetimes_ = value;
}
inline void MentorInfo::set_invitetimes(uint32_t value) {
  _internal_set_invitetimes(value);
  // @@protoc_insertion_point(field_set:msg.MentorInfo.InviteTimes)
}

// repeated int64 PunishTime = 4;
inline int MentorInfo::_internal_punishtime_size() const {
  return _impl_.punishtime_.size();
}
inline int MentorInfo::punishtime_size() const {
  return _internal_punishtime_size();
}
inline void MentorInfo::clear_punishtime() {
  _impl_.punishtime_.Clear();
}
inline int64_t MentorInfo::_internal_punishtime(int index) const {
  return _impl_.punishtime_.Get(index);
}
inline int64_t MentorInfo::punishtime(int index) const {
  // @@protoc_insertion_point(field_get:msg.MentorInfo.PunishTime)
  return _internal_punishtime(index);
}
inline void MentorInfo::set_punishtime(int index, int64_t value) {
  _impl_.punishtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.MentorInfo.PunishTime)
}
inline void MentorInfo::_internal_add_punishtime(int64_t value) {
  _impl_.punishtime_.Add(value);
}
inline void MentorInfo::add_punishtime(int64_t value) {
  _internal_add_punishtime(value);
  // @@protoc_insertion_point(field_add:msg.MentorInfo.PunishTime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MentorInfo::_internal_punishtime() const {
  return _impl_.punishtime_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MentorInfo::punishtime() const {
  // @@protoc_insertion_point(field_list:msg.MentorInfo.PunishTime)
  return _internal_punishtime();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MentorInfo::_internal_mutable_punishtime() {
  return &_impl_.punishtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MentorInfo::mutable_punishtime() {
  // @@protoc_insertion_point(field_mutable_list:msg.MentorInfo.PunishTime)
  return _internal_mutable_punishtime();
}

// map<uint32, .msg.CSDTTaskItem> Tasks = 5;
inline int MentorInfo::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int MentorInfo::tasks_size() const {
  return _internal_tasks_size();
}
inline void MentorInfo::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
MentorInfo::_internal_tasks() const {
  return _impl_.tasks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
MentorInfo::tasks() const {
  // @@protoc_insertion_point(field_map:msg.MentorInfo.Tasks)
  return _internal_tasks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
MentorInfo::_internal_mutable_tasks() {
  return _impl_.tasks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
MentorInfo::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:msg.MentorInfo.Tasks)
  return _internal_mutable_tasks();
}

// uint32 GraduateNum = 6;
inline void MentorInfo::clear_graduatenum() {
  _impl_.graduatenum_ = 0u;
}
inline uint32_t MentorInfo::_internal_graduatenum() const {
  return _impl_.graduatenum_;
}
inline uint32_t MentorInfo::graduatenum() const {
  // @@protoc_insertion_point(field_get:msg.MentorInfo.GraduateNum)
  return _internal_graduatenum();
}
inline void MentorInfo::_internal_set_graduatenum(uint32_t value) {
  
  _impl_.graduatenum_ = value;
}
inline void MentorInfo::set_graduatenum(uint32_t value) {
  _internal_set_graduatenum(value);
  // @@protoc_insertion_point(field_set:msg.MentorInfo.GraduateNum)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Pupil

// map<uint32, .msg.CSDTTaskItem> Tasks = 1;
inline int Pupil::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int Pupil::tasks_size() const {
  return _internal_tasks_size();
}
inline void Pupil::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
Pupil::_internal_tasks() const {
  return _impl_.tasks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
Pupil::tasks() const {
  // @@protoc_insertion_point(field_map:msg.Pupil.Tasks)
  return _internal_tasks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
Pupil::_internal_mutable_tasks() {
  return _impl_.tasks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
Pupil::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:msg.Pupil.Tasks)
  return _internal_mutable_tasks();
}

// int64 GraduateTime = 2;
inline void Pupil::clear_graduatetime() {
  _impl_.graduatetime_ = int64_t{0};
}
inline int64_t Pupil::_internal_graduatetime() const {
  return _impl_.graduatetime_;
}
inline int64_t Pupil::graduatetime() const {
  // @@protoc_insertion_point(field_get:msg.Pupil.GraduateTime)
  return _internal_graduatetime();
}
inline void Pupil::_internal_set_graduatetime(int64_t value) {
  
  _impl_.graduatetime_ = value;
}
inline void Pupil::set_graduatetime(int64_t value) {
  _internal_set_graduatetime(value);
  // @@protoc_insertion_point(field_set:msg.Pupil.GraduateTime)
}

// string Id = 3;
inline void Pupil::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Pupil::id() const {
  // @@protoc_insertion_point(field_get:msg.Pupil.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pupil::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Pupil.Id)
}
inline std::string* Pupil::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.Pupil.Id)
  return _s;
}
inline const std::string& Pupil::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Pupil::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Pupil::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Pupil::release_id() {
  // @@protoc_insertion_point(field_release:msg.Pupil.Id)
  return _impl_.id_.Release();
}
inline void Pupil::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Pupil.Id)
}

// .msg.PUPILSTAT Stat = 4;
inline void Pupil::clear_stat() {
  _impl_.stat_ = 0;
}
inline ::msg::PUPILSTAT Pupil::_internal_stat() const {
  return static_cast< ::msg::PUPILSTAT >(_impl_.stat_);
}
inline ::msg::PUPILSTAT Pupil::stat() const {
  // @@protoc_insertion_point(field_get:msg.Pupil.Stat)
  return _internal_stat();
}
inline void Pupil::_internal_set_stat(::msg::PUPILSTAT value) {
  
  _impl_.stat_ = value;
}
inline void Pupil::set_stat(::msg::PUPILSTAT value) {
  _internal_set_stat(value);
  // @@protoc_insertion_point(field_set:msg.Pupil.Stat)
}

// int64 ApplyGraduateTime = 5;
inline void Pupil::clear_applygraduatetime() {
  _impl_.applygraduatetime_ = int64_t{0};
}
inline int64_t Pupil::_internal_applygraduatetime() const {
  return _impl_.applygraduatetime_;
}
inline int64_t Pupil::applygraduatetime() const {
  // @@protoc_insertion_point(field_get:msg.Pupil.ApplyGraduateTime)
  return _internal_applygraduatetime();
}
inline void Pupil::_internal_set_applygraduatetime(int64_t value) {
  
  _impl_.applygraduatetime_ = value;
}
inline void Pupil::set_applygraduatetime(int64_t value) {
  _internal_set_applygraduatetime(value);
  // @@protoc_insertion_point(field_set:msg.Pupil.ApplyGraduateTime)
}

// int64 Intimacy = 6;
inline void Pupil::clear_intimacy() {
  _impl_.intimacy_ = int64_t{0};
}
inline int64_t Pupil::_internal_intimacy() const {
  return _impl_.intimacy_;
}
inline int64_t Pupil::intimacy() const {
  // @@protoc_insertion_point(field_get:msg.Pupil.Intimacy)
  return _internal_intimacy();
}
inline void Pupil::_internal_set_intimacy(int64_t value) {
  
  _impl_.intimacy_ = value;
}
inline void Pupil::set_intimacy(int64_t value) {
  _internal_set_intimacy(value);
  // @@protoc_insertion_point(field_set:msg.Pupil.Intimacy)
}

// -------------------------------------------------------------------

// TDUnUse

// .msg.TDItemId Id1 = 1;
inline bool TDUnUse::_internal_has_id1() const {
  return this != internal_default_instance() && _impl_.id1_ != nullptr;
}
inline bool TDUnUse::has_id1() const {
  return _internal_has_id1();
}
inline void TDUnUse::clear_id1() {
  if (GetArenaForAllocation() == nullptr && _impl_.id1_ != nullptr) {
    delete _impl_.id1_;
  }
  _impl_.id1_ = nullptr;
}
inline const ::msg::TDItemId& TDUnUse::_internal_id1() const {
  const ::msg::TDItemId* p = _impl_.id1_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& TDUnUse::id1() const {
  // @@protoc_insertion_point(field_get:msg.TDUnUse.Id1)
  return _internal_id1();
}
inline void TDUnUse::unsafe_arena_set_allocated_id1(
    ::msg::TDItemId* id1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id1_);
  }
  _impl_.id1_ = id1;
  if (id1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDUnUse.Id1)
}
inline ::msg::TDItemId* TDUnUse::release_id1() {
  
  ::msg::TDItemId* temp = _impl_.id1_;
  _impl_.id1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* TDUnUse::unsafe_arena_release_id1() {
  // @@protoc_insertion_point(field_release:msg.TDUnUse.Id1)
  
  ::msg::TDItemId* temp = _impl_.id1_;
  _impl_.id1_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* TDUnUse::_internal_mutable_id1() {
  
  if (_impl_.id1_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.id1_ = p;
  }
  return _impl_.id1_;
}
inline ::msg::TDItemId* TDUnUse::mutable_id1() {
  ::msg::TDItemId* _msg = _internal_mutable_id1();
  // @@protoc_insertion_point(field_mutable:msg.TDUnUse.Id1)
  return _msg;
}
inline void TDUnUse::set_allocated_id1(::msg::TDItemId* id1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id1_;
  }
  if (id1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id1);
    if (message_arena != submessage_arena) {
      id1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id1_ = id1;
  // @@protoc_insertion_point(field_set_allocated:msg.TDUnUse.Id1)
}

// .msg.TDItemId Id2 = 2;
inline bool TDUnUse::_internal_has_id2() const {
  return this != internal_default_instance() && _impl_.id2_ != nullptr;
}
inline bool TDUnUse::has_id2() const {
  return _internal_has_id2();
}
inline void TDUnUse::clear_id2() {
  if (GetArenaForAllocation() == nullptr && _impl_.id2_ != nullptr) {
    delete _impl_.id2_;
  }
  _impl_.id2_ = nullptr;
}
inline const ::msg::TDItemId& TDUnUse::_internal_id2() const {
  const ::msg::TDItemId* p = _impl_.id2_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& TDUnUse::id2() const {
  // @@protoc_insertion_point(field_get:msg.TDUnUse.Id2)
  return _internal_id2();
}
inline void TDUnUse::unsafe_arena_set_allocated_id2(
    ::msg::TDItemId* id2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id2_);
  }
  _impl_.id2_ = id2;
  if (id2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDUnUse.Id2)
}
inline ::msg::TDItemId* TDUnUse::release_id2() {
  
  ::msg::TDItemId* temp = _impl_.id2_;
  _impl_.id2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* TDUnUse::unsafe_arena_release_id2() {
  // @@protoc_insertion_point(field_release:msg.TDUnUse.Id2)
  
  ::msg::TDItemId* temp = _impl_.id2_;
  _impl_.id2_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* TDUnUse::_internal_mutable_id2() {
  
  if (_impl_.id2_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.id2_ = p;
  }
  return _impl_.id2_;
}
inline ::msg::TDItemId* TDUnUse::mutable_id2() {
  ::msg::TDItemId* _msg = _internal_mutable_id2();
  // @@protoc_insertion_point(field_mutable:msg.TDUnUse.Id2)
  return _msg;
}
inline void TDUnUse::set_allocated_id2(::msg::TDItemId* id2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id2_;
  }
  if (id2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id2);
    if (message_arena != submessage_arena) {
      id2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id2_ = id2;
  // @@protoc_insertion_point(field_set_allocated:msg.TDUnUse.Id2)
}

// .msg.TDItemId Id3 = 3;
inline bool TDUnUse::_internal_has_id3() const {
  return this != internal_default_instance() && _impl_.id3_ != nullptr;
}
inline bool TDUnUse::has_id3() const {
  return _internal_has_id3();
}
inline void TDUnUse::clear_id3() {
  if (GetArenaForAllocation() == nullptr && _impl_.id3_ != nullptr) {
    delete _impl_.id3_;
  }
  _impl_.id3_ = nullptr;
}
inline const ::msg::TDItemId& TDUnUse::_internal_id3() const {
  const ::msg::TDItemId* p = _impl_.id3_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemId&>(
      ::msg::_TDItemId_default_instance_);
}
inline const ::msg::TDItemId& TDUnUse::id3() const {
  // @@protoc_insertion_point(field_get:msg.TDUnUse.Id3)
  return _internal_id3();
}
inline void TDUnUse::unsafe_arena_set_allocated_id3(
    ::msg::TDItemId* id3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id3_);
  }
  _impl_.id3_ = id3;
  if (id3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDUnUse.Id3)
}
inline ::msg::TDItemId* TDUnUse::release_id3() {
  
  ::msg::TDItemId* temp = _impl_.id3_;
  _impl_.id3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemId* TDUnUse::unsafe_arena_release_id3() {
  // @@protoc_insertion_point(field_release:msg.TDUnUse.Id3)
  
  ::msg::TDItemId* temp = _impl_.id3_;
  _impl_.id3_ = nullptr;
  return temp;
}
inline ::msg::TDItemId* TDUnUse::_internal_mutable_id3() {
  
  if (_impl_.id3_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemId>(GetArenaForAllocation());
    _impl_.id3_ = p;
  }
  return _impl_.id3_;
}
inline ::msg::TDItemId* TDUnUse::mutable_id3() {
  ::msg::TDItemId* _msg = _internal_mutable_id3();
  // @@protoc_insertion_point(field_mutable:msg.TDUnUse.Id3)
  return _msg;
}
inline void TDUnUse::set_allocated_id3(::msg::TDItemId* id3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id3_;
  }
  if (id3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id3);
    if (message_arena != submessage_arena) {
      id3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id3_ = id3;
  // @@protoc_insertion_point(field_set_allocated:msg.TDUnUse.Id3)
}

// .msg.TDItemGroup ItemGroup1 = 4;
inline bool TDUnUse::_internal_has_itemgroup1() const {
  return this != internal_default_instance() && _impl_.itemgroup1_ != nullptr;
}
inline bool TDUnUse::has_itemgroup1() const {
  return _internal_has_itemgroup1();
}
inline void TDUnUse::clear_itemgroup1() {
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup1_ != nullptr) {
    delete _impl_.itemgroup1_;
  }
  _impl_.itemgroup1_ = nullptr;
}
inline const ::msg::TDItemGroup& TDUnUse::_internal_itemgroup1() const {
  const ::msg::TDItemGroup* p = _impl_.itemgroup1_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemGroup&>(
      ::msg::_TDItemGroup_default_instance_);
}
inline const ::msg::TDItemGroup& TDUnUse::itemgroup1() const {
  // @@protoc_insertion_point(field_get:msg.TDUnUse.ItemGroup1)
  return _internal_itemgroup1();
}
inline void TDUnUse::unsafe_arena_set_allocated_itemgroup1(
    ::msg::TDItemGroup* itemgroup1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemgroup1_);
  }
  _impl_.itemgroup1_ = itemgroup1;
  if (itemgroup1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDUnUse.ItemGroup1)
}
inline ::msg::TDItemGroup* TDUnUse::release_itemgroup1() {
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup1_;
  _impl_.itemgroup1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemGroup* TDUnUse::unsafe_arena_release_itemgroup1() {
  // @@protoc_insertion_point(field_release:msg.TDUnUse.ItemGroup1)
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup1_;
  _impl_.itemgroup1_ = nullptr;
  return temp;
}
inline ::msg::TDItemGroup* TDUnUse::_internal_mutable_itemgroup1() {
  
  if (_impl_.itemgroup1_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemGroup>(GetArenaForAllocation());
    _impl_.itemgroup1_ = p;
  }
  return _impl_.itemgroup1_;
}
inline ::msg::TDItemGroup* TDUnUse::mutable_itemgroup1() {
  ::msg::TDItemGroup* _msg = _internal_mutable_itemgroup1();
  // @@protoc_insertion_point(field_mutable:msg.TDUnUse.ItemGroup1)
  return _msg;
}
inline void TDUnUse::set_allocated_itemgroup1(::msg::TDItemGroup* itemgroup1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.itemgroup1_;
  }
  if (itemgroup1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(itemgroup1);
    if (message_arena != submessage_arena) {
      itemgroup1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, itemgroup1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.itemgroup1_ = itemgroup1;
  // @@protoc_insertion_point(field_set_allocated:msg.TDUnUse.ItemGroup1)
}

// .msg.TDItemGroup ItemGroup2 = 5;
inline bool TDUnUse::_internal_has_itemgroup2() const {
  return this != internal_default_instance() && _impl_.itemgroup2_ != nullptr;
}
inline bool TDUnUse::has_itemgroup2() const {
  return _internal_has_itemgroup2();
}
inline void TDUnUse::clear_itemgroup2() {
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup2_ != nullptr) {
    delete _impl_.itemgroup2_;
  }
  _impl_.itemgroup2_ = nullptr;
}
inline const ::msg::TDItemGroup& TDUnUse::_internal_itemgroup2() const {
  const ::msg::TDItemGroup* p = _impl_.itemgroup2_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::TDItemGroup&>(
      ::msg::_TDItemGroup_default_instance_);
}
inline const ::msg::TDItemGroup& TDUnUse::itemgroup2() const {
  // @@protoc_insertion_point(field_get:msg.TDUnUse.ItemGroup2)
  return _internal_itemgroup2();
}
inline void TDUnUse::unsafe_arena_set_allocated_itemgroup2(
    ::msg::TDItemGroup* itemgroup2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemgroup2_);
  }
  _impl_.itemgroup2_ = itemgroup2;
  if (itemgroup2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.TDUnUse.ItemGroup2)
}
inline ::msg::TDItemGroup* TDUnUse::release_itemgroup2() {
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup2_;
  _impl_.itemgroup2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::TDItemGroup* TDUnUse::unsafe_arena_release_itemgroup2() {
  // @@protoc_insertion_point(field_release:msg.TDUnUse.ItemGroup2)
  
  ::msg::TDItemGroup* temp = _impl_.itemgroup2_;
  _impl_.itemgroup2_ = nullptr;
  return temp;
}
inline ::msg::TDItemGroup* TDUnUse::_internal_mutable_itemgroup2() {
  
  if (_impl_.itemgroup2_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::TDItemGroup>(GetArenaForAllocation());
    _impl_.itemgroup2_ = p;
  }
  return _impl_.itemgroup2_;
}
inline ::msg::TDItemGroup* TDUnUse::mutable_itemgroup2() {
  ::msg::TDItemGroup* _msg = _internal_mutable_itemgroup2();
  // @@protoc_insertion_point(field_mutable:msg.TDUnUse.ItemGroup2)
  return _msg;
}
inline void TDUnUse::set_allocated_itemgroup2(::msg::TDItemGroup* itemgroup2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.itemgroup2_;
  }
  if (itemgroup2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(itemgroup2);
    if (message_arena != submessage_arena) {
      itemgroup2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, itemgroup2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.itemgroup2_ = itemgroup2;
  // @@protoc_insertion_point(field_set_allocated:msg.TDUnUse.ItemGroup2)
}

// -------------------------------------------------------------------

// TDItemId

// int32 Id = 1;
inline void TDItemId::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDItemId::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDItemId::id() const {
  // @@protoc_insertion_point(field_get:msg.TDItemId.Id)
  return _internal_id();
}
inline void TDItemId::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDItemId::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDItemId.Id)
}

// int32 Level = 2;
inline void TDItemId::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDItemId::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDItemId::level() const {
  // @@protoc_insertion_point(field_get:msg.TDItemId.Level)
  return _internal_level();
}
inline void TDItemId::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDItemId::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDItemId.Level)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TDItem

// int32 Id = 1;
inline void TDItem::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t TDItem::_internal_id() const {
  return _impl_.id_;
}
inline int32_t TDItem::id() const {
  // @@protoc_insertion_point(field_get:msg.TDItem.Id)
  return _internal_id();
}
inline void TDItem::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void TDItem::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.TDItem.Id)
}

// int32 Level = 2;
inline void TDItem::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t TDItem::_internal_level() const {
  return _impl_.level_;
}
inline int32_t TDItem::level() const {
  // @@protoc_insertion_point(field_get:msg.TDItem.Level)
  return _internal_level();
}
inline void TDItem::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void TDItem::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.TDItem.Level)
}

// int32 TalentLevel = 3;
inline void TDItem::clear_talentlevel() {
  _impl_.talentlevel_ = 0;
}
inline int32_t TDItem::_internal_talentlevel() const {
  return _impl_.talentlevel_;
}
inline int32_t TDItem::talentlevel() const {
  // @@protoc_insertion_point(field_get:msg.TDItem.TalentLevel)
  return _internal_talentlevel();
}
inline void TDItem::_internal_set_talentlevel(int32_t value) {
  
  _impl_.talentlevel_ = value;
}
inline void TDItem::set_talentlevel(int32_t value) {
  _internal_set_talentlevel(value);
  // @@protoc_insertion_point(field_set:msg.TDItem.TalentLevel)
}

// int32 Count = 4;
inline void TDItem::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t TDItem::_internal_count() const {
  return _impl_.count_;
}
inline int32_t TDItem::count() const {
  // @@protoc_insertion_point(field_get:msg.TDItem.Count)
  return _internal_count();
}
inline void TDItem::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void TDItem::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:msg.TDItem.Count)
}

// map<string, .msg.TDItemId> Equipments = 5;
inline int TDItem::_internal_equipments_size() const {
  return _impl_.equipments_.size();
}
inline int TDItem::equipments_size() const {
  return _internal_equipments_size();
}
inline void TDItem::clear_equipments() {
  _impl_.equipments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >&
TDItem::_internal_equipments() const {
  return _impl_.equipments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >&
TDItem::equipments() const {
  // @@protoc_insertion_point(field_map:msg.TDItem.Equipments)
  return _internal_equipments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >*
TDItem::_internal_mutable_equipments() {
  return _impl_.equipments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >*
TDItem::mutable_equipments() {
  // @@protoc_insertion_point(field_mutable_map:msg.TDItem.Equipments)
  return _internal_mutable_equipments();
}

// -------------------------------------------------------------------

// AddRecommendData

// string PlayerId = 1;
inline void AddRecommendData::clear_playerid() {
  _impl_.playerid_.ClearToEmpty();
}
inline const std::string& AddRecommendData::playerid() const {
  // @@protoc_insertion_point(field_get:msg.AddRecommendData.PlayerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRecommendData::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.AddRecommendData.PlayerId)
}
inline std::string* AddRecommendData::mutable_playerid() {
  std::string* _s = _internal_mutable_playerid();
  // @@protoc_insertion_point(field_mutable:msg.AddRecommendData.PlayerId)
  return _s;
}
inline const std::string& AddRecommendData::_internal_playerid() const {
  return _impl_.playerid_.Get();
}
inline void AddRecommendData::_internal_set_playerid(const std::string& value) {
  
  _impl_.playerid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddRecommendData::_internal_mutable_playerid() {
  
  return _impl_.playerid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddRecommendData::release_playerid() {
  // @@protoc_insertion_point(field_release:msg.AddRecommendData.PlayerId)
  return _impl_.playerid_.Release();
}
inline void AddRecommendData::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  _impl_.playerid_.SetAllocated(playerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerid_.IsDefault()) {
    _impl_.playerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.AddRecommendData.PlayerId)
}

// uint32 Mmr = 2;
inline void AddRecommendData::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t AddRecommendData::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t AddRecommendData::mmr() const {
  // @@protoc_insertion_point(field_get:msg.AddRecommendData.Mmr)
  return _internal_mmr();
}
inline void AddRecommendData::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void AddRecommendData::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.AddRecommendData.Mmr)
}

// uint32 Level = 3;
inline void AddRecommendData::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t AddRecommendData::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t AddRecommendData::level() const {
  // @@protoc_insertion_point(field_get:msg.AddRecommendData.Level)
  return _internal_level();
}
inline void AddRecommendData::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void AddRecommendData::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.AddRecommendData.Level)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlayerMentorShipInfo

// bool IsMentor = 1;
inline void PlayerMentorShipInfo::clear_ismentor() {
  _impl_.ismentor_ = false;
}
inline bool PlayerMentorShipInfo::_internal_ismentor() const {
  return _impl_.ismentor_;
}
inline bool PlayerMentorShipInfo::ismentor() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.IsMentor)
  return _internal_ismentor();
}
inline void PlayerMentorShipInfo::_internal_set_ismentor(bool value) {
  
  _impl_.ismentor_ = value;
}
inline void PlayerMentorShipInfo::set_ismentor(bool value) {
  _internal_set_ismentor(value);
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.IsMentor)
}

// string MentorId = 2;
inline void PlayerMentorShipInfo::clear_mentorid() {
  _impl_.mentorid_.ClearToEmpty();
}
inline const std::string& PlayerMentorShipInfo::mentorid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.MentorId)
  return _internal_mentorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerMentorShipInfo::set_mentorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mentorid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.MentorId)
}
inline std::string* PlayerMentorShipInfo::mutable_mentorid() {
  std::string* _s = _internal_mutable_mentorid();
  // @@protoc_insertion_point(field_mutable:msg.PlayerMentorShipInfo.MentorId)
  return _s;
}
inline const std::string& PlayerMentorShipInfo::_internal_mentorid() const {
  return _impl_.mentorid_.Get();
}
inline void PlayerMentorShipInfo::_internal_set_mentorid(const std::string& value) {
  
  _impl_.mentorid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerMentorShipInfo::_internal_mutable_mentorid() {
  
  return _impl_.mentorid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerMentorShipInfo::release_mentorid() {
  // @@protoc_insertion_point(field_release:msg.PlayerMentorShipInfo.MentorId)
  return _impl_.mentorid_.Release();
}
inline void PlayerMentorShipInfo::set_allocated_mentorid(std::string* mentorid) {
  if (mentorid != nullptr) {
    
  } else {
    
  }
  _impl_.mentorid_.SetAllocated(mentorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mentorid_.IsDefault()) {
    _impl_.mentorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerMentorShipInfo.MentorId)
}

// string Sign = 3;
inline void PlayerMentorShipInfo::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& PlayerMentorShipInfo::sign() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.Sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerMentorShipInfo::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.Sign)
}
inline std::string* PlayerMentorShipInfo::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:msg.PlayerMentorShipInfo.Sign)
  return _s;
}
inline const std::string& PlayerMentorShipInfo::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void PlayerMentorShipInfo::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerMentorShipInfo::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerMentorShipInfo::release_sign() {
  // @@protoc_insertion_point(field_release:msg.PlayerMentorShipInfo.Sign)
  return _impl_.sign_.Release();
}
inline void PlayerMentorShipInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerMentorShipInfo.Sign)
}

// bool InviteSwitch = 4;
inline void PlayerMentorShipInfo::clear_inviteswitch() {
  _impl_.inviteswitch_ = false;
}
inline bool PlayerMentorShipInfo::_internal_inviteswitch() const {
  return _impl_.inviteswitch_;
}
inline bool PlayerMentorShipInfo::inviteswitch() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.InviteSwitch)
  return _internal_inviteswitch();
}
inline void PlayerMentorShipInfo::_internal_set_inviteswitch(bool value) {
  
  _impl_.inviteswitch_ = value;
}
inline void PlayerMentorShipInfo::set_inviteswitch(bool value) {
  _internal_set_inviteswitch(value);
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.InviteSwitch)
}

// uint32 Tag = 5;
inline void PlayerMentorShipInfo::clear_tag() {
  _impl_.tag_ = 0u;
}
inline uint32_t PlayerMentorShipInfo::_internal_tag() const {
  return _impl_.tag_;
}
inline uint32_t PlayerMentorShipInfo::tag() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.Tag)
  return _internal_tag();
}
inline void PlayerMentorShipInfo::_internal_set_tag(uint32_t value) {
  
  _impl_.tag_ = value;
}
inline void PlayerMentorShipInfo::set_tag(uint32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.Tag)
}

// int64 PunishTime = 6;
inline void PlayerMentorShipInfo::clear_punishtime() {
  _impl_.punishtime_ = int64_t{0};
}
inline int64_t PlayerMentorShipInfo::_internal_punishtime() const {
  return _impl_.punishtime_;
}
inline int64_t PlayerMentorShipInfo::punishtime() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.PunishTime)
  return _internal_punishtime();
}
inline void PlayerMentorShipInfo::_internal_set_punishtime(int64_t value) {
  
  _impl_.punishtime_ = value;
}
inline void PlayerMentorShipInfo::set_punishtime(int64_t value) {
  _internal_set_punishtime(value);
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.PunishTime)
}

// bool IsGraduate = 7;
inline void PlayerMentorShipInfo::clear_isgraduate() {
  _impl_.isgraduate_ = false;
}
inline bool PlayerMentorShipInfo::_internal_isgraduate() const {
  return _impl_.isgraduate_;
}
inline bool PlayerMentorShipInfo::isgraduate() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.IsGraduate)
  return _internal_isgraduate();
}
inline void PlayerMentorShipInfo::_internal_set_isgraduate(bool value) {
  
  _impl_.isgraduate_ = value;
}
inline void PlayerMentorShipInfo::set_isgraduate(bool value) {
  _internal_set_isgraduate(value);
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.IsGraduate)
}

// map<uint32, .msg.CSDTTaskItem> Tasks = 8;
inline int PlayerMentorShipInfo::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int PlayerMentorShipInfo::tasks_size() const {
  return _internal_tasks_size();
}
inline void PlayerMentorShipInfo::clear_tasks() {
  _impl_.tasks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
PlayerMentorShipInfo::_internal_tasks() const {
  return _impl_.tasks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >&
PlayerMentorShipInfo::tasks() const {
  // @@protoc_insertion_point(field_map:msg.PlayerMentorShipInfo.Tasks)
  return _internal_tasks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
PlayerMentorShipInfo::_internal_mutable_tasks() {
  return _impl_.tasks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >*
PlayerMentorShipInfo::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_map:msg.PlayerMentorShipInfo.Tasks)
  return _internal_mutable_tasks();
}

// uint32 InviteTimes = 9;
inline void PlayerMentorShipInfo::clear_invitetimes() {
  _impl_.invitetimes_ = 0u;
}
inline uint32_t PlayerMentorShipInfo::_internal_invitetimes() const {
  return _impl_.invitetimes_;
}
inline uint32_t PlayerMentorShipInfo::invitetimes() const {
  // @@protoc_insertion_point(field_get:msg.PlayerMentorShipInfo.InviteTimes)
  return _internal_invitetimes();
}
inline void PlayerMentorShipInfo::_internal_set_invitetimes(uint32_t value) {
  
  _impl_.invitetimes_ = value;
}
inline void PlayerMentorShipInfo::set_invitetimes(uint32_t value) {
  _internal_set_invitetimes(value);
  // @@protoc_insertion_point(field_set:msg.PlayerMentorShipInfo.InviteTimes)
}

// -------------------------------------------------------------------

// CSDTMentorRecommendPlayer

// string PlayerId = 1;
inline void CSDTMentorRecommendPlayer::clear_playerid() {
  _impl_.playerid_.ClearToEmpty();
}
inline const std::string& CSDTMentorRecommendPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMentorRecommendPlayer.PlayerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSDTMentorRecommendPlayer::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSDTMentorRecommendPlayer.PlayerId)
}
inline std::string* CSDTMentorRecommendPlayer::mutable_playerid() {
  std::string* _s = _internal_mutable_playerid();
  // @@protoc_insertion_point(field_mutable:msg.CSDTMentorRecommendPlayer.PlayerId)
  return _s;
}
inline const std::string& CSDTMentorRecommendPlayer::_internal_playerid() const {
  return _impl_.playerid_.Get();
}
inline void CSDTMentorRecommendPlayer::_internal_set_playerid(const std::string& value) {
  
  _impl_.playerid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSDTMentorRecommendPlayer::_internal_mutable_playerid() {
  
  return _impl_.playerid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSDTMentorRecommendPlayer::release_playerid() {
  // @@protoc_insertion_point(field_release:msg.CSDTMentorRecommendPlayer.PlayerId)
  return _impl_.playerid_.Release();
}
inline void CSDTMentorRecommendPlayer::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  _impl_.playerid_.SetAllocated(playerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerid_.IsDefault()) {
    _impl_.playerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSDTMentorRecommendPlayer.PlayerId)
}

// -------------------------------------------------------------------

// PFDTTaskDetail

// .msg.CONDTYPE CondType = 1;
inline void PFDTTaskDetail::clear_condtype() {
  _impl_.condtype_ = 0;
}
inline ::msg::CONDTYPE PFDTTaskDetail::_internal_condtype() const {
  return static_cast< ::msg::CONDTYPE >(_impl_.condtype_);
}
inline ::msg::CONDTYPE PFDTTaskDetail::condtype() const {
  // @@protoc_insertion_point(field_get:msg.PFDTTaskDetail.CondType)
  return _internal_condtype();
}
inline void PFDTTaskDetail::_internal_set_condtype(::msg::CONDTYPE value) {
  
  _impl_.condtype_ = value;
}
inline void PFDTTaskDetail::set_condtype(::msg::CONDTYPE value) {
  _internal_set_condtype(value);
  // @@protoc_insertion_point(field_set:msg.PFDTTaskDetail.CondType)
}

// repeated int32 Para = 2;
inline int PFDTTaskDetail::_internal_para_size() const {
  return _impl_.para_.size();
}
inline int PFDTTaskDetail::para_size() const {
  return _internal_para_size();
}
inline void PFDTTaskDetail::clear_para() {
  _impl_.para_.Clear();
}
inline int32_t PFDTTaskDetail::_internal_para(int index) const {
  return _impl_.para_.Get(index);
}
inline int32_t PFDTTaskDetail::para(int index) const {
  // @@protoc_insertion_point(field_get:msg.PFDTTaskDetail.Para)
  return _internal_para(index);
}
inline void PFDTTaskDetail::set_para(int index, int32_t value) {
  _impl_.para_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PFDTTaskDetail.Para)
}
inline void PFDTTaskDetail::_internal_add_para(int32_t value) {
  _impl_.para_.Add(value);
}
inline void PFDTTaskDetail::add_para(int32_t value) {
  _internal_add_para(value);
  // @@protoc_insertion_point(field_add:msg.PFDTTaskDetail.Para)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PFDTTaskDetail::_internal_para() const {
  return _impl_.para_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PFDTTaskDetail::para() const {
  // @@protoc_insertion_point(field_list:msg.PFDTTaskDetail.Para)
  return _internal_para();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PFDTTaskDetail::_internal_mutable_para() {
  return &_impl_.para_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PFDTTaskDetail::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:msg.PFDTTaskDetail.Para)
  return _internal_mutable_para();
}

// string Mode = 3;
inline void PFDTTaskDetail::clear_mode() {
  _impl_.mode_.ClearToEmpty();
}
inline const std::string& PFDTTaskDetail::mode() const {
  // @@protoc_insertion_point(field_get:msg.PFDTTaskDetail.Mode)
  return _internal_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PFDTTaskDetail::set_mode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PFDTTaskDetail.Mode)
}
inline std::string* PFDTTaskDetail::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:msg.PFDTTaskDetail.Mode)
  return _s;
}
inline const std::string& PFDTTaskDetail::_internal_mode() const {
  return _impl_.mode_.Get();
}
inline void PFDTTaskDetail::_internal_set_mode(const std::string& value) {
  
  _impl_.mode_.Set(value, GetArenaForAllocation());
}
inline std::string* PFDTTaskDetail::_internal_mutable_mode() {
  
  return _impl_.mode_.Mutable(GetArenaForAllocation());
}
inline std::string* PFDTTaskDetail::release_mode() {
  // @@protoc_insertion_point(field_release:msg.PFDTTaskDetail.Mode)
  return _impl_.mode_.Release();
}
inline void PFDTTaskDetail::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  _impl_.mode_.SetAllocated(mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mode_.IsDefault()) {
    _impl_.mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PFDTTaskDetail.Mode)
}

// -------------------------------------------------------------------

// CSDTMentorInfo

// .msg.MENTORLEVEL Level = 1;
inline void CSDTMentorInfo::clear_level() {
  _impl_.level_ = 0;
}
inline ::msg::MENTORLEVEL CSDTMentorInfo::_internal_level() const {
  return static_cast< ::msg::MENTORLEVEL >(_impl_.level_);
}
inline ::msg::MENTORLEVEL CSDTMentorInfo::level() const {
  // @@protoc_insertion_point(field_get:msg.CSDTMentorInfo.Level)
  return _internal_level();
}
inline void CSDTMentorInfo::_internal_set_level(::msg::MENTORLEVEL value) {
  
  _impl_.level_ = value;
}
inline void CSDTMentorInfo::set_level(::msg::MENTORLEVEL value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.CSDTMentorInfo.Level)
}

// -------------------------------------------------------------------

// OBPassThroughData

// .msg.KERNELJSONTYPE Type = 1;
inline void OBPassThroughData::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::KERNELJSONTYPE OBPassThroughData::_internal_type() const {
  return static_cast< ::msg::KERNELJSONTYPE >(_impl_.type_);
}
inline ::msg::KERNELJSONTYPE OBPassThroughData::type() const {
  // @@protoc_insertion_point(field_get:msg.OBPassThroughData.Type)
  return _internal_type();
}
inline void OBPassThroughData::_internal_set_type(::msg::KERNELJSONTYPE value) {
  
  _impl_.type_ = value;
}
inline void OBPassThroughData::set_type(::msg::KERNELJSONTYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.OBPassThroughData.Type)
}

// uint32 Round = 2;
inline void OBPassThroughData::clear_round() {
  _impl_.round_ = 0u;
}
inline uint32_t OBPassThroughData::_internal_round() const {
  return _impl_.round_;
}
inline uint32_t OBPassThroughData::round() const {
  // @@protoc_insertion_point(field_get:msg.OBPassThroughData.Round)
  return _internal_round();
}
inline void OBPassThroughData::_internal_set_round(uint32_t value) {
  
  _impl_.round_ = value;
}
inline void OBPassThroughData::set_round(uint32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.OBPassThroughData.Round)
}

// string PvPPlayerId = 3;
inline void OBPassThroughData::clear_pvpplayerid() {
  _impl_.pvpplayerid_.ClearToEmpty();
}
inline const std::string& OBPassThroughData::pvpplayerid() const {
  // @@protoc_insertion_point(field_get:msg.OBPassThroughData.PvPPlayerId)
  return _internal_pvpplayerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OBPassThroughData::set_pvpplayerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pvpplayerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.OBPassThroughData.PvPPlayerId)
}
inline std::string* OBPassThroughData::mutable_pvpplayerid() {
  std::string* _s = _internal_mutable_pvpplayerid();
  // @@protoc_insertion_point(field_mutable:msg.OBPassThroughData.PvPPlayerId)
  return _s;
}
inline const std::string& OBPassThroughData::_internal_pvpplayerid() const {
  return _impl_.pvpplayerid_.Get();
}
inline void OBPassThroughData::_internal_set_pvpplayerid(const std::string& value) {
  
  _impl_.pvpplayerid_.Set(value, GetArenaForAllocation());
}
inline std::string* OBPassThroughData::_internal_mutable_pvpplayerid() {
  
  return _impl_.pvpplayerid_.Mutable(GetArenaForAllocation());
}
inline std::string* OBPassThroughData::release_pvpplayerid() {
  // @@protoc_insertion_point(field_release:msg.OBPassThroughData.PvPPlayerId)
  return _impl_.pvpplayerid_.Release();
}
inline void OBPassThroughData::set_allocated_pvpplayerid(std::string* pvpplayerid) {
  if (pvpplayerid != nullptr) {
    
  } else {
    
  }
  _impl_.pvpplayerid_.SetAllocated(pvpplayerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pvpplayerid_.IsDefault()) {
    _impl_.pvpplayerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.OBPassThroughData.PvPPlayerId)
}

// string ObPlayerId = 4;
inline void OBPassThroughData::clear_obplayerid() {
  _impl_.obplayerid_.ClearToEmpty();
}
inline const std::string& OBPassThroughData::obplayerid() const {
  // @@protoc_insertion_point(field_get:msg.OBPassThroughData.ObPlayerId)
  return _internal_obplayerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OBPassThroughData::set_obplayerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.obplayerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.OBPassThroughData.ObPlayerId)
}
inline std::string* OBPassThroughData::mutable_obplayerid() {
  std::string* _s = _internal_mutable_obplayerid();
  // @@protoc_insertion_point(field_mutable:msg.OBPassThroughData.ObPlayerId)
  return _s;
}
inline const std::string& OBPassThroughData::_internal_obplayerid() const {
  return _impl_.obplayerid_.Get();
}
inline void OBPassThroughData::_internal_set_obplayerid(const std::string& value) {
  
  _impl_.obplayerid_.Set(value, GetArenaForAllocation());
}
inline std::string* OBPassThroughData::_internal_mutable_obplayerid() {
  
  return _impl_.obplayerid_.Mutable(GetArenaForAllocation());
}
inline std::string* OBPassThroughData::release_obplayerid() {
  // @@protoc_insertion_point(field_release:msg.OBPassThroughData.ObPlayerId)
  return _impl_.obplayerid_.Release();
}
inline void OBPassThroughData::set_allocated_obplayerid(std::string* obplayerid) {
  if (obplayerid != nullptr) {
    
  } else {
    
  }
  _impl_.obplayerid_.SetAllocated(obplayerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obplayerid_.IsDefault()) {
    _impl_.obplayerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.OBPassThroughData.ObPlayerId)
}

// -------------------------------------------------------------------

// HistoryMaxCupMmr

// .msg.PVPMODE Mode = 1;
inline void HistoryMaxCupMmr::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::msg::PVPMODE HistoryMaxCupMmr::_internal_mode() const {
  return static_cast< ::msg::PVPMODE >(_impl_.mode_);
}
inline ::msg::PVPMODE HistoryMaxCupMmr::mode() const {
  // @@protoc_insertion_point(field_get:msg.HistoryMaxCupMmr.Mode)
  return _internal_mode();
}
inline void HistoryMaxCupMmr::_internal_set_mode(::msg::PVPMODE value) {
  
  _impl_.mode_ = value;
}
inline void HistoryMaxCupMmr::set_mode(::msg::PVPMODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:msg.HistoryMaxCupMmr.Mode)
}

// uint32 Mmr = 2;
inline void HistoryMaxCupMmr::clear_mmr() {
  _impl_.mmr_ = 0u;
}
inline uint32_t HistoryMaxCupMmr::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t HistoryMaxCupMmr::mmr() const {
  // @@protoc_insertion_point(field_get:msg.HistoryMaxCupMmr.Mmr)
  return _internal_mmr();
}
inline void HistoryMaxCupMmr::_internal_set_mmr(uint32_t value) {
  
  _impl_.mmr_ = value;
}
inline void HistoryMaxCupMmr::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:msg.HistoryMaxCupMmr.Mmr)
}

// uint32 Period = 3;
inline void HistoryMaxCupMmr::clear_period() {
  _impl_.period_ = 0u;
}
inline uint32_t HistoryMaxCupMmr::_internal_period() const {
  return _impl_.period_;
}
inline uint32_t HistoryMaxCupMmr::period() const {
  // @@protoc_insertion_point(field_get:msg.HistoryMaxCupMmr.Period)
  return _internal_period();
}
inline void HistoryMaxCupMmr::_internal_set_period(uint32_t value) {
  
  _impl_.period_ = value;
}
inline void HistoryMaxCupMmr::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:msg.HistoryMaxCupMmr.Period)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CSNtfPvpChat

// string Id = 1;
inline void CSNtfPvpChat::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CSNtfPvpChat::id() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpChat::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Id)
}
inline std::string* CSNtfPvpChat::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChat.Id)
  return _s;
}
inline const std::string& CSNtfPvpChat::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CSNtfPvpChat::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::release_id() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpChat.Id)
  return _impl_.id_.Release();
}
inline void CSNtfPvpChat::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpChat.Id)
}

// string Content = 2;
inline void CSNtfPvpChat::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CSNtfPvpChat::content() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpChat::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Content)
}
inline std::string* CSNtfPvpChat::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChat.Content)
  return _s;
}
inline const std::string& CSNtfPvpChat::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CSNtfPvpChat::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::release_content() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpChat.Content)
  return _impl_.content_.Release();
}
inline void CSNtfPvpChat::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpChat.Content)
}

// uint32 Emotion = 3;
inline void CSNtfPvpChat::clear_emotion() {
  _impl_.emotion_ = 0u;
}
inline uint32_t CSNtfPvpChat::_internal_emotion() const {
  return _impl_.emotion_;
}
inline uint32_t CSNtfPvpChat::emotion() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Emotion)
  return _internal_emotion();
}
inline void CSNtfPvpChat::_internal_set_emotion(uint32_t value) {
  
  _impl_.emotion_ = value;
}
inline void CSNtfPvpChat::set_emotion(uint32_t value) {
  _internal_set_emotion(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Emotion)
}

// uint32 Level = 4;
inline void CSNtfPvpChat::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t CSNtfPvpChat::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CSNtfPvpChat::level() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Level)
  return _internal_level();
}
inline void CSNtfPvpChat::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void CSNtfPvpChat::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Level)
}

// .msg.CHATTYPE ChatType = 5;
inline void CSNtfPvpChat::clear_chattype() {
  _impl_.chattype_ = 0;
}
inline ::msg::CHATTYPE CSNtfPvpChat::_internal_chattype() const {
  return static_cast< ::msg::CHATTYPE >(_impl_.chattype_);
}
inline ::msg::CHATTYPE CSNtfPvpChat::chattype() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.ChatType)
  return _internal_chattype();
}
inline void CSNtfPvpChat::_internal_set_chattype(::msg::CHATTYPE value) {
  
  _impl_.chattype_ = value;
}
inline void CSNtfPvpChat::set_chattype(::msg::CHATTYPE value) {
  _internal_set_chattype(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.ChatType)
}

// uint32 Index = 6;
inline void CSNtfPvpChat::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t CSNtfPvpChat::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t CSNtfPvpChat::index() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Index)
  return _internal_index();
}
inline void CSNtfPvpChat::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void CSNtfPvpChat::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Index)
}

// int32 QuickChat = 7;
inline void CSNtfPvpChat::clear_quickchat() {
  _impl_.quickchat_ = 0;
}
inline int32_t CSNtfPvpChat::_internal_quickchat() const {
  return _impl_.quickchat_;
}
inline int32_t CSNtfPvpChat::quickchat() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.QuickChat)
  return _internal_quickchat();
}
inline void CSNtfPvpChat::_internal_set_quickchat(int32_t value) {
  
  _impl_.quickchat_ = value;
}
inline void CSNtfPvpChat::set_quickchat(int32_t value) {
  _internal_set_quickchat(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.QuickChat)
}

// string UserName = 8;
inline void CSNtfPvpChat::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& CSNtfPvpChat::username() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpChat::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.UserName)
}
inline std::string* CSNtfPvpChat::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChat.UserName)
  return _s;
}
inline const std::string& CSNtfPvpChat::_internal_username() const {
  return _impl_.username_.Get();
}
inline void CSNtfPvpChat::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::release_username() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpChat.UserName)
  return _impl_.username_.Release();
}
inline void CSNtfPvpChat::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpChat.UserName)
}

// uint32 HeadPic = 9;
inline void CSNtfPvpChat::clear_headpic() {
  _impl_.headpic_ = 0u;
}
inline uint32_t CSNtfPvpChat::_internal_headpic() const {
  return _impl_.headpic_;
}
inline uint32_t CSNtfPvpChat::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.HeadPic)
  return _internal_headpic();
}
inline void CSNtfPvpChat::_internal_set_headpic(uint32_t value) {
  
  _impl_.headpic_ = value;
}
inline void CSNtfPvpChat::set_headpic(uint32_t value) {
  _internal_set_headpic(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.HeadPic)
}

// string Country = 10;
inline void CSNtfPvpChat::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& CSNtfPvpChat::country() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpChat::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Country)
}
inline std::string* CSNtfPvpChat::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChat.Country)
  return _s;
}
inline const std::string& CSNtfPvpChat::_internal_country() const {
  return _impl_.country_.Get();
}
inline void CSNtfPvpChat::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::release_country() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpChat.Country)
  return _impl_.country_.Release();
}
inline void CSNtfPvpChat::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpChat.Country)
}

// map<uint32, uint32> ShowItems = 11;
inline int CSNtfPvpChat::_internal_showitems_size() const {
  return _impl_.showitems_.size();
}
inline int CSNtfPvpChat::showitems_size() const {
  return _internal_showitems_size();
}
inline void CSNtfPvpChat::clear_showitems() {
  _impl_.showitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSNtfPvpChat::_internal_showitems() const {
  return _impl_.showitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
CSNtfPvpChat::showitems() const {
  // @@protoc_insertion_point(field_map:msg.CSNtfPvpChat.ShowItems)
  return _internal_showitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSNtfPvpChat::_internal_mutable_showitems() {
  return _impl_.showitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
CSNtfPvpChat::mutable_showitems() {
  // @@protoc_insertion_point(field_mutable_map:msg.CSNtfPvpChat.ShowItems)
  return _internal_mutable_showitems();
}

// bool IsWatcher = 12;
inline void CSNtfPvpChat::clear_iswatcher() {
  _impl_.iswatcher_ = false;
}
inline bool CSNtfPvpChat::_internal_iswatcher() const {
  return _impl_.iswatcher_;
}
inline bool CSNtfPvpChat::iswatcher() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.IsWatcher)
  return _internal_iswatcher();
}
inline void CSNtfPvpChat::_internal_set_iswatcher(bool value) {
  
  _impl_.iswatcher_ = value;
}
inline void CSNtfPvpChat::set_iswatcher(bool value) {
  _internal_set_iswatcher(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.IsWatcher)
}

// uint32 Province = 13;
inline void CSNtfPvpChat::clear_province() {
  _impl_.province_ = 0u;
}
inline uint32_t CSNtfPvpChat::_internal_province() const {
  return _impl_.province_;
}
inline uint32_t CSNtfPvpChat::province() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Province)
  return _internal_province();
}
inline void CSNtfPvpChat::_internal_set_province(uint32_t value) {
  
  _impl_.province_ = value;
}
inline void CSNtfPvpChat::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Province)
}

// int64 Timestamp = 14;
inline void CSNtfPvpChat::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t CSNtfPvpChat::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t CSNtfPvpChat::timestamp() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Timestamp)
  return _internal_timestamp();
}
inline void CSNtfPvpChat::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void CSNtfPvpChat::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Timestamp)
}

// .msg.PLATFORMTYPE Platform = 15;
inline void CSNtfPvpChat::clear_platform() {
  _impl_.platform_ = 0;
}
inline ::msg::PLATFORMTYPE CSNtfPvpChat::_internal_platform() const {
  return static_cast< ::msg::PLATFORMTYPE >(_impl_.platform_);
}
inline ::msg::PLATFORMTYPE CSNtfPvpChat::platform() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.Platform)
  return _internal_platform();
}
inline void CSNtfPvpChat::_internal_set_platform(::msg::PLATFORMTYPE value) {
  
  _impl_.platform_ = value;
}
inline void CSNtfPvpChat::set_platform(::msg::PLATFORMTYPE value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.Platform)
}

// repeated uint32 PassportTypeIds = 16;
inline int CSNtfPvpChat::_internal_passporttypeids_size() const {
  return _impl_.passporttypeids_.size();
}
inline int CSNtfPvpChat::passporttypeids_size() const {
  return _internal_passporttypeids_size();
}
inline void CSNtfPvpChat::clear_passporttypeids() {
  _impl_.passporttypeids_.Clear();
}
inline uint32_t CSNtfPvpChat::_internal_passporttypeids(int index) const {
  return _impl_.passporttypeids_.Get(index);
}
inline uint32_t CSNtfPvpChat::passporttypeids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.PassportTypeIds)
  return _internal_passporttypeids(index);
}
inline void CSNtfPvpChat::set_passporttypeids(int index, uint32_t value) {
  _impl_.passporttypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.PassportTypeIds)
}
inline void CSNtfPvpChat::_internal_add_passporttypeids(uint32_t value) {
  _impl_.passporttypeids_.Add(value);
}
inline void CSNtfPvpChat::add_passporttypeids(uint32_t value) {
  _internal_add_passporttypeids(value);
  // @@protoc_insertion_point(field_add:msg.CSNtfPvpChat.PassportTypeIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSNtfPvpChat::_internal_passporttypeids() const {
  return _impl_.passporttypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSNtfPvpChat::passporttypeids() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfPvpChat.PassportTypeIds)
  return _internal_passporttypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSNtfPvpChat::_internal_mutable_passporttypeids() {
  return &_impl_.passporttypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSNtfPvpChat::mutable_passporttypeids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfPvpChat.PassportTypeIds)
  return _internal_mutable_passporttypeids();
}

// .msg.CHANELTYPE ChannelType = 17;
inline void CSNtfPvpChat::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::msg::CHANELTYPE CSNtfPvpChat::_internal_channeltype() const {
  return static_cast< ::msg::CHANELTYPE >(_impl_.channeltype_);
}
inline ::msg::CHANELTYPE CSNtfPvpChat::channeltype() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.ChannelType)
  return _internal_channeltype();
}
inline void CSNtfPvpChat::_internal_set_channeltype(::msg::CHANELTYPE value) {
  
  _impl_.channeltype_ = value;
}
inline void CSNtfPvpChat::set_channeltype(::msg::CHANELTYPE value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.ChannelType)
}

// string ChannelUsrId = 18;
inline void CSNtfPvpChat::clear_channelusrid() {
  _impl_.channelusrid_.ClearToEmpty();
}
inline const std::string& CSNtfPvpChat::channelusrid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.ChannelUsrId)
  return _internal_channelusrid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpChat::set_channelusrid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.channelusrid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.ChannelUsrId)
}
inline std::string* CSNtfPvpChat::mutable_channelusrid() {
  std::string* _s = _internal_mutable_channelusrid();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChat.ChannelUsrId)
  return _s;
}
inline const std::string& CSNtfPvpChat::_internal_channelusrid() const {
  return _impl_.channelusrid_.Get();
}
inline void CSNtfPvpChat::_internal_set_channelusrid(const std::string& value) {
  
  _impl_.channelusrid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::_internal_mutable_channelusrid() {
  
  return _impl_.channelusrid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::release_channelusrid() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpChat.ChannelUsrId)
  return _impl_.channelusrid_.Release();
}
inline void CSNtfPvpChat::set_allocated_channelusrid(std::string* channelusrid) {
  if (channelusrid != nullptr) {
    
  } else {
    
  }
  _impl_.channelusrid_.SetAllocated(channelusrid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channelusrid_.IsDefault()) {
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpChat.ChannelUsrId)
}

// bool PS4Only = 19;
inline void CSNtfPvpChat::clear_ps4only() {
  _impl_.ps4only_ = false;
}
inline bool CSNtfPvpChat::_internal_ps4only() const {
  return _impl_.ps4only_;
}
inline bool CSNtfPvpChat::ps4only() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.PS4Only)
  return _internal_ps4only();
}
inline void CSNtfPvpChat::_internal_set_ps4only(bool value) {
  
  _impl_.ps4only_ = value;
}
inline void CSNtfPvpChat::set_ps4only(bool value) {
  _internal_set_ps4only(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.PS4Only)
}

// .msg.UserRestrictType RestrictType = 20;
inline void CSNtfPvpChat::clear_restricttype() {
  _impl_.restricttype_ = 0;
}
inline ::msg::UserRestrictType CSNtfPvpChat::_internal_restricttype() const {
  return static_cast< ::msg::UserRestrictType >(_impl_.restricttype_);
}
inline ::msg::UserRestrictType CSNtfPvpChat::restricttype() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.RestrictType)
  return _internal_restricttype();
}
inline void CSNtfPvpChat::_internal_set_restricttype(::msg::UserRestrictType value) {
  
  _impl_.restricttype_ = value;
}
inline void CSNtfPvpChat::set_restricttype(::msg::UserRestrictType value) {
  _internal_set_restricttype(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.RestrictType)
}

// string GuildName = 21;
inline void CSNtfPvpChat::clear_guildname() {
  _impl_.guildname_.ClearToEmpty();
}
inline const std::string& CSNtfPvpChat::guildname() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.GuildName)
  return _internal_guildname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpChat::set_guildname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guildname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.GuildName)
}
inline std::string* CSNtfPvpChat::mutable_guildname() {
  std::string* _s = _internal_mutable_guildname();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChat.GuildName)
  return _s;
}
inline const std::string& CSNtfPvpChat::_internal_guildname() const {
  return _impl_.guildname_.Get();
}
inline void CSNtfPvpChat::_internal_set_guildname(const std::string& value) {
  
  _impl_.guildname_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::_internal_mutable_guildname() {
  
  return _impl_.guildname_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpChat::release_guildname() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpChat.GuildName)
  return _impl_.guildname_.Release();
}
inline void CSNtfPvpChat::set_allocated_guildname(std::string* guildname) {
  if (guildname != nullptr) {
    
  } else {
    
  }
  _impl_.guildname_.SetAllocated(guildname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guildname_.IsDefault()) {
    _impl_.guildname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpChat.GuildName)
}

// int32 GuildSign = 22;
inline void CSNtfPvpChat::clear_guildsign() {
  _impl_.guildsign_ = 0;
}
inline int32_t CSNtfPvpChat::_internal_guildsign() const {
  return _impl_.guildsign_;
}
inline int32_t CSNtfPvpChat::guildsign() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.GuildSign)
  return _internal_guildsign();
}
inline void CSNtfPvpChat::_internal_set_guildsign(int32_t value) {
  
  _impl_.guildsign_ = value;
}
inline void CSNtfPvpChat::set_guildsign(int32_t value) {
  _internal_set_guildsign(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.GuildSign)
}

// .msg.CHATSOURCETYPE SourceType = 23;
inline void CSNtfPvpChat::clear_sourcetype() {
  _impl_.sourcetype_ = 0;
}
inline ::msg::CHATSOURCETYPE CSNtfPvpChat::_internal_sourcetype() const {
  return static_cast< ::msg::CHATSOURCETYPE >(_impl_.sourcetype_);
}
inline ::msg::CHATSOURCETYPE CSNtfPvpChat::sourcetype() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.SourceType)
  return _internal_sourcetype();
}
inline void CSNtfPvpChat::_internal_set_sourcetype(::msg::CHATSOURCETYPE value) {
  
  _impl_.sourcetype_ = value;
}
inline void CSNtfPvpChat::set_sourcetype(::msg::CHATSOURCETYPE value) {
  _internal_set_sourcetype(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.SourceType)
}

// .msg.EXCHANGESTATE ExchangeState = 24;
inline void CSNtfPvpChat::clear_exchangestate() {
  _impl_.exchangestate_ = 0;
}
inline ::msg::EXCHANGESTATE CSNtfPvpChat::_internal_exchangestate() const {
  return static_cast< ::msg::EXCHANGESTATE >(_impl_.exchangestate_);
}
inline ::msg::EXCHANGESTATE CSNtfPvpChat::exchangestate() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChat.ExchangeState)
  return _internal_exchangestate();
}
inline void CSNtfPvpChat::_internal_set_exchangestate(::msg::EXCHANGESTATE value) {
  
  _impl_.exchangestate_ = value;
}
inline void CSNtfPvpChat::set_exchangestate(::msg::EXCHANGESTATE value) {
  _internal_set_exchangestate(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChat.ExchangeState)
}

// -------------------------------------------------------------------

// PlayerObServerInfo

// uint64 PvpId = 1;
inline void PlayerObServerInfo::clear_pvpid() {
  _impl_.pvpid_ = uint64_t{0u};
}
inline uint64_t PlayerObServerInfo::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline uint64_t PlayerObServerInfo::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerObServerInfo.PvpId)
  return _internal_pvpid();
}
inline void PlayerObServerInfo::_internal_set_pvpid(uint64_t value) {
  
  _impl_.pvpid_ = value;
}
inline void PlayerObServerInfo::set_pvpid(uint64_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.PlayerObServerInfo.PvpId)
}

// uint32 ObSvrId = 2;
inline void PlayerObServerInfo::clear_obsvrid() {
  _impl_.obsvrid_ = 0u;
}
inline uint32_t PlayerObServerInfo::_internal_obsvrid() const {
  return _impl_.obsvrid_;
}
inline uint32_t PlayerObServerInfo::obsvrid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerObServerInfo.ObSvrId)
  return _internal_obsvrid();
}
inline void PlayerObServerInfo::_internal_set_obsvrid(uint32_t value) {
  
  _impl_.obsvrid_ = value;
}
inline void PlayerObServerInfo::set_obsvrid(uint32_t value) {
  _internal_set_obsvrid(value);
  // @@protoc_insertion_point(field_set:msg.PlayerObServerInfo.ObSvrId)
}

// string ObplayerId = 3;
inline void PlayerObServerInfo::clear_obplayerid() {
  _impl_.obplayerid_.ClearToEmpty();
}
inline const std::string& PlayerObServerInfo::obplayerid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerObServerInfo.ObplayerId)
  return _internal_obplayerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerObServerInfo::set_obplayerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.obplayerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerObServerInfo.ObplayerId)
}
inline std::string* PlayerObServerInfo::mutable_obplayerid() {
  std::string* _s = _internal_mutable_obplayerid();
  // @@protoc_insertion_point(field_mutable:msg.PlayerObServerInfo.ObplayerId)
  return _s;
}
inline const std::string& PlayerObServerInfo::_internal_obplayerid() const {
  return _impl_.obplayerid_.Get();
}
inline void PlayerObServerInfo::_internal_set_obplayerid(const std::string& value) {
  
  _impl_.obplayerid_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerObServerInfo::_internal_mutable_obplayerid() {
  
  return _impl_.obplayerid_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerObServerInfo::release_obplayerid() {
  // @@protoc_insertion_point(field_release:msg.PlayerObServerInfo.ObplayerId)
  return _impl_.obplayerid_.Release();
}
inline void PlayerObServerInfo::set_allocated_obplayerid(std::string* obplayerid) {
  if (obplayerid != nullptr) {
    
  } else {
    
  }
  _impl_.obplayerid_.SetAllocated(obplayerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obplayerid_.IsDefault()) {
    _impl_.obplayerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerObServerInfo.ObplayerId)
}

// uint32 PvpSvrId = 4;
inline void PlayerObServerInfo::clear_pvpsvrid() {
  _impl_.pvpsvrid_ = 0u;
}
inline uint32_t PlayerObServerInfo::_internal_pvpsvrid() const {
  return _impl_.pvpsvrid_;
}
inline uint32_t PlayerObServerInfo::pvpsvrid() const {
  // @@protoc_insertion_point(field_get:msg.PlayerObServerInfo.PvpSvrId)
  return _internal_pvpsvrid();
}
inline void PlayerObServerInfo::_internal_set_pvpsvrid(uint32_t value) {
  
  _impl_.pvpsvrid_ = value;
}
inline void PlayerObServerInfo::set_pvpsvrid(uint32_t value) {
  _internal_set_pvpsvrid(value);
  // @@protoc_insertion_point(field_set:msg.PlayerObServerInfo.PvpSvrId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::REASON> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::REASON>() {
  return ::msg::REASON_descriptor();
}
template <> struct is_proto_enum< ::msg::SOURCE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::SOURCE>() {
  return ::msg::SOURCE_descriptor();
}
template <> struct is_proto_enum< ::msg::PLAYERSTATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PLAYERSTATUS>() {
  return ::msg::PLAYERSTATUS_descriptor();
}
template <> struct is_proto_enum< ::msg::FRIENDINVISIBLE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::FRIENDINVISIBLE>() {
  return ::msg::FRIENDINVISIBLE_descriptor();
}
template <> struct is_proto_enum< ::msg::PLATFORMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PLATFORMTYPE>() {
  return ::msg::PLATFORMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::MAGNETISMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MAGNETISMTYPE>() {
  return ::msg::MAGNETISMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PVPEND_REASON> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVPEND_REASON>() {
  return ::msg::PVPEND_REASON_descriptor();
}
template <> struct is_proto_enum< ::msg::CHANELTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHANELTYPE>() {
  return ::msg::CHANELTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::NETTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NETTYPE>() {
  return ::msg::NETTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::LOGINTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::LOGINTYPE>() {
  return ::msg::LOGINTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::LAUNCHTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::LAUNCHTYPE>() {
  return ::msg::LAUNCHTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::CHANNELVIPTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHANNELVIPTYPE>() {
  return ::msg::CHANNELVIPTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::CHARGERESULT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHARGERESULT_TYPE>() {
  return ::msg::CHARGERESULT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::CHEST_OPEN_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHEST_OPEN_TYPE>() {
  return ::msg::CHEST_OPEN_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ITEMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ITEMTYPE>() {
  return ::msg::ITEMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ITEMQUALITY> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ITEMQUALITY>() {
  return ::msg::ITEMQUALITY_descriptor();
}
template <> struct is_proto_enum< ::msg::ITEMSHAREBG> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ITEMSHAREBG>() {
  return ::msg::ITEMSHAREBG_descriptor();
}
template <> struct is_proto_enum< ::msg::ITEMACCUMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ITEMACCUMTYPE>() {
  return ::msg::ITEMACCUMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ITEMSELLSTATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ITEMSELLSTATUS>() {
  return ::msg::ITEMSELLSTATUS_descriptor();
}
template <> struct is_proto_enum< ::msg::PVPMODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVPMODE>() {
  return ::msg::PVPMODE_descriptor();
}
template <> struct is_proto_enum< ::msg::TEAMGROUP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TEAMGROUP>() {
  return ::msg::TEAMGROUP_descriptor();
}
template <> struct is_proto_enum< ::msg::TEAMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TEAMTYPE>() {
  return ::msg::TEAMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::TEAMGROUPBEGINIDX> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TEAMGROUPBEGINIDX>() {
  return ::msg::TEAMGROUPBEGINIDX_descriptor();
}
template <> struct is_proto_enum< ::msg::TEAMOP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TEAMOP>() {
  return ::msg::TEAMOP_descriptor();
}
template <> struct is_proto_enum< ::msg::OFFLINE_INVITE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::OFFLINE_INVITE>() {
  return ::msg::OFFLINE_INVITE_descriptor();
}
template <> struct is_proto_enum< ::msg::WINTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::WINTYPE>() {
  return ::msg::WINTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::RANKTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::RANKTYPE>() {
  return ::msg::RANKTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::FROZEN_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::FROZEN_TYPE>() {
  return ::msg::FROZEN_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::NOTICETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NOTICETYPE>() {
  return ::msg::NOTICETYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::NOTICETAP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NOTICETAP>() {
  return ::msg::NOTICETAP_descriptor();
}
template <> struct is_proto_enum< ::msg::PICNOTICEJUMPTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PICNOTICEJUMPTYPE>() {
  return ::msg::PICNOTICEJUMPTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ADSTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ADSTYPE>() {
  return ::msg::ADSTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ADSPAYTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ADSPAYTYPE>() {
  return ::msg::ADSPAYTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PASSPORTTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PASSPORTTYPE>() {
  return ::msg::PASSPORTTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::RELOADTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::RELOADTYPE>() {
  return ::msg::RELOADTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::TRANSACTION> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TRANSACTION>() {
  return ::msg::TRANSACTION_descriptor();
}
template <> struct is_proto_enum< ::msg::CONDTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CONDTYPE>() {
  return ::msg::CONDTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PASSPORTTASKTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PASSPORTTASKTYPE>() {
  return ::msg::PASSPORTTASKTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::SHOPTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::SHOPTYPE>() {
  return ::msg::SHOPTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PAYRESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PAYRESULT>() {
  return ::msg::PAYRESULT_descriptor();
}
template <> struct is_proto_enum< ::msg::CURRENCYTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CURRENCYTYPE>() {
  return ::msg::CURRENCYTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::NOTICESHOWTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NOTICESHOWTYPE>() {
  return ::msg::NOTICESHOWTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::NOTICECONTENTTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NOTICECONTENTTYPE>() {
  return ::msg::NOTICECONTENTTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ACTIVITYTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ACTIVITYTYPE>() {
  return ::msg::ACTIVITYTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::HISTORYPVPSHOWPERMISSION> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::HISTORYPVPSHOWPERMISSION>() {
  return ::msg::HISTORYPVPSHOWPERMISSION_descriptor();
}
template <> struct is_proto_enum< ::msg::CHATTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHATTYPE>() {
  return ::msg::CHATTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::CHATSOURCETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHATSOURCETYPE>() {
  return ::msg::CHATSOURCETYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::SWITCHTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::SWITCHTYPE>() {
  return ::msg::SWITCHTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::MALLTABTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MALLTABTYPE>() {
  return ::msg::MALLTABTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::SKIPTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::SKIPTYPE>() {
  return ::msg::SKIPTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::JOINTEAMTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::JOINTEAMTYPE>() {
  return ::msg::JOINTEAMTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::BUFFACTSTATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::BUFFACTSTATUS>() {
  return ::msg::BUFFACTSTATUS_descriptor();
}
template <> struct is_proto_enum< ::msg::SMSTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::SMSTYPE>() {
  return ::msg::SMSTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::OBSERVELISTTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::OBSERVELISTTYPE>() {
  return ::msg::OBSERVELISTTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::WEBOP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::WEBOP>() {
  return ::msg::WEBOP_descriptor();
}
template <> struct is_proto_enum< ::msg::WEBRESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::WEBRESULT>() {
  return ::msg::WEBRESULT_descriptor();
}
template <> struct is_proto_enum< ::msg::PUNISHMENTBEHAVIOR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PUNISHMENTBEHAVIOR>() {
  return ::msg::PUNISHMENTBEHAVIOR_descriptor();
}
template <> struct is_proto_enum< ::msg::PUNISHMENTTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PUNISHMENTTYPE>() {
  return ::msg::PUNISHMENTTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::BANNERTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::BANNERTYPE>() {
  return ::msg::BANNERTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ACCOUNT_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ACCOUNT_STATUS>() {
  return ::msg::ACCOUNT_STATUS_descriptor();
}
template <> struct is_proto_enum< ::msg::ABTESTTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ABTESTTYPE>() {
  return ::msg::ABTESTTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::LABELTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::LABELTYPE>() {
  return ::msg::LABELTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::INVITETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::INVITETYPE>() {
  return ::msg::INVITETYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::TOURNAMENTSTATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TOURNAMENTSTATUS>() {
  return ::msg::TOURNAMENTSTATUS_descriptor();
}
template <> struct is_proto_enum< ::msg::PASSPORTREFRESH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PASSPORTREFRESH>() {
  return ::msg::PASSPORTREFRESH_descriptor();
}
template <> struct is_proto_enum< ::msg::OBSERVEPRIVILEGE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::OBSERVEPRIVILEGE>() {
  return ::msg::OBSERVEPRIVILEGE_descriptor();
}
template <> struct is_proto_enum< ::msg::NoticeSkip> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::NoticeSkip>() {
  return ::msg::NoticeSkip_descriptor();
}
template <> struct is_proto_enum< ::msg::VIDEO_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::VIDEO_TYPE>() {
  return ::msg::VIDEO_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::VIDEO_OPERATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::VIDEO_OPERATE>() {
  return ::msg::VIDEO_OPERATE_descriptor();
}
template <> struct is_proto_enum< ::msg::TEAM_DISMISS_REASON> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TEAM_DISMISS_REASON>() {
  return ::msg::TEAM_DISMISS_REASON_descriptor();
}
template <> struct is_proto_enum< ::msg::MALL_GOODS_FLAG> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MALL_GOODS_FLAG>() {
  return ::msg::MALL_GOODS_FLAG_descriptor();
}
template <> struct is_proto_enum< ::msg::EXCHANGESTATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::EXCHANGESTATE>() {
  return ::msg::EXCHANGESTATE_descriptor();
}
template <> struct is_proto_enum< ::msg::WORDCHAT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::WORDCHAT>() {
  return ::msg::WORDCHAT_descriptor();
}
template <> struct is_proto_enum< ::msg::BuffEffectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::BuffEffectType>() {
  return ::msg::BuffEffectType_descriptor();
}
template <> struct is_proto_enum< ::msg::PlayerRecruitStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PlayerRecruitStatus>() {
  return ::msg::PlayerRecruitStatus_descriptor();
}
template <> struct is_proto_enum< ::msg::TeachPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TeachPhase>() {
  return ::msg::TeachPhase_descriptor();
}
template <> struct is_proto_enum< ::msg::EFFECTTIMETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::EFFECTTIMETYPE>() {
  return ::msg::EFFECTTIMETYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::ACTIVITYTEAMSTATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ACTIVITYTEAMSTATE>() {
  return ::msg::ACTIVITYTEAMSTATE_descriptor();
}
template <> struct is_proto_enum< ::msg::ActivityResetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ActivityResetType>() {
  return ::msg::ActivityResetType_descriptor();
}
template <> struct is_proto_enum< ::msg::ConsumeIncreaseRefresh> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ConsumeIncreaseRefresh>() {
  return ::msg::ConsumeIncreaseRefresh_descriptor();
}
template <> struct is_proto_enum< ::msg::ActSignType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ActSignType>() {
  return ::msg::ActSignType_descriptor();
}
template <> struct is_proto_enum< ::msg::GDBinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GDBinType>() {
  return ::msg::GDBinType_descriptor();
}
template <> struct is_proto_enum< ::msg::GUILDROLETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GUILDROLETYPE>() {
  return ::msg::GUILDROLETYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::GUILDPERMITTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GUILDPERMITTYPE>() {
  return ::msg::GUILDPERMITTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::TeamState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TeamState>() {
  return ::msg::TeamState_descriptor();
}
template <> struct is_proto_enum< ::msg::PveMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PveMode>() {
  return ::msg::PveMode_descriptor();
}
template <> struct is_proto_enum< ::msg::ShortcutMapsOP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ShortcutMapsOP>() {
  return ::msg::ShortcutMapsOP_descriptor();
}
template <> struct is_proto_enum< ::msg::TransferEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TransferEventType>() {
  return ::msg::TransferEventType_descriptor();
}
template <> struct is_proto_enum< ::msg::OBSERVERACEMODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::OBSERVERACEMODE>() {
  return ::msg::OBSERVERACEMODE_descriptor();
}
template <> struct is_proto_enum< ::msg::TASKTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::TASKTYPE>() {
  return ::msg::TASKTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::UserRestrictType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::UserRestrictType>() {
  return ::msg::UserRestrictType_descriptor();
}
template <> struct is_proto_enum< ::msg::OUTPUT_ITEM_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::OUTPUT_ITEM_TYPE>() {
  return ::msg::OUTPUT_ITEM_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::LOGINSOURCE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::LOGINSOURCE>() {
  return ::msg::LOGINSOURCE_descriptor();
}
template <> struct is_proto_enum< ::msg::PASSPORTCARDTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PASSPORTCARDTYPE>() {
  return ::msg::PASSPORTCARDTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PVE_BUFF_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVE_BUFF_TYPE>() {
  return ::msg::PVE_BUFF_TYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::CHESS_QUALITY> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CHESS_QUALITY>() {
  return ::msg::CHESS_QUALITY_descriptor();
}
template <> struct is_proto_enum< ::msg::PVECONSUMETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVECONSUMETYPE>() {
  return ::msg::PVECONSUMETYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PVECHESSTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVECHESSTYPE>() {
  return ::msg::PVECHESSTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PVESKILLTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVESKILLTYPE>() {
  return ::msg::PVESKILLTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::PVERANKTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PVERANKTYPE>() {
  return ::msg::PVERANKTYPE_descriptor();
}
template <> struct is_proto_enum< ::msg::MENTORSHIP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MENTORSHIP>() {
  return ::msg::MENTORSHIP_descriptor();
}
template <> struct is_proto_enum< ::msg::MENTORSHIPTASK> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MENTORSHIPTASK>() {
  return ::msg::MENTORSHIPTASK_descriptor();
}
template <> struct is_proto_enum< ::msg::MENTORREACH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MENTORREACH>() {
  return ::msg::MENTORREACH_descriptor();
}
template <> struct is_proto_enum< ::msg::MENTORADDN> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MENTORADDN>() {
  return ::msg::MENTORADDN_descriptor();
}
template <> struct is_proto_enum< ::msg::MENTORLEVEL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MENTORLEVEL>() {
  return ::msg::MENTORLEVEL_descriptor();
}
template <> struct is_proto_enum< ::msg::MENTORRECOMMEND> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MENTORRECOMMEND>() {
  return ::msg::MENTORRECOMMEND_descriptor();
}
template <> struct is_proto_enum< ::msg::PUPILSTAT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PUPILSTAT>() {
  return ::msg::PUPILSTAT_descriptor();
}
template <> struct is_proto_enum< ::msg::KERNELJSONTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::KERNELJSONTYPE>() {
  return ::msg::KERNELJSONTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
