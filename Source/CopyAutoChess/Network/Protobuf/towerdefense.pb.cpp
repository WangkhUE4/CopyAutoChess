// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: towerdefense.proto

#include "towerdefense.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR OnHookOutPutInfo::OnHookOutPutInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnHookOutPutInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnHookOutPutInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnHookOutPutInfoDefaultTypeInternal() {}
  union {
    OnHookOutPutInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnHookOutPutInfoDefaultTypeInternal _OnHookOutPutInfo_default_instance_;
PROTOBUF_CONSTEXPR OnHookOutPutData::OnHookOutPutData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.effect_)*/{}
  , /*decltype(_impl_.stageid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OnHookOutPutDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OnHookOutPutDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OnHookOutPutDataDefaultTypeInternal() {}
  union {
    OnHookOutPutData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OnHookOutPutDataDefaultTypeInternal _OnHookOutPutData_default_instance_;
PROTOBUF_CONSTEXPR TDOutPut::TDOutPut(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.interval_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDOutPutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDOutPutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDOutPutDefaultTypeInternal() {}
  union {
    TDOutPut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDOutPutDefaultTypeInternal _TDOutPut_default_instance_;
PROTOBUF_CONSTEXPR TDConsume::TDConsume(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDConsumeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDConsumeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDConsumeDefaultTypeInternal() {}
  union {
    TDConsume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDConsumeDefaultTypeInternal _TDConsume_default_instance_;
PROTOBUF_CONSTEXPR TDBuy::TDBuy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.exawards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDBuyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDBuyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDBuyDefaultTypeInternal() {}
  union {
    TDBuy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDBuyDefaultTypeInternal _TDBuy_default_instance_;
PROTOBUF_CONSTEXPR TDRandCardInfo::TDRandCardInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDRandCardInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDRandCardInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDRandCardInfoDefaultTypeInternal() {}
  union {
    TDRandCardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDRandCardInfoDefaultTypeInternal _TDRandCardInfo_default_instance_;
PROTOBUF_CONSTEXPR TDRandCardData::TDRandCardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consume_)*/{}
  , /*decltype(_impl_.tendrawconsumes_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.starttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.background_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.chestid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDRandCardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDRandCardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDRandCardDataDefaultTypeInternal() {}
  union {
    TDRandCardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDRandCardDataDefaultTypeInternal _TDRandCardData_default_instance_;
PROTOBUF_CONSTEXPR TDRandPoolInfo::TDRandPoolInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDRandPoolInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDRandPoolInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDRandPoolInfoDefaultTypeInternal() {}
  union {
    TDRandPoolInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDRandPoolInfoDefaultTypeInternal _TDRandPoolInfo_default_instance_;
PROTOBUF_CONSTEXPR TDRandPoolData::TDRandPoolData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awarditem_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.poolid_)*/0
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDRandPoolDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDRandPoolDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDRandPoolDataDefaultTypeInternal() {}
  union {
    TDRandPoolData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDRandPoolDataDefaultTypeInternal _TDRandPoolData_default_instance_;
PROTOBUF_CONSTEXPR PlayerInitchessData::PlayerInitchessData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInitchessDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInitchessDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInitchessDataDefaultTypeInternal() {}
  union {
    PlayerInitchessData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInitchessDataDefaultTypeInternal _PlayerInitchessData_default_instance_;
PROTOBUF_CONSTEXPR ChessManMaterialData::ChessManMaterialData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessManMaterialDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessManMaterialDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessManMaterialDataDefaultTypeInternal() {}
  union {
    ChessManMaterialData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessManMaterialDataDefaultTypeInternal _ChessManMaterialData_default_instance_;
PROTOBUF_CONSTEXPR TDCardGroupConfigInfo::TDCardGroupConfigInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessboardcount_)*/{}
  , /*decltype(_impl_._chessboardcount_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessplayercount_)*/{}
  , /*decltype(_impl_._chessplayercount_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessmancount_)*/{}
  , /*decltype(_impl_._chessmancount_cached_byte_size_)*/{0}
  , /*decltype(_impl_.playerinititems_)*/{}
  , /*decltype(_impl_.poplimit_)*/{}
  , /*decltype(_impl_.costpoolcount_)*/{}
  , /*decltype(_impl_._costpoolcount_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessmanmaterials_)*/{}
  , /*decltype(_impl_.mapkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.showrate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpchesspoolkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limittimestage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerinitchess_)*/nullptr
  , /*decltype(_impl_.buycard_)*/nullptr
  , /*decltype(_impl_.storelimit_)*/0
  , /*decltype(_impl_.chessboardlvlimit_)*/0
  , /*decltype(_impl_.chessplayerlvlimit_)*/0
  , /*decltype(_impl_.chessmanlvlimit_)*/0
  , /*decltype(_impl_.chessequiplimit_)*/0
  , /*decltype(_impl_.chessequiplvlimit_)*/0
  , /*decltype(_impl_.chessboardtalentlvlimit_)*/0
  , /*decltype(_impl_.popspecialbuffid_)*/0
  , /*decltype(_impl_.limittime_)*/int64_t{0}
  , /*decltype(_impl_.maxstage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDCardGroupConfigInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDCardGroupConfigInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDCardGroupConfigInfoDefaultTypeInternal() {}
  union {
    TDCardGroupConfigInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDCardGroupConfigInfoDefaultTypeInternal _TDCardGroupConfigInfo_default_instance_;
PROTOBUF_CONSTEXPR ItemTypeLimit::ItemTypeLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.levellimit_)*/0
  , /*decltype(_impl_.cardgroupminnum_)*/0
  , /*decltype(_impl_.cardgroupmaxnum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemTypeLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemTypeLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemTypeLimitDefaultTypeInternal() {}
  union {
    ItemTypeLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemTypeLimitDefaultTypeInternal _ItemTypeLimit_default_instance_;
PROTOBUF_CONSTEXPR TDChessboardPeople::TDChessboardPeople(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDChessboardPeopleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDChessboardPeopleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDChessboardPeopleDefaultTypeInternal() {}
  union {
    TDChessboardPeople _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDChessboardPeopleDefaultTypeInternal _TDChessboardPeople_default_instance_;
PROTOBUF_CONSTEXPR TDLevelUpInfo::TDLevelUpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDLevelUpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDLevelUpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDLevelUpInfoDefaultTypeInternal() {}
  union {
    TDLevelUpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDLevelUpInfoDefaultTypeInternal _TDLevelUpInfo_default_instance_;
PROTOBUF_CONSTEXPR TDLevelUpData::TDLevelUpData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.equipqualityconsumes_)*/{}
  , /*decltype(_impl_._equipqualityconsumes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.subtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDLevelUpDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDLevelUpDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDLevelUpDataDefaultTypeInternal() {}
  union {
    TDLevelUpData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDLevelUpDataDefaultTypeInternal _TDLevelUpData_default_instance_;
PROTOBUF_CONSTEXPR TDComposeInfo::TDComposeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDComposeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDComposeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDComposeInfoDefaultTypeInternal() {}
  union {
    TDComposeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDComposeInfoDefaultTypeInternal _TDComposeInfo_default_instance_;
PROTOBUF_CONSTEXPR TDComposeData::TDComposeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.award_)*/{}
  , /*decltype(_impl_.routeid_)*/0
  , /*decltype(_impl_.drawingid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDComposeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDComposeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDComposeDataDefaultTypeInternal() {}
  union {
    TDComposeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDComposeDataDefaultTypeInternal _TDComposeData_default_instance_;
PROTOBUF_CONSTEXPR TDSkillInfo::TDSkillInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDSkillInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDSkillInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDSkillInfoDefaultTypeInternal() {}
  union {
    TDSkillInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDSkillInfoDefaultTypeInternal _TDSkillInfo_default_instance_;
PROTOBUF_CONSTEXPR SkillItem::SkillItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillItemDefaultTypeInternal() {}
  union {
    SkillItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillItemDefaultTypeInternal _SkillItem_default_instance_;
PROTOBUF_CONSTEXPR TDSkillData::TDSkillData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.itemid_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDSkillDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDSkillDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDSkillDataDefaultTypeInternal() {}
  union {
    TDSkillData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDSkillDataDefaultTypeInternal _TDSkillData_default_instance_;
PROTOBUF_CONSTEXPR TDStageInfo::TDStageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDStageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDStageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDStageInfoDefaultTypeInternal() {}
  union {
    TDStageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDStageInfoDefaultTypeInternal _TDStageInfo_default_instance_;
PROTOBUF_CONSTEXPR TDStageData::TDStageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.itemids_)*/{}
  , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDStageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDStageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDStageDataDefaultTypeInternal() {}
  union {
    TDStageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDStageDataDefaultTypeInternal _TDStageData_default_instance_;
PROTOBUF_CONSTEXPR TDItemInfo::TDItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItemInfoDefaultTypeInternal() {}
  union {
    TDItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItemInfoDefaultTypeInternal _TDItemInfo_default_instance_;
PROTOBUF_CONSTEXPR TDItemData::TDItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemids_)*/{}
  , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessid_)*/{}
  , /*decltype(_impl_._chessid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_.initlevel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItemDataDefaultTypeInternal() {}
  union {
    TDItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItemDataDefaultTypeInternal _TDItemData_default_instance_;
PROTOBUF_CONSTEXPR CSReqTDGetOnHookAward::CSReqTDGetOnHookAward(
    ::_pbi::ConstantInitialized) {}
struct CSReqTDGetOnHookAwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqTDGetOnHookAwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqTDGetOnHookAwardDefaultTypeInternal() {}
  union {
    CSReqTDGetOnHookAward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqTDGetOnHookAwardDefaultTypeInternal _CSReqTDGetOnHookAward_default_instance_;
PROTOBUF_CONSTEXPR CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal _CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSRspTDGetOnHookAward::CSRspTDGetOnHookAward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.onhooktimerecord_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.onhooktime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspTDGetOnHookAwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspTDGetOnHookAwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspTDGetOnHookAwardDefaultTypeInternal() {}
  union {
    CSRspTDGetOnHookAward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspTDGetOnHookAwardDefaultTypeInternal _CSRspTDGetOnHookAward_default_instance_;
PROTOBUF_CONSTEXPR CsReqTDDraw::CsReqTDDraw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.poolid_)*/0
  , /*decltype(_impl_.ten_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CsReqTDDrawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CsReqTDDrawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CsReqTDDrawDefaultTypeInternal() {}
  union {
    CsReqTDDraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CsReqTDDrawDefaultTypeInternal _CsReqTDDraw_default_instance_;
PROTOBUF_CONSTEXPR CsRspTDDraw::CsRspTDDraw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CsRspTDDrawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CsRspTDDrawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CsRspTDDrawDefaultTypeInternal() {}
  union {
    CsRspTDDraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CsRspTDDrawDefaultTypeInternal _CsRspTDDraw_default_instance_;
PROTOBUF_CONSTEXPR CsReqTDBuyCard::CsReqTDBuyCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cardcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CsReqTDBuyCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CsReqTDBuyCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CsReqTDBuyCardDefaultTypeInternal() {}
  union {
    CsReqTDBuyCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CsReqTDBuyCardDefaultTypeInternal _CsReqTDBuyCard_default_instance_;
PROTOBUF_CONSTEXPR CsRspTDBuyCard::CsRspTDBuyCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buycard_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CsRspTDBuyCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CsRspTDBuyCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CsRspTDBuyCardDefaultTypeInternal() {}
  union {
    CsRspTDBuyCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CsRspTDBuyCardDefaultTypeInternal _CsRspTDBuyCard_default_instance_;
PROTOBUF_CONSTEXPR CSNtfTDPlayerInfo::CSNtfTDPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfTDPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfTDPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfTDPlayerInfoDefaultTypeInternal() {}
  union {
    CSNtfTDPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfTDPlayerInfoDefaultTypeInternal _CSNtfTDPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CSReqTDSetCardGroup::CSReqTDSetCardGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cardgroup_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqTDSetCardGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqTDSetCardGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqTDSetCardGroupDefaultTypeInternal() {}
  union {
    CSReqTDSetCardGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqTDSetCardGroupDefaultTypeInternal _CSReqTDSetCardGroup_default_instance_;
PROTOBUF_CONSTEXPR CSRspTDSetCardGroup::CSRspTDSetCardGroup(
    ::_pbi::ConstantInitialized) {}
struct CSRspTDSetCardGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspTDSetCardGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspTDSetCardGroupDefaultTypeInternal() {}
  union {
    CSRspTDSetCardGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspTDSetCardGroupDefaultTypeInternal _CSRspTDSetCardGroup_default_instance_;
PROTOBUF_CONSTEXPR CSReqTDLevelUp::CSReqTDLevelUp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.slot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.blueprint_)*/nullptr
  , /*decltype(_impl_.chessid_)*/nullptr
  , /*decltype(_impl_.equip_)*/false
  , /*decltype(_impl_.lvuptype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqTDLevelUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqTDLevelUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqTDLevelUpDefaultTypeInternal() {}
  union {
    CSReqTDLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqTDLevelUpDefaultTypeInternal _CSReqTDLevelUp_default_instance_;
PROTOBUF_CONSTEXPR CSRspTDLevelUp::CSRspTDLevelUp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspTDLevelUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspTDLevelUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspTDLevelUpDefaultTypeInternal() {}
  union {
    CSRspTDLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspTDLevelUpDefaultTypeInternal _CSRspTDLevelUp_default_instance_;
PROTOBUF_CONSTEXPR CSReqTDEquip::CSReqTDEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chessid_)*/nullptr
  , /*decltype(_impl_.equipid_)*/nullptr
  , /*decltype(_impl_.takeoff_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqTDEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqTDEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqTDEquipDefaultTypeInternal() {}
  union {
    CSReqTDEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqTDEquipDefaultTypeInternal _CSReqTDEquip_default_instance_;
PROTOBUF_CONSTEXPR CSRspTDEquip::CSRspTDEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSRspTDEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSRspTDEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSRspTDEquipDefaultTypeInternal() {}
  union {
    CSRspTDEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSRspTDEquipDefaultTypeInternal _CSRspTDEquip_default_instance_;
PROTOBUF_CONSTEXPR TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TDPlayerInfo_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDPlayerInfo_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDPlayerInfo_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDPlayerInfo_OnHookTimeRecordEntry_DoNotUseDefaultTypeInternal _TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TDPlayerInfo::TDPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.onhooktimerecord_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.itemgroup_)*/nullptr
  , /*decltype(_impl_.onhooktime_)*/int64_t{0}
  , /*decltype(_impl_.onhookstage_)*/0
  , /*decltype(_impl_.laststage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDPlayerInfoDefaultTypeInternal() {}
  union {
    TDPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDPlayerInfoDefaultTypeInternal _TDPlayerInfo_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_towerdefense_2eproto[41];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_towerdefense_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_towerdefense_2eproto = nullptr;

const uint32_t TableStruct_towerdefense_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OnHookOutPutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::OnHookOutPutInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OnHookOutPutData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::OnHookOutPutData, _impl_.stageid_),
  PROTOBUF_FIELD_OFFSET(::msg::OnHookOutPutData, _impl_.effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDOutPut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDOutPut, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::msg::TDOutPut, _impl_.awards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDConsume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDConsume, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDConsume, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::TDConsume, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDBuy, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::TDBuy, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::TDBuy, _impl_.exawards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.background_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.consume_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.tendrawconsumes_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandCardData, _impl_.chestid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolData, _impl_.poolid_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolData, _impl_.awarditem_),
  PROTOBUF_FIELD_OFFSET(::msg::TDRandPoolData, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerInitchessData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerInitchessData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerInitchessData, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessManMaterialData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessManMaterialData, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessManMaterialData, _impl_.awards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessboardcount_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessplayercount_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessmancount_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.playerinititems_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.playerinitchess_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.storelimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.poplimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessboardlvlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessplayerlvlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessmanlvlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessequiplimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessequiplvlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessboardtalentlvlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.buycard_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.mapkey_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.popspecialbuffid_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.maxstage_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.costpoolcount_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.limittime_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.chessmanmaterials_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.showrate_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.pvpchesspoolkey_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroupConfigInfo, _impl_.limittimestage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ItemTypeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ItemTypeLimit, _impl_.levellimit_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemTypeLimit, _impl_.cardgroupminnum_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemTypeLimit, _impl_.cardgroupmaxnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDChessboardPeople, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDChessboardPeople, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::TDChessboardPeople, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _impl_.subtype_),
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::TDLevelUpData, _impl_.equipqualityconsumes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeData, _impl_.routeid_),
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeData, _impl_.drawingid_),
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeData, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::TDComposeData, _impl_.award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::msg::SkillItem, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillData, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::TDSkillData, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDStageInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDStageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDStageData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDStageData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::TDStageData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::TDStageData, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::TDStageData, _impl_.itemids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemInfo, _impl_.datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.icon_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.itemids_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.chessid_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemData, _impl_.initlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDGetOnHookAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward, _impl_.onhooktime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDGetOnHookAward, _impl_.onhooktimerecord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CsReqTDDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CsReqTDDraw, _impl_.poolid_),
  PROTOBUF_FIELD_OFFSET(::msg::CsReqTDDraw, _impl_.ten_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CsRspTDDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CsRspTDDraw, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::CsRspTDDraw, _impl_.consumes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CsReqTDBuyCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CsReqTDBuyCard, _impl_.cardcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CsRspTDBuyCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CsRspTDBuyCard, _impl_.buycard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfTDPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfTDPlayerInfo, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDSetCardGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDSetCardGroup, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDSetCardGroup, _impl_.cardgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDSetCardGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.equip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.lvuptype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.blueprint_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.chessid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDLevelUp, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDLevelUp, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDLevelUp, _impl_.awards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDEquip, _impl_.chessid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDEquip, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDEquip, _impl_.takeoff_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqTDEquip, _impl_.equipid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDEquip, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSRspTDEquip, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _impl_.onhooktime_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _impl_.onhookstage_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _impl_.laststage_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _impl_.itemgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::msg::TDPlayerInfo, _impl_.onhooktimerecord_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::OnHookOutPutInfo)},
  { 7, -1, -1, sizeof(::msg::OnHookOutPutData)},
  { 15, -1, -1, sizeof(::msg::TDOutPut)},
  { 23, -1, -1, sizeof(::msg::TDConsume)},
  { 32, -1, -1, sizeof(::msg::TDBuy)},
  { 41, -1, -1, sizeof(::msg::TDRandCardInfo)},
  { 48, -1, -1, sizeof(::msg::TDRandCardData)},
  { 62, -1, -1, sizeof(::msg::TDRandPoolInfo)},
  { 69, -1, -1, sizeof(::msg::TDRandPoolData)},
  { 79, -1, -1, sizeof(::msg::PlayerInitchessData)},
  { 87, -1, -1, sizeof(::msg::ChessManMaterialData)},
  { 95, -1, -1, sizeof(::msg::TDCardGroupConfigInfo)},
  { 124, -1, -1, sizeof(::msg::ItemTypeLimit)},
  { 133, -1, -1, sizeof(::msg::TDChessboardPeople)},
  { 141, -1, -1, sizeof(::msg::TDLevelUpInfo)},
  { 148, -1, -1, sizeof(::msg::TDLevelUpData)},
  { 160, -1, -1, sizeof(::msg::TDComposeInfo)},
  { 167, -1, -1, sizeof(::msg::TDComposeData)},
  { 177, -1, -1, sizeof(::msg::TDSkillInfo)},
  { 184, -1, -1, sizeof(::msg::SkillItem)},
  { 196, -1, -1, sizeof(::msg::TDSkillData)},
  { 207, -1, -1, sizeof(::msg::TDStageInfo)},
  { 214, -1, -1, sizeof(::msg::TDStageData)},
  { 225, -1, -1, sizeof(::msg::TDItemInfo)},
  { 232, -1, -1, sizeof(::msg::TDItemData)},
  { 248, -1, -1, sizeof(::msg::CSReqTDGetOnHookAward)},
  { 254, 262, -1, sizeof(::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse)},
  { 264, -1, -1, sizeof(::msg::CSRspTDGetOnHookAward)},
  { 273, -1, -1, sizeof(::msg::CsReqTDDraw)},
  { 281, -1, -1, sizeof(::msg::CsRspTDDraw)},
  { 289, -1, -1, sizeof(::msg::CsReqTDBuyCard)},
  { 296, -1, -1, sizeof(::msg::CsRspTDBuyCard)},
  { 303, -1, -1, sizeof(::msg::CSNtfTDPlayerInfo)},
  { 310, -1, -1, sizeof(::msg::CSReqTDSetCardGroup)},
  { 318, -1, -1, sizeof(::msg::CSRspTDSetCardGroup)},
  { 324, -1, -1, sizeof(::msg::CSReqTDLevelUp)},
  { 337, -1, -1, sizeof(::msg::CSRspTDLevelUp)},
  { 345, -1, -1, sizeof(::msg::CSReqTDEquip)},
  { 355, -1, -1, sizeof(::msg::CSRspTDEquip)},
  { 363, 371, -1, sizeof(::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse)},
  { 373, -1, -1, sizeof(::msg::TDPlayerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_OnHookOutPutInfo_default_instance_._instance,
  &::msg::_OnHookOutPutData_default_instance_._instance,
  &::msg::_TDOutPut_default_instance_._instance,
  &::msg::_TDConsume_default_instance_._instance,
  &::msg::_TDBuy_default_instance_._instance,
  &::msg::_TDRandCardInfo_default_instance_._instance,
  &::msg::_TDRandCardData_default_instance_._instance,
  &::msg::_TDRandPoolInfo_default_instance_._instance,
  &::msg::_TDRandPoolData_default_instance_._instance,
  &::msg::_PlayerInitchessData_default_instance_._instance,
  &::msg::_ChessManMaterialData_default_instance_._instance,
  &::msg::_TDCardGroupConfigInfo_default_instance_._instance,
  &::msg::_ItemTypeLimit_default_instance_._instance,
  &::msg::_TDChessboardPeople_default_instance_._instance,
  &::msg::_TDLevelUpInfo_default_instance_._instance,
  &::msg::_TDLevelUpData_default_instance_._instance,
  &::msg::_TDComposeInfo_default_instance_._instance,
  &::msg::_TDComposeData_default_instance_._instance,
  &::msg::_TDSkillInfo_default_instance_._instance,
  &::msg::_SkillItem_default_instance_._instance,
  &::msg::_TDSkillData_default_instance_._instance,
  &::msg::_TDStageInfo_default_instance_._instance,
  &::msg::_TDStageData_default_instance_._instance,
  &::msg::_TDItemInfo_default_instance_._instance,
  &::msg::_TDItemData_default_instance_._instance,
  &::msg::_CSReqTDGetOnHookAward_default_instance_._instance,
  &::msg::_CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSRspTDGetOnHookAward_default_instance_._instance,
  &::msg::_CsReqTDDraw_default_instance_._instance,
  &::msg::_CsRspTDDraw_default_instance_._instance,
  &::msg::_CsReqTDBuyCard_default_instance_._instance,
  &::msg::_CsRspTDBuyCard_default_instance_._instance,
  &::msg::_CSNtfTDPlayerInfo_default_instance_._instance,
  &::msg::_CSReqTDSetCardGroup_default_instance_._instance,
  &::msg::_CSRspTDSetCardGroup_default_instance_._instance,
  &::msg::_CSReqTDLevelUp_default_instance_._instance,
  &::msg::_CSRspTDLevelUp_default_instance_._instance,
  &::msg::_CSReqTDEquip_default_instance_._instance,
  &::msg::_CSRspTDEquip_default_instance_._instance,
  &::msg::_TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse_default_instance_._instance,
  &::msg::_TDPlayerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_towerdefense_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022towerdefense.proto\022\003msg\032\014common.proto\""
  "8\n\020OnHookOutPutInfo\022$\n\005Datas\030\001 \003(\0132\025.msg"
  ".OnHookOutPutData\"B\n\020OnHookOutPutData\022\017\n"
  "\007StageId\030\001 \001(\005\022\035\n\006Effect\030\002 \003(\0132\r.msg.TDO"
  "utPut\"9\n\010TDOutPut\022\020\n\010Interval\030\001 \001(\003\022\033\n\006A"
  "wards\030\002 \003(\0132\013.msg.TDItem\"5\n\tTDConsume\022\n\n"
  "\002Id\030\001 \001(\005\022\r\n\005Count\030\002 \001(\005\022\r\n\005Level\030\003 \001(\005\""
  "c\n\005TDBuy\022\033\n\006Awards\030\001 \003(\0132\013.msg.TDItem\022\036\n"
  "\010Consumes\030\002 \003(\0132\014.msg.Consume\022\035\n\010ExAward"
  "s\030\003 \003(\0132\013.msg.TDItem\"4\n\016TDRandCardInfo\022\""
  "\n\005Datas\030\001 \003(\0132\023.msg.TDRandCardData\"\275\001\n\016T"
  "DRandCardData\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022"
  "\021\n\tStartTime\030\003 \001(\t\022\017\n\007EndTime\030\004 \001(\t\022\022\n\nB"
  "ackground\030\005 \001(\t\022\037\n\007Consume\030\006 \003(\0132\016.msg.T"
  "DConsume\022\'\n\017TenDrawConsumes\030\007 \003(\0132\016.msg."
  "TDConsume\022\017\n\007ChestId\030\010 \001(\005\"4\n\016TDRandPool"
  "Info\022\"\n\005Datas\030\001 \003(\0132\023.msg.TDRandPoolData"
  "\"\\\n\016TDRandPoolData\022\n\n\002Id\030\001 \001(\005\022\016\n\006PoolId"
  "\030\002 \001(\005\022\036\n\tAwardItem\030\003 \001(\0132\013.msg.TDItem\022\016"
  "\n\006Weight\030\004 \001(\005\"0\n\023PlayerInitchessData\022\n\n"
  "\002Id\030\001 \001(\t\022\r\n\005Count\030\002 \001(\005\"D\n\024ChessManMate"
  "rialData\022\017\n\007Quality\030\001 \001(\005\022\033\n\006Awards\030\002 \003("
  "\0132\013.msg.TDItem\"\232\005\n\025TDCardGroupConfigInfo"
  "\022\027\n\017ChessBoardCount\030\001 \003(\005\022\030\n\020ChessPlayer"
  "Count\030\002 \003(\005\022\025\n\rChessManCount\030\003 \003(\005\022$\n\017Pl"
  "ayerInitItems\030\004 \003(\0132\013.msg.TDItem\0221\n\017Play"
  "erInitchess\030\005 \001(\0132\030.msg.PlayerInitchessD"
  "ata\022\022\n\nStoreLimit\030\006 \001(\005\022)\n\010PopLimit\030\007 \003("
  "\0132\027.msg.TDChessboardPeople\022\031\n\021ChessBoard"
  "LvLimit\030\010 \001(\005\022\032\n\022ChessPlayerLvLimit\030\t \001("
  "\005\022\027\n\017ChessManLvLimit\030\n \001(\005\022\027\n\017ChessEquip"
  "Limit\030\013 \001(\005\022\031\n\021ChessEquipLvLimit\030\014 \001(\005\022\037"
  "\n\027ChessBoardTalentLvLimit\030\r \001(\005\022\033\n\007BuyCa"
  "rd\030\016 \001(\0132\n.msg.TDBuy\022\016\n\006MapKey\030\017 \001(\t\022\030\n\020"
  "PopSpecialBuffId\030\020 \001(\005\022\020\n\010MaxStage\030\021 \001(\005"
  "\022\025\n\rCostPoolCount\030\022 \003(\005\022\021\n\tLimitTime\030\023 \001"
  "(\003\0224\n\021ChessManMaterials\030\024 \003(\0132\031.msg.Ches"
  "sManMaterialData\022\020\n\010ShowRate\030\025 \001(\t\022\027\n\017Pv"
  "pChessPoolKey\030\026 \001(\t\022\026\n\016LimitTimeStage\030\027 "
  "\001(\t\"U\n\rItemTypeLimit\022\022\n\nLevelLimit\030\001 \001(\005"
  "\022\027\n\017CardGroupMinNum\030\002 \001(\005\022\027\n\017CardGroupMa"
  "xNum\030\003 \001(\005\"0\n\022TDChessboardPeople\022\r\n\005Leve"
  "l\030\001 \001(\005\022\013\n\003Num\030\002 \001(\005\"2\n\rTDLevelUpInfo\022!\n"
  "\005Datas\030\001 \003(\0132\022.msg.TDLevelUpData\"\257\001\n\rTDL"
  "evelUpData\022\n\n\002Id\030\001 \001(\005\022\r\n\005Level\030\002 \001(\005\022\035\n"
  "\004Type\030\003 \001(\0162\017.msg.TDITEMTYPE\022$\n\007SubType\030"
  "\004 \001(\0162\023.msg.TDLEVELUP_TYPE\022 \n\010Consumes\030\005"
  " \003(\0132\016.msg.TDConsume\022\034\n\024EquipQualityCons"
  "umes\030\006 \003(\005\"2\n\rTDComposeInfo\022!\n\005Datas\030\001 \003"
  "(\0132\022.msg.TDComposeData\"q\n\rTDComposeData\022"
  "\017\n\007RouteId\030\001 \001(\005\022\021\n\tDrawingId\030\002 \001(\005\022 \n\010C"
  "onsumes\030\003 \003(\0132\016.msg.TDConsume\022\032\n\005Award\030\004"
  " \003(\0132\013.msg.TDItem\".\n\013TDSkillInfo\022\037\n\005Data"
  "s\030\001 \003(\0132\020.msg.TDSkillData\"q\n\tSkillItem\022\n"
  "\n\002Id\030\001 \001(\005\022\036\n\004Type\030\002 \001(\0162\020.msg.TDSKILLTY"
  "PE\022\r\n\005Level\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\022\014\n\004Desc\030"
  "\005 \001(\t\022\r\n\005value\030\006 \001(\t\"w\n\013TDSkillData\022\n\n\002I"
  "d\030\001 \001(\005\022\016\n\006ItemId\030\002 \001(\005\022\035\n\004Type\030\003 \001(\0162\017."
  "msg.TDITEMTYPE\022\r\n\005Level\030\004 \001(\005\022\036\n\006Skills\030"
  "\005 \003(\0132\016.msg.SkillItem\".\n\013TDStageInfo\022\037\n\005"
  "Datas\030\001 \003(\0132\020.msg.TDStageData\"d\n\013TDStage"
  "Data\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\r\n\005Level\030"
  "\003 \001(\005\022\033\n\006Awards\030\004 \003(\0132\013.msg.TDItem\022\017\n\007It"
  "emIds\030\005 \003(\005\",\n\nTDItemInfo\022\036\n\005Datas\030\001 \003(\013"
  "2\017.msg.TDItemData\"\265\001\n\nTDItemData\022\n\n\002Id\030\001"
  " \001(\005\022\035\n\004Type\030\002 \001(\0162\017.msg.TDITEMTYPE\022\014\n\004N"
  "ame\030\003 \001(\t\022\014\n\004Desc\030\004 \001(\t\022\017\n\007Quality\030\005 \001(\005"
  "\022\014\n\004Icon\030\006 \001(\t\022\017\n\007ItemIds\030\007 \003(\005\022\017\n\007Chess"
  "Id\030\010 \003(\005\022\014\n\004Cost\030\t \001(\005\022\021\n\tInitLevel\030\n \001("
  "\005\"\027\n\025CSReqTDGetOnHookAward\"\315\001\n\025CSRspTDGe"
  "tOnHookAward\022\033\n\006Awards\030\001 \003(\0132\013.msg.TDIte"
  "m\022\022\n\nOnHookTime\030\002 \001(\003\022J\n\020OnHookTimeRecor"
  "d\030\003 \003(\01320.msg.CSRspTDGetOnHookAward.OnHo"
  "okTimeRecordEntry\0327\n\025OnHookTimeRecordEnt"
  "ry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003:\0028\001\"*\n\013Cs"
  "ReqTDDraw\022\016\n\006PoolId\030\001 \001(\005\022\013\n\003Ten\030\002 \001(\010\"L"
  "\n\013CsRspTDDraw\022\033\n\006Awards\030\002 \003(\0132\013.msg.TDIt"
  "em\022 \n\010Consumes\030\003 \003(\0132\016.msg.TDConsume\"#\n\016"
  "CsReqTDBuyCard\022\021\n\tCardCount\030\001 \001(\005\"-\n\016CsR"
  "spTDBuyCard\022\033\n\007BuyCard\030\001 \001(\0132\n.msg.TDBuy"
  "\":\n\021CSNtfTDPlayerInfo\022%\n\nPlayerInfo\030\001 \001("
  "\0132\021.msg.TDPlayerInfo\"Y\n\023CSReqTDSetCardGr"
  "oup\022\035\n\004Type\030\001 \001(\0162\017.msg.TDITEMTYPE\022#\n\tCa"
  "rdGroup\030\002 \001(\0132\020.msg.TDCardGroup\"\025\n\023CSRsp"
  "TDSetCardGroup\"\321\001\n\016CSReqTDLevelUp\022\031\n\002Id\030"
  "\001 \001(\0132\r.msg.TDItemId\022\r\n\005Equip\030\002 \001(\010\022%\n\010L"
  "vUpType\030\003 \001(\0162\023.msg.TDLEVELUP_TYPE\022 \n\010Co"
  "nsumes\030\004 \003(\0132\016.msg.TDConsume\022\036\n\tBluePrin"
  "t\030\005 \001(\0132\013.msg.TDItem\022\036\n\007ChessId\030\006 \001(\0132\r."
  "msg.TDItemId\022\014\n\004Slot\030\007 \001(\t\"O\n\016CSRspTDLev"
  "elUp\022 \n\010Consumes\030\001 \003(\0132\016.msg.TDConsume\022\033"
  "\n\006Awards\030\002 \003(\0132\013.msg.TDItem\"m\n\014CSReqTDEq"
  "uip\022\036\n\007ChessId\030\001 \001(\0132\r.msg.TDItemId\022\014\n\004S"
  "lot\030\002 \001(\t\022\017\n\007TakeOff\030\003 \001(\010\022\036\n\007EquipId\030\004 "
  "\001(\0132\r.msg.TDItemId\"M\n\014CSRspTDEquip\022 \n\010Co"
  "nsumes\030\001 \003(\0132\016.msg.TDConsume\022\033\n\006Awards\030\002"
  " \003(\0132\013.msg.TDItem\"\207\002\n\014TDPlayerInfo\022\022\n\nOn"
  "HookTime\030\001 \001(\003\022\023\n\013OnHookStage\030\002 \001(\005\022\021\n\tL"
  "astStage\030\003 \001(\005\022#\n\tItemGroup\030\004 \001(\0132\020.msg."
  "TDItemGroup\022\032\n\005Items\030\005 \003(\0132\013.msg.TDItem\022"
  "A\n\020OnHookTimeRecord\030\006 \003(\0132\'.msg.TDPlayer"
  "Info.OnHookTimeRecordEntry\0327\n\025OnHookTime"
  "RecordEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003:"
  "\0028\001*\251\002\n\nTDITEMTYPE\022\026\n\022TDITEMTYPE_MIN_NUM"
  "\020\000\022\030\n\024TDITEMTYPE_CHESS_MAN\020\001\022\033\n\027TDITEMTY"
  "PE_CHESS_PLAYER\020\002\022\032\n\026TDITEMTYPE_CHESS_BO"
  "ARD\020\003\022\032\n\026TDITEMTYPE_CHESS_EQUIP\020\004\022\024\n\020TDI"
  "TEMTYPE_MONEY\020\005\022\022\n\016TDITEMTYPE_EXP\020\006\022\027\n\023T"
  "DITEMTYPE_MATERIAL\020\007\022\031\n\025TDITEMTYPE_BLUE_"
  "PRINT\020\010\022\036\n\032TDITEMTYPE_AUTO_OPEN_CHEST\020\t\022"
  "\026\n\022TDITEMTYPE_MAX_NUM\020\n*\371\003\n\016TDLEVELUP_TY"
  "PE\022\037\n\033TDLEVELUP_TYPE_CHESS_UNLOCK\020\000\022$\n T"
  "DLEVELUP_TYPE_CHESS_WHITE_EQUIP\020\001\022#\n\037TDL"
  "EVELUP_TYPE_CHESS_BLUE_EQUIP\020\003\022#\n\037TDLEVE"
  "LUP_TYPE_CHESS_PURE_EQUIP\020\004\022%\n!TDLEVELUP"
  "_TYPE_CHESS_ORIGiN_EQUIP\020\005\022\032\n\026TDLEVELUP_"
  "TYPE_COMPOSE\020\006\022%\n!TDLEVELUP_TYPE_CHESS_B"
  "OARD_TALENT\020\t\022$\n TDLEVELUP_TYPE_CHESS_MA"
  "N_QUALITY\020\n\022&\n\"TDLEVELUP_TYPE_CHESS_MAN_"
  "QUALITY_1\020\013\022&\n\"TDLEVELUP_TYPE_CHESS_MAN_"
  "QUALITY_2\020\014\022&\n\"TDLEVELUP_TYPE_CHESS_MAN_"
  "QUALITY_3\020\r\022&\n\"TDLEVELUP_TYPE_CHESS_MAN_"
  "QUALITY_4\020\016\022&\n\"TDLEVELUP_TYPE_CHESS_MAN_"
  "QUALITY_5\020\017*\244\001\n\013TDSKILLTYPE\022\031\n\025TDSKILLTY"
  "PE_LIMIT_MIN\020\000\022\024\n\020TDSKILLTYPE_SKIL\020\001\022\025\n\021"
  "TDSKILLTYPE_EQUIP\020\002\022\034\n\030TDSKILLTYPE_SPECI"
  "AL_BUFF\020\003\022\024\n\020TDSKILLTYPE_BUFF\020\004\022\031\n\025TDSKI"
  "LLTYPE_LIMIT_MAX\020\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_towerdefense_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_towerdefense_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_towerdefense_2eproto = {
    false, false, 5106, descriptor_table_protodef_towerdefense_2eproto,
    "towerdefense.proto",
    &descriptor_table_towerdefense_2eproto_once, descriptor_table_towerdefense_2eproto_deps, 1, 41,
    schemas, file_default_instances, TableStruct_towerdefense_2eproto::offsets,
    file_level_metadata_towerdefense_2eproto, file_level_enum_descriptors_towerdefense_2eproto,
    file_level_service_descriptors_towerdefense_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_towerdefense_2eproto_getter() {
  return &descriptor_table_towerdefense_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_towerdefense_2eproto(&descriptor_table_towerdefense_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDITEMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_towerdefense_2eproto);
  return file_level_enum_descriptors_towerdefense_2eproto[0];
}
bool TDITEMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDLEVELUP_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_towerdefense_2eproto);
  return file_level_enum_descriptors_towerdefense_2eproto[1];
}
bool TDLEVELUP_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDSKILLTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_towerdefense_2eproto);
  return file_level_enum_descriptors_towerdefense_2eproto[2];
}
bool TDSKILLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OnHookOutPutInfo::_Internal {
 public:
};

OnHookOutPutInfo::OnHookOutPutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.OnHookOutPutInfo)
}
OnHookOutPutInfo::OnHookOutPutInfo(const OnHookOutPutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnHookOutPutInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.OnHookOutPutInfo)
}

inline void OnHookOutPutInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OnHookOutPutInfo::~OnHookOutPutInfo() {
  // @@protoc_insertion_point(destructor:msg.OnHookOutPutInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnHookOutPutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void OnHookOutPutInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnHookOutPutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OnHookOutPutInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnHookOutPutInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.OnHookOutPutData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnHookOutPutInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OnHookOutPutInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.OnHookOutPutData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OnHookOutPutInfo)
  return target;
}

size_t OnHookOutPutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OnHookOutPutInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.OnHookOutPutData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnHookOutPutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnHookOutPutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnHookOutPutInfo::GetClassData() const { return &_class_data_; }


void OnHookOutPutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnHookOutPutInfo*>(&to_msg);
  auto& from = static_cast<const OnHookOutPutInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.OnHookOutPutInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnHookOutPutInfo::CopyFrom(const OnHookOutPutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OnHookOutPutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnHookOutPutInfo::IsInitialized() const {
  return true;
}

void OnHookOutPutInfo::InternalSwap(OnHookOutPutInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnHookOutPutInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[0]);
}

// ===================================================================

class OnHookOutPutData::_Internal {
 public:
};

OnHookOutPutData::OnHookOutPutData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.OnHookOutPutData)
}
OnHookOutPutData::OnHookOutPutData(const OnHookOutPutData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OnHookOutPutData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.effect_){from._impl_.effect_}
    , decltype(_impl_.stageid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stageid_ = from._impl_.stageid_;
  // @@protoc_insertion_point(copy_constructor:msg.OnHookOutPutData)
}

inline void OnHookOutPutData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.effect_){arena}
    , decltype(_impl_.stageid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OnHookOutPutData::~OnHookOutPutData() {
  // @@protoc_insertion_point(destructor:msg.OnHookOutPutData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OnHookOutPutData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effect_.~RepeatedPtrField();
}

void OnHookOutPutData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OnHookOutPutData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OnHookOutPutData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effect_.Clear();
  _impl_.stageid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnHookOutPutData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 StageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDOutPut Effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OnHookOutPutData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OnHookOutPutData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 StageId = 1;
  if (this->_internal_stageid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stageid(), target);
  }

  // repeated .msg.TDOutPut Effect = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_effect_size()); i < n; i++) {
    const auto& repfield = this->_internal_effect(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OnHookOutPutData)
  return target;
}

size_t OnHookOutPutData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OnHookOutPutData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDOutPut Effect = 2;
  total_size += 1UL * this->_internal_effect_size();
  for (const auto& msg : this->_impl_.effect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 StageId = 1;
  if (this->_internal_stageid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stageid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnHookOutPutData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OnHookOutPutData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnHookOutPutData::GetClassData() const { return &_class_data_; }


void OnHookOutPutData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OnHookOutPutData*>(&to_msg);
  auto& from = static_cast<const OnHookOutPutData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.OnHookOutPutData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effect_.MergeFrom(from._impl_.effect_);
  if (from._internal_stageid() != 0) {
    _this->_internal_set_stageid(from._internal_stageid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OnHookOutPutData::CopyFrom(const OnHookOutPutData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OnHookOutPutData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnHookOutPutData::IsInitialized() const {
  return true;
}

void OnHookOutPutData::InternalSwap(OnHookOutPutData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.effect_.InternalSwap(&other->_impl_.effect_);
  swap(_impl_.stageid_, other->_impl_.stageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnHookOutPutData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[1]);
}

// ===================================================================

class TDOutPut::_Internal {
 public:
};

void TDOutPut::clear_awards() {
  _impl_.awards_.Clear();
}
TDOutPut::TDOutPut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDOutPut)
}
TDOutPut::TDOutPut(const TDOutPut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDOutPut* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , decltype(_impl_.interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.interval_ = from._impl_.interval_;
  // @@protoc_insertion_point(copy_constructor:msg.TDOutPut)
}

inline void TDOutPut::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , decltype(_impl_.interval_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDOutPut::~TDOutPut() {
  // @@protoc_insertion_point(destructor:msg.TDOutPut)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDOutPut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
}

void TDOutPut::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDOutPut::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDOutPut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.interval_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDOutPut::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Awards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDOutPut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDOutPut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Interval = 1;
  if (this->_internal_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_interval(), target);
  }

  // repeated .msg.TDItem Awards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDOutPut)
  return target;
}

size_t TDOutPut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDOutPut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 2;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 Interval = 1;
  if (this->_internal_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDOutPut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDOutPut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDOutPut::GetClassData() const { return &_class_data_; }


void TDOutPut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDOutPut*>(&to_msg);
  auto& from = static_cast<const TDOutPut&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDOutPut)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  if (from._internal_interval() != 0) {
    _this->_internal_set_interval(from._internal_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDOutPut::CopyFrom(const TDOutPut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDOutPut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDOutPut::IsInitialized() const {
  return true;
}

void TDOutPut::InternalSwap(TDOutPut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  swap(_impl_.interval_, other->_impl_.interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDOutPut::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[2]);
}

// ===================================================================

class TDConsume::_Internal {
 public:
};

TDConsume::TDConsume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDConsume)
}
TDConsume::TDConsume(const TDConsume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDConsume* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.TDConsume)
}

inline void TDConsume::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDConsume::~TDConsume() {
  // @@protoc_insertion_point(destructor:msg.TDConsume)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDConsume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TDConsume::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDConsume::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDConsume)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDConsume::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDConsume::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDConsume)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDConsume)
  return target;
}

size_t TDConsume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDConsume)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDConsume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDConsume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDConsume::GetClassData() const { return &_class_data_; }


void TDConsume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDConsume*>(&to_msg);
  auto& from = static_cast<const TDConsume&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDConsume)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDConsume::CopyFrom(const TDConsume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDConsume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDConsume::IsInitialized() const {
  return true;
}

void TDConsume::InternalSwap(TDConsume* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDConsume, _impl_.level_)
      + sizeof(TDConsume::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TDConsume, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDConsume::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[3]);
}

// ===================================================================

class TDBuy::_Internal {
 public:
};

void TDBuy::clear_awards() {
  _impl_.awards_.Clear();
}
void TDBuy::clear_consumes() {
  _impl_.consumes_.Clear();
}
void TDBuy::clear_exawards() {
  _impl_.exawards_.Clear();
}
TDBuy::TDBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDBuy)
}
TDBuy::TDBuy(const TDBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDBuy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.exawards_){from._impl_.exawards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDBuy)
}

inline void TDBuy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , decltype(_impl_.consumes_){arena}
    , decltype(_impl_.exawards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDBuy::~TDBuy() {
  // @@protoc_insertion_point(destructor:msg.TDBuy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDBuy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.exawards_.~RepeatedPtrField();
}

void TDBuy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDBuy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.consumes_.Clear();
  _impl_.exawards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDBuy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDItem Awards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Consume Consumes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem ExAwards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exawards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDBuy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDBuy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Consume Consumes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.TDItem ExAwards = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exawards_size()); i < n; i++) {
    const auto& repfield = this->_internal_exawards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDBuy)
  return target;
}

size_t TDBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDBuy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 1;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Consume Consumes = 2;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDItem ExAwards = 3;
  total_size += 1UL * this->_internal_exawards_size();
  for (const auto& msg : this->_impl_.exawards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDBuy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDBuy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDBuy::GetClassData() const { return &_class_data_; }


void TDBuy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDBuy*>(&to_msg);
  auto& from = static_cast<const TDBuy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDBuy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_impl_.exawards_.MergeFrom(from._impl_.exawards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDBuy::CopyFrom(const TDBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDBuy::IsInitialized() const {
  return true;
}

void TDBuy::InternalSwap(TDBuy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  _impl_.exawards_.InternalSwap(&other->_impl_.exawards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDBuy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[4]);
}

// ===================================================================

class TDRandCardInfo::_Internal {
 public:
};

TDRandCardInfo::TDRandCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDRandCardInfo)
}
TDRandCardInfo::TDRandCardInfo(const TDRandCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDRandCardInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDRandCardInfo)
}

inline void TDRandCardInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDRandCardInfo::~TDRandCardInfo() {
  // @@protoc_insertion_point(destructor:msg.TDRandCardInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDRandCardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDRandCardInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDRandCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDRandCardInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDRandCardInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDRandCardData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDRandCardInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDRandCardInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDRandCardData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDRandCardInfo)
  return target;
}

size_t TDRandCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDRandCardInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDRandCardData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDRandCardInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDRandCardInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDRandCardInfo::GetClassData() const { return &_class_data_; }


void TDRandCardInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDRandCardInfo*>(&to_msg);
  auto& from = static_cast<const TDRandCardInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDRandCardInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDRandCardInfo::CopyFrom(const TDRandCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDRandCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDRandCardInfo::IsInitialized() const {
  return true;
}

void TDRandCardInfo::InternalSwap(TDRandCardInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDRandCardInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[5]);
}

// ===================================================================

class TDRandCardData::_Internal {
 public:
};

TDRandCardData::TDRandCardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDRandCardData)
}
TDRandCardData::TDRandCardData(const TDRandCardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDRandCardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consume_){from._impl_.consume_}
    , decltype(_impl_.tendrawconsumes_){from._impl_.tendrawconsumes_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.background_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.chestid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.starttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.starttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_starttime().empty()) {
    _this->_impl_.starttime_.Set(from._internal_starttime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endtime().empty()) {
    _this->_impl_.endtime_.Set(from._internal_endtime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.background_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.background_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_background().empty()) {
    _this->_impl_.background_.Set(from._internal_background(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chestid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.chestid_));
  // @@protoc_insertion_point(copy_constructor:msg.TDRandCardData)
}

inline void TDRandCardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consume_){arena}
    , decltype(_impl_.tendrawconsumes_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.background_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.chestid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.starttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.starttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.background_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.background_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TDRandCardData::~TDRandCardData() {
  // @@protoc_insertion_point(destructor:msg.TDRandCardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDRandCardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consume_.~RepeatedPtrField();
  _impl_.tendrawconsumes_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.starttime_.Destroy();
  _impl_.endtime_.Destroy();
  _impl_.background_.Destroy();
}

void TDRandCardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDRandCardData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDRandCardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consume_.Clear();
  _impl_.tendrawconsumes_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.starttime_.ClearToEmpty();
  _impl_.endtime_.ClearToEmpty();
  _impl_.background_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chestid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.chestid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDRandCardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDRandCardData.Name"));
        } else
          goto handle_unusual;
        continue;
      // string StartTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_starttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDRandCardData.StartTime"));
        } else
          goto handle_unusual;
        continue;
      // string EndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_endtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDRandCardData.EndTime"));
        } else
          goto handle_unusual;
        continue;
      // string Background = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_background();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDRandCardData.Background"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDConsume Consume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consume(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDConsume TenDrawConsumes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tendrawconsumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ChestId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.chestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDRandCardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDRandCardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDRandCardData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string StartTime = 3;
  if (!this->_internal_starttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_starttime().data(), static_cast<int>(this->_internal_starttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDRandCardData.StartTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_starttime(), target);
  }

  // string EndTime = 4;
  if (!this->_internal_endtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endtime().data(), static_cast<int>(this->_internal_endtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDRandCardData.EndTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_endtime(), target);
  }

  // string Background = 5;
  if (!this->_internal_background().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_background().data(), static_cast<int>(this->_internal_background().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDRandCardData.Background");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_background(), target);
  }

  // repeated .msg.TDConsume Consume = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consume_size()); i < n; i++) {
    const auto& repfield = this->_internal_consume(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.TDConsume TenDrawConsumes = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tendrawconsumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_tendrawconsumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 ChestId = 8;
  if (this->_internal_chestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_chestid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDRandCardData)
  return target;
}

size_t TDRandCardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDRandCardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consume = 6;
  total_size += 1UL * this->_internal_consume_size();
  for (const auto& msg : this->_impl_.consume_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDConsume TenDrawConsumes = 7;
  total_size += 1UL * this->_internal_tendrawconsumes_size();
  for (const auto& msg : this->_impl_.tendrawconsumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string StartTime = 3;
  if (!this->_internal_starttime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starttime());
  }

  // string EndTime = 4;
  if (!this->_internal_endtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());
  }

  // string Background = 5;
  if (!this->_internal_background().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_background());
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 ChestId = 8;
  if (this->_internal_chestid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chestid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDRandCardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDRandCardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDRandCardData::GetClassData() const { return &_class_data_; }


void TDRandCardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDRandCardData*>(&to_msg);
  auto& from = static_cast<const TDRandCardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDRandCardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consume_.MergeFrom(from._impl_.consume_);
  _this->_impl_.tendrawconsumes_.MergeFrom(from._impl_.tendrawconsumes_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_starttime().empty()) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (!from._internal_endtime().empty()) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (!from._internal_background().empty()) {
    _this->_internal_set_background(from._internal_background());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_chestid() != 0) {
    _this->_internal_set_chestid(from._internal_chestid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDRandCardData::CopyFrom(const TDRandCardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDRandCardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDRandCardData::IsInitialized() const {
  return true;
}

void TDRandCardData::InternalSwap(TDRandCardData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consume_.InternalSwap(&other->_impl_.consume_);
  _impl_.tendrawconsumes_.InternalSwap(&other->_impl_.tendrawconsumes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.starttime_, lhs_arena,
      &other->_impl_.starttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endtime_, lhs_arena,
      &other->_impl_.endtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.background_, lhs_arena,
      &other->_impl_.background_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDRandCardData, _impl_.chestid_)
      + sizeof(TDRandCardData::_impl_.chestid_)
      - PROTOBUF_FIELD_OFFSET(TDRandCardData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDRandCardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[6]);
}

// ===================================================================

class TDRandPoolInfo::_Internal {
 public:
};

TDRandPoolInfo::TDRandPoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDRandPoolInfo)
}
TDRandPoolInfo::TDRandPoolInfo(const TDRandPoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDRandPoolInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDRandPoolInfo)
}

inline void TDRandPoolInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDRandPoolInfo::~TDRandPoolInfo() {
  // @@protoc_insertion_point(destructor:msg.TDRandPoolInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDRandPoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDRandPoolInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDRandPoolInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDRandPoolInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDRandPoolInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDRandPoolData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDRandPoolInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDRandPoolInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDRandPoolData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDRandPoolInfo)
  return target;
}

size_t TDRandPoolInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDRandPoolInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDRandPoolData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDRandPoolInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDRandPoolInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDRandPoolInfo::GetClassData() const { return &_class_data_; }


void TDRandPoolInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDRandPoolInfo*>(&to_msg);
  auto& from = static_cast<const TDRandPoolInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDRandPoolInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDRandPoolInfo::CopyFrom(const TDRandPoolInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDRandPoolInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDRandPoolInfo::IsInitialized() const {
  return true;
}

void TDRandPoolInfo::InternalSwap(TDRandPoolInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDRandPoolInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[7]);
}

// ===================================================================

class TDRandPoolData::_Internal {
 public:
  static const ::msg::TDItem& awarditem(const TDRandPoolData* msg);
};

const ::msg::TDItem&
TDRandPoolData::_Internal::awarditem(const TDRandPoolData* msg) {
  return *msg->_impl_.awarditem_;
}
void TDRandPoolData::clear_awarditem() {
  if (GetArenaForAllocation() == nullptr && _impl_.awarditem_ != nullptr) {
    delete _impl_.awarditem_;
  }
  _impl_.awarditem_ = nullptr;
}
TDRandPoolData::TDRandPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDRandPoolData)
}
TDRandPoolData::TDRandPoolData(const TDRandPoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDRandPoolData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awarditem_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.poolid_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_awarditem()) {
    _this->_impl_.awarditem_ = new ::msg::TDItem(*from._impl_.awarditem_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weight_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.weight_));
  // @@protoc_insertion_point(copy_constructor:msg.TDRandPoolData)
}

inline void TDRandPoolData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awarditem_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.poolid_){0}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDRandPoolData::~TDRandPoolData() {
  // @@protoc_insertion_point(destructor:msg.TDRandPoolData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDRandPoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.awarditem_;
}

void TDRandPoolData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDRandPoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDRandPoolData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.awarditem_ != nullptr) {
    delete _impl_.awarditem_;
  }
  _impl_.awarditem_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weight_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDRandPoolData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PoolId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItem AwardItem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_awarditem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDRandPoolData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDRandPoolData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 PoolId = 2;
  if (this->_internal_poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_poolid(), target);
  }

  // .msg.TDItem AwardItem = 3;
  if (this->_internal_has_awarditem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::awarditem(this),
        _Internal::awarditem(this).GetCachedSize(), target, stream);
  }

  // int32 Weight = 4;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDRandPoolData)
  return target;
}

size_t TDRandPoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDRandPoolData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDItem AwardItem = 3;
  if (this->_internal_has_awarditem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.awarditem_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 PoolId = 2;
  if (this->_internal_poolid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poolid());
  }

  // int32 Weight = 4;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDRandPoolData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDRandPoolData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDRandPoolData::GetClassData() const { return &_class_data_; }


void TDRandPoolData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDRandPoolData*>(&to_msg);
  auto& from = static_cast<const TDRandPoolData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDRandPoolData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_awarditem()) {
    _this->_internal_mutable_awarditem()->::msg::TDItem::MergeFrom(
        from._internal_awarditem());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_poolid() != 0) {
    _this->_internal_set_poolid(from._internal_poolid());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDRandPoolData::CopyFrom(const TDRandPoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDRandPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDRandPoolData::IsInitialized() const {
  return true;
}

void TDRandPoolData::InternalSwap(TDRandPoolData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDRandPoolData, _impl_.weight_)
      + sizeof(TDRandPoolData::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(TDRandPoolData, _impl_.awarditem_)>(
          reinterpret_cast<char*>(&_impl_.awarditem_),
          reinterpret_cast<char*>(&other->_impl_.awarditem_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDRandPoolData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[8]);
}

// ===================================================================

class PlayerInitchessData::_Internal {
 public:
};

PlayerInitchessData::PlayerInitchessData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerInitchessData)
}
PlayerInitchessData::PlayerInitchessData(const PlayerInitchessData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInitchessData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:msg.PlayerInitchessData)
}

inline void PlayerInitchessData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInitchessData::~PlayerInitchessData() {
  // @@protoc_insertion_point(destructor:msg.PlayerInitchessData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInitchessData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void PlayerInitchessData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInitchessData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerInitchessData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInitchessData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerInitchessData.Id"));
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInitchessData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerInitchessData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerInitchessData.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerInitchessData)
  return target;
}

size_t PlayerInitchessData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerInitchessData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInitchessData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInitchessData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInitchessData::GetClassData() const { return &_class_data_; }


void PlayerInitchessData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInitchessData*>(&to_msg);
  auto& from = static_cast<const PlayerInitchessData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerInitchessData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInitchessData::CopyFrom(const PlayerInitchessData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerInitchessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInitchessData::IsInitialized() const {
  return true;
}

void PlayerInitchessData::InternalSwap(PlayerInitchessData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInitchessData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[9]);
}

// ===================================================================

class ChessManMaterialData::_Internal {
 public:
};

void ChessManMaterialData::clear_awards() {
  _impl_.awards_.Clear();
}
ChessManMaterialData::ChessManMaterialData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChessManMaterialData)
}
ChessManMaterialData::ChessManMaterialData(const ChessManMaterialData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessManMaterialData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , decltype(_impl_.quality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.quality_ = from._impl_.quality_;
  // @@protoc_insertion_point(copy_constructor:msg.ChessManMaterialData)
}

inline void ChessManMaterialData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , decltype(_impl_.quality_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessManMaterialData::~ChessManMaterialData() {
  // @@protoc_insertion_point(destructor:msg.ChessManMaterialData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessManMaterialData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
}

void ChessManMaterialData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessManMaterialData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessManMaterialData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.quality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessManMaterialData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Awards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessManMaterialData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessManMaterialData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Quality = 1;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_quality(), target);
  }

  // repeated .msg.TDItem Awards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessManMaterialData)
  return target;
}

size_t ChessManMaterialData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessManMaterialData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 2;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Quality = 1;
  if (this->_internal_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessManMaterialData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessManMaterialData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessManMaterialData::GetClassData() const { return &_class_data_; }


void ChessManMaterialData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessManMaterialData*>(&to_msg);
  auto& from = static_cast<const ChessManMaterialData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessManMaterialData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessManMaterialData::CopyFrom(const ChessManMaterialData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessManMaterialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessManMaterialData::IsInitialized() const {
  return true;
}

void ChessManMaterialData::InternalSwap(ChessManMaterialData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  swap(_impl_.quality_, other->_impl_.quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessManMaterialData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[10]);
}

// ===================================================================

class TDCardGroupConfigInfo::_Internal {
 public:
  static const ::msg::PlayerInitchessData& playerinitchess(const TDCardGroupConfigInfo* msg);
  static const ::msg::TDBuy& buycard(const TDCardGroupConfigInfo* msg);
};

const ::msg::PlayerInitchessData&
TDCardGroupConfigInfo::_Internal::playerinitchess(const TDCardGroupConfigInfo* msg) {
  return *msg->_impl_.playerinitchess_;
}
const ::msg::TDBuy&
TDCardGroupConfigInfo::_Internal::buycard(const TDCardGroupConfigInfo* msg) {
  return *msg->_impl_.buycard_;
}
void TDCardGroupConfigInfo::clear_playerinititems() {
  _impl_.playerinititems_.Clear();
}
TDCardGroupConfigInfo::TDCardGroupConfigInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDCardGroupConfigInfo)
}
TDCardGroupConfigInfo::TDCardGroupConfigInfo(const TDCardGroupConfigInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDCardGroupConfigInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chessboardcount_){from._impl_.chessboardcount_}
    , /*decltype(_impl_._chessboardcount_cached_byte_size_)*/{0}
    , decltype(_impl_.chessplayercount_){from._impl_.chessplayercount_}
    , /*decltype(_impl_._chessplayercount_cached_byte_size_)*/{0}
    , decltype(_impl_.chessmancount_){from._impl_.chessmancount_}
    , /*decltype(_impl_._chessmancount_cached_byte_size_)*/{0}
    , decltype(_impl_.playerinititems_){from._impl_.playerinititems_}
    , decltype(_impl_.poplimit_){from._impl_.poplimit_}
    , decltype(_impl_.costpoolcount_){from._impl_.costpoolcount_}
    , /*decltype(_impl_._costpoolcount_cached_byte_size_)*/{0}
    , decltype(_impl_.chessmanmaterials_){from._impl_.chessmanmaterials_}
    , decltype(_impl_.mapkey_){}
    , decltype(_impl_.showrate_){}
    , decltype(_impl_.pvpchesspoolkey_){}
    , decltype(_impl_.limittimestage_){}
    , decltype(_impl_.playerinitchess_){nullptr}
    , decltype(_impl_.buycard_){nullptr}
    , decltype(_impl_.storelimit_){}
    , decltype(_impl_.chessboardlvlimit_){}
    , decltype(_impl_.chessplayerlvlimit_){}
    , decltype(_impl_.chessmanlvlimit_){}
    , decltype(_impl_.chessequiplimit_){}
    , decltype(_impl_.chessequiplvlimit_){}
    , decltype(_impl_.chessboardtalentlvlimit_){}
    , decltype(_impl_.popspecialbuffid_){}
    , decltype(_impl_.limittime_){}
    , decltype(_impl_.maxstage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapkey().empty()) {
    _this->_impl_.mapkey_.Set(from._internal_mapkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.showrate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showrate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_showrate().empty()) {
    _this->_impl_.showrate_.Set(from._internal_showrate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pvpchesspoolkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpchesspoolkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pvpchesspoolkey().empty()) {
    _this->_impl_.pvpchesspoolkey_.Set(from._internal_pvpchesspoolkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.limittimestage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.limittimestage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_limittimestage().empty()) {
    _this->_impl_.limittimestage_.Set(from._internal_limittimestage(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_playerinitchess()) {
    _this->_impl_.playerinitchess_ = new ::msg::PlayerInitchessData(*from._impl_.playerinitchess_);
  }
  if (from._internal_has_buycard()) {
    _this->_impl_.buycard_ = new ::msg::TDBuy(*from._impl_.buycard_);
  }
  ::memcpy(&_impl_.storelimit_, &from._impl_.storelimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxstage_) -
    reinterpret_cast<char*>(&_impl_.storelimit_)) + sizeof(_impl_.maxstage_));
  // @@protoc_insertion_point(copy_constructor:msg.TDCardGroupConfigInfo)
}

inline void TDCardGroupConfigInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chessboardcount_){arena}
    , /*decltype(_impl_._chessboardcount_cached_byte_size_)*/{0}
    , decltype(_impl_.chessplayercount_){arena}
    , /*decltype(_impl_._chessplayercount_cached_byte_size_)*/{0}
    , decltype(_impl_.chessmancount_){arena}
    , /*decltype(_impl_._chessmancount_cached_byte_size_)*/{0}
    , decltype(_impl_.playerinititems_){arena}
    , decltype(_impl_.poplimit_){arena}
    , decltype(_impl_.costpoolcount_){arena}
    , /*decltype(_impl_._costpoolcount_cached_byte_size_)*/{0}
    , decltype(_impl_.chessmanmaterials_){arena}
    , decltype(_impl_.mapkey_){}
    , decltype(_impl_.showrate_){}
    , decltype(_impl_.pvpchesspoolkey_){}
    , decltype(_impl_.limittimestage_){}
    , decltype(_impl_.playerinitchess_){nullptr}
    , decltype(_impl_.buycard_){nullptr}
    , decltype(_impl_.storelimit_){0}
    , decltype(_impl_.chessboardlvlimit_){0}
    , decltype(_impl_.chessplayerlvlimit_){0}
    , decltype(_impl_.chessmanlvlimit_){0}
    , decltype(_impl_.chessequiplimit_){0}
    , decltype(_impl_.chessequiplvlimit_){0}
    , decltype(_impl_.chessboardtalentlvlimit_){0}
    , decltype(_impl_.popspecialbuffid_){0}
    , decltype(_impl_.limittime_){int64_t{0}}
    , decltype(_impl_.maxstage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.showrate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showrate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pvpchesspoolkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpchesspoolkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.limittimestage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.limittimestage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TDCardGroupConfigInfo::~TDCardGroupConfigInfo() {
  // @@protoc_insertion_point(destructor:msg.TDCardGroupConfigInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDCardGroupConfigInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chessboardcount_.~RepeatedField();
  _impl_.chessplayercount_.~RepeatedField();
  _impl_.chessmancount_.~RepeatedField();
  _impl_.playerinititems_.~RepeatedPtrField();
  _impl_.poplimit_.~RepeatedPtrField();
  _impl_.costpoolcount_.~RepeatedField();
  _impl_.chessmanmaterials_.~RepeatedPtrField();
  _impl_.mapkey_.Destroy();
  _impl_.showrate_.Destroy();
  _impl_.pvpchesspoolkey_.Destroy();
  _impl_.limittimestage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.playerinitchess_;
  if (this != internal_default_instance()) delete _impl_.buycard_;
}

void TDCardGroupConfigInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDCardGroupConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDCardGroupConfigInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chessboardcount_.Clear();
  _impl_.chessplayercount_.Clear();
  _impl_.chessmancount_.Clear();
  _impl_.playerinititems_.Clear();
  _impl_.poplimit_.Clear();
  _impl_.costpoolcount_.Clear();
  _impl_.chessmanmaterials_.Clear();
  _impl_.mapkey_.ClearToEmpty();
  _impl_.showrate_.ClearToEmpty();
  _impl_.pvpchesspoolkey_.ClearToEmpty();
  _impl_.limittimestage_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.playerinitchess_ != nullptr) {
    delete _impl_.playerinitchess_;
  }
  _impl_.playerinitchess_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buycard_ != nullptr) {
    delete _impl_.buycard_;
  }
  _impl_.buycard_ = nullptr;
  ::memset(&_impl_.storelimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxstage_) -
      reinterpret_cast<char*>(&_impl_.storelimit_)) + sizeof(_impl_.maxstage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDCardGroupConfigInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 ChessBoardCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chessboardcount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chessboardcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ChessPlayerCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chessplayercount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_chessplayercount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ChessManCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chessmancount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_chessmancount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem PlayerInitItems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerinititems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.PlayerInitchessData PlayerInitchess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinitchess(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 StoreLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.storelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDChessboardPeople PopLimit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poplimit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ChessBoardLvLimit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.chessboardlvlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessPlayerLvLimit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.chessplayerlvlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessManLvLimit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.chessmanlvlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessEquipLimit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.chessequiplimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessEquipLvLimit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.chessequiplvlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChessBoardTalentLvLimit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.chessboardtalentlvlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDBuy BuyCard = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_buycard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MapKey = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_mapkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDCardGroupConfigInfo.MapKey"));
        } else
          goto handle_unusual;
        continue;
      // int32 PopSpecialBuffId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.popspecialbuffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxStage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.maxstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 CostPoolCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_costpoolcount(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          _internal_add_costpoolcount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LimitTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.limittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ChessManMaterialData ChessManMaterials = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chessmanmaterials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ShowRate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_showrate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDCardGroupConfigInfo.ShowRate"));
        } else
          goto handle_unusual;
        continue;
      // string PvpChessPoolKey = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_pvpchesspoolkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDCardGroupConfigInfo.PvpChessPoolKey"));
        } else
          goto handle_unusual;
        continue;
      // string LimitTimeStage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_limittimestage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDCardGroupConfigInfo.LimitTimeStage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDCardGroupConfigInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDCardGroupConfigInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ChessBoardCount = 1;
  {
    int byte_size = _impl_._chessboardcount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_chessboardcount(), byte_size, target);
    }
  }

  // repeated int32 ChessPlayerCount = 2;
  {
    int byte_size = _impl_._chessplayercount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_chessplayercount(), byte_size, target);
    }
  }

  // repeated int32 ChessManCount = 3;
  {
    int byte_size = _impl_._chessmancount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_chessmancount(), byte_size, target);
    }
  }

  // repeated .msg.TDItem PlayerInitItems = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerinititems_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerinititems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .msg.PlayerInitchessData PlayerInitchess = 5;
  if (this->_internal_has_playerinitchess()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::playerinitchess(this),
        _Internal::playerinitchess(this).GetCachedSize(), target, stream);
  }

  // int32 StoreLimit = 6;
  if (this->_internal_storelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_storelimit(), target);
  }

  // repeated .msg.TDChessboardPeople PopLimit = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_poplimit_size()); i < n; i++) {
    const auto& repfield = this->_internal_poplimit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 ChessBoardLvLimit = 8;
  if (this->_internal_chessboardlvlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_chessboardlvlimit(), target);
  }

  // int32 ChessPlayerLvLimit = 9;
  if (this->_internal_chessplayerlvlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_chessplayerlvlimit(), target);
  }

  // int32 ChessManLvLimit = 10;
  if (this->_internal_chessmanlvlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_chessmanlvlimit(), target);
  }

  // int32 ChessEquipLimit = 11;
  if (this->_internal_chessequiplimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_chessequiplimit(), target);
  }

  // int32 ChessEquipLvLimit = 12;
  if (this->_internal_chessequiplvlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_chessequiplvlimit(), target);
  }

  // int32 ChessBoardTalentLvLimit = 13;
  if (this->_internal_chessboardtalentlvlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_chessboardtalentlvlimit(), target);
  }

  // .msg.TDBuy BuyCard = 14;
  if (this->_internal_has_buycard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::buycard(this),
        _Internal::buycard(this).GetCachedSize(), target, stream);
  }

  // string MapKey = 15;
  if (!this->_internal_mapkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapkey().data(), static_cast<int>(this->_internal_mapkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDCardGroupConfigInfo.MapKey");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_mapkey(), target);
  }

  // int32 PopSpecialBuffId = 16;
  if (this->_internal_popspecialbuffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_popspecialbuffid(), target);
  }

  // int32 MaxStage = 17;
  if (this->_internal_maxstage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_maxstage(), target);
  }

  // repeated int32 CostPoolCount = 18;
  {
    int byte_size = _impl_._costpoolcount_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_costpoolcount(), byte_size, target);
    }
  }

  // int64 LimitTime = 19;
  if (this->_internal_limittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(19, this->_internal_limittime(), target);
  }

  // repeated .msg.ChessManMaterialData ChessManMaterials = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chessmanmaterials_size()); i < n; i++) {
    const auto& repfield = this->_internal_chessmanmaterials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ShowRate = 21;
  if (!this->_internal_showrate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_showrate().data(), static_cast<int>(this->_internal_showrate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDCardGroupConfigInfo.ShowRate");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_showrate(), target);
  }

  // string PvpChessPoolKey = 22;
  if (!this->_internal_pvpchesspoolkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pvpchesspoolkey().data(), static_cast<int>(this->_internal_pvpchesspoolkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDCardGroupConfigInfo.PvpChessPoolKey");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_pvpchesspoolkey(), target);
  }

  // string LimitTimeStage = 23;
  if (!this->_internal_limittimestage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_limittimestage().data(), static_cast<int>(this->_internal_limittimestage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDCardGroupConfigInfo.LimitTimeStage");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_limittimestage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDCardGroupConfigInfo)
  return target;
}

size_t TDCardGroupConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDCardGroupConfigInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ChessBoardCount = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chessboardcount_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessboardcount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ChessPlayerCount = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chessplayercount_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessplayercount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ChessManCount = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chessmancount_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessmancount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.TDItem PlayerInitItems = 4;
  total_size += 1UL * this->_internal_playerinititems_size();
  for (const auto& msg : this->_impl_.playerinititems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDChessboardPeople PopLimit = 7;
  total_size += 1UL * this->_internal_poplimit_size();
  for (const auto& msg : this->_impl_.poplimit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 CostPoolCount = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.costpoolcount_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._costpoolcount_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.ChessManMaterialData ChessManMaterials = 20;
  total_size += 2UL * this->_internal_chessmanmaterials_size();
  for (const auto& msg : this->_impl_.chessmanmaterials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string MapKey = 15;
  if (!this->_internal_mapkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapkey());
  }

  // string ShowRate = 21;
  if (!this->_internal_showrate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_showrate());
  }

  // string PvpChessPoolKey = 22;
  if (!this->_internal_pvpchesspoolkey().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvpchesspoolkey());
  }

  // string LimitTimeStage = 23;
  if (!this->_internal_limittimestage().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_limittimestage());
  }

  // .msg.PlayerInitchessData PlayerInitchess = 5;
  if (this->_internal_has_playerinitchess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinitchess_);
  }

  // .msg.TDBuy BuyCard = 14;
  if (this->_internal_has_buycard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buycard_);
  }

  // int32 StoreLimit = 6;
  if (this->_internal_storelimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_storelimit());
  }

  // int32 ChessBoardLvLimit = 8;
  if (this->_internal_chessboardlvlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessboardlvlimit());
  }

  // int32 ChessPlayerLvLimit = 9;
  if (this->_internal_chessplayerlvlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessplayerlvlimit());
  }

  // int32 ChessManLvLimit = 10;
  if (this->_internal_chessmanlvlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessmanlvlimit());
  }

  // int32 ChessEquipLimit = 11;
  if (this->_internal_chessequiplimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessequiplimit());
  }

  // int32 ChessEquipLvLimit = 12;
  if (this->_internal_chessequiplvlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessequiplvlimit());
  }

  // int32 ChessBoardTalentLvLimit = 13;
  if (this->_internal_chessboardtalentlvlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chessboardtalentlvlimit());
  }

  // int32 PopSpecialBuffId = 16;
  if (this->_internal_popspecialbuffid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_popspecialbuffid());
  }

  // int64 LimitTime = 19;
  if (this->_internal_limittime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_limittime());
  }

  // int32 MaxStage = 17;
  if (this->_internal_maxstage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxstage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDCardGroupConfigInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDCardGroupConfigInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDCardGroupConfigInfo::GetClassData() const { return &_class_data_; }


void TDCardGroupConfigInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDCardGroupConfigInfo*>(&to_msg);
  auto& from = static_cast<const TDCardGroupConfigInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDCardGroupConfigInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chessboardcount_.MergeFrom(from._impl_.chessboardcount_);
  _this->_impl_.chessplayercount_.MergeFrom(from._impl_.chessplayercount_);
  _this->_impl_.chessmancount_.MergeFrom(from._impl_.chessmancount_);
  _this->_impl_.playerinititems_.MergeFrom(from._impl_.playerinititems_);
  _this->_impl_.poplimit_.MergeFrom(from._impl_.poplimit_);
  _this->_impl_.costpoolcount_.MergeFrom(from._impl_.costpoolcount_);
  _this->_impl_.chessmanmaterials_.MergeFrom(from._impl_.chessmanmaterials_);
  if (!from._internal_mapkey().empty()) {
    _this->_internal_set_mapkey(from._internal_mapkey());
  }
  if (!from._internal_showrate().empty()) {
    _this->_internal_set_showrate(from._internal_showrate());
  }
  if (!from._internal_pvpchesspoolkey().empty()) {
    _this->_internal_set_pvpchesspoolkey(from._internal_pvpchesspoolkey());
  }
  if (!from._internal_limittimestage().empty()) {
    _this->_internal_set_limittimestage(from._internal_limittimestage());
  }
  if (from._internal_has_playerinitchess()) {
    _this->_internal_mutable_playerinitchess()->::msg::PlayerInitchessData::MergeFrom(
        from._internal_playerinitchess());
  }
  if (from._internal_has_buycard()) {
    _this->_internal_mutable_buycard()->::msg::TDBuy::MergeFrom(
        from._internal_buycard());
  }
  if (from._internal_storelimit() != 0) {
    _this->_internal_set_storelimit(from._internal_storelimit());
  }
  if (from._internal_chessboardlvlimit() != 0) {
    _this->_internal_set_chessboardlvlimit(from._internal_chessboardlvlimit());
  }
  if (from._internal_chessplayerlvlimit() != 0) {
    _this->_internal_set_chessplayerlvlimit(from._internal_chessplayerlvlimit());
  }
  if (from._internal_chessmanlvlimit() != 0) {
    _this->_internal_set_chessmanlvlimit(from._internal_chessmanlvlimit());
  }
  if (from._internal_chessequiplimit() != 0) {
    _this->_internal_set_chessequiplimit(from._internal_chessequiplimit());
  }
  if (from._internal_chessequiplvlimit() != 0) {
    _this->_internal_set_chessequiplvlimit(from._internal_chessequiplvlimit());
  }
  if (from._internal_chessboardtalentlvlimit() != 0) {
    _this->_internal_set_chessboardtalentlvlimit(from._internal_chessboardtalentlvlimit());
  }
  if (from._internal_popspecialbuffid() != 0) {
    _this->_internal_set_popspecialbuffid(from._internal_popspecialbuffid());
  }
  if (from._internal_limittime() != 0) {
    _this->_internal_set_limittime(from._internal_limittime());
  }
  if (from._internal_maxstage() != 0) {
    _this->_internal_set_maxstage(from._internal_maxstage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDCardGroupConfigInfo::CopyFrom(const TDCardGroupConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDCardGroupConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDCardGroupConfigInfo::IsInitialized() const {
  return true;
}

void TDCardGroupConfigInfo::InternalSwap(TDCardGroupConfigInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chessboardcount_.InternalSwap(&other->_impl_.chessboardcount_);
  _impl_.chessplayercount_.InternalSwap(&other->_impl_.chessplayercount_);
  _impl_.chessmancount_.InternalSwap(&other->_impl_.chessmancount_);
  _impl_.playerinititems_.InternalSwap(&other->_impl_.playerinititems_);
  _impl_.poplimit_.InternalSwap(&other->_impl_.poplimit_);
  _impl_.costpoolcount_.InternalSwap(&other->_impl_.costpoolcount_);
  _impl_.chessmanmaterials_.InternalSwap(&other->_impl_.chessmanmaterials_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapkey_, lhs_arena,
      &other->_impl_.mapkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.showrate_, lhs_arena,
      &other->_impl_.showrate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pvpchesspoolkey_, lhs_arena,
      &other->_impl_.pvpchesspoolkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.limittimestage_, lhs_arena,
      &other->_impl_.limittimestage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDCardGroupConfigInfo, _impl_.maxstage_)
      + sizeof(TDCardGroupConfigInfo::_impl_.maxstage_)
      - PROTOBUF_FIELD_OFFSET(TDCardGroupConfigInfo, _impl_.playerinitchess_)>(
          reinterpret_cast<char*>(&_impl_.playerinitchess_),
          reinterpret_cast<char*>(&other->_impl_.playerinitchess_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDCardGroupConfigInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[11]);
}

// ===================================================================

class ItemTypeLimit::_Internal {
 public:
};

ItemTypeLimit::ItemTypeLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ItemTypeLimit)
}
ItemTypeLimit::ItemTypeLimit(const ItemTypeLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemTypeLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.levellimit_){}
    , decltype(_impl_.cardgroupminnum_){}
    , decltype(_impl_.cardgroupmaxnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.levellimit_, &from._impl_.levellimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cardgroupmaxnum_) -
    reinterpret_cast<char*>(&_impl_.levellimit_)) + sizeof(_impl_.cardgroupmaxnum_));
  // @@protoc_insertion_point(copy_constructor:msg.ItemTypeLimit)
}

inline void ItemTypeLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.levellimit_){0}
    , decltype(_impl_.cardgroupminnum_){0}
    , decltype(_impl_.cardgroupmaxnum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemTypeLimit::~ItemTypeLimit() {
  // @@protoc_insertion_point(destructor:msg.ItemTypeLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemTypeLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemTypeLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemTypeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ItemTypeLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.levellimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cardgroupmaxnum_) -
      reinterpret_cast<char*>(&_impl_.levellimit_)) + sizeof(_impl_.cardgroupmaxnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemTypeLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 LevelLimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.levellimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CardGroupMinNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cardgroupminnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CardGroupMaxNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cardgroupmaxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemTypeLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ItemTypeLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 LevelLimit = 1;
  if (this->_internal_levellimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_levellimit(), target);
  }

  // int32 CardGroupMinNum = 2;
  if (this->_internal_cardgroupminnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cardgroupminnum(), target);
  }

  // int32 CardGroupMaxNum = 3;
  if (this->_internal_cardgroupmaxnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cardgroupmaxnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ItemTypeLimit)
  return target;
}

size_t ItemTypeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ItemTypeLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 LevelLimit = 1;
  if (this->_internal_levellimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_levellimit());
  }

  // int32 CardGroupMinNum = 2;
  if (this->_internal_cardgroupminnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cardgroupminnum());
  }

  // int32 CardGroupMaxNum = 3;
  if (this->_internal_cardgroupmaxnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cardgroupmaxnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemTypeLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemTypeLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemTypeLimit::GetClassData() const { return &_class_data_; }


void ItemTypeLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemTypeLimit*>(&to_msg);
  auto& from = static_cast<const ItemTypeLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ItemTypeLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_levellimit() != 0) {
    _this->_internal_set_levellimit(from._internal_levellimit());
  }
  if (from._internal_cardgroupminnum() != 0) {
    _this->_internal_set_cardgroupminnum(from._internal_cardgroupminnum());
  }
  if (from._internal_cardgroupmaxnum() != 0) {
    _this->_internal_set_cardgroupmaxnum(from._internal_cardgroupmaxnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemTypeLimit::CopyFrom(const ItemTypeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ItemTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemTypeLimit::IsInitialized() const {
  return true;
}

void ItemTypeLimit::InternalSwap(ItemTypeLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemTypeLimit, _impl_.cardgroupmaxnum_)
      + sizeof(ItemTypeLimit::_impl_.cardgroupmaxnum_)
      - PROTOBUF_FIELD_OFFSET(ItemTypeLimit, _impl_.levellimit_)>(
          reinterpret_cast<char*>(&_impl_.levellimit_),
          reinterpret_cast<char*>(&other->_impl_.levellimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemTypeLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[12]);
}

// ===================================================================

class TDChessboardPeople::_Internal {
 public:
};

TDChessboardPeople::TDChessboardPeople(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDChessboardPeople)
}
TDChessboardPeople::TDChessboardPeople(const TDChessboardPeople& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDChessboardPeople* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:msg.TDChessboardPeople)
}

inline void TDChessboardPeople::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDChessboardPeople::~TDChessboardPeople() {
  // @@protoc_insertion_point(destructor:msg.TDChessboardPeople)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDChessboardPeople::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TDChessboardPeople::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDChessboardPeople::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDChessboardPeople)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDChessboardPeople::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDChessboardPeople::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDChessboardPeople)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 Num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDChessboardPeople)
  return target;
}

size_t TDChessboardPeople::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDChessboardPeople)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 Num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDChessboardPeople::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDChessboardPeople::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDChessboardPeople::GetClassData() const { return &_class_data_; }


void TDChessboardPeople::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDChessboardPeople*>(&to_msg);
  auto& from = static_cast<const TDChessboardPeople&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDChessboardPeople)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDChessboardPeople::CopyFrom(const TDChessboardPeople& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDChessboardPeople)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDChessboardPeople::IsInitialized() const {
  return true;
}

void TDChessboardPeople::InternalSwap(TDChessboardPeople* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDChessboardPeople, _impl_.num_)
      + sizeof(TDChessboardPeople::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(TDChessboardPeople, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDChessboardPeople::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[13]);
}

// ===================================================================

class TDLevelUpInfo::_Internal {
 public:
};

TDLevelUpInfo::TDLevelUpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDLevelUpInfo)
}
TDLevelUpInfo::TDLevelUpInfo(const TDLevelUpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDLevelUpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDLevelUpInfo)
}

inline void TDLevelUpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDLevelUpInfo::~TDLevelUpInfo() {
  // @@protoc_insertion_point(destructor:msg.TDLevelUpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDLevelUpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDLevelUpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDLevelUpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDLevelUpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDLevelUpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDLevelUpData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDLevelUpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDLevelUpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDLevelUpData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDLevelUpInfo)
  return target;
}

size_t TDLevelUpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDLevelUpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDLevelUpData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDLevelUpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDLevelUpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDLevelUpInfo::GetClassData() const { return &_class_data_; }


void TDLevelUpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDLevelUpInfo*>(&to_msg);
  auto& from = static_cast<const TDLevelUpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDLevelUpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDLevelUpInfo::CopyFrom(const TDLevelUpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDLevelUpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDLevelUpInfo::IsInitialized() const {
  return true;
}

void TDLevelUpInfo::InternalSwap(TDLevelUpInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDLevelUpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[14]);
}

// ===================================================================

class TDLevelUpData::_Internal {
 public:
};

TDLevelUpData::TDLevelUpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDLevelUpData)
}
TDLevelUpData::TDLevelUpData(const TDLevelUpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDLevelUpData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.equipqualityconsumes_){from._impl_.equipqualityconsumes_}
    , /*decltype(_impl_._equipqualityconsumes_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.subtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.subtype_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.subtype_));
  // @@protoc_insertion_point(copy_constructor:msg.TDLevelUpData)
}

inline void TDLevelUpData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){arena}
    , decltype(_impl_.equipqualityconsumes_){arena}
    , /*decltype(_impl_._equipqualityconsumes_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.subtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDLevelUpData::~TDLevelUpData() {
  // @@protoc_insertion_point(destructor:msg.TDLevelUpData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDLevelUpData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.equipqualityconsumes_.~RepeatedField();
}

void TDLevelUpData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDLevelUpData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDLevelUpData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumes_.Clear();
  _impl_.equipqualityconsumes_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.subtype_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.subtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDLevelUpData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDITEMTYPE Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::TDITEMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.TDLEVELUP_TYPE SubType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subtype(static_cast<::msg::TDLEVELUP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDConsume Consumes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 EquipQualityConsumes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equipqualityconsumes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_equipqualityconsumes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDLevelUpData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDLevelUpData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // .msg.TDITEMTYPE Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .msg.TDLEVELUP_TYPE SubType = 4;
  if (this->_internal_subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_subtype(), target);
  }

  // repeated .msg.TDConsume Consumes = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 EquipQualityConsumes = 6;
  {
    int byte_size = _impl_._equipqualityconsumes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_equipqualityconsumes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDLevelUpData)
  return target;
}

size_t TDLevelUpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDLevelUpData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 5;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 EquipQualityConsumes = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equipqualityconsumes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equipqualityconsumes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // .msg.TDITEMTYPE Type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .msg.TDLEVELUP_TYPE SubType = 4;
  if (this->_internal_subtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_subtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDLevelUpData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDLevelUpData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDLevelUpData::GetClassData() const { return &_class_data_; }


void TDLevelUpData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDLevelUpData*>(&to_msg);
  auto& from = static_cast<const TDLevelUpData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDLevelUpData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_impl_.equipqualityconsumes_.MergeFrom(from._impl_.equipqualityconsumes_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_subtype() != 0) {
    _this->_internal_set_subtype(from._internal_subtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDLevelUpData::CopyFrom(const TDLevelUpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDLevelUpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDLevelUpData::IsInitialized() const {
  return true;
}

void TDLevelUpData::InternalSwap(TDLevelUpData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  _impl_.equipqualityconsumes_.InternalSwap(&other->_impl_.equipqualityconsumes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDLevelUpData, _impl_.subtype_)
      + sizeof(TDLevelUpData::_impl_.subtype_)
      - PROTOBUF_FIELD_OFFSET(TDLevelUpData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDLevelUpData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[15]);
}

// ===================================================================

class TDComposeInfo::_Internal {
 public:
};

TDComposeInfo::TDComposeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDComposeInfo)
}
TDComposeInfo::TDComposeInfo(const TDComposeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDComposeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDComposeInfo)
}

inline void TDComposeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDComposeInfo::~TDComposeInfo() {
  // @@protoc_insertion_point(destructor:msg.TDComposeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDComposeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDComposeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDComposeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDComposeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDComposeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDComposeData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDComposeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDComposeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDComposeData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDComposeInfo)
  return target;
}

size_t TDComposeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDComposeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDComposeData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDComposeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDComposeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDComposeInfo::GetClassData() const { return &_class_data_; }


void TDComposeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDComposeInfo*>(&to_msg);
  auto& from = static_cast<const TDComposeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDComposeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDComposeInfo::CopyFrom(const TDComposeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDComposeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDComposeInfo::IsInitialized() const {
  return true;
}

void TDComposeInfo::InternalSwap(TDComposeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDComposeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[16]);
}

// ===================================================================

class TDComposeData::_Internal {
 public:
};

void TDComposeData::clear_award() {
  _impl_.award_.Clear();
}
TDComposeData::TDComposeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDComposeData)
}
TDComposeData::TDComposeData(const TDComposeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDComposeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.award_){from._impl_.award_}
    , decltype(_impl_.routeid_){}
    , decltype(_impl_.drawingid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.routeid_, &from._impl_.routeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.drawingid_) -
    reinterpret_cast<char*>(&_impl_.routeid_)) + sizeof(_impl_.drawingid_));
  // @@protoc_insertion_point(copy_constructor:msg.TDComposeData)
}

inline void TDComposeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){arena}
    , decltype(_impl_.award_){arena}
    , decltype(_impl_.routeid_){0}
    , decltype(_impl_.drawingid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDComposeData::~TDComposeData() {
  // @@protoc_insertion_point(destructor:msg.TDComposeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDComposeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.award_.~RepeatedPtrField();
}

void TDComposeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDComposeData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDComposeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumes_.Clear();
  _impl_.award_.Clear();
  ::memset(&_impl_.routeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.drawingid_) -
      reinterpret_cast<char*>(&_impl_.routeid_)) + sizeof(_impl_.drawingid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDComposeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 RouteId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.routeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DrawingId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.drawingid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDConsume Consumes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDComposeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDComposeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RouteId = 1;
  if (this->_internal_routeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_routeid(), target);
  }

  // int32 DrawingId = 2;
  if (this->_internal_drawingid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_drawingid(), target);
  }

  // repeated .msg.TDConsume Consumes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.TDItem Award = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_award_size()); i < n; i++) {
    const auto& repfield = this->_internal_award(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDComposeData)
  return target;
}

size_t TDComposeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDComposeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 3;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDItem Award = 4;
  total_size += 1UL * this->_internal_award_size();
  for (const auto& msg : this->_impl_.award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 RouteId = 1;
  if (this->_internal_routeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_routeid());
  }

  // int32 DrawingId = 2;
  if (this->_internal_drawingid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_drawingid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDComposeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDComposeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDComposeData::GetClassData() const { return &_class_data_; }


void TDComposeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDComposeData*>(&to_msg);
  auto& from = static_cast<const TDComposeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDComposeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_impl_.award_.MergeFrom(from._impl_.award_);
  if (from._internal_routeid() != 0) {
    _this->_internal_set_routeid(from._internal_routeid());
  }
  if (from._internal_drawingid() != 0) {
    _this->_internal_set_drawingid(from._internal_drawingid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDComposeData::CopyFrom(const TDComposeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDComposeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDComposeData::IsInitialized() const {
  return true;
}

void TDComposeData::InternalSwap(TDComposeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  _impl_.award_.InternalSwap(&other->_impl_.award_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDComposeData, _impl_.drawingid_)
      + sizeof(TDComposeData::_impl_.drawingid_)
      - PROTOBUF_FIELD_OFFSET(TDComposeData, _impl_.routeid_)>(
          reinterpret_cast<char*>(&_impl_.routeid_),
          reinterpret_cast<char*>(&other->_impl_.routeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDComposeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[17]);
}

// ===================================================================

class TDSkillInfo::_Internal {
 public:
};

TDSkillInfo::TDSkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDSkillInfo)
}
TDSkillInfo::TDSkillInfo(const TDSkillInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDSkillInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDSkillInfo)
}

inline void TDSkillInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDSkillInfo::~TDSkillInfo() {
  // @@protoc_insertion_point(destructor:msg.TDSkillInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDSkillInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDSkillInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDSkillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDSkillInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDSkillInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDSkillData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDSkillInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDSkillInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDSkillData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDSkillInfo)
  return target;
}

size_t TDSkillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDSkillInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDSkillData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDSkillInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDSkillInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDSkillInfo::GetClassData() const { return &_class_data_; }


void TDSkillInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDSkillInfo*>(&to_msg);
  auto& from = static_cast<const TDSkillInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDSkillInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDSkillInfo::CopyFrom(const TDSkillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDSkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDSkillInfo::IsInitialized() const {
  return true;
}

void TDSkillInfo::InternalSwap(TDSkillInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDSkillInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[18]);
}

// ===================================================================

class SkillItem::_Internal {
 public:
};

SkillItem::SkillItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.SkillItem)
}
SkillItem::SkillItem(const SkillItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.SkillItem)
}

inline void SkillItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkillItem::~SkillItem() {
  // @@protoc_insertion_point(destructor:msg.SkillItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.value_.Destroy();
}

void SkillItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.SkillItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDSKILLTYPE Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::TDSKILLTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.SkillItem.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.SkillItem.Desc"));
        } else
          goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.SkillItem.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SkillItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .msg.TDSKILLTYPE Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.SkillItem.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string Desc = 5;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.SkillItem.Desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.SkillItem.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SkillItem)
  return target;
}

size_t SkillItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.SkillItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .msg.TDSKILLTYPE Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillItem::GetClassData() const { return &_class_data_; }


void SkillItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillItem*>(&to_msg);
  auto& from = static_cast<const SkillItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.SkillItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillItem::CopyFrom(const SkillItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.SkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillItem::IsInitialized() const {
  return true;
}

void SkillItem::InternalSwap(SkillItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillItem, _impl_.level_)
      + sizeof(SkillItem::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(SkillItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[19]);
}

// ===================================================================

class TDSkillData::_Internal {
 public:
};

TDSkillData::TDSkillData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDSkillData)
}
TDSkillData::TDSkillData(const TDSkillData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDSkillData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.TDSkillData)
}

inline void TDSkillData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.itemid_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDSkillData::~TDSkillData() {
  // @@protoc_insertion_point(destructor:msg.TDSkillData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDSkillData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
}

void TDSkillData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDSkillData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDSkillData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDSkillData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ItemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDITEMTYPE Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::TDITEMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.SkillItem Skills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDSkillData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDSkillData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 ItemId = 2;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemid(), target);
  }

  // .msg.TDITEMTYPE Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // int32 Level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // repeated .msg.SkillItem Skills = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDSkillData)
  return target;
}

size_t TDSkillData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDSkillData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.SkillItem Skills = 5;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 ItemId = 2;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemid());
  }

  // .msg.TDITEMTYPE Type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDSkillData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDSkillData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDSkillData::GetClassData() const { return &_class_data_; }


void TDSkillData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDSkillData*>(&to_msg);
  auto& from = static_cast<const TDSkillData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDSkillData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDSkillData::CopyFrom(const TDSkillData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDSkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDSkillData::IsInitialized() const {
  return true;
}

void TDSkillData::InternalSwap(TDSkillData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDSkillData, _impl_.level_)
      + sizeof(TDSkillData::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TDSkillData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDSkillData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[20]);
}

// ===================================================================

class TDStageInfo::_Internal {
 public:
};

TDStageInfo::TDStageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDStageInfo)
}
TDStageInfo::TDStageInfo(const TDStageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDStageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDStageInfo)
}

inline void TDStageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDStageInfo::~TDStageInfo() {
  // @@protoc_insertion_point(destructor:msg.TDStageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDStageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDStageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDStageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDStageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDStageData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDStageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDStageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDStageData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDStageInfo)
  return target;
}

size_t TDStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDStageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDStageData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDStageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDStageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDStageInfo::GetClassData() const { return &_class_data_; }


void TDStageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDStageInfo*>(&to_msg);
  auto& from = static_cast<const TDStageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDStageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDStageInfo::CopyFrom(const TDStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDStageInfo::IsInitialized() const {
  return true;
}

void TDStageInfo::InternalSwap(TDStageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDStageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[21]);
}

// ===================================================================

class TDStageData::_Internal {
 public:
};

void TDStageData::clear_awards() {
  _impl_.awards_.Clear();
}
TDStageData::TDStageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDStageData)
}
TDStageData::TDStageData(const TDStageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDStageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , decltype(_impl_.itemids_){from._impl_.itemids_}
    , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.TDStageData)
}

inline void TDStageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , decltype(_impl_.itemids_){arena}
    , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TDStageData::~TDStageData() {
  // @@protoc_insertion_point(destructor:msg.TDStageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDStageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
  _impl_.itemids_.~RepeatedField();
  _impl_.name_.Destroy();
}

void TDStageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDStageData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDStageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.itemids_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDStageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDStageData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Awards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ItemIds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_itemids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_itemids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDStageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDStageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDStageData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // repeated .msg.TDItem Awards = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 ItemIds = 5;
  {
    int byte_size = _impl_._itemids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_itemids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDStageData)
  return target;
}

size_t TDStageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDStageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 4;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ItemIds = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.itemids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._itemids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDStageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDStageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDStageData::GetClassData() const { return &_class_data_; }


void TDStageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDStageData*>(&to_msg);
  auto& from = static_cast<const TDStageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDStageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_impl_.itemids_.MergeFrom(from._impl_.itemids_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDStageData::CopyFrom(const TDStageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDStageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDStageData::IsInitialized() const {
  return true;
}

void TDStageData::InternalSwap(TDStageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  _impl_.itemids_.InternalSwap(&other->_impl_.itemids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDStageData, _impl_.level_)
      + sizeof(TDStageData::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TDStageData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDStageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[22]);
}

// ===================================================================

class TDItemInfo::_Internal {
 public:
};

TDItemInfo::TDItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDItemInfo)
}
TDItemInfo::TDItemInfo(const TDItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){from._impl_.datas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDItemInfo)
}

inline void TDItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDItemInfo::~TDItemInfo() {
  // @@protoc_insertion_point(destructor:msg.TDItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datas_.~RepeatedPtrField();
}

void TDItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDItemData Datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDItemData Datas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datas_size()); i < n; i++) {
    const auto& repfield = this->_internal_datas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDItemInfo)
  return target;
}

size_t TDItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItemData Datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->_impl_.datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDItemInfo::GetClassData() const { return &_class_data_; }


void TDItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDItemInfo*>(&to_msg);
  auto& from = static_cast<const TDItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datas_.MergeFrom(from._impl_.datas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDItemInfo::CopyFrom(const TDItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDItemInfo::IsInitialized() const {
  return true;
}

void TDItemInfo::InternalSwap(TDItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datas_.InternalSwap(&other->_impl_.datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[23]);
}

// ===================================================================

class TDItemData::_Internal {
 public:
};

TDItemData::TDItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDItemData)
}
TDItemData::TDItemData(const TDItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemids_){from._impl_.itemids_}
    , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
    , decltype(_impl_.chessid_){from._impl_.chessid_}
    , /*decltype(_impl_._chessid_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.icon_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.initlevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    _this->_impl_.icon_.Set(from._internal_icon(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initlevel_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.initlevel_));
  // @@protoc_insertion_point(copy_constructor:msg.TDItemData)
}

inline void TDItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemids_){arena}
    , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
    , decltype(_impl_.chessid_){arena}
    , /*decltype(_impl_._chessid_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.icon_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.cost_){0}
    , decltype(_impl_.initlevel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TDItemData::~TDItemData() {
  // @@protoc_insertion_point(destructor:msg.TDItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemids_.~RepeatedField();
  _impl_.chessid_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.icon_.Destroy();
}

void TDItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemids_.Clear();
  _impl_.chessid_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.icon_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.initlevel_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.initlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDITEMTYPE Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::TDITEMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDItemData.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDItemData.Desc"));
        } else
          goto handle_unusual;
        continue;
      // int32 Quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Icon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TDItemData.Icon"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ItemIds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_itemids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_itemids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ChessId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chessid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_chessid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 InitLevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.initlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .msg.TDITEMTYPE Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDItemData.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string Desc = 4;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDItemData.Desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // int32 Quality = 5;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_quality(), target);
  }

  // string Icon = 6;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TDItemData.Icon");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_icon(), target);
  }

  // repeated int32 ItemIds = 7;
  {
    int byte_size = _impl_._itemids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_itemids(), byte_size, target);
    }
  }

  // repeated int32 ChessId = 8;
  {
    int byte_size = _impl_._chessid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_chessid(), byte_size, target);
    }
  }

  // int32 Cost = 9;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_cost(), target);
  }

  // int32 InitLevel = 10;
  if (this->_internal_initlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_initlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDItemData)
  return target;
}

size_t TDItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ItemIds = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.itemids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._itemids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ChessId = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chessid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Desc = 4;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string Icon = 6;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .msg.TDITEMTYPE Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Quality = 5;
  if (this->_internal_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
  }

  // int32 Cost = 9;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost());
  }

  // int32 InitLevel = 10;
  if (this->_internal_initlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_initlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDItemData::GetClassData() const { return &_class_data_; }


void TDItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDItemData*>(&to_msg);
  auto& from = static_cast<const TDItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemids_.MergeFrom(from._impl_.itemids_);
  _this->_impl_.chessid_.MergeFrom(from._impl_.chessid_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_icon().empty()) {
    _this->_internal_set_icon(from._internal_icon());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_initlevel() != 0) {
    _this->_internal_set_initlevel(from._internal_initlevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDItemData::CopyFrom(const TDItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDItemData::IsInitialized() const {
  return true;
}

void TDItemData::InternalSwap(TDItemData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemids_.InternalSwap(&other->_impl_.itemids_);
  _impl_.chessid_.InternalSwap(&other->_impl_.chessid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icon_, lhs_arena,
      &other->_impl_.icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDItemData, _impl_.initlevel_)
      + sizeof(TDItemData::_impl_.initlevel_)
      - PROTOBUF_FIELD_OFFSET(TDItemData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[24]);
}

// ===================================================================

class CSReqTDGetOnHookAward::_Internal {
 public:
};

CSReqTDGetOnHookAward::CSReqTDGetOnHookAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSReqTDGetOnHookAward)
}
CSReqTDGetOnHookAward::CSReqTDGetOnHookAward(const CSReqTDGetOnHookAward& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSReqTDGetOnHookAward* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSReqTDGetOnHookAward)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqTDGetOnHookAward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqTDGetOnHookAward::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSReqTDGetOnHookAward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[25]);
}

// ===================================================================

CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse() {}
CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::MergeFrom(const CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[26]);
}

// ===================================================================

class CSRspTDGetOnHookAward::_Internal {
 public:
};

void CSRspTDGetOnHookAward::clear_awards() {
  _impl_.awards_.Clear();
}
CSRspTDGetOnHookAward::CSRspTDGetOnHookAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSRspTDGetOnHookAward::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSRspTDGetOnHookAward)
}
CSRspTDGetOnHookAward::CSRspTDGetOnHookAward(const CSRspTDGetOnHookAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspTDGetOnHookAward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , /*decltype(_impl_.onhooktimerecord_)*/{}
    , decltype(_impl_.onhooktime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.onhooktimerecord_.MergeFrom(from._impl_.onhooktimerecord_);
  _this->_impl_.onhooktime_ = from._impl_.onhooktime_;
  // @@protoc_insertion_point(copy_constructor:msg.CSRspTDGetOnHookAward)
}

inline void CSRspTDGetOnHookAward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , /*decltype(_impl_.onhooktimerecord_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.onhooktime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspTDGetOnHookAward::~CSRspTDGetOnHookAward() {
  // @@protoc_insertion_point(destructor:msg.CSRspTDGetOnHookAward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSRspTDGetOnHookAward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
  _impl_.onhooktimerecord_.Destruct();
  _impl_.onhooktimerecord_.~MapField();
}

void CSRspTDGetOnHookAward::ArenaDtor(void* object) {
  CSRspTDGetOnHookAward* _this = reinterpret_cast< CSRspTDGetOnHookAward* >(object);
  _this->_impl_.onhooktimerecord_.Destruct();
}
void CSRspTDGetOnHookAward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspTDGetOnHookAward::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspTDGetOnHookAward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.onhooktimerecord_.Clear();
  _impl_.onhooktime_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspTDGetOnHookAward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDItem Awards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 OnHookTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.onhooktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, int64> OnHookTimeRecord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.onhooktimerecord_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspTDGetOnHookAward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspTDGetOnHookAward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 OnHookTime = 2;
  if (this->_internal_onhooktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_onhooktime(), target);
  }

  // map<int64, int64> OnHookTimeRecord = 3;
  if (!this->_internal_onhooktimerecord().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_onhooktimerecord();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspTDGetOnHookAward)
  return target;
}

size_t CSRspTDGetOnHookAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspTDGetOnHookAward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 1;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int64, int64> OnHookTimeRecord = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_onhooktimerecord_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_onhooktimerecord().begin();
      it != this->_internal_onhooktimerecord().end(); ++it) {
    total_size += CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 OnHookTime = 2;
  if (this->_internal_onhooktime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_onhooktime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspTDGetOnHookAward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspTDGetOnHookAward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspTDGetOnHookAward::GetClassData() const { return &_class_data_; }


void CSRspTDGetOnHookAward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspTDGetOnHookAward*>(&to_msg);
  auto& from = static_cast<const CSRspTDGetOnHookAward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspTDGetOnHookAward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_impl_.onhooktimerecord_.MergeFrom(from._impl_.onhooktimerecord_);
  if (from._internal_onhooktime() != 0) {
    _this->_internal_set_onhooktime(from._internal_onhooktime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspTDGetOnHookAward::CopyFrom(const CSRspTDGetOnHookAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspTDGetOnHookAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspTDGetOnHookAward::IsInitialized() const {
  return true;
}

void CSRspTDGetOnHookAward::InternalSwap(CSRspTDGetOnHookAward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  _impl_.onhooktimerecord_.InternalSwap(&other->_impl_.onhooktimerecord_);
  swap(_impl_.onhooktime_, other->_impl_.onhooktime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspTDGetOnHookAward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[27]);
}

// ===================================================================

class CsReqTDDraw::_Internal {
 public:
};

CsReqTDDraw::CsReqTDDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CsReqTDDraw)
}
CsReqTDDraw::CsReqTDDraw(const CsReqTDDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CsReqTDDraw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.poolid_){}
    , decltype(_impl_.ten_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.poolid_, &from._impl_.poolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ten_) -
    reinterpret_cast<char*>(&_impl_.poolid_)) + sizeof(_impl_.ten_));
  // @@protoc_insertion_point(copy_constructor:msg.CsReqTDDraw)
}

inline void CsReqTDDraw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.poolid_){0}
    , decltype(_impl_.ten_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CsReqTDDraw::~CsReqTDDraw() {
  // @@protoc_insertion_point(destructor:msg.CsReqTDDraw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CsReqTDDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CsReqTDDraw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CsReqTDDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CsReqTDDraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ten_) -
      reinterpret_cast<char*>(&_impl_.poolid_)) + sizeof(_impl_.ten_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsReqTDDraw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PoolId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Ten = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CsReqTDDraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CsReqTDDraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PoolId = 1;
  if (this->_internal_poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_poolid(), target);
  }

  // bool Ten = 2;
  if (this->_internal_ten() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ten(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CsReqTDDraw)
  return target;
}

size_t CsReqTDDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CsReqTDDraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PoolId = 1;
  if (this->_internal_poolid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_poolid());
  }

  // bool Ten = 2;
  if (this->_internal_ten() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CsReqTDDraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CsReqTDDraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CsReqTDDraw::GetClassData() const { return &_class_data_; }


void CsReqTDDraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CsReqTDDraw*>(&to_msg);
  auto& from = static_cast<const CsReqTDDraw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CsReqTDDraw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_poolid() != 0) {
    _this->_internal_set_poolid(from._internal_poolid());
  }
  if (from._internal_ten() != 0) {
    _this->_internal_set_ten(from._internal_ten());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CsReqTDDraw::CopyFrom(const CsReqTDDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CsReqTDDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsReqTDDraw::IsInitialized() const {
  return true;
}

void CsReqTDDraw::InternalSwap(CsReqTDDraw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CsReqTDDraw, _impl_.ten_)
      + sizeof(CsReqTDDraw::_impl_.ten_)
      - PROTOBUF_FIELD_OFFSET(CsReqTDDraw, _impl_.poolid_)>(
          reinterpret_cast<char*>(&_impl_.poolid_),
          reinterpret_cast<char*>(&other->_impl_.poolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CsReqTDDraw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[28]);
}

// ===================================================================

class CsRspTDDraw::_Internal {
 public:
};

void CsRspTDDraw::clear_awards() {
  _impl_.awards_.Clear();
}
CsRspTDDraw::CsRspTDDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CsRspTDDraw)
}
CsRspTDDraw::CsRspTDDraw(const CsRspTDDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CsRspTDDraw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , decltype(_impl_.consumes_){from._impl_.consumes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CsRspTDDraw)
}

inline void CsRspTDDraw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , decltype(_impl_.consumes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CsRspTDDraw::~CsRspTDDraw() {
  // @@protoc_insertion_point(destructor:msg.CsRspTDDraw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CsRspTDDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
  _impl_.consumes_.~RepeatedPtrField();
}

void CsRspTDDraw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CsRspTDDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CsRspTDDraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.consumes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsRspTDDraw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDItem Awards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDConsume Consumes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CsRspTDDraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CsRspTDDraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.TDConsume Consumes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CsRspTDDraw)
  return target;
}

size_t CsRspTDDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CsRspTDDraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Awards = 2;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDConsume Consumes = 3;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CsRspTDDraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CsRspTDDraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CsRspTDDraw::GetClassData() const { return &_class_data_; }


void CsRspTDDraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CsRspTDDraw*>(&to_msg);
  auto& from = static_cast<const CsRspTDDraw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CsRspTDDraw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CsRspTDDraw::CopyFrom(const CsRspTDDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CsRspTDDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsRspTDDraw::IsInitialized() const {
  return true;
}

void CsRspTDDraw::InternalSwap(CsRspTDDraw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CsRspTDDraw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[29]);
}

// ===================================================================

class CsReqTDBuyCard::_Internal {
 public:
};

CsReqTDBuyCard::CsReqTDBuyCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CsReqTDBuyCard)
}
CsReqTDBuyCard::CsReqTDBuyCard(const CsReqTDBuyCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CsReqTDBuyCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cardcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cardcount_ = from._impl_.cardcount_;
  // @@protoc_insertion_point(copy_constructor:msg.CsReqTDBuyCard)
}

inline void CsReqTDBuyCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cardcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CsReqTDBuyCard::~CsReqTDBuyCard() {
  // @@protoc_insertion_point(destructor:msg.CsReqTDBuyCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CsReqTDBuyCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CsReqTDBuyCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CsReqTDBuyCard::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CsReqTDBuyCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cardcount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsReqTDBuyCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CardCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cardcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CsReqTDBuyCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CsReqTDBuyCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CardCount = 1;
  if (this->_internal_cardcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CsReqTDBuyCard)
  return target;
}

size_t CsReqTDBuyCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CsReqTDBuyCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CardCount = 1;
  if (this->_internal_cardcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cardcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CsReqTDBuyCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CsReqTDBuyCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CsReqTDBuyCard::GetClassData() const { return &_class_data_; }


void CsReqTDBuyCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CsReqTDBuyCard*>(&to_msg);
  auto& from = static_cast<const CsReqTDBuyCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CsReqTDBuyCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cardcount() != 0) {
    _this->_internal_set_cardcount(from._internal_cardcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CsReqTDBuyCard::CopyFrom(const CsReqTDBuyCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CsReqTDBuyCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsReqTDBuyCard::IsInitialized() const {
  return true;
}

void CsReqTDBuyCard::InternalSwap(CsReqTDBuyCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cardcount_, other->_impl_.cardcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CsReqTDBuyCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[30]);
}

// ===================================================================

class CsRspTDBuyCard::_Internal {
 public:
  static const ::msg::TDBuy& buycard(const CsRspTDBuyCard* msg);
};

const ::msg::TDBuy&
CsRspTDBuyCard::_Internal::buycard(const CsRspTDBuyCard* msg) {
  return *msg->_impl_.buycard_;
}
CsRspTDBuyCard::CsRspTDBuyCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CsRspTDBuyCard)
}
CsRspTDBuyCard::CsRspTDBuyCard(const CsRspTDBuyCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CsRspTDBuyCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buycard_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_buycard()) {
    _this->_impl_.buycard_ = new ::msg::TDBuy(*from._impl_.buycard_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CsRspTDBuyCard)
}

inline void CsRspTDBuyCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buycard_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CsRspTDBuyCard::~CsRspTDBuyCard() {
  // @@protoc_insertion_point(destructor:msg.CsRspTDBuyCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CsRspTDBuyCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.buycard_;
}

void CsRspTDBuyCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CsRspTDBuyCard::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CsRspTDBuyCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.buycard_ != nullptr) {
    delete _impl_.buycard_;
  }
  _impl_.buycard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsRspTDBuyCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDBuy BuyCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buycard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CsRspTDBuyCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CsRspTDBuyCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDBuy BuyCard = 1;
  if (this->_internal_has_buycard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::buycard(this),
        _Internal::buycard(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CsRspTDBuyCard)
  return target;
}

size_t CsRspTDBuyCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CsRspTDBuyCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDBuy BuyCard = 1;
  if (this->_internal_has_buycard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buycard_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CsRspTDBuyCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CsRspTDBuyCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CsRspTDBuyCard::GetClassData() const { return &_class_data_; }


void CsRspTDBuyCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CsRspTDBuyCard*>(&to_msg);
  auto& from = static_cast<const CsRspTDBuyCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CsRspTDBuyCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_buycard()) {
    _this->_internal_mutable_buycard()->::msg::TDBuy::MergeFrom(
        from._internal_buycard());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CsRspTDBuyCard::CopyFrom(const CsRspTDBuyCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CsRspTDBuyCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsRspTDBuyCard::IsInitialized() const {
  return true;
}

void CsRspTDBuyCard::InternalSwap(CsRspTDBuyCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.buycard_, other->_impl_.buycard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CsRspTDBuyCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[31]);
}

// ===================================================================

class CSNtfTDPlayerInfo::_Internal {
 public:
  static const ::msg::TDPlayerInfo& playerinfo(const CSNtfTDPlayerInfo* msg);
};

const ::msg::TDPlayerInfo&
CSNtfTDPlayerInfo::_Internal::playerinfo(const CSNtfTDPlayerInfo* msg) {
  return *msg->_impl_.playerinfo_;
}
CSNtfTDPlayerInfo::CSNtfTDPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfTDPlayerInfo)
}
CSNtfTDPlayerInfo::CSNtfTDPlayerInfo(const CSNtfTDPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfTDPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::msg::TDPlayerInfo(*from._impl_.playerinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfTDPlayerInfo)
}

inline void CSNtfTDPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSNtfTDPlayerInfo::~CSNtfTDPlayerInfo() {
  // @@protoc_insertion_point(destructor:msg.CSNtfTDPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSNtfTDPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void CSNtfTDPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfTDPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfTDPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfTDPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDPlayerInfo PlayerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfTDPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfTDPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDPlayerInfo PlayerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfTDPlayerInfo)
  return target;
}

size_t CSNtfTDPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfTDPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDPlayerInfo PlayerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfTDPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfTDPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfTDPlayerInfo::GetClassData() const { return &_class_data_; }


void CSNtfTDPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfTDPlayerInfo*>(&to_msg);
  auto& from = static_cast<const CSNtfTDPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfTDPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::msg::TDPlayerInfo::MergeFrom(
        from._internal_playerinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfTDPlayerInfo::CopyFrom(const CSNtfTDPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfTDPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfTDPlayerInfo::IsInitialized() const {
  return true;
}

void CSNtfTDPlayerInfo::InternalSwap(CSNtfTDPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerinfo_, other->_impl_.playerinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfTDPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[32]);
}

// ===================================================================

class CSReqTDSetCardGroup::_Internal {
 public:
  static const ::msg::TDCardGroup& cardgroup(const CSReqTDSetCardGroup* msg);
};

const ::msg::TDCardGroup&
CSReqTDSetCardGroup::_Internal::cardgroup(const CSReqTDSetCardGroup* msg) {
  return *msg->_impl_.cardgroup_;
}
void CSReqTDSetCardGroup::clear_cardgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroup_ != nullptr) {
    delete _impl_.cardgroup_;
  }
  _impl_.cardgroup_ = nullptr;
}
CSReqTDSetCardGroup::CSReqTDSetCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqTDSetCardGroup)
}
CSReqTDSetCardGroup::CSReqTDSetCardGroup(const CSReqTDSetCardGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqTDSetCardGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cardgroup_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cardgroup()) {
    _this->_impl_.cardgroup_ = new ::msg::TDCardGroup(*from._impl_.cardgroup_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqTDSetCardGroup)
}

inline void CSReqTDSetCardGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cardgroup_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSReqTDSetCardGroup::~CSReqTDSetCardGroup() {
  // @@protoc_insertion_point(destructor:msg.CSReqTDSetCardGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqTDSetCardGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cardgroup_;
}

void CSReqTDSetCardGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqTDSetCardGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqTDSetCardGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cardgroup_ != nullptr) {
    delete _impl_.cardgroup_;
  }
  _impl_.cardgroup_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqTDSetCardGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDITEMTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::TDITEMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.TDCardGroup CardGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqTDSetCardGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqTDSetCardGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDITEMTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .msg.TDCardGroup CardGroup = 2;
  if (this->_internal_has_cardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cardgroup(this),
        _Internal::cardgroup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqTDSetCardGroup)
  return target;
}

size_t CSReqTDSetCardGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqTDSetCardGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDCardGroup CardGroup = 2;
  if (this->_internal_has_cardgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cardgroup_);
  }

  // .msg.TDITEMTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqTDSetCardGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqTDSetCardGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqTDSetCardGroup::GetClassData() const { return &_class_data_; }


void CSReqTDSetCardGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqTDSetCardGroup*>(&to_msg);
  auto& from = static_cast<const CSReqTDSetCardGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqTDSetCardGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cardgroup()) {
    _this->_internal_mutable_cardgroup()->::msg::TDCardGroup::MergeFrom(
        from._internal_cardgroup());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqTDSetCardGroup::CopyFrom(const CSReqTDSetCardGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqTDSetCardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqTDSetCardGroup::IsInitialized() const {
  return true;
}

void CSReqTDSetCardGroup::InternalSwap(CSReqTDSetCardGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqTDSetCardGroup, _impl_.type_)
      + sizeof(CSReqTDSetCardGroup::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CSReqTDSetCardGroup, _impl_.cardgroup_)>(
          reinterpret_cast<char*>(&_impl_.cardgroup_),
          reinterpret_cast<char*>(&other->_impl_.cardgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqTDSetCardGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[33]);
}

// ===================================================================

class CSRspTDSetCardGroup::_Internal {
 public:
};

CSRspTDSetCardGroup::CSRspTDSetCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.CSRspTDSetCardGroup)
}
CSRspTDSetCardGroup::CSRspTDSetCardGroup(const CSRspTDSetCardGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CSRspTDSetCardGroup* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspTDSetCardGroup)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspTDSetCardGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspTDSetCardGroup::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSRspTDSetCardGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[34]);
}

// ===================================================================

class CSReqTDLevelUp::_Internal {
 public:
  static const ::msg::TDItemId& id(const CSReqTDLevelUp* msg);
  static const ::msg::TDItem& blueprint(const CSReqTDLevelUp* msg);
  static const ::msg::TDItemId& chessid(const CSReqTDLevelUp* msg);
};

const ::msg::TDItemId&
CSReqTDLevelUp::_Internal::id(const CSReqTDLevelUp* msg) {
  return *msg->_impl_.id_;
}
const ::msg::TDItem&
CSReqTDLevelUp::_Internal::blueprint(const CSReqTDLevelUp* msg) {
  return *msg->_impl_.blueprint_;
}
const ::msg::TDItemId&
CSReqTDLevelUp::_Internal::chessid(const CSReqTDLevelUp* msg) {
  return *msg->_impl_.chessid_;
}
void CSReqTDLevelUp::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
void CSReqTDLevelUp::clear_blueprint() {
  if (GetArenaForAllocation() == nullptr && _impl_.blueprint_ != nullptr) {
    delete _impl_.blueprint_;
  }
  _impl_.blueprint_ = nullptr;
}
void CSReqTDLevelUp::clear_chessid() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessid_ != nullptr) {
    delete _impl_.chessid_;
  }
  _impl_.chessid_ = nullptr;
}
CSReqTDLevelUp::CSReqTDLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqTDLevelUp)
}
CSReqTDLevelUp::CSReqTDLevelUp(const CSReqTDLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqTDLevelUp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.blueprint_){nullptr}
    , decltype(_impl_.chessid_){nullptr}
    , decltype(_impl_.equip_){}
    , decltype(_impl_.lvuptype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slot().empty()) {
    _this->_impl_.slot_.Set(from._internal_slot(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::msg::TDItemId(*from._impl_.id_);
  }
  if (from._internal_has_blueprint()) {
    _this->_impl_.blueprint_ = new ::msg::TDItem(*from._impl_.blueprint_);
  }
  if (from._internal_has_chessid()) {
    _this->_impl_.chessid_ = new ::msg::TDItemId(*from._impl_.chessid_);
  }
  ::memcpy(&_impl_.equip_, &from._impl_.equip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lvuptype_) -
    reinterpret_cast<char*>(&_impl_.equip_)) + sizeof(_impl_.lvuptype_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqTDLevelUp)
}

inline void CSReqTDLevelUp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){arena}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.blueprint_){nullptr}
    , decltype(_impl_.chessid_){nullptr}
    , decltype(_impl_.equip_){false}
    , decltype(_impl_.lvuptype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSReqTDLevelUp::~CSReqTDLevelUp() {
  // @@protoc_insertion_point(destructor:msg.CSReqTDLevelUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqTDLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.slot_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.blueprint_;
  if (this != internal_default_instance()) delete _impl_.chessid_;
}

void CSReqTDLevelUp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqTDLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqTDLevelUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumes_.Clear();
  _impl_.slot_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blueprint_ != nullptr) {
    delete _impl_.blueprint_;
  }
  _impl_.blueprint_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chessid_ != nullptr) {
    delete _impl_.chessid_;
  }
  _impl_.chessid_ = nullptr;
  ::memset(&_impl_.equip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lvuptype_) -
      reinterpret_cast<char*>(&_impl_.equip_)) + sizeof(_impl_.lvuptype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqTDLevelUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDItemId Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Equip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDLEVELUP_TYPE LvUpType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lvuptype(static_cast<::msg::TDLEVELUP_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDConsume Consumes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItem BluePrint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_blueprint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemId ChessId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_slot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqTDLevelUp.Slot"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqTDLevelUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqTDLevelUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDItemId Id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // bool Equip = 2;
  if (this->_internal_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_equip(), target);
  }

  // .msg.TDLEVELUP_TYPE LvUpType = 3;
  if (this->_internal_lvuptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_lvuptype(), target);
  }

  // repeated .msg.TDConsume Consumes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .msg.TDItem BluePrint = 5;
  if (this->_internal_has_blueprint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::blueprint(this),
        _Internal::blueprint(this).GetCachedSize(), target, stream);
  }

  // .msg.TDItemId ChessId = 6;
  if (this->_internal_has_chessid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chessid(this),
        _Internal::chessid(this).GetCachedSize(), target, stream);
  }

  // string Slot = 7;
  if (!this->_internal_slot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot().data(), static_cast<int>(this->_internal_slot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqTDLevelUp.Slot");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqTDLevelUp)
  return target;
}

size_t CSReqTDLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqTDLevelUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 4;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Slot = 7;
  if (!this->_internal_slot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot());
  }

  // .msg.TDItemId Id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // .msg.TDItem BluePrint = 5;
  if (this->_internal_has_blueprint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blueprint_);
  }

  // .msg.TDItemId ChessId = 6;
  if (this->_internal_has_chessid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessid_);
  }

  // bool Equip = 2;
  if (this->_internal_equip() != 0) {
    total_size += 1 + 1;
  }

  // .msg.TDLEVELUP_TYPE LvUpType = 3;
  if (this->_internal_lvuptype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lvuptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqTDLevelUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqTDLevelUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqTDLevelUp::GetClassData() const { return &_class_data_; }


void CSReqTDLevelUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqTDLevelUp*>(&to_msg);
  auto& from = static_cast<const CSReqTDLevelUp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqTDLevelUp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  if (!from._internal_slot().empty()) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::msg::TDItemId::MergeFrom(
        from._internal_id());
  }
  if (from._internal_has_blueprint()) {
    _this->_internal_mutable_blueprint()->::msg::TDItem::MergeFrom(
        from._internal_blueprint());
  }
  if (from._internal_has_chessid()) {
    _this->_internal_mutable_chessid()->::msg::TDItemId::MergeFrom(
        from._internal_chessid());
  }
  if (from._internal_equip() != 0) {
    _this->_internal_set_equip(from._internal_equip());
  }
  if (from._internal_lvuptype() != 0) {
    _this->_internal_set_lvuptype(from._internal_lvuptype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqTDLevelUp::CopyFrom(const CSReqTDLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqTDLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqTDLevelUp::IsInitialized() const {
  return true;
}

void CSReqTDLevelUp::InternalSwap(CSReqTDLevelUp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slot_, lhs_arena,
      &other->_impl_.slot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqTDLevelUp, _impl_.lvuptype_)
      + sizeof(CSReqTDLevelUp::_impl_.lvuptype_)
      - PROTOBUF_FIELD_OFFSET(CSReqTDLevelUp, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqTDLevelUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[35]);
}

// ===================================================================

class CSRspTDLevelUp::_Internal {
 public:
};

void CSRspTDLevelUp::clear_awards() {
  _impl_.awards_.Clear();
}
CSRspTDLevelUp::CSRspTDLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspTDLevelUp)
}
CSRspTDLevelUp::CSRspTDLevelUp(const CSRspTDLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspTDLevelUp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.awards_){from._impl_.awards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspTDLevelUp)
}

inline void CSRspTDLevelUp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){arena}
    , decltype(_impl_.awards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspTDLevelUp::~CSRspTDLevelUp() {
  // @@protoc_insertion_point(destructor:msg.CSRspTDLevelUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspTDLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.awards_.~RepeatedPtrField();
}

void CSRspTDLevelUp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspTDLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspTDLevelUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumes_.Clear();
  _impl_.awards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspTDLevelUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDConsume Consumes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Awards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspTDLevelUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspTDLevelUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.TDItem Awards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspTDLevelUp)
  return target;
}

size_t CSRspTDLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspTDLevelUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 1;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDItem Awards = 2;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspTDLevelUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspTDLevelUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspTDLevelUp::GetClassData() const { return &_class_data_; }


void CSRspTDLevelUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspTDLevelUp*>(&to_msg);
  auto& from = static_cast<const CSRspTDLevelUp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspTDLevelUp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspTDLevelUp::CopyFrom(const CSRspTDLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspTDLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspTDLevelUp::IsInitialized() const {
  return true;
}

void CSRspTDLevelUp::InternalSwap(CSRspTDLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspTDLevelUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[36]);
}

// ===================================================================

class CSReqTDEquip::_Internal {
 public:
  static const ::msg::TDItemId& chessid(const CSReqTDEquip* msg);
  static const ::msg::TDItemId& equipid(const CSReqTDEquip* msg);
};

const ::msg::TDItemId&
CSReqTDEquip::_Internal::chessid(const CSReqTDEquip* msg) {
  return *msg->_impl_.chessid_;
}
const ::msg::TDItemId&
CSReqTDEquip::_Internal::equipid(const CSReqTDEquip* msg) {
  return *msg->_impl_.equipid_;
}
void CSReqTDEquip::clear_chessid() {
  if (GetArenaForAllocation() == nullptr && _impl_.chessid_ != nullptr) {
    delete _impl_.chessid_;
  }
  _impl_.chessid_ = nullptr;
}
void CSReqTDEquip::clear_equipid() {
  if (GetArenaForAllocation() == nullptr && _impl_.equipid_ != nullptr) {
    delete _impl_.equipid_;
  }
  _impl_.equipid_ = nullptr;
}
CSReqTDEquip::CSReqTDEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSReqTDEquip)
}
CSReqTDEquip::CSReqTDEquip(const CSReqTDEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqTDEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){}
    , decltype(_impl_.chessid_){nullptr}
    , decltype(_impl_.equipid_){nullptr}
    , decltype(_impl_.takeoff_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slot().empty()) {
    _this->_impl_.slot_.Set(from._internal_slot(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chessid()) {
    _this->_impl_.chessid_ = new ::msg::TDItemId(*from._impl_.chessid_);
  }
  if (from._internal_has_equipid()) {
    _this->_impl_.equipid_ = new ::msg::TDItemId(*from._impl_.equipid_);
  }
  _this->_impl_.takeoff_ = from._impl_.takeoff_;
  // @@protoc_insertion_point(copy_constructor:msg.CSReqTDEquip)
}

inline void CSReqTDEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){}
    , decltype(_impl_.chessid_){nullptr}
    , decltype(_impl_.equipid_){nullptr}
    , decltype(_impl_.takeoff_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSReqTDEquip::~CSReqTDEquip() {
  // @@protoc_insertion_point(destructor:msg.CSReqTDEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSReqTDEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slot_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chessid_;
  if (this != internal_default_instance()) delete _impl_.equipid_;
}

void CSReqTDEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqTDEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqTDEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slot_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.chessid_ != nullptr) {
    delete _impl_.chessid_;
  }
  _impl_.chessid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.equipid_ != nullptr) {
    delete _impl_.equipid_;
  }
  _impl_.equipid_ = nullptr;
  _impl_.takeoff_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqTDEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDItemId ChessId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqTDEquip.Slot"));
        } else
          goto handle_unusual;
        continue;
      // bool TakeOff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.takeoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemId EquipId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqTDEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqTDEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDItemId ChessId = 1;
  if (this->_internal_has_chessid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chessid(this),
        _Internal::chessid(this).GetCachedSize(), target, stream);
  }

  // string Slot = 2;
  if (!this->_internal_slot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot().data(), static_cast<int>(this->_internal_slot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqTDEquip.Slot");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slot(), target);
  }

  // bool TakeOff = 3;
  if (this->_internal_takeoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_takeoff(), target);
  }

  // .msg.TDItemId EquipId = 4;
  if (this->_internal_has_equipid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::equipid(this),
        _Internal::equipid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqTDEquip)
  return target;
}

size_t CSReqTDEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqTDEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Slot = 2;
  if (!this->_internal_slot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot());
  }

  // .msg.TDItemId ChessId = 1;
  if (this->_internal_has_chessid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessid_);
  }

  // .msg.TDItemId EquipId = 4;
  if (this->_internal_has_equipid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equipid_);
  }

  // bool TakeOff = 3;
  if (this->_internal_takeoff() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqTDEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqTDEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqTDEquip::GetClassData() const { return &_class_data_; }


void CSReqTDEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqTDEquip*>(&to_msg);
  auto& from = static_cast<const CSReqTDEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqTDEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slot().empty()) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_has_chessid()) {
    _this->_internal_mutable_chessid()->::msg::TDItemId::MergeFrom(
        from._internal_chessid());
  }
  if (from._internal_has_equipid()) {
    _this->_internal_mutable_equipid()->::msg::TDItemId::MergeFrom(
        from._internal_equipid());
  }
  if (from._internal_takeoff() != 0) {
    _this->_internal_set_takeoff(from._internal_takeoff());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqTDEquip::CopyFrom(const CSReqTDEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqTDEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqTDEquip::IsInitialized() const {
  return true;
}

void CSReqTDEquip::InternalSwap(CSReqTDEquip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slot_, lhs_arena,
      &other->_impl_.slot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqTDEquip, _impl_.takeoff_)
      + sizeof(CSReqTDEquip::_impl_.takeoff_)
      - PROTOBUF_FIELD_OFFSET(CSReqTDEquip, _impl_.chessid_)>(
          reinterpret_cast<char*>(&_impl_.chessid_),
          reinterpret_cast<char*>(&other->_impl_.chessid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqTDEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[37]);
}

// ===================================================================

class CSRspTDEquip::_Internal {
 public:
};

void CSRspTDEquip::clear_awards() {
  _impl_.awards_.Clear();
}
CSRspTDEquip::CSRspTDEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSRspTDEquip)
}
CSRspTDEquip::CSRspTDEquip(const CSRspTDEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSRspTDEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.awards_){from._impl_.awards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSRspTDEquip)
}

inline void CSRspTDEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.consumes_){arena}
    , decltype(_impl_.awards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSRspTDEquip::~CSRspTDEquip() {
  // @@protoc_insertion_point(destructor:msg.CSRspTDEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSRspTDEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.awards_.~RepeatedPtrField();
}

void CSRspTDEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSRspTDEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSRspTDEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumes_.Clear();
  _impl_.awards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSRspTDEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.TDConsume Consumes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Awards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSRspTDEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSRspTDEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.TDItem Awards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSRspTDEquip)
  return target;
}

size_t CSRspTDEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSRspTDEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDConsume Consumes = 1;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.TDItem Awards = 2;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSRspTDEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSRspTDEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSRspTDEquip::GetClassData() const { return &_class_data_; }


void CSRspTDEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSRspTDEquip*>(&to_msg);
  auto& from = static_cast<const CSRspTDEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSRspTDEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSRspTDEquip::CopyFrom(const CSRspTDEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSRspTDEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRspTDEquip::IsInitialized() const {
  return true;
}

void CSRspTDEquip::InternalSwap(CSRspTDEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSRspTDEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[38]);
}

// ===================================================================

TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse() {}
TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::MergeFrom(const TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[39]);
}

// ===================================================================

class TDPlayerInfo::_Internal {
 public:
  static const ::msg::TDItemGroup& itemgroup(const TDPlayerInfo* msg);
};

const ::msg::TDItemGroup&
TDPlayerInfo::_Internal::itemgroup(const TDPlayerInfo* msg) {
  return *msg->_impl_.itemgroup_;
}
void TDPlayerInfo::clear_itemgroup() {
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup_ != nullptr) {
    delete _impl_.itemgroup_;
  }
  _impl_.itemgroup_ = nullptr;
}
void TDPlayerInfo::clear_items() {
  _impl_.items_.Clear();
}
TDPlayerInfo::TDPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TDPlayerInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.TDPlayerInfo)
}
TDPlayerInfo::TDPlayerInfo(const TDPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_.onhooktimerecord_)*/{}
    , decltype(_impl_.itemgroup_){nullptr}
    , decltype(_impl_.onhooktime_){}
    , decltype(_impl_.onhookstage_){}
    , decltype(_impl_.laststage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.onhooktimerecord_.MergeFrom(from._impl_.onhooktimerecord_);
  if (from._internal_has_itemgroup()) {
    _this->_impl_.itemgroup_ = new ::msg::TDItemGroup(*from._impl_.itemgroup_);
  }
  ::memcpy(&_impl_.onhooktime_, &from._impl_.onhooktime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.laststage_) -
    reinterpret_cast<char*>(&_impl_.onhooktime_)) + sizeof(_impl_.laststage_));
  // @@protoc_insertion_point(copy_constructor:msg.TDPlayerInfo)
}

inline void TDPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_.onhooktimerecord_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.itemgroup_){nullptr}
    , decltype(_impl_.onhooktime_){int64_t{0}}
    , decltype(_impl_.onhookstage_){0}
    , decltype(_impl_.laststage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDPlayerInfo::~TDPlayerInfo() {
  // @@protoc_insertion_point(destructor:msg.TDPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TDPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.onhooktimerecord_.Destruct();
  _impl_.onhooktimerecord_.~MapField();
  if (this != internal_default_instance()) delete _impl_.itemgroup_;
}

void TDPlayerInfo::ArenaDtor(void* object) {
  TDPlayerInfo* _this = reinterpret_cast< TDPlayerInfo* >(object);
  _this->_impl_.onhooktimerecord_.Destruct();
}
void TDPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.onhooktimerecord_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup_ != nullptr) {
    delete _impl_.itemgroup_;
  }
  _impl_.itemgroup_ = nullptr;
  ::memset(&_impl_.onhooktime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.laststage_) -
      reinterpret_cast<char*>(&_impl_.onhooktime_)) + sizeof(_impl_.laststage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 OnHookTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.onhooktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OnHookStage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.onhookstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastStage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.laststage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemGroup ItemGroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_itemgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.TDItem Items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, int64> OnHookTimeRecord = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.onhooktimerecord_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 OnHookTime = 1;
  if (this->_internal_onhooktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_onhooktime(), target);
  }

  // int32 OnHookStage = 2;
  if (this->_internal_onhookstage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_onhookstage(), target);
  }

  // int32 LastStage = 3;
  if (this->_internal_laststage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_laststage(), target);
  }

  // .msg.TDItemGroup ItemGroup = 4;
  if (this->_internal_has_itemgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::itemgroup(this),
        _Internal::itemgroup(this).GetCachedSize(), target, stream);
  }

  // repeated .msg.TDItem Items = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int64, int64> OnHookTimeRecord = 6;
  if (!this->_internal_onhooktimerecord().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_onhooktimerecord();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDPlayerInfo)
  return target;
}

size_t TDPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TDItem Items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int64, int64> OnHookTimeRecord = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_onhooktimerecord_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_onhooktimerecord().begin();
      it != this->_internal_onhooktimerecord().end(); ++it) {
    total_size += TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .msg.TDItemGroup ItemGroup = 4;
  if (this->_internal_has_itemgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.itemgroup_);
  }

  // int64 OnHookTime = 1;
  if (this->_internal_onhooktime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_onhooktime());
  }

  // int32 OnHookStage = 2;
  if (this->_internal_onhookstage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_onhookstage());
  }

  // int32 LastStage = 3;
  if (this->_internal_laststage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_laststage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDPlayerInfo::GetClassData() const { return &_class_data_; }


void TDPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDPlayerInfo*>(&to_msg);
  auto& from = static_cast<const TDPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.onhooktimerecord_.MergeFrom(from._impl_.onhooktimerecord_);
  if (from._internal_has_itemgroup()) {
    _this->_internal_mutable_itemgroup()->::msg::TDItemGroup::MergeFrom(
        from._internal_itemgroup());
  }
  if (from._internal_onhooktime() != 0) {
    _this->_internal_set_onhooktime(from._internal_onhooktime());
  }
  if (from._internal_onhookstage() != 0) {
    _this->_internal_set_onhookstage(from._internal_onhookstage());
  }
  if (from._internal_laststage() != 0) {
    _this->_internal_set_laststage(from._internal_laststage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDPlayerInfo::CopyFrom(const TDPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDPlayerInfo::IsInitialized() const {
  return true;
}

void TDPlayerInfo::InternalSwap(TDPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.onhooktimerecord_.InternalSwap(&other->_impl_.onhooktimerecord_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDPlayerInfo, _impl_.laststage_)
      + sizeof(TDPlayerInfo::_impl_.laststage_)
      - PROTOBUF_FIELD_OFFSET(TDPlayerInfo, _impl_.itemgroup_)>(
          reinterpret_cast<char*>(&_impl_.itemgroup_),
          reinterpret_cast<char*>(&other->_impl_.itemgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_towerdefense_2eproto_getter, &descriptor_table_towerdefense_2eproto_once,
      file_level_metadata_towerdefense_2eproto[40]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::OnHookOutPutInfo*
Arena::CreateMaybeMessage< ::msg::OnHookOutPutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OnHookOutPutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::OnHookOutPutData*
Arena::CreateMaybeMessage< ::msg::OnHookOutPutData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OnHookOutPutData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDOutPut*
Arena::CreateMaybeMessage< ::msg::TDOutPut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDOutPut >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDConsume*
Arena::CreateMaybeMessage< ::msg::TDConsume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDConsume >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDBuy*
Arena::CreateMaybeMessage< ::msg::TDBuy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDRandCardInfo*
Arena::CreateMaybeMessage< ::msg::TDRandCardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDRandCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDRandCardData*
Arena::CreateMaybeMessage< ::msg::TDRandCardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDRandCardData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDRandPoolInfo*
Arena::CreateMaybeMessage< ::msg::TDRandPoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDRandPoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDRandPoolData*
Arena::CreateMaybeMessage< ::msg::TDRandPoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDRandPoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerInitchessData*
Arena::CreateMaybeMessage< ::msg::PlayerInitchessData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerInitchessData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessManMaterialData*
Arena::CreateMaybeMessage< ::msg::ChessManMaterialData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessManMaterialData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDCardGroupConfigInfo*
Arena::CreateMaybeMessage< ::msg::TDCardGroupConfigInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDCardGroupConfigInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ItemTypeLimit*
Arena::CreateMaybeMessage< ::msg::ItemTypeLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ItemTypeLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDChessboardPeople*
Arena::CreateMaybeMessage< ::msg::TDChessboardPeople >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDChessboardPeople >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDLevelUpInfo*
Arena::CreateMaybeMessage< ::msg::TDLevelUpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDLevelUpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDLevelUpData*
Arena::CreateMaybeMessage< ::msg::TDLevelUpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDLevelUpData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDComposeInfo*
Arena::CreateMaybeMessage< ::msg::TDComposeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDComposeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDComposeData*
Arena::CreateMaybeMessage< ::msg::TDComposeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDComposeData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDSkillInfo*
Arena::CreateMaybeMessage< ::msg::TDSkillInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDSkillInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::SkillItem*
Arena::CreateMaybeMessage< ::msg::SkillItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::SkillItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDSkillData*
Arena::CreateMaybeMessage< ::msg::TDSkillData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDSkillData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDStageInfo*
Arena::CreateMaybeMessage< ::msg::TDStageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDStageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDStageData*
Arena::CreateMaybeMessage< ::msg::TDStageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDStageData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItemInfo*
Arena::CreateMaybeMessage< ::msg::TDItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItemData*
Arena::CreateMaybeMessage< ::msg::TDItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqTDGetOnHookAward*
Arena::CreateMaybeMessage< ::msg::CSReqTDGetOnHookAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqTDGetOnHookAward >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspTDGetOnHookAward_OnHookTimeRecordEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspTDGetOnHookAward*
Arena::CreateMaybeMessage< ::msg::CSRspTDGetOnHookAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspTDGetOnHookAward >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CsReqTDDraw*
Arena::CreateMaybeMessage< ::msg::CsReqTDDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CsReqTDDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CsRspTDDraw*
Arena::CreateMaybeMessage< ::msg::CsRspTDDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CsRspTDDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CsReqTDBuyCard*
Arena::CreateMaybeMessage< ::msg::CsReqTDBuyCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CsReqTDBuyCard >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CsRspTDBuyCard*
Arena::CreateMaybeMessage< ::msg::CsRspTDBuyCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CsRspTDBuyCard >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfTDPlayerInfo*
Arena::CreateMaybeMessage< ::msg::CSNtfTDPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfTDPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqTDSetCardGroup*
Arena::CreateMaybeMessage< ::msg::CSReqTDSetCardGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqTDSetCardGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspTDSetCardGroup*
Arena::CreateMaybeMessage< ::msg::CSRspTDSetCardGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspTDSetCardGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqTDLevelUp*
Arena::CreateMaybeMessage< ::msg::CSReqTDLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqTDLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspTDLevelUp*
Arena::CreateMaybeMessage< ::msg::CSRspTDLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspTDLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqTDEquip*
Arena::CreateMaybeMessage< ::msg::CSReqTDEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqTDEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSRspTDEquip*
Arena::CreateMaybeMessage< ::msg::CSRspTDEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSRspTDEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDPlayerInfo_OnHookTimeRecordEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDPlayerInfo*
Arena::CreateMaybeMessage< ::msg::TDPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDPlayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
